        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/IR/Block.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Block.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Block.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- Block.cpp - MLIR Block Class ---------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Block.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/Operation.h"
        -:   12:#include "llvm/ADT/BitVector.h"
        -:   13:using namespace mlir;
        -:   14:
        -:   15://===----------------------------------------------------------------------===//
        -:   16:// Block
        -:   17://===----------------------------------------------------------------------===//
        -:   18:
function _ZN4mlir5BlockD2Ev called 1082388 returned 100% blocks executed 87%
  1355707:   19:Block::~Block() {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
 1082388*:   20:  assert(!verifyOpOrder() && "Expected valid operation ordering.");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
  1082388:   21:  clear();
call    0 returned 100%
  1623527:   22:  for (BlockArgument arg : arguments)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
call    2 returned 100%
   541139:   23:    arg.destroy();
call    0 returned 100%
  1082388:   24:}
        -:   25:
function _ZNK4mlir5Block9getParentEv called 35792328 returned 100% blocks executed 100%
 5906852*:   26:Region *Block::getParent() const { return parentValidOpOrderPair.getPointer(); }
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 never executed
branch  3 never executed
        -:   27:
        -:   28:/// Returns the closest surrounding operation that contains this block or
        -:   29:/// nullptr if this block is unlinked.
function _ZN4mlir5Block11getParentOpEv called 3866962 returned 100% blocks executed 100%
 3866962*:   30:Operation *Block::getParentOp() {
 3866962*:   31:  return getParent() ? getParent()->getParentOp() : nullptr;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   32:}
        -:   33:
        -:   34:/// Return if this block is the entry block in the parent region.
function _ZN4mlir5Block12isEntryBlockEv called 651136 returned 100% blocks executed 100%
   651136:   35:bool Block::isEntryBlock() { return this == &getParent()->front(); }
call    0 returned 100%
        -:   36:
        -:   37:/// Insert this block (which must not already be in a region) right before the
        -:   38:/// specified block.
function _ZN4mlir5Block12insertBeforeEPS0_ called 0 returned 0% blocks executed 0%
    #####:   39:void Block::insertBefore(Block *block) {
    #####:   40:  assert(!getParent() && "already inserted into a block!");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   41:  assert(block->getParent() && "cannot insert before a block without a parent");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   42:  block->getParent()->getBlocks().insert(block->getIterator(), this);
call    0 never executed
    #####:   43:}
        -:   44:
        -:   45:/// Unlink this block from its current region and insert it right before the
        -:   46:/// specific block.
function _ZN4mlir5Block10moveBeforeEPS0_ called 1390 returned 100% blocks executed 83%
     1390:   47:void Block::moveBefore(Block *block) {
    1390*:   48:  assert(block->getParent() && "cannot insert before a block without a parent");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     1390:   49:  block->getParent()->getBlocks().splice(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1390:   50:      block->getIterator(), getParent()->getBlocks(), getIterator());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1390:   51:}
        -:   52:
        -:   53:/// Unlink this Block from its parent Region and delete it.
function _ZN4mlir5Block5eraseEv called 5022 returned 100% blocks executed 75%
     5022:   54:void Block::erase() {
    5022*:   55:  assert(getParent() && "Block has no parent");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     5022:   56:  getParent()->getBlocks().erase(this);
call    0 returned 100%
     5022:   57:}
        -:   58:
        -:   59:/// Returns 'op' if 'op' lies in this block, or otherwise finds the
        -:   60:/// ancestor operation of 'op' that lies in this block. Returns nullptr if
        -:   61:/// the latter fails.
function _ZN4mlir5Block21findAncestorOpInBlockERNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   62:Operation *Block::findAncestorOpInBlock(Operation &op) {
        -:   63:  // Traverse up the operation hierarchy starting from the owner of operand to
        -:   64:  // find the ancestor operation that resides in the block of 'forOp'.
    #####:   65:  auto *currOp = &op;
    #####:   66:  while (currOp->getBlock() != this) {
branch  0 never executed
branch  1 never executed
    #####:   67:    currOp = currOp->getParentOp();
branch  0 never executed
branch  1 never executed
    #####:   68:    if (!currOp)
branch  0 never executed
branch  1 never executed
        -:   69:      return nullptr;
        -:   70:  }
        -:   71:  return currOp;
        -:   72:}
        -:   73:
        -:   74:/// This drops all operand uses from operations within this block, which is
        -:   75:/// an essential step in breaking cyclic dependences between references when
        -:   76:/// they are to be deleted.
function _ZN4mlir5Block17dropAllReferencesEv called 2446391 returned 100% blocks executed 100%
  2446391:   77:void Block::dropAllReferences() {
 18341499:   78:  for (Operation &i : *this)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
 15895108:   79:    i.dropAllReferences();
call    0 returned 100%
  2446391:   80:}
        -:   81:
function _ZN4mlir5Block23dropAllDefinedValueUsesEv called 0 returned 0% blocks executed 0%
    #####:   82:void Block::dropAllDefinedValueUses() {
    #####:   83:  for (auto arg : getArguments())
branch  0 never executed
branch  1 never executed
    #####:   84:    arg.dropAllUses();
    #####:   85:  for (auto &op : *this)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   86:    op.dropAllDefinedValueUses();
call    0 never executed
    #####:   87:  dropAllUses();
branch  0 never executed
branch  1 never executed
    #####:   88:}
        -:   89:
        -:   90:/// Returns true if the ordering of the child operations is valid, false
        -:   91:/// otherwise.
function _ZN4mlir5Block14isOpOrderValidEv called 7059154 returned 100% blocks executed 100%
  8323976:   92:bool Block::isOpOrderValid() { return parentValidOpOrderPair.getInt(); }
        -:   93:
        -:   94:/// Invalidates the current ordering of operations.
function _ZN4mlir5Block17invalidateOpOrderEv called 182434 returned 100% blocks executed 75%
   182434:   95:void Block::invalidateOpOrder() {
        -:   96:  // Validate the current ordering.
  182434*:   97:  assert(!verifyOpOrder());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
   182434:   98:  parentValidOpOrderPair.setInt(false);
   182434:   99:}
        -:  100:
        -:  101:/// Verifies the current ordering of child operations. Returns false if the
        -:  102:/// order is valid, true otherwise.
function _ZN4mlir5Block13verifyOpOrderEv called 1264822 returned 100% blocks executed 100%
  1264822:  103:bool Block::verifyOpOrder() {
        -:  104:  // The order is already known to be invalid.
  1264822:  105:  if (!isOpOrderValid())
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  106:    return false;
        -:  107:  // The order is valid if there are less than 2 operations.
   357448:  108:  if (operations.empty() || std::next(operations.begin()) == operations.end())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  109:    return false;
        -:  110:
        -:  111:  Operation *prev = nullptr;
  2097740:  112:  for (auto &i : *this) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
        -:  113:    // The previous operation must have a smaller order index than the next as
        -:  114:    // it appears earlier in the list.
  1920139:  115:    if (prev && prev->orderIndex != Operation::kInvalidOrderIdx &&
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
  1736924:  116:        prev->orderIndex >= i.orderIndex)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1264822:  117:      return true;
  1920139:  118:    prev = &i;
        -:  119:  }
        -:  120:  return false;
        -:  121:}
        -:  122:
        -:  123:/// Recomputes the ordering of child operations within the block.
function _ZN4mlir5Block16recomputeOpOrderEv called 182322 returned 100% blocks executed 100%
   182322:  124:void Block::recomputeOpOrder() {
   182322:  125:  parentValidOpOrderPair.setInt(true);
        -:  126:
   182322:  127:  unsigned orderIndex = 0;
  2161681:  128:  for (auto &op : *this)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
  1979359:  129:    op.orderIndex = (orderIndex += Operation::kOrderStride);
   182323:  130:}
        -:  131:
        -:  132://===----------------------------------------------------------------------===//
        -:  133:// Argument list management.
        -:  134://===----------------------------------------------------------------------===//
        -:  135:
        -:  136:/// Return a range containing the types of the arguments for this block.
function _ZN4mlir5Block16getArgumentTypesEv called 4470 returned 100% blocks executed 100%
     4470:  137:auto Block::getArgumentTypes() -> ValueTypeRange<BlockArgListType> {
     4470:  138:  return ValueTypeRange<BlockArgListType>(getArguments());
        -:  139:}
        -:  140:
function _ZN4mlir5Block11addArgumentENS_4TypeENS_8LocationE called 541924 returned 100% blocks executed 100%
   541924:  141:BlockArgument Block::addArgument(Type type, Location loc) {
   541924:  142:  BlockArgument arg = BlockArgument::create(type, this, arguments.size(), loc);
call    0 returned 100%
   541924:  143:  arguments.push_back(arg);
call    0 returned 100%
   541924:  144:  return arg;
        -:  145:}
        -:  146:
        -:  147:/// Add one argument to the argument list for each type specified in the list.
function _ZN4mlir5Block12addArgumentsENS_9TypeRangeEN4llvm8ArrayRefINS_8LocationEEE called 3108 returned 100% blocks executed 89%
     3108:  148:auto Block::addArguments(TypeRange types, ArrayRef<Location> locs)
        -:  149:    -> iterator_range<args_iterator> {
    3108*:  150:  assert(types.size() == locs.size() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  151:         "incorrect number of block argument locations");
     3108:  152:  size_t initialSize = arguments.size();
call    0 returned 100%
     3108:  153:  arguments.reserve(initialSize + types.size());
call    0 returned 100%
        -:  154:
     7938:  155:  for (auto typeAndLoc : llvm::zip(types, locs))
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
     4830:  156:    addArgument(std::get<0>(typeAndLoc), std::get<1>(typeAndLoc));
call    0 returned 100%
     3108:  157:  return {arguments.data() + initialSize, arguments.data() + arguments.size()};
        -:  158:}
        -:  159:
function _ZN4mlir5Block14insertArgumentEjNS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  160:BlockArgument Block::insertArgument(unsigned index, Type type, Location loc) {
    #####:  161:  assert(index <= arguments.size() && "invalid insertion index");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  162:
    #####:  163:  auto arg = BlockArgument::create(type, this, index, loc);
call    0 never executed
    #####:  164:  arguments.insert(arguments.begin() + index, arg);
call    0 never executed
        -:  165:  // Update the cached position for all the arguments after the newly inserted
        -:  166:  // one.
    #####:  167:  ++index;
    #####:  168:  for (BlockArgument arg : llvm::drop_begin(arguments, index))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  169:    arg.setArgNumber(index++);
    #####:  170:  return arg;
        -:  171:}
        -:  172:
        -:  173:/// Insert one value to the given position of the argument list. The existing
        -:  174:/// arguments are shifted. The block is expected not to have predecessors.
function _ZN4mlir5Block14insertArgumentEPNS_13BlockArgumentENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  175:BlockArgument Block::insertArgument(args_iterator it, Type type, Location loc) {
    #####:  176:  assert(getPredecessors().empty() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  177:         "cannot insert arguments to blocks with predecessors");
    #####:  178:  return insertArgument(it->getArgNumber(), type, loc);
call    0 never executed
        -:  179:}
        -:  180:
function _ZN4mlir5Block13eraseArgumentEj called 0 returned 0% blocks executed 0%
    #####:  181:void Block::eraseArgument(unsigned index) {
    #####:  182:  assert(index < arguments.size());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  183:  arguments[index].destroy();
call    0 never executed
    #####:  184:  arguments.erase(arguments.begin() + index);
call    0 never executed
    #####:  185:  for (BlockArgument arg : llvm::drop_begin(arguments, index))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  186:    arg.setArgNumber(index++);
    #####:  187:}
        -:  188:
function _ZN4mlir5Block14eraseArgumentsEjj called 0 returned 0% blocks executed 0%
    #####:  189:void Block::eraseArguments(unsigned start, unsigned num) {
    #####:  190:  assert(start + num <= arguments.size());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  191:  for (unsigned i = 0; i < num; ++i)
branch  0 never executed
branch  1 never executed
    #####:  192:    arguments[start + i].destroy();
call    0 never executed
    #####:  193:  arguments.erase(arguments.begin() + start, arguments.begin() + start + num);
call    0 never executed
    #####:  194:  for (BlockArgument arg : llvm::drop_begin(arguments, start))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  195:    arg.setArgNumber(start++);
    #####:  196:}
        -:  197:
function _ZN4mlir5Block14eraseArgumentsERKN4llvm9BitVectorE called 861 returned 100% blocks executed 100%
      861:  198:void Block::eraseArguments(const BitVector &eraseIndices) {
      861:  199:  eraseArguments(
call    0 returned 100%
     1736:  200:      [&](BlockArgument arg) { return eraseIndices.test(arg.getArgNumber()); });
call    0 returned 100%
      861:  201:}
        -:  202:
function _ZN4mlir5Block14eraseArgumentsEN4llvm12function_refIFbNS_13BlockArgumentEEEE called 861 returned 100% blocks executed 25%
      861:  203:void Block::eraseArguments(function_ref<bool(BlockArgument)> shouldEraseFn) {
      861:  204:  auto firstDead = llvm::find_if(arguments, shouldEraseFn);
call    0 returned 100%
      861:  205:  if (firstDead == arguments.end())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      861:  206:    return;
        -:  207:
        -:  208:  // Destroy the first dead argument, this avoids reapplying the predicate to
        -:  209:  // it.
    #####:  210:  unsigned index = firstDead->getArgNumber();
call    0 never executed
    #####:  211:  firstDead->destroy();
call    0 never executed
        -:  212:
        -:  213:  // Iterate the remaining arguments to remove any that are now dead.
    #####:  214:  for (auto it = std::next(firstDead), e = arguments.end(); it != e; ++it) {
branch  0 never executed
branch  1 never executed
        -:  215:    // Destroy dead arguments, and shift those that are still live.
    #####:  216:    if (shouldEraseFn(*it)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  217:      it->destroy();
call    0 never executed
        -:  218:    } else {
    #####:  219:      it->setArgNumber(index++);
    #####:  220:      *firstDead++ = *it;
        -:  221:    }
        -:  222:  }
    #####:  223:  arguments.erase(firstDead, arguments.end());
call    0 never executed
        -:  224:}
        -:  225:
        -:  226://===----------------------------------------------------------------------===//
        -:  227:// Terminator management
        -:  228://===----------------------------------------------------------------------===//
        -:  229:
        -:  230:/// Get the terminator operation of this block. This function asserts that
        -:  231:/// the block has a valid terminator operation.
function _ZN4mlir5Block13getTerminatorEv called 65554 returned 100% blocks executed 86%
    65554:  232:Operation *Block::getTerminator() {
  131108*:  233:  assert(!empty() && back().mightHaveTrait<OpTrait::IsTerminator>());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
    65554:  234:  return &back();
call    0 returned 100%
        -:  235:}
        -:  236:
        -:  237:// Indexed successor access.
function _ZN4mlir5Block16getNumSuccessorsEv called 1746 returned 100% blocks executed 100%
    1746*:  238:unsigned Block::getNumSuccessors() {
    3491*:  239:  return empty() ? 0 : back().getNumSuccessors();
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:  240:}
        -:  241:
function _ZN4mlir5Block12getSuccessorEj called 0 returned 0% blocks executed 0%
    #####:  242:Block *Block::getSuccessor(unsigned i) {
    #####:  243:  assert(i < getNumSuccessors());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  244:  return getTerminator()->getSuccessor(i);
call    0 never executed
call    1 never executed
        -:  245:}
        -:  246:
        -:  247:/// If this block has exactly one predecessor, return it.  Otherwise, return
        -:  248:/// null.
        -:  249:///
        -:  250:/// Note that multiple edges from a single block (e.g. if you have a cond
        -:  251:/// branch with the same block as the true/false destinations) is not
        -:  252:/// considered to be a single predecessor.
function _ZN4mlir5Block20getSinglePredecessorEv called 0 returned 0% blocks executed 0%
    #####:  253:Block *Block::getSinglePredecessor() {
    #####:  254:  auto it = pred_begin();
branch  0 never executed
branch  1 never executed
    #####:  255:  if (it == pred_end())
branch  0 never executed
branch  1 never executed
        -:  256:    return nullptr;
    #####:  257:  auto *firstPred = *it;
branch  0 never executed
branch  1 never executed
    #####:  258:  ++it;
branch  0 never executed
branch  1 never executed
    #####:  259:  return it == pred_end() ? firstPred : nullptr;
branch  0 never executed
branch  1 never executed
        -:  260:}
        -:  261:
        -:  262:/// If this block has a unique predecessor, i.e., all incoming edges originate
        -:  263:/// from one block, return it. Otherwise, return null.
function _ZN4mlir5Block20getUniquePredecessorEv called 0 returned 0% blocks executed 0%
    #####:  264:Block *Block::getUniquePredecessor() {
    #####:  265:  auto it = pred_begin(), e = pred_end();
branch  0 never executed
branch  1 never executed
    #####:  266:  if (it == e)
branch  0 never executed
branch  1 never executed
        -:  267:    return nullptr;
        -:  268:
        -:  269:  // Check for any conflicting predecessors.
    #####:  270:  auto *firstPred = *it;
    #####:  271:  for (++it; it != e; ++it)
branch  0 never executed
branch  1 never executed
    #####:  272:    if (*it != firstPred)
branch  0 never executed
branch  1 never executed
        -:  273:      return nullptr;
        -:  274:  return firstPred;
        -:  275:}
        -:  276:
        -:  277://===----------------------------------------------------------------------===//
        -:  278:// Other
        -:  279://===----------------------------------------------------------------------===//
        -:  280:
        -:  281:/// Split the block into two blocks before the specified operation or
        -:  282:/// iterator.
        -:  283:///
        -:  284:/// Note that all operations BEFORE the specified iterator stay as part of
        -:  285:/// the original basic block, and the rest of the operations in the original
        -:  286:/// block are moved to the new block, including the old terminator.  The
        -:  287:/// original block is left without a terminator.
        -:  288:///
        -:  289:/// The newly formed Block is returned, and the specified iterator is
        -:  290:/// invalidated.
function _ZN4mlir5Block10splitBlockEN4llvm14ilist_iteratorINS1_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEE called 2246 returned 100% blocks executed 100%
     2246:  291:Block *Block::splitBlock(iterator splitBefore) {
        -:  292:  // Start by creating a new basic block, and insert it immediate after this
        -:  293:  // one in the containing region.
     2246:  294:  auto *newBB = new Block();
call    0 returned 100%
call    1 returned 100%
     4492:  295:  getParent()->getBlocks().insert(std::next(Region::iterator(this)), newBB);
call    0 returned 100%
        -:  296:
        -:  297:  // Move all of the operations from the split point to the end of the region
        -:  298:  // into the new block.
     2246:  299:  newBB->getOperations().splice(newBB->end(), getOperations(), splitBefore,
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  300:                                end());
     2246:  301:  return newBB;
        -:  302:}
        -:  303:
        -:  304://===----------------------------------------------------------------------===//
        -:  305:// Predecessors
        -:  306://===----------------------------------------------------------------------===//
        -:  307:
function _ZN4mlir19PredecessorIterator6unwrapERNS_12BlockOperandE called 6573 returned 100% blocks executed 100%
     6573:  308:Block *PredecessorIterator::unwrap(BlockOperand &value) {
     6573:  309:  return value.getOwner()->getBlock();
        -:  310:}
        -:  311:
        -:  312:/// Get the successor number in the predecessor terminator.
function _ZNK4mlir19PredecessorIterator17getSuccessorIndexEv called 0 returned 0% blocks executed 0%
    #####:  313:unsigned PredecessorIterator::getSuccessorIndex() const {
    #####:  314:  return I->getOperandNumber();
call    0 never executed
        -:  315:}
        -:  316:
        -:  317://===----------------------------------------------------------------------===//
        -:  318:// SuccessorRange
        -:  319://===----------------------------------------------------------------------===//
        -:  320:
function _ZN4mlir14SuccessorRangeC2Ev called 0 returned 0% blocks executed 0%
 2285720*:  321:SuccessorRange::SuccessorRange() : SuccessorRange(nullptr, 0) {}
        -:  322:
function _ZN4mlir14SuccessorRangeC2EPNS_5BlockE called 2041192 returned 100% blocks executed 89%
  2041192:  323:SuccessorRange::SuccessorRange(Block *block) : SuccessorRange() {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
  2041192:  324:  if (block->empty() || llvm::hasSingleElement(*block->getParent()))
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
        -:  325:    return;
    31917:  326:  Operation *term = &block->back();
call    0 returned 100%
    31926:  327:  if ((count = term->getNumSuccessors()))
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
    27231:  328:    base = term->getBlockOperands().data();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  329:}
        -:  330:
function _ZN4mlir14SuccessorRangeC2EPNS_9OperationE called 244528 returned 100% blocks executed 80%
   244528:  331:SuccessorRange::SuccessorRange(Operation *term) : SuccessorRange() {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
   244528:  332:  if ((count = term->getNumSuccessors()))
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     7512:  333:    base = term->getBlockOperands().data();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   244528:  334:}
        -:  335:
        -:  336://===----------------------------------------------------------------------===//
        -:  337:// BlockRange
        -:  338://===----------------------------------------------------------------------===//
        -:  339:
function _ZN4mlir10BlockRangeC2EN4llvm8ArrayRefIPNS_5BlockEEE called 4880863 returned 100% blocks executed 100%
  4880863:  340:BlockRange::BlockRange(ArrayRef<Block *> blocks) : BlockRange(nullptr, 0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
  4880863:  341:  if ((count = blocks.size()))
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     3756:  342:    base = blocks.data();
call    0 returned 100%
  4880863:  343:}
        -:  344:
function _ZN4mlir10BlockRangeC2ENS_14SuccessorRangeE called 26 returned 100% blocks executed 100%
       26:  345:BlockRange::BlockRange(SuccessorRange successors)
       26:  346:    : BlockRange(successors.begin().getBase(), successors.size()) {}
call    0 returned 100%
        -:  347:
        -:  348:/// See `llvm::detail::indexed_accessor_range_base` for details.
function _ZN4mlir10BlockRange11offset_baseEN4llvm12PointerUnionIJPNS_12BlockOperandEPKPNS_5BlockEEEEl called 0 returned 0% blocks executed 0%
    #####:  349:BlockRange::OwnerT BlockRange::offset_base(OwnerT object, ptrdiff_t index) {
    #####:  350:  if (auto *operand = object.dyn_cast<BlockOperand *>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  351:    return {operand + index};
call    0 never executed
    #####:  352:  return {object.dyn_cast<Block *const *>() + index};
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  353:}
        -:  354:
        -:  355:/// See `llvm::detail::indexed_accessor_range_base` for details.
function _ZN4mlir10BlockRange20dereference_iteratorEN4llvm12PointerUnionIJPNS_12BlockOperandEPKPNS_5BlockEEEEl called 5634 returned 100% blocks executed 89%
     5634:  356:Block *BlockRange::dereference_iterator(OwnerT object, ptrdiff_t index) {
    11268:  357:  if (const auto *operand = object.dyn_cast<BlockOperand *>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  358:    return operand[index].get();
    11268:  359:  return object.dyn_cast<Block *const *>()[index];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  360:}
