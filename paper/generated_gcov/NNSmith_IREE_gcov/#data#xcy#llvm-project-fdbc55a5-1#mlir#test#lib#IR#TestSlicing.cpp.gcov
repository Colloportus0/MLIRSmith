        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/IR/TestSlicing.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestSlicing.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestSlicing.cpp.gcda
        -:    0:Runs:325561
        -:    1://===- TestSlicing.cpp - Testing slice functionality ----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a simple testing pass for slicing.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Analysis/SliceAnalysis.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   16:#include "mlir/IR/BlockAndValueMapping.h"
        -:   17:#include "mlir/IR/BuiltinOps.h"
        -:   18:#include "mlir/IR/PatternMatch.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:#include "mlir/Support/LLVM.h"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:/// Create a function with the same signature as the parent function of `op`
        -:   25:/// with name being the function name and a `suffix`.
function _ZL27createBackwardSliceFunctionPN4mlir9OperationEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:   26:static LogicalResult createBackwardSliceFunction(Operation *op,
        -:   27:                                                 StringRef suffix) {
    #####:   28:  func::FuncOp parentFuncOp = op->getParentOfType<func::FuncOp>();
call    0 never executed
    #####:   29:  OpBuilder builder(parentFuncOp);
call    0 never executed
    #####:   30:  Location loc = op->getLoc();
branch  0 never executed
branch  1 never executed
    #####:   31:  std::string clonedFuncOpName = parentFuncOp.getName().str() + suffix.str();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:   32:  func::FuncOp clonedFuncOp = builder.create<func::FuncOp>(
    #####:   33:      loc, clonedFuncOpName, parentFuncOp.getFunctionType());
call    0 never executed
call    1 never executed
    #####:   34:  BlockAndValueMapping mapper;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   35:  builder.setInsertionPointToEnd(clonedFuncOp.addEntryBlock());
call    0 never executed
call    1 never executed
    #####:   36:  for (const auto &arg : enumerate(parentFuncOp.getArguments()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   37:    mapper.map(arg.value(), clonedFuncOp.getArgument(arg.index()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   38:  SetVector<Operation *> slice;
call    0 never executed
call    1 never executed
    #####:   39:  getBackwardSlice(op, &slice);
call    0 never executed
    #####:   40:  for (Operation *slicedOp : slice)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   41:    builder.clone(*slicedOp, mapper);
call    0 never executed
    #####:   42:  builder.create<func::ReturnOp>(loc);
call    0 never executed
    #####:   43:  return success();
call    0 never executed
        -:   44:}
        -:   45:
        -:   46:namespace {
        -:   47:/// Pass to test slice generated from slice analysis.
        -:   48:struct SliceAnalysisTestPass
        -:   49:    : public PassWrapper<SliceAnalysisTestPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_121SliceAnalysisTestPass13resolveTypeIDEv called 326656 returned 100% blocks executed 100%
   326656:   50:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(SliceAnalysisTestPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   51:
function _ZNK12_GLOBAL__N_121SliceAnalysisTestPass11getArgumentEv called 325594 returned 100% blocks executed 100%
   325594:   52:  StringRef getArgument() const final { return "slice-analysis-test"; }
function _ZNK12_GLOBAL__N_121SliceAnalysisTestPass14getDescriptionEv called 325561 returned 100% blocks executed 100%
   325561:   53:  StringRef getDescription() const final {
   325561:   54:    return "Test Slice analysis functionality.";
        -:   55:  }
        -:   56:  void runOnOperation() override;
   326656:   57:  SliceAnalysisTestPass() = default;
call    0 returned 100%
        -:   58:  SliceAnalysisTestPass(const SliceAnalysisTestPass &) {}
        -:   59:};
        -:   60:} // namespace
        -:   61:
function _ZN12_GLOBAL__N_121SliceAnalysisTestPass14runOnOperationEv called 882 returned 100% blocks executed 100%
      882:   62:void SliceAnalysisTestPass::runOnOperation() {
      882:   63:  ModuleOp module = getOperation();
call    0 returned 100%
      882:   64:  auto funcOps = module.getOps<func::FuncOp>();
call    0 returned 100%
      882:   65:  unsigned opNum = 0;
     1874:   66:  for (auto funcOp : funcOps) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
call    2 returned 100%
        -:   67:    // TODO: For now this is just looking for Linalg ops. It can be generalized
        -:   68:    // to look for other ops using flags.
function _ZZN12_GLOBAL__N_121SliceAnalysisTestPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 11012 returned 100% blocks executed 26%
    11012:   69:    funcOp.walk([&](Operation *op) {
    11012:   70:      if (!isa<linalg::LinalgOp>(op))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    11012:   71:        return WalkResult::advance();
    #####:   72:      std::string append =
    #####:   73:          std::string("__backward_slice__") + std::to_string(opNum);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   74:      (void)createBackwardSliceFunction(op, append);
call    0 never executed
    #####:   75:      opNum++;
    #####:   76:      return WalkResult::advance();
branch  0 never executed
branch  1 never executed
      992:   77:    });
call    0 returned 100%
call    1 returned 100%
        -:   78:  }
      882:   79:}
        -:   80:
        -:   81:namespace mlir {
function _ZN4mlir29registerSliceAnalysisTestPassEv called 325561 returned 100% blocks executed 100%
   325561:   82:void registerSliceAnalysisTestPass() {
   325561:   83:  PassRegistration<SliceAnalysisTestPass>();
call    0 returned 100%
   325561:   84:}
        -:   85:} // namespace mlir
