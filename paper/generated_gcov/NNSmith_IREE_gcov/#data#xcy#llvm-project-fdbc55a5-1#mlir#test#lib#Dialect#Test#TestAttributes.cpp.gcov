        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Test/TestAttributes.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Test/CMakeFiles/MLIRTestDialect.dir/TestAttributes.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Test/CMakeFiles/MLIRTestDialect.dir/TestAttributes.cpp.gcda
        -:    0:Runs:325561
        -:    1://===- TestAttributes.cpp - MLIR Test Dialect Attributes --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains attributes defined by the TestDialect for testing various
        -:   10:// features of MLIR.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "TestAttributes.h"
        -:   15:#include "TestDialect.h"
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:#include "mlir/IR/DialectImplementation.h"
        -:   18:#include "mlir/IR/ExtensibleDialect.h"
        -:   19:#include "mlir/IR/Types.h"
        -:   20:#include "mlir/Support/LogicalResult.h"
        -:   21:#include "llvm/ADT/Hashing.h"
        -:   22:#include "llvm/ADT/TypeSwitch.h"
        -:   23:#include "llvm/ADT/bit.h"
        -:   24:#include "llvm/Support/ErrorHandling.h"
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace test;
        -:   28:
        -:   29://===----------------------------------------------------------------------===//
        -:   30:// CompoundAAttr
        -:   31://===----------------------------------------------------------------------===//
        -:   32:
function _ZN4test13CompoundAAttr5parseERN4mlir9AsmParserENS1_4TypeE called 0 returned 0% blocks executed 0%
    #####:   33:Attribute CompoundAAttr::parse(AsmParser &parser, Type type) {
    #####:   34:  int widthOfSomething;
    #####:   35:  Type oneType;
    #####:   36:  SmallVector<int, 4> arrayOfInts;
call    0 never executed
    #####:   37:  if (parser.parseLess() || parser.parseInteger(widthOfSomething) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   38:      parser.parseComma() || parser.parseType(oneType) || parser.parseComma() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:   39:      parser.parseLSquare())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    return Attribute();
        -:   41:
    #####:   42:  int intVal;
    #####:   43:  while (!*parser.parseOptionalInteger(intVal)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   44:    arrayOfInts.push_back(intVal);
call    0 never executed
    #####:   45:    if (parser.parseOptionalComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   46:      break;
        -:   47:  }
        -:   48:
    #####:   49:  if (parser.parseRSquare() || parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   50:    return Attribute();
    #####:   51:  return get(parser.getContext(), widthOfSomething, oneType, arrayOfInts);
call    0 never executed
call    1 never executed
        -:   52:}
        -:   53:
function _ZNK4test13CompoundAAttr5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   54:void CompoundAAttr::print(AsmPrinter &printer) const {
    #####:   55:  printer << "<" << getWidthOfSomething() << ", " << getOneType() << ", [";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   56:  llvm::interleaveComma(getArrayOfInts(), printer);
call    0 never executed
    #####:   57:  printer << "]>";
call    0 never executed
    #####:   58:}
        -:   59:
        -:   60://===----------------------------------------------------------------------===//
        -:   61:// CompoundAAttr
        -:   62://===----------------------------------------------------------------------===//
        -:   63:
function _ZN4test19TestI64ElementsAttr5parseERN4mlir9AsmParserENS1_4TypeE called 0 returned 0% blocks executed 0%
    #####:   64:Attribute TestI64ElementsAttr::parse(AsmParser &parser, Type type) {
    #####:   65:  SmallVector<uint64_t> elements;
call    0 never executed
    #####:   66:  if (parser.parseLess() || parser.parseLSquare())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   67:    return Attribute();
    #####:   68:  uint64_t intVal;
    #####:   69:  while (succeeded(*parser.parseOptionalInteger(intVal))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   70:    elements.push_back(intVal);
call    0 never executed
    #####:   71:    if (parser.parseOptionalComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   72:      break;
        -:   73:  }
        -:   74:
    #####:   75:  if (parser.parseRSquare() || parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   76:    return Attribute();
    #####:   77:  return parser.getChecked<TestI64ElementsAttr>(
call    0 never executed
    #####:   78:      parser.getContext(), type.cast<ShapedType>(), elements);
call    0 never executed
call    1 never executed
        -:   79:}
        -:   80:
function _ZNK4test19TestI64ElementsAttr5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   81:void TestI64ElementsAttr::print(AsmPrinter &printer) const {
    #####:   82:  printer << "<[";
call    0 never executed
    #####:   83:  llvm::interleaveComma(getElements(), printer);
call    0 never executed
    #####:   84:  printer << "] : " << getType() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   85:}
        -:   86:
        -:   87:LogicalResult
function _ZN4test19TestI64ElementsAttr6verifyEN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS3_10ShapedTypeENS1_8ArrayRefImEE called 0 returned 0% blocks executed 0%
    #####:   88:TestI64ElementsAttr::verify(function_ref<InFlightDiagnostic()> emitError,
        -:   89:                            ShapedType type, ArrayRef<uint64_t> elements) {
    #####:   90:  if (type.getNumElements() != static_cast<int64_t>(elements.size())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   91:    return emitError()
call    0 never executed
call    1 never executed
    #####:   92:           << "number of elements does not match the provided shape type, got: "
    #####:   93:           << elements.size() << ", but expected: " << type.getNumElements();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   94:  }
    #####:   95:  if (type.getRank() != 1 || !type.getElementType().isSignlessInteger(64))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   96:    return emitError() << "expected single rank 64-bit shape type, but got: "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   97:                       << type;
call    0 never executed
    #####:   98:  return success();
        -:   99:}
        -:  100:
        -:  101:LogicalResult
function _ZN4test22TestAttrWithFormatAttr6verifyEN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEElNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS3_11IntegerAttrENS1_8ArrayRefIiEENSE_INS_23AttrWithTypeBuilderAttrEEE called 0 returned 0% blocks executed 0%
    #####:  102:TestAttrWithFormatAttr::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  103:                               int64_t one, std::string two, IntegerAttr three,
        -:  104:                               ArrayRef<int> four,
        -:  105:                               ArrayRef<AttrWithTypeBuilderAttr> arrayOfAttrs) {
    #####:  106:  if (four.size() != static_cast<unsigned>(one))
branch  0 never executed
branch  1 never executed
    #####:  107:    return emitError() << "expected 'one' to equal 'four.size()'";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  108:  return success();
        -:  109:}
        -:  110:
        -:  111://===----------------------------------------------------------------------===//
        -:  112:// Utility Functions for Generated Attributes
        -:  113://===----------------------------------------------------------------------===//
        -:  114:
function _ZL13parseIntArrayRN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  115:static FailureOr<SmallVector<int>> parseIntArray(AsmParser &parser) {
    #####:  116:  SmallVector<int> ints;
call    0 never executed
function _ZZL13parseIntArrayRN4mlir9AsmParserEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  117:  if (parser.parseLSquare() || parser.parseCommaSeparatedList([&]() {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  118:        ints.push_back(0);
call    0 never executed
    #####:  119:        return parser.parseInteger(ints.back());
call    0 never executed
call    1 never executed
    #####:  120:      }) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  121:      parser.parseRSquare())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  122:    return failure();
    #####:  123:  return ints;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  124:}
        -:  125:
function _ZL13printIntArrayRN4mlir10AsmPrinterEN4llvm8ArrayRefIiEE called 0 returned 0% blocks executed 0%
    #####:  126:static void printIntArray(AsmPrinter &printer, ArrayRef<int> ints) {
    #####:  127:  printer << '[';
call    0 never executed
    #####:  128:  llvm::interleaveComma(ints, printer);
call    0 never executed
    #####:  129:  printer << ']';
call    0 never executed
    #####:  130:}
        -:  131:
        -:  132://===----------------------------------------------------------------------===//
        -:  133:// TestSubElementsAccessAttr
        -:  134://===----------------------------------------------------------------------===//
        -:  135:
function _ZN4test25TestSubElementsAccessAttr5parseERN4mlir9AsmParserENS1_4TypeE called 0 returned 0% blocks executed 0%
    #####:  136:Attribute TestSubElementsAccessAttr::parse(::mlir::AsmParser &parser,
        -:  137:                                           ::mlir::Type type) {
    #####:  138:  Attribute first, second, third;
    #####:  139:  if (parser.parseLess() || parser.parseAttribute(first) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  140:      parser.parseComma() || parser.parseAttribute(second) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  141:      parser.parseComma() || parser.parseAttribute(third) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  142:      parser.parseGreater()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:    return {};
        -:  144:  }
    #####:  145:  return get(parser.getContext(), first, second, third);
call    0 never executed
call    1 never executed
        -:  146:}
        -:  147:
function _ZNK4test25TestSubElementsAccessAttr5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  148:void TestSubElementsAccessAttr::print(::mlir::AsmPrinter &printer) const {
    #####:  149:  printer << "<" << getFirst() << ", " << getSecond() << ", " << getThird()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  150:          << ">";
    #####:  151:}
        -:  152:
function _ZNK4test25TestSubElementsAccessAttr24walkImmediateSubElementsEN4llvm12function_refIFvN4mlir9AttributeEEEENS2_IFvNS3_4TypeEEEE called 0 returned 0% blocks executed 0%
    #####:  153:void TestSubElementsAccessAttr::walkImmediateSubElements(
        -:  154:    llvm::function_ref<void(mlir::Attribute)> walkAttrsFn,
        -:  155:    llvm::function_ref<void(mlir::Type)> walkTypesFn) const {
    #####:  156:  walkAttrsFn(getFirst());
call    0 never executed
    #####:  157:  walkAttrsFn(getSecond());
call    0 never executed
    #####:  158:  walkAttrsFn(getThird());
call    0 never executed
    #####:  159:}
        -:  160:
function _ZNK4test25TestSubElementsAccessAttr27replaceImmediateSubElementsEN4llvm8ArrayRefIN4mlir9AttributeEEENS2_INS3_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  161:Attribute TestSubElementsAccessAttr::replaceImmediateSubElements(
        -:  162:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  163:  assert(replAttrs.size() == 3 && "invalid number of replacement attributes");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  164:  return get(getContext(), replAttrs[0], replAttrs[1], replAttrs[2]);
call    0 never executed
call    1 never executed
        -:  165:}
        -:  166:
        -:  167://===----------------------------------------------------------------------===//
        -:  168:// TestExtern1DI64ElementsAttr
        -:  169://===----------------------------------------------------------------------===//
        -:  170:
function _ZNK4test27TestExtern1DI64ElementsAttr11getElementsEv called 0 returned 0% blocks executed 0%
    #####:  171:ArrayRef<uint64_t> TestExtern1DI64ElementsAttr::getElements() const {
    #####:  172:  if (auto *blob = getHandle().getBlob())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  173:    return blob->getDataAs<uint64_t>();
    #####:  174:  return llvm::None;
call    0 never executed
        -:  175:}
        -:  176:
        -:  177://===----------------------------------------------------------------------===//
        -:  178:// TestCustomAnchorAttr
        -:  179://===----------------------------------------------------------------------===//
        -:  180:
function _ZL14parseTrueFalseRN4mlir9AsmParserERNS_9FailureOrIN4llvm8OptionalIiEEEE called 0 returned 0% blocks executed 0%
    #####:  181:static ParseResult parseTrueFalse(AsmParser &p,
        -:  182:                                  FailureOr<Optional<int>> &result) {
    #####:  183:  bool b;
    #####:  184:  if (p.parseInteger(b))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:    return failure();
    #####:  186:  result = Optional<int>(b);
    #####:  187:  return success();
        -:  188:}
        -:  189:
        -:  190:static void printTrueFalse(AsmPrinter &p, Optional<int> result) {
        -:  191:  p << (*result ? "true" : "false");
        -:  192:}
        -:  193:
        -:  194://===----------------------------------------------------------------------===//
        -:  195:// Tablegen Generated Definitions
        -:  196://===----------------------------------------------------------------------===//
        -:  197:
        -:  198:#include "TestAttrInterfaces.cpp.inc"
        -:  199:
        -:  200:#define GET_ATTRDEF_CLASSES
        -:  201:#include "TestAttrDefs.cpp.inc"
        -:  202:
        -:  203://===----------------------------------------------------------------------===//
        -:  204:// Dynamic Attributes
        -:  205://===----------------------------------------------------------------------===//
        -:  206:
        -:  207:/// Define a singleton dynamic attribute.
        -:  208:static std::unique_ptr<DynamicAttrDefinition>
function _ZL23getDynamicSingletonAttrPN4test11TestDialectE called 5108 returned 100% blocks executed 100%
     5108:  209:getDynamicSingletonAttr(TestDialect *testDialect) {
     5108:  210:  return DynamicAttrDefinition::get(
        -:  211:      "dynamic_singleton", testDialect,
function _ZZL23getDynamicSingletonAttrPN4test11TestDialectEENKUlN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS2_8ArrayRefINS4_9AttributeEEEE_clES7_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  212:      [](function_ref<InFlightDiagnostic()> emitError,
        -:  213:         ArrayRef<Attribute> args) {
    #####:  214:        if (!args.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  215:          emitError() << "expected 0 attribute arguments, but had "
call    0 never executed
call    1 never executed
    #####:  216:                      << args.size();
call    0 never executed
call    1 never executed
    #####:  217:          return failure();
        -:  218:        }
    #####:  219:        return success();
     5108:  220:      });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  221:}
        -:  222:
        -:  223:/// Define a dynamic attribute representing a pair or attributes.
        -:  224:static std::unique_ptr<DynamicAttrDefinition>
function _ZL18getDynamicPairAttrPN4test11TestDialectE called 5108 returned 100% blocks executed 100%
     5108:  225:getDynamicPairAttr(TestDialect *testDialect) {
     5108:  226:  return DynamicAttrDefinition::get(
        -:  227:      "dynamic_pair", testDialect,
function _ZZL18getDynamicPairAttrPN4test11TestDialectEENKUlN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS2_8ArrayRefINS4_9AttributeEEEE_clES7_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  228:      [](function_ref<InFlightDiagnostic()> emitError,
        -:  229:         ArrayRef<Attribute> args) {
    #####:  230:        if (args.size() != 2) {
branch  0 never executed
branch  1 never executed
    #####:  231:          emitError() << "expected 2 attribute arguments, but had "
call    0 never executed
call    1 never executed
    #####:  232:                      << args.size();
call    0 never executed
call    1 never executed
    #####:  233:          return failure();
        -:  234:        }
    #####:  235:        return success();
     5108:  236:      });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  237:}
        -:  238:
        -:  239:static std::unique_ptr<DynamicAttrDefinition>
function _ZL34getDynamicCustomAssemblyFormatAttrPN4test11TestDialectE called 5108 returned 100% blocks executed 100%
     5108:  240:getDynamicCustomAssemblyFormatAttr(TestDialect *testDialect) {
function _ZZL34getDynamicCustomAssemblyFormatAttrPN4test11TestDialectEENKUlN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS2_8ArrayRefINS4_9AttributeEEEE_clES7_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  241:  auto verifier = [](function_ref<InFlightDiagnostic()> emitError,
        -:  242:                     ArrayRef<Attribute> args) {
    #####:  243:    if (args.size() != 2) {
branch  0 never executed
branch  1 never executed
    #####:  244:      emitError() << "expected 2 attribute arguments, but had " << args.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  245:      return failure();
        -:  246:    }
    #####:  247:    return success();
        -:  248:  };
        -:  249:
function _ZZL34getDynamicCustomAssemblyFormatAttrPN4test11TestDialectEENKUlRN4mlir9AsmParserERN4llvm15SmallVectorImplINS2_9AttributeEEEE0_clES4_S9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  250:  auto parser = [](AsmParser &parser,
        -:  251:                   llvm::SmallVectorImpl<Attribute> &parsedParams) {
    #####:  252:    Attribute leftAttr, rightAttr;
    #####:  253:    if (parser.parseLess() || parser.parseAttribute(leftAttr) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  254:        parser.parseColon() || parser.parseAttribute(rightAttr) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  255:        parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  256:      return failure();
    #####:  257:    parsedParams.push_back(leftAttr);
call    0 never executed
    #####:  258:    parsedParams.push_back(rightAttr);
call    0 never executed
    #####:  259:    return success();
        -:  260:  };
        -:  261:
function _ZZL34getDynamicCustomAssemblyFormatAttrPN4test11TestDialectEENKUlRN4mlir10AsmPrinterEN4llvm8ArrayRefINS2_9AttributeEEEE1_clES4_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  262:  auto printer = [](AsmPrinter &printer, ArrayRef<Attribute> params) {
    #####:  263:    printer << "<" << params[0] << ":" << params[1] << ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  264:  };
        -:  265:
     5108:  266:  return DynamicAttrDefinition::get("dynamic_custom_assembly_format",
call    0 returned 100%
     5108:  267:                                    testDialect, std::move(verifier),
call    0 returned 100%
     5108:  268:                                    std::move(parser), std::move(printer));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:  269:}
        -:  270:
        -:  271://===----------------------------------------------------------------------===//
        -:  272:// TestDialect
        -:  273://===----------------------------------------------------------------------===//
        -:  274:
function _ZN4test11TestDialect18registerAttributesEv called 5108 returned 100% blocks executed 79%
     5108:  275:void TestDialect::registerAttributes() {
     5108:  276:  addAttributes<
        -:  277:#define GET_ATTRDEF_LIST
        -:  278:#include "TestAttrDefs.cpp.inc"
     5108:  279:      >();
call    0 returned 100%
     5108:  280:  registerDynamicAttr(getDynamicSingletonAttr(this));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     5108:  281:  registerDynamicAttr(getDynamicPairAttr(this));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     5108:  282:  registerDynamicAttr(getDynamicCustomAssemblyFormatAttr(this));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     5108:  283:}
