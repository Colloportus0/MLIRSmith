        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/ReconcileUnrealizedCasts/ReconcileUnrealizedCasts.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ReconcileUnrealizedCasts/CMakeFiles/obj.MLIRReconcileUnrealizedCasts.dir/ReconcileUnrealizedCasts.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ReconcileUnrealizedCasts/CMakeFiles/obj.MLIRReconcileUnrealizedCasts.dir/ReconcileUnrealizedCasts.cpp.gcda
        -:    0:Runs:325559
        -:    1://===- ReconcileUnrealizedCasts.cpp - Eliminate noop unrealized casts -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/ReconcileUnrealizedCasts/ReconcileUnrealizedCasts.h"
        -:   10:
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:#include "mlir/IR/PatternMatch.h"
        -:   13:#include "mlir/Pass/Pass.h"
        -:   14:#include "mlir/Transforms/DialectConversion.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:#define GEN_PASS_DEF_RECONCILEUNREALIZEDCASTS
        -:   18:#include "mlir/Conversion/Passes.h.inc"
        -:   19:} // namespace mlir
        -:   20:
        -:   21:using namespace mlir;
        -:   22:
        -:   23:namespace {
        -:   24:
        -:   25:/// Folds the DAGs of `unrealized_conversion_cast`s that have as exit types
        -:   26:/// the same as the input ones.
        -:   27:/// For example, the DAGs `A -> B -> C -> B -> A` and `A -> B -> C -> A`
        -:   28:/// represent a noop within the IR, and thus the initial input values can be
        -:   29:/// propagated.
        -:   30:/// The same does not hold for 'open' chains chains of casts, such as
        -:   31:/// `A -> B -> C`. In this last case there is no cycle among the types and thus
        -:   32:/// the conversion is incomplete. The same hold for 'closed' chains like
        -:   33:/// `A -> B -> A`, but with the result of type `B` being used by some non-cast
        -:   34:/// operations.
        -:   35:/// Bifurcations (that is when a chain starts in between of another one) are
        -:   36:/// also taken into considerations, and all the above considerations remain
        -:   37:/// valid.
        -:   38:/// Special corner cases such as dead casts or single casts with same input and
        -:   39:/// output types are also covered.
        -:   40:struct UnrealizedConversionCastPassthrough
        -:   41:    : public OpRewritePattern<UnrealizedConversionCastOp> {
        -:   42:  using OpRewritePattern<UnrealizedConversionCastOp>::OpRewritePattern;
        -:   43:
function _ZNK12_GLOBAL__N_135UnrealizedConversionCastPassthrough15matchAndRewriteEN4mlir26UnrealizedConversionCastOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   44:  LogicalResult matchAndRewrite(UnrealizedConversionCastOp op,
        -:   45:                                PatternRewriter &rewriter) const override {
        -:   46:    // The nodes that either are not used by any operation or have at least
        -:   47:    // one user that is not an unrealized cast.
    #####:   48:    DenseSet<UnrealizedConversionCastOp> exitNodes;
call    0 never executed
        -:   49:
        -:   50:    // The nodes whose users are all unrealized casts
    #####:   51:    DenseSet<UnrealizedConversionCastOp> intermediateNodes;
call    0 never executed
call    1 never executed
        -:   52:
        -:   53:    // Stack used for the depth-first traversal of the use-def DAG.
    #####:   54:    SmallVector<UnrealizedConversionCastOp, 2> visitStack;
call    0 never executed
call    1 never executed
    #####:   55:    visitStack.push_back(op);
call    0 never executed
        -:   56:
    #####:   57:    while (!visitStack.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   58:      UnrealizedConversionCastOp current = visitStack.pop_back_val();
call    0 never executed
    #####:   59:      auto users = current->getUsers();
call    0 never executed
    #####:   60:      bool isLive = false;
        -:   61:
    #####:   62:      for (Operation *user : users) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   63:        if (auto other = dyn_cast<UnrealizedConversionCastOp>(user)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:          if (other.getInputs() != current.getOutputs())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   65:            return rewriter.notifyMatchFailure(
    #####:   66:                op, "mismatching values propagation");
call    0 never executed
        -:   67:        } else {
        -:   68:          isLive = true;
        -:   69:        }
        -:   70:
        -:   71:        // Continue traversing the DAG of unrealized casts
    #####:   72:        if (auto other = dyn_cast<UnrealizedConversionCastOp>(user))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:          visitStack.push_back(other);
call    0 never executed
        -:   74:      }
        -:   75:
        -:   76:      // If the cast is live, then we need to check if the results of the last
        -:   77:      // cast have the same type of the root inputs. It this is the case (e.g.
        -:   78:      // `{A -> B, B -> A}`, but also `{A -> A}`), then the cycle is just a
        -:   79:      // no-op and the inputs can be forwarded. If it's not (e.g.
        -:   80:      // `{A -> B, B -> C}`, `{A -> B}`), then the cast chain is incomplete.
        -:   81:
    #####:   82:      bool isCycle = current.getResultTypes() == op.getInputs().getTypes();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   83:
    #####:   84:      if (isLive && !isCycle)
branch  0 never executed
branch  1 never executed
    #####:   85:        return rewriter.notifyMatchFailure(op,
    #####:   86:                                           "live unrealized conversion cast");
call    0 never executed
        -:   87:
    #####:   88:      bool isExitNode = users.empty() || isLive;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   89:
    #####:   90:      if (isExitNode) {
    #####:   91:        exitNodes.insert(current);
call    0 never executed
        -:   92:      } else {
    #####:   93:        intermediateNodes.insert(current);
call    0 never executed
        -:   94:      }
        -:   95:    }
        -:   96:
        -:   97:    // Replace the sink nodes with the root input values
    #####:   98:    for (UnrealizedConversionCastOp exitNode : exitNodes)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   99:      rewriter.replaceOp(exitNode, op.getInputs());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  100:
        -:  101:    // Erase all the other casts belonging to the DAG
    #####:  102:    for (UnrealizedConversionCastOp castOp : intermediateNodes)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  103:      rewriter.eraseOp(castOp);
call    0 never executed
        -:  104:
    #####:  105:    return success();
branch  0 never executed
branch  1 never executed
        -:  106:  }
        -:  107:};
        -:  108:
        -:  109:/// Pass to simplify and eliminate unrealized conversion casts.
    #####:  110:struct ReconcileUnrealizedCasts
call    0 never executed
        -:  111:    : public impl::ReconcileUnrealizedCastsBase<ReconcileUnrealizedCasts> {
   327687:  112:  ReconcileUnrealizedCasts() = default;
call    0 returned 100%
        -:  113:
function _ZN12_GLOBAL__N_124ReconcileUnrealizedCasts14runOnOperationEv called 869 returned 100% blocks executed 88%
      869:  114:  void runOnOperation() override {
      869:  115:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     1738:  116:    populateReconcileUnrealizedCastsPatterns(patterns);
     1738:  117:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      869:  118:    target.addIllegalOp<UnrealizedConversionCastOp>();
call    0 returned 100%
      869:  119:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      869:  120:                                      std::move(patterns))))
call    0 returned 100%
    #####:  121:      signalPassFailure();
call    0 never executed
      869:  122:  }
        -:  123:};
        -:  124:
        -:  125:} // namespace
        -:  126:
function _ZN4mlir40populateReconcileUnrealizedCastsPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     869*:  127:void mlir::populateReconcileUnrealizedCastsPatterns(
        -:  128:    RewritePatternSet &patterns) {
     869*:  129:  patterns.add<UnrealizedConversionCastPassthrough>(patterns.getContext());
call    0 never executed
call    1 returned 100%
call    2 returned 100%
    #####:  130:}
        -:  131:
function _ZN4mlir34createReconcileUnrealizedCastsPassEv called 327687 returned 100% blocks executed 100%
   327687:  132:std::unique_ptr<Pass> mlir::createReconcileUnrealizedCastsPass() {
   327687:  133:  return std::make_unique<ReconcileUnrealizedCasts>();
call    0 returned 100%
        -:  134:}
