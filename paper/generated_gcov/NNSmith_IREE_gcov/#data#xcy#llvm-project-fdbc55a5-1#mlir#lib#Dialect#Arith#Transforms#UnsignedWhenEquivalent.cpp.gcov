        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Arith/Transforms/UnsignedWhenEquivalent.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/UnsignedWhenEquivalent.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/UnsignedWhenEquivalent.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- UnsignedWhenEquivalent.cpp - Pass to replace signed operations with
        -:    2:// unsigned
        -:    3:// ones when all their arguments and results are statically non-negative --===//
        -:    4://
        -:    5:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    6:// See https://llvm.org/LICENSE.txt for license information.
        -:    7:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   12:
        -:   13:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   14:#include "mlir/Analysis/DataFlow/IntegerRangeAnalysis.h"
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Transforms/DialectConversion.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:namespace arith {
        -:   20:#define GEN_PASS_DEF_ARITHUNSIGNEDWHENEQUIVALENT
        -:   21:#include "mlir/Dialect/Arith/Transforms/Passes.h.inc"
        -:   22:} // namespace arith
        -:   23:} // namespace mlir
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace mlir::arith;
        -:   27:using namespace mlir::dataflow;
        -:   28:
        -:   29:/// Succeeds when a value is statically non-negative in that it has a lower
        -:   30:/// bound on its value (if it is treated as signed) and that bound is
        -:   31:/// non-negative.
function _ZL21staticallyNonNegativeRN4mlir14DataFlowSolverENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult staticallyNonNegative(DataFlowSolver &solver, Value v) {
    #####:   33:  auto *result = solver.lookupState<IntegerValueRangeLattice>(v);
call    0 never executed
    #####:   34:  if (!result)
branch  0 never executed
branch  1 never executed
    #####:   35:    return failure();
    #####:   36:  const ConstantIntRanges &range = result->getValue().getValue();
branch  0 never executed
branch  1 never executed
    #####:   37:  return success(range.smin().isNonNegative());
call    0 never executed
call    1 never executed
        -:   38:}
        -:   39:
        -:   40:/// Succeeds if an op can be converted to its unsigned equivalent without
        -:   41:/// changing its semantics. This is the case when none of its openands or
        -:   42:/// results can be below 0 when analyzed from a signed perspective.
function _ZL21staticallyNonNegativeRN4mlir14DataFlowSolverEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   43:static LogicalResult staticallyNonNegative(DataFlowSolver &solver,
        -:   44:                                           Operation *op) {
    #####:   45:  auto nonNegativePred = [&solver](Value v) -> bool {
    #####:   46:    return succeeded(staticallyNonNegative(solver, v));
call    0 never executed
    #####:   47:  };
    #####:   48:  return success(llvm::all_of(op->getOperands(), nonNegativePred) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   49:                 llvm::all_of(op->getResults(), nonNegativePred));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   50:}
        -:   51:
        -:   52:/// Succeeds when the comparison predicate is a signed operation and all the
        -:   53:/// operands are non-negative, indicating that the cmpi operation `op` can have
        -:   54:/// its predicate changed to an unsigned equivalent.
function _ZL17isCmpIConvertableRN4mlir14DataFlowSolverENS_5arith6CmpIOpE called 0 returned 0% blocks executed 0%
    #####:   55:static LogicalResult isCmpIConvertable(DataFlowSolver &solver, CmpIOp op) {
    #####:   56:  CmpIPredicate pred = op.getPredicate();
call    0 never executed
    #####:   57:  switch (pred) {
branch  0 never executed
branch  1 never executed
    #####:   58:  case CmpIPredicate::sle:
    #####:   59:  case CmpIPredicate::slt:
    #####:   60:  case CmpIPredicate::sge:
    #####:   61:  case CmpIPredicate::sgt:
    #####:   62:    return success(llvm::all_of(op.getOperands(), [&solver](Value v) -> bool {
call    0 never executed
call    1 never executed
        -:   63:      return succeeded(staticallyNonNegative(solver, v));
    #####:   64:    }));
    #####:   65:  default:
    #####:   66:    return failure();
        -:   67:  }
        -:   68:}
        -:   69:
        -:   70:/// Return the unsigned equivalent of a signed comparison predicate,
        -:   71:/// or the predicate itself if there is none.
    #####:   72:static CmpIPredicate toUnsignedPred(CmpIPredicate pred) {
    #####:   73:  switch (pred) {
        -:   74:  case CmpIPredicate::sle:
        -:   75:    return CmpIPredicate::ule;
        -:   76:  case CmpIPredicate::slt:
        -:   77:    return CmpIPredicate::ult;
        -:   78:  case CmpIPredicate::sge:
        -:   79:    return CmpIPredicate::uge;
        -:   80:  case CmpIPredicate::sgt:
        -:   81:    return CmpIPredicate::ugt;
        -:   82:  default:
        -:   83:    return pred;
        -:   84:  }
        -:   85:}
        -:   86:
        -:   87:namespace {
        -:   88:template <typename Signed, typename Unsigned>
        -:   89:struct ConvertOpToUnsigned : OpConversionPattern<Signed> {
        -:   90:  using OpConversionPattern<Signed>::OpConversionPattern;
        -:   91:
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7DivSIOpENS2_7DivUIOpEE15matchAndRewriteES3_NS2_14DivSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7DivSIOpENS2_7DivUIOpEE15matchAndRewriteES3_NS2_14DivSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith11CeilDivSIOpENS2_11CeilDivUIOpEE15matchAndRewriteES3_NS2_18CeilDivSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith11CeilDivSIOpENS2_11CeilDivUIOpEE15matchAndRewriteES3_NS2_18CeilDivSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith12FloorDivSIOpENS2_7DivUIOpEE15matchAndRewriteES3_NS2_19FloorDivSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith12FloorDivSIOpENS2_7DivUIOpEE15matchAndRewriteES3_NS2_19FloorDivSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7RemSIOpENS2_7RemUIOpEE15matchAndRewriteES3_NS2_14RemSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7RemSIOpENS2_7RemUIOpEE15matchAndRewriteES3_NS2_14RemSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7MinSIOpENS2_7MinUIOpEE15matchAndRewriteES3_NS2_14MinSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7MinSIOpENS2_7MinUIOpEE15matchAndRewriteES3_NS2_14MinSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7MaxSIOpENS2_7MaxUIOpEE15matchAndRewriteES3_NS2_14MaxSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7MaxSIOpENS2_7MaxUIOpEE15matchAndRewriteES3_NS2_14MaxSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
_ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7ExtSIOpENS2_7ExtUIOpEE15matchAndRewriteES3_NS2_14ExtSIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119ConvertOpToUnsignedIN4mlir5arith7ExtSIOpENS2_7ExtUIOpEE15matchAndRewriteES3_NS2_14ExtSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   92:  LogicalResult matchAndRewrite(Signed op, typename Signed::Adaptor adaptor,
        -:   93:                                ConversionPatternRewriter &rw) const override {
    #####:   94:    rw.replaceOpWithNewOp<Unsigned>(op, op->getResultTypes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:   95:                                    adaptor.getOperands(), op->getAttrs());
    #####:   96:    return success();
        -:   97:  }
------------------
        -:   98:};
        -:   99:
        -:  100:struct ConvertCmpIToUnsigned : OpConversionPattern<CmpIOp> {
        -:  101:  using OpConversionPattern<CmpIOp>::OpConversionPattern;
        -:  102:
function _ZNK12_GLOBAL__N_121ConvertCmpIToUnsigned15matchAndRewriteEN4mlir5arith6CmpIOpENS2_13CmpIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  103:  LogicalResult matchAndRewrite(CmpIOp op, CmpIOpAdaptor adaptor,
        -:  104:                                ConversionPatternRewriter &rw) const override {
    #####:  105:    rw.replaceOpWithNewOp<CmpIOp>(op, toUnsignedPred(op.getPredicate()),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:                                  op.getLhs(), op.getRhs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  107:    return success();
        -:  108:  }
        -:  109:};
        -:  110:
  326580*:  111:struct ArithUnsignedWhenEquivalentPass
call    0 never executed
call    1 returned 100%
        -:  112:    : public arith::impl::ArithUnsignedWhenEquivalentBase<
        -:  113:          ArithUnsignedWhenEquivalentPass> {
        -:  114:  /// Implementation structure: first find all equivalent ops and collect them,
        -:  115:  /// then perform all the rewrites in a second pass over the target op. This
        -:  116:  /// ensures that analysis results are not invalidated during rewriting.
function _ZN12_GLOBAL__N_131ArithUnsignedWhenEquivalentPass14runOnOperationEv called 839 returned 100% blocks executed 83%
      839:  117:  void runOnOperation() override {
      839:  118:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      839:  119:    MLIRContext *ctx = op->getContext();
call    0 returned 100%
     1678:  120:    DataFlowSolver solver;
call    0 returned 100%
call    1 returned 100%
      839:  121:    solver.load<DeadCodeAnalysis>();
call    0 returned 100%
      839:  122:    solver.load<IntegerRangeAnalysis>();
call    0 returned 100%
      839:  123:    if (failed(solver.initializeAndRun(op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  124:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  125:
      839:  126:    ConversionTarget target(*ctx);
call    0 returned 100%
      839:  127:    target.addLegalDialect<ArithDialect>();
call    0 returned 100%
      839:  128:    target
        -:  129:        .addDynamicallyLegalOp<DivSIOp, CeilDivSIOp, CeilDivUIOp, FloorDivSIOp,
     1678:  130:                               RemSIOp, MinSIOp, MaxSIOp, ExtSIOp>(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:  131:            [&solver](Operation *op) -> Optional<bool> {
    #####:  132:              return failed(staticallyNonNegative(solver, op));
call    0 never executed
        -:  133:            });
      839:  134:    target.addDynamicallyLegalOp<CmpIOp>(
call    0 returned 100%
    #####:  135:        [&solver](CmpIOp op) -> Optional<bool> {
    #####:  136:          return failed(isCmpIConvertable(solver, op));
call    0 never executed
        -:  137:        });
        -:  138:
     1678:  139:    RewritePatternSet patterns(ctx);
call    0 returned 100%
call    1 returned 100%
      839:  140:    patterns.add<ConvertOpToUnsigned<DivSIOp, DivUIOp>,
        -:  141:                 ConvertOpToUnsigned<CeilDivSIOp, CeilDivUIOp>,
        -:  142:                 ConvertOpToUnsigned<FloorDivSIOp, DivUIOp>,
        -:  143:                 ConvertOpToUnsigned<RemSIOp, RemUIOp>,
        -:  144:                 ConvertOpToUnsigned<MinSIOp, MinUIOp>,
        -:  145:                 ConvertOpToUnsigned<MaxSIOp, MaxUIOp>,
        -:  146:                 ConvertOpToUnsigned<ExtSIOp, ExtUIOp>, ConvertCmpIToUnsigned>(
      839:  147:        ctx);
call    0 returned 100%
        -:  148:
      839:  149:    if (failed(applyPartialConversion(op, target, std::move(patterns)))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  150:      signalPassFailure();
call    0 never executed
        -:  151:    }
        -:  152:  }
        -:  153:};
        -:  154:} // end anonymous namespace
        -:  155:
function _ZN4mlir5arith37createArithUnsignedWhenEquivalentPassEv called 326580 returned 100% blocks executed 100%
   326580:  156:std::unique_ptr<Pass> mlir::arith::createArithUnsignedWhenEquivalentPass() {
   326580:  157:  return std::make_unique<ArithUnsignedWhenEquivalentPass>();
call    0 returned 100%
        -:  158:}
