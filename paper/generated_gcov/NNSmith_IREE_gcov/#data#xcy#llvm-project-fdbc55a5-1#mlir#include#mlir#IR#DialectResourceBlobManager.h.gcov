        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/IR/DialectResourceBlobManager.h
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinAttributes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinAttributes.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- DialectResourceBlobManager.h - Dialect Blob Management ---*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines utility classes for referencing and managing asm resource
        -:   10:// blobs. These classes are intended to more easily facilitate the sharing of
        -:   11:// large blobs, and their definition.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#ifndef MLIR_IR_DIALECTRESOURCEBLOBMANAGER_H
        -:   16:#define MLIR_IR_DIALECTRESOURCEBLOBMANAGER_H
        -:   17:
        -:   18:#include "mlir/IR/AsmState.h"
        -:   19:#include "mlir/IR/OpImplementation.h"
        -:   20:#include "llvm/ADT/StringMap.h"
        -:   21:#include "llvm/ADT/Twine.h"
        -:   22:#include "llvm/Support/RWMutex.h"
        -:   23:#include "llvm/Support/SMLoc.h"
        -:   24:
        -:   25:namespace mlir {
        -:   26://===----------------------------------------------------------------------===//
        -:   27:// DialectResourceBlobManager
        -:   28://===---------------------------------------------------------------------===//
        -:   29:
        -:   30:/// This class defines a manager for dialect resource blobs. Blobs are uniqued
        -:   31:/// by a given key, and represented using AsmResourceBlobs.
        -:   32:class DialectResourceBlobManager {
        -:   33:public:
        -:   34:  /// The class represents an individual entry of a blob.
        -:   35:  class BlobEntry {
        -:   36:  public:
        -:   37:    /// Return the key used to reference this blob.
        -:   38:    StringRef getKey() const { return key; }
        -:   39:
        -:   40:    /// Return the blob owned by this entry if one has been initialized. Returns
        -:   41:    /// nullptr otherwise.
        -:   42:    const AsmResourceBlob *getBlob() const { return blob ? &*blob : nullptr; }
    #####:   43:    AsmResourceBlob *getBlob() { return blob ? &*blob : nullptr; }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
        -:   44:
        -:   45:    /// Set the blob owned by this entry.
        -:   46:    void setBlob(AsmResourceBlob &&newBlob) { blob = std::move(newBlob); }
        -:   47:
        -:   48:  private:
        -:   49:    BlobEntry() = default;
        -:   50:    BlobEntry(BlobEntry &&) = default;
        -:   51:    BlobEntry &operator=(const BlobEntry &) = delete;
        -:   52:    BlobEntry &operator=(BlobEntry &&) = delete;
        -:   53:
        -:   54:    /// Initialize this entry with the given key and blob.
        -:   55:    void initialize(StringRef newKey, Optional<AsmResourceBlob> newBlob) {
        -:   56:      key = newKey;
        -:   57:      blob = std::move(newBlob);
        -:   58:    }
        -:   59:
        -:   60:    /// The key used for this blob.
        -:   61:    StringRef key;
        -:   62:
        -:   63:    /// The blob that is referenced by this entry if it is valid.
        -:   64:    Optional<AsmResourceBlob> blob;
        -:   65:
        -:   66:    /// Allow access to the constructors.
        -:   67:    friend DialectResourceBlobManager;
        -:   68:    friend class llvm::StringMapEntryStorage<BlobEntry>;
        -:   69:  };
        -:   70:
        -:   71:  /// Return the blob registered for the given name, or nullptr if no blob
        -:   72:  /// is registered.
        -:   73:  BlobEntry *lookup(StringRef name);
        -:   74:  const BlobEntry *lookup(StringRef name) const {
        -:   75:    return const_cast<DialectResourceBlobManager *>(this)->lookup(name);
        -:   76:  }
        -:   77:
        -:   78:  /// Update the blob for the entry defined by the provided name. This method
        -:   79:  /// asserts that an entry for the given name exists in the manager.
        -:   80:  void update(StringRef name, AsmResourceBlob &&newBlob);
        -:   81:
        -:   82:  /// Insert a new entry with the provided name and optional blob data. The name
        -:   83:  /// may be modified during insertion if another entry already exists with that
        -:   84:  /// name. Returns the inserted entry.
        -:   85:  BlobEntry &insert(StringRef name, Optional<AsmResourceBlob> blob = {});
        -:   86:  /// Insertion method that returns a dialect specific handle to the inserted
        -:   87:  /// entry.
        -:   88:  template <typename HandleT>
function _ZN4mlir26DialectResourceBlobManager6insertINS_25DialectResourceBlobHandleINS_14BuiltinDialectEEEEET_PNS5_7DialectEN4llvm9StringRefENS8_8OptionalINS_15AsmResourceBlobEEE called 0 returned 0% blocks executed 0%
    #####:   89:  HandleT insert(typename HandleT::Dialect *dialect, StringRef name,
branch  0 never executed
branch  1 never executed
        -:   90:                 Optional<AsmResourceBlob> blob = {}) {
    #####:   91:    BlobEntry &entry = insert(name, std::move(blob));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   92:    return HandleT(&entry, dialect);
        -:   93:  }
        -:   94:
        -:   95:private:
        -:   96:  /// A mutex to protect access to the blob map.
        -:   97:  llvm::sys::SmartRWMutex<true> blobMapLock;
        -:   98:
        -:   99:  /// The internal map of tracked blobs. StringMap stores entries in distinct
        -:  100:  /// allocations, so we can freely take references to the data without fear of
        -:  101:  /// invalidation during additional insertion/deletion.
        -:  102:  llvm::StringMap<BlobEntry> blobMap;
        -:  103:};
        -:  104:
        -:  105://===----------------------------------------------------------------------===//
        -:  106:// ResourceBlobManagerDialectInterface
        -:  107://===---------------------------------------------------------------------===//
        -:  108:
        -:  109:/// This class implements a dialect interface that provides common functionality
        -:  110:/// for interacting with a resource blob manager.
        -:  111:class ResourceBlobManagerDialectInterface
        -:  112:    : public DialectInterface::Base<ResourceBlobManagerDialectInterface> {
        -:  113:public:
        -:  114:  ResourceBlobManagerDialectInterface(Dialect *dialect)
        -:  115:      : Base(dialect),
        -:  116:        blobManager(std::make_shared<DialectResourceBlobManager>()) {}
        -:  117:
        -:  118:  /// Return the blob manager held by this interface.
    #####:  119:  DialectResourceBlobManager &getBlobManager() { return *blobManager; }
        -:  120:  const DialectResourceBlobManager &getBlobManager() const {
        -:  121:    return *blobManager;
        -:  122:  }
        -:  123:
        -:  124:  /// Set the blob manager held by this interface.
        -:  125:  void
        -:  126:  setBlobManager(std::shared_ptr<DialectResourceBlobManager> newBlobManager) {
        -:  127:    blobManager = std::move(newBlobManager);
        -:  128:  }
        -:  129:
        -:  130:private:
        -:  131:  /// The blob manager owned by the dialect implementing this interface.
        -:  132:  std::shared_ptr<DialectResourceBlobManager> blobManager;
        -:  133:};
        -:  134:
        -:  135:/// This class provides a base class for dialects implementing the resource blob
        -:  136:/// interface. It provides several additional dialect specific utilities on top
        -:  137:/// of the generic interface. `HandleT` is the type of the handle used to
        -:  138:/// reference a resource blob.
        -:  139:template <typename HandleT>
        -:  140:class ResourceBlobManagerDialectInterfaceBase
        -:  141:    : public ResourceBlobManagerDialectInterface {
        -:  142:public:
        -:  143:  using ResourceBlobManagerDialectInterface::
        -:  144:      ResourceBlobManagerDialectInterface;
        -:  145:
        -:  146:  /// Update the blob for the entry defined by the provided name. This method
        -:  147:  /// asserts that an entry for the given name exists in the manager.
        -:  148:  void update(StringRef name, AsmResourceBlob &&newBlob) {
        -:  149:    getBlobManager().update(name, std::move(newBlob));
        -:  150:  }
        -:  151:
        -:  152:  /// Insert a new resource blob entry with the provided name and optional blob
        -:  153:  /// data. The name may be modified during insertion if another entry already
        -:  154:  /// exists with that name. Returns a dialect specific handle to the inserted
        -:  155:  /// entry.
function _ZN4mlir39ResourceBlobManagerDialectInterfaceBaseINS_25DialectResourceBlobHandleINS_14BuiltinDialectEEEE6insertEN4llvm9StringRefENS5_8OptionalINS_15AsmResourceBlobEEE called 0 returned 0% blocks executed 0%
    #####:  156:  HandleT insert(StringRef name, Optional<AsmResourceBlob> blob = {}) {
    #####:  157:    return getBlobManager().template insert<HandleT>(
branch  0 never executed
branch  1 never executed
    #####:  158:        cast<typename HandleT::Dialect>(getDialect()), name, std::move(blob));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  159:  }
        -:  160:
        -:  161:  /// Build resources for each of the referenced blobs within this manager.
        -:  162:  void buildResources(AsmResourceBuilder &provider,
        -:  163:                      ArrayRef<AsmDialectResourceHandle> referencedResources) {
        -:  164:    for (const AsmDialectResourceHandle &handle : referencedResources) {
        -:  165:      if (const auto *dialectHandle = dyn_cast<HandleT>(&handle)) {
        -:  166:        if (auto *blob = dialectHandle->getBlob())
        -:  167:          provider.buildBlob(dialectHandle->getKey(), *blob);
        -:  168:      }
        -:  169:    }
        -:  170:  }
        -:  171:};
        -:  172:
        -:  173://===----------------------------------------------------------------------===//
        -:  174:// DialectResourceBlobHandle
        -:  175://===----------------------------------------------------------------------===//
        -:  176:
        -:  177:/// This class defines a dialect specific handle to a resource blob. These
        -:  178:/// handles utilize a StringRef for the internal key, and an AsmResourceBlob as
        -:  179:/// the underlying data.
        -:  180:template <typename DialectT>
        -:  181:struct DialectResourceBlobHandle
        -:  182:    : public AsmDialectResourceHandleBase<DialectResourceBlobHandle<DialectT>,
        -:  183:                                          DialectResourceBlobManager::BlobEntry,
        -:  184:                                          DialectT> {
        -:  185:  using AsmDialectResourceHandleBase<DialectResourceBlobHandle<DialectT>,
        -:  186:                                     DialectResourceBlobManager::BlobEntry,
    #####:  187:                                     DialectT>::AsmDialectResourceHandleBase;
call    0 never executed
        -:  188:  using ManagerInterface = ResourceBlobManagerDialectInterfaceBase<
        -:  189:      DialectResourceBlobHandle<DialectT>>;
        -:  190:
        -:  191:  /// Return the human readable string key for this handle.
        -:  192:  StringRef getKey() const { return this->getResource()->getKey(); }
        -:  193:
        -:  194:  /// Return the blob referenced by this handle if the underlying resource has
        -:  195:  /// been initialized. Returns nullptr otherwise.
    #####:  196:  AsmResourceBlob *getBlob() { return this->getResource()->getBlob(); }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
        -:  197:  const AsmResourceBlob *getBlob() const {
        -:  198:    return this->getResource()->getBlob();
        -:  199:  }
        -:  200:
        -:  201:  /// Get the interface for the dialect that owns handles of this type. Asserts
        -:  202:  /// that the dialect is registered.
function _ZN4mlir25DialectResourceBlobHandleINS_14BuiltinDialectEE19getManagerInterfaceEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  203:  static ManagerInterface &getManagerInterface(MLIRContext *ctx) {
    #####:  204:    auto *dialect = ctx->getOrLoadDialect<DialectT>();
call    0 never executed
    #####:  205:    assert(dialect && "dialect not registered");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  206:
    #####:  207:    auto *iface = dialect->template getRegisteredInterface<ManagerInterface>();
call    0 never executed
    #####:  208:    assert(iface && "dialect doesn't provide the blob manager interface?");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  209:    return *iface;
        -:  210:  }
        -:  211:};
        -:  212:
        -:  213:} // namespace mlir
        -:  214:
        -:  215:#endif // MLIR_IR_DIALECTRESOURCEBLOBMANAGER_H
