        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Tosa/Transforms/TosaFoldConstantTranspose.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaFoldConstantTranspose.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaFoldConstantTranspose.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- TosaFoldConstantTranspose.cpp --------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Fold TOSA Transpose operation on constant data
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   14:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   15:#include "mlir/IR/Matchers.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:using namespace mlir::tosa;
        -:   20:
        -:   21:namespace {
        -:   22:
        -:   23:struct TosaFoldConstantTranspose : public OpRewritePattern<tosa::TransposeOp> {
        -:   24:  using OpRewritePattern::OpRewritePattern;
        -:   25:
function _ZNK12_GLOBAL__N_125TosaFoldConstantTranspose15matchAndRewriteEN4mlir4tosa11TransposeOpERNS1_15PatternRewriterE called 212 returned 100% blocks executed 11%
      212:   26:  LogicalResult matchAndRewrite(tosa::TransposeOp op,
        -:   27:                                PatternRewriter &rewriter) const override {
      212:   28:    auto outputType = op.getType().cast<ShapedType>();
call    0 returned 100%
        -:   29:    // TOSA supports quantized types.
      212:   30:    if (!outputType.getElementType().isIntOrIndexOrFloat())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   31:      return failure();
        -:   32:
      212:   33:    ElementsAttr inputValues;
call    0 returned 100%
      212:   34:    if (!matchPattern(op.getInput1(), m_Constant(&inputValues)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      212:   35:      return failure();
        -:   36:    // Make sure the input is a constant that has a single user.
    #####:   37:    if (!llvm::hasSingleElement(op.getInput1().getDefiningOp()->getUsers()))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   38:      return failure();
        -:   39:
    #####:   40:    DenseIntElementsAttr permAttr;
    #####:   41:    if (!matchPattern(op.getPerms(), m_Constant(&permAttr)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   42:      return failure();
    #####:   43:    auto permValues = llvm::to_vector<6>(llvm::map_range(
        -:   44:        // TOSA allows both 32- and 64-bit integer tensors here.
    #####:   45:        permAttr.getValues<APInt>(),
call    0 never executed
    #####:   46:        [](const APInt &val) { return val.getZExtValue(); }));
call    0 never executed
call    1 never executed
        -:   47:
    #####:   48:    auto inputType = op.getInput1().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####:   49:    ArrayRef<int64_t> inputShape = inputType.getShape();
call    0 never executed
    #####:   50:    int64_t numElements = inputType.getNumElements();
call    0 never executed
        -:   51:
    #####:   52:    SmallVector<Attribute, 4> outputValues;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:    outputValues.resize(numElements);
call    0 never executed
        -:   54:
        -:   55:    // Transpose the input constant. Because we don't know its rank in advance,
        -:   56:    // we need to loop over the range [0, element count) and delinearize the
        -:   57:    // index.
    #####:   58:    auto attrValues = inputValues.getValues<Attribute>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:    ArrayRef<int64_t> outputShape = outputType.getShape();
call    0 never executed
    #####:   60:    for (const auto &it : llvm::enumerate(attrValues)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   61:      SmallVector<uint64_t, 6> srcIndices(inputType.getRank(), 0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   62:      int totalCount = it.index();
call    0 never executed
    #####:   63:      for (int dim = inputType.getRank() - 1; dim >= 0; --dim) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:        srcIndices[dim] = totalCount % inputShape[dim];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   65:        totalCount /= inputShape[dim];
        -:   66:      }
        -:   67:
    #####:   68:      SmallVector<uint64_t, 6> dstIndices(outputType.getRank(), 0);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:      for (int dim = outputType.getRank() - 1; dim >= 0; --dim)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:        dstIndices[dim] = srcIndices[permValues[dim]];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   71:
    #####:   72:      uint64_t dstLinearIndex = dstIndices.front();
branch  0 never executed
branch  1 never executed
    #####:   73:      for (int dim = 1; dim < outputType.getRank(); ++dim)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:        dstLinearIndex = dstLinearIndex * outputShape[dim] + dstIndices[dim];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   75:
    #####:   76:      outputValues[dstLinearIndex] = it.value();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   77:    }
        -:   78:
    #####:   79:    rewriter.replaceOpWithNewOp<tosa::ConstOp>(
    #####:   80:        op, outputType, DenseElementsAttr::get(outputType, outputValues));
call    0 never executed
call    1 never executed
    #####:   81:    return success();
call    0 never executed
        -:   82:  }
        -:   83:};
        -:   84:
        -:   85:} // namespace
        -:   86:
function _ZN4mlir4tosa41populateTosaFoldConstantTransposePatternsEPNS_11MLIRContextERNS_17RewritePatternSetE called 978 returned 100% blocks executed 100%
      978:   87:void mlir::tosa::populateTosaFoldConstantTransposePatterns(
        -:   88:    MLIRContext *ctx, RewritePatternSet &patterns) {
      978:   89:  patterns.add<TosaFoldConstantTranspose>(ctx);
call    0 returned 100%
      978:   90:}
