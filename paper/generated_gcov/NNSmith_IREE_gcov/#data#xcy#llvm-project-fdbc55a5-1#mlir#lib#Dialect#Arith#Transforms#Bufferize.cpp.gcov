        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Arith/Transforms/Bufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/Bufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/Bufferize.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- Bufferize.cpp - Bufferization for Arith ops ---------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Dialect/Arith/Transforms/BufferizableOpInterfaceImpl.h"
        -:   13:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   14:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   15:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   16:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:namespace arith {
        -:   20:#define GEN_PASS_DEF_ARITHBUFFERIZE
        -:   21:#include "mlir/Dialect/Arith/Transforms/Passes.h.inc"
        -:   22:} // namespace arith
        -:   23:} // namespace mlir
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace bufferization;
        -:   27:
        -:   28:namespace {
        -:   29:/// Pass to bufferize Arith ops.
    #####:   30:struct ArithBufferizePass
call    0 never executed
        -:   31:    : public arith::impl::ArithBufferizeBase<ArithBufferizePass> {
   326600:   32:  ArithBufferizePass(uint64_t alignment = 0, bool constantOpOnly = false)
   326600:   33:      : constantOpOnly(constantOpOnly) {
call    0 returned 100%
   326600:   34:    this->alignment = alignment;
call    0 returned 100%
        -:   35:  }
        -:   36:
function _ZN12_GLOBAL__N_118ArithBufferizePass14runOnOperationEv called 853 returned 100% blocks executed 75%
      853:   37:  void runOnOperation() override {
     1706:   38:    BufferizationOptions options = getPartialBufferizationOptions();
call    0 returned 100%
call    1 returned 100%
      853:   39:    if (constantOpOnly) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   40:      options.opFilter.allowOperation<arith::ConstantOp>();
call    0 never executed
        -:   41:    } else {
      853:   42:      options.opFilter.allowDialect<arith::ArithDialect>();
call    0 returned 100%
        -:   43:    }
      853:   44:    options.bufferAlignment = alignment;
call    0 returned 100%
        -:   45:
      853:   46:    if (failed(bufferizeOp(getOperation(), options)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   47:      signalPassFailure();
call    0 never executed
      853:   48:  }
        -:   49:
function _ZNK12_GLOBAL__N_118ArithBufferizePass20getDependentDialectsERN4mlir15DialectRegistryE called 1055 returned 100% blocks executed 100%
     1055:   50:  void getDependentDialects(DialectRegistry &registry) const override {
     1055:   51:    registry.insert<bufferization::BufferizationDialect, memref::MemRefDialect,
     1055:   52:                    arith::ArithDialect>();
call    0 returned 100%
     1055:   53:    arith::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
     1055:   54:  }
        -:   55:
        -:   56:private:
        -:   57:  bool constantOpOnly;
        -:   58:};
        -:   59:} // namespace
        -:   60:
function _ZN4mlir5arith24createArithBufferizePassEv called 326600 returned 100% blocks executed 100%
   326600:   61:std::unique_ptr<Pass> mlir::arith::createArithBufferizePass() {
   326600:   62:  return std::make_unique<ArithBufferizePass>();
call    0 returned 100%
        -:   63:}
        -:   64:
        -:   65:std::unique_ptr<Pass>
function _ZN4mlir5arith27createConstantBufferizePassEm called 0 returned 0% blocks executed 0%
    #####:   66:mlir::arith::createConstantBufferizePass(uint64_t alignment) {
    #####:   67:  return std::make_unique<ArithBufferizePass>(alignment,
call    0 never executed
    #####:   68:                                              /*constantOpOnly=*/true);
        -:   69:}
