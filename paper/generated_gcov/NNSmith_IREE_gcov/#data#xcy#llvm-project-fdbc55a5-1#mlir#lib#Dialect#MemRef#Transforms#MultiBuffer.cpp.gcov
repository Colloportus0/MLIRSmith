        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/MemRef/Transforms/MultiBuffer.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/MemRef/Transforms/CMakeFiles/obj.MLIRMemRefTransforms.dir/MultiBuffer.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/MemRef/Transforms/CMakeFiles/obj.MLIRMemRefTransforms.dir/MultiBuffer.cpp.gcda
        -:    0:Runs:325549
        -:    1://===----------- MultiBuffering.cpp ---------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements multi buffering transformation.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   15:#include "mlir/Dialect/MemRef/Transforms/Passes.h"
        -:   16:#include "mlir/IR/Dominance.h"
        -:   17:#include "mlir/Interfaces/LoopLikeInterface.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:/// Return true if the op fully overwrite the given `buffer` value.
function _ZL14overrideBufferPN4mlir9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   22:static bool overrideBuffer(Operation *op, Value buffer) {
    #####:   23:  auto copyOp = dyn_cast<memref::CopyOp>(op);
call    0 never executed
    #####:   24:  if (!copyOp)
branch  0 never executed
branch  1 never executed
        -:   25:    return false;
    #####:   26:  return copyOp.getTarget() == buffer;
call    0 never executed
        -:   27:}
        -:   28:
        -:   29:/// Replace the uses of `oldOp` with the given `val` and for subview uses
        -:   30:/// propagate the type change. Changing the memref type may require propagating
        -:   31:/// it through subview ops so we cannot just do a replaceAllUse but need to
        -:   32:/// propagate the type change and erase old subview ops.
function _ZL27replaceUsesAndPropagateTypePN4mlir9OperationENS_5ValueERNS_9OpBuilderE called 0 returned 0% blocks executed 0%
    #####:   33:static void replaceUsesAndPropagateType(Operation *oldOp, Value val,
        -:   34:                                        OpBuilder &builder) {
    #####:   35:  SmallVector<Operation *> opToDelete;
branch  0 never executed
branch  1 never executed
    #####:   36:  SmallVector<OpOperand *> operandsToReplace;
branch  0 never executed
branch  1 never executed
    #####:   37:  for (OpOperand &use : oldOp->getUses()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   38:    auto subviewUse = dyn_cast<memref::SubViewOp>(use.getOwner());
call    0 never executed
    #####:   39:    if (!subviewUse) {
branch  0 never executed
branch  1 never executed
        -:   40:      // Save the operand to and replace outside the loop to not invalidate the
        -:   41:      // iterator.
    #####:   42:      operandsToReplace.push_back(&use);
call    0 never executed
    #####:   43:      continue;
        -:   44:    }
    #####:   45:    builder.setInsertionPoint(subviewUse);
call    0 never executed
    #####:   46:    Type newType = memref::SubViewOp::inferRankReducedResultType(
    #####:   47:        subviewUse.getType().getShape(), val.getType().cast<MemRefType>(),
    #####:   48:        extractFromI64ArrayAttr(subviewUse.getStaticOffsets()),
call    0 never executed
call    1 never executed
    #####:   49:        extractFromI64ArrayAttr(subviewUse.getStaticSizes()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   50:        extractFromI64ArrayAttr(subviewUse.getStaticStrides()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:   51:    Value newSubview = builder.create<memref::SubViewOp>(
    #####:   52:        subviewUse->getLoc(), newType.cast<MemRefType>(), val,
branch  0 never executed
branch  1 never executed
    #####:   53:        subviewUse.getMixedOffsets(), subviewUse.getMixedSizes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   54:        subviewUse.getMixedStrides());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:    replaceUsesAndPropagateType(subviewUse, newSubview, builder);
call    0 never executed
    #####:   56:    opToDelete.push_back(use.getOwner());
call    0 never executed
        -:   57:  }
    #####:   58:  for (OpOperand *operand : operandsToReplace)
branch  0 never executed
branch  1 never executed
    #####:   59:    operand->set(val);
branch  0 never executed
branch  1 never executed
        -:   60:  // Clean up old subview ops.
    #####:   61:  for (Operation *op : opToDelete)
branch  0 never executed
branch  1 never executed
    #####:   62:    op->erase();
call    0 never executed
    #####:   63:}
        -:   64:
        -:   65:/// Helper to convert get a value from an OpFoldResult or create it at the
        -:   66:/// builder insert point.
function _ZL16getOrCreateValueN4mlir12OpFoldResultERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   67:static Value getOrCreateValue(OpFoldResult res, OpBuilder &builder,
        -:   68:                              Location loc) {
    #####:   69:  Value value = res.dyn_cast<Value>();
branch  0 never executed
branch  1 never executed
    #####:   70:  if (value)
branch  0 never executed
branch  1 never executed
    #####:   71:    return value;
    #####:   72:  return builder.create<arith::ConstantIndexOp>(
call    0 never executed
    #####:   73:      loc, res.dyn_cast<Attribute>().cast<IntegerAttr>().getInt());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   74:}
        -:   75:
        -:   76:// Transformation to do multi-buffering/array expansion to remove dependencies
        -:   77:// on the temporary allocation between consecutive loop iterations.
        -:   78:// Returns success if the transformation happened and failure otherwise.
        -:   79:// This is not a pattern as it requires propagating the new memref type to its
        -:   80:// uses and requires updating subview ops.
function _ZN4mlir6memref11multiBufferENS0_7AllocOpEj called 0 returned 0% blocks executed 0%
    #####:   81:FailureOr<memref::AllocOp> mlir::memref::multiBuffer(memref::AllocOp allocOp,
        -:   82:                                                     unsigned multiplier) {
    #####:   83:  DominanceInfo dom(allocOp->getParentOp());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   84:  LoopLikeOpInterface candidateLoop;
call    0 never executed
    #####:   85:  for (Operation *user : allocOp->getUsers()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   86:    auto parentLoop = user->getParentOfType<LoopLikeOpInterface>();
call    0 never executed
    #####:   87:    if (!parentLoop)
branch  0 never executed
branch  1 never executed
    #####:   88:      return failure();
        -:   89:    /// Make sure there is no loop carried dependency on the allocation.
    #####:   90:    if (!overrideBuffer(user, allocOp.getResult()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   91:      continue;
call    0 never executed
        -:   92:    // If this user doesn't dominate all the other users keep looking.
    #####:   93:    if (llvm::any_of(allocOp->getUsers(), [&](Operation *otherUser) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   94:          return !dom.dominates(user, otherUser);
        -:   95:        }))
    #####:   96:      continue;
    #####:   97:    candidateLoop = parentLoop;
    #####:   98:    break;
        -:   99:  }
    #####:  100:  if (!candidateLoop)
branch  0 never executed
branch  1 never executed
    #####:  101:    return failure();
    #####:  102:  llvm::Optional<Value> inductionVar = candidateLoop.getSingleInductionVar();
call    0 never executed
    #####:  103:  llvm::Optional<OpFoldResult> lowerBound = candidateLoop.getSingleLowerBound();
call    0 never executed
    #####:  104:  llvm::Optional<OpFoldResult> singleStep = candidateLoop.getSingleStep();
call    0 never executed
    #####:  105:  if (!inductionVar || !lowerBound || !singleStep)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  106:    return failure();
        -:  107:
    #####:  108:  if (!dom.dominates(allocOp.getOperation(), candidateLoop))
branch  0 never executed
branch  1 never executed
    #####:  109:    return failure();
        -:  110:
    #####:  111:  OpBuilder builder(candidateLoop);
call    0 never executed
    #####:  112:  SmallVector<int64_t, 4> newShape(1, multiplier);
call    0 never executed
call    1 never executed
    #####:  113:  ArrayRef<int64_t> oldShape = allocOp.getType().getShape();
call    0 never executed
call    1 never executed
    #####:  114:  newShape.append(oldShape.begin(), oldShape.end());
call    0 never executed
    #####:  115:  auto newMemref = MemRefType::get(newShape, allocOp.getType().getElementType(),
call    0 never executed
        -:  116:                                   MemRefLayoutAttrInterface(),
    #####:  117:                                   allocOp.getType().getMemorySpace());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  118:  builder.setInsertionPoint(allocOp);
call    0 never executed
    #####:  119:  Location loc = allocOp->getLoc();
call    0 never executed
    #####:  120:  auto newAlloc = builder.create<memref::AllocOp>(loc, newMemref, ValueRange{},
call    0 never executed
    #####:  121:                                                  allocOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  122:  builder.setInsertionPoint(&candidateLoop.getLoopBody().front(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  123:                            candidateLoop.getLoopBody().front().begin());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  124:
    #####:  125:  SmallVector<Value> operands = {*inductionVar};
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:  AffineExpr induc = getAffineDimExpr(0, allocOp.getContext());
call    0 never executed
call    1 never executed
    #####:  127:  unsigned dimCount = 1;
function _ZZN4mlir6memref11multiBufferENS0_7AllocOpEjENKUlNS_12OpFoldResultEE0_clES2_ called 0 returned 0% blocks executed 0%
    #####:  128:  auto getAffineExpr = [&](OpFoldResult e) -> AffineExpr {
    #####:  129:    if (Optional<int64_t> constValue = getConstantIntValue(e)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:      return getAffineConstantExpr(*constValue, allocOp.getContext());
call    0 never executed
call    1 never executed
        -:  131:    }
    #####:  132:    auto value = getOrCreateValue(e, builder, candidateLoop->getLoc());
call    0 never executed
    #####:  133:    operands.push_back(value);
call    0 never executed
    #####:  134:    return getAffineDimExpr(dimCount++, allocOp.getContext());
call    0 never executed
call    1 never executed
        -:  135:   
    #####:  136:  };
    #####:  137:  auto init = getAffineExpr(*lowerBound);
call    0 never executed
    #####:  138:  auto step = getAffineExpr(*singleStep);
call    0 never executed
        -:  139:
    #####:  140:  AffineExpr expr = ((induc - init).floorDiv(step)) % multiplier;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  141:  auto map = AffineMap::get(dimCount, 0, expr);
call    0 never executed
    #####:  142:  Value bufferIndex = builder.create<AffineApplyOp>(loc, map, operands);
call    0 never executed
call    1 never executed
    #####:  143:  SmallVector<OpFoldResult> offsets, sizes, strides;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  144:  offsets.push_back(bufferIndex);
call    0 never executed
call    1 never executed
    #####:  145:  offsets.append(oldShape.size(), builder.getIndexAttr(0));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  146:  strides.assign(oldShape.size() + 1, builder.getIndexAttr(1));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  147:  sizes.push_back(builder.getIndexAttr(1));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  148:  for (int64_t size : oldShape)
branch  0 never executed
branch  1 never executed
    #####:  149:    sizes.push_back(builder.getIndexAttr(size));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  150:  auto dstMemref =
call    0 never executed
    #####:  151:      memref::SubViewOp::inferRankReducedResultType(
    #####:  152:          allocOp.getType().getShape(), newMemref, offsets, sizes, strides)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  153:          .cast<MemRefType>();
    #####:  154:  Value subview = builder.create<memref::SubViewOp>(loc, dstMemref, newAlloc,
    #####:  155:                                                    offsets, sizes, strides);
call    0 never executed
call    1 never executed
    #####:  156:  replaceUsesAndPropagateType(allocOp, subview, builder);
call    0 never executed
    #####:  157:  allocOp.erase();
call    0 never executed
    #####:  158:  return newAlloc;
branch  0 never executed
branch  1 never executed
        -:  159:}
