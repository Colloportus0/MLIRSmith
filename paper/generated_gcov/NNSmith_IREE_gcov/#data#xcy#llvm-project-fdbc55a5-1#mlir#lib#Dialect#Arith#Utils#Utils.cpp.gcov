        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Arith/Utils/Utils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/Utils/CMakeFiles/obj.MLIRArithUtils.dir/Utils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/Utils/CMakeFiles/obj.MLIRArithUtils.dir/Utils.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- Utils.cpp - Utilities to support the Linalg dialect ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements utilities for the Linalg dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "llvm/ADT/SmallBitVector.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:/// Matches a ConstantIndexOp.
        -:   20:/// TODO: This should probably just be a general matcher that uses matchConstant
        -:   21:/// and checks the operation for an index type.
function _ZN4mlir18matchConstantIndexEv called 0 returned 0% blocks executed 0%
    #####:   22:detail::op_matcher<arith::ConstantIndexOp> mlir::matchConstantIndex() {
    #####:   23:  return detail::op_matcher<arith::ConstantIndexOp>();
        -:   24:}
        -:   25:
        -:   26:/// Detects the `values` produced by a ConstantIndexOp and places the new
        -:   27:/// constant in place of the corresponding sentinel value.
function _ZN4mlir23canonicalizeSubViewPartERN4llvm15SmallVectorImplINS_12OpFoldResultEEENS0_12function_refIFblEEE called 0 returned 0% blocks executed 0%
    #####:   28:void mlir::canonicalizeSubViewPart(
        -:   29:    SmallVectorImpl<OpFoldResult> &values,
        -:   30:    llvm::function_ref<bool(int64_t)> isDynamic) {
    #####:   31:  for (OpFoldResult &ofr : values) {
branch  0 never executed
branch  1 never executed
    #####:   32:    if (ofr.is<Attribute>())
branch  0 never executed
branch  1 never executed
    #####:   33:      continue;
        -:   34:    // Newly static, move from Value to constant.
    #####:   35:    if (auto cstOp =
branch  0 never executed
branch  1 never executed
    #####:   36:            ofr.dyn_cast<Value>().getDefiningOp<arith::ConstantIndexOp>())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   37:      ofr = OpBuilder(cstOp).getIndexAttr(cstOp.value());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   38:  }
    #####:   39:}
        -:   40:
function _ZN4mlir22getPositionsOfShapeOneEjN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:   41:llvm::SmallBitVector mlir::getPositionsOfShapeOne(unsigned rank,
        -:   42:                                                  ArrayRef<int64_t> shape) {
    #####:   43:  llvm::SmallBitVector dimsToProject(shape.size());
call    0 never executed
    #####:   44:  for (unsigned pos = 0, e = shape.size(); pos < e && rank > 0; ++pos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:    if (shape[pos] == 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:      dimsToProject.set(pos);
call    0 never executed
    #####:   47:      --rank;
        -:   48:    }
        -:   49:  }
    #####:   50:  return dimsToProject;
        -:   51:}
        -:   52:
function _ZN4mlir31getValueOrCreateConstantIndexOpERNS_9OpBuilderENS_8LocationENS_12OpFoldResultE called 0 returned 0% blocks executed 0%
    #####:   53:Value mlir::getValueOrCreateConstantIndexOp(OpBuilder &b, Location loc,
        -:   54:                                            OpFoldResult ofr) {
    #####:   55:  if (auto value = ofr.dyn_cast<Value>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   56:    return value;
    #####:   57:  auto attr = ofr.dyn_cast<Attribute>().dyn_cast<IntegerAttr>();
call    0 never executed
call    1 never executed
    #####:   58:  assert(attr && "expect the op fold result casts to an integer attribute");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   59:  return b.create<arith::ConstantIndexOp>(loc, attr.getValue().getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   60:}
        -:   61:
function _ZN4mlir31getValueOrCreateCastToIndexLikeERNS_9OpBuilderENS_8LocationENS_4TypeENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   62:Value mlir::getValueOrCreateCastToIndexLike(OpBuilder &b, Location loc,
        -:   63:                                            Type targetType, Value value) {
    #####:   64:  if (targetType == value.getType())
branch  0 never executed
branch  1 never executed
    #####:   65:    return value;
        -:   66:
    #####:   67:  bool targetIsIndex = targetType.isIndex();
call    0 never executed
    #####:   68:  bool valueIsIndex = value.getType().isIndex();
call    0 never executed
    #####:   69:  if (targetIsIndex ^ valueIsIndex)
branch  0 never executed
branch  1 never executed
    #####:   70:    return b.create<arith::IndexCastOp>(loc, targetType, value);
call    0 never executed
        -:   71:
    #####:   72:  auto targetIntegerType = targetType.dyn_cast<IntegerType>();
call    0 never executed
    #####:   73:  auto valueIntegerType = value.getType().dyn_cast<IntegerType>();
call    0 never executed
    #####:   74:  assert(targetIntegerType && valueIntegerType &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   75:         "unexpected cast between types other than integers and index");
    #####:   76:  assert(targetIntegerType.getSignedness() == valueIntegerType.getSignedness());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   77:
    #####:   78:  if (targetIntegerType.getWidth() > valueIntegerType.getWidth())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:    return b.create<arith::ExtSIOp>(loc, targetIntegerType, value);
call    0 never executed
    #####:   80:  return b.create<arith::TruncIOp>(loc, targetIntegerType, value);
call    0 never executed
        -:   81:}
        -:   82:
        -:   83:SmallVector<Value>
function _ZN4mlir31getValueOrCreateConstantIndexOpERNS_9OpBuilderENS_8LocationEN4llvm8ArrayRefINS_12OpFoldResultEEE called 0 returned 0% blocks executed 0%
    #####:   84:mlir::getValueOrCreateConstantIndexOp(OpBuilder &b, Location loc,
        -:   85:                                      ArrayRef<OpFoldResult> valueOrAttrVec) {
    #####:   86:  return llvm::to_vector<4>(
branch  0 never executed
branch  1 never executed
    #####:   87:      llvm::map_range(valueOrAttrVec, [&](OpFoldResult value) -> Value {
    #####:   88:        return getValueOrCreateConstantIndexOp(b, loc, value);
call    0 never executed
    #####:   89:      }));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   90:}
        -:   91:
function _ZN4mlir12ArithBuilder4_andENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:   92:Value ArithBuilder::_and(Value lhs, Value rhs) {
    #####:   93:  return b.create<arith::AndIOp>(loc, lhs, rhs);
call    0 never executed
        -:   94:}
function _ZN4mlir12ArithBuilder3addENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:   95:Value ArithBuilder::add(Value lhs, Value rhs) {
    #####:   96:  if (lhs.getType().isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   97:    return b.create<arith::AddFOp>(loc, lhs, rhs);
call    0 never executed
    #####:   98:  return b.create<arith::AddIOp>(loc, lhs, rhs);
call    0 never executed
        -:   99:}
function _ZN4mlir12ArithBuilder3subENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:  100:Value ArithBuilder::sub(Value lhs, Value rhs) {
    #####:  101:  if (lhs.getType().isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:    return b.create<arith::SubFOp>(loc, lhs, rhs);
call    0 never executed
    #####:  103:  return b.create<arith::SubIOp>(loc, lhs, rhs);
call    0 never executed
        -:  104:}
function _ZN4mlir12ArithBuilder3mulENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:  105:Value ArithBuilder::mul(Value lhs, Value rhs) {
    #####:  106:  if (lhs.getType().isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  107:    return b.create<arith::MulFOp>(loc, lhs, rhs);
call    0 never executed
    #####:  108:  return b.create<arith::MulIOp>(loc, lhs, rhs);
call    0 never executed
        -:  109:}
function _ZN4mlir12ArithBuilder3sgtENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:  110:Value ArithBuilder::sgt(Value lhs, Value rhs) {
    #####:  111:  if (lhs.getType().isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:    return b.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OGT, lhs, rhs);
call    0 never executed
    #####:  113:  return b.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt, lhs, rhs);
call    0 never executed
        -:  114:}
function _ZN4mlir12ArithBuilder3sltENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:  115:Value ArithBuilder::slt(Value lhs, Value rhs) {
    #####:  116:  if (lhs.getType().isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:    return b.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OLT, lhs, rhs);
call    0 never executed
    #####:  118:  return b.create<arith::CmpIOp>(loc, arith::CmpIPredicate::slt, lhs, rhs);
call    0 never executed
        -:  119:}
function _ZN4mlir12ArithBuilder6selectENS_5ValueES1_S1_ called 0 returned 0% blocks executed 0%
    #####:  120:Value ArithBuilder::select(Value cmp, Value lhs, Value rhs) {
    #####:  121:  return b.create<arith::SelectOp>(loc, cmp, lhs, rhs);
call    0 never executed
        -:  122:}
