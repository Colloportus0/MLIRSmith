        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Analysis/DataFlow/DeadCodeAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DeadCodeAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DeadCodeAnalysis.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- DeadCodeAnalysis.cpp - Dead code analysis --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   11:#include "mlir/Interfaces/CallInterfaces.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::dataflow;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// Executable
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
function _ZN4mlir8dataflow10Executable9setToLiveEv called 0 returned 0% blocks executed 0%
    8592*:   21:ChangeResult Executable::setToLive() {
    #####:   22:  if (live)
branch  0 never executed
branch  1 never executed
        -:   23:    return ChangeResult::NoChange;
    8592*:   24:  live = true;
    8592*:   25:  return ChangeResult::Change;
        -:   26:}
        -:   27:
function _ZNK4mlir8dataflow10Executable5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   28:void Executable::print(raw_ostream &os) const {
    #####:   29:  os << (live ? "live" : "dead");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   30:}
        -:   31:
function _ZNK4mlir8dataflow10Executable8onUpdateEPNS_14DataFlowSolverE called 8592 returned 100% blocks executed 27%
     8592:   32:void Executable::onUpdate(DataFlowSolver *solver) const {
     8592:   33:  if (auto *block = point.dyn_cast<Block *>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   34:    // Re-invoke the analyses on the block itself.
    8592*:   35:    for (DataFlowAnalysis *analysis : subscribers)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   36:      solver->enqueue({block, analysis});
call    0 never executed
call    1 never executed
        -:   37:    // Re-invoke the analyses on all operations in the block.
    8592*:   38:    for (DataFlowAnalysis *analysis : subscribers)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:      for (Operation &op : *block)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   40:        solver->enqueue({&op, analysis});
call    0 never executed
call    1 never executed
    #####:   41:  } else if (auto *programPoint = point.dyn_cast<GenericProgramPoint *>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   42:    // Re-invoke the analysis on the successor block.
    #####:   43:    if (auto *edge = dyn_cast<CFGEdge>(programPoint)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   44:      for (DataFlowAnalysis *analysis : subscribers)
branch  0 never executed
branch  1 never executed
    #####:   45:        solver->enqueue({edge->getTo(), analysis});
call    0 never executed
call    1 never executed
        -:   46:    }
        -:   47:  }
     8592:   48:}
        -:   49:
        -:   50://===----------------------------------------------------------------------===//
        -:   51:// PredecessorState
        -:   52://===----------------------------------------------------------------------===//
        -:   53:
function _ZNK4mlir8dataflow16PredecessorState5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   54:void PredecessorState::print(raw_ostream &os) const {
    #####:   55:  if (allPredecessorsKnown())
branch  0 never executed
branch  1 never executed
    #####:   56:    os << "(all) ";
call    0 never executed
    #####:   57:  os << "predecessors:\n";
call    0 never executed
    #####:   58:  for (Operation *op : getKnownPredecessors())
branch  0 never executed
branch  1 never executed
    #####:   59:    os << "  " << *op << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   60:}
        -:   61:
function _ZN4mlir8dataflow16PredecessorState4joinEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   62:ChangeResult PredecessorState::join(Operation *predecessor) {
    #####:   63:  return knownPredecessors.insert(predecessor) ? ChangeResult::Change
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:   64:                                               : ChangeResult::NoChange;
        -:   65:}
        -:   66:
function _ZN4mlir8dataflow16PredecessorState4joinEPNS_9OperationENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:   67:ChangeResult PredecessorState::join(Operation *predecessor, ValueRange inputs) {
    #####:   68:  ChangeResult result = join(predecessor);
call    0 never executed
    #####:   69:  if (!inputs.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   70:    ValueRange &curInputs = successorInputs[predecessor];
call    0 never executed
    #####:   71:    if (curInputs != inputs) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:      curInputs = inputs;
    #####:   73:      result |= ChangeResult::Change;
branch  0 never executed
branch  1 never executed
        -:   74:    }
        -:   75:  }
    #####:   76:  return result;
        -:   77:}
        -:   78:
        -:   79://===----------------------------------------------------------------------===//
        -:   80:// CFGEdge
        -:   81://===----------------------------------------------------------------------===//
        -:   82:
function _ZNK4mlir8dataflow7CFGEdge6getLocEv called 0 returned 0% blocks executed 0%
    #####:   83:Location CFGEdge::getLoc() const {
    #####:   84:  return FusedLoc::get(
call    0 never executed
        -:   85:      getFrom()->getParent()->getContext(),
    #####:   86:      {getFrom()->getParent()->getLoc(), getTo()->getParent()->getLoc()});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   87:}
        -:   88:
function _ZNK4mlir8dataflow7CFGEdge5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   89:void CFGEdge::print(raw_ostream &os) const {
    #####:   90:  getFrom()->print(os);
call    0 never executed
    #####:   91:  os << "\n -> \n";
call    0 never executed
    #####:   92:  getTo()->print(os);
call    0 never executed
    #####:   93:}
        -:   94:
        -:   95://===----------------------------------------------------------------------===//
        -:   96:// DeadCodeAnalysis
        -:   97://===----------------------------------------------------------------------===//
        -:   98:
function _ZN4mlir8dataflow16DeadCodeAnalysisC2ERNS_14DataFlowSolverE called 4290 returned 100% blocks executed 100%
     4290:   99:DeadCodeAnalysis::DeadCodeAnalysis(DataFlowSolver &solver)
     4290:  100:    : DataFlowAnalysis(solver) {
call    0 returned 100%
call    1 returned 100%
     4290:  101:  registerPointKind<CFGEdge>();
call    0 returned 100%
     4290:  102:}
        -:  103:
function _ZN4mlir8dataflow16DeadCodeAnalysis10initializeEPNS_9OperationE called 4290 returned 100% blocks executed 93%
     4290:  104:LogicalResult DeadCodeAnalysis::initialize(Operation *top) {
        -:  105:  // Mark the top-level blocks as executable.
    12870:  106:  for (Region &region : top->getRegions()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
    4290*:  107:    if (region.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:      continue;
     4290:  109:    auto *state = getOrCreate<Executable>(&region.front());
call    0 returned 100%
call    1 returned 100%
     8580:  110:    propagateIfChanged(state, state->setToLive());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  111:  }
        -:  112:
        -:  113:  // Mark as overdefined the predecessors of symbol callables with potentially
        -:  114:  // unknown predecessors.
     8580:  115:  initializeSymbolCallables(top);
        -:  116:
     8580:  117:  return initializeRecursively(top);
        -:  118:}
        -:  119:
function _ZN4mlir8dataflow16DeadCodeAnalysis25initializeSymbolCallablesEPNS_9OperationE called 0 returned 0% blocks executed 0%
    4290*:  120:void DeadCodeAnalysis::initializeSymbolCallables(Operation *top) {
    4290*:  121:  analysisScope = top;
function _ZZN4mlir8dataflow16DeadCodeAnalysis25initializeSymbolCallablesEPNS_9OperationEENKUlS3_bE_clES3_b called 4310 returned 100% blocks executed 71%
    8600*:  122:  auto walkFn = [&](Operation *symTable, bool allUsesVisible) {
     4310:  123:    Region &symbolTableRegion = symTable->getRegion(0);
call    0 returned 100%
     4310:  124:    Block *symbolTableBlock = &symbolTableRegion.front();
call    0 returned 100%
        -:  125:
     4310:  126:    bool foundSymbolCallable = false;
    13680:  127:    for (auto callable : symbolTableBlock->getOps<CallableOpInterface>()) {
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
call    3 returned 100%
call    4 returned 100%
     4685:  128:      Region *callableRegion = callable.getCallableRegion();
call    0 returned 100%
     4685:  129:      if (!callableRegion)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      352:  130:        continue;
     4333:  131:      auto symbol = dyn_cast<SymbolOpInterface>(callable.getOperation());
call    0 returned 100%
    4333*:  132:      if (!symbol)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  133:        continue;
        -:  134:
        -:  135:      // Public symbol callables or those for which we can't see all uses have
        -:  136:      // potentially unknown callsites.
    4333*:  137:      if (symbol.isPublic() || (!allUsesVisible && symbol.isNested())) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
    4262*:  138:        auto *state = getOrCreate<PredecessorState>(callable);
call    0 returned 100%
     4262:  139:        propagateIfChanged(state, state->setHasUnknownPredecessors());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  140:      }
     4333:  141:      foundSymbolCallable = true;
        -:  142:    }
        -:  143:
        -:  144:    // Exit early if no eligible symbol callables were found in the table.
     4310:  145:    if (!foundSymbolCallable)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
       21:  146:      return;
        -:  147:
        -:  148:    // Walk the symbol table to check for non-call uses of symbols.
     4289:  149:    Optional<SymbolTable::UseRange> uses =
     8578:  150:        SymbolTable::getSymbolUses(&symbolTableRegion);
call    0 returned 100%
     4289:  151:    if (!uses) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  152:      // If we couldn't gather the symbol uses, conservatively assume that
        -:  153:      // we can't track information for any nested symbols.
function _ZZZN4mlir8dataflow16DeadCodeAnalysis25initializeSymbolCallablesEPNS_9OperationEENKUlS3_bE_clES3_bENKUlNS_19CallableOpInterfaceEE_clES5_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  154:      return top->walk([&](CallableOpInterface callable) {
call    0 never executed
call    1 never executed
    #####:  155:        auto *state = getOrCreate<PredecessorState>(callable);
call    0 never executed
    #####:  156:        propagateIfChanged(state, state->setHasUnknownPredecessors());
branch  0 never executed
branch  1 never executed
call    2 never executed
      21*:  157:      });
branch  0 never executed
branch  1 never executed
        -:  158:    }
        -:  159:
     4311:  160:    for (const SymbolTable::SymbolUse &use : *uses) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
       22:  161:      if (isa<CallOpInterface>(use.getUser()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       22:  162:        continue;
        -:  163:      // If a callable symbol has a non-call use, then we can't be guaranteed to
        -:  164:      // know all callsites.
    #####:  165:      Operation *symbol = symbolTable.lookupSymbolIn(top, use.getSymbolRef());
call    0 never executed
    #####:  166:      auto *state = getOrCreate<PredecessorState>(symbol);
call    0 never executed
    #####:  167:      propagateIfChanged(state, state->setHasUnknownPredecessors());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  168:    }
    4290*:  169:  };
    4290*:  170:  SymbolTable::walkSymbolTables(top, /*allSymUsesVisible=*/!top->getBlock(),
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  171:                                walkFn);
    #####:  172:}
        -:  173:
        -:  174:/// Returns true if the operation is a returning terminator in region
        -:  175:/// control-flow or the terminator of a callable region.
function _ZL24isRegionOrCallableReturnPN4mlir9OperationE called 56620 returned 100% blocks executed 100%
    56620:  176:static bool isRegionOrCallableReturn(Operation *op) {
   113240:  177:  return !op->getNumSuccessors() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
   165115:  178:         isa<RegionBranchOpInterface, CallableOpInterface>(op->getParentOp()) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 83% (fallthrough)
branch  6 taken 17%
    51875:  179:         op->getBlock()->getTerminator() == op;
call    0 returned 100%
        -:  180:}
        -:  181:
function _ZN4mlir8dataflow16DeadCodeAnalysis21initializeRecursivelyEPNS_9OperationE called 56648 returned 100% blocks executed 93%
    56648:  182:LogicalResult DeadCodeAnalysis::initializeRecursively(Operation *op) {
        -:  183:  // Initialize the analysis by visiting every op with control-flow semantics.
   104281:  184:  if (op->getNumRegions() || op->getNumSuccessors() ||
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 91% (fallthrough)
branch  5 taken 9%
   147603:  185:      isRegionOrCallableReturn(op) || isa<CallOpInterface>(op)) {
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 100%
        -:  186:    // When the liveness of the parent block changes, make sure to re-invoke the
        -:  187:    // analysis on the op.
    13348:  188:    if (op->getBlock())
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
     9058:  189:      getOrCreate<Executable>(op->getBlock())->blockContentSubscribe(this);
call    0 returned 100%
call    1 returned 100%
        -:  190:    // Visit the op.
    13348:  191:    if (failed(visit(op)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  192:      return failure();
        -:  193:  }
        -:  194:  // Recurse on nested operations.
    87578:  195:  for (Region &region : op->getRegions())
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
    61373:  196:    for (Operation &op : region.getOps())
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
call    3 returned 100%
    52358:  197:      if (failed(initializeRecursively(&op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  198:        return failure();
    56648:  199:  return success();
        -:  200:}
        -:  201:
function _ZN4mlir8dataflow16DeadCodeAnalysis12markEdgeLiveEPNS_5BlockES3_ called 0 returned 0% blocks executed 0%
    #####:  202:void DeadCodeAnalysis::markEdgeLive(Block *from, Block *to) {
    #####:  203:  auto *state = getOrCreate<Executable>(to);
call    0 never executed
    #####:  204:  propagateIfChanged(state, state->setToLive());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  205:  auto *edgeState = getOrCreate<Executable>(getProgramPoint<CFGEdge>(from, to));
call    0 never executed
call    1 never executed
    #####:  206:  propagateIfChanged(edgeState, edgeState->setToLive());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  207:}
        -:  208:
function _ZN4mlir8dataflow16DeadCodeAnalysis19markEntryBlocksLiveEPNS_9OperationE called 4302 returned 100% blocks executed 92%
     4302:  209:void DeadCodeAnalysis::markEntryBlocksLive(Operation *op) {
    12906:  210:  for (Region &region : op->getRegions()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
    4302*:  211:    if (region.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:      continue;
     4302:  213:    auto *state = getOrCreate<Executable>(&region.front());
call    0 returned 100%
call    1 returned 100%
     8604:  214:    propagateIfChanged(state, state->setToLive());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  215:  }
     4302:  216:}
        -:  217:
function _ZN4mlir8dataflow16DeadCodeAnalysis5visitENS_12ProgramPointE called 13348 returned 100% blocks executed 67%
    13348:  218:LogicalResult DeadCodeAnalysis::visit(ProgramPoint point) {
    13348:  219:  if (point.is<Block *>())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  220:    return success();
    13348:  221:  auto *op = point.dyn_cast<Operation *>();
call    0 returned 100%
    13348:  222:  if (!op)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  223:    return emitError(point.getLoc(), "unknown program point kind");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  224:
        -:  225:  // If the parent block is not executable, there is nothing to do.
    13348:  226:  if (!getOrCreate<Executable>(op->getBlock())->isLive())
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
     4361:  227:    return success();
        -:  228:
        -:  229:  // We have a live call op. Add this as a live predecessor of the callee.
     8987:  230:  if (auto call = dyn_cast<CallOpInterface>(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  231:    visitCallOperation(call);
call    0 never executed
        -:  232:
        -:  233:  // Visit the regions.
     8987:  234:  if (op->getNumRegions()) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -:  235:    // Check if we can reason about the region control-flow.
     4725:  236:    if (auto branch = dyn_cast<RegionBranchOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  237:      visitRegionBranchOperation(branch);
call    0 never executed
        -:  238:
        -:  239:      // Check if this is a callable operation.
     4725:  240:    } else if (auto callable = dyn_cast<CallableOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     4685:  241:      const auto *callsites = getOrCreateFor<PredecessorState>(op, callable);
call    0 returned 100%
call    1 returned 100%
        -:  242:
        -:  243:      // If the callsites could not be resolved or are known to be non-empty,
        -:  244:      // mark the callable as executable.
     4685:  245:      if (!callsites->allPredecessorsKnown() ||
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      423:  246:          !callsites->getKnownPredecessors().empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     4262:  247:        markEntryBlocksLive(callable);
call    0 returned 100%
        -:  248:
        -:  249:      // Otherwise, conservatively mark all entry blocks as executable.
        -:  250:    } else {
       40:  251:      markEntryBlocksLive(op);
call    0 returned 100%
        -:  252:    }
        -:  253:  }
        -:  254:
     8987:  255:  if (isRegionOrCallableReturn(op)) {
call    0 returned 100%
branch  1 taken 47% (fallthrough)
branch  2 taken 53%
     8524:  256:    if (auto branch = dyn_cast<RegionBranchOpInterface>(op->getParentOp())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  257:      // Visit the exiting terminator of a region.
    #####:  258:      visitRegionTerminator(op, branch);
call    0 never executed
     4262:  259:    } else if (auto callable =
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     8524:  260:                   dyn_cast<CallableOpInterface>(op->getParentOp())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  261:      // Visit the exiting terminator of a callable.
     4262:  262:      visitCallableTerminator(op, callable);
call    0 returned 100%
        -:  263:    }
        -:  264:  }
        -:  265:  // Visit the successors.
     8987:  266:  if (op->getNumSuccessors()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  267:    // Check if we can reason about the control-flow.
    #####:  268:    if (auto branch = dyn_cast<BranchOpInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  269:      visitBranchOperation(branch);
call    0 never executed
        -:  270:
        -:  271:      // Otherwise, conservatively mark all successors as exectuable.
        -:  272:    } else {
    #####:  273:      for (Block *successor : op->getSuccessors())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  274:        markEdgeLive(op->getBlock(), successor);
call    0 never executed
        -:  275:    }
        -:  276:  }
        -:  277:
     8987:  278:  return success();
        -:  279:}
        -:  280:
function _ZN4mlir8dataflow16DeadCodeAnalysis18visitCallOperationENS_15CallOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  281:void DeadCodeAnalysis::visitCallOperation(CallOpInterface call) {
    #####:  282:  Operation *callableOp = call.resolveCallable(&symbolTable);
call    0 never executed
        -:  283:
        -:  284:  // A call to a externally-defined callable has unknown predecessors.
function _ZZN4mlir8dataflow16DeadCodeAnalysis18visitCallOperationENS_15CallOpInterfaceEENKUlPNS_9OperationEE_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  285:  const auto isExternalCallable = [this](Operation *op) {
        -:  286:    // A callable outside the analysis scope is an external callable.
    #####:  287:    if (!analysisScope->isAncestor(op))
branch  0 never executed
branch  1 never executed
        -:  288:      return true;
        -:  289:    // Otherwise, check if the callable region is defined.
    #####:  290:    if (auto callable = dyn_cast<CallableOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:      return !callable.getCallableRegion();
call    0 never executed
    #####:  292:    return false;
    #####:  293:  };
        -:  294:
        -:  295:  // TODO: Add support for non-symbol callables when necessary. If the
        -:  296:  // callable has non-call uses we would mark as having reached pessimistic
        -:  297:  // fixpoint, otherwise allow for propagating the return values out.
    #####:  298:  if (isa_and_nonnull<SymbolOpInterface>(callableOp) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  299:      !isExternalCallable(callableOp)) {
call    0 never executed
        -:  300:    // Add the live callsite.
    #####:  301:    auto *callsites = getOrCreate<PredecessorState>(callableOp);
call    0 never executed
    #####:  302:    propagateIfChanged(callsites, callsites->join(call));
call    0 never executed
call    1 never executed
        -:  303:  } else {
        -:  304:    // Mark this call op's predecessors as overdefined.
    #####:  305:    auto *predecessors = getOrCreate<PredecessorState>(call);
call    0 never executed
    #####:  306:    propagateIfChanged(predecessors, predecessors->setHasUnknownPredecessors());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  307:  }
    #####:  308:}
        -:  309:
        -:  310:/// Get the constant values of the operands of an operation. If any of the
        -:  311:/// constant value lattices are uninitialized, return none to indicate the
        -:  312:/// analysis should bail out.
function _ZL20getOperandValuesImplPN4mlir9OperationEN4llvm12function_refIFPKNS_8dataflow7LatticeINS4_13ConstantValueEEENS_5ValueEEEE called 0 returned 0% blocks executed 0%
    #####:  313:static Optional<SmallVector<Attribute>> getOperandValuesImpl(
        -:  314:    Operation *op,
        -:  315:    function_ref<const Lattice<ConstantValue> *(Value)> getLattice) {
    #####:  316:  SmallVector<Attribute> operands;
branch  0 never executed
branch  1 never executed
    #####:  317:  operands.reserve(op->getNumOperands());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  318:  for (Value operand : op->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  319:    const Lattice<ConstantValue> *cv = getLattice(operand);
call    0 never executed
        -:  320:    // If any of the operands' values are uninitialized, bail out.
    #####:  321:    if (cv->getValue().isUninitialized())
branch  0 never executed
branch  1 never executed
    #####:  322:      return {};
    #####:  323:    operands.push_back(cv->getValue().getConstantValue());
call    0 never executed
        -:  324:  }
    #####:  325:  return operands;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  326:}
        -:  327:
        -:  328:Optional<SmallVector<Attribute>>
function _ZN4mlir8dataflow16DeadCodeAnalysis16getOperandValuesEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  329:DeadCodeAnalysis::getOperandValues(Operation *op) {
function _ZZN4mlir8dataflow16DeadCodeAnalysis16getOperandValuesEPNS_9OperationEENKUlNS_5ValueEE_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  330:  return getOperandValuesImpl(op, [&](Value value) {
    #####:  331:    auto *lattice = getOrCreate<Lattice<ConstantValue>>(value);
call    0 never executed
    #####:  332:    lattice->useDefSubscribe(this);
call    0 never executed
    #####:  333:    return lattice;
    #####:  334:  });
call    0 never executed
call    1 never executed
call    2 never executed
        -:  335:}
        -:  336:
function _ZN4mlir8dataflow16DeadCodeAnalysis20visitBranchOperationENS_17BranchOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  337:void DeadCodeAnalysis::visitBranchOperation(BranchOpInterface branch) {
        -:  338:  // Try to deduce a single successor for the branch.
    #####:  339:  Optional<SmallVector<Attribute>> operands = getOperandValues(branch);
call    0 never executed
    #####:  340:  if (!operands)
branch  0 never executed
branch  1 never executed
    #####:  341:    return;
        -:  342:
    #####:  343:  if (Block *successor = branch.getSuccessorForOperands(*operands)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  344:    markEdgeLive(branch->getBlock(), successor);
call    0 never executed
        -:  345:  } else {
        -:  346:    // Otherwise, mark all successors as executable and outgoing edges.
    #####:  347:    for (Block *successor : branch->getSuccessors())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  348:      markEdgeLive(branch->getBlock(), successor);
call    0 never executed
        -:  349:  }
        -:  350:}
        -:  351:
function _ZN4mlir8dataflow16DeadCodeAnalysis26visitRegionBranchOperationENS_23RegionBranchOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  352:void DeadCodeAnalysis::visitRegionBranchOperation(
        -:  353:    RegionBranchOpInterface branch) {
        -:  354:  // Try to deduce which regions are executable.
    #####:  355:  Optional<SmallVector<Attribute>> operands = getOperandValues(branch);
call    0 never executed
    #####:  356:  if (!operands)
branch  0 never executed
branch  1 never executed
    #####:  357:    return;
        -:  358:
    #####:  359:  SmallVector<RegionSuccessor> successors;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  360:  branch.getSuccessorRegions(/*index=*/{}, *operands, successors);
call    0 never executed
    #####:  361:  for (const RegionSuccessor &successor : successors) {
branch  0 never executed
branch  1 never executed
        -:  362:    // The successor can be either an entry block or the parent operation.
    #####:  363:    ProgramPoint point = successor.getSuccessor()
branch  0 never executed
branch  1 never executed
    #####:  364:                             ? &successor.getSuccessor()->front()
call    0 never executed
call    1 never executed
    #####:  365:                             : ProgramPoint(branch);
branch  0 never executed
branch  1 never executed
        -:  366:    // Mark the entry block as executable.
    #####:  367:    auto *state = getOrCreate<Executable>(point);
call    0 never executed
    #####:  368:    propagateIfChanged(state, state->setToLive());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  369:    // Add the parent op as a predecessor.
    #####:  370:    auto *predecessors = getOrCreate<PredecessorState>(point);
call    0 never executed
    #####:  371:    propagateIfChanged(
call    0 never executed
call    1 never executed
        -:  372:        predecessors,
        -:  373:        predecessors->join(branch, successor.getSuccessorInputs()));
        -:  374:  }
        -:  375:}
        -:  376:
function _ZN4mlir8dataflow16DeadCodeAnalysis21visitRegionTerminatorEPNS_9OperationENS_23RegionBranchOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  377:void DeadCodeAnalysis::visitRegionTerminator(Operation *op,
        -:  378:                                             RegionBranchOpInterface branch) {
    #####:  379:  Optional<SmallVector<Attribute>> operands = getOperandValues(op);
call    0 never executed
    #####:  380:  if (!operands)
branch  0 never executed
branch  1 never executed
    #####:  381:    return;
        -:  382:
    #####:  383:  SmallVector<RegionSuccessor> successors;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  384:  branch.getSuccessorRegions(op->getParentRegion()->getRegionNumber(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  385:                             *operands, successors);
branch  0 never executed
branch  1 never executed
        -:  386:
        -:  387:  // Mark successor region entry blocks as executable and add this op to the
        -:  388:  // list of predecessors.
    #####:  389:  for (const RegionSuccessor &successor : successors) {
branch  0 never executed
branch  1 never executed
    #####:  390:    PredecessorState *predecessors;
    #####:  391:    if (Region *region = successor.getSuccessor()) {
branch  0 never executed
branch  1 never executed
    #####:  392:      auto *state = getOrCreate<Executable>(&region->front());
call    0 never executed
call    1 never executed
    #####:  393:      propagateIfChanged(state, state->setToLive());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  394:      predecessors = getOrCreate<PredecessorState>(&region->front());
call    0 never executed
call    1 never executed
        -:  395:    } else {
        -:  396:      // Add this terminator as a predecessor to the parent op.
    #####:  397:      predecessors = getOrCreate<PredecessorState>(branch);
call    0 never executed
        -:  398:    }
    #####:  399:    propagateIfChanged(predecessors,
call    0 never executed
call    1 never executed
        -:  400:                       predecessors->join(op, successor.getSuccessorInputs()));
        -:  401:  }
        -:  402:}
        -:  403:
function _ZN4mlir8dataflow16DeadCodeAnalysis23visitCallableTerminatorEPNS_9OperationENS_19CallableOpInterfaceE called 4262 returned 100% blocks executed 39%
     4262:  404:void DeadCodeAnalysis::visitCallableTerminator(Operation *op,
        -:  405:                                               CallableOpInterface callable) {
        -:  406:  // If there are no exiting values, we have nothing to do.
     8524:  407:  if (op->getNumOperands() == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  408:    return;
        -:  409:
        -:  410:  // Add as predecessors to all callsites this return op.
     4262:  411:  auto *callsites = getOrCreateFor<PredecessorState>(op, callable);
call    0 returned 100%
call    1 returned 100%
     4262:  412:  bool canResolve = op->hasTrait<OpTrait::ReturnLike>();
call    0 returned 100%
    4262*:  413:  for (Operation *predecessor : callsites->getKnownPredecessors()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  414:    assert(isa<CallOpInterface>(predecessor));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  415:    auto *predecessors = getOrCreate<PredecessorState>(predecessor);
call    0 never executed
    #####:  416:    if (canResolve) {
branch  0 never executed
branch  1 never executed
    #####:  417:      propagateIfChanged(predecessors, predecessors->join(op));
call    0 never executed
call    1 never executed
        -:  418:    } else {
        -:  419:      // If the terminator is not a return-like, then conservatively assume we
        -:  420:      // can't resolve the predecessor.
    #####:  421:      propagateIfChanged(predecessors,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  422:                         predecessors->setHasUnknownPredecessors());
        -:  423:    }
        -:  424:  }
        -:  425:}
