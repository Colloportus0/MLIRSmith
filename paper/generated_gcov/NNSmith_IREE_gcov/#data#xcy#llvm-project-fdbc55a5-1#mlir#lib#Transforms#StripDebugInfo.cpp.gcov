        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Transforms/StripDebugInfo.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/StripDebugInfo.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/StripDebugInfo.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- StripDebugInfo.cpp - Pass to strip debug information ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:#include "mlir/IR/Operation.h"
        -:   13:#include "mlir/Pass/Pass.h"
        -:   14:
        -:   15:namespace mlir {
        -:   16:#define GEN_PASS_DEF_STRIPDEBUGINFO
        -:   17:#include "mlir/Transforms/Passes.h.inc"
        -:   18:} // namespace mlir
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:namespace {
  326708*:   23:struct StripDebugInfo : public impl::StripDebugInfoBase<StripDebugInfo> {
call    0 never executed
call    1 returned 100%
        -:   24:  void runOnOperation() override;
        -:   25:};
        -:   26:} // namespace
        -:   27:
function _ZN12_GLOBAL__N_114StripDebugInfo14runOnOperationEv called 912 returned 100% blocks executed 83%
      912:   28:void StripDebugInfo::runOnOperation() {
      912:   29:  auto unknownLoc = UnknownLoc::get(&getContext());
call    0 returned 100%
call    1 returned 100%
        -:   30:
        -:   31:  // Strip the debug info from all operations.
function _ZZN12_GLOBAL__N_114StripDebugInfo14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 12020 returned 100% blocks executed 88%
    12932:   32:  getOperation()->walk([&](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    12020:   33:    op->setLoc(unknownLoc);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 38% (fallthrough)
branch  3 taken 62%
        -:   34:    // Strip block arguments debug info.
    18485:   35:    for (Region &region : op->getRegions()) {
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
     3700:   36:      for (Block &block : region.getBlocks()) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     3668:   37:        for (BlockArgument &arg : block.getArguments()) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1840:   38:          arg.setLoc(unknownLoc);
        -:   39:        }
        -:   40:      }
        -:   41:    }
    12020:   42:  });
      912:   43:}
        -:   44:
        -:   45:/// Creates a pass to strip debug information from a function.
function _ZN4mlir24createStripDebugInfoPassEv called 326708 returned 100% blocks executed 100%
   326708:   46:std::unique_ptr<Pass> mlir::createStripDebugInfoPass() {
   326708:   47:  return std::make_unique<StripDebugInfo>();
call    0 returned 100%
        -:   48:}
