        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Linalg/Transforms/BufferizableOpInterfaceImpl.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/BufferizableOpInterfaceImpl.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/BufferizableOpInterfaceImpl.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- BufferizableOpInterfaceImpl.cpp - Impl. of BufferizableOpInterface -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Linalg/Transforms/BufferizableOpInterfaceImpl.h"
        -:   10:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   11:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   12:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   13:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   14:#include "mlir/IR/Dialect.h"
        -:   15:#include "mlir/IR/Operation.h"
        -:   16:#include "mlir/Interfaces/DestinationStyleOpInterface.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:using namespace linalg;
        -:   20:using namespace mlir::bufferization;
        -:   21:
        -:   22:namespace {
        -:   23:
        -:   24:/// Generic conversion for any DestinationStyleOpInterface on tensors.
        -:   25:static LogicalResult
function _ZN12_GLOBAL__N_1L36bufferizeDestinationStyleOpInterfaceERN4mlir12RewriterBaseENS0_27DestinationStyleOpInterfaceERKNS0_13bufferization20BufferizationOptionsE called 0 returned 0% blocks executed 0%
    #####:   26:bufferizeDestinationStyleOpInterface(RewriterBase &rewriter,
        -:   27:                                     DestinationStyleOpInterface op,
        -:   28:                                     const BufferizationOptions &options) {
        -:   29:  // Take a guard before anything else.
    #####:   30:  OpBuilder::InsertionGuard g(rewriter);
call    0 never executed
    #####:   31:  rewriter.setInsertionPoint(op);
call    0 never executed
        -:   32:
        -:   33:  // Nothing to do. This op is already bufferized.
    #####:   34:  if (op.hasBufferSemantics())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:    return success();
        -:   36:
        -:   37:  // Ensure op has only tensors. Allow mixed tensor-buffer mode on a per-need
        -:   38:  // basis.
    #####:   39:  if (!op.hasTensorSemantics())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    return op->emitError() << "op does not have tensor semantics";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   41:
        -:   42:  // New input operands for the cloned op.
    #####:   43:  SmallVector<Value> newInputBuffers;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   44:  newInputBuffers.reserve(op.getNumDpsInputs());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:  for (OpOperand *opOperand : op.getDpsInputOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:    if (op.isScalar(opOperand)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   47:      newInputBuffers.push_back(opOperand->get());
call    0 never executed
    #####:   48:      continue;
        -:   49:    }
    #####:   50:    FailureOr<Value> buffer = getBuffer(rewriter, opOperand->get(), options);
call    0 never executed
    #####:   51:    if (failed(buffer))
branch  0 never executed
branch  1 never executed
    #####:   52:      return failure();
branch  0 never executed
branch  1 never executed
    #####:   53:    newInputBuffers.push_back(*buffer);
call    0 never executed
        -:   54:  }
        -:   55:
        -:   56:  // New output operands for the cloned op.
    #####:   57:  SmallVector<Value> newOutputBuffers;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   58:  for (OpResult opResult : op->getOpResults()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   59:    OpOperand *opOperand = op.getDpsInitOperand(opResult.getResultNumber());
call    0 never executed
call    1 never executed
    #####:   60:    FailureOr<Value> resultBuffer =
    #####:   61:        getBuffer(rewriter, opOperand->get(), options);
call    0 never executed
    #####:   62:    if (failed(resultBuffer))
branch  0 never executed
branch  1 never executed
    #####:   63:      return failure();
    #####:   64:    newOutputBuffers.push_back(*resultBuffer);
call    0 never executed
        -:   65:  }
        -:   66:
        -:   67:  // Merge input/output operands.
    #####:   68:  SmallVector<Value> newOperands = newInputBuffers;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:  newOperands.append(newOutputBuffers.begin(), newOutputBuffers.end());
call    0 never executed
        -:   70:
        -:   71:  // Set insertion point now that potential alloc/dealloc are introduced.
    #####:   72:  rewriter.setInsertionPoint(op);
call    0 never executed
        -:   73:  // Clone the op, but use the new operands. Move the existing block into the
        -:   74:  // new op. Since the new op does not have any tensor results, it does not
        -:   75:  // return anything.
    #####:   76:  assert(op->getNumRegions() == 1 && "expected that op has 1 region");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   77:  auto newOp = cast<DestinationStyleOpInterface>(op.cloneWithoutRegions(
call    0 never executed
    #####:   78:      rewriter, op.getLoc(), /*resultTypes=*/TypeRange{}, newOperands));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   79:  rewriter.inlineRegionBefore(op->getRegion(0), newOp->getRegion(0),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   80:                              newOp->getRegion(0).begin());
call    0 never executed
call    1 never executed
        -:   81:
        -:   82:  // Replace the results of the old op with the new output buffers.
    #####:   83:  replaceOpWithBufferizedValues(rewriter, op, newOutputBuffers);
call    0 never executed
call    1 never executed
        -:   84:
    #####:   85:  return success();
branch  0 never executed
branch  1 never executed
        -:   86:}
        -:   87:
        -:   88:/// Bufferization of linalg.generic. Replace with a new linalg.generic that
        -:   89:/// operates entirely on memrefs.
        -:   90:template <typename OpTy>
 13158850:   91:struct LinalgOpInterface
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
        -:   92:    : public BufferizableOpInterface::ExternalModel<LinalgOpInterface<OpTy>,
        -:   93:                                                    OpTy> {
    #####:   94:  bool bufferizesToMemoryRead(Operation *op, OpOperand &opOperand,
        -:   95:                              const AnalysisState &state) const {
        -:   96:    // Operand is read if it is used in the computation.
    #####:   97:    auto genericOp = cast<linalg::LinalgOp>(op);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
    #####:   98:    return genericOp.payloadUsesValueFromOperand(&opOperand);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
        -:   99:  }
        -:  100:
        -:  101:  bool bufferizesToMemoryWrite(Operation *op, OpOperand &opOperand,
        -:  102:                               const AnalysisState &state) const {
        -:  103:    // Operand is written to if it has an aliasing OpResult.
        -:  104:    auto bufferizableOp = cast<BufferizableOpInterface>(op);
        -:  105:    return !bufferizableOp.getAliasingOpResult(opOperand, state).empty();
        -:  106:  }
        -:  107:
        -:  108:  SmallVector<OpOperand *>
        -:  109:  getAliasingOpOperand(Operation *op, OpResult opResult,
        -:  110:                       const AnalysisState &state) const {
        -:  111:    auto genericOp = cast<DestinationStyleOpInterface>(op);
        -:  112:
        -:  113:    // The i-th OpResult may alias with the i-th "out" tensor.
        -:  114:    return {genericOp.getDpsInitOperand(opResult.getResultNumber())};
        -:  115:  }
        -:  116:
        -:  117:  SmallVector<OpResult> getAliasingOpResult(Operation *op, OpOperand &opOperand,
        -:  118:                                            const AnalysisState &state) const {
        -:  119:    auto genericOp = cast<DestinationStyleOpInterface>(op);
        -:  120:
        -:  121:    // The i-th "out" tensor may alias with the i-th OpResult.
        -:  122:    if (genericOp.isDpsInit(&opOperand))
        -:  123:      return {genericOp.getTiedOpResult(&opOperand)};
        -:  124:    return {};
        -:  125:  }
        -:  126:
    #####:  127:  BufferRelation bufferRelation(Operation *op, OpResult opResult,
        -:  128:                                const AnalysisState &state) const {
        -:  129:    return BufferRelation::Equivalent;
        -:  130:  }
        -:  131:
    #####:  132:  LogicalResult bufferize(Operation *op, RewriterBase &rewriter,
        -:  133:                          const BufferizationOptions &options) const {
    #####:  134:    return bufferizeDestinationStyleOpInterface(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
        -:  135:        rewriter, cast<DestinationStyleOpInterface>(op), options);
        -:  136:  }
        -:  137:};
        -:  138:
        -:  139:/// Helper structure that iterates over all LinalgOps in `OpTys` and registers
        -:  140:/// the `BufferizableOpInterface` with each of them.
        -:  141:template <typename... Ops>
        -:  142:struct LinalgOpInterfaceHelper {
function _ZN12_GLOBAL__N_123LinalgOpInterfaceHelperIJN4mlir6linalg13BatchMatmulOpENS2_13BatchMatvecOpENS2_19BatchReduceMatmulOpENS2_14Conv1DNcwFcwOpENS2_14Conv1DNwcWcfOpENS2_8Conv1DOpENS2_16Conv2DNchwFchwOpENS2_18Conv2DNgchwFgchwOpENS2_16Conv2DNhwcFhwcOpENS2_16Conv2DNhwcHwcfOpENS2_17Conv2DNhwcHwcfQOpENS2_8Conv2DOpENS2_18Conv3DNdhwcDhwcfOpENS2_8Conv3DOpENS2_6CopyOpENS2_22DepthwiseConv1DNwcWcOpENS2_23DepthwiseConv1DNwcWcmOpENS2_24DepthwiseConv2DNchwChwOpENS2_24DepthwiseConv2DNhwcHwcOpENS2_25DepthwiseConv2DNhwcHwcQOpENS2_25DepthwiseConv2DNhwcHwcmOpENS2_26DepthwiseConv2DNhwcHwcmQOpENS2_26DepthwiseConv3DNdhwcDhwcOpENS2_27DepthwiseConv3DNdhwcDhwcmOpENS2_5DotOpENS2_16ElemwiseBinaryOpENS2_15ElemwiseUnaryOpENS2_6FillOpENS2_11FillRng2DOpENS2_9GenericOpENS2_5MapOpENS2_8MatmulOpENS2_16MatmulUnsignedOpENS2_8MatvecOpENS2_7Mmt4DOpENS2_16PoolingNchwMaxOpENS2_16PoolingNchwSumOpENS2_17PoolingNdhwcMaxOpENS2_17PoolingNdhwcMinOpENS2_17PoolingNdhwcSumOpENS2_16PoolingNhwcMaxOpENS2_24PoolingNhwcMaxUnsignedOpENS2_16PoolingNhwcMinOpENS2_24PoolingNhwcMinUnsignedOpENS2_16PoolingNhwcSumOpENS2_22QuantizedBatchMatmulOpENS2_17QuantizedMatmulOpENS2_8ReduceOpENS2_11TransposeOpENS2_8VecmatOpEEE19registerOpInterfaceEPNS1_11MLIRContextE called 263177 returned 100% blocks executed 100%
   263177:  143:  static void registerOpInterface(MLIRContext *ctx) {
   263177:  144:    (Ops::template attachInterface<LinalgOpInterface<Ops>>(*ctx), ...);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
   263177:  145:  }
        -:  146:};
        -:  147:} // namespace
        -:  148:
function _ZN4mlir6linalg45registerBufferizableOpInterfaceExternalModelsERNS_15DialectRegistryE called 326627 returned 100% blocks executed 100%
   326627:  149:void mlir::linalg::registerBufferizableOpInterfaceExternalModels(
        -:  150:    DialectRegistry &registry) {
   326627:  151:  registry.addExtension(+[](MLIRContext *ctx, linalg::LinalgDialect *dialect) {
call    0 returned 100%
        -:  152:    // Register all Linalg structured ops. `LinalgOp` is an interface and it is
        -:  153:    // not possible to attach an external interface to an existing interface.
        -:  154:    // Therefore, attach the `BufferizableOpInterface` to all ops one-by-one.
        -:  155:    LinalgOpInterfaceHelper<
        -:  156:#define GET_OP_LIST
        -:  157:#include "mlir/Dialect/Linalg/IR/LinalgStructuredOps.cpp.inc"
        -:  158:        >::registerOpInterface(ctx);
        -:  159:  });
   326627:  160:}
