        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Vector/Transforms/BufferizableOpInterfaceImpl.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/BufferizableOpInterfaceImpl.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/BufferizableOpInterfaceImpl.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- BufferizableOpInterfaceImpl.cpp - Impl. of BufferizableOpInterface -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Vector/Transforms/BufferizableOpInterfaceImpl.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   12:#include "mlir/Dialect/Bufferization/IR/DstBufferizableOpInterfaceImpl.h"
        -:   13:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   14:#include "mlir/IR/Dialect.h"
        -:   15:#include "mlir/IR/Operation.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:using namespace mlir::bufferization;
        -:   19:using namespace mlir::vector;
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace vector {
        -:   23:namespace {
        -:   24:
        -:   25:/// Bufferization of vector.transfer_read. Replaced with a new
        -:   26:/// vector.transfer_read that operates on a memref.
    18144:   27:struct TransferReadOpInterface
call    0 returned 100%
        -:   28:    : public BufferizableOpInterface::ExternalModel<TransferReadOpInterface,
        -:   29:                                                    vector::TransferReadOp> {
        -:   30:  bool bufferizesToMemoryRead(Operation *op, OpOperand &opOperand,
        -:   31:                              const AnalysisState &state) const {
        -:   32:    assert(opOperand.get().getType().isa<RankedTensorType>() &&
        -:   33:           "only tensor types expected");
        -:   34:    return true;
        -:   35:  }
        -:   36:
        -:   37:  bool bufferizesToMemoryWrite(Operation *op, OpOperand &opOperand,
        -:   38:                               const AnalysisState &state) const {
        -:   39:    assert(opOperand.get().getType().isa<RankedTensorType>() &&
        -:   40:           "only tensor types expected");
        -:   41:    return false;
        -:   42:  }
        -:   43:
    #####:   44:  SmallVector<OpResult> getAliasingOpResult(Operation *op, OpOperand &opOperand,
        -:   45:                                            const AnalysisState &state) const {
    #####:   46:    return {};
        -:   47:  }
        -:   48:
        -:   49:  LogicalResult bufferize(Operation *op, RewriterBase &rewriter,
        -:   50:                          const BufferizationOptions &options) const {
        -:   51:    auto readOp = cast<vector::TransferReadOp>(op);
        -:   52:    assert(readOp.getShapedType().isa<TensorType>() &&
        -:   53:           "only tensor types expected");
        -:   54:    FailureOr<Value> buffer = getBuffer(rewriter, readOp.getSource(), options);
        -:   55:    if (failed(buffer))
        -:   56:      return failure();
        -:   57:    replaceOpWithNewBufferizedOp<vector::TransferReadOp>(
        -:   58:        rewriter, readOp, readOp.getVectorType(), *buffer, readOp.getIndices(),
        -:   59:        readOp.getPermutationMap(), readOp.getPadding(), readOp.getMask(),
        -:   60:        readOp.getInBoundsAttr());
        -:   61:    return success();
        -:   62:  }
        -:   63:};
        -:   64:
        -:   65:/// Bufferization of vector.transfer_write. Replace with a new
        -:   66:/// vector.transfer_write that operates on a memref.
        -:   67:///
        -:   68:/// Note: DstBufferizableOpInterfaceExternalModel provides many default method
        -:   69:/// implementations for DestinationStyle ops.
    18144:   70:struct TransferWriteOpInterface
call    0 returned 100%
        -:   71:    : public DstBufferizableOpInterfaceExternalModel<TransferWriteOpInterface,
        -:   72:                                                     vector::TransferWriteOp> {
        -:   73:  LogicalResult bufferize(Operation *op, RewriterBase &rewriter,
        -:   74:                          const BufferizationOptions &options) const {
        -:   75:    auto writeOp = cast<vector::TransferWriteOp>(op);
        -:   76:    assert(writeOp.getShapedType().isa<TensorType>() &&
        -:   77:           "only tensor types expected");
        -:   78:
        -:   79:    // Create a new transfer_write on buffer that doesn't have a return value.
        -:   80:    FailureOr<Value> resultBuffer =
        -:   81:        getBuffer(rewriter, writeOp.getSource(), options);
        -:   82:    if (failed(resultBuffer))
        -:   83:      return failure();
        -:   84:    rewriter.create<vector::TransferWriteOp>(
        -:   85:        writeOp.getLoc(), writeOp.getVector(), *resultBuffer,
        -:   86:        writeOp.getIndices(), writeOp.getPermutationMapAttr(),
        -:   87:        writeOp.getMask(), writeOp.getInBoundsAttr());
        -:   88:    replaceOpWithBufferizedValues(rewriter, op, *resultBuffer);
        -:   89:
        -:   90:    return success();
        -:   91:  }
        -:   92:};
        -:   93:
        -:   94:/// Bufferization of vector.gather. Replaced with a new vector.gather that
        -:   95:/// operates on a memref.
    18144:   96:struct GatherOpInterface
call    0 returned 100%
        -:   97:    : public BufferizableOpInterface::ExternalModel<GatherOpInterface,
        -:   98:                                                    vector::GatherOp> {
        -:   99:  bool bufferizesToMemoryRead(Operation *op, OpOperand &opOperand,
        -:  100:                              const AnalysisState &state) const {
        -:  101:    assert(opOperand.get().getType().isa<RankedTensorType>() &&
        -:  102:           "only tensor types expected");
        -:  103:    return true;
        -:  104:  }
        -:  105:
        -:  106:  bool bufferizesToMemoryWrite(Operation *op, OpOperand &opOperand,
        -:  107:                               const AnalysisState &state) const {
        -:  108:    assert(opOperand.get().getType().isa<RankedTensorType>() &&
        -:  109:           "only tensor types expected");
        -:  110:    return false;
        -:  111:  }
        -:  112:
    #####:  113:  SmallVector<OpResult> getAliasingOpResult(Operation *op, OpOperand &opOperand,
        -:  114:                                            const AnalysisState &state) const {
    #####:  115:    return {};
        -:  116:  }
        -:  117:
        -:  118:  LogicalResult bufferize(Operation *op, RewriterBase &rewriter,
        -:  119:                          const BufferizationOptions &options) const {
        -:  120:    auto gatherOp = cast<vector::GatherOp>(op);
        -:  121:    assert(gatherOp.getBaseType().isa<TensorType>() &&
        -:  122:           "only tensor types expected");
        -:  123:    FailureOr<Value> buffer = getBuffer(rewriter, gatherOp.getBase(), options);
        -:  124:    if (failed(buffer))
        -:  125:      return failure();
        -:  126:    replaceOpWithNewBufferizedOp<vector::GatherOp>(
        -:  127:        rewriter, gatherOp, gatherOp.getVectorType(), *buffer,
        -:  128:        gatherOp.getIndices(), gatherOp.getIndexVec(), gatherOp.getMask(),
        -:  129:        gatherOp.getPassThru());
        -:  130:    return success();
        -:  131:  }
        -:  132:};
        -:  133:
        -:  134:} // namespace
        -:  135:} // namespace vector
        -:  136:} // namespace mlir
        -:  137:
function _ZN4mlir6vector45registerBufferizableOpInterfaceExternalModelsERNS_15DialectRegistryE called 326618 returned 100% blocks executed 100%
   326618:  138:void mlir::vector::registerBufferizableOpInterfaceExternalModels(
        -:  139:    DialectRegistry &registry) {
function _ZZN4mlir6vector45registerBufferizableOpInterfaceExternalModelsERNS_15DialectRegistryEENKUlPNS_11MLIRContextEPNS0_13VectorDialectEE_clES4_S6_.isra.0 called 18144 returned 100% blocks executed 100%
   344762:  140:  registry.addExtension(+[](MLIRContext *ctx, vector::VectorDialect *dialect) {
call    0 returned 100%
    18144:  141:    TransferReadOp::attachInterface<TransferReadOpInterface>(*ctx);
call    0 returned 100%
    18144:  142:    TransferWriteOp::attachInterface<TransferWriteOpInterface>(*ctx);
call    0 returned 100%
    18144:  143:    GatherOp::attachInterface<GatherOpInterface>(*ctx);
call    0 returned 100%
    18144:  144:  });
   326618:  145:}
