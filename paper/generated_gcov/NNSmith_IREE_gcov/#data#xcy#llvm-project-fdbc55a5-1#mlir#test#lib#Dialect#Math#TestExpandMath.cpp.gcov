        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Math/TestExpandMath.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Math/CMakeFiles/MLIRMathTestPasses.dir/TestExpandMath.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Math/CMakeFiles/MLIRMathTestPasses.dir/TestExpandMath.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestExpandMath.cpp - Test expand math op into exp form -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains test passes for expanding math operations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Math/Transforms/Passes.h"
        -:   15:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace {
  326621*:   22:struct TestExpandMathPass
call    0 never executed
call    1 returned 100%
        -:   23:    : public PassWrapper<TestExpandMathPass, OperationPass<>> {
function _ZN12_GLOBAL__N_118TestExpandMathPass13resolveTypeIDEv called 326621 returned 100% blocks executed 100%
   326621:   24:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestExpandMathPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   25:
        -:   26:  void runOnOperation() override;
function _ZNK12_GLOBAL__N_118TestExpandMathPass11getArgumentEv called 325600 returned 100% blocks executed 100%
   325600:   27:  StringRef getArgument() const final { return "test-expand-math"; }
function _ZNK12_GLOBAL__N_118TestExpandMathPass20getDependentDialectsERN4mlir15DialectRegistryE called 1061 returned 100% blocks executed 100%
     1061:   28:  void getDependentDialects(DialectRegistry &registry) const override {
     1061:   29:    registry.insert<arith::ArithDialect, scf::SCFDialect>();
call    0 returned 100%
     1061:   30:  }
function _ZNK12_GLOBAL__N_118TestExpandMathPass14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   31:  StringRef getDescription() const final { return "Test expanding math"; }
        -:   32:};
        -:   33:} // namespace
        -:   34:
function _ZN12_GLOBAL__N_118TestExpandMathPass14runOnOperationEv called 878 returned 100% blocks executed 91%
      878:   35:void TestExpandMathPass::runOnOperation() {
      878:   36:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      878:   37:  populateExpandCtlzPattern(patterns);
call    0 returned 100%
      878:   38:  populateExpandTanhPattern(patterns);
call    0 returned 100%
      878:   39:  (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      878:   40:}
        -:   41:
        -:   42:namespace mlir {
        -:   43:namespace test {
function _ZN4mlir4test26registerTestExpandMathPassEv called 325560 returned 100% blocks executed 100%
   325560:   44:void registerTestExpandMathPass() { PassRegistration<TestExpandMathPass>(); }
call    0 returned 100%
        -:   45:} // namespace test
        -:   46:} // namespace mlir
