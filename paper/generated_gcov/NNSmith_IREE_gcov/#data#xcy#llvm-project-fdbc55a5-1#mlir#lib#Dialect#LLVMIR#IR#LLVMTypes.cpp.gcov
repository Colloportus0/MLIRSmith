        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/LLVMIR/IR/LLVMTypes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMDialect.dir/IR/LLVMTypes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMDialect.dir/IR/LLVMTypes.cpp.gcda
        -:    0:Runs:325549
        -:    1://===- LLVMTypes.cpp - MLIR LLVM dialect types ------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the types for the LLVM dialect in MLIR. These MLIR types
        -:   10:// correspond to the LLVM IR type system.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "TypeDetail.h"
        -:   15:
        -:   16:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   17:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   18:#include "mlir/IR/BuiltinTypes.h"
        -:   19:#include "mlir/IR/DialectImplementation.h"
        -:   20:#include "mlir/IR/TypeSupport.h"
        -:   21:
        -:   22:#include "llvm/ADT/ScopeExit.h"
        -:   23:#include "llvm/ADT/TypeSwitch.h"
        -:   24:#include "llvm/Support/TypeSize.h"
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace mlir::LLVM;
        -:   28:
        -:   29:constexpr const static unsigned kBitsInByte = 8;
        -:   30:
        -:   31://===----------------------------------------------------------------------===//
        -:   32:// custom<FunctionTypes>
        -:   33://===----------------------------------------------------------------------===//
        -:   34:
function _ZL18parseFunctionTypesRN4mlir9AsmParserERNS_9FailureOrIN4llvm11SmallVectorINS_4TypeELj6EEEEERNS2_IbEE called 0 returned 0% blocks executed 0%
    #####:   35:static ParseResult parseFunctionTypes(AsmParser &p,
        -:   36:                                      FailureOr<SmallVector<Type>> &params,
        -:   37:                                      FailureOr<bool> &isVarArg) {
    #####:   38:  params.emplace();
branch  0 never executed
branch  1 never executed
    #####:   39:  isVarArg = false;
call    0 never executed
        -:   40:  // `(` `)`
    #####:   41:  if (succeeded(p.parseOptionalRParen()))
call    0 never executed
    #####:   42:    return success();
        -:   43:
        -:   44:  // `(` `...` `)`
    #####:   45:  if (succeeded(p.parseOptionalEllipsis())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:    isVarArg = true;
call    0 never executed
    #####:   47:    return p.parseRParen();
call    0 never executed
        -:   48:  }
        -:   49:
        -:   50:  // type (`,` type)* (`,` `...`)?
    #####:   51:  FailureOr<Type> type;
call    0 never executed
    #####:   52:  if (parsePrettyLLVMType(p, type))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:    return failure();
    #####:   54:  params->push_back(*type);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   55:  while (succeeded(p.parseOptionalComma())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:    if (succeeded(p.parseOptionalEllipsis())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:      isVarArg = true;
call    0 never executed
    #####:   58:      return p.parseRParen();
call    0 never executed
        -:   59:    }
    #####:   60:    if (parsePrettyLLVMType(p, type))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:      return failure();
    #####:   62:    params->push_back(*type);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   63:  }
    #####:   64:  return p.parseRParen();
call    0 never executed
        -:   65:}
        -:   66:
function _ZL18printFunctionTypesRN4mlir10AsmPrinterEN4llvm8ArrayRefINS_4TypeEEEb called 4107 returned 100% blocks executed 36%
     4107:   67:static void printFunctionTypes(AsmPrinter &p, ArrayRef<Type> params,
        -:   68:                               bool isVarArg) {
     4107:   69:  llvm::interleaveComma(params, p,
call    0 returned 100%
     4145:   70:                        [&](Type type) { printPrettyLLVMType(p, type); });
call    0 returned 100%
call    1 returned 100%
     4107:   71:  if (isVarArg) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   72:    if (!params.empty())
branch  0 never executed
branch  1 never executed
    #####:   73:      p << ", ";
call    0 never executed
    #####:   74:    p << "...";
call    0 never executed
        -:   75:  }
     4107:   76:  p << ')';
call    0 returned 100%
     4107:   77:}
        -:   78:
        -:   79://===----------------------------------------------------------------------===//
        -:   80:// custom<Pointer>
        -:   81://===----------------------------------------------------------------------===//
        -:   82:
function _ZL12parsePointerRN4mlir9AsmParserERNS_9FailureOrINS_4TypeEEERNS2_IjEE called 0 returned 0% blocks executed 0%
    #####:   83:static ParseResult parsePointer(AsmParser &p, FailureOr<Type> &elementType,
        -:   84:                                FailureOr<unsigned> &addressSpace) {
    #####:   85:  addressSpace = 0;
branch  0 never executed
branch  1 never executed
        -:   86:  // `<` addressSpace `>`
    #####:   87:  OptionalParseResult result = p.parseOptionalInteger(*addressSpace);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   88:  if (result.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:   89:    if (failed(result.value()))
branch  0 never executed
branch  1 never executed
    #####:   90:      return failure();
    #####:   91:    elementType = Type();
    #####:   92:    return success();
        -:   93:  }
        -:   94:
    #####:   95:  if (parsePrettyLLVMType(p, elementType))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:    return failure();
    #####:   97:  if (succeeded(p.parseOptionalComma()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:    return p.parseInteger(*addressSpace);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   99:
    #####:  100:  return success();
        -:  101:}
        -:  102:
function _ZL12printPointerRN4mlir10AsmPrinterENS_4TypeEj called 36315 returned 100% blocks executed 36%
    36315:  103:static void printPointer(AsmPrinter &p, Type elementType,
        -:  104:                         unsigned addressSpace) {
    36315:  105:  if (elementType)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    36315:  106:    printPrettyLLVMType(p, elementType);
call    0 returned 100%
    36320:  107:  if (addressSpace != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:    if (elementType)
branch  0 never executed
branch  1 never executed
    #####:  109:      p << ", ";
call    0 never executed
    #####:  110:    p << addressSpace;
call    0 never executed
        -:  111:  }
    36320:  112:}
        -:  113:
        -:  114://===----------------------------------------------------------------------===//
        -:  115:// ODS-Generated Definitions
        -:  116://===----------------------------------------------------------------------===//
        -:  117:
        -:  118:/// These are unused for now.
        -:  119:/// TODO: Move over to these once more types have been migrated to TypeDef.
        -:  120:LLVM_ATTRIBUTE_UNUSED static OptionalParseResult
        -:  121:generatedTypeParser(AsmParser &parser, StringRef *mnemonic, Type &value);
        -:  122:LLVM_ATTRIBUTE_UNUSED static LogicalResult
        -:  123:generatedTypePrinter(Type def, AsmPrinter &printer);
        -:  124:
        -:  125:#include "mlir/Dialect/LLVMIR/LLVMTypeInterfaces.cpp.inc"
        -:  126:
        -:  127:#define GET_TYPEDEF_CLASSES
        -:  128:#include "mlir/Dialect/LLVMIR/LLVMTypes.cpp.inc"
        -:  129:
        -:  130://===----------------------------------------------------------------------===//
        -:  131:// LLVMArrayType
        -:  132://===----------------------------------------------------------------------===//
        -:  133:
function _ZN4mlir4LLVM13LLVMArrayType18isValidElementTypeENS_4TypeE called 0 returned 0% blocks executed 0%
      67*:  134:bool LLVMArrayType::isValidElementType(Type type) {
    #####:  135:  return !type.isa<LLVMVoidType, LLVMLabelType, LLVMMetadataType,
call    0 never executed
      67*:  136:                   LLVMFunctionType, LLVMTokenType, LLVMScalableVectorType>();
        -:  137:}
        -:  138:
function _ZN4mlir4LLVM13LLVMArrayType3getENS_4TypeEj called 67 returned 100% blocks executed 80%
       67:  139:LLVMArrayType LLVMArrayType::get(Type elementType, unsigned numElements) {
      67*:  140:  assert(elementType && "expected non-null subtype");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       67:  141:  return Base::get(elementType.getContext(), elementType, numElements);
call    0 returned 100%
call    1 returned 100%
        -:  142:}
        -:  143:
        -:  144:LLVMArrayType
function _ZN4mlir4LLVM13LLVMArrayType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  145:LLVMArrayType::getChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  146:                          Type elementType, unsigned numElements) {
    #####:  147:  assert(elementType && "expected non-null subtype");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  148:  return Base::getChecked(emitError, elementType.getContext(), elementType,
    #####:  149:                          numElements);
call    0 never executed
call    1 never executed
        -:  150:}
        -:  151:
        -:  152:LogicalResult
function _ZN4mlir4LLVM13LLVMArrayType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 67 returned 100% blocks executed 40%
       67:  153:LLVMArrayType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  154:                      Type elementType, unsigned numElements) {
       67:  155:  if (!isValidElementType(elementType))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  156:    return emitError() << "invalid array element type: " << elementType;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
       67:  157:  return success();
        -:  158:}
        -:  159:
        -:  160://===----------------------------------------------------------------------===//
        -:  161:// DataLayoutTypeInterface
        -:  162:
function _ZNK4mlir4LLVM13LLVMArrayType17getTypeSizeInBitsERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  163:unsigned LLVMArrayType::getTypeSizeInBits(const DataLayout &dataLayout,
        -:  164:                                          DataLayoutEntryListRef params) const {
    #####:  165:  return kBitsInByte * getTypeSize(dataLayout, params);
call    0 never executed
call    1 never executed
        -:  166:}
        -:  167:
function _ZNK4mlir4LLVM13LLVMArrayType11getTypeSizeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  168:unsigned LLVMArrayType::getTypeSize(const DataLayout &dataLayout,
        -:  169:                                    DataLayoutEntryListRef params) const {
    #####:  170:  return llvm::alignTo(dataLayout.getTypeSize(getElementType()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  171:                       dataLayout.getTypeABIAlignment(getElementType())) *
call    0 never executed
    #####:  172:         getNumElements();
        -:  173:}
        -:  174:
function _ZNK4mlir4LLVM13LLVMArrayType15getABIAlignmentERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  175:unsigned LLVMArrayType::getABIAlignment(const DataLayout &dataLayout,
        -:  176:                                        DataLayoutEntryListRef params) const {
    #####:  177:  return dataLayout.getTypeABIAlignment(getElementType());
call    0 never executed
call    1 never executed
        -:  178:}
        -:  179:
        -:  180:unsigned
function _ZNK4mlir4LLVM13LLVMArrayType21getPreferredAlignmentERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  181:LLVMArrayType::getPreferredAlignment(const DataLayout &dataLayout,
        -:  182:                                     DataLayoutEntryListRef params) const {
    #####:  183:  return dataLayout.getTypePreferredAlignment(getElementType());
call    0 never executed
call    1 never executed
        -:  184:}
        -:  185:
        -:  186://===----------------------------------------------------------------------===//
        -:  187:// SubElementTypeInterface
        -:  188:
function _ZNK4mlir4LLVM13LLVMArrayType24walkImmediateSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS3_IFvNS_4TypeEEEE called 0 returned 0% blocks executed 0%
     266*:  189:void LLVMArrayType::walkImmediateSubElements(
        -:  190:    function_ref<void(Attribute)> walkAttrsFn,
        -:  191:    function_ref<void(Type)> walkTypesFn) const {
     266*:  192:  walkTypesFn(getElementType());
call    0 returned 100%
call    1 never executed
    #####:  193:}
        -:  194:
function _ZNK4mlir4LLVM13LLVMArrayType27replaceImmediateSubElementsEN4llvm8ArrayRefINS_9AttributeEEENS3_INS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  195:Type LLVMArrayType::replaceImmediateSubElements(
        -:  196:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  197:  return get(replTypes.front(), getNumElements());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  198:}
        -:  199:
        -:  200://===----------------------------------------------------------------------===//
        -:  201:// Function type.
        -:  202://===----------------------------------------------------------------------===//
        -:  203:
function _ZN4mlir4LLVM16LLVMFunctionType19isValidArgumentTypeENS_4TypeE called 0 returned 0% blocks executed 0%
  354492*:  204:bool LLVMFunctionType::isValidArgumentType(Type type) {
    #####:  205:  return !type.isa<LLVMVoidType, LLVMFunctionType>();
call    0 never executed
        -:  206:}
        -:  207:
function _ZN4mlir4LLVM16LLVMFunctionType17isValidResultTypeENS_4TypeE called 0 returned 0% blocks executed 0%
  165485*:  208:bool LLVMFunctionType::isValidResultType(Type type) {
    #####:  209:  return !type.isa<LLVMFunctionType, LLVMMetadataType, LLVMLabelType>();
call    0 never executed
        -:  210:}
        -:  211:
function _ZN4mlir4LLVM16LLVMFunctionType3getENS_4TypeEN4llvm8ArrayRefIS2_EEb called 165485 returned 100% blocks executed 80%
   165485:  212:LLVMFunctionType LLVMFunctionType::get(Type result, ArrayRef<Type> arguments,
        -:  213:                                       bool isVarArg) {
  165485*:  214:  assert(result && "expected non-null result");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   165485:  215:  return Base::get(result.getContext(), result, arguments, isVarArg);
call    0 returned 100%
call    1 returned 100%
        -:  216:}
        -:  217:
        -:  218:LLVMFunctionType
function _ZN4mlir4LLVM16LLVMFunctionType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeENS2_8ArrayRefIS7_EEb called 0 returned 0% blocks executed 0%
    #####:  219:LLVMFunctionType::getChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  220:                             Type result, ArrayRef<Type> arguments,
        -:  221:                             bool isVarArg) {
    #####:  222:  assert(result && "expected non-null result");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  223:  return Base::getChecked(emitError, result.getContext(), result, arguments,
    #####:  224:                          isVarArg);
call    0 never executed
call    1 never executed
        -:  225:}
        -:  226:
function _ZNK4mlir4LLVM16LLVMFunctionType5cloneENS_9TypeRangeES2_ called 1 returned 100% blocks executed 88%
        1:  227:LLVMFunctionType LLVMFunctionType::clone(TypeRange inputs,
        -:  228:                                         TypeRange results) const {
       1*:  229:  assert(results.size() == 1 && "expected a single result type");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  230:  return get(results[0], llvm::to_vector(inputs), isVarArg());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  231:}
        -:  232:
function _ZNK4mlir4LLVM16LLVMFunctionType14getReturnTypesEv called 248 returned 100% blocks executed 100%
      248:  233:ArrayRef<Type> LLVMFunctionType::getReturnTypes() const {
      248:  234:  return static_cast<detail::LLVMFunctionTypeStorage *>(getImpl())->returnType;
        -:  235:}
        -:  236:
        -:  237:LogicalResult
function _ZN4mlir4LLVM16LLVMFunctionType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeENS2_8ArrayRefIS7_EEb called 165485 returned 100% blocks executed 43%
   165485:  238:LLVMFunctionType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  239:                         Type result, ArrayRef<Type> arguments, bool) {
   165485:  240:  if (!isValidResultType(result))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  241:    return emitError() << "invalid function result type: " << result;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  242:
   519977:  243:  for (Type arg : arguments)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
   354492:  244:    if (!isValidArgumentType(arg))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  245:      return emitError() << "invalid function argument type: " << arg;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  246:
   165485:  247:  return success();
        -:  248:}
        -:  249:
        -:  250://===----------------------------------------------------------------------===//
        -:  251:// SubElementTypeInterface
        -:  252:
function _ZNK4mlir4LLVM16LLVMFunctionType24walkImmediateSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS3_IFvNS_4TypeEEEE called 1710 returned 100% blocks executed 100%
     1710:  253:void LLVMFunctionType::walkImmediateSubElements(
        -:  254:    function_ref<void(Attribute)> walkAttrsFn,
        -:  255:    function_ref<void(Type)> walkTypesFn) const {
     1710:  256:  walkTypesFn(getReturnType());
call    0 returned 100%
     3420:  257:  for (Type type : getParams())
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1710:  258:    walkTypesFn(type);
call    0 returned 100%
     1710:  259:}
        -:  260:
function _ZNK4mlir4LLVM16LLVMFunctionType27replaceImmediateSubElementsEN4llvm8ArrayRefINS_9AttributeEEENS3_INS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  261:Type LLVMFunctionType::replaceImmediateSubElements(
        -:  262:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  263:  return get(replTypes.front(), replTypes.drop_front(), isVarArg());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  264:}
        -:  265:
        -:  266://===----------------------------------------------------------------------===//
        -:  267:// LLVMPointerType
        -:  268://===----------------------------------------------------------------------===//
        -:  269:
function _ZN4mlir4LLVM15LLVMPointerType18isValidElementTypeENS_4TypeE called 39312 returned 100% blocks executed 75%
    39312:  270:bool LLVMPointerType::isValidElementType(Type type) {
    39312:  271:  if (!type)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  272:    return true;
    39312:  273:  return isCompatibleOuterType(type)
call    0 returned 100%
    39312:  274:             ? !type.isa<LLVMVoidType, LLVMTokenType, LLVMMetadataType,
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    39312:  275:                         LLVMLabelType>()
    #####:  276:             : type.isa<PointerElementTypeInterface>();
        -:  277:}
        -:  278:
function _ZN4mlir4LLVM15LLVMPointerType3getENS_4TypeEj called 39312 returned 100% blocks executed 80%
    39312:  279:LLVMPointerType LLVMPointerType::get(Type pointee, unsigned addressSpace) {
   39312*:  280:  assert(pointee && "expected non-null subtype, pass the context instead if "
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  281:                    "the opaque pointer type is desired");
    39312:  282:  return Base::get(pointee.getContext(), pointee, addressSpace);
call    0 returned 100%
call    1 returned 100%
        -:  283:}
        -:  284:
        -:  285:LogicalResult
function _ZN4mlir4LLVM15LLVMPointerType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 39312 returned 100% blocks executed 40%
    39312:  286:LLVMPointerType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  287:                        Type pointee, unsigned) {
    39312:  288:  if (!isValidElementType(pointee))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  289:    return emitError() << "invalid pointer element type: " << pointee;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    39312:  290:  return success();
        -:  291:}
        -:  292:
        -:  293://===----------------------------------------------------------------------===//
        -:  294:// DataLayoutTypeInterface
        -:  295:
        -:  296:constexpr const static unsigned kDefaultPointerSizeBits = 64;
        -:  297:constexpr const static unsigned kDefaultPointerAlignment = 8;
        -:  298:
function _ZN4mlir4LLVM23extractPointerSpecValueENS_9AttributeENS0_13PtrDLEntryPosE called 0 returned 0% blocks executed 0%
    #####:  299:Optional<unsigned> mlir::LLVM::extractPointerSpecValue(Attribute attr,
        -:  300:                                                       PtrDLEntryPos pos) {
    #####:  301:  auto spec = attr.cast<DenseIntElementsAttr>();
call    0 never executed
    #####:  302:  auto idx = static_cast<unsigned>(pos);
    #####:  303:  if (idx >= spec.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  304:    return None;
    #####:  305:  return spec.getValues<unsigned>()[idx];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  306:}
        -:  307:
        -:  308:/// Returns the part of the data layout entry that corresponds to `pos` for the
        -:  309:/// given `type` by interpreting the list of entries `params`. For the pointer
        -:  310:/// type in the default address space, returns the default value if the entries
        -:  311:/// do not provide a custom one, for other address spaces returns None.
        -:  312:static Optional<unsigned>
function _ZL25getPointerDataLayoutEntryN4llvm8ArrayRefIN4mlir24DataLayoutEntryInterfaceEEENS1_4LLVM15LLVMPointerTypeENS4_13PtrDLEntryPosE called 0 returned 0% blocks executed 0%
    #####:  313:getPointerDataLayoutEntry(DataLayoutEntryListRef params, LLVMPointerType type,
        -:  314:                          PtrDLEntryPos pos) {
        -:  315:  // First, look for the entry for the pointer in the current address space.
    #####:  316:  Attribute currentEntry;
    #####:  317:  for (DataLayoutEntryInterface entry : params) {
branch  0 never executed
branch  1 never executed
    #####:  318:    if (!entry.isTypeEntry())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  319:      continue;
    #####:  320:    if (entry.getKey().get<Type>().cast<LLVMPointerType>().getAddressSpace() ==
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  321:        type.getAddressSpace()) {
branch  0 never executed
branch  1 never executed
    #####:  322:      currentEntry = entry.getValue();
call    0 never executed
    #####:  323:      break;
        -:  324:    }
        -:  325:  }
    #####:  326:  if (currentEntry) {
branch  0 never executed
branch  1 never executed
    #####:  327:    return *extractPointerSpecValue(currentEntry, pos) /
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  328:           (pos == PtrDLEntryPos::Size ? 1 : kBitsInByte);
branch  0 never executed
branch  1 never executed
        -:  329:  }
        -:  330:
        -:  331:  // If not found, and this is the pointer to the default memory space, assume
        -:  332:  // 64-bit pointers.
    #####:  333:  if (type.getAddressSpace() == 0) {
branch  0 never executed
branch  1 never executed
    #####:  334:    return pos == PtrDLEntryPos::Size ? kDefaultPointerSizeBits
    #####:  335:                                      : kDefaultPointerAlignment;
branch  0 never executed
branch  1 never executed
        -:  336:  }
        -:  337:
    #####:  338:  return llvm::None;
        -:  339:}
        -:  340:
        -:  341:unsigned
function _ZNK4mlir4LLVM15LLVMPointerType17getTypeSizeInBitsERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  342:LLVMPointerType::getTypeSizeInBits(const DataLayout &dataLayout,
        -:  343:                                   DataLayoutEntryListRef params) const {
    #####:  344:  if (Optional<unsigned> size =
branch  0 never executed
branch  1 never executed
    #####:  345:          getPointerDataLayoutEntry(params, *this, PtrDLEntryPos::Size))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  346:    return *size;
        -:  347:
        -:  348:  // For other memory spaces, use the size of the pointer to the default memory
        -:  349:  // space.
    #####:  350:  if (isOpaque())
branch  0 never executed
branch  1 never executed
    #####:  351:    return dataLayout.getTypeSizeInBits(get(getContext()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  352:  return dataLayout.getTypeSizeInBits(get(getElementType()));
call    0 never executed
call    1 never executed
        -:  353:}
        -:  354:
function _ZNK4mlir4LLVM15LLVMPointerType15getABIAlignmentERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  355:unsigned LLVMPointerType::getABIAlignment(const DataLayout &dataLayout,
        -:  356:                                          DataLayoutEntryListRef params) const {
    #####:  357:  if (Optional<unsigned> alignment =
branch  0 never executed
branch  1 never executed
    #####:  358:          getPointerDataLayoutEntry(params, *this, PtrDLEntryPos::Abi))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  359:    return *alignment;
        -:  360:
    #####:  361:  if (isOpaque())
branch  0 never executed
branch  1 never executed
    #####:  362:    return dataLayout.getTypeABIAlignment(get(getContext()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  363:  return dataLayout.getTypeABIAlignment(get(getElementType()));
call    0 never executed
call    1 never executed
        -:  364:}
        -:  365:
        -:  366:unsigned
function _ZNK4mlir4LLVM15LLVMPointerType21getPreferredAlignmentERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  367:LLVMPointerType::getPreferredAlignment(const DataLayout &dataLayout,
        -:  368:                                       DataLayoutEntryListRef params) const {
    #####:  369:  if (Optional<unsigned> alignment =
branch  0 never executed
branch  1 never executed
    #####:  370:          getPointerDataLayoutEntry(params, *this, PtrDLEntryPos::Preferred))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  371:    return *alignment;
        -:  372:
    #####:  373:  if (isOpaque())
branch  0 never executed
branch  1 never executed
    #####:  374:    return dataLayout.getTypePreferredAlignment(get(getContext()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  375:  return dataLayout.getTypePreferredAlignment(get(getElementType()));
call    0 never executed
call    1 never executed
        -:  376:}
        -:  377:
function _ZNK4mlir4LLVM15LLVMPointerType13areCompatibleEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEES5_ called 0 returned 0% blocks executed 0%
    #####:  378:bool LLVMPointerType::areCompatible(DataLayoutEntryListRef oldLayout,
        -:  379:                                    DataLayoutEntryListRef newLayout) const {
    #####:  380:  for (DataLayoutEntryInterface newEntry : newLayout) {
branch  0 never executed
branch  1 never executed
    #####:  381:    if (!newEntry.isTypeEntry())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  382:      continue;
    #####:  383:    unsigned size = kDefaultPointerSizeBits;
    #####:  384:    unsigned abi = kDefaultPointerAlignment;
    #####:  385:    auto newType = newEntry.getKey().get<Type>().cast<LLVMPointerType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  386:    const auto *it =
function _ZZNK4mlir4LLVM15LLVMPointerType13areCompatibleEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEES5_ENKUlS4_E_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  387:        llvm::find_if(oldLayout, [&](DataLayoutEntryInterface entry) {
call    0 never executed
    #####:  388:          if (auto type = entry.getKey().dyn_cast<Type>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  389:            return type.cast<LLVMPointerType>().getAddressSpace() ==
call    0 never executed
    #####:  390:                   newType.getAddressSpace();
        -:  391:          }
    #####:  392:          return false;
        -:  393:        });
    #####:  394:    if (it == oldLayout.end()) {
branch  0 never executed
branch  1 never executed
function _ZZNK4mlir4LLVM15LLVMPointerType13areCompatibleEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEES5_ENKUlS4_E0_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  395:      llvm::find_if(oldLayout, [&](DataLayoutEntryInterface entry) {
call    0 never executed
    #####:  396:        if (auto type = entry.getKey().dyn_cast<Type>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  397:          return type.cast<LLVMPointerType>().getAddressSpace() == 0;
call    0 never executed
        -:  398:        }
    #####:  399:        return false;
        -:  400:      });
        -:  401:    }
    #####:  402:    if (it != oldLayout.end()) {
branch  0 never executed
branch  1 never executed
    #####:  403:      size = *extractPointerSpecValue(*it, PtrDLEntryPos::Size);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  404:      abi = *extractPointerSpecValue(*it, PtrDLEntryPos::Abi);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  405:    }
        -:  406:
    #####:  407:    Attribute newSpec = newEntry.getValue().cast<DenseIntElementsAttr>();
call    0 never executed
call    1 never executed
    #####:  408:    unsigned newSize = *extractPointerSpecValue(newSpec, PtrDLEntryPos::Size);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  409:    unsigned newAbi = *extractPointerSpecValue(newSpec, PtrDLEntryPos::Abi);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  410:    if (size != newSize || abi < newAbi || abi % newAbi != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  411:      return false;
        -:  412:  }
    #####:  413:  return true;
        -:  414:}
        -:  415:
function _ZNK4mlir4LLVM15LLVMPointerType13verifyEntriesEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  416:LogicalResult LLVMPointerType::verifyEntries(DataLayoutEntryListRef entries,
        -:  417:                                             Location loc) const {
    #####:  418:  for (DataLayoutEntryInterface entry : entries) {
branch  0 never executed
branch  1 never executed
    #####:  419:    if (!entry.isTypeEntry())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  420:      continue;
    #####:  421:    auto key = entry.getKey().get<Type>().cast<LLVMPointerType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  422:    auto values = entry.getValue().dyn_cast<DenseIntElementsAttr>();
call    0 never executed
call    1 never executed
    #####:  423:    if (!values || (values.size() != 3 && values.size() != 4)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  424:      return emitError(loc)
call    0 never executed
call    1 never executed
    #####:  425:             << "expected layout attribute for " << entry.getKey().get<Type>()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  426:             << " to be a dense integer elements attribute with 3 or 4 "
    #####:  427:                "elements";
call    0 never executed
        -:  428:    }
    #####:  429:    if (key.getElementType() && !key.getElementType().isInteger(8)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  430:      return emitError(loc) << "unexpected layout attribute for pointer to "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  431:                            << key.getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  432:    }
    #####:  433:    if (extractPointerSpecValue(values, PtrDLEntryPos::Abi) >
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  434:        extractPointerSpecValue(values, PtrDLEntryPos::Preferred)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  435:      return emitError(loc) << "preferred alignment is expected to be at least "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  436:                               "as large as ABI alignment";
call    0 never executed
        -:  437:    }
        -:  438:  }
    #####:  439:  return success();
        -:  440:}
        -:  441:
        -:  442://===----------------------------------------------------------------------===//
        -:  443:// SubElementTypeInterface
        -:  444:
function _ZNK4mlir4LLVM15LLVMPointerType24walkImmediateSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS3_IFvNS_4TypeEEEE called 0 returned 0% blocks executed 0%
    3666*:  445:void LLVMPointerType::walkImmediateSubElements(
        -:  446:    function_ref<void(Attribute)> walkAttrsFn,
        -:  447:    function_ref<void(Type)> walkTypesFn) const {
    3666*:  448:  walkTypesFn(getElementType());
call    0 returned 100%
call    1 never executed
    #####:  449:}
        -:  450:
function _ZNK4mlir4LLVM15LLVMPointerType27replaceImmediateSubElementsEN4llvm8ArrayRefINS_9AttributeEEENS3_INS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  451:Type LLVMPointerType::replaceImmediateSubElements(
        -:  452:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  453:  return get(getContext(), replTypes.front(), getAddressSpace());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  454:}
        -:  455:
        -:  456://===----------------------------------------------------------------------===//
        -:  457:// Struct type.
        -:  458://===----------------------------------------------------------------------===//
        -:  459:
function _ZN4mlir4LLVM14LLVMStructType18isValidElementTypeENS_4TypeE called 0 returned 0% blocks executed 0%
     439*:  460:bool LLVMStructType::isValidElementType(Type type) {
    #####:  461:  return !type.isa<LLVMVoidType, LLVMLabelType, LLVMMetadataType,
call    0 never executed
     439*:  462:                   LLVMFunctionType, LLVMTokenType, LLVMScalableVectorType>();
        -:  463:}
        -:  464:
function _ZN4mlir4LLVM14LLVMStructType13getIdentifiedEPNS_11MLIRContextEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  465:LLVMStructType LLVMStructType::getIdentified(MLIRContext *context,
        -:  466:                                             StringRef name) {
    #####:  467:  return Base::get(context, name, /*opaque=*/false);
call    0 never executed
call    1 never executed
        -:  468:}
        -:  469:
function _ZN4mlir4LLVM14LLVMStructType20getIdentifiedCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEPNS_11MLIRContextENS2_9StringRefE called 0 returned 0% blocks executed 0%
    #####:  470:LLVMStructType LLVMStructType::getIdentifiedChecked(
        -:  471:    function_ref<InFlightDiagnostic()> emitError, MLIRContext *context,
        -:  472:    StringRef name) {
    #####:  473:  return Base::getChecked(emitError, context, name, /*opaque=*/false);
call    0 never executed
        -:  474:}
        -:  475:
function _ZN4mlir4LLVM14LLVMStructType16getNewIdentifiedEPNS_11MLIRContextEN4llvm9StringRefENS4_8ArrayRefINS_4TypeEEEb called 0 returned 0% blocks executed 0%
    #####:  476:LLVMStructType LLVMStructType::getNewIdentified(MLIRContext *context,
        -:  477:                                                StringRef name,
        -:  478:                                                ArrayRef<Type> elements,
        -:  479:                                                bool isPacked) {
    #####:  480:  std::string stringName = name.str();
branch  0 never executed
branch  1 never executed
        -:  481:  unsigned counter = 0;
    #####:  482:  do {
    #####:  483:    auto type = LLVMStructType::getIdentified(context, stringName);
call    0 never executed
    #####:  484:    if (type.isInitialized() || failed(type.setBody(elements, isPacked))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  485:      counter += 1;
    #####:  486:      stringName = (Twine(name) + "." + std::to_string(counter)).str();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  487:      continue;
        -:  488:    }
    #####:  489:    return type;
branch  0 never executed
branch  1 never executed
        -:  490:  } while (true);
        -:  491:}
        -:  492:
function _ZN4mlir4LLVM14LLVMStructType10getLiteralEPNS_11MLIRContextEN4llvm8ArrayRefINS_4TypeEEEb called 108 returned 100% blocks executed 100%
     108*:  493:LLVMStructType LLVMStructType::getLiteral(MLIRContext *context,
        -:  494:                                          ArrayRef<Type> types, bool isPacked) {
     108*:  495:  return Base::get(context, types, isPacked);
call    0 returned 100%
        -:  496:}
        -:  497:
        -:  498:LLVMStructType
function _ZN4mlir4LLVM14LLVMStructType17getLiteralCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEPNS_11MLIRContextENS2_8ArrayRefINS_4TypeEEEb called 0 returned 0% blocks executed 0%
    #####:  499:LLVMStructType::getLiteralChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  500:                                  MLIRContext *context, ArrayRef<Type> types,
        -:  501:                                  bool isPacked) {
    #####:  502:  return Base::getChecked(emitError, context, types, isPacked);
call    0 never executed
        -:  503:}
        -:  504:
function _ZN4mlir4LLVM14LLVMStructType9getOpaqueEN4llvm9StringRefEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  505:LLVMStructType LLVMStructType::getOpaque(StringRef name, MLIRContext *context) {
    #####:  506:  return Base::get(context, name, /*opaque=*/true);
call    0 never executed
        -:  507:}
        -:  508:
        -:  509:LLVMStructType
function _ZN4mlir4LLVM14LLVMStructType16getOpaqueCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEPNS_11MLIRContextENS2_9StringRefE called 0 returned 0% blocks executed 0%
    #####:  510:LLVMStructType::getOpaqueChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  511:                                 MLIRContext *context, StringRef name) {
    #####:  512:  return Base::getChecked(emitError, context, name, /*opaque=*/true);
call    0 never executed
        -:  513:}
        -:  514:
function _ZN4mlir4LLVM14LLVMStructType7setBodyEN4llvm8ArrayRefINS_4TypeEEEb called 0 returned 0% blocks executed 0%
    #####:  515:LogicalResult LLVMStructType::setBody(ArrayRef<Type> types, bool isPacked) {
    #####:  516:  assert(isIdentified() && "can only set bodies of identified structs");
call    0 never executed
    #####:  517:  assert(llvm::all_of(types, LLVMStructType::isValidElementType) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  518:         "expected valid body types");
    #####:  519:  return Base::mutate(types, isPacked);
call    0 never executed
        -:  520:}
        -:  521:
function _ZNK4mlir4LLVM14LLVMStructType8isPackedEv called 1324 returned 100% blocks executed 75%
    1324*:  522:bool LLVMStructType::isPacked() const { return getImpl()->isPacked(); }
branch  0 never executed
branch  1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
function _ZNK4mlir4LLVM14LLVMStructType12isIdentifiedEv called 5296 returned 100% blocks executed 100%
    #####:  523:bool LLVMStructType::isIdentified() const { return getImpl()->isIdentified(); }
branch  0 never executed
branch  1 never executed
function _ZN4mlir4LLVM14LLVMStructType8isOpaqueEv called 74 returned 100% blocks executed 40%
       74:  524:bool LLVMStructType::isOpaque() {
      74*:  525:  return getImpl()->isIdentified() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  526:         (getImpl()->isOpaque() || !getImpl()->isInitialized());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  527:}
function _ZN4mlir4LLVM14LLVMStructType13isInitializedEv called 0 returned 0% blocks executed 0%
    #####:  528:bool LLVMStructType::isInitialized() { return getImpl()->isInitialized(); }
branch  0 never executed
branch  1 never executed
function _ZN4mlir4LLVM14LLVMStructType7getNameEv called 0 returned 0% blocks executed 0%
    #####:  529:StringRef LLVMStructType::getName() { return getImpl()->getIdentifier(); }
call    0 never executed
function _ZNK4mlir4LLVM14LLVMStructType7getBodyEv called 8014 returned 100% blocks executed 75%
     8014:  530:ArrayRef<Type> LLVMStructType::getBody() const {
    8014*:  531:  return isIdentified() ? getImpl()->getIdentifiedStructBody()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     8014:  532:                        : getImpl()->getTypeList();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  533:}
        -:  534:
function _ZN4mlir4LLVM14LLVMStructType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS2_9StringRefEb called 0 returned 0% blocks executed 0%
    #####:  535:LogicalResult LLVMStructType::verify(function_ref<InFlightDiagnostic()>,
        -:  536:                                     StringRef, bool) {
    #####:  537:  return success();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  538:}
        -:  539:
        -:  540:LogicalResult
function _ZN4mlir4LLVM14LLVMStructType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS2_8ArrayRefINS_4TypeEEEb called 108 returned 100% blocks executed 54%
      108:  541:LLVMStructType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  542:                       ArrayRef<Type> types, bool) {
      547:  543:  for (Type t : types)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      439:  544:    if (!isValidElementType(t))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  545:      return emitError() << "invalid LLVM structure element type: " << t;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  546:
      108:  547:  return success();
        -:  548:}
        -:  549:
        -:  550:unsigned
function _ZNK4mlir4LLVM14LLVMStructType17getTypeSizeInBitsERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  551:LLVMStructType::getTypeSizeInBits(const DataLayout &dataLayout,
        -:  552:                                  DataLayoutEntryListRef params) const {
    #####:  553:  unsigned structSize = 0;
    #####:  554:  unsigned structAlignment = 1;
    #####:  555:  for (Type element : getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  556:    unsigned elementAlignment =
branch  0 never executed
branch  1 never executed
    #####:  557:        isPacked() ? 1 : dataLayout.getTypeABIAlignment(element);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  558:    // Add padding to the struct size to align it to the abi alignment of the
        -:  559:    // element type before than adding the size of the element
    #####:  560:    structSize = llvm::alignTo(structSize, elementAlignment);
branch  0 never executed
branch  1 never executed
    #####:  561:    structSize += dataLayout.getTypeSize(element);
call    0 never executed
        -:  562:
        -:  563:    // The alignment requirement of a struct is equal to the strictest alignment
        -:  564:    // requirement of its elements.
    #####:  565:    structAlignment = std::max(elementAlignment, structAlignment);
branch  0 never executed
branch  1 never executed
        -:  566:  }
        -:  567:  // At the end, add padding to the struct to satisfy its own alignment
        -:  568:  // requirement. Otherwise structs inside of arrays would be misaligned.
    #####:  569:  structSize = llvm::alignTo(structSize, structAlignment);
branch  0 never executed
branch  1 never executed
    #####:  570:  return structSize * kBitsInByte;
        -:  571:}
        -:  572:
        -:  573:namespace {
        -:  574:enum class StructDLEntryPos { Abi = 0, Preferred = 1 };
        -:  575:} // namespace
        -:  576:
        -:  577:static Optional<unsigned>
        -:  578:getStructDataLayoutEntry(DataLayoutEntryListRef params, LLVMStructType type,
        -:  579:                         StructDLEntryPos pos) {
        -:  580:  const auto *currentEntry =
        -:  581:      llvm::find_if(params, [](DataLayoutEntryInterface entry) {
        -:  582:        return entry.isTypeEntry();
        -:  583:      });
        -:  584:  if (currentEntry == params.end())
        -:  585:    return llvm::None;
        -:  586:
        -:  587:  auto attr = currentEntry->getValue().cast<DenseIntElementsAttr>();
        -:  588:  if (pos == StructDLEntryPos::Preferred &&
        -:  589:      attr.size() <= static_cast<unsigned>(StructDLEntryPos::Preferred))
        -:  590:    // If no preferred was specified, fall back to abi alignment
        -:  591:    pos = StructDLEntryPos::Abi;
        -:  592:
        -:  593:  return attr.getValues<unsigned>()[static_cast<unsigned>(pos)];
        -:  594:}
        -:  595:
function _ZL24calculateStructAlignmentRKN4mlir10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_4LLVM14LLVMStructTypeEN12_GLOBAL__N_116StructDLEntryPosE called 0 returned 0% blocks executed 0%
    #####:  596:static unsigned calculateStructAlignment(const DataLayout &dataLayout,
        -:  597:                                         DataLayoutEntryListRef params,
        -:  598:                                         LLVMStructType type,
        -:  599:                                         StructDLEntryPos pos) {
        -:  600:  // Packed structs always have an abi alignment of 1
    #####:  601:  if (pos == StructDLEntryPos::Abi && type.isPacked()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  602:    return 1;
        -:  603:  }
        -:  604:
        -:  605:  // The alignment requirement of a struct is equal to the strictest alignment
        -:  606:  // requirement of its elements.
    #####:  607:  unsigned structAlignment = 1;
    #####:  608:  for (Type iter : type.getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  609:    structAlignment =
    #####:  610:        std::max(dataLayout.getTypeABIAlignment(iter), structAlignment);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  611:  }
        -:  612:
        -:  613:  // Entries are only allowed to be stricter than the required alignment
    #####:  614:  if (Optional<unsigned> entryResult =
branch  0 never executed
branch  1 never executed
    #####:  615:          getStructDataLayoutEntry(params, type, pos))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  616:    return std::max(*entryResult / kBitsInByte, structAlignment);
branch  0 never executed
branch  1 never executed
        -:  617:
    #####:  618:  return structAlignment;
        -:  619:}
        -:  620:
function _ZNK4mlir4LLVM14LLVMStructType15getABIAlignmentERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  621:unsigned LLVMStructType::getABIAlignment(const DataLayout &dataLayout,
        -:  622:                                         DataLayoutEntryListRef params) const {
    #####:  623:  return calculateStructAlignment(dataLayout, params, *this,
call    0 never executed
    #####:  624:                                  StructDLEntryPos::Abi);
        -:  625:}
        -:  626:
        -:  627:unsigned
function _ZNK4mlir4LLVM14LLVMStructType21getPreferredAlignmentERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  628:LLVMStructType::getPreferredAlignment(const DataLayout &dataLayout,
        -:  629:                                      DataLayoutEntryListRef params) const {
    #####:  630:  return calculateStructAlignment(dataLayout, params, *this,
call    0 never executed
    #####:  631:                                  StructDLEntryPos::Preferred);
        -:  632:}
        -:  633:
function _ZL22extractStructSpecValueN4mlir9AttributeEN12_GLOBAL__N_116StructDLEntryPosE called 0 returned 0% blocks executed 0%
    #####:  634:static unsigned extractStructSpecValue(Attribute attr, StructDLEntryPos pos) {
    #####:  635:  return attr.cast<DenseIntElementsAttr>()
call    0 never executed
    #####:  636:      .getValues<unsigned>()[static_cast<unsigned>(pos)];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  637:}
        -:  638:
function _ZNK4mlir4LLVM14LLVMStructType13areCompatibleEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEES5_ called 0 returned 0% blocks executed 0%
    #####:  639:bool LLVMStructType::areCompatible(DataLayoutEntryListRef oldLayout,
        -:  640:                                   DataLayoutEntryListRef newLayout) const {
    #####:  641:  for (DataLayoutEntryInterface newEntry : newLayout) {
branch  0 never executed
branch  1 never executed
    #####:  642:    if (!newEntry.isTypeEntry())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  643:      continue;
        -:  644:
    #####:  645:    const auto *previousEntry =
    #####:  646:        llvm::find_if(oldLayout, [](DataLayoutEntryInterface entry) {
call    0 never executed
        -:  647:          return entry.isTypeEntry();
        -:  648:        });
    #####:  649:    if (previousEntry == oldLayout.end())
branch  0 never executed
branch  1 never executed
    #####:  650:      continue;
        -:  651:
    #####:  652:    unsigned abi = extractStructSpecValue(previousEntry->getValue(),
call    0 never executed
call    1 never executed
        -:  653:                                          StructDLEntryPos::Abi);
    #####:  654:    unsigned newAbi =
    #####:  655:        extractStructSpecValue(newEntry.getValue(), StructDLEntryPos::Abi);
call    0 never executed
call    1 never executed
    #####:  656:    if (abi < newAbi || abi % newAbi != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  657:      return false;
        -:  658:  }
    #####:  659:  return true;
        -:  660:}
        -:  661:
function _ZNK4mlir4LLVM14LLVMStructType13verifyEntriesEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  662:LogicalResult LLVMStructType::verifyEntries(DataLayoutEntryListRef entries,
        -:  663:                                            Location loc) const {
    #####:  664:  for (DataLayoutEntryInterface entry : entries) {
branch  0 never executed
branch  1 never executed
    #####:  665:    if (!entry.isTypeEntry())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  666:      continue;
        -:  667:
    #####:  668:    auto key = entry.getKey().get<Type>().cast<LLVMStructType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  669:    auto values = entry.getValue().dyn_cast<DenseIntElementsAttr>();
call    0 never executed
call    1 never executed
    #####:  670:    if (!values || (values.size() != 2 && values.size() != 1)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  671:      return emitError(loc)
call    0 never executed
call    1 never executed
    #####:  672:             << "expected layout attribute for " << entry.getKey().get<Type>()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  673:             << " to be a dense integer elements attribute of 1 or 2 elements";
call    0 never executed
        -:  674:    }
        -:  675:
    #####:  676:    if (key.isIdentified() || !key.getBody().empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  677:      return emitError(loc) << "unexpected layout attribute for struct " << key;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  678:    }
        -:  679:
    #####:  680:    if (values.size() == 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  681:      continue;
        -:  682:
    #####:  683:    if (extractStructSpecValue(values, StructDLEntryPos::Abi) >
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  684:        extractStructSpecValue(values, StructDLEntryPos::Preferred)) {
call    0 never executed
    #####:  685:      return emitError(loc) << "preferred alignment is expected to be at least "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  686:                               "as large as ABI alignment";
call    0 never executed
        -:  687:    }
        -:  688:  }
    #####:  689:  return mlir::success();
        -:  690:}
        -:  691:
function _ZNK4mlir4LLVM14LLVMStructType24walkImmediateSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS3_IFvNS_4TypeEEEE called 130 returned 100% blocks executed 100%
      130:  692:void LLVMStructType::walkImmediateSubElements(
        -:  693:    function_ref<void(Attribute)> walkAttrsFn,
        -:  694:    function_ref<void(Type)> walkTypesFn) const {
      726:  695:  for (Type type : getBody())
call    0 returned 100%
branch  1 taken 82% (fallthrough)
branch  2 taken 18%
      596:  696:    walkTypesFn(type);
call    0 returned 100%
      130:  697:}
        -:  698:
function _ZNK4mlir4LLVM14LLVMStructType27replaceImmediateSubElementsEN4llvm8ArrayRefINS_9AttributeEEENS3_INS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  699:Type LLVMStructType::replaceImmediateSubElements(
        -:  700:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  701:  if (isIdentified()) {
branch  0 never executed
branch  1 never executed
        -:  702:    // TODO: It's not clear how we support replacing sub-elements of mutable
        -:  703:    // types.
    #####:  704:    return nullptr;
        -:  705:  }
    #####:  706:  return getLiteral(getContext(), replTypes, isPacked());
call    0 never executed
call    1 never executed
        -:  707:}
        -:  708:
        -:  709://===----------------------------------------------------------------------===//
        -:  710:// Vector types.
        -:  711://===----------------------------------------------------------------------===//
        -:  712:
        -:  713:/// Verifies that the type about to be constructed is well-formed.
        -:  714:template <typename VecTy>
        -:  715:static LogicalResult
    #####:  716:verifyVectorConstructionInvariants(function_ref<InFlightDiagnostic()> emitError,
        -:  717:                                   Type elementType, unsigned numElements) {
    #####:  718:  if (numElements == 0)
    #####:  719:    return emitError() << "the number of vector elements must be positive";
        -:  720:
    #####:  721:  if (!VecTy::isValidElementType(elementType))
    #####:  722:    return emitError() << "invalid vector element type";
        -:  723:
    #####:  724:  return success();
        -:  725:}
------------------
_Z34verifyVectorConstructionInvariantsIN4mlir4LLVM22LLVMScalableVectorTypeEENS0_13LogicalResultEN4llvm12function_refIFNS0_18InFlightDiagnosticEvEEENS0_4TypeEj:
function _Z34verifyVectorConstructionInvariantsIN4mlir4LLVM22LLVMScalableVectorTypeEENS0_13LogicalResultEN4llvm12function_refIFNS0_18InFlightDiagnosticEvEEENS0_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  716:verifyVectorConstructionInvariants(function_ref<InFlightDiagnostic()> emitError,
        -:  717:                                   Type elementType, unsigned numElements) {
    #####:  718:  if (numElements == 0)
branch  0 never executed
branch  1 never executed
    #####:  719:    return emitError() << "the number of vector elements must be positive";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  720:
    #####:  721:  if (!VecTy::isValidElementType(elementType))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  722:    return emitError() << "invalid vector element type";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  723:
    #####:  724:  return success();
        -:  725:}
------------------
_Z34verifyVectorConstructionInvariantsIN4mlir4LLVM19LLVMFixedVectorTypeEENS0_13LogicalResultEN4llvm12function_refIFNS0_18InFlightDiagnosticEvEEENS0_4TypeEj:
function _Z34verifyVectorConstructionInvariantsIN4mlir4LLVM19LLVMFixedVectorTypeEENS0_13LogicalResultEN4llvm12function_refIFNS0_18InFlightDiagnosticEvEEENS0_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  716:verifyVectorConstructionInvariants(function_ref<InFlightDiagnostic()> emitError,
        -:  717:                                   Type elementType, unsigned numElements) {
    #####:  718:  if (numElements == 0)
branch  0 never executed
branch  1 never executed
    #####:  719:    return emitError() << "the number of vector elements must be positive";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  720:
    #####:  721:  if (!VecTy::isValidElementType(elementType))
    #####:  722:    return emitError() << "invalid vector element type";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  723:
    #####:  724:  return success();
        -:  725:}
------------------
        -:  726:
function _ZN4mlir4LLVM19LLVMFixedVectorType3getENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  727:LLVMFixedVectorType LLVMFixedVectorType::get(Type elementType,
        -:  728:                                             unsigned numElements) {
    #####:  729:  assert(elementType && "expected non-null subtype");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  730:  return Base::get(elementType.getContext(), elementType, numElements);
call    0 never executed
call    1 never executed
        -:  731:}
        -:  732:
        -:  733:LLVMFixedVectorType
function _ZN4mlir4LLVM19LLVMFixedVectorType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  734:LLVMFixedVectorType::getChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  735:                                Type elementType, unsigned numElements) {
    #####:  736:  assert(elementType && "expected non-null subtype");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  737:  return Base::getChecked(emitError, elementType.getContext(), elementType,
    #####:  738:                          numElements);
call    0 never executed
call    1 never executed
        -:  739:}
        -:  740:
function _ZN4mlir4LLVM19LLVMFixedVectorType18isValidElementTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  741:bool LLVMFixedVectorType::isValidElementType(Type type) {
    #####:  742:  return type.isa<LLVMPointerType, LLVMPPCFP128Type>();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  743:}
        -:  744:
        -:  745:LogicalResult
function _ZN4mlir4LLVM19LLVMFixedVectorType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  746:LLVMFixedVectorType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  747:                            Type elementType, unsigned numElements) {
    #####:  748:  return verifyVectorConstructionInvariants<LLVMFixedVectorType>(
    #####:  749:      emitError, elementType, numElements);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  750:}
        -:  751:
function _ZNK4mlir4LLVM19LLVMFixedVectorType24walkImmediateSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS3_IFvNS_4TypeEEEE called 0 returned 0% blocks executed 0%
    #####:  752:void LLVMFixedVectorType::walkImmediateSubElements(
        -:  753:    function_ref<void(Attribute)> walkAttrsFn,
        -:  754:    function_ref<void(Type)> walkTypesFn) const {
    #####:  755:  walkTypesFn(getElementType());
call    0 never executed
call    1 never executed
    #####:  756:}
        -:  757:
function _ZNK4mlir4LLVM19LLVMFixedVectorType27replaceImmediateSubElementsEN4llvm8ArrayRefINS_9AttributeEEENS3_INS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  758:Type LLVMFixedVectorType::replaceImmediateSubElements(
        -:  759:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  760:  return get(replTypes[0], getNumElements());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  761:}
        -:  762:
        -:  763://===----------------------------------------------------------------------===//
        -:  764:// LLVMScalableVectorType.
        -:  765://===----------------------------------------------------------------------===//
        -:  766:
function _ZN4mlir4LLVM22LLVMScalableVectorType3getENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  767:LLVMScalableVectorType LLVMScalableVectorType::get(Type elementType,
        -:  768:                                                   unsigned minNumElements) {
    #####:  769:  assert(elementType && "expected non-null subtype");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  770:  return Base::get(elementType.getContext(), elementType, minNumElements);
call    0 never executed
call    1 never executed
        -:  771:}
        -:  772:
        -:  773:LLVMScalableVectorType
function _ZN4mlir4LLVM22LLVMScalableVectorType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  774:LLVMScalableVectorType::getChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  775:                                   Type elementType, unsigned minNumElements) {
    #####:  776:  assert(elementType && "expected non-null subtype");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  777:  return Base::getChecked(emitError, elementType.getContext(), elementType,
    #####:  778:                          minNumElements);
call    0 never executed
call    1 never executed
        -:  779:}
        -:  780:
function _ZN4mlir4LLVM22LLVMScalableVectorType18isValidElementTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  781:bool LLVMScalableVectorType::isValidElementType(Type type) {
    #####:  782:  if (auto intType = type.dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  783:    return intType.isSignless();
call    0 never executed
        -:  784:
    #####:  785:  return isCompatibleFloatingPointType(type) || type.isa<LLVMPointerType>();
branch  0 never executed
branch  1 never executed
        -:  786:}
        -:  787:
        -:  788:LogicalResult
function _ZN4mlir4LLVM22LLVMScalableVectorType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####:  789:LLVMScalableVectorType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  790:                               Type elementType, unsigned numElements) {
    #####:  791:  return verifyVectorConstructionInvariants<LLVMScalableVectorType>(
    #####:  792:      emitError, elementType, numElements);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  793:}
        -:  794:
function _ZNK4mlir4LLVM22LLVMScalableVectorType24walkImmediateSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS3_IFvNS_4TypeEEEE called 0 returned 0% blocks executed 0%
    #####:  795:void LLVMScalableVectorType::walkImmediateSubElements(
        -:  796:    function_ref<void(Attribute)> walkAttrsFn,
        -:  797:    function_ref<void(Type)> walkTypesFn) const {
    #####:  798:  walkTypesFn(getElementType());
call    0 never executed
call    1 never executed
    #####:  799:}
        -:  800:
function _ZNK4mlir4LLVM22LLVMScalableVectorType27replaceImmediateSubElementsEN4llvm8ArrayRefINS_9AttributeEEENS3_INS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  801:Type LLVMScalableVectorType::replaceImmediateSubElements(
        -:  802:    ArrayRef<Attribute> replAttrs, ArrayRef<Type> replTypes) const {
    #####:  803:  return get(replTypes[0], getMinNumElements());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  804:}
        -:  805:
        -:  806://===----------------------------------------------------------------------===//
        -:  807:// Utility functions.
        -:  808://===----------------------------------------------------------------------===//
        -:  809:
function _ZN4mlir4LLVM21isCompatibleOuterTypeENS_4TypeE called 45021 returned 100% blocks executed 58%
    45021:  810:bool mlir::LLVM::isCompatibleOuterType(Type type) {
        -:  811:  // clang-format off
    45021:  812:  if (type.isa<
call    0 returned 100%
        -:  813:      BFloat16Type,
        -:  814:      Float16Type,
        -:  815:      Float32Type,
        -:  816:      Float64Type,
        -:  817:      Float80Type,
        -:  818:      Float128Type,
        -:  819:      LLVMArrayType,
        -:  820:      LLVMFunctionType,
        -:  821:      LLVMLabelType,
        -:  822:      LLVMMetadataType,
        -:  823:      LLVMPPCFP128Type,
        -:  824:      LLVMPointerType,
        -:  825:      LLVMStructType,
        -:  826:      LLVMTokenType,
        -:  827:      LLVMFixedVectorType,
        -:  828:      LLVMScalableVectorType,
        -:  829:      LLVMVoidType,
        -:  830:      LLVMX86MMXType
    45014:  831:    >()) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  832:    // clang-format on
        -:  833:    return true;
        -:  834:  }
        -:  835:
        -:  836:  // Only signless integers are compatible.
    30017:  837:  if (auto intType = type.dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    30017:  838:    return intType.isSignless();
call    0 returned 100%
        -:  839:
        -:  840:  // 1D vector types are compatible.
    #####:  841:  if (auto vecType = type.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:    return vecType.getRank() == 1;
call    0 never executed
        -:  843:
    #####:  844:  return false;
        -:  845:}
        -:  846:
function _ZL16isCompatibleImplN4mlir4TypeERN4llvm8DenseSetIS0_NS1_12DenseMapInfoIS0_vEEEE called 72113 returned 100% blocks executed 100%
    72113:  847:static bool isCompatibleImpl(Type type, DenseSet<Type> &compatibleTypes) {
    72113:  848:  if (!compatibleTypes.insert(type).second)
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
        -:  849:    return true;
        -:  850:
   15074*:  851:  auto isCompatible = [&](Type type) {
    2297*:  852:    return isCompatibleImpl(type, compatibleTypes);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 returned 99%
    12776:  853:  };
        -:  854:
    12776:  855:  bool result =
call    0 returned 100%
    25525:  856:      llvm::TypeSwitch<Type, bool>(type)
function _ZZL16isCompatibleImplN4mlir4TypeERN4llvm8DenseSetIS0_NS1_12DenseMapInfoIS0_vEEEEENKUlT_E0_clINS_4LLVM14LLVMStructTypeEEEDaS7_.isra.0 called 89 returned 100% blocks executed 100%
       89:  857:          .Case<LLVMStructType>([&](auto structType) {
       89:  858:            return llvm::all_of(structType.getBody(), isCompatible);
call    0 returned 100%
call    1 returned 100%
    12776:  859:          })
call    0 returned 100%
function _ZZL16isCompatibleImplN4mlir4TypeERN4llvm8DenseSetIS0_NS1_12DenseMapInfoIS0_vEEEEENKUlT_E1_clINS_4LLVM16LLVMFunctionTypeEEEDaS7_.isra.0 called 975 returned 99% blocks executed 86%
      975:  860:          .Case<LLVMFunctionType>([&](auto funcType) {
      975:  861:            return isCompatible(funcType.getReturnType()) &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
      972:  862:                   llvm::all_of(funcType.getParams(), isCompatible);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    12774:  863:          })
call    0 returned 100%
    12771:  864:          .Case<IntegerType>([](auto intType) { return intType.isSignless(); })
call    0 returned 100%
function _ZZL16isCompatibleImplN4mlir4TypeERN4llvm8DenseSetIS0_NS1_12DenseMapInfoIS0_vEEEEENKUlT_E3_clINS_10VectorTypeEEEDaS7_.isra.0 called 1 returned 100% blocks executed 88%
        1:  865:          .Case<VectorType>([&](auto vecType) {
        1:  866:            return vecType.getRank() == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  867:                   isCompatible(vecType.getElementType());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    12765:  868:          })
call    0 returned 100%
     1257:  869:          .Case<LLVMPointerType>([&](auto pointerType) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1257:  870:            if (pointerType.isOpaque())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  871:              return true;
     1257:  872:            return isCompatible(pointerType.getElementType());
call    0 returned 99%
    12763:  873:          })
call    0 returned 100%
        -:  874:          // clang-format off
        -:  875:          .Case<
        -:  876:              LLVMFixedVectorType,
        -:  877:              LLVMScalableVectorType,
        -:  878:              LLVMArrayType
      65*:  879:          >([&](auto containerType) {
      65*:  880:            return isCompatible(containerType.getElementType());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    12762:  881:          })
call    0 returned 100%
        -:  882:          .Case<
        -:  883:            BFloat16Type,
        -:  884:            Float16Type,
        -:  885:            Float32Type,
        -:  886:            Float64Type,
        -:  887:            Float80Type,
        -:  888:            Float128Type,
        -:  889:            LLVMLabelType,
        -:  890:            LLVMMetadataType,
        -:  891:            LLVMPPCFP128Type,
        -:  892:            LLVMTokenType,
        -:  893:            LLVMVoidType,
        -:  894:            LLVMX86MMXType
    12755:  895:          >([](Type) { return true; })
call    0 returned 100%
        -:  896:          // clang-format on
    12749:  897:          .Default([](Type) { return false; });
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -:  898:
    12749:  899:  if (!result)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     7902:  900:    compatibleTypes.erase(type);
call    0 returned 100%
        -:  901:
        -:  902:  return result;
        -:  903:}
        -:  904:
function _ZN4mlir4LLVM11LLVMDialect16isCompatibleTypeENS_4TypeE called 68347 returned 100% blocks executed 60%
    68347:  905:bool LLVMDialect::isCompatibleType(Type type) {
   136731:  906:  if (auto *llvmDialect =
    68347:  907:          type.getContext()->getLoadedDialect<LLVM::LLVMDialect>())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    68384:  908:    return isCompatibleImpl(type, llvmDialect->compatibleTypes.get());
call    0 returned 100%
call    1 returned 100%
        -:  909:
    #####:  910:  DenseSet<Type> localCompatibleTypes;
call    0 never executed
    #####:  911:  return isCompatibleImpl(type, localCompatibleTypes);
call    0 never executed
call    1 never executed
        -:  912:}
        -:  913:
function _ZN4mlir4LLVM16isCompatibleTypeENS_4TypeE called 68341 returned 100% blocks executed 100%
   68341*:  914:bool mlir::LLVM::isCompatibleType(Type type) {
   68341*:  915:  return LLVMDialect::isCompatibleType(type);
call    0 returned 100%
        -:  916:}
        -:  917:
function _ZN4mlir4LLVM29isCompatibleFloatingPointTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  918:bool mlir::LLVM::isCompatibleFloatingPointType(Type type) {
    #####:  919:  return type.isa<BFloat16Type, Float16Type, Float32Type, Float64Type,
call    0 never executed
call    1 never executed
    #####:  920:                  Float80Type, Float128Type, LLVMPPCFP128Type>();
branch  0 never executed
branch  1 never executed
        -:  921:}
        -:  922:
function _ZN4mlir4LLVM22isCompatibleVectorTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  923:bool mlir::LLVM::isCompatibleVectorType(Type type) {
    #####:  924:  if (type.isa<LLVMFixedVectorType, LLVMScalableVectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  925:    return true;
        -:  926:
    #####:  927:  if (auto vecType = type.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:    if (vecType.getRank() != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  929:      return false;
    #####:  930:    Type elementType = vecType.getElementType();
call    0 never executed
    #####:  931:    if (auto intType = elementType.dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  932:      return intType.isSignless();
call    0 never executed
    #####:  933:    return elementType.isa<BFloat16Type, Float16Type, Float32Type, Float64Type,
call    0 never executed
    #####:  934:                           Float80Type, Float128Type>();
call    0 never executed
        -:  935:  }
    #####:  936:  return false;
        -:  937:}
        -:  938:
function _ZN4mlir4LLVM20getVectorElementTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  939:Type mlir::LLVM::getVectorElementType(Type type) {
    #####:  940:  return llvm::TypeSwitch<Type, Type>(type)
call    0 never executed
        -:  941:      .Case<LLVMFixedVectorType, LLVMScalableVectorType, VectorType>(
    #####:  942:          [](auto ty) { return ty.getElementType(); })
function _ZZN4mlir4LLVM20getVectorElementTypeENS_4TypeEENKUlS1_E0_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  943:      .Default([](Type) -> Type {
    #####:  944:        llvm_unreachable("incompatible with LLVM vector type");
    #####:  945:      });
branch  0 never executed
branch  1 never executed
        -:  946:}
        -:  947:
function _ZN4mlir4LLVM20getVectorNumElementsENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  948:llvm::ElementCount mlir::LLVM::getVectorNumElements(Type type) {
    #####:  949:  return llvm::TypeSwitch<Type, llvm::ElementCount>(type)
call    0 never executed
function _ZZN4mlir4LLVM20getVectorNumElementsENS_4TypeEENKUlNS_10VectorTypeEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  950:      .Case([](VectorType ty) {
    #####:  951:        if (ty.isScalable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:          return llvm::ElementCount::getScalable(ty.getNumElements());
call    0 never executed
    #####:  953:        return llvm::ElementCount::getFixed(ty.getNumElements());
call    0 never executed
    #####:  954:      })
call    0 never executed
        -:  955:      .Case([](LLVMFixedVectorType ty) {
        -:  956:        return llvm::ElementCount::getFixed(ty.getNumElements());
    #####:  957:      })
call    0 never executed
        -:  958:      .Case([](LLVMScalableVectorType ty) {
        -:  959:        return llvm::ElementCount::getScalable(ty.getMinNumElements());
    #####:  960:      })
call    0 never executed
function _ZZN4mlir4LLVM20getVectorNumElementsENS_4TypeEENKUlS1_E2_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  961:      .Default([](Type) -> llvm::ElementCount {
    #####:  962:        llvm_unreachable("incompatible with LLVM vector type");
    #####:  963:      });
branch  0 never executed
branch  1 never executed
        -:  964:}
        -:  965:
function _ZN4mlir4LLVM20isScalableVectorTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  966:bool mlir::LLVM::isScalableVectorType(Type vectorType) {
    #####:  967:  assert(
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  968:      (vectorType
        -:  969:           .isa<LLVMFixedVectorType, LLVMScalableVectorType, VectorType>()) &&
        -:  970:      "expected LLVM-compatible vector type");
    #####:  971:  return !vectorType.isa<LLVMFixedVectorType>() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  972:         (vectorType.isa<LLVMScalableVectorType>() ||
branch  0 never executed
branch  1 never executed
    #####:  973:          vectorType.cast<VectorType>().isScalable());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  974:}
        -:  975:
function _ZN4mlir4LLVM13getVectorTypeENS_4TypeEjb called 0 returned 0% blocks executed 0%
    #####:  976:Type mlir::LLVM::getVectorType(Type elementType, unsigned numElements,
        -:  977:                               bool isScalable) {
    #####:  978:  bool useLLVM = LLVMFixedVectorType::isValidElementType(elementType);
call    0 never executed
    #####:  979:  bool useBuiltIn = VectorType::isValidElementType(elementType);
call    0 never executed
    #####:  980:  (void)useBuiltIn;
    #####:  981:  assert((useLLVM ^ useBuiltIn) && "expected LLVM-compatible fixed-vector type "
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  982:                                   "to be either builtin or LLVM dialect type");
    #####:  983:  if (useLLVM) {
branch  0 never executed
branch  1 never executed
    #####:  984:    if (isScalable)
branch  0 never executed
branch  1 never executed
    #####:  985:      return LLVMScalableVectorType::get(elementType, numElements);
call    0 never executed
    #####:  986:    return LLVMFixedVectorType::get(elementType, numElements);
call    0 never executed
        -:  987:  }
    #####:  988:  return VectorType::get(numElements, elementType, (unsigned)isScalable);
call    0 never executed
        -:  989:}
        -:  990:
function _ZN4mlir4LLVM13getVectorTypeENS_4TypeERKN4llvm12ElementCountE called 0 returned 0% blocks executed 0%
    #####:  991:Type mlir::LLVM::getVectorType(Type elementType,
        -:  992:                               const llvm::ElementCount &numElements) {
    #####:  993:  if (numElements.isScalable())
branch  0 never executed
branch  1 never executed
    #####:  994:    return getVectorType(elementType, numElements.getKnownMinValue(),
    #####:  995:                         /*isScalable=*/true);
call    0 never executed
    #####:  996:  return getVectorType(elementType, numElements.getFixedValue(),
    #####:  997:                       /*isScalable=*/false);
call    0 never executed
        -:  998:}
        -:  999:
function _ZN4mlir4LLVM18getFixedVectorTypeENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####: 1000:Type mlir::LLVM::getFixedVectorType(Type elementType, unsigned numElements) {
    #####: 1001:  bool useLLVM = LLVMFixedVectorType::isValidElementType(elementType);
call    0 never executed
    #####: 1002:  bool useBuiltIn = VectorType::isValidElementType(elementType);
call    0 never executed
    #####: 1003:  (void)useBuiltIn;
    #####: 1004:  assert((useLLVM ^ useBuiltIn) && "expected LLVM-compatible fixed-vector type "
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1005:                                   "to be either builtin or LLVM dialect type");
    #####: 1006:  if (useLLVM)
branch  0 never executed
branch  1 never executed
    #####: 1007:    return LLVMFixedVectorType::get(elementType, numElements);
call    0 never executed
    #####: 1008:  return VectorType::get(numElements, elementType);
call    0 never executed
        -: 1009:}
        -: 1010:
function _ZN4mlir4LLVM21getScalableVectorTypeENS_4TypeEj called 0 returned 0% blocks executed 0%
    #####: 1011:Type mlir::LLVM::getScalableVectorType(Type elementType, unsigned numElements) {
    #####: 1012:  bool useLLVM = LLVMScalableVectorType::isValidElementType(elementType);
call    0 never executed
    #####: 1013:  bool useBuiltIn = VectorType::isValidElementType(elementType);
call    0 never executed
    #####: 1014:  (void)useBuiltIn;
    #####: 1015:  assert((useLLVM ^ useBuiltIn) && "expected LLVM-compatible scalable-vector "
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1016:                                   "type to be either builtin or LLVM dialect "
        -: 1017:                                   "type");
    #####: 1018:  if (useLLVM)
branch  0 never executed
branch  1 never executed
    #####: 1019:    return LLVMScalableVectorType::get(elementType, numElements);
call    0 never executed
    #####: 1020:  return VectorType::get(numElements, elementType, /*numScalableDims=*/1);
call    0 never executed
        -: 1021:}
        -: 1022:
function _ZN4mlir4LLVM26getPrimitiveTypeSizeInBitsENS_4TypeE called 0 returned 0% blocks executed 0%
    #####: 1023:llvm::TypeSize mlir::LLVM::getPrimitiveTypeSizeInBits(Type type) {
    #####: 1024:  assert(isCompatibleType(type) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1025:         "expected a type compatible with the LLVM dialect");
        -: 1026:
    #####: 1027:  return llvm::TypeSwitch<Type, llvm::TypeSize>(type)
call    0 never executed
        -: 1028:      .Case<BFloat16Type, Float16Type>(
    #####: 1029:          [](Type) { return llvm::TypeSize::Fixed(16); })
    #####: 1030:      .Case<Float32Type>([](Type) { return llvm::TypeSize::Fixed(32); })
call    0 never executed
        -: 1031:      .Case<Float64Type, LLVMX86MMXType>(
    #####: 1032:          [](Type) { return llvm::TypeSize::Fixed(64); })
call    0 never executed
    #####: 1033:      .Case<Float80Type>([](Type) { return llvm::TypeSize::Fixed(80); })
call    0 never executed
    #####: 1034:      .Case<Float128Type>([](Type) { return llvm::TypeSize::Fixed(128); })
call    0 never executed
        -: 1035:      .Case<IntegerType>([](IntegerType intTy) {
        -: 1036:        return llvm::TypeSize::Fixed(intTy.getWidth());
    #####: 1037:      })
call    0 never executed
    #####: 1038:      .Case<LLVMPPCFP128Type>([](Type) { return llvm::TypeSize::Fixed(128); })
call    0 never executed
function _ZZN4mlir4LLVM26getPrimitiveTypeSizeInBitsENS_4TypeEENKUlNS0_19LLVMFixedVectorTypeEE6_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1039:      .Case<LLVMFixedVectorType>([](LLVMFixedVectorType t) {
    #####: 1040:        llvm::TypeSize elementSize =
call    0 never executed
    #####: 1041:            getPrimitiveTypeSizeInBits(t.getElementType());
call    0 never executed
    #####: 1042:        return llvm::TypeSize(elementSize.getFixedSize() * t.getNumElements(),
    #####: 1043:                              elementSize.isScalable());
branch  0 never executed
branch  1 never executed
    #####: 1044:      })
call    0 never executed
function _ZZN4mlir4LLVM26getPrimitiveTypeSizeInBitsENS_4TypeEENKUlNS_10VectorTypeEE7_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1045:      .Case<VectorType>([](VectorType t) {
    #####: 1046:        assert(isCompatibleVectorType(t) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1047:               "unexpected incompatible with LLVM vector type");
    #####: 1048:        llvm::TypeSize elementSize =
    #####: 1049:            getPrimitiveTypeSizeInBits(t.getElementType());
call    0 never executed
call    1 never executed
    #####: 1050:        return llvm::TypeSize(elementSize.getFixedSize() * t.getNumElements(),
call    0 never executed
    #####: 1051:                              elementSize.isScalable());
branch  0 never executed
branch  1 never executed
    #####: 1052:      })
call    0 never executed
function _ZZN4mlir4LLVM26getPrimitiveTypeSizeInBitsENS_4TypeEENKUlS1_E8_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1053:      .Default([](Type ty) {
    #####: 1054:        assert((ty.isa<LLVMVoidType, LLVMLabelType, LLVMMetadataType,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1055:                       LLVMTokenType, LLVMStructType, LLVMArrayType,
        -: 1056:                       LLVMPointerType, LLVMFunctionType>()) &&
        -: 1057:               "unexpected missing support for primitive type");
    #####: 1058:        return llvm::TypeSize::Fixed(0);
    #####: 1059:      });
branch  0 never executed
branch  1 never executed
        -: 1060:}
        -: 1061:
        -: 1062://===----------------------------------------------------------------------===//
        -: 1063:// LLVMDialect
        -: 1064://===----------------------------------------------------------------------===//
        -: 1065:
function _ZN4mlir4LLVM11LLVMDialect13registerTypesEv called 25552 returned 100% blocks executed 100%
    25552: 1066:void LLVMDialect::registerTypes() {
    25552: 1067:  addTypes<
        -: 1068:#define GET_TYPEDEF_LIST
        -: 1069:#include "mlir/Dialect/LLVMIR/LLVMTypes.cpp.inc"
    25552: 1070:      >();
call    0 returned 100%
    25552: 1071:}
        -: 1072:
function _ZNK4mlir4LLVM11LLVMDialect9parseTypeERNS_16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####: 1073:Type LLVMDialect::parseType(DialectAsmParser &parser) const {
    #####: 1074:  return detail::parseType(parser);
call    0 never executed
        -: 1075:}
        -: 1076:
function _ZNK4mlir4LLVM11LLVMDialect9printTypeENS_4TypeERNS_17DialectAsmPrinterE called 30811 returned 100% blocks executed 100%
    30811: 1077:void LLVMDialect::printType(Type type, DialectAsmPrinter &os) const {
    30811: 1078:  return detail::printType(type, os);
call    0 returned 100%
        -: 1079:}
