        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/GPUToSPIRV/WmmaOpsToSPIRV.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUToSPIRV/CMakeFiles/obj.MLIRGPUToSPIRV.dir/WmmaOpsToSPIRV.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUToSPIRV/CMakeFiles/obj.MLIRGPUToSPIRV.dir/WmmaOpsToSPIRV.cpp.gcda
        -:    0:Runs:325556
        -:    1://===------ WmmaOpsToSPIRV.cpp - WMMA LD/ST/Compute to SPIRV lowering------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains definitions of patterns to lower GPU Subgroup MMA ops to
        -:   10:// SPIRV Dialect ops.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/GPUToSPIRV/GPUToSPIRV.h"
        -:   15:#include "mlir/Conversion/GPUToSPIRV/GPUToSPIRVPass.h"
        -:   16:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/SPIRVEnums.h"
        -:   20:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   21:#include "mlir/Dialect/SPIRV/IR/TargetAndABI.h"
        -:   22:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   23:#include "mlir/IR/TypeUtilities.h"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:// See SPV_NV_cooperative_matrix for supported element wise ops.
function _ZL19createElementWiseOpRN4mlir25ConversionPatternRewriterENS_3gpu24SubgroupMmaElementwiseOpENS_5spirv23CooperativeMatrixNVTypeENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:   28:static void createElementWiseOp(ConversionPatternRewriter &builder,
        -:   29:                                gpu::SubgroupMmaElementwiseOp op,
        -:   30:                                spirv::CooperativeMatrixNVType coopType,
        -:   31:                                ValueRange operands) {
    #####:   32:  switch (op.getOpType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   33:  case gpu::MMAElementwiseOp::ADDF:
    #####:   34:    builder.replaceOpWithNewOp<spirv::FAddOp>(op, coopType, operands);
call    0 never executed
    #####:   35:    return;
call    0 never executed
    #####:   36:  case gpu::MMAElementwiseOp::ADDI:
    #####:   37:    builder.replaceOpWithNewOp<spirv::IAddOp>(op, coopType, operands);
call    0 never executed
    #####:   38:    return;
call    0 never executed
    #####:   39:  case gpu::MMAElementwiseOp::SUBF:
    #####:   40:    builder.replaceOpWithNewOp<spirv::FSubOp>(op, coopType, operands);
call    0 never executed
    #####:   41:    return;
call    0 never executed
    #####:   42:  case gpu::MMAElementwiseOp::SUBI:
    #####:   43:    builder.replaceOpWithNewOp<spirv::ISubOp>(op, coopType, operands);
call    0 never executed
    #####:   44:    return;
call    0 never executed
    #####:   45:  case gpu::MMAElementwiseOp::DIVF:
    #####:   46:    builder.replaceOpWithNewOp<spirv::FDivOp>(op, coopType, operands);
call    0 never executed
    #####:   47:    return;
call    0 never executed
    #####:   48:  case gpu::MMAElementwiseOp::DIVS:
    #####:   49:    builder.replaceOpWithNewOp<spirv::SDivOp>(op, coopType, operands);
call    0 never executed
    #####:   50:    return;
call    0 never executed
    #####:   51:  case gpu::MMAElementwiseOp::DIVU:
    #####:   52:    builder.replaceOpWithNewOp<spirv::UDivOp>(op, coopType, operands);
call    0 never executed
    #####:   53:    return;
call    0 never executed
    #####:   54:  case gpu::MMAElementwiseOp::NEGATEF:
    #####:   55:    builder.replaceOpWithNewOp<spirv::FNegateOp>(op, coopType, operands);
call    0 never executed
    #####:   56:    return;
call    0 never executed
    #####:   57:  case gpu::MMAElementwiseOp::NEGATES:
    #####:   58:    builder.replaceOpWithNewOp<spirv::SNegateOp>(op, coopType, operands);
call    0 never executed
    #####:   59:    return;
call    0 never executed
    #####:   60:  default:
    #####:   61:    llvm_unreachable("unknown op");
call    0 never executed
        -:   62:  }
        -:   63:}
        -:   64:
        -:   65:namespace {
        -:   66:
        -:   67:/// This class implements the conversion of GPU MMA loadOp to
        -:   68:/// CooperativeMatrixLoad op in the SPIRV dialect.
        -:   69:struct WmmaLoadOpToSPIRVLowering
        -:   70:    : public OpConversionPattern<gpu::SubgroupMmaLoadMatrixOp> {
        -:   71:  using OpConversionPattern::OpConversionPattern;
        -:   72:
        -:   73:  LogicalResult
function _ZNK12_GLOBAL__N_125WmmaLoadOpToSPIRVLowering15matchAndRewriteEN4mlir3gpu23SubgroupMmaLoadMatrixOpENS2_30SubgroupMmaLoadMatrixOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   74:  matchAndRewrite(gpu::SubgroupMmaLoadMatrixOp subgroupMmaLoadMatrixOp,
        -:   75:                  OpAdaptor adaptor,
        -:   76:                  ConversionPatternRewriter &rewriter) const override {
    #####:   77:    Location loc = subgroupMmaLoadMatrixOp->getLoc();
call    0 never executed
    #####:   78:    gpu::MMAMatrixType retType =
    #####:   79:        subgroupMmaLoadMatrixOp.getRes().getType().cast<gpu::MMAMatrixType>();
call    0 never executed
call    1 never executed
    #####:   80:    auto memrefType =
    #####:   81:        subgroupMmaLoadMatrixOp.getSrcMemref().getType().cast<MemRefType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   82:    Value bufferPtr = spirv::getElementPtr(
    #####:   83:        *getTypeConverter<SPIRVTypeConverter>(), memrefType,
call    0 never executed
    #####:   84:        adaptor.getSrcMemref(), adaptor.getIndices(), loc, rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   85:    auto coopType = convertMMAToSPIRVType(retType);
call    0 never executed
    #####:   86:    int64_t stride = subgroupMmaLoadMatrixOp.getLeadDimension().getSExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto i32Type = rewriter.getI32Type();
call    0 never executed
    #####:   88:    auto strideValue = rewriter.create<spirv::ConstantOp>(
    #####:   89:        loc, i32Type, IntegerAttr::get(i32Type, stride));
call    0 never executed
call    1 never executed
    #####:   90:    auto coloumnMajor = rewriter.create<spirv::ConstantOp>(
    #####:   91:        loc, rewriter.getI1Type(), rewriter.getBoolAttr(false));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   92:    rewriter.replaceOpWithNewOp<spirv::NVCooperativeMatrixLoadOp>(
        -:   93:        subgroupMmaLoadMatrixOp, coopType, bufferPtr, strideValue, coloumnMajor,
    #####:   94:        spirv::MemoryAccessAttr());
call    0 never executed
    #####:   95:    return success();
        -:   96:  }
        -:   97:};
        -:   98:
        -:   99:/// This class implements the conversion of GPU MMA StoreOp to
        -:  100:/// CooperativeMatrixStore op in the SPIRV dialect.
        -:  101:struct WmmaStoreOpToSPIRVLowering
        -:  102:    : public OpConversionPattern<gpu::SubgroupMmaStoreMatrixOp> {
        -:  103:  using OpConversionPattern::OpConversionPattern;
        -:  104:
        -:  105:  LogicalResult
function _ZNK12_GLOBAL__N_126WmmaStoreOpToSPIRVLowering15matchAndRewriteEN4mlir3gpu24SubgroupMmaStoreMatrixOpENS2_31SubgroupMmaStoreMatrixOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  106:  matchAndRewrite(gpu::SubgroupMmaStoreMatrixOp subgroupMmaStoreMatrixOp,
        -:  107:                  OpAdaptor adaptor,
        -:  108:                  ConversionPatternRewriter &rewriter) const override {
    #####:  109:    Location loc = subgroupMmaStoreMatrixOp->getLoc();
call    0 never executed
    #####:  110:    auto memrefType =
    #####:  111:        subgroupMmaStoreMatrixOp.getDstMemref().getType().cast<MemRefType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  112:    Value bufferPtr = spirv::getElementPtr(
    #####:  113:        *getTypeConverter<SPIRVTypeConverter>(), memrefType,
call    0 never executed
    #####:  114:        adaptor.getDstMemref(), adaptor.getIndices(), loc, rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  115:    int64_t stride = subgroupMmaStoreMatrixOp.getLeadDimension().getSExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  116:    auto i32Type = rewriter.getI32Type();
call    0 never executed
    #####:  117:    auto strideValue = rewriter.create<spirv::ConstantOp>(
    #####:  118:        loc, i32Type, IntegerAttr::get(i32Type, stride));
call    0 never executed
call    1 never executed
    #####:  119:    auto coloumnMajor = rewriter.create<spirv::ConstantOp>(
    #####:  120:        loc, rewriter.getI1Type(), rewriter.getBoolAttr(false));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:    rewriter.replaceOpWithNewOp<spirv::NVCooperativeMatrixStoreOp>(
    #####:  122:        subgroupMmaStoreMatrixOp, bufferPtr, adaptor.getSrc(), strideValue,
call    0 never executed
    #####:  123:        coloumnMajor, spirv::MemoryAccessAttr());
call    0 never executed
call    1 never executed
    #####:  124:    return success();
        -:  125:  }
        -:  126:};
        -:  127:
        -:  128:/// This class implements the conversion of GPU MMA Compute to
        -:  129:/// CooperativeMatrixMulAdd op in the SPIRV dialect.
        -:  130:struct WmmaMmaOpToSPIRVLowering
        -:  131:    : public OpConversionPattern<gpu::SubgroupMmaComputeOp> {
        -:  132:  using OpConversionPattern::OpConversionPattern;
        -:  133:
        -:  134:  LogicalResult
function _ZNK12_GLOBAL__N_124WmmaMmaOpToSPIRVLowering15matchAndRewriteEN4mlir3gpu20SubgroupMmaComputeOpENS2_27SubgroupMmaComputeOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  135:  matchAndRewrite(gpu::SubgroupMmaComputeOp subgroupMmaComputeOp,
        -:  136:                  OpAdaptor adaptor,
        -:  137:                  ConversionPatternRewriter &rewriter) const override {
    #####:  138:    rewriter.replaceOpWithNewOp<spirv::NVCooperativeMatrixMulAddOp>(
    #####:  139:        subgroupMmaComputeOp, adaptor.getOpC().getType(), adaptor.getOpA(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  140:        adaptor.getOpB(), adaptor.getOpC());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  141:    return success();
        -:  142:  }
        -:  143:};
        -:  144:
        -:  145:/// Convert GPU MMA ConstantMatrixOp to constant SPIR-V cooperative matrix ops.
        -:  146:struct WmmaConstantOpToSPIRVLowering
        -:  147:    : public OpConversionPattern<gpu::SubgroupMmaConstantMatrixOp> {
        -:  148:  using OpConversionPattern::OpConversionPattern;
        -:  149:
        -:  150:  LogicalResult
function _ZNK12_GLOBAL__N_129WmmaConstantOpToSPIRVLowering15matchAndRewriteEN4mlir3gpu27SubgroupMmaConstantMatrixOpENS2_34SubgroupMmaConstantMatrixOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  151:  matchAndRewrite(gpu::SubgroupMmaConstantMatrixOp subgroupMmaConstantMatrixOp,
        -:  152:                  OpAdaptor adaptor,
        -:  153:                  ConversionPatternRewriter &rewriter) const override {
    #####:  154:    Value cst = adaptor.getOperands()[0];
call    0 never executed
call    1 never executed
    #####:  155:    auto coopType = convertMMAToSPIRVType(
    #####:  156:        subgroupMmaConstantMatrixOp.getType().cast<gpu::MMAMatrixType>());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  157:    rewriter.replaceOpWithNewOp<spirv::CompositeConstructOp>(
    #####:  158:        subgroupMmaConstantMatrixOp, coopType, cst);
call    0 never executed
    #####:  159:    return success();
        -:  160:  }
        -:  161:};
        -:  162:
        -:  163:/// Converts elementwise ops to SPIR-V cooperative matrix elementwise ops.
        -:  164:struct WmmaElementwiseOpToSPIRVLowering
        -:  165:    : public OpConversionPattern<gpu::SubgroupMmaElementwiseOp> {
        -:  166:  using OpConversionPattern::OpConversionPattern;
        -:  167:
        -:  168:  LogicalResult
function _ZNK12_GLOBAL__N_132WmmaElementwiseOpToSPIRVLowering15matchAndRewriteEN4mlir3gpu24SubgroupMmaElementwiseOpENS2_31SubgroupMmaElementwiseOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  169:  matchAndRewrite(gpu::SubgroupMmaElementwiseOp subgroupMmaElementwiseOp,
        -:  170:                  OpAdaptor adaptor,
        -:  171:                  ConversionPatternRewriter &rewriter) const override {
        -:  172:    // All operands should be of cooperative matrix types.
    #####:  173:    for (Value operand : adaptor.getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  174:      if (!operand.getType().isa<spirv::CooperativeMatrixNVType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  175:        return failure();
        -:  176:    }
    #####:  177:    auto coopType = convertMMAToSPIRVType(
    #####:  178:        subgroupMmaElementwiseOp.getType().cast<gpu::MMAMatrixType>());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  179:    createElementWiseOp(rewriter, subgroupMmaElementwiseOp, coopType,
call    0 never executed
call    1 never executed
        -:  180:                        adaptor.getOperands());
    #####:  181:    return success();
        -:  182:  }
        -:  183:};
        -:  184:
        -:  185:} // namespace
        -:  186:
        -:  187:/// Return the LLVMStructureType corresponding to the MMAMatrixType `type`.
        -:  188:mlir::spirv::CooperativeMatrixNVType
function _ZN4mlir21convertMMAToSPIRVTypeENS_3gpu13MMAMatrixTypeE called 0 returned 0% blocks executed 0%
    #####:  189:mlir::convertMMAToSPIRVType(gpu::MMAMatrixType type) {
    #####:  190:  ArrayRef<int64_t> retTypeShape = type.getShape();
call    0 never executed
    #####:  191:  Type elementType = type.getElementType();
call    0 never executed
    #####:  192:  return spirv::CooperativeMatrixNVType::get(
    #####:  193:      elementType, spirv::Scope::Subgroup, retTypeShape[0], retTypeShape[1]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  194:}
        -:  195:
function _ZN4mlir40populateGpuWMMAToSPIRVConversionPatternsERNS_18SPIRVTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:  196:void mlir::populateGpuWMMAToSPIRVConversionPatterns(
        -:  197:    SPIRVTypeConverter &converter, RewritePatternSet &patterns) {
    #####:  198:  patterns.add<WmmaLoadOpToSPIRVLowering, WmmaMmaOpToSPIRVLowering,
        -:  199:               WmmaStoreOpToSPIRVLowering, WmmaConstantOpToSPIRVLowering,
        -:  200:               WmmaElementwiseOpToSPIRVLowering>(converter,
    #####:  201:                                                 patterns.getContext());
call    0 never executed
    #####:  202:}
