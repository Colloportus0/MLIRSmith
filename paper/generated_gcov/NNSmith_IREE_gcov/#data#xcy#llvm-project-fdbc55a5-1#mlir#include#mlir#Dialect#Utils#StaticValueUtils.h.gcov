        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Dialect/Utils/StaticValueUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Fusion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Fusion.cpp.gcda
        -:    0:Runs:325587
        -:    1://===- StaticValueUtils.h - Utilities for static values ---------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This header file defines utilities for dealing with static values, e.g.,
        -:   10:// converting back and forth between Value and OpFoldResult. Such functionality
        -:   11:// is used in multiple dialects.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#ifndef MLIR_DIALECT_UTILS_STATICVALUEUTILS_H
        -:   16:#define MLIR_DIALECT_UTILS_STATICVALUEUTILS_H
        -:   17:
        -:   18:#include "mlir/IR/OpDefinition.h"
        -:   19:#include "mlir/Support/LLVM.h"
        -:   20:#include "llvm/ADT/SmallVector.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:
        -:   24:/// Represents a range (offset, size, and stride) where each element of the
        -:   25:/// triple may be dynamic or static.
    #####:   26:struct Range {
        -:   27:  OpFoldResult offset;
        -:   28:  OpFoldResult size;
        -:   29:  OpFoldResult stride;
        -:   30:};
        -:   31:
        -:   32:/// Given an array of Range values, return a tuple of (offset vector, sizes
        -:   33:/// vector, and strides vector) formed by separating out the individual elements
        -:   34:/// of each range.
        -:   35:std::tuple<SmallVector<OpFoldResult>, SmallVector<OpFoldResult>,
        -:   36:           SmallVector<OpFoldResult>>
        -:   37:getOffsetsSizesAndStrides(ArrayRef<Range> ranges);
        -:   38:
        -:   39:/// Helper function to dispatch an OpFoldResult into `staticVec` if:
        -:   40:///   a) it is an IntegerAttr
        -:   41:/// In other cases, the OpFoldResult is dispached to the `dynamicVec`.
        -:   42:/// In such dynamic cases, a copy of the `sentinel` value is also pushed to
        -:   43:/// `staticVec`. This is useful to extract mixed static and dynamic entries that
        -:   44:/// come from an AttrSizedOperandSegments trait.
        -:   45:void dispatchIndexOpFoldResult(OpFoldResult ofr,
        -:   46:                               SmallVectorImpl<Value> &dynamicVec,
        -:   47:                               SmallVectorImpl<int64_t> &staticVec,
        -:   48:                               int64_t sentinel);
        -:   49:
        -:   50:/// Helper function to dispatch multiple OpFoldResults according to the behavior
        -:   51:/// of `dispatchIndexOpFoldResult(OpFoldResult ofr` for a single OpFoldResult.
        -:   52:void dispatchIndexOpFoldResults(ArrayRef<OpFoldResult> ofrs,
        -:   53:                                SmallVectorImpl<Value> &dynamicVec,
        -:   54:                                SmallVectorImpl<int64_t> &staticVec,
        -:   55:                                int64_t sentinel);
        -:   56:
        -:   57:/// Extract int64_t values from the assumed ArrayAttr of IntegerAttr.
        -:   58:SmallVector<int64_t, 4> extractFromI64ArrayAttr(Attribute attr);
        -:   59:
        -:   60:/// Given a value, try to extract a constant Attribute. If this fails, return
        -:   61:/// the original value.
        -:   62:OpFoldResult getAsOpFoldResult(Value val);
        -:   63:
        -:   64:/// Given an array of values, try to extract a constant Attribute from each
        -:   65:/// value. If this fails, return the original value.
        -:   66:SmallVector<OpFoldResult> getAsOpFoldResult(ValueRange values);
        -:   67:
        -:   68:/// Convert `arrayAttr` to a vector of OpFoldResult.
        -:   69:SmallVector<OpFoldResult> getAsOpFoldResult(ArrayAttr arrayAttr);
        -:   70:
        -:   71:/// If ofr is a constant integer or an IntegerAttr, return the integer.
        -:   72:Optional<int64_t> getConstantIntValue(OpFoldResult ofr);
        -:   73:
        -:   74:/// Return true if `ofr` is constant integer equal to `value`.
        -:   75:bool isConstantIntValue(OpFoldResult ofr, int64_t value);
        -:   76:
        -:   77:/// Return true if ofr1 and ofr2 are the same integer constant attribute values
        -:   78:/// or the same SSA value.
        -:   79:/// Ignore integer bitwitdh and type mismatch that come from the fact there is
        -:   80:/// no IndexAttr and that IndexType have no bitwidth.
        -:   81:bool isEqualConstantIntOrValue(OpFoldResult ofr1, OpFoldResult ofr2);
        -:   82:
        -:   83:/// Helper function to convert a vector of `OpFoldResult`s into a vector of
        -:   84:/// `Value`s. For each `OpFoldResult` in `valueOrAttrVec` return the fold result
        -:   85:/// if it casts to  a `Value` or create an index-type constant if it casts to
        -:   86:/// `IntegerAttr`. No other attribute types are supported.
        -:   87:SmallVector<Value> getAsValues(OpBuilder &b, Location loc,
        -:   88:                               ArrayRef<OpFoldResult> valueOrAttrVec);
        -:   89:
        -:   90:} // namespace mlir
        -:   91:
        -:   92:#endif // MLIR_DIALECT_UTILS_STATICVALUEUTILS_H
