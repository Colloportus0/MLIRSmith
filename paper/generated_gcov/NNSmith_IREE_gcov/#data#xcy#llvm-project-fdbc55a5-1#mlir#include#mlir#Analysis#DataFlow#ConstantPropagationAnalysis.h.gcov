        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/IntegerRangeAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/IntegerRangeAnalysis.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- ConstantPropagationAnalysis.h - Constant propagation analysis ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements constant propagation analysis. In this file are defined
        -:   10:// the lattice value class that represents constant values in the program and
        -:   11:// a sparse constant propagation analysis that uses operation folders to
        -:   12:// speculate about constant values in the program.
        -:   13://
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#ifndef MLIR_ANALYSIS_DATAFLOW_CONSTANTPROPAGATIONANALYSIS_H
        -:   17:#define MLIR_ANALYSIS_DATAFLOW_CONSTANTPROPAGATIONANALYSIS_H
        -:   18:
        -:   19:#include "mlir/Analysis/DataFlow/SparseAnalysis.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace dataflow {
        -:   23:
        -:   24://===----------------------------------------------------------------------===//
        -:   25:// ConstantValue
        -:   26://===----------------------------------------------------------------------===//
        -:   27:
        -:   28:/// This lattice value represents a known constant value of a lattice.
        -:   29:class ConstantValue {
        -:   30:public:
        -:   31:  /// Construct a constant value as uninitialized.
    #####:   32:  explicit ConstantValue() = default;
branch  0 never executed
branch  1 never executed
        -:   33:
        -:   34:  /// Construct a constant value with a known constant.
   20136*:   35:  explicit ConstantValue(Attribute constant, Dialect *dialect)
   20136*:   36:      : constant(constant), dialect(dialect) {}
call    0 returned 100%
call    1 returned 100%
        -:   37:
        -:   38:  /// Get the constant value. Returns null if no value was determined.
        -:   39:  Attribute getConstantValue() const {
        -:   40:    assert(!isUninitialized());
        -:   41:    return *constant;
        -:   42:  }
        -:   43:
        -:   44:  /// Get the dialect instance that can be used to materialize the constant.
        -:   45:  Dialect *getConstantDialect() const {
        -:   46:    assert(!isUninitialized());
        -:   47:    return dialect;
        -:   48:  }
        -:   49:
        -:   50:  /// Compare the constant values.
   80544*:   51:  bool operator==(const ConstantValue &rhs) const {
  100680*:   52:    return constant == rhs.constant;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        -:   53:  }
        -:   54:
        -:   55:  /// Print the constant value.
        -:   56:  void print(raw_ostream &os) const;
        -:   57:
        -:   58:  /// The state where the constant value is uninitialized. This happens when the
        -:   59:  /// state hasn't been set during the analysis.
        -:   60:  static ConstantValue getUninitialized() { return ConstantValue{}; }
        -:   61:
        -:   62:  /// Whether the state is uninitialized.
  100680*:   63:  bool isUninitialized() const { return !constant.has_value(); }
        -:   64:
        -:   65:  /// The state where the constant value is unknown.
   20118*:   66:  static ConstantValue getUnknownConstant() {
   20118*:   67:    return ConstantValue{/*constant=*/nullptr, /*dialect=*/nullptr};
call    0 returned 100%
        -:   68:  }
        -:   69:
        -:   70:  /// The union with another constant value is null if they are different, and
        -:   71:  /// the same if they are the same.
    60408:   72:  static ConstantValue join(const ConstantValue &lhs,
        -:   73:                            const ConstantValue &rhs) {
    60408:   74:    if (lhs.isUninitialized())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
   20136*:   75:      return rhs;
   40272*:   76:    if (rhs.isUninitialized())
branch  0 never executed
branch  1 never executed
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
   20136*:   77:      return lhs;
   20136*:   78:    if (lhs == rhs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
   20136*:   79:      return lhs;
    #####:   80:    return getUnknownConstant();
        -:   81:  }
        -:   82:
        -:   83:private:
        -:   84:  /// The constant value.
        -:   85:  Optional<Attribute> constant;
        -:   86:  /// A dialect instance that can be used to materialize the constant.
        -:   87:  Dialect *dialect = nullptr;
        -:   88:};
        -:   89:
        -:   90://===----------------------------------------------------------------------===//
        -:   91:// SparseConstantPropagation
        -:   92://===----------------------------------------------------------------------===//
        -:   93:
        -:   94:/// This analysis implements sparse constant propagation, which attempts to
        -:   95:/// determine constant-valued results for operations using constant-valued
        -:   96:/// operands, by speculatively folding operations. When combined with dead-code
        -:   97:/// analysis, this becomes sparse conditional constant propagation (SCCP).
        -:   98:class SparseConstantPropagation
        -:   99:    : public SparseDataFlowAnalysis<Lattice<ConstantValue>> {
        -:  100:public:
        -:  101:  using SparseDataFlowAnalysis::SparseDataFlowAnalysis;
        -:  102:
        -:  103:  void visitOperation(Operation *op,
        -:  104:                      ArrayRef<const Lattice<ConstantValue> *> operands,
        -:  105:                      ArrayRef<Lattice<ConstantValue> *> results) override;
        -:  106:
        -:  107:  void setToEntryState(Lattice<ConstantValue> *lattice) override;
        -:  108:};
        -:  109:
        -:  110:} // end namespace dataflow
        -:  111:} // end namespace mlir
        -:  112:
        -:  113:#endif // MLIR_ANALYSIS_DATAFLOW_CONSTANTPROPAGATIONANALYSIS_H
