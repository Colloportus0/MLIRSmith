        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Shape/Transforms/Bufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Shape/Transforms/CMakeFiles/obj.MLIRShapeOpsTransforms.dir/Bufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Shape/Transforms/CMakeFiles/obj.MLIRShapeOpsTransforms.dir/Bufferize.cpp.gcda
        -:    0:Runs:325550
        -:    1://====----- Bufferize.cpp - Bufferization of shape ops  ---------*- C++-*--===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Shape/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   12:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   16:#include "mlir/Dialect/Shape/IR/Shape.h"
        -:   17:#include "mlir/Dialect/Shape/Transforms/BufferizableOpInterfaceImpl.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:
        -:   20:namespace mlir {
        -:   21:#define GEN_PASS_DEF_SHAPEBUFFERIZE
        -:   22:#include "mlir/Dialect/Shape/Transforms/Passes.h.inc"
        -:   23:} // namespace mlir
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace bufferization;
        -:   27:
        -:   28:namespace {
   388096:   29:struct ShapeBufferizePass
call    0 returned 100%
call    1 returned 100%
        -:   30:    : public impl::ShapeBufferizeBase<ShapeBufferizePass> {
function _ZN12_GLOBAL__N_118ShapeBufferizePass14runOnOperationEv called 970 returned 99% blocks executed 88%
      970:   31:  void runOnOperation() override {
     1928:   32:    BufferizationOptions options = getPartialBufferizationOptions();
call    0 returned 100%
call    1 returned 100%
      971:   33:    options.opFilter.allowDialect<shape::ShapeDialect>();
call    0 returned 100%
        -:   34:
      968:   35:    if (failed(bufferizeOp(getOperation(), options)))
call    0 returned 100%
call    1 returned 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   36:      signalPassFailure();
call    0 never executed
      957:   37:  }
        -:   38:
function _ZNK12_GLOBAL__N_118ShapeBufferizePass20getDependentDialectsERN4mlir15DialectRegistryE called 1058 returned 100% blocks executed 100%
     1058:   39:  void getDependentDialects(DialectRegistry &registry) const override {
     1058:   40:    registry.insert<bufferization::BufferizationDialect, memref::MemRefDialect,
     1058:   41:                    shape::ShapeDialect>();
call    0 returned 100%
     1058:   42:    shape::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
     1058:   43:  }
        -:   44:};
        -:   45:} // namespace
        -:   46:
function _ZN4mlir24createShapeBufferizePassEv called 326608 returned 100% blocks executed 100%
   326608:   47:std::unique_ptr<OperationPass<func::FuncOp>> mlir::createShapeBufferizePass() {
   326608:   48:  return std::make_unique<ShapeBufferizePass>();
call    0 returned 100%
        -:   49:}
