        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/ShapeToStandard/ConvertShapeConstraints.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ShapeToStandard/CMakeFiles/obj.MLIRShapeToStandard.dir/ConvertShapeConstraints.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ShapeToStandard/CMakeFiles/obj.MLIRShapeToStandard.dir/ConvertShapeConstraints.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- ConvertShapeConstraints.cpp - Conversion of shape constraints ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/ShapeToStandard/ShapeToStandard.h"
        -:   10:
        -:   11:#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
        -:   12:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   13:#include "mlir/Dialect/Shape/IR/Shape.h"
        -:   14:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   15:#include "mlir/IR/PatternMatch.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Pass/PassRegistry.h"
        -:   18:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   19:
        -:   20:namespace mlir {
        -:   21:#define GEN_PASS_DEF_CONVERTSHAPECONSTRAINTS
        -:   22:#include "mlir/Conversion/Passes.h.inc"
        -:   23:} // namespace mlir
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:namespace {
        -:   28:#include "ShapeToStandard.cpp.inc"
        -:   29:} // namespace
        -:   30:
        -:   31:namespace {
        -:   32:class ConvertCstrRequireOp : public OpRewritePattern<shape::CstrRequireOp> {
        -:   33:public:
        -:   34:  using OpRewritePattern::OpRewritePattern;
function _ZNK12_GLOBAL__N_120ConvertCstrRequireOp15matchAndRewriteEN4mlir5shape13CstrRequireOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   35:  LogicalResult matchAndRewrite(shape::CstrRequireOp op,
        -:   36:                                PatternRewriter &rewriter) const override {
    #####:   37:    rewriter.create<cf::AssertOp>(op.getLoc(), op.getPred(), op.getMsgAttr());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   38:    rewriter.replaceOpWithNewOp<shape::ConstWitnessOp>(op, true);
call    0 never executed
    #####:   39:    return success();
        -:   40:  }
        -:   41:};
        -:   42:} // namespace
        -:   43:
function _ZN4mlir49populateConvertShapeConstraintsConversionPatternsERNS_17RewritePatternSetE called 883 returned 100% blocks executed 100%
      883:   44:void mlir::populateConvertShapeConstraintsConversionPatterns(
        -:   45:    RewritePatternSet &patterns) {
      883:   46:  patterns.add<CstrBroadcastableToRequire>(patterns.getContext());
call    0 returned 100%
      883:   47:  patterns.add<CstrEqToRequire>(patterns.getContext());
call    0 returned 100%
      883:   48:  patterns.add<ConvertCstrRequireOp>(patterns.getContext());
call    0 returned 100%
      883:   49:}
        -:   50:
        -:   51:namespace {
        -:   52:// This pass eliminates shape constraints from the program, converting them to
        -:   53:// eager (side-effecting) error handling code. After eager error handling code
        -:   54:// is emitted, witnesses are satisfied, so they are replace with
        -:   55:// `shape.const_witness true`.
  326652*:   56:class ConvertShapeConstraints
call    0 never executed
call    1 returned 100%
        -:   57:    : public impl::ConvertShapeConstraintsBase<ConvertShapeConstraints> {
function _ZN12_GLOBAL__N_123ConvertShapeConstraints14runOnOperationEv called 883 returned 100% blocks executed 69%
      883:   58:  void runOnOperation() override {
      883:   59:    auto *func = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      883:   60:    auto *context = &getContext();
call    0 returned 100%
        -:   61:
     1766:   62:    RewritePatternSet patterns(context);
call    0 returned 100%
      883:   63:    populateConvertShapeConstraintsConversionPatterns(patterns);
call    0 returned 100%
        -:   64:
      883:   65:    if (failed(applyPatternsAndFoldGreedily(func, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   66:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:   67:  }
        -:   68:};
        -:   69:} // namespace
        -:   70:
function _ZN4mlir33createConvertShapeConstraintsPassEv called 326652 returned 100% blocks executed 100%
   326652:   71:std::unique_ptr<Pass> mlir::createConvertShapeConstraintsPass() {
   326652:   72:  return std::make_unique<ConvertShapeConstraints>();
call    0 returned 100%
        -:   73:}
