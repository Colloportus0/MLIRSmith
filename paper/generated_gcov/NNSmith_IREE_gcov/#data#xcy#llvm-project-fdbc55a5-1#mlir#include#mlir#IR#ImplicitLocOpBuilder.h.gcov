        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/IR/ImplicitLocOpBuilder.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Async/Transforms/CMakeFiles/obj.MLIRAsyncTransforms.dir/AsyncParallelFor.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Async/Transforms/CMakeFiles/obj.MLIRAsyncTransforms.dir/AsyncParallelFor.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- ImplicitLocOpBuilder.h - Convenience OpBuilder -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Helper class to create ops with a modally set location.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_IR_IMPLICITLOCOPBUILDER_H
        -:   14:#define MLIR_IR_IMPLICITLOCOPBUILDER_H
        -:   15:
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:
        -:   20:/// ImplicitLocOpBuilder maintains a 'current location', allowing use of the
        -:   21:/// create<> method without specifying the location.  It is otherwise the same
        -:   22:/// as OpBuilder.
        -:   23:class ImplicitLocOpBuilder : public mlir::OpBuilder {
        -:   24:public:
        -:   25:  /// OpBuilder has a bunch of convenience constructors - we support them all
        -:   26:  /// with the additional Location.
        -:   27:  template <typename... T>
    #####:   28:  ImplicitLocOpBuilder(Location loc, T &&...operands)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:   29:      : OpBuilder(std::forward<T>(operands)...), curLoc(loc) {}
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:   30:
        -:   31:  /// Create a builder and set the insertion point to before the first operation
        -:   32:  /// in the block but still inside the block.
        -:   33:  static ImplicitLocOpBuilder atBlockBegin(Location loc, Block *block,
        -:   34:                                           Listener *listener = nullptr) {
        -:   35:    return ImplicitLocOpBuilder(loc, block, block->begin(), listener);
        -:   36:  }
        -:   37:
        -:   38:  /// Create a builder and set the insertion point to after the last operation
        -:   39:  /// in the block but still inside the block.
        -:   40:  static ImplicitLocOpBuilder atBlockEnd(Location loc, Block *block,
        -:   41:                                         Listener *listener = nullptr) {
        -:   42:    return ImplicitLocOpBuilder(loc, block, block->end(), listener);
        -:   43:  }
        -:   44:
        -:   45:  /// Create a builder and set the insertion point to before the block
        -:   46:  /// terminator.
        -:   47:  static ImplicitLocOpBuilder atBlockTerminator(Location loc, Block *block,
        -:   48:                                                Listener *listener = nullptr) {
        -:   49:    auto *terminator = block->getTerminator();
        -:   50:    assert(terminator != nullptr && "the block has no terminator");
        -:   51:    return ImplicitLocOpBuilder(loc, block, Block::iterator(terminator),
        -:   52:                                listener);
        -:   53:  }
        -:   54:
        -:   55:  /// Accessors for the implied location.
        -:   56:  Location getLoc() const { return curLoc; }
        -:   57:  void setLoc(Location loc) { curLoc = loc; }
        -:   58:
        -:   59:  // We allow clients to use the explicit-loc version of create as well.
        -:   60:  using OpBuilder::create;
        -:   61:  using OpBuilder::createOrFold;
        -:   62:
        -:   63:  /// Create an operation of specific op type at the current insertion point and
        -:   64:  /// location.
        -:   65:  template <typename OpTy, typename... Args>
    #####:   66:  OpTy create(Args &&...args) {
    #####:   67:    return OpBuilder::create<OpTy>(curLoc, std::forward<Args>(args)...);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
        -:   68:  }
        -:   69:
        -:   70:  /// Create an operation of specific op type at the current insertion point,
        -:   71:  /// and immediately try to fold it. This functions populates 'results' with
        -:   72:  /// the results after folding the operation.
        -:   73:  template <typename OpTy, typename... Args>
        -:   74:  void createOrFold(llvm::SmallVectorImpl<Value> &results, Args &&...args) {
        -:   75:    OpBuilder::createOrFold<OpTy>(results, curLoc, std::forward<Args>(args)...);
        -:   76:  }
        -:   77:
        -:   78:  /// Overload to create or fold a single result operation.
        -:   79:  template <typename OpTy, typename... Args>
        -:   80:  std::enable_if_t<OpTy::template hasTrait<mlir::OpTrait::OneResult>(), Value>
    #####:   81:  createOrFold(Args &&...args) {
    #####:   82:    return OpBuilder::createOrFold<OpTy>(curLoc, std::forward<Args>(args)...);
call    0 never executed
call    1 never executed
        -:   83:  }
        -:   84:
        -:   85:  /// Overload to create or fold a zero result operation.
        -:   86:  template <typename OpTy, typename... Args>
        -:   87:  std::enable_if_t<OpTy::template hasTrait<mlir::OpTrait::ZeroResults>(), OpTy>
        -:   88:  createOrFold(Args &&...args) {
        -:   89:    return OpBuilder::createOrFold<OpTy>(curLoc, std::forward<Args>(args)...);
        -:   90:  }
        -:   91:
        -:   92:  /// This builder can also be used to emit diagnostics to the current location.
        -:   93:  mlir::InFlightDiagnostic
        -:   94:  emitError(const llvm::Twine &message = llvm::Twine()) {
        -:   95:    return mlir::emitError(curLoc, message);
        -:   96:  }
        -:   97:  mlir::InFlightDiagnostic
        -:   98:  emitWarning(const llvm::Twine &message = llvm::Twine()) {
        -:   99:    return mlir::emitWarning(curLoc, message);
        -:  100:  }
        -:  101:  mlir::InFlightDiagnostic
        -:  102:  emitRemark(const llvm::Twine &message = llvm::Twine()) {
        -:  103:    return mlir::emitRemark(curLoc, message);
        -:  104:  }
        -:  105:
        -:  106:private:
        -:  107:  Location curLoc;
        -:  108:};
        -:  109:
        -:  110:} // namespace mlir
        -:  111:
        -:  112:#endif // MLIR_IR_IMPLICITLOCOPBUILDER_H
