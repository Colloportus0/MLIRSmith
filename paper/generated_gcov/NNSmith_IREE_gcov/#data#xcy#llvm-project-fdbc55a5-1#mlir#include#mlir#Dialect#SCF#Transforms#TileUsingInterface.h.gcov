        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Dialect/SCF/Transforms/TileUsingInterface.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/TransformOps/CMakeFiles/obj.MLIRLinalgTransformOps.dir/LinalgTransformOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/TransformOps/CMakeFiles/obj.MLIRLinalgTransformOps.dir/LinalgTransformOps.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- TileUsingInterface.h - Tiling ops using TilingInterface --*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_DIALECT_SCF_TRANSFORMS_TILEUSINGINTERFACE_H
        -:   10:#define MLIR_DIALECT_SCF_TRANSFORMS_TILEUSINGINTERFACE_H
        -:   11:
        -:   12:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   13:#include "mlir/Dialect/Tensor/Transforms/Transforms.h"
        -:   14:#include "mlir/IR/PatternMatch.h"
        -:   15:#include "mlir/Interfaces/TilingInterface.h"
        -:   16:
        -:   17:#include <deque>
        -:   18:
        -:   19:namespace mlir {
        -:   20:class Operation;
        -:   21:class PatternRewriter;
        -:   22:class TilingInterface;
        -:   23:} // namespace mlir
        -:   24:
        -:   25:namespace mlir {
        -:   26:namespace scf {
        -:   27:
        -:   28:using SCFTileSizeComputationFunction =
        -:   29:    std::function<SmallVector<Value>(OpBuilder &, Operation *)>;
        -:   30:
        -:   31:/// Options to use to control tiling.
    #####:   32:struct SCFTilingOptions {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:   33:  /// Computation function that returns the tile sizes for each operation.
        -:   34:  /// Delayed construction of constant tile sizes should occur to interoperate
        -:   35:  /// with folding.
        -:   36:  SCFTileSizeComputationFunction tileSizeComputationFunction = nullptr;
        -:   37:
        -:   38:  SCFTilingOptions &
    #####:   39:  setTileSizeComputationFunction(SCFTileSizeComputationFunction fun) {
    #####:   40:    tileSizeComputationFunction = std::move(fun);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   41:    return *this;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   42:  }
        -:   43:  /// Set the `tileSizeComputationFunction` to return the values `ts`. The
        -:   44:  /// values must not fold away when tiling. Otherwise, use a more robust
        -:   45:  /// `tileSizeComputationFunction`.
        -:   46:  SCFTilingOptions &setTileSizes(const SmallVector<Value, 4> &ts) {
        -:   47:    tileSizeComputationFunction = [=](OpBuilder &, Operation *) { return ts; };
        -:   48:    return *this;
        -:   49:  }
        -:   50:  /// Convenience function to set the `tileSizeComputationFunction` to a
        -:   51:  /// function that computes tile sizes at the point they are needed. Allows
        -:   52:  /// proper interaction with folding.
        -:   53:  SCFTilingOptions &setTileSizes(ArrayRef<int64_t> ts);
        -:   54:
        -:   55:  /// The interchange vector to reorder the tiled loops.
        -:   56:  SmallVector<int64_t> interchangeVector = {};
function _ZN4mlir3scf16SCFTilingOptions14setInterchangeEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:   57:  SCFTilingOptions &setInterchange(ArrayRef<int64_t> interchange) {
    #####:   58:    interchangeVector = llvm::to_vector(interchange);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   59:    return *this;
        -:   60:  }
        -:   61:};
        -:   62:
        -:   63:/// Transformation information returned after tiling.
        -:   64:struct SCFTilingResult {
        -:   65:  /// The tiled operation generated.
        -:   66:  Operation *tiledOp;
        -:   67:  /// The `scf.for` operations that iterate over the tiles.
        -:   68:  SmallVector<scf::ForOp> loops;
        -:   69:  /// Values to use as replacements for the untiled op. Is the same size as the
        -:   70:  /// number of results of the untiled op.
        -:   71:  SmallVector<Value> replacements;
        -:   72:};
        -:   73:
        -:   74:/// Method to tile an op that implements the `TilingInterface` using
        -:   75:/// `scf.for` for iterating over the tiles.
        -:   76:FailureOr<SCFTilingResult> tileUsingSCFForOp(RewriterBase &rewriter,
        -:   77:                                             TilingInterface op,
        -:   78:                                             const SCFTilingOptions &options);
        -:   79:
        -:   80:/// Options used to control tile + fuse.
    #####:   81:struct SCFTileAndFuseOptions {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   82:  /// The tiling options used to control the tiling of the consumer.
        -:   83:  SCFTilingOptions tilingOptions;
        -:   84:  SCFTileAndFuseOptions &setTilingOptions(SCFTilingOptions options) {
        -:   85:    tilingOptions = options;
        -:   86:    return *this;
        -:   87:  }
        -:   88:};
        -:   89:
        -:   90:/// Transformation information returned after tile and fuse.
        -:   91:struct SCFTileAndFuseResult {
        -:   92:  /// List of untiled operations that were fused with the tiled consumer.
        -:   93:  llvm::SetVector<Operation *> fusedProducers;
        -:   94:  /// List of tiled and fused operations generated. The first one in this list
        -:   95:  /// is guaranteed to be the tiled operations generated during tiling of the
        -:   96:  /// generated operation.
        -:   97:  llvm::SetVector<Operation *> tiledAndFusedOps;
        -:   98:  /// The `scf.for` operations that iterate over the tiles.
        -:   99:  SmallVector<scf::ForOp> loops;
        -:  100:  /// The replacement values to use for the tiled and fused operations.
        -:  101:  llvm::DenseMap<Value, Value> replacements;
        -:  102:};
        -:  103:
        -:  104:/// Method to tile and fuse a sequence of operations, by tiling the consumer
        -:  105:/// and fusing its producers. Note that this assumes that it is valid to
        -:  106:/// tile+fuse the producer into the innermost tiled loop. Its up to the caller
        -:  107:/// to ensure that the tile sizes provided make this fusion valid.
        -:  108:///
        -:  109:/// For example, for the following sequence
        -:  110:///
        -:  111:/// ```mlir
        -:  112:/// %0 =
        -:  113:/// %1 = linalg.fill ... outs(%0 : ... )
        -:  114:/// %2 = linalg.matmul ... outs(%1 : ...) ...
        -:  115:/// ```
        -:  116:///
        -:  117:/// it is legal to fuse the fill with the matmul only if the matmul is tiled
        -:  118:/// along the parallel dimensions and not the reduction dimension, i.e. the tile
        -:  119:/// size for the reduction dimension should be 0. The resulting fused
        -:  120:/// transformation is
        -:  121:///
        -:  122:/// ```mlir
        -:  123:/// %1 = scf.for ... iter_args(%arg0 = %0)
        -:  124:///   %2 = tensor.extract_slice %arg0
        -:  125:///   %3 = linalg.fill .. outs(%2 : ... )
        -:  126:///   %4 = linalg.matmul .. outs(%3 : ...)
        -:  127:/// }
        -:  128:/// ```
        -:  129:FailureOr<SCFTileAndFuseResult>
        -:  130:tileConsumerAndFuseProducerGreedilyUsingSCFForOp(
        -:  131:    RewriterBase &rewriter, TilingInterface consumer,
        -:  132:    const SCFTileAndFuseOptions &options);
        -:  133:
        -:  134:/// Method to lower an `op` that implements the `TilingInterface` to
        -:  135:/// loops/scalars.
        -:  136:FailureOr<SmallVector<scf::ForOp>>
        -:  137:lowerToLoopsUsingSCFForOp(RewriterBase &rewriter, TilingInterface op);
        -:  138:
        -:  139:} // namespace scf
        -:  140:} // namespace mlir
        -:  141:
        -:  142:#endif // MLIR_DIALECT_SCF_TRANSFORMS_TILEUSINGINTERFACE_H
