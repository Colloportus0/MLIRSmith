        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/IR/Builders.h
        -:    0:Graph:../tools/mlir/lib/Target/SPIRV/Serialization/CMakeFiles/obj.MLIRSPIRVSerialization.dir/SerializeOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/SPIRV/Serialization/CMakeFiles/obj.MLIRSPIRVSerialization.dir/SerializeOps.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- Builders.h - Helpers for constructing MLIR Classes -------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_IR_BUILDERS_H
        -:   10:#define MLIR_IR_BUILDERS_H
        -:   11:
        -:   12:#include "mlir/IR/OpDefinition.h"
        -:   13:#include "llvm/Support/Compiler.h"
        -:   14:
        -:   15:namespace mlir {
        -:   16:
        -:   17:class AffineExpr;
        -:   18:class BlockAndValueMapping;
        -:   19:class UnknownLoc;
        -:   20:class FileLineColLoc;
        -:   21:class Type;
        -:   22:class PrimitiveType;
        -:   23:class IntegerType;
        -:   24:class FloatType;
        -:   25:class FunctionType;
        -:   26:class IndexType;
        -:   27:class MemRefType;
        -:   28:class VectorType;
        -:   29:class RankedTensorType;
        -:   30:class UnrankedTensorType;
        -:   31:class TupleType;
        -:   32:class NoneType;
        -:   33:class BoolAttr;
        -:   34:class IntegerAttr;
        -:   35:class FloatAttr;
        -:   36:class StringAttr;
        -:   37:class TypeAttr;
        -:   38:class ArrayAttr;
        -:   39:class SymbolRefAttr;
        -:   40:class ElementsAttr;
        -:   41:class DenseElementsAttr;
        -:   42:class DenseIntElementsAttr;
        -:   43:class AffineMapAttr;
        -:   44:class AffineMap;
        -:   45:class UnitAttr;
        -:   46:
        -:   47:/// This class is a general helper class for creating context-global objects
        -:   48:/// like types, attributes, and affine expressions.
        -:   49:class Builder {
        -:   50:public:
    #####:   51:  explicit Builder(MLIRContext *context) : context(context) {}
    #####:   52:  explicit Builder(Operation *op) : Builder(op->getContext()) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
        -:   53:
        -:   54:  MLIRContext *getContext() const { return context; }
        -:   55:
        -:   56:  // Locations.
        -:   57:  Location getUnknownLoc();
        -:   58:  Location getFusedLoc(ArrayRef<Location> locs,
        -:   59:                       Attribute metadata = Attribute());
        -:   60:
        -:   61:  // Types.
        -:   62:  FloatType getFloat8E5M2Type();
        -:   63:  FloatType getBF16Type();
        -:   64:  FloatType getF16Type();
        -:   65:  FloatType getF32Type();
        -:   66:  FloatType getF64Type();
        -:   67:  FloatType getF80Type();
        -:   68:  FloatType getF128Type();
        -:   69:
        -:   70:  IndexType getIndexType();
        -:   71:
        -:   72:  IntegerType getI1Type();
        -:   73:  IntegerType getI2Type();
        -:   74:  IntegerType getI4Type();
        -:   75:  IntegerType getI8Type();
        -:   76:  IntegerType getI16Type();
        -:   77:  IntegerType getI32Type();
        -:   78:  IntegerType getI64Type();
        -:   79:  IntegerType getIntegerType(unsigned width);
        -:   80:  IntegerType getIntegerType(unsigned width, bool isSigned);
        -:   81:  FunctionType getFunctionType(TypeRange inputs, TypeRange results);
        -:   82:  TupleType getTupleType(TypeRange elementTypes);
        -:   83:  NoneType getNoneType();
        -:   84:
        -:   85:  /// Get or construct an instance of the type `Ty` with provided arguments.
        -:   86:  template <typename Ty, typename... Args>
        -:   87:  Ty getType(Args &&...args) {
        -:   88:    return Ty::get(context, std::forward<Args>(args)...);
        -:   89:  }
        -:   90:
        -:   91:  /// Get or construct an instance of the attribute `Attr` with provided
        -:   92:  /// arguments.
        -:   93:  template <typename Attr, typename... Args>
        -:   94:  Attr getAttr(Args &&...args) {
        -:   95:    return Attr::get(context, std::forward<Args>(args)...);
        -:   96:  }
        -:   97:
        -:   98:  // Attributes.
        -:   99:  NamedAttribute getNamedAttr(StringRef name, Attribute val);
        -:  100:
        -:  101:  UnitAttr getUnitAttr();
        -:  102:  BoolAttr getBoolAttr(bool value);
        -:  103:  DictionaryAttr getDictionaryAttr(ArrayRef<NamedAttribute> value);
        -:  104:  IntegerAttr getIntegerAttr(Type type, int64_t value);
        -:  105:  IntegerAttr getIntegerAttr(Type type, const APInt &value);
        -:  106:  FloatAttr getFloatAttr(Type type, double value);
        -:  107:  FloatAttr getFloatAttr(Type type, const APFloat &value);
        -:  108:  StringAttr getStringAttr(const Twine &bytes);
        -:  109:  ArrayAttr getArrayAttr(ArrayRef<Attribute> value);
        -:  110:
        -:  111:  // Returns a 0-valued attribute of the given `type`. This function only
        -:  112:  // supports boolean, integer, and 16-/32-/64-bit float types, and vector or
        -:  113:  // ranked tensor of them. Returns null attribute otherwise.
        -:  114:  Attribute getZeroAttr(Type type);
        -:  115:
        -:  116:  // Convenience methods for fixed types.
        -:  117:  FloatAttr getF16FloatAttr(float value);
        -:  118:  FloatAttr getF32FloatAttr(float value);
        -:  119:  FloatAttr getF64FloatAttr(double value);
        -:  120:
        -:  121:  IntegerAttr getI8IntegerAttr(int8_t value);
        -:  122:  IntegerAttr getI16IntegerAttr(int16_t value);
        -:  123:  IntegerAttr getI32IntegerAttr(int32_t value);
        -:  124:  IntegerAttr getI64IntegerAttr(int64_t value);
        -:  125:  IntegerAttr getIndexAttr(int64_t value);
        -:  126:
        -:  127:  /// Signed and unsigned integer attribute getters.
        -:  128:  IntegerAttr getSI32IntegerAttr(int32_t value);
        -:  129:  IntegerAttr getUI32IntegerAttr(uint32_t value);
        -:  130:
        -:  131:  /// Vector-typed DenseIntElementsAttr getters. `values` must not be empty.
        -:  132:  DenseIntElementsAttr getBoolVectorAttr(ArrayRef<bool> values);
        -:  133:  DenseIntElementsAttr getI32VectorAttr(ArrayRef<int32_t> values);
        -:  134:  DenseIntElementsAttr getI64VectorAttr(ArrayRef<int64_t> values);
        -:  135:  DenseIntElementsAttr getIndexVectorAttr(ArrayRef<int64_t> values);
        -:  136:
        -:  137:  /// Tensor-typed DenseIntElementsAttr getters. `values` can be empty.
        -:  138:  /// These are generally preferable for representing general lists of integers
        -:  139:  /// as attributes.
        -:  140:  DenseIntElementsAttr getI32TensorAttr(ArrayRef<int32_t> values);
        -:  141:  DenseIntElementsAttr getI64TensorAttr(ArrayRef<int64_t> values);
        -:  142:  DenseIntElementsAttr getIndexTensorAttr(ArrayRef<int64_t> values);
        -:  143:
        -:  144:  /// Tensor-typed DenseArrayAttr getters.
        -:  145:  DenseBoolArrayAttr getDenseBoolArrayAttr(ArrayRef<bool> values);
        -:  146:  DenseI8ArrayAttr getDenseI8ArrayAttr(ArrayRef<int8_t> values);
        -:  147:  DenseI16ArrayAttr getDenseI16ArrayAttr(ArrayRef<int16_t> values);
        -:  148:  DenseI32ArrayAttr getDenseI32ArrayAttr(ArrayRef<int32_t> values);
        -:  149:  DenseI64ArrayAttr getDenseI64ArrayAttr(ArrayRef<int64_t> values);
        -:  150:  DenseF32ArrayAttr getDenseF32ArrayAttr(ArrayRef<float> values);
        -:  151:  DenseF64ArrayAttr getDenseF64ArrayAttr(ArrayRef<double> values);
        -:  152:
        -:  153:  ArrayAttr getAffineMapArrayAttr(ArrayRef<AffineMap> values);
        -:  154:  ArrayAttr getBoolArrayAttr(ArrayRef<bool> values);
        -:  155:  ArrayAttr getI32ArrayAttr(ArrayRef<int32_t> values);
        -:  156:  ArrayAttr getI64ArrayAttr(ArrayRef<int64_t> values);
        -:  157:  ArrayAttr getIndexArrayAttr(ArrayRef<int64_t> values);
        -:  158:  ArrayAttr getF32ArrayAttr(ArrayRef<float> values);
        -:  159:  ArrayAttr getF64ArrayAttr(ArrayRef<double> values);
        -:  160:  ArrayAttr getStrArrayAttr(ArrayRef<StringRef> values);
        -:  161:  ArrayAttr getTypeArrayAttr(TypeRange values);
        -:  162:
        -:  163:  // Affine expressions and affine maps.
        -:  164:  AffineExpr getAffineDimExpr(unsigned position);
        -:  165:  AffineExpr getAffineSymbolExpr(unsigned position);
        -:  166:  AffineExpr getAffineConstantExpr(int64_t constant);
        -:  167:
        -:  168:  // Special cases of affine maps and integer sets
        -:  169:  /// Returns a zero result affine map with no dimensions or symbols: () -> ().
        -:  170:  AffineMap getEmptyAffineMap();
        -:  171:  /// Returns a single constant result affine map with 0 dimensions and 0
        -:  172:  /// symbols.  One constant result: () -> (val).
        -:  173:  AffineMap getConstantAffineMap(int64_t val);
        -:  174:  // One dimension id identity map: (i) -> (i).
        -:  175:  AffineMap getDimIdentityMap();
        -:  176:  // Multi-dimensional identity map: (d0, d1, d2) -> (d0, d1, d2).
        -:  177:  AffineMap getMultiDimIdentityMap(unsigned rank);
        -:  178:  // One symbol identity map: ()[s] -> (s).
        -:  179:  AffineMap getSymbolIdentityMap();
        -:  180:
        -:  181:  /// Returns a map that shifts its (single) input dimension by 'shift'.
        -:  182:  /// (d0) -> (d0 + shift)
        -:  183:  AffineMap getSingleDimShiftAffineMap(int64_t shift);
        -:  184:
        -:  185:  /// Returns an affine map that is a translation (shift) of all result
        -:  186:  /// expressions in 'map' by 'shift'.
        -:  187:  /// Eg: input: (d0, d1)[s0] -> (d0, d1 + s0), shift = 2
        -:  188:  ///   returns:    (d0, d1)[s0] -> (d0 + 2, d1 + s0 + 2)
        -:  189:  AffineMap getShiftedAffineMap(AffineMap map, int64_t shift);
        -:  190:
        -:  191:protected:
        -:  192:  MLIRContext *context;
        -:  193:};
        -:  194:
        -:  195:/// This class helps build Operations. Operations that are created are
        -:  196:/// automatically inserted at an insertion point. The builder is copyable.
        -:  197:class OpBuilder : public Builder {
        -:  198:public:
        -:  199:  struct Listener;
        -:  200:
        -:  201:  /// Create a builder with the given context.
        -:  202:  explicit OpBuilder(MLIRContext *ctx, Listener *listener = nullptr)
        -:  203:      : Builder(ctx), listener(listener) {}
        -:  204:
        -:  205:  /// Create a builder and set the insertion point to the start of the region.
        -:  206:  explicit OpBuilder(Region *region, Listener *listener = nullptr)
        -:  207:      : OpBuilder(region->getContext(), listener) {
        -:  208:    if (!region->empty())
        -:  209:      setInsertionPoint(&region->front(), region->front().begin());
        -:  210:  }
        -:  211:  explicit OpBuilder(Region &region, Listener *listener = nullptr)
        -:  212:      : OpBuilder(&region, listener) {}
        -:  213:
        -:  214:  /// Create a builder and set insertion point to the given operation, which
        -:  215:  /// will cause subsequent insertions to go right before it.
        -:  216:  explicit OpBuilder(Operation *op, Listener *listener = nullptr)
        -:  217:      : OpBuilder(op->getContext(), listener) {
        -:  218:    setInsertionPoint(op);
        -:  219:  }
        -:  220:
        -:  221:  OpBuilder(Block *block, Block::iterator insertPoint,
        -:  222:            Listener *listener = nullptr)
        -:  223:      : OpBuilder(block->getParent()->getContext(), listener) {
        -:  224:    setInsertionPoint(block, insertPoint);
        -:  225:  }
        -:  226:
        -:  227:  /// Create a builder and set the insertion point to before the first operation
        -:  228:  /// in the block but still inside the block.
        -:  229:  static OpBuilder atBlockBegin(Block *block, Listener *listener = nullptr) {
        -:  230:    return OpBuilder(block, block->begin(), listener);
        -:  231:  }
        -:  232:
        -:  233:  /// Create a builder and set the insertion point to after the last operation
        -:  234:  /// in the block but still inside the block.
        -:  235:  static OpBuilder atBlockEnd(Block *block, Listener *listener = nullptr) {
        -:  236:    return OpBuilder(block, block->end(), listener);
        -:  237:  }
        -:  238:
        -:  239:  /// Create a builder and set the insertion point to before the block
        -:  240:  /// terminator.
        -:  241:  static OpBuilder atBlockTerminator(Block *block,
        -:  242:                                     Listener *listener = nullptr) {
        -:  243:    auto *terminator = block->getTerminator();
        -:  244:    assert(terminator != nullptr && "the block has no terminator");
        -:  245:    return OpBuilder(block, Block::iterator(terminator), listener);
        -:  246:  }
        -:  247:
        -:  248:  //===--------------------------------------------------------------------===//
        -:  249:  // Listeners
        -:  250:  //===--------------------------------------------------------------------===//
        -:  251:
        -:  252:  /// This class represents a listener that may be used to hook into various
        -:  253:  /// actions within an OpBuilder.
        -:  254:  struct Listener {
        -:  255:    virtual ~Listener();
        -:  256:
        -:  257:    /// Notification handler for when an operation is inserted into the builder.
        -:  258:    /// `op` is the operation that was inserted.
        -:  259:    virtual void notifyOperationInserted(Operation *op) {}
        -:  260:
        -:  261:    /// Notification handler for when a block is created using the builder.
        -:  262:    /// `block` is the block that was created.
        -:  263:    virtual void notifyBlockCreated(Block *block) {}
        -:  264:  };
        -:  265:
        -:  266:  /// Sets the listener of this builder to the one provided.
        -:  267:  void setListener(Listener *newListener) { listener = newListener; }
        -:  268:
        -:  269:  /// Returns the current listener of this builder, or nullptr if this builder
        -:  270:  /// doesn't have a listener.
        -:  271:  Listener *getListener() const { return listener; }
        -:  272:
        -:  273:  //===--------------------------------------------------------------------===//
        -:  274:  // Insertion Point Management
        -:  275:  //===--------------------------------------------------------------------===//
        -:  276:
        -:  277:  /// This class represents a saved insertion point.
        -:  278:  class InsertPoint {
        -:  279:  public:
        -:  280:    /// Creates a new insertion point which doesn't point to anything.
        -:  281:    InsertPoint() = default;
        -:  282:
        -:  283:    /// Creates a new insertion point at the given location.
        -:  284:    InsertPoint(Block *insertBlock, Block::iterator insertPt)
        -:  285:        : block(insertBlock), point(insertPt) {}
        -:  286:
        -:  287:    /// Returns true if this insert point is set.
        -:  288:    bool isSet() const { return (block != nullptr); }
        -:  289:
        -:  290:    Block *getBlock() const { return block; }
        -:  291:    Block::iterator getPoint() const { return point; }
        -:  292:
        -:  293:  private:
        -:  294:    Block *block = nullptr;
        -:  295:    Block::iterator point;
        -:  296:  };
        -:  297:
        -:  298:  /// RAII guard to reset the insertion point of the builder when destroyed.
        -:  299:  class InsertionGuard {
        -:  300:  public:
        -:  301:    InsertionGuard(OpBuilder &builder)
        -:  302:        : builder(&builder), ip(builder.saveInsertionPoint()) {}
        -:  303:
        -:  304:    ~InsertionGuard() {
        -:  305:      if (builder)
        -:  306:        builder->restoreInsertionPoint(ip);
        -:  307:    }
        -:  308:
        -:  309:    InsertionGuard(const InsertionGuard &) = delete;
        -:  310:    InsertionGuard &operator=(const InsertionGuard &) = delete;
        -:  311:
        -:  312:    /// Implement the move constructor to clear the builder field of `other`.
        -:  313:    /// That way it does not restore the insertion point upon destruction as
        -:  314:    /// that should be done exclusively by the just constructed InsertionGuard.
        -:  315:    InsertionGuard(InsertionGuard &&other) noexcept
        -:  316:        : builder(other.builder), ip(other.ip) {
        -:  317:      other.builder = nullptr;
        -:  318:    }
        -:  319:
        -:  320:    InsertionGuard &operator=(InsertionGuard &&other) = delete;
        -:  321:
        -:  322:  private:
        -:  323:    OpBuilder *builder;
        -:  324:    OpBuilder::InsertPoint ip;
        -:  325:  };
        -:  326:
        -:  327:  /// Reset the insertion point to no location.  Creating an operation without a
        -:  328:  /// set insertion point is an error, but this can still be useful when the
        -:  329:  /// current insertion point a builder refers to is being removed.
        -:  330:  void clearInsertionPoint() {
        -:  331:    this->block = nullptr;
        -:  332:    insertPoint = Block::iterator();
        -:  333:  }
        -:  334:
        -:  335:  /// Return a saved insertion point.
        -:  336:  InsertPoint saveInsertionPoint() const {
        -:  337:    return InsertPoint(getInsertionBlock(), getInsertionPoint());
        -:  338:  }
        -:  339:
        -:  340:  /// Restore the insert point to a previously saved point.
        -:  341:  void restoreInsertionPoint(InsertPoint ip) {
        -:  342:    if (ip.isSet())
        -:  343:      setInsertionPoint(ip.getBlock(), ip.getPoint());
        -:  344:    else
        -:  345:      clearInsertionPoint();
        -:  346:  }
        -:  347:
        -:  348:  /// Set the insertion point to the specified location.
        -:  349:  void setInsertionPoint(Block *block, Block::iterator insertPoint) {
        -:  350:    // TODO: check that insertPoint is in this rather than some other block.
        -:  351:    this->block = block;
        -:  352:    this->insertPoint = insertPoint;
        -:  353:  }
        -:  354:
        -:  355:  /// Sets the insertion point to the specified operation, which will cause
        -:  356:  /// subsequent insertions to go right before it.
        -:  357:  void setInsertionPoint(Operation *op) {
        -:  358:    setInsertionPoint(op->getBlock(), Block::iterator(op));
        -:  359:  }
        -:  360:
        -:  361:  /// Sets the insertion point to the node after the specified operation, which
        -:  362:  /// will cause subsequent insertions to go right after it.
        -:  363:  void setInsertionPointAfter(Operation *op) {
        -:  364:    setInsertionPoint(op->getBlock(), ++Block::iterator(op));
        -:  365:  }
        -:  366:
        -:  367:  /// Sets the insertion point to the node after the specified value. If value
        -:  368:  /// has a defining operation, sets the insertion point to the node after such
        -:  369:  /// defining operation. This will cause subsequent insertions to go right
        -:  370:  /// after it. Otherwise, value is a BlockArgument. Sets the insertion point to
        -:  371:  /// the start of its block.
        -:  372:  void setInsertionPointAfterValue(Value val) {
        -:  373:    if (Operation *op = val.getDefiningOp()) {
        -:  374:      setInsertionPointAfter(op);
        -:  375:    } else {
        -:  376:      auto blockArg = val.cast<BlockArgument>();
        -:  377:      setInsertionPointToStart(blockArg.getOwner());
        -:  378:    }
        -:  379:  }
        -:  380:
        -:  381:  /// Sets the insertion point to the start of the specified block.
        -:  382:  void setInsertionPointToStart(Block *block) {
        -:  383:    setInsertionPoint(block, block->begin());
        -:  384:  }
        -:  385:
        -:  386:  /// Sets the insertion point to the end of the specified block.
        -:  387:  void setInsertionPointToEnd(Block *block) {
        -:  388:    setInsertionPoint(block, block->end());
        -:  389:  }
        -:  390:
        -:  391:  /// Return the block the current insertion point belongs to.  Note that the
        -:  392:  /// the insertion point is not necessarily the end of the block.
        -:  393:  Block *getInsertionBlock() const { return block; }
        -:  394:
        -:  395:  /// Returns the current insertion point of the builder.
        -:  396:  Block::iterator getInsertionPoint() const { return insertPoint; }
        -:  397:
        -:  398:  /// Returns the current block of the builder.
        -:  399:  Block *getBlock() const { return block; }
        -:  400:
        -:  401:  //===--------------------------------------------------------------------===//
        -:  402:  // Block Creation
        -:  403:  //===--------------------------------------------------------------------===//
        -:  404:
        -:  405:  /// Add new block with 'argTypes' arguments and set the insertion point to the
        -:  406:  /// end of it. The block is inserted at the provided insertion point of
        -:  407:  /// 'parent'. `locs` contains the locations of the inserted arguments, and
        -:  408:  /// should match the size of `argTypes`.
        -:  409:  Block *createBlock(Region *parent, Region::iterator insertPt = {},
        -:  410:                     TypeRange argTypes = llvm::None,
        -:  411:                     ArrayRef<Location> locs = llvm::None);
        -:  412:
        -:  413:  /// Add new block with 'argTypes' arguments and set the insertion point to the
        -:  414:  /// end of it. The block is placed before 'insertBefore'. `locs` contains the
        -:  415:  /// locations of the inserted arguments, and should match the size of
        -:  416:  /// `argTypes`.
        -:  417:  Block *createBlock(Block *insertBefore, TypeRange argTypes = llvm::None,
        -:  418:                     ArrayRef<Location> locs = llvm::None);
        -:  419:
        -:  420:  //===--------------------------------------------------------------------===//
        -:  421:  // Operation Creation
        -:  422:  //===--------------------------------------------------------------------===//
        -:  423:
        -:  424:  /// Insert the given operation at the current insertion point and return it.
        -:  425:  Operation *insert(Operation *op);
        -:  426:
        -:  427:  /// Creates an operation given the fields represented as an OperationState.
        -:  428:  Operation *create(const OperationState &state);
        -:  429:
        -:  430:  /// Creates an operation with the given fields.
        -:  431:  Operation *create(Location loc, StringAttr opName, ValueRange operands,
        -:  432:                    TypeRange types = {},
        -:  433:                    ArrayRef<NamedAttribute> attributes = {},
        -:  434:                    BlockRange successors = {},
        -:  435:                    MutableArrayRef<std::unique_ptr<Region>> regions = {});
        -:  436:
        -:  437:private:
        -:  438:  /// Helper for sanity checking preconditions for create* methods below.
        -:  439:  template <typename OpT>
        -:  440:  RegisteredOperationName getCheckRegisteredInfo(MLIRContext *ctx) {
        -:  441:    Optional<RegisteredOperationName> opName =
        -:  442:        RegisteredOperationName::lookup(OpT::getOperationName(), ctx);
        -:  443:    if (LLVM_UNLIKELY(!opName)) {
        -:  444:      llvm::report_fatal_error(
        -:  445:          "Building op `" + OpT::getOperationName() +
        -:  446:          "` but it isn't registered in this MLIRContext: the dialect may not "
        -:  447:          "be loaded or this operation isn't registered by the dialect. See "
        -:  448:          "also https://mlir.llvm.org/getting_started/Faq/"
        -:  449:          "#registered-loaded-dependent-whats-up-with-dialects-management");
        -:  450:    }
        -:  451:    return *opName;
        -:  452:  }
        -:  453:
        -:  454:public:
        -:  455:  /// Create an operation of specific op type at the current insertion point.
        -:  456:  template <typename OpTy, typename... Args>
        -:  457:  OpTy create(Location location, Args &&...args) {
        -:  458:    OperationState state(location,
        -:  459:                         getCheckRegisteredInfo<OpTy>(location.getContext()));
        -:  460:    OpTy::build(*this, state, std::forward<Args>(args)...);
        -:  461:    auto *op = create(state);
        -:  462:    auto result = dyn_cast<OpTy>(op);
        -:  463:    assert(result && "builder didn't return the right type");
        -:  464:    return result;
        -:  465:  }
        -:  466:
        -:  467:  /// Create an operation of specific op type at the current insertion point,
        -:  468:  /// and immediately try to fold it. This functions populates 'results' with
        -:  469:  /// the results after folding the operation.
        -:  470:  template <typename OpTy, typename... Args>
        -:  471:  void createOrFold(SmallVectorImpl<Value> &results, Location location,
        -:  472:                    Args &&...args) {
        -:  473:    // Create the operation without using 'create' as we don't want to
        -:  474:    // insert it yet.
        -:  475:    OperationState state(location,
        -:  476:                         getCheckRegisteredInfo<OpTy>(location.getContext()));
        -:  477:    OpTy::build(*this, state, std::forward<Args>(args)...);
        -:  478:    Operation *op = Operation::create(state);
        -:  479:
        -:  480:    // Fold the operation. If successful destroy it, otherwise insert it.
        -:  481:    if (succeeded(tryFold(op, results)))
        -:  482:      op->destroy();
        -:  483:    else
        -:  484:      insert(op);
        -:  485:  }
        -:  486:
        -:  487:  /// Overload to create or fold a single result operation.
        -:  488:  template <typename OpTy, typename... Args>
        -:  489:  std::enable_if_t<OpTy::template hasTrait<OpTrait::OneResult>(), Value>
        -:  490:  createOrFold(Location location, Args &&...args) {
        -:  491:    SmallVector<Value, 1> results;
        -:  492:    createOrFold<OpTy>(results, location, std::forward<Args>(args)...);
        -:  493:    return results.front();
        -:  494:  }
        -:  495:
        -:  496:  /// Overload to create or fold a zero result operation.
        -:  497:  template <typename OpTy, typename... Args>
        -:  498:  std::enable_if_t<OpTy::template hasTrait<OpTrait::ZeroResults>(), OpTy>
        -:  499:  createOrFold(Location location, Args &&...args) {
        -:  500:    auto op = create<OpTy>(location, std::forward<Args>(args)...);
        -:  501:    SmallVector<Value, 0> unused;
        -:  502:    (void)tryFold(op.getOperation(), unused);
        -:  503:
        -:  504:    // Folding cannot remove a zero-result operation, so for convenience we
        -:  505:    // continue to return it.
        -:  506:    return op;
        -:  507:  }
        -:  508:
        -:  509:  /// Attempts to fold the given operation and places new results within
        -:  510:  /// 'results'. Returns success if the operation was folded, failure otherwise.
        -:  511:  /// Note: This function does not erase the operation on a successful fold.
        -:  512:  LogicalResult tryFold(Operation *op, SmallVectorImpl<Value> &results);
        -:  513:
        -:  514:  /// Creates a deep copy of the specified operation, remapping any operands
        -:  515:  /// that use values outside of the operation using the map that is provided
        -:  516:  /// ( leaving them alone if no entry is present).  Replaces references to
        -:  517:  /// cloned sub-operations to the corresponding operation that is copied,
        -:  518:  /// and adds those mappings to the map.
        -:  519:  Operation *clone(Operation &op, BlockAndValueMapping &mapper);
        -:  520:  Operation *clone(Operation &op);
        -:  521:
        -:  522:  /// Creates a deep copy of this operation but keep the operation regions
        -:  523:  /// empty. Operands are remapped using `mapper` (if present), and `mapper` is
        -:  524:  /// updated to contain the results.
        -:  525:  Operation *cloneWithoutRegions(Operation &op, BlockAndValueMapping &mapper) {
        -:  526:    return insert(op.cloneWithoutRegions(mapper));
        -:  527:  }
        -:  528:  Operation *cloneWithoutRegions(Operation &op) {
        -:  529:    return insert(op.cloneWithoutRegions());
        -:  530:  }
        -:  531:  template <typename OpT>
        -:  532:  OpT cloneWithoutRegions(OpT op) {
        -:  533:    return cast<OpT>(cloneWithoutRegions(*op.getOperation()));
        -:  534:  }
        -:  535:
        -:  536:private:
        -:  537:  /// The current block this builder is inserting into.
        -:  538:  Block *block = nullptr;
        -:  539:  /// The insertion point within the block that this builder is inserting
        -:  540:  /// before.
        -:  541:  Block::iterator insertPoint;
        -:  542:  /// The optional listener for events of this builder.
        -:  543:  Listener *listener;
        -:  544:};
        -:  545:
        -:  546:} // namespace mlir
        -:  547:
        -:  548:#endif
