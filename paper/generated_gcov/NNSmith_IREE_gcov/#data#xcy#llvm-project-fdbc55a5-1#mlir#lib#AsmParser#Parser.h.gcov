        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/AsmParser/Parser.h
        -:    0:Graph:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/AttributeParser.cpp.gcno
        -:    0:Data:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/AttributeParser.cpp.gcda
        -:    0:Runs:325595
        -:    1://===- Parser.h - MLIR Base Parser Class ------------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_LIB_ASMPARSER_PARSER_H
        -:   10:#define MLIR_LIB_ASMPARSER_PARSER_H
        -:   11:
        -:   12:#include "ParserState.h"
        -:   13:#include "mlir/IR/Builders.h"
        -:   14:#include "mlir/IR/OpImplementation.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:namespace detail {
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// Parser
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
        -:   22:/// This class implement support for parsing global entities like attributes and
        -:   23:/// types. It is intended to be subclassed by specialized subparsers that
        -:   24:/// include state.
        -:   25:class Parser {
        -:   26:public:
        -:   27:  using Delimiter = OpAsmParser::Delimiter;
        -:   28:
        -:   29:  Builder builder;
        -:   30:
        -:   31:  Parser(ParserState &state)
        -:   32:      : builder(state.config.getContext()), state(state) {}
        -:   33:
        -:   34:  // Helper methods to get stuff from the parser-global state.
        -:   35:  ParserState &getState() const { return state; }
 2323492*:   36:  MLIRContext *getContext() const { return state.config.getContext(); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 never executed
        -:   37:  const llvm::SourceMgr &getSourceMgr() { return state.lex.getSourceMgr(); }
        -:   38:
        -:   39:  /// Parse a comma-separated list of elements up until the specified end token.
        -:   40:  ParseResult
        -:   41:  parseCommaSeparatedListUntil(Token::Kind rightToken,
        -:   42:                               function_ref<ParseResult()> parseElement,
        -:   43:                               bool allowEmptyList = true);
        -:   44:
        -:   45:  /// Parse a list of comma-separated items with an optional delimiter.  If a
        -:   46:  /// delimiter is provided, then an empty list is allowed.  If not, then at
        -:   47:  /// least one element will be parsed.
        -:   48:  ParseResult
        -:   49:  parseCommaSeparatedList(Delimiter delimiter,
        -:   50:                          function_ref<ParseResult()> parseElementFn,
        -:   51:                          StringRef contextMessage = StringRef());
        -:   52:
        -:   53:  /// Parse a comma separated list of elements that must have at least one entry
        -:   54:  /// in it.
        -:   55:  ParseResult
    #####:   56:  parseCommaSeparatedList(function_ref<ParseResult()> parseElementFn) {
    #####:   57:    return parseCommaSeparatedList(Delimiter::None, parseElementFn);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   58:  }
        -:   59:
        -:   60:  /// Parse the body of a dialect symbol, which starts and ends with <>'s, and
        -:   61:  /// may be recursive. Return with the 'body' StringRef encompassing the entire
        -:   62:  /// body. `isCodeCompletion` is set to true if the body contained a code
        -:   63:  /// completion location, in which case the body is only populated up to the
        -:   64:  /// completion.
        -:   65:  ParseResult parseDialectSymbolBody(StringRef &body, bool &isCodeCompletion);
        -:   66:  ParseResult parseDialectSymbolBody(StringRef &body) {
        -:   67:    bool isCodeCompletion = false;
        -:   68:    return parseDialectSymbolBody(body, isCodeCompletion);
        -:   69:  }
        -:   70:
        -:   71:  // We have two forms of parsing methods - those that return a non-null
        -:   72:  // pointer on success, and those that return a ParseResult to indicate whether
        -:   73:  // they returned a failure.  The second class fills in by-reference arguments
        -:   74:  // as the results of their action.
        -:   75:
        -:   76:  //===--------------------------------------------------------------------===//
        -:   77:  // Error Handling
        -:   78:  //===--------------------------------------------------------------------===//
        -:   79:
        -:   80:  /// Emit an error and return failure.
        -:   81:  InFlightDiagnostic emitError(const Twine &message = {});
        -:   82:  InFlightDiagnostic emitError(SMLoc loc, const Twine &message = {});
        -:   83:
        -:   84:  /// Emit an error about a "wrong token".  If the current token is at the
        -:   85:  /// start of a source line, this will apply heuristics to back up and report
        -:   86:  /// the error at the end of the previous line, which is where the expected
        -:   87:  /// token is supposed to be.
        -:   88:  InFlightDiagnostic emitWrongTokenError(const Twine &message = {});
        -:   89:
        -:   90:  /// Encode the specified source location information into an attribute for
        -:   91:  /// attachment to the IR.
        -:   92:  Location getEncodedSourceLocation(SMLoc loc) {
        -:   93:    return state.lex.getEncodedSourceLocation(loc);
        -:   94:  }
        -:   95:
        -:   96:  //===--------------------------------------------------------------------===//
        -:   97:  // Token Parsing
        -:   98:  //===--------------------------------------------------------------------===//
        -:   99:
        -:  100:  /// Return the current token the parser is inspecting.
20475305*:  101:  const Token &getToken() const { return state.curToken; }
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 taken 53% (fallthrough)
branch 20 taken 47%
branch 21 taken 100%
branch 22 taken 1%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 61% (fallthrough)
branch 28 taken 39%
call   29 returned 100%
call   30 never executed
branch 31 taken 10% (fallthrough)
branch 32 taken 90%
branch 33 taken 0%
branch 34 taken 100%
branch 35 taken 20%
branch 36 taken 80%
call   37 returned 100%
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 taken 1% (fallthrough)
branch 43 taken 99%
call   44 returned 100%
branch 45 never executed
branch 46 never executed
branch 47 taken 0%
branch 48 taken 0%
branch 49 taken 11%
branch 50 taken 0%
branch 51 taken 0%
branch 52 taken 23%
branch 53 taken 0%
branch 54 taken 0%
branch 55 taken 0%
branch 56 taken 0%
branch 57 taken 3%
branch 58 taken 42%
branch 59 taken 0%
branch 60 taken 0%
branch 61 taken 0%
branch 62 taken 0%
branch 63 taken 20%
branch 64 taken 0%
branch 65 taken 0%
branch 66 taken 0%
branch 67 taken 0%
branch 68 never executed
branch 69 never executed
branch 70 never executed
branch 71 never executed
call   72 returned 100%
call   73 never executed
call   74 never executed
branch 75 never executed
branch 76 never executed
call   77 never executed
call   78 never executed
branch 79 never executed
branch 80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
  3995886:  102:  StringRef getTokenSpelling() const { return state.curToken.getSpelling(); }
call    0 returned 100%
        -:  103:
        -:  104:  /// If the current token has the specified kind, consume it and return true.
        -:  105:  /// If not, return false.
 9177484*:  106:  bool consumeIf(Token::Kind kind) {
 9177484*:  107:    if (state.curToken.isNot(kind))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 taken 66% (fallthrough)
branch 25 taken 34%
branch 26 taken 0% (fallthrough)
branch 27 taken 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0%
branch 30 taken 0% (fallthrough)
branch 31 taken 100%
branch 32 never executed
branch 33 never executed
        -:  108:      return false;
 5007144*:  109:    consumeToken(kind);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
 5007144*:  110:    return true;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
        -:  111:  }
        -:  112:
        -:  113:  /// Advance the current lexer onto the next token.
        -:  114:  void consumeToken() {
        -:  115:    assert(state.curToken.isNot(Token::eof, Token::error) &&
        -:  116:           "shouldn't advance past EOF or errors");
        -:  117:    state.curToken = state.lex.lexToken();
        -:  118:  }
        -:  119:
        -:  120:  /// Advance the current lexer onto the next token, asserting what the expected
        -:  121:  /// current token is.  This is preferred to the above method because it leads
        -:  122:  /// to more self-documenting code with better checking.
        -:  123:  void consumeToken(Token::Kind kind) {
        -:  124:    assert(state.curToken.is(kind) && "consumed an unexpected token");
        -:  125:    consumeToken();
        -:  126:  }
        -:  127:
        -:  128:  /// Reset the parser to the given lexer position.
        -:  129:  void resetToken(const char *tokPos) {
        -:  130:    state.lex.resetPointer(tokPos);
        -:  131:    state.curToken = state.lex.lexToken();
        -:  132:  }
        -:  133:
        -:  134:  /// Consume the specified token if present and return success.  On failure,
        -:  135:  /// output a diagnostic and return failure.
        -:  136:  ParseResult parseToken(Token::Kind expectedToken, const Twine &message);
        -:  137:
        -:  138:  /// Parse an optional integer value from the stream.
        -:  139:  OptionalParseResult parseOptionalInteger(APInt &result);
        -:  140:
        -:  141:  /// Parse a floating point value from an integer literal token.
        -:  142:  ParseResult parseFloatFromIntegerLiteral(Optional<APFloat> &result,
        -:  143:                                           const Token &tok, bool isNegative,
        -:  144:                                           const llvm::fltSemantics &semantics,
        -:  145:                                           size_t typeSizeInBits);
        -:  146:
        -:  147:  /// Returns true if the current token corresponds to a keyword.
        -:  148:  bool isCurrentTokenAKeyword() const {
        -:  149:    return getToken().isAny(Token::bare_identifier, Token::inttype) ||
        -:  150:           getToken().isKeyword();
        -:  151:  }
        -:  152:
        -:  153:  /// Parse a keyword, if present, into 'keyword'.
        -:  154:  ParseResult parseOptionalKeyword(StringRef *keyword);
        -:  155:
        -:  156:  //===--------------------------------------------------------------------===//
        -:  157:  // Resource Parsing
        -:  158:  //===--------------------------------------------------------------------===//
        -:  159:
        -:  160:  /// Parse a handle to a dialect resource within the assembly format.
        -:  161:  FailureOr<AsmDialectResourceHandle>
        -:  162:  parseResourceHandle(const OpAsmDialectInterface *dialect, StringRef &name);
        -:  163:  FailureOr<AsmDialectResourceHandle> parseResourceHandle(Dialect *dialect);
        -:  164:
        -:  165:  //===--------------------------------------------------------------------===//
        -:  166:  // Type Parsing
        -:  167:  //===--------------------------------------------------------------------===//
        -:  168:
        -:  169:  /// Invoke the `getChecked` method of the given Attribute or Type class, using
        -:  170:  /// the provided location to emit errors in the case of failure. Note that
        -:  171:  /// unlike `OpBuilder::getType`, this method does not implicitly insert a
        -:  172:  /// context parameter.
        -:  173:  template <typename T, typename... ParamsT>
    #####:  174:  T getChecked(SMLoc loc, ParamsT &&...params) {
call    0 never executed
call    1 never executed
    #####:  175:    return T::getChecked([&] { return emitError(loc); },
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  176:                         std::forward<ParamsT>(params)...);
call    0 never executed
call    1 never executed
        -:  177:  }
        -:  178:
        -:  179:  ParseResult parseFunctionResultTypes(SmallVectorImpl<Type> &elements);
        -:  180:  ParseResult parseTypeListNoParens(SmallVectorImpl<Type> &elements);
        -:  181:  ParseResult parseTypeListParens(SmallVectorImpl<Type> &elements);
        -:  182:
        -:  183:  /// Optionally parse a type.
        -:  184:  OptionalParseResult parseOptionalType(Type &type);
        -:  185:
        -:  186:  /// Parse an arbitrary type.
        -:  187:  Type parseType();
        -:  188:
        -:  189:  /// Parse a complex type.
        -:  190:  Type parseComplexType();
        -:  191:
        -:  192:  /// Parse an extended type.
        -:  193:  Type parseExtendedType();
        -:  194:
        -:  195:  /// Parse a function type.
        -:  196:  Type parseFunctionType();
        -:  197:
        -:  198:  /// Parse a memref type.
        -:  199:  Type parseMemRefType();
        -:  200:
        -:  201:  /// Parse a non function type.
        -:  202:  Type parseNonFunctionType();
        -:  203:
        -:  204:  /// Parse a tensor type.
        -:  205:  Type parseTensorType();
        -:  206:
        -:  207:  /// Parse a tuple type.
        -:  208:  Type parseTupleType();
        -:  209:
        -:  210:  /// Parse a vector type.
        -:  211:  VectorType parseVectorType();
        -:  212:  ParseResult parseVectorDimensionList(SmallVectorImpl<int64_t> &dimensions,
        -:  213:                                       unsigned &numScalableDims);
        -:  214:  ParseResult parseDimensionListRanked(SmallVectorImpl<int64_t> &dimensions,
        -:  215:                                       bool allowDynamic = true,
        -:  216:                                       bool withTrailingX = true);
        -:  217:  ParseResult parseIntegerInDimensionList(int64_t &value);
        -:  218:  ParseResult parseXInDimensionList();
        -:  219:
        -:  220:  //===--------------------------------------------------------------------===//
        -:  221:  // Attribute Parsing
        -:  222:  //===--------------------------------------------------------------------===//
        -:  223:
        -:  224:  /// Parse an arbitrary attribute with an optional type.
        -:  225:  Attribute parseAttribute(Type type = {});
        -:  226:
        -:  227:  /// Parse an optional attribute with the provided type.
        -:  228:  OptionalParseResult parseOptionalAttribute(Attribute &attribute,
        -:  229:                                             Type type = {});
        -:  230:  OptionalParseResult parseOptionalAttribute(ArrayAttr &attribute, Type type);
        -:  231:  OptionalParseResult parseOptionalAttribute(StringAttr &attribute, Type type);
        -:  232:
        -:  233:  /// Parse an optional attribute that is demarcated by a specific token.
        -:  234:  template <typename AttributeT>
    3756*:  235:  OptionalParseResult parseOptionalAttributeWithToken(Token::Kind kind,
        -:  236:                                                      AttributeT &attr,
        -:  237:                                                      Type type = {}) {
    3756*:  238:    if (getToken().isNot(kind))
     939*:  239:      return llvm::None;
        -:  240:
    2817*:  241:    if (Attribute parsedAttr = parseAttribute(type)) {
    2817*:  242:      attr = parsedAttr.cast<AttributeT>();
    2817*:  243:      return success();
        -:  244:    }
    #####:  245:    return failure();
        -:  246:  }
        -:  247:
        -:  248:  /// Parse an attribute dictionary.
        -:  249:  ParseResult parseAttributeDict(NamedAttrList &attributes);
        -:  250:
        -:  251:  /// Parse an extended attribute.
        -:  252:  Attribute parseExtendedAttr(Type type);
        -:  253:
        -:  254:  /// Parse a float attribute.
        -:  255:  Attribute parseFloatAttr(Type type, bool isNegative);
        -:  256:
        -:  257:  /// Parse a decimal or a hexadecimal literal, which can be either an integer
        -:  258:  /// or a float attribute.
        -:  259:  Attribute parseDecOrHexAttr(Type type, bool isNegative);
        -:  260:
        -:  261:  /// Parse a dense elements attribute.
        -:  262:  Attribute parseDenseElementsAttr(Type attrType);
        -:  263:  ShapedType parseElementsLiteralType(Type type);
        -:  264:
        -:  265:  /// Parse a dense resource elements attribute.
        -:  266:  Attribute parseDenseResourceElementsAttr(Type attrType);
        -:  267:
        -:  268:  /// Parse a DenseArrayAttr.
        -:  269:  Attribute parseDenseArrayAttr(Type type);
        -:  270:
        -:  271:  /// Parse a sparse elements attribute.
        -:  272:  Attribute parseSparseElementsAttr(Type attrType);
        -:  273:
        -:  274:  /// Parse a strided layout attribute.
        -:  275:  Attribute parseStridedLayoutAttr();
        -:  276:
        -:  277:  //===--------------------------------------------------------------------===//
        -:  278:  // Location Parsing
        -:  279:  //===--------------------------------------------------------------------===//
        -:  280:
        -:  281:  /// Parse a raw location instance.
        -:  282:  ParseResult parseLocationInstance(LocationAttr &loc);
        -:  283:
        -:  284:  /// Parse a callsite location instance.
        -:  285:  ParseResult parseCallSiteLocation(LocationAttr &loc);
        -:  286:
        -:  287:  /// Parse a fused location instance.
        -:  288:  ParseResult parseFusedLocation(LocationAttr &loc);
        -:  289:
        -:  290:  /// Parse a name or FileLineCol location instance.
        -:  291:  ParseResult parseNameOrFileLineColLocation(LocationAttr &loc);
        -:  292:
        -:  293:  //===--------------------------------------------------------------------===//
        -:  294:  // Affine Parsing
        -:  295:  //===--------------------------------------------------------------------===//
        -:  296:
        -:  297:  /// Parse a reference to either an affine map, or an integer set.
        -:  298:  ParseResult parseAffineMapOrIntegerSetReference(AffineMap &map,
        -:  299:                                                  IntegerSet &set);
        -:  300:  ParseResult parseAffineMapReference(AffineMap &map);
        -:  301:  ParseResult parseIntegerSetReference(IntegerSet &set);
        -:  302:
        -:  303:  /// Parse an AffineMap where the dim and symbol identifiers are SSA ids.
        -:  304:  ParseResult
        -:  305:  parseAffineMapOfSSAIds(AffineMap &map,
        -:  306:                         function_ref<ParseResult(bool)> parseElement,
        -:  307:                         Delimiter delimiter);
        -:  308:
        -:  309:  /// Parse an AffineExpr where dim and symbol identifiers are SSA ids.
        -:  310:  ParseResult
        -:  311:  parseAffineExprOfSSAIds(AffineExpr &expr,
        -:  312:                          function_ref<ParseResult(bool)> parseElement);
        -:  313:
        -:  314:  //===--------------------------------------------------------------------===//
        -:  315:  // Code Completion
        -:  316:  //===--------------------------------------------------------------------===//
        -:  317:
        -:  318:  /// The set of various code completion methods. Every completion method
        -:  319:  /// returns `failure` to signal that parsing should abort after any desired
        -:  320:  /// completions have been enqueued. Note that `failure` is does not mean
        -:  321:  /// completion failed, it's just a signal to the parser to stop.
        -:  322:
        -:  323:  ParseResult codeCompleteDialectName();
        -:  324:  ParseResult codeCompleteOperationName(StringRef dialectName);
        -:  325:  ParseResult codeCompleteDialectOrElidedOpName(SMLoc loc);
        -:  326:  ParseResult codeCompleteStringDialectOrOperationName(StringRef name);
        -:  327:  ParseResult codeCompleteExpectedTokens(ArrayRef<StringRef> tokens);
        -:  328:  ParseResult codeCompleteOptionalTokens(ArrayRef<StringRef> tokens);
        -:  329:
        -:  330:  Attribute codeCompleteAttribute();
        -:  331:  Type codeCompleteType();
        -:  332:  Attribute
        -:  333:  codeCompleteDialectSymbol(const llvm::StringMap<Attribute> &aliases);
        -:  334:  Type codeCompleteDialectSymbol(const llvm::StringMap<Type> &aliases);
        -:  335:
        -:  336:protected:
        -:  337:  /// The Parser is subclassed and reinstantiated.  Do not add additional
        -:  338:  /// non-trivial state here, add it to the ParserState class.
        -:  339:  ParserState &state;
        -:  340:};
        -:  341:} // namespace detail
        -:  342:} // namespace mlir
        -:  343:
        -:  344:#endif // MLIR_LIB_ASMPARSER_PARSER_H
