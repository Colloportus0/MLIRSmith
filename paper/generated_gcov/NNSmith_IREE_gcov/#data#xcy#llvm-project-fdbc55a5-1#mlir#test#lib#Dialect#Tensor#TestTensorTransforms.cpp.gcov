        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Tensor/TestTensorTransforms.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Tensor/CMakeFiles/MLIRTensorTestPasses.dir/TestTensorTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Tensor/CMakeFiles/MLIRTensorTestPasses.dir/TestTensorTransforms.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestTensorTransforms.cpp - Test Tensor transformation patterns -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements logic for testing Tensor transformations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   15:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   16:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   17:#include "mlir/Dialect/Tensor/Transforms/TransformUtils.h"
        -:   18:#include "mlir/Dialect/Tensor/Transforms/Transforms.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:namespace {
        -:   25:struct TestTensorTransforms
        -:   26:    : public PassWrapper<TestTensorTransforms, OperationPass<>> {
function _ZN12_GLOBAL__N_120TestTensorTransforms13resolveTypeIDEv called 326578 returned 100% blocks executed 100%
   326578:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestTensorTransforms)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:
function _ZN12_GLOBAL__N_120TestTensorTransformsC2Ev called 326578 returned 100% blocks executed 100%
   326578:   29:  TestTensorTransforms() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
function _ZN12_GLOBAL__N_120TestTensorTransformsC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   30:  TestTensorTransforms(const TestTensorTransforms &pass) : PassWrapper(pass) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   31:
function _ZNK12_GLOBAL__N_120TestTensorTransforms20getDependentDialectsERN4mlir15DialectRegistryE called 1018 returned 100% blocks executed 100%
     1018:   32:  void getDependentDialects(DialectRegistry &registry) const override {
     1018:   33:    registry
     1018:   34:        .insert<arith::ArithDialect, scf::SCFDialect, linalg::LinalgDialect>();
call    0 returned 100%
     1018:   35:  }
        -:   36:
function _ZNK12_GLOBAL__N_120TestTensorTransforms11getArgumentEv called 325596 returned 100% blocks executed 100%
   325596:   37:  StringRef getArgument() const final {
   325596:   38:    return "test-tensor-transform-patterns";
        -:   39:  }
function _ZNK12_GLOBAL__N_120TestTensorTransforms14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   40:  StringRef getDescription() const final {
   325560:   41:    return "Test Tensor transformation patterns by applying them greedily.";
        -:   42:  }
        -:   43:
        -:   44:  void runOnOperation() override;
        -:   45:
        -:   46:  Option<bool> testSplitPaddingPatterns{
        -:   47:      *this, "test-split-padding-patterns",
        -:   48:      llvm::cl::desc("Test patterns to split tensor.pad ops"),
        -:   49:      llvm::cl::init(false)};
        -:   50:
        -:   51:  Option<bool> testFoldConstantExtractSlice{
        -:   52:      *this, "test-fold-constant-extract-slice",
        -:   53:      llvm::cl::desc("Test folding arith.constant and tensor.extract_slice"),
        -:   54:      llvm::cl::init(false)};
        -:   55:
        -:   56:  Option<bool> testFoldConsecutiveInsertExtractSlice{
        -:   57:      *this, "test-fold-consecutive-insert-extract-slice",
        -:   58:      llvm::cl::desc(
        -:   59:          "Test folding consecutive tensor.insert_slice/tensor.extract_slice"),
        -:   60:      llvm::cl::init(false)};
        -:   61:
        -:   62:  Option<bool> testRewriteExtractSliceWithTiledCollapseShape{
        -:   63:      *this, "test-rewrite-extract-slice-from-collapse-shape",
        -:   64:      llvm::cl::desc("Test swapping tensor.extract_slice of a collapse_shape "
        -:   65:                     "with loop nest"),
        -:   66:      llvm::cl::init(false)};
        -:   67:
        -:   68:  Option<bool> useForeach{
        -:   69:      *this, "use-foreach",
        -:   70:      llvm::cl::desc(
        -:   71:          "Use the scf.foreach_thread operation when generating loop nests for "
        -:   72:          "the extract_slice of collapse_shape pattern"),
        -:   73:      llvm::cl::init(false)};
        -:   74:};
        -:   75:} // namespace
        -:   76:
function _ZL25applySplitPaddingPatternsPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   77:static void applySplitPaddingPatterns(Operation *rootOp) {
    #####:   78:  RewritePatternSet patterns(rootOp->getContext());
call    0 never executed
call    1 never executed
    #####:   79:  tensor::populateSplitPaddingPatterns(patterns);
call    0 never executed
call    1 never executed
    #####:   80:  (void)applyPatternsAndFoldGreedily(rootOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   81:}
        -:   82:
function _ZL37applyFoldConstantExtractSlicePatternsPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   83:static void applyFoldConstantExtractSlicePatterns(Operation *rootOp) {
    #####:   84:  RewritePatternSet patterns(rootOp->getContext());
call    0 never executed
call    1 never executed
    #####:   85:  tensor::ControlConstantExtractSliceFusionFn controlFn =
function _ZZL37applyFoldConstantExtractSlicePatternsPN4mlir9OperationEENKUlNS_6tensor14ExtractSliceOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   86:      [](tensor::ExtractSliceOp op) {
    #####:   87:        if (!op.getSource().hasOneUse())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:          return false;
        -:   89:
    #####:   90:        auto resultType = op.getResult().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   91:        constexpr int64_t kConstantFoldingMaxNumElements = 1024;
    #####:   92:        return resultType.getNumElements() <= kConstantFoldingMaxNumElements;
call    0 never executed
    #####:   93:      };
call    0 never executed
call    1 never executed
        -:   94:
    #####:   95:  tensor::populateFoldConstantExtractSlicePatterns(patterns, controlFn);
call    0 never executed
    #####:   96:  (void)applyPatternsAndFoldGreedily(rootOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   97:}
        -:   98:
function _ZL46applyFoldConsecutiveInsertExtractSlicePatternsPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   99:static void applyFoldConsecutiveInsertExtractSlicePatterns(Operation *rootOp) {
    #####:  100:  RewritePatternSet patterns(rootOp->getContext());
call    0 never executed
call    1 never executed
    #####:  101:  tensor::populateMergeConsecutiveInsertExtractSlicePatterns(patterns);
call    0 never executed
    #####:  102:  (void)applyPatternsAndFoldGreedily(rootOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  103:}
        -:  104:
        -:  105:namespace {
        -:  106:/// Base pattern to rewrite  a `tensor.collapse_shape -> tensor.extract_slice`.
        -:  107:/// The `tensor.extract_slice` is replaced by a loop or gather operation that
        -:  108:/// stitches together the desired tile from slices of the source of the collapse
        -:  109:/// shape op.
        -:  110:struct RewriteExtractSliceFromCollapseShapeBase
        -:  111:    : public OpRewritePattern<tensor::ExtractSliceOp> {
function _ZN12_GLOBAL__N_140RewriteExtractSliceFromCollapseShapeBaseC2EPN4mlir11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  112:  RewriteExtractSliceFromCollapseShapeBase(MLIRContext *context)
    #####:  113:      : mlir::OpRewritePattern<tensor::ExtractSliceOp>(context) {}
call    0 never executed
call    1 never executed
        -:  114:
        -:  115:  /// Emit a loop or gather operation that uses `helper` to take each point in
        -:  116:  /// the parallel iteration space bounds, extract a slice from the source
        -:  117:  /// tensor and insert it into `dest`. For examples, see below for `scf.for`
        -:  118:  /// and `scf.foreach`.
        -:  119:  virtual LogicalResult
        -:  120:  emitReplacement(tensor::ExtractSliceOp op, Value dest,
        -:  121:                  tensor::ExtractSliceFromCollapseHelper &helper,
        -:  122:                  PatternRewriter &rewriter) const = 0;
        -:  123:
function _ZNK12_GLOBAL__N_140RewriteExtractSliceFromCollapseShapeBase15matchAndRewriteEN4mlir6tensor14ExtractSliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  124:  LogicalResult matchAndRewrite(tensor::ExtractSliceOp op,
        -:  125:                                PatternRewriter &rewriter) const override {
    #####:  126:    auto collapseOp = op.getSource().getDefiningOp<tensor::CollapseShapeOp>();
call    0 never executed
call    1 never executed
    #####:  127:    if (!collapseOp)
branch  0 never executed
branch  1 never executed
    #####:  128:      return rewriter.notifyMatchFailure(
    #####:  129:          op, "producer is not a tensor.collapse_shape op");
call    0 never executed
        -:  130:
        -:  131:    // Try to simplify the collapse shape using a rank-reducing slice, if
        -:  132:    // possible.
    #####:  133:    FailureOr<Operation *> simplifiedCollapseShapeResult =
        -:  134:        tensor::simplifyCollapseShapeWithRankReducingExtractSlice(collapseOp,
    #####:  135:                                                                  rewriter);
call    0 never executed
    #####:  136:    if (succeeded(simplifiedCollapseShapeResult)) {
branch  0 never executed
branch  1 never executed
    #####:  137:      auto newCollapseOp =
call    0 never executed
    #####:  138:          dyn_cast<tensor::CollapseShapeOp>(*simplifiedCollapseShapeResult);
call    0 never executed
        -:  139:      // The collapse shape op might have been simplified away, so we can just
        -:  140:      // return.
    #####:  141:      if (!newCollapseOp)
branch  0 never executed
branch  1 never executed
    #####:  142:        return success();
    #####:  143:      collapseOp = newCollapseOp;
        -:  144:    }
        -:  145:
        -:  146:    // Materialize the output shape values of the slice operation.
    #####:  147:    ReifiedRankedShapedTypeDims reifiedShapes;
call    0 never executed
    #####:  148:    if (failed(op.reifyResultShapes(rewriter, reifiedShapes)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:      return rewriter.notifyMatchFailure(op, "failed to reify result shapes");
call    0 never executed
        -:  150:
        -:  151:    // Create the destination tensor using the above values.
    #####:  152:    Type elementType = op.getSourceType().getElementType();
call    0 never executed
call    1 never executed
    #####:  153:    SmallVector<OpFoldResult> outputShape = getAsOpFoldResult(reifiedShapes[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  154:    Value dest = rewriter.create<tensor::EmptyOp>(op->getLoc(), outputShape,
    #####:  155:                                                  elementType);
call    0 never executed
call    1 never executed
        -:  156:
        -:  157:    // Calculate the parameters for the tile loop nest.
    #####:  158:    FailureOr<tensor::ExtractSliceFromCollapseHelper> params =
        -:  159:        tensor::ExtractSliceFromCollapseHelper::create(rewriter, collapseOp,
    #####:  160:                                                       op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  161:    if (failed(params))
branch  0 never executed
branch  1 never executed
    #####:  162:      return rewriter.notifyMatchFailure(
    #####:  163:          op, "could not calculate tiling parameters");
call    0 never executed
    #####:  164:    return emitReplacement(op, dest, *params, rewriter);
call    0 never executed
        -:  165:  }
        -:  166:};
        -:  167:
        -:  168:struct RewriteExtractSliceFromCollapseShapeUsingScfFor
        -:  169:    : public RewriteExtractSliceFromCollapseShapeBase {
        -:  170:  RewriteExtractSliceFromCollapseShapeUsingScfFor(MLIRContext *context)
        -:  171:      : RewriteExtractSliceFromCollapseShapeBase(context) {}
function _ZNK12_GLOBAL__N_147RewriteExtractSliceFromCollapseShapeUsingScfFor15emitReplacementEN4mlir6tensor14ExtractSliceOpENS1_5ValueERNS2_30ExtractSliceFromCollapseHelperERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  172:  LogicalResult emitReplacement(tensor::ExtractSliceOp op, Value dest,
        -:  173:                                tensor::ExtractSliceFromCollapseHelper &helper,
        -:  174:                                PatternRewriter &rewriter) const override {
    #####:  175:    Location loc = op.getLoc();
call    0 never executed
    #####:  176:    const unsigned numTiledDims = helper.getIterationSpaceSizes().size();
call    0 never executed
    #####:  177:    auto zero = rewriter.create<arith::ConstantIndexOp>(loc, 0);
call    0 never executed
    #####:  178:    auto one = rewriter.create<arith::ConstantIndexOp>(loc, 1);
call    0 never executed
    #####:  179:    SmallVector<Value> lbs(numTiledDims, zero);
call    0 never executed
    #####:  180:    SmallVector<Value> steps(numTiledDims, one);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  181:
        -:  182:    // Below, we pass out the result of the loop body builder lambda via the
        -:  183:    // `insertResult` variable. In certain cases, no loops will be created, but
        -:  184:    // the body builder will still execute. In this case, the results will not
        -:  185:    // be passed to the LoopNest object.
        -:  186:    // TODO: remove this workaround if `scf::buildLoopNest` behavior is updated.
    #####:  187:    Value insertResult = nullptr;
    #####:  188:    scf::LoopNest nest = scf::buildLoopNest(
        -:  189:        rewriter, loc, lbs, helper.getIterationSpaceSizes(), steps, dest,
function _ZZNK12_GLOBAL__N_147RewriteExtractSliceFromCollapseShapeUsingScfFor15emitReplacementEN4mlir6tensor14ExtractSliceOpENS1_5ValueERNS2_30ExtractSliceFromCollapseHelperERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeESC_E_clESA_SB_SC_SC_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  190:        [&](OpBuilder &nestedBuilder, Location loc, ValueRange outputIvs,
        -:  191:            ValueRange iterArgs) -> scf::ValueVector {
    #####:  192:          auto [tile, insertParams] =
call    0 never executed
    #####:  193:              helper.emitLoopNestBody(nestedBuilder, loc, outputIvs);
call    0 never executed
call    1 never executed
        -:  194:
        -:  195:          // Insert the slice into the destination.
    #####:  196:          insertResult = nestedBuilder.create<tensor::InsertSliceOp>(
call    0 never executed
    #####:  197:              loc, tile, iterArgs[0], insertParams);
call    0 never executed
call    1 never executed
    #####:  198:          return {insertResult};
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:        });
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  200:
    #####:  201:    if (!nest.loops.empty())
branch  0 never executed
branch  1 never executed
    #####:  202:      rewriter.replaceOp(op, nest.getResults());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  203:    else
    #####:  204:      rewriter.replaceOp(op, insertResult);
call    0 never executed
call    1 never executed
        -:  205:
    #####:  206:    return success();
branch  0 never executed
branch  1 never executed
        -:  207:  }
        -:  208:};
        -:  209:
        -:  210:struct RewriteExtractSliceFromCollapseShapeUsingScfForeach
        -:  211:    : public RewriteExtractSliceFromCollapseShapeBase {
        -:  212:  RewriteExtractSliceFromCollapseShapeUsingScfForeach(MLIRContext *context)
        -:  213:      : RewriteExtractSliceFromCollapseShapeBase(context) {}
function _ZNK12_GLOBAL__N_151RewriteExtractSliceFromCollapseShapeUsingScfForeach15emitReplacementEN4mlir6tensor14ExtractSliceOpENS1_5ValueERNS2_30ExtractSliceFromCollapseHelperERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  214:  LogicalResult emitReplacement(tensor::ExtractSliceOp op, Value dest,
        -:  215:                                tensor::ExtractSliceFromCollapseHelper &helper,
        -:  216:                                PatternRewriter &rewriter) const override {
    #####:  217:    Location loc = op.getLoc();
call    0 never executed
    #####:  218:    auto foreachOp = rewriter.create<scf::ForeachThreadOp>(
        -:  219:        loc, /*outputs=*/dest, /*numThreads=*/helper.getIterationSpaceSizes(),
    #####:  220:        /*threadDimMapping=*/ArrayRef<int64_t>{},
function _ZZNK12_GLOBAL__N_151RewriteExtractSliceFromCollapseShapeUsingScfForeach15emitReplacementEN4mlir6tensor14ExtractSliceOpENS1_5ValueERNS2_30ExtractSliceFromCollapseHelperERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clESA_SB_SC_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  221:        [&](OpBuilder &nestedBuilder, Location loc, ValueRange regionArgs) {
    #####:  222:          unsigned numThreadIdRegionArgs =
    #####:  223:              helper.getIterationSpaceSizes().size();
call    0 never executed
    #####:  224:          unsigned numOutputRegionArgs =
    #####:  225:              regionArgs.size() - numThreadIdRegionArgs;
call    0 never executed
    #####:  226:          ValueRange outputIvs = regionArgs.take_front(numThreadIdRegionArgs);
call    0 never executed
    #####:  227:          ValueRange outputArgs = regionArgs.take_back(numOutputRegionArgs);
branch  0 never executed
branch  1 never executed
    #####:  228:          assert(outputArgs.size() == 1 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  229:                 "there should only be one output region argument");
    #####:  230:          auto [tile, insertParams] =
call    0 never executed
    #####:  231:              helper.emitLoopNestBody(nestedBuilder, loc, outputIvs);
call    0 never executed
call    1 never executed
        -:  232:          // Insert the slice into the destination.
    #####:  233:          auto term = nestedBuilder.create<scf::PerformConcurrentlyOp>(loc);
call    0 never executed
    #####:  234:          nestedBuilder.setInsertionPointToStart(term.getBody());
call    0 never executed
call    1 never executed
    #####:  235:          nestedBuilder.create<tensor::ParallelInsertSliceOp>(
    #####:  236:              loc, tile, outputArgs[0], insertParams);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  237:        });
call    0 never executed
    #####:  238:    rewriter.replaceOp(op, foreachOp->getResult(0));
call    0 never executed
call    1 never executed
    #####:  239:    return success();
        -:  240:  }
        -:  241:};
        -:  242:} // namespace
        -:  243:
        -:  244:static LogicalResult
function _ZL44applyRewriteExtractFromCollapseShapePatternsPN4mlir9OperationEb called 0 returned 0% blocks executed 0%
    #####:  245:applyRewriteExtractFromCollapseShapePatterns(Operation *rootOp,
        -:  246:                                             bool useForeach) {
    #####:  247:  RewritePatternSet patterns(rootOp->getContext());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  248:  if (useForeach)
branch  0 never executed
branch  1 never executed
    #####:  249:    patterns.add<RewriteExtractSliceFromCollapseShapeUsingScfForeach>(
call    0 never executed
    #####:  250:        rootOp->getContext());
call    0 never executed
        -:  251:  else
    #####:  252:    patterns.add<RewriteExtractSliceFromCollapseShapeUsingScfFor>(
call    0 never executed
    #####:  253:        rootOp->getContext());
call    0 never executed
    #####:  254:  return applyPatternsAndFoldGreedily(rootOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  255:}
        -:  256:
function _ZN12_GLOBAL__N_120TestTensorTransforms14runOnOperationEv called 833 returned 100% blocks executed 46%
      833:  257:void TestTensorTransforms::runOnOperation() {
      833:  258:  Operation *rootOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      833:  259:  if (testSplitPaddingPatterns)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  260:    applySplitPaddingPatterns(rootOp);
call    0 never executed
      833:  261:  if (testFoldConstantExtractSlice)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  262:    applyFoldConstantExtractSlicePatterns(rootOp);
call    0 never executed
      833:  263:  if (testFoldConsecutiveInsertExtractSlice)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  264:    applyFoldConsecutiveInsertExtractSlicePatterns(rootOp);
call    0 never executed
      833:  265:  if (testRewriteExtractSliceWithTiledCollapseShape) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  266:    if (failed(
branch  0 never executed
branch  1 never executed
    #####:  267:            applyRewriteExtractFromCollapseShapePatterns(rootOp, useForeach)))
call    0 never executed
    #####:  268:      return signalPassFailure();
call    0 never executed
        -:  269:  }
        -:  270:}
        -:  271:
        -:  272:namespace mlir {
        -:  273:namespace test {
function _ZN4mlir4test28registerTestTensorTransformsEv called 325560 returned 100% blocks executed 100%
   325560:  274:void registerTestTensorTransforms() {
   325560:  275:  PassRegistration<TestTensorTransforms>();
call    0 returned 100%
   325560:  276:}
        -:  277:} // namespace test
        -:  278:} // namespace mlir
