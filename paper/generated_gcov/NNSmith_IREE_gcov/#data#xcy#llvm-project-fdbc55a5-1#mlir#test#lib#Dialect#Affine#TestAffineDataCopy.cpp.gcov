        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Affine/TestAffineDataCopy.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestAffineDataCopy.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestAffineDataCopy.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestAffineDataCopy.cpp - Test affine data copy utility -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to test affine data copy utility functions and
        -:   10:// options.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   21:#include "mlir/Transforms/Passes.h"
        -:   22:
        -:   23:#define PASS_NAME "test-affine-data-copy"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:namespace {
        -:   28:
        -:   29:struct TestAffineDataCopy
        -:   30:    : public PassWrapper<TestAffineDataCopy, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_118TestAffineDataCopy13resolveTypeIDEv called 325560 returned 100% blocks executed 100%
   325560:   31:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestAffineDataCopy)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   32:
function _ZNK12_GLOBAL__N_118TestAffineDataCopy11getArgumentEv called 325560 returned 100% blocks executed 100%
   325560:   33:  StringRef getArgument() const final { return PASS_NAME; }
function _ZNK12_GLOBAL__N_118TestAffineDataCopy14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   34:  StringRef getDescription() const final {
   325560:   35:    return "Tests affine data copy utility functions.";
        -:   36:  }
function _ZN12_GLOBAL__N_118TestAffineDataCopyC2Ev called 325560 returned 100% blocks executed 100%
   325560:   37:  TestAffineDataCopy() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN12_GLOBAL__N_118TestAffineDataCopyC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   38:  TestAffineDataCopy(const TestAffineDataCopy &pass) : PassWrapper(pass){};
call    0 never executed
call    1 never executed
call    2 never executed
        -:   39:
function _ZNK12_GLOBAL__N_118TestAffineDataCopy20getDependentDialectsERN4mlir15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:   40:  void getDependentDialects(DialectRegistry &registry) const override {
    #####:   41:    registry.insert<memref::MemRefDialect>();
call    0 never executed
    #####:   42:  }
        -:   43:  void runOnOperation() override;
        -:   44:
        -:   45:private:
        -:   46:  Option<bool> clMemRefFilter{
        -:   47:      *this, "memref-filter",
        -:   48:      llvm::cl::desc(
        -:   49:          "Enable memref filter testing in affine data copy optimization"),
        -:   50:      llvm::cl::init(false)};
        -:   51:  Option<bool> clTestGenerateCopyForMemRegion{
        -:   52:      *this, "for-memref-region",
        -:   53:      llvm::cl::desc("Test copy generation for a single memref region"),
        -:   54:      llvm::cl::init(false)};
        -:   55:};
        -:   56:
        -:   57:} // namespace
        -:   58:
function _ZN12_GLOBAL__N_118TestAffineDataCopy14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   59:void TestAffineDataCopy::runOnOperation() {
        -:   60:  // Gather all AffineForOps by loop depth.
    #####:   61:  std::vector<SmallVector<AffineForOp, 2>> depthToLoops;
call    0 never executed
    #####:   62:  gatherLoops(getOperation(), depthToLoops);
call    0 never executed
call    1 never executed
    #####:   63:  assert(!depthToLoops.empty() && "Loop nest not found");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   64:
        -:   65:  // Only support tests with a single loop nest and a single innermost loop
        -:   66:  // for now.
    #####:   67:  unsigned innermostLoopIdx = depthToLoops.size() - 1;
branch  0 never executed
branch  1 never executed
    #####:   68:  if (depthToLoops[0].size() != 1 || depthToLoops[innermostLoopIdx].size() != 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:    return;
        -:   70:
    #####:   71:  auto loopNest = depthToLoops[0][0];
branch  0 never executed
branch  1 never executed
    #####:   72:  auto innermostLoop = depthToLoops[innermostLoopIdx][0];
    #####:   73:  AffineLoadOp load;
branch  0 never executed
branch  1 never executed
    #####:   74:  if (clMemRefFilter || clTestGenerateCopyForMemRegion) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   75:    // Gather MemRef filter. For simplicity, we use the first loaded memref
        -:   76:    // found in the innermost loop.
    #####:   77:    for (auto &op : *innermostLoop.getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   78:      if (auto ld = dyn_cast<AffineLoadOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:        load = ld;
    #####:   80:        break;
        -:   81:      }
        -:   82:    }
        -:   83:  }
    #####:   84:  if (!load)
branch  0 never executed
branch  1 never executed
        -:   85:    return;
        -:   86:
    #####:   87:  AffineCopyOptions copyOptions = {/*generateDma=*/false,
        -:   88:                                   /*slowMemorySpace=*/0,
        -:   89:                                   /*fastMemorySpace=*/0,
        -:   90:                                   /*tagMemorySpace=*/0,
        -:   91:                                   /*fastMemCapacityBytes=*/32 * 1024 * 1024UL};
    #####:   92:  DenseSet<Operation *> copyNests;
call    0 never executed
call    1 never executed
    #####:   93:  if (clMemRefFilter) {
branch  0 never executed
branch  1 never executed
    #####:   94:    if (failed(affineDataCopyGenerate(loopNest, copyOptions, load.getMemRef(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   95:                                      copyNests)))
    #####:   96:      return;
call    0 never executed
    #####:   97:  } else if (clTestGenerateCopyForMemRegion) {
branch  0 never executed
branch  1 never executed
    #####:   98:    CopyGenerateResult result;
    #####:   99:    MemRefRegion region(loopNest.getLoc());
call    0 never executed
    #####:  100:    if (failed(region.compute(load, /*loopDepth=*/0)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:      return;
    #####:  102:    if (failed(generateCopyForMemRegion(region, loopNest, copyOptions, result)))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  103:      return;
        -:  104:  }
        -:  105:
        -:  106:  // Promote any single iteration loops in the copy nests and simplify
        -:  107:  // load/stores.
    #####:  108:  SmallVector<Operation *, 4> copyOps;
call    0 never executed
call    1 never executed
    #####:  109:  for (Operation *nest : copyNests) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  110:    // With a post order walk, the erasure of loops does not affect
        -:  111:    // continuation of the walk or the collection of load/store ops.
function _ZZN12_GLOBAL__N_118TestAffineDataCopy14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  112:    nest->walk([&](Operation *op) {
call    0 never executed
call    1 never executed
    #####:  113:      if (auto forOp = dyn_cast<AffineForOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  114:        (void)promoteIfSingleIteration(forOp);
call    0 never executed
    #####:  115:      else if (auto loadOp = dyn_cast<AffineLoadOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:        copyOps.push_back(loadOp);
call    0 never executed
    #####:  117:      else if (auto storeOp = dyn_cast<AffineStoreOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:        copyOps.push_back(storeOp);
call    0 never executed
    #####:  119:    });
        -:  120:  }
        -:  121:
        -:  122:  // Promoting single iteration loops could lead to simplification of
        -:  123:  // generated load's/store's, and the latter could anyway also be
        -:  124:  // canonicalized.
    #####:  125:  RewritePatternSet patterns(&getContext());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:  for (Operation *op : copyOps) {
branch  0 never executed
branch  1 never executed
    #####:  127:    patterns.clear();
call    0 never executed
    #####:  128:    if (isa<AffineLoadOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:      AffineLoadOp::getCanonicalizationPatterns(patterns, &getContext());
call    0 never executed
call    1 never executed
        -:  130:    } else {
    #####:  131:      assert(isa<AffineStoreOp>(op) && "expected affine store op");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  132:      AffineStoreOp::getCanonicalizationPatterns(patterns, &getContext());
call    0 never executed
call    1 never executed
        -:  133:    }
        -:  134:  }
    #####:  135:  (void)applyOpPatternsAndFold(copyOps, std::move(patterns), /*strict=*/true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  136:}
        -:  137:
        -:  138:namespace mlir {
function _ZN4mlir30registerTestAffineDataCopyPassEv called 325560 returned 100% blocks executed 100%
   325560:  139:void registerTestAffineDataCopyPass() {
   325560:  140:  PassRegistration<TestAffineDataCopy>();
call    0 returned 100%
   325560:  141:}
        -:  142:} // namespace mlir
