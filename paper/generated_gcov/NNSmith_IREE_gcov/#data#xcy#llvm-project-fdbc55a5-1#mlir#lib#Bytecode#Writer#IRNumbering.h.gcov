        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Bytecode/Writer/IRNumbering.h
        -:    0:Graph:../tools/mlir/lib/Bytecode/Writer/CMakeFiles/obj.MLIRBytecodeWriter.dir/BytecodeWriter.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Bytecode/Writer/CMakeFiles/obj.MLIRBytecodeWriter.dir/BytecodeWriter.cpp.gcda
        -:    0:Runs:325597
        -:    1://===- IRNumbering.h - MLIR bytecode IR numbering ---------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains various utilities that number IR structures in preparation
        -:   10:// for bytecode emission.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef LIB_MLIR_BYTECODE_WRITER_IRNUMBERING_H
        -:   15:#define LIB_MLIR_BYTECODE_WRITER_IRNUMBERING_H
        -:   16:
        -:   17:#include "mlir/IR/OpImplementation.h"
        -:   18:#include "llvm/ADT/MapVector.h"
        -:   19:#include "llvm/ADT/SetVector.h"
        -:   20:#include "llvm/ADT/StringMap.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:class BytecodeDialectInterface;
        -:   24:class BytecodeWriterConfig;
        -:   25:
        -:   26:namespace bytecode {
        -:   27:namespace detail {
        -:   28:struct DialectNumbering;
        -:   29:
        -:   30://===----------------------------------------------------------------------===//
        -:   31:// Attribute and Type Numbering
        -:   32://===----------------------------------------------------------------------===//
        -:   33:
        -:   34:/// This class represents a numbering entry for an Attribute or Type.
        -:   35:struct AttrTypeNumbering {
        -:   36:  AttrTypeNumbering(PointerUnion<Attribute, Type> value) : value(value) {}
        -:   37:
        -:   38:  /// The concrete value.
        -:   39:  PointerUnion<Attribute, Type> value;
        -:   40:
        -:   41:  /// The number assigned to this value.
        -:   42:  unsigned number = 0;
        -:   43:
        -:   44:  /// The number of references to this value.
        -:   45:  unsigned refCount = 1;
        -:   46:
        -:   47:  /// The dialect of this value.
        -:   48:  DialectNumbering *dialect = nullptr;
        -:   49:};
        -:   50:struct AttributeNumbering : public AttrTypeNumbering {
        -:   51:  AttributeNumbering(Attribute value) : AttrTypeNumbering(value) {}
    40705:   52:  Attribute getValue() const { return value.get<Attribute>(); }
call    0 returned 100%
        -:   53:};
        -:   54:struct TypeNumbering : public AttrTypeNumbering {
        -:   55:  TypeNumbering(Type value) : AttrTypeNumbering(value) {}
     7314:   56:  Type getValue() const { return value.get<Type>(); }
call    0 returned 100%
        -:   57:};
        -:   58:
        -:   59://===----------------------------------------------------------------------===//
        -:   60:// OpName Numbering
        -:   61://===----------------------------------------------------------------------===//
        -:   62:
        -:   63:/// This class represents the numbering entry of an operation name.
        -:   64:struct OpNameNumbering {
        -:   65:  OpNameNumbering(DialectNumbering *dialect, OperationName name)
        -:   66:      : dialect(dialect), name(name) {}
        -:   67:
        -:   68:  /// The dialect of this value.
        -:   69:  DialectNumbering *dialect;
        -:   70:
        -:   71:  /// The concrete name.
        -:   72:  OperationName name;
        -:   73:
        -:   74:  /// The number assigned to this name.
        -:   75:  unsigned number = 0;
        -:   76:
        -:   77:  /// The number of references to this name.
        -:   78:  unsigned refCount = 1;
        -:   79:};
        -:   80:
        -:   81://===----------------------------------------------------------------------===//
        -:   82:// Dialect Resource Numbering
        -:   83://===----------------------------------------------------------------------===//
        -:   84:
        -:   85:/// This class represents a numbering entry for a dialect resource.
    #####:   86:struct DialectResourceNumbering {
branch  0 never executed
branch  1 never executed
        -:   87:  DialectResourceNumbering(std::string key) : key(std::move(key)) {}
        -:   88:
        -:   89:  /// The key used to reference this resource.
        -:   90:  std::string key;
        -:   91:
        -:   92:  /// The number assigned to this resource.
        -:   93:  unsigned number = 0;
        -:   94:
        -:   95:  /// A flag indicating if this resource is only a declaration, not a full
        -:   96:  /// definition.
        -:   97:  bool isDeclaration = true;
        -:   98:};
        -:   99:
        -:  100://===----------------------------------------------------------------------===//
        -:  101:// Dialect Numbering
        -:  102://===----------------------------------------------------------------------===//
        -:  103:
        -:  104:/// This class represents a numbering entry for an Dialect.
     2469:  105:struct DialectNumbering {
call    0 returned 100%
call    1 returned 100%
        -:  106:  DialectNumbering(StringRef name, unsigned number)
        -:  107:      : name(name), number(number) {}
        -:  108:
        -:  109:  /// The namespace of the dialect.
        -:  110:  StringRef name;
        -:  111:
        -:  112:  /// The number assigned to the dialect.
        -:  113:  unsigned number;
        -:  114:
        -:  115:  /// The bytecode dialect interface of the dialect if defined.
        -:  116:  const BytecodeDialectInterface *interface = nullptr;
        -:  117:
        -:  118:  /// The asm dialect interface of the dialect if defined.
        -:  119:  const OpAsmDialectInterface *asmInterface = nullptr;
        -:  120:
        -:  121:  /// The referenced resources of this dialect.
        -:  122:  SetVector<AsmDialectResourceHandle> resources;
        -:  123:
        -:  124:  /// A mapping from resource key to the corresponding resource numbering entry.
        -:  125:  llvm::MapVector<StringRef, DialectResourceNumbering *> resourceMap;
        -:  126:};
        -:  127:
        -:  128://===----------------------------------------------------------------------===//
        -:  129:// IRNumberingState
        -:  130://===----------------------------------------------------------------------===//
        -:  131:
        -:  132:/// This class manages numbering IR entities in preparation of bytecode
        -:  133:/// emission.
        -:  134:class IRNumberingState {
        -:  135:public:
        -:  136:  IRNumberingState(Operation *op);
        -:  137:
        -:  138:  /// Return the numbered dialects.
     1608:  139:  auto getDialects() {
     1608:  140:    return llvm::make_pointee_range(llvm::make_second_range(dialects));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  141:  }
     1608:  142:  auto getAttributes() { return llvm::make_pointee_range(orderedAttrs); }
call    0 returned 100%
call    1 returned 100%
      804:  143:  auto getOpNames() { return llvm::make_pointee_range(orderedOpNames); }
call    0 returned 100%
     1608:  144:  auto getTypes() { return llvm::make_pointee_range(orderedTypes); }
call    0 returned 100%
call    1 returned 100%
        -:  145:
        -:  146:  /// Return the number for the given IR unit.
function _ZN4mlir8bytecode6detail16IRNumberingState9getNumberENS_9AttributeE called 62809 returned 100% blocks executed 100%
    62809:  147:  unsigned getNumber(Attribute attr) {
   62809*:  148:    assert(attrs.count(attr) && "attribute not numbered");
call    0 returned 100%
    62809:  149:    return attrs[attr]->number;
call    0 returned 100%
        -:  150:  }
function _ZN4mlir8bytecode6detail16IRNumberingState9getNumberEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:  151:  unsigned getNumber(Block *block) {
    #####:  152:    assert(blockIDs.count(block) && "block not numbered");
call    0 never executed
    #####:  153:    return blockIDs[block];
call    0 never executed
        -:  154:  }
function _ZN4mlir8bytecode6detail16IRNumberingState9getNumberENS_13OperationNameE called 10688 returned 100% blocks executed 100%
    10688:  155:  unsigned getNumber(OperationName opName) {
   10688*:  156:    assert(opNames.count(opName) && "opName not numbered");
call    0 returned 100%
    10688:  157:    return opNames[opName]->number;
call    0 returned 100%
        -:  158:  }
function _ZN4mlir8bytecode6detail16IRNumberingState9getNumberENS_4TypeE called 22515 returned 100% blocks executed 100%
    22515:  159:  unsigned getNumber(Type type) {
   22515*:  160:    assert(types.count(type) && "type not numbered");
call    0 returned 100%
    22515:  161:    return types[type]->number;
call    0 returned 100%
        -:  162:  }
function _ZN4mlir8bytecode6detail16IRNumberingState9getNumberENS_5ValueE called 11144 returned 100% blocks executed 100%
    11144:  163:  unsigned getNumber(Value value) {
   11144*:  164:    assert(valueIDs.count(value) && "value not numbered");
call    0 returned 100%
    11144:  165:    return valueIDs[value];
call    0 returned 100%
        -:  166:  }
function _ZN4mlir8bytecode6detail16IRNumberingState9getNumberERKNS_24AsmDialectResourceHandleE called 0 returned 0% blocks executed 0%
    #####:  167:  unsigned getNumber(const AsmDialectResourceHandle &resource) {
    #####:  168:    assert(dialectResources.count(resource) && "resource not numbered");
call    0 never executed
    #####:  169:    return dialectResources[resource]->number;
call    0 never executed
        -:  170:  }
        -:  171:
        -:  172:  /// Return the block and value counts of the given region.
function _ZN4mlir8bytecode6detail16IRNumberingState18getBlockValueCountEPNS_6RegionE called 1630 returned 100% blocks executed 100%
     1630:  173:  std::pair<unsigned, unsigned> getBlockValueCount(Region *region) {
    1630*:  174:    assert(regionBlockValueCounts.count(region) && "value not numbered");
call    0 returned 100%
     1630:  175:    return regionBlockValueCounts[region];
call    0 returned 100%
        -:  176:  }
        -:  177:
        -:  178:  /// Return the number of operations in the given block.
function _ZN4mlir8bytecode6detail16IRNumberingState17getOperationCountEPNS_5BlockE called 1630 returned 100% blocks executed 100%
     1630:  179:  unsigned getOperationCount(Block *block) {
    1630*:  180:    assert(blockOperationCounts.count(block) && "block not numbered");
call    0 returned 100%
     1630:  181:    return blockOperationCounts[block];
call    0 returned 100%
        -:  182:  }
        -:  183:
        -:  184:private:
        -:  185:  /// This class is used to provide a fake dialect writer for numbering nested
        -:  186:  /// attributes and types.
        -:  187:  struct NumberingDialectWriter;
        -:  188:
        -:  189:  /// Number the given IR unit for bytecode emission.
        -:  190:  void number(Attribute attr);
        -:  191:  void number(Block &block);
        -:  192:  DialectNumbering &numberDialect(Dialect *dialect);
        -:  193:  DialectNumbering &numberDialect(StringRef dialect);
        -:  194:  void number(Operation &op);
        -:  195:  void number(OperationName opName);
        -:  196:  void number(Region &region);
        -:  197:  void number(Type type);
        -:  198:
        -:  199:  /// Number the given dialect resources.
        -:  200:  void number(Dialect *dialect, ArrayRef<AsmDialectResourceHandle> resources);
        -:  201:
        -:  202:  /// Finalize the numberings of any dialect resources.
        -:  203:  void finalizeDialectResourceNumberings(Operation *rootOp);
        -:  204:
        -:  205:  /// Mapping from IR to the respective numbering entries.
        -:  206:  DenseMap<Attribute, AttributeNumbering *> attrs;
        -:  207:  DenseMap<OperationName, OpNameNumbering *> opNames;
        -:  208:  DenseMap<Type, TypeNumbering *> types;
        -:  209:  DenseMap<Dialect *, DialectNumbering *> registeredDialects;
        -:  210:  llvm::MapVector<StringRef, DialectNumbering *> dialects;
        -:  211:  std::vector<AttributeNumbering *> orderedAttrs;
        -:  212:  std::vector<OpNameNumbering *> orderedOpNames;
        -:  213:  std::vector<TypeNumbering *> orderedTypes;
        -:  214:
        -:  215:  /// A mapping from dialect resource handle to the numbering for the referenced
        -:  216:  /// resource.
        -:  217:  llvm::DenseMap<AsmDialectResourceHandle, DialectResourceNumbering *>
        -:  218:      dialectResources;
        -:  219:
        -:  220:  /// Allocators used for the various numbering entries.
        -:  221:  llvm::SpecificBumpPtrAllocator<AttributeNumbering> attrAllocator;
        -:  222:  llvm::SpecificBumpPtrAllocator<DialectNumbering> dialectAllocator;
        -:  223:  llvm::SpecificBumpPtrAllocator<OpNameNumbering> opNameAllocator;
        -:  224:  llvm::SpecificBumpPtrAllocator<DialectResourceNumbering> resourceAllocator;
        -:  225:  llvm::SpecificBumpPtrAllocator<TypeNumbering> typeAllocator;
        -:  226:
        -:  227:  /// The value ID for each Block and Value.
        -:  228:  DenseMap<Block *, unsigned> blockIDs;
        -:  229:  DenseMap<Value, unsigned> valueIDs;
        -:  230:
        -:  231:  /// The number of operations in each block.
        -:  232:  DenseMap<Block *, unsigned> blockOperationCounts;
        -:  233:
        -:  234:  /// A map from region to the number of blocks and values within that region.
        -:  235:  DenseMap<Region *, std::pair<unsigned, unsigned>> regionBlockValueCounts;
        -:  236:
        -:  237:  /// The next value ID to assign when numbering.
        -:  238:  unsigned nextValueID = 0;
        -:  239:};
        -:  240:} // namespace detail
        -:  241:} // namespace bytecode
        -:  242:} // namespace mlir
        -:  243:
        -:  244:#endif
