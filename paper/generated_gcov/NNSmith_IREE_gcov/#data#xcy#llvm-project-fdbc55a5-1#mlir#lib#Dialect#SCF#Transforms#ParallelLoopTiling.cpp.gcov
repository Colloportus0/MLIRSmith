        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/SCF/Transforms/ParallelLoopTiling.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ParallelLoopTiling.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ParallelLoopTiling.cpp.gcda
        -:    0:Runs:325550
        -:    1://===- ParallelLoopTiling.cpp - Tiles scf.parallel ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop tiling on parallel loops.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   17:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   18:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   19:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_SCFPARALLELLOOPTILING
        -:   23:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace mlir::scf;
        -:   28:
        -:   29:/// Tile a parallel loop of the form
        -:   30:///   scf.parallel (%i0, %i1) = (%arg0, %arg1) to (%arg2, %arg3)
        -:   31:///                                            step (%arg4, %arg5)
        -:   32:///
        -:   33:/// into
        -:   34:///   scf.parallel (%i0, %i1) = (%arg0, %arg1) to (%arg2, %arg3)
        -:   35:///                                            step (%arg4*tileSize[0],
        -:   36:///                                                  %arg5*tileSize[1])
        -:   37:///     scf.parallel (%j0, %j1) = (0, 0) to (min(%arg4*tileSize[0], %arg2-%i0)
        -:   38:///                                          min(%arg5*tileSize[1], %arg3-%i1))
        -:   39:///                                      step (%arg4, %arg5)
        -:   40:///
        -:   41:/// or, when no-min-max-bounds is true, into
        -:   42:///   scf.parallel (%i0, %i1) = (%arg0, %arg1) to (%arg2, %arg3)
        -:   43:///                                            step (%arg4*tileSize[0],
        -:   44:///                                                  %arg5*tileSize[1])
        -:   45:///     scf.parallel (%j0, %j1) = (0, 0) to (%arg4*tileSize[0],
        -:   46:///                                          %arg5*tileSize[1])
        -:   47:///                                      step (%arg4, %arg5)
        -:   48:///        %inbound = (%j0 * %arg4 + %i0 < %arg2) &&
        -:   49:///                   (%j1 * %arg5 + %i1 < %arg3)
        -:   50:///        scf.if (%inbound)
        -:   51:///          ....
        -:   52:///
        -:   53:/// where the uses of %i0 and %i1 in the loop body are replaced by
        -:   54:/// %i0 + j0 and %i1 + %j1.
        -:   55:///
        -:   56:/// The old loop is replaced with the new one.
        -:   57:std::pair<ParallelOp, ParallelOp>
function _ZN4mlir3scf16tileParallelLoopENS0_10ParallelOpEN4llvm8ArrayRefIlEEb called 0 returned 0% blocks executed 0%
    #####:   58:mlir::scf::tileParallelLoop(ParallelOp op, ArrayRef<int64_t> tileSizes,
        -:   59:                            bool noMinMaxBounds) {
    #####:   60:  OpBuilder b(op);
call    0 never executed
    #####:   61:  auto zero = b.create<arith::ConstantIndexOp>(op.getLoc(), 0);
call    0 never executed
    #####:   62:  SmallVector<Value, 2> tileSizeConstants;
call    0 never executed
    #####:   63:  tileSizeConstants.reserve(op.getUpperBound().size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:  for (size_t i = 0, end = op.getUpperBound().size(); i != end; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:    if (i < tileSizes.size())
branch  0 never executed
branch  1 never executed
    #####:   66:      tileSizeConstants.push_back(
call    0 never executed
    #####:   67:          b.create<arith::ConstantIndexOp>(op.getLoc(), tileSizes[i]));
call    0 never executed
call    1 never executed
        -:   68:    else
        -:   69:      // Just pick 1 for the remaining dimensions.
    #####:   70:      tileSizeConstants.push_back(
call    0 never executed
    #####:   71:          b.create<arith::ConstantIndexOp>(op.getLoc(), 1));
call    0 never executed
call    1 never executed
        -:   72:  }
        -:   73:
        -:   74:  // Create the outer loop with adjusted steps.
    #####:   75:  SmallVector<Value, 2> newSteps;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  newSteps.reserve(op.getStep().size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   77:  for (auto step : llvm::zip(op.getStep(), tileSizeConstants)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:    newSteps.push_back(b.create<arith::MulIOp>(op.getLoc(), std::get<0>(step),
call    0 never executed
call    1 never executed
    #####:   79:                                               std::get<1>(step)));
call    0 never executed
call    1 never executed
        -:   80:  }
    #####:   81:  auto outerLoop = b.create<ParallelOp>(op.getLoc(), op.getLowerBound(),
call    0 never executed
    #####:   82:                                        op.getUpperBound(), newSteps);
call    0 never executed
call    1 never executed
    #####:   83:  b.setInsertionPointToStart(outerLoop.getBody());
call    0 never executed
call    1 never executed
        -:   84:
        -:   85:  // Compute min(size, dim - offset) to avoid out-of-bounds accesses.
    #####:   86:  auto minMap = AffineMap::get(
        -:   87:      /*dimCount=*/3, /*symbolCount=*/0,
    #####:   88:      {getAffineDimExpr(/*position=*/0, b.getContext()),
call    0 never executed
    #####:   89:       getAffineDimExpr(/*position=*/1, b.getContext()) -
call    0 never executed
    #####:   90:           getAffineDimExpr(/*position=*/2, b.getContext())},
call    0 never executed
call    1 never executed
    #####:   91:      b.getContext());
call    0 never executed
call    1 never executed
        -:   92:
        -:   93:  // Create the inner loop with adjusted bounds.
    #####:   94:  SmallVector<Value, 2> newBounds;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:  newBounds.reserve(op.getUpperBound().size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:  bool needInboundCheck = false;
    #####:   97:  for (auto [lowerBound, upperBound, newStep, iv, step, tileSizeConstant] :
call    0 never executed
    #####:   98:       llvm::zip(outerLoop.getLowerBound(), outerLoop.getUpperBound(),
call    0 never executed
call    1 never executed
    #####:   99:                 outerLoop.getStep(), outerLoop.getInductionVars(),
call    0 never executed
call    1 never executed
    #####:  100:                 op.getStep(), tileSizeConstants)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  101:    // Collect the statically known loop bounds
    #####:  102:    auto lowerBoundConstant =
    #####:  103:        dyn_cast_or_null<arith::ConstantIndexOp>(lowerBound.getDefiningOp());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  104:    auto upperBoundConstant =
    #####:  105:        dyn_cast_or_null<arith::ConstantIndexOp>(upperBound.getDefiningOp());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:    auto stepConstant =
    #####:  107:        dyn_cast_or_null<arith::ConstantIndexOp>(step.getDefiningOp());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:    auto tileSize =
    #####:  109:        cast<arith::ConstantIndexOp>(tileSizeConstant.getDefiningOp()).value();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  110:    // If the loop bounds and the loop step are constant and if the number of
        -:  111:    // loop iterations is an integer multiple of the tile size, we use a static
        -:  112:    // bound for the inner loop.
    #####:  113:    if (lowerBoundConstant && upperBoundConstant && stepConstant) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  114:      auto numIterations = llvm::divideCeil(upperBoundConstant.value() -
call    0 never executed
call    1 never executed
    #####:  115:                                                lowerBoundConstant.value(),
call    0 never executed
    #####:  116:                                            stepConstant.value());
call    0 never executed
    #####:  117:      if (numIterations % tileSize == 0) {
branch  0 never executed
branch  1 never executed
    #####:  118:        newBounds.push_back(newStep);
call    0 never executed
    #####:  119:        continue;
        -:  120:      }
        -:  121:    }
        -:  122:
        -:  123:    // For InboundCheck mode, just use the variable outer step
    #####:  124:    if (noMinMaxBounds) {
branch  0 never executed
branch  1 never executed
    #####:  125:      newBounds.push_back(newStep);
call    0 never executed
    #####:  126:      needInboundCheck = true;
    #####:  127:      continue;
        -:  128:    }
        -:  129:
        -:  130:    // Otherwise, we dynamically compute the bound for
        -:  131:    // each iteration of the outer loop.
    #####:  132:    newBounds.push_back(
call    0 never executed
    #####:  133:        b.create<AffineMinOp>(op.getLoc(), b.getIndexType(), minMap,
    #####:  134:                              ValueRange{newStep, upperBound, iv}));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  135:  }
    #####:  136:  auto innerLoop = b.create<ParallelOp>(
    #####:  137:      op.getLoc(), SmallVector<Value, 2>(newBounds.size(), zero), newBounds,
call    0 never executed
    #####:  138:      op.getStep());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  139:
    #####:  140:  if (noMinMaxBounds && needInboundCheck) {
branch  0 never executed
branch  1 never executed
    #####:  141:    b.setInsertionPointToStart(innerLoop.getBody());
call    0 never executed
call    1 never executed
        -:  142:    // Insert in-bound check
    #####:  143:    Value inbound =
    #####:  144:        b.create<arith::ConstantIntOp>(op.getLoc(), 1, b.getIntegerType(1));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  145:    for (auto [outerUpperBound, outerIV, innerIV, innerStep] :
call    0 never executed
    #####:  146:         llvm::zip(outerLoop.getUpperBound(), outerLoop.getInductionVars(),
call    0 never executed
call    1 never executed
    #####:  147:                   innerLoop.getInductionVars(), innerLoop.getStep())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  148:      // %in_bound = %in_bound &&
        -:  149:      //             (%inner_iv * %inner_step + %outer_iv < %outer_upper_bound)
    #####:  150:      Value index = b.create<arith::AddIOp>(
    #####:  151:          op.getLoc(), b.create<arith::MulIOp>(op.getLoc(), innerIV, innerStep),
call    0 never executed
    #####:  152:          outerIV);
call    0 never executed
call    1 never executed
    #####:  153:      Value dimInbound = b.create<arith::CmpIOp>(
    #####:  154:          op.getLoc(), arith::CmpIPredicate::ult, index, outerUpperBound);
call    0 never executed
call    1 never executed
    #####:  155:      inbound = b.create<arith::AndIOp>(op.getLoc(), inbound, dimInbound);
call    0 never executed
        -:  156:    }
    #####:  157:    auto ifInbound = b.create<IfOp>(op.getLoc(),
    #####:  158:                                    /*resultTypes*/ ArrayRef<Type>{}, inbound,
    #####:  159:                                    /*hasElseRegion*/ false);
call    0 never executed
    #####:  160:    ifInbound.getThenRegion().takeBody(op.getRegion());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  161:    Block &thenBlock = ifInbound.getThenRegion().front();
call    0 never executed
call    1 never executed
    #####:  162:    b.setInsertionPointToStart(innerLoop.getBody());
call    0 never executed
call    1 never executed
    #####:  163:    for (const auto &ivs : llvm::enumerate(llvm::zip(
    #####:  164:             innerLoop.getInductionVars(), outerLoop.getInductionVars()))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  165:      auto newIndex = b.create<arith::AddIOp>(
call    0 never executed
    #####:  166:          op.getLoc(), std::get<0>(ivs.value()), std::get<1>(ivs.value()));
call    0 never executed
call    1 never executed
    #####:  167:      thenBlock.getArgument(ivs.index())
call    0 never executed
call    1 never executed
    #####:  168:          .replaceAllUsesExcept(newIndex, newIndex);
call    0 never executed
        -:  169:    }
    #####:  170:    thenBlock.eraseArguments(0, thenBlock.getNumArguments());
call    0 never executed
        -:  171:  } else {
    #####:  172:    innerLoop.getRegion().takeBody(op.getRegion());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  173:    b.setInsertionPointToStart(innerLoop.getBody());
call    0 never executed
call    1 never executed
    #####:  174:    for (auto ivs : llvm::zip(innerLoop.getInductionVars(),
call    0 never executed
    #####:  175:                              outerLoop.getInductionVars())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:      Value innerIndex = std::get<0>(ivs);
call    0 never executed
    #####:  177:      auto newIndex = b.create<arith::AddIOp>(op.getLoc(), std::get<0>(ivs),
call    0 never executed
    #####:  178:                                              std::get<1>(ivs));
call    0 never executed
    #####:  179:      innerIndex.replaceAllUsesExcept(newIndex, newIndex);
call    0 never executed
        -:  180:    }
        -:  181:  }
        -:  182:
    #####:  183:  op.erase();
call    0 never executed
    #####:  184:  return std::make_pair(outerLoop, innerLoop);
branch  0 never executed
branch  1 never executed
        -:  185:}
        -:  186:
        -:  187:namespace {
    #####:  188:struct ParallelLoopTiling
call    0 never executed
        -:  189:    : public impl::SCFParallelLoopTilingBase<ParallelLoopTiling> {
        -:  190:  ParallelLoopTiling() = default;
function _ZN12_GLOBAL__N_118ParallelLoopTilingC2EN4llvm8ArrayRefIlEEb called 326633 returned 100% blocks executed 83%
   326633:  191:  explicit ParallelLoopTiling(ArrayRef<int64_t> tileSizes,
   326633:  192:                              bool noMinMaxBounds = false) {
call    0 returned 100%
   326633:  193:    this->tileSizes = tileSizes;
call    0 returned 100%
   326633:  194:    this->noMinMaxBounds = noMinMaxBounds;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   326633:  195:  }
        -:  196:
function _ZN12_GLOBAL__N_118ParallelLoopTiling14runOnOperationEv called 882 returned 100% blocks executed 50%
      882:  197:  void runOnOperation() override {
      882:  198:    auto *parentOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      882:  199:    SmallVector<ParallelOp, 2> innermostPloops;
call    0 returned 100%
      882:  200:    getInnermostParallelLoops(parentOp, innermostPloops);
call    0 returned 100%
     882*:  201:    for (ParallelOp ploop : innermostPloops) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  202:      // FIXME: Add reduction support.
    #####:  203:      if (ploop.getNumReductions() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:        tileParallelLoop(ploop, tileSizes, noMinMaxBounds);
call    0 never executed
        -:  205:    }
      882:  206:  }
        -:  207:};
        -:  208:} // namespace
        -:  209:
        -:  210:std::unique_ptr<Pass>
function _ZN4mlir28createParallelLoopTilingPassEN4llvm8ArrayRefIlEEb called 326633 returned 100% blocks executed 100%
   326633:  211:mlir::createParallelLoopTilingPass(ArrayRef<int64_t> tileSizes,
        -:  212:                                   bool noMinMaxBounds) {
   326633:  213:  return std::make_unique<ParallelLoopTiling>(tileSizes, noMinMaxBounds);
call    0 returned 100%
        -:  214:}
