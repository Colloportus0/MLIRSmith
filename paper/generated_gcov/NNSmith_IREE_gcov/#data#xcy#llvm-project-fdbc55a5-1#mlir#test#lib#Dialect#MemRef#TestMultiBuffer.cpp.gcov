        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/MemRef/TestMultiBuffer.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/MemRef/CMakeFiles/MLIRMemRefTestPasses.dir/TestMultiBuffer.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/MemRef/CMakeFiles/MLIRMemRefTestPasses.dir/TestMultiBuffer.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestComposeSubView.cpp - Test composed subviews --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   10:#include "mlir/Dialect/MemRef/Transforms/Passes.h"
        -:   11:
        -:   12:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   13:#include "mlir/Pass/Pass.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
        -:   17:namespace {
        -:   18:struct TestMultiBufferingPass
        -:   19:    : public PassWrapper<TestMultiBufferingPass, OperationPass<>> {
function _ZN12_GLOBAL__N_122TestMultiBufferingPass13resolveTypeIDEv called 326627 returned 100% blocks executed 100%
   326627:   20:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMultiBufferingPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   21:
function _ZN12_GLOBAL__N_122TestMultiBufferingPassC2Ev called 326627 returned 100% blocks executed 100%
   326627:   22:  TestMultiBufferingPass() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_122TestMultiBufferingPassC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   23:  TestMultiBufferingPass(const TestMultiBufferingPass &pass)
    #####:   24:      : PassWrapper(pass) {}
call    0 never executed
call    1 never executed
function _ZNK12_GLOBAL__N_122TestMultiBufferingPass20getDependentDialectsERN4mlir15DialectRegistryE called 1067 returned 100% blocks executed 100%
     1067:   25:  void getDependentDialects(DialectRegistry &registry) const override {
     1067:   26:    registry.insert<AffineDialect>();
call    0 returned 100%
     1067:   27:  }
function _ZNK12_GLOBAL__N_122TestMultiBufferingPass11getArgumentEv called 325598 returned 100% blocks executed 100%
   325598:   28:  StringRef getArgument() const final { return "test-multi-buffering"; }
function _ZNK12_GLOBAL__N_122TestMultiBufferingPass14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   29:  StringRef getDescription() const final {
   325560:   30:    return "Test multi buffering transformation";
        -:   31:  }
        -:   32:  void runOnOperation() override;
        -:   33:  Option<unsigned> multiplier{
        -:   34:      *this, "multiplier",
        -:   35:      llvm::cl::desc(
        -:   36:          "Decide how many versions of the buffer should be created,"),
        -:   37:      llvm::cl::init(2)};
        -:   38:};
        -:   39:
function _ZN12_GLOBAL__N_122TestMultiBufferingPass14runOnOperationEv called 889 returned 100% blocks executed 60%
      889:   40:void TestMultiBufferingPass::runOnOperation() {
      889:   41:  SmallVector<memref::AllocOp> allocs;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      889:   42:  getOperation()->walk(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    #####:   43:      [&allocs](memref::AllocOp alloc) { allocs.push_back(alloc); });
call    0 never executed
     889*:   44:  for (memref::AllocOp alloc : allocs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:    (void)multiBuffer(alloc, multiplier);
call    0 never executed
      889:   46:}
        -:   47:} // namespace
        -:   48:
        -:   49:namespace mlir {
        -:   50:namespace test {
function _ZN4mlir4test26registerTestMultiBufferingEv called 325560 returned 100% blocks executed 100%
   325560:   51:void registerTestMultiBuffering() {
   325560:   52:  PassRegistration<TestMultiBufferingPass>();
call    0 returned 100%
   325560:   53:}
        -:   54:} // namespace test
        -:   55:} // namespace mlir
