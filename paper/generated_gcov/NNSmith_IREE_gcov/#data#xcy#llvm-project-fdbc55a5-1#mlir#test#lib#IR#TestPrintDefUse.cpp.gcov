        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/IR/TestPrintDefUse.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestPrintDefUse.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestPrintDefUse.cpp.gcda
        -:    0:Runs:325561
        -:    1://===- TestPrintDefUse.cpp - Passes to illustrate the IR def-use chains ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinOps.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14:namespace {
        -:   15:/// This pass illustrates the IR def-use chains through printing.
  326637*:   16:struct TestPrintDefUsePass
call    0 never executed
call    1 returned 100%
        -:   17:    : public PassWrapper<TestPrintDefUsePass, OperationPass<>> {
function _ZN12_GLOBAL__N_119TestPrintDefUsePass13resolveTypeIDEv called 326637 returned 100% blocks executed 100%
   326637:   18:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestPrintDefUsePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   19:
function _ZNK12_GLOBAL__N_119TestPrintDefUsePass11getArgumentEv called 325602 returned 100% blocks executed 100%
   325602:   20:  StringRef getArgument() const final { return "test-print-defuse"; }
function _ZNK12_GLOBAL__N_119TestPrintDefUsePass14getDescriptionEv called 325561 returned 100% blocks executed 100%
   325561:   21:  StringRef getDescription() const final { return "Test various printing."; }
function _ZN12_GLOBAL__N_119TestPrintDefUsePass14runOnOperationEv called 870 returned 100% blocks executed 75%
      870:   22:  void runOnOperation() override {
        -:   23:    // Recursively traverse the IR nested under the current operation and print
        -:   24:    // every single operation and their operands and users.
function _ZZN12_GLOBAL__N_119TestPrintDefUsePass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 11681 returned 100% blocks executed 98%
      870:   25:    getOperation()->walk([](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    11681:   26:      llvm::outs() << "Visiting op '" << op->getName() << "' with "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 62% (fallthrough)
branch  5 taken 38%
    11681:   27:                   << op->getNumOperands() << " operands:\n";
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:      // Print information about the producer of each of the operands.
    24083:   30:      for (Value operand : op->getOperands()) {
call    0 returned 100%
branch  1 taken 49% (fallthrough)
branch  2 taken 51%
call    3 returned 100%
    12402:   31:        if (Operation *producer = operand.getDefiningOp()) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
     9964:   32:          llvm::outs() << "  - Operand produced by operation '"
call    0 returned 100%
     9964:   33:                       << producer->getName() << "'\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   34:        } else {
        -:   35:          // If there is no defining op, the Value is necessarily a Block
        -:   36:          // argument.
     2438:   37:          auto blockArg = operand.cast<BlockArgument>();
call    0 returned 100%
     2438:   38:          llvm::outs() << "  - Operand produced by Block argument, number "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     2438:   39:                       << blockArg.getArgNumber() << "\n";
call    0 returned 100%
call    1 returned 100%
        -:   40:        }
        -:   41:      }
        -:   42:
        -:   43:      // Print information about the user of each of the result.
    11681:   44:      llvm::outs() << "Has " << op->getNumResults() << " results:\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    38594:   45:      for (const auto &indexedResult : llvm::enumerate(op->getResults())) {
branch  0 taken 77%
branch  1 taken 23%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
     8971:   46:        Value result = indexedResult.value();
call    0 returned 100%
     8971:   47:        llvm::outs() << "  - Result " << indexedResult.index();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     8971:   48:        if (result.use_empty()) {
branch  0 taken 1%
branch  1 taken 99%
       72:   49:          llvm::outs() << " has no uses\n";
call    0 returned 100%
call    1 returned 100%
       72:   50:          continue;
        -:   51:        }
     8899:   52:        if (result.hasOneUse()) {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     7889:   53:          llvm::outs() << " has a single use: ";
call    0 returned 100%
call    1 returned 100%
        -:   54:        } else {
     1010:   55:          llvm::outs() << " has "
call    0 returned 100%
call    1 returned 100%
     1010:   56:                       << std::distance(result.getUses().begin(),
     2020:   57:                                        result.getUses().end())
call    0 returned 100%
     1010:   58:                       << " uses:\n";
call    0 returned 100%
        -:   59:        }
    18863:   60:        for (Operation *userOp : result.getUsers()) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
     9964:   61:          llvm::outs() << "    - " << userOp->getName() << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   62:        }
        -:   63:      }
    11681:   64:    });
      870:   65:  }
        -:   66:};
        -:   67:} // namespace
        -:   68:
        -:   69:namespace mlir {
function _ZN4mlir27registerTestPrintDefUsePassEv called 325561 returned 100% blocks executed 100%
   325561:   70:void registerTestPrintDefUsePass() { PassRegistration<TestPrintDefUsePass>(); }
call    0 returned 100%
        -:   71:} // namespace mlir
