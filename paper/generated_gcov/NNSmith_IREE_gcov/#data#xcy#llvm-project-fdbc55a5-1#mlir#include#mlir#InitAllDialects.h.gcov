        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/InitAllDialects.h
        -:    0:Graph:../tools/mlir/tools/mlir-opt/CMakeFiles/mlir-opt.dir/mlir-opt.cpp.gcno
        -:    0:Data:../tools/mlir/tools/mlir-opt/CMakeFiles/mlir-opt.dir/mlir-opt.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- InitAllDialects.h - MLIR Dialects Registration -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines a helper to trigger the registration of all dialects and
        -:   10:// passes to the system.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_INITALLDIALECTS_H_
        -:   15:#define MLIR_INITALLDIALECTS_H_
        -:   16:
        -:   17:#include "mlir/Dialect/AMDGPU/AMDGPUDialect.h"
        -:   18:#include "mlir/Dialect/AMX/AMXDialect.h"
        -:   19:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   20:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   21:#include "mlir/Dialect/Arith/Transforms/BufferizableOpInterfaceImpl.h"
        -:   22:#include "mlir/Dialect/ArmNeon/ArmNeonDialect.h"
        -:   23:#include "mlir/Dialect/ArmSVE/ArmSVEDialect.h"
        -:   24:#include "mlir/Dialect/Async/IR/Async.h"
        -:   25:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   26:#include "mlir/Dialect/Bufferization/TransformOps/BufferizationTransformOps.h"
        -:   27:#include "mlir/Dialect/Bufferization/Transforms/FuncBufferizableOpInterfaceImpl.h"
        -:   28:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   29:#include "mlir/Dialect/ControlFlow/IR/ControlFlow.h"
        -:   30:#include "mlir/Dialect/DLTI/DLTI.h"
        -:   31:#include "mlir/Dialect/EmitC/IR/EmitC.h"
        -:   32:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   33:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   34:#include "mlir/Dialect/GPU/TransformOps/GPUTransformOps.h"
        -:   35:#include "mlir/Dialect/Index/IR/IndexDialect.h"
        -:   36:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   37:#include "mlir/Dialect/LLVMIR/NVVMDialect.h"
        -:   38:#include "mlir/Dialect/LLVMIR/ROCDLDialect.h"
        -:   39:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   40:#include "mlir/Dialect/Linalg/TransformOps/LinalgTransformOps.h"
        -:   41:#include "mlir/Dialect/Linalg/Transforms/BufferizableOpInterfaceImpl.h"
        -:   42:#include "mlir/Dialect/Linalg/Transforms/TilingInterfaceImpl.h"
        -:   43:#include "mlir/Dialect/MLProgram/IR/MLProgram.h"
        -:   44:#include "mlir/Dialect/Math/IR/Math.h"
        -:   45:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   46:#include "mlir/Dialect/MemRef/TransformOps/MemRefTransformOps.h"
        -:   47:#include "mlir/Dialect/NVGPU/IR/NVGPUDialect.h"
        -:   48:#include "mlir/Dialect/OpenACC/OpenACC.h"
        -:   49:#include "mlir/Dialect/OpenMP/OpenMPDialect.h"
        -:   50:#include "mlir/Dialect/PDL/IR/PDL.h"
        -:   51:#include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
        -:   52:#include "mlir/Dialect/Quant/QuantOps.h"
        -:   53:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   54:#include "mlir/Dialect/SCF/TransformOps/SCFTransformOps.h"
        -:   55:#include "mlir/Dialect/SCF/Transforms/BufferizableOpInterfaceImpl.h"
        -:   56:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   57:#include "mlir/Dialect/Shape/IR/Shape.h"
        -:   58:#include "mlir/Dialect/Shape/Transforms/BufferizableOpInterfaceImpl.h"
        -:   59:#include "mlir/Dialect/SparseTensor/IR/SparseTensor.h"
        -:   60:#include "mlir/Dialect/SparseTensor/Transforms/BufferizableOpInterfaceImpl.h"
        -:   61:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   62:#include "mlir/Dialect/Tensor/IR/TensorInferTypeOpInterfaceImpl.h"
        -:   63:#include "mlir/Dialect/Tensor/IR/TensorTilingInterfaceImpl.h"
        -:   64:#include "mlir/Dialect/Tensor/Transforms/BufferizableOpInterfaceImpl.h"
        -:   65:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   66:#include "mlir/Dialect/Transform/IR/TransformDialect.h"
        -:   67:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   68:#include "mlir/Dialect/Vector/Transforms/BufferizableOpInterfaceImpl.h"
        -:   69:#include "mlir/Dialect/X86Vector/X86VectorDialect.h"
        -:   70:#include "mlir/IR/Dialect.h"
        -:   71:
        -:   72:namespace mlir {
        -:   73:
        -:   74:/// Add all the MLIR dialects to the provided registry.
function _ZN4mlir19registerAllDialectsERNS_15DialectRegistryE called 325545 returned 100% blocks executed 100%
   325545:   75:inline void registerAllDialects(DialectRegistry &registry) {
        -:   76:  // clang-format off
   325545:   77:  registry.insert<acc::OpenACCDialect,
        -:   78:                  AffineDialect,
        -:   79:                  arith::ArithDialect,
        -:   80:                  amdgpu::AMDGPUDialect,
        -:   81:                  amx::AMXDialect,
        -:   82:                  arm_neon::ArmNeonDialect,
        -:   83:                  async::AsyncDialect,
        -:   84:                  bufferization::BufferizationDialect,
        -:   85:                  cf::ControlFlowDialect,
        -:   86:                  complex::ComplexDialect,
        -:   87:                  DLTIDialect,
        -:   88:                  emitc::EmitCDialect,
        -:   89:                  func::FuncDialect,
        -:   90:                  gpu::GPUDialect,
        -:   91:                  index::IndexDialect,
        -:   92:                  LLVM::LLVMDialect,
        -:   93:                  linalg::LinalgDialect,
        -:   94:                  math::MathDialect,
        -:   95:                  memref::MemRefDialect,
        -:   96:                  ml_program::MLProgramDialect,
        -:   97:                  nvgpu::NVGPUDialect,
        -:   98:                  scf::SCFDialect,
        -:   99:                  omp::OpenMPDialect,
        -:  100:                  pdl::PDLDialect,
        -:  101:                  pdl_interp::PDLInterpDialect,
        -:  102:                  quant::QuantizationDialect,
        -:  103:                  spirv::SPIRVDialect,
        -:  104:                  arm_sve::ArmSVEDialect,
        -:  105:                  vector::VectorDialect,
        -:  106:                  NVVM::NVVMDialect,
        -:  107:                  ROCDL::ROCDLDialect,
        -:  108:                  shape::ShapeDialect,
        -:  109:                  sparse_tensor::SparseTensorDialect,
        -:  110:                  tensor::TensorDialect,
        -:  111:                  transform::TransformDialect,
        -:  112:                  tosa::TosaDialect,
   325545:  113:                  x86vector::X86VectorDialect>();
call    0 returned 100%
        -:  114:  // clang-format on
        -:  115:
        -:  116:  // Register all dialect extensions.
   325545:  117:  bufferization::registerTransformDialectExtension(registry);
call    0 returned 100%
   325545:  118:  linalg::registerTransformDialectExtension(registry);
call    0 returned 100%
   325545:  119:  memref::registerTransformDialectExtension(registry);
call    0 returned 100%
   325545:  120:  scf::registerTransformDialectExtension(registry);
call    0 returned 100%
   325545:  121:  gpu::registerTransformDialectExtension(registry);
call    0 returned 100%
        -:  122:
        -:  123:  // Register all external models.
   325545:  124:  arith::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  125:  bufferization::func_ext::registerBufferizableOpInterfaceExternalModels(
call    0 returned 100%
        -:  126:      registry);
   325545:  127:  linalg::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  128:  linalg::registerTilingInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  129:  scf::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  130:  shape::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  131:  sparse_tensor::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  132:  tensor::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  133:  tensor::registerInferTypeOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  134:  tensor::registerTilingInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  135:  vector::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
   325545:  136:}
        -:  137:
        -:  138:/// Append all the MLIR dialects to the registry contained in the given context.
        -:  139:inline void registerAllDialects(MLIRContext &context) {
        -:  140:  DialectRegistry registry;
        -:  141:  registerAllDialects(registry);
        -:  142:  context.appendDialectRegistry(registry);
        -:  143:}
        -:  144:
        -:  145:} // namespace mlir
        -:  146:
        -:  147:#endif // MLIR_INITALLDIALECTS_H_
