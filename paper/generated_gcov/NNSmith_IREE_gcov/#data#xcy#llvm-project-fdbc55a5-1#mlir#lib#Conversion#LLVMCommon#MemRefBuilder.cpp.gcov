        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/LLVMCommon/MemRefBuilder.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/LLVMCommon/CMakeFiles/obj.MLIRLLVMCommonConversion.dir/MemRefBuilder.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/LLVMCommon/CMakeFiles/obj.MLIRLLVMCommonConversion.dir/MemRefBuilder.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- MemRefBuilder.cpp - Helper for LLVM MemRef equivalents -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/LLVMCommon/MemRefBuilder.h"
        -:   10:#include "MemRefDescriptor.h"
        -:   11:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   12:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   13:#include "mlir/IR/Builders.h"
        -:   14:#include "mlir/Support/MathExtras.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// MemRefDescriptor implementation
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
        -:   22:/// Construct a helper for the given descriptor value.
function _ZN4mlir16MemRefDescriptorC2ENS_5ValueE called 46 returned 100% blocks executed 75%
       46:   23:MemRefDescriptor::MemRefDescriptor(Value descriptor)
       46:   24:    : StructBuilder(descriptor) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      46*:   25:  assert(value != nullptr && "value cannot be null");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       46:   26:  indexType = value.getType()
call    0 returned 100%
       92:   27:                  .cast<LLVM::LLVMStructType>()
       46:   28:                  .getBody()[kOffsetPosInMemRefDescriptor];
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       46:   29:}
        -:   30:
        -:   31:/// Builds IR creating an `undef` value of the descriptor type.
function _ZN4mlir16MemRefDescriptor5undefERNS_9OpBuilderENS_8LocationENS_4TypeE called 38 returned 100% blocks executed 100%
       38:   32:MemRefDescriptor MemRefDescriptor::undef(OpBuilder &builder, Location loc,
        -:   33:                                         Type descriptorType) {
        -:   34:
       38:   35:  Value descriptor = builder.create<LLVM::UndefOp>(loc, descriptorType);
call    0 returned 100%
call    1 returned 100%
       38:   36:  return MemRefDescriptor(descriptor);
call    0 returned 100%
        -:   37:}
        -:   38:
        -:   39:/// Builds IR creating a MemRef descriptor that represents `type` and
        -:   40:/// populates it with static shape and stride information extracted from the
        -:   41:/// type.
        -:   42:MemRefDescriptor
function _ZN4mlir16MemRefDescriptor15fromStaticShapeERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_10MemRefTypeENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   43:MemRefDescriptor::fromStaticShape(OpBuilder &builder, Location loc,
        -:   44:                                  LLVMTypeConverter &typeConverter,
        -:   45:                                  MemRefType type, Value memory) {
    #####:   46:  assert(type.hasStaticShape() && "unexpected dynamic shape");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   47:
        -:   48:  // Extract all strides and offsets and verify they are static.
    #####:   49:  int64_t offset;
    #####:   50:  SmallVector<int64_t, 4> strides;
call    0 never executed
    #####:   51:  auto result = getStridesAndOffset(type, strides, offset);
call    0 never executed
    #####:   52:  (void)result;
    #####:   53:  assert(succeeded(result) && "unexpected failure in stride computation");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   54:  assert(!ShapedType::isDynamicStrideOrOffset(offset) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   55:         "expected static offset");
    #####:   56:  assert(!llvm::any_of(strides, ShapedType::isDynamicStrideOrOffset) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   57:         "expected static strides");
        -:   58:
    #####:   59:  auto convertedType = typeConverter.convertType(type);
call    0 never executed
    #####:   60:  assert(convertedType && "unexpected failure in memref type conversion");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   61:
    #####:   62:  auto descr = MemRefDescriptor::undef(builder, loc, convertedType);
call    0 never executed
    #####:   63:  descr.setAllocatedPtr(builder, loc, memory);
    #####:   64:  descr.setAlignedPtr(builder, loc, memory);
    #####:   65:  descr.setConstantOffset(builder, loc, offset);
call    0 never executed
        -:   66:
        -:   67:  // Fill in sizes and strides
    #####:   68:  for (unsigned i = 0, e = type.getRank(); i != e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:    descr.setConstantSize(builder, loc, i, type.getDimSize(i));
call    0 never executed
call    1 never executed
    #####:   70:    descr.setConstantStride(builder, loc, i, strides[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   71:  }
    #####:   72:  return descr;
branch  0 never executed
branch  1 never executed
        -:   73:}
        -:   74:
        -:   75:/// Builds IR extracting the allocated pointer from the descriptor.
function _ZN4mlir16MemRefDescriptor12allocatedPtrERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
       8*:   76:Value MemRefDescriptor::allocatedPtr(OpBuilder &builder, Location loc) {
    #####:   77:  return extractPtr(builder, loc, kAllocatedPtrPosInMemRefDescriptor);
call    0 never executed
        -:   78:}
        -:   79:
        -:   80:/// Builds IR inserting the allocated pointer into the descriptor.
function _ZN4mlir16MemRefDescriptor15setAllocatedPtrERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
      38*:   81:void MemRefDescriptor::setAllocatedPtr(OpBuilder &builder, Location loc,
        -:   82:                                       Value ptr) {
    #####:   83:  setPtr(builder, loc, kAllocatedPtrPosInMemRefDescriptor, ptr);
call    0 never executed
call    1 never executed
    #####:   84:}
        -:   85:
        -:   86:/// Builds IR extracting the aligned pointer from the descriptor.
function _ZN4mlir16MemRefDescriptor10alignedPtrERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
       8*:   87:Value MemRefDescriptor::alignedPtr(OpBuilder &builder, Location loc) {
    #####:   88:  return extractPtr(builder, loc, kAlignedPtrPosInMemRefDescriptor);
call    0 never executed
        -:   89:}
        -:   90:
        -:   91:/// Builds IR inserting the aligned pointer into the descriptor.
function _ZN4mlir16MemRefDescriptor13setAlignedPtrERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
      38*:   92:void MemRefDescriptor::setAlignedPtr(OpBuilder &builder, Location loc,
        -:   93:                                     Value ptr) {
    #####:   94:  setPtr(builder, loc, kAlignedPtrPosInMemRefDescriptor, ptr);
call    0 never executed
call    1 never executed
    #####:   95:}
        -:   96:
        -:   97:// Creates a constant Op producing a value of `resultType` from an index-typed
        -:   98:// integer attribute.
function _ZL23createIndexAttrConstantRN4mlir9OpBuilderENS_8LocationENS_4TypeEl called 0 returned 0% blocks executed 0%
    #####:   99:static Value createIndexAttrConstant(OpBuilder &builder, Location loc,
        -:  100:                                     Type resultType, int64_t value) {
    #####:  101:  return builder.create<LLVM::ConstantOp>(loc, resultType,
    #####:  102:                                          builder.getIndexAttr(value));
call    0 never executed
call    1 never executed
        -:  103:}
        -:  104:
        -:  105:/// Builds IR extracting the offset from the descriptor.
function _ZN4mlir16MemRefDescriptor6offsetERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
       8*:  106:Value MemRefDescriptor::offset(OpBuilder &builder, Location loc) {
      16*:  107:  return builder.create<LLVM::ExtractValueOp>(loc, value,
       8*:  108:                                              kOffsetPosInMemRefDescriptor);
call    0 returned 100%
call    1 never executed
        -:  109:}
        -:  110:
        -:  111:/// Builds IR inserting the offset into the descriptor.
function _ZN4mlir16MemRefDescriptor9setOffsetERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
      38*:  112:void MemRefDescriptor::setOffset(OpBuilder &builder, Location loc,
        -:  113:                                 Value offset) {
      76*:  114:  value = builder.create<LLVM::InsertValueOp>(loc, value, offset,
      38*:  115:                                              kOffsetPosInMemRefDescriptor);
call    0 returned 100%
call    1 never executed
    #####:  116:}
        -:  117:
        -:  118:/// Builds IR inserting the offset into the descriptor.
function _ZN4mlir16MemRefDescriptor17setConstantOffsetERNS_9OpBuilderENS_8LocationEm called 0 returned 0% blocks executed 0%
    #####:  119:void MemRefDescriptor::setConstantOffset(OpBuilder &builder, Location loc,
        -:  120:                                         uint64_t offset) {
    #####:  121:  setOffset(builder, loc,
call    0 never executed
call    1 never executed
        -:  122:            createIndexAttrConstant(builder, loc, indexType, offset));
    #####:  123:}
        -:  124:
        -:  125:/// Builds IR extracting the pos-th size from the descriptor.
function _ZN4mlir16MemRefDescriptor4sizeERNS_9OpBuilderENS_8LocationEj called 0 returned 0% blocks executed 0%
      31*:  126:Value MemRefDescriptor::size(OpBuilder &builder, Location loc, unsigned pos) {
      62*:  127:  return builder.create<LLVM::ExtractValueOp>(
      31*:  128:      loc, value, ArrayRef<int64_t>({kSizePosInMemRefDescriptor, pos}));
call    0 returned 100%
call    1 never executed
        -:  129:}
        -:  130:
function _ZN4mlir16MemRefDescriptor4sizeERNS_9OpBuilderENS_8LocationENS_5ValueEl called 0 returned 0% blocks executed 0%
    #####:  131:Value MemRefDescriptor::size(OpBuilder &builder, Location loc, Value pos,
        -:  132:                             int64_t rank) {
    #####:  133:  auto indexPtrTy = LLVM::LLVMPointerType::get(indexType);
call    0 never executed
    #####:  134:  auto arrayTy = LLVM::LLVMArrayType::get(indexType, rank);
call    0 never executed
    #####:  135:  auto arrayPtrTy = LLVM::LLVMPointerType::get(arrayTy);
call    0 never executed
        -:  136:
        -:  137:  // Copy size values to stack-allocated memory.
    #####:  138:  auto one = createIndexAttrConstant(builder, loc, indexType, 1);
call    0 never executed
    #####:  139:  auto sizes = builder.create<LLVM::ExtractValueOp>(
    #####:  140:      loc, value, llvm::makeArrayRef<int64_t>({kSizePosInMemRefDescriptor}));
call    0 never executed
    #####:  141:  auto sizesPtr =
    #####:  142:      builder.create<LLVM::AllocaOp>(loc, arrayPtrTy, one, /*alignment=*/0);
call    0 never executed
    #####:  143:  builder.create<LLVM::StoreOp>(loc, sizes, sizesPtr);
call    0 never executed
        -:  144:
        -:  145:  // Load an return size value of interest.
    #####:  146:  auto resultPtr = builder.create<LLVM::GEPOp>(loc, indexPtrTy, sizesPtr,
    #####:  147:                                               ArrayRef<LLVM::GEPArg>{0, pos});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  148:  return builder.create<LLVM::LoadOp>(loc, resultPtr);
call    0 never executed
        -:  149:}
        -:  150:
        -:  151:/// Builds IR inserting the pos-th size into the descriptor
function _ZN4mlir16MemRefDescriptor7setSizeERNS_9OpBuilderENS_8LocationEjNS_5ValueE called 153 returned 100% blocks executed 100%
      153:  152:void MemRefDescriptor::setSize(OpBuilder &builder, Location loc, unsigned pos,
        -:  153:                               Value size) {
      306:  154:  value = builder.create<LLVM::InsertValueOp>(
      153:  155:      loc, value, size, ArrayRef<int64_t>({kSizePosInMemRefDescriptor, pos}));
call    0 returned 100%
      153:  156:}
        -:  157:
function _ZN4mlir16MemRefDescriptor15setConstantSizeERNS_9OpBuilderENS_8LocationEjm called 0 returned 0% blocks executed 0%
    #####:  158:void MemRefDescriptor::setConstantSize(OpBuilder &builder, Location loc,
        -:  159:                                       unsigned pos, uint64_t size) {
    #####:  160:  setSize(builder, loc, pos,
call    0 never executed
call    1 never executed
        -:  161:          createIndexAttrConstant(builder, loc, indexType, size));
    #####:  162:}
        -:  163:
        -:  164:/// Builds IR extracting the pos-th stride from the descriptor.
function _ZN4mlir16MemRefDescriptor6strideERNS_9OpBuilderENS_8LocationEj called 0 returned 0% blocks executed 0%
      31*:  165:Value MemRefDescriptor::stride(OpBuilder &builder, Location loc, unsigned pos) {
      62*:  166:  return builder.create<LLVM::ExtractValueOp>(
      31*:  167:      loc, value, ArrayRef<int64_t>({kStridePosInMemRefDescriptor, pos}));
call    0 returned 100%
call    1 never executed
        -:  168:}
        -:  169:
        -:  170:/// Builds IR inserting the pos-th stride into the descriptor
function _ZN4mlir16MemRefDescriptor9setStrideERNS_9OpBuilderENS_8LocationEjNS_5ValueE called 153 returned 100% blocks executed 100%
      153:  171:void MemRefDescriptor::setStride(OpBuilder &builder, Location loc, unsigned pos,
        -:  172:                                 Value stride) {
      306:  173:  value = builder.create<LLVM::InsertValueOp>(
      153:  174:      loc, value, stride,
call    0 returned 100%
      153:  175:      ArrayRef<int64_t>({kStridePosInMemRefDescriptor, pos}));
call    0 returned 100%
      153:  176:}
        -:  177:
function _ZN4mlir16MemRefDescriptor17setConstantStrideERNS_9OpBuilderENS_8LocationEjm called 0 returned 0% blocks executed 0%
    #####:  178:void MemRefDescriptor::setConstantStride(OpBuilder &builder, Location loc,
        -:  179:                                         unsigned pos, uint64_t stride) {
    #####:  180:  setStride(builder, loc, pos,
call    0 never executed
call    1 never executed
        -:  181:            createIndexAttrConstant(builder, loc, indexType, stride));
    #####:  182:}
        -:  183:
function _ZN4mlir16MemRefDescriptor17getElementPtrTypeEv called 0 returned 0% blocks executed 0%
    #####:  184:LLVM::LLVMPointerType MemRefDescriptor::getElementPtrType() {
    #####:  185:  return value.getType()
call    0 never executed
    #####:  186:      .cast<LLVM::LLVMStructType>()
    #####:  187:      .getBody()[kAlignedPtrPosInMemRefDescriptor]
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  188:      .cast<LLVM::LLVMPointerType>();
        -:  189:}
        -:  190:
        -:  191:/// Creates a MemRef descriptor structure from a list of individual values
        -:  192:/// composing that descriptor, in the following order:
        -:  193:/// - allocated pointer;
        -:  194:/// - aligned pointer;
        -:  195:/// - offset;
        -:  196:/// - <rank> sizes;
        -:  197:/// - <rank> shapes;
        -:  198:/// where <rank> is the MemRef rank as provided in `type`.
function _ZN4mlir16MemRefDescriptor4packERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_10MemRefTypeENS_10ValueRangeE called 38 returned 100% blocks executed 100%
       38:  199:Value MemRefDescriptor::pack(OpBuilder &builder, Location loc,
        -:  200:                             LLVMTypeConverter &converter, MemRefType type,
        -:  201:                             ValueRange values) {
       38:  202:  Type llvmType = converter.convertType(type);
call    0 returned 100%
       38:  203:  auto d = MemRefDescriptor::undef(builder, loc, llvmType);
call    0 returned 100%
        -:  204:
       38:  205:  d.setAllocatedPtr(builder, loc, values[kAllocatedPtrPosInMemRefDescriptor]);
call    0 returned 100%
call    1 returned 100%
       38:  206:  d.setAlignedPtr(builder, loc, values[kAlignedPtrPosInMemRefDescriptor]);
call    0 returned 100%
call    1 returned 100%
       38:  207:  d.setOffset(builder, loc, values[kOffsetPosInMemRefDescriptor]);
call    0 returned 100%
call    1 returned 100%
        -:  208:
       38:  209:  int64_t rank = type.getRank();
      191:  210:  for (unsigned i = 0; i < rank; ++i) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
      153:  211:    d.setSize(builder, loc, i, values[kSizePosInMemRefDescriptor + i]);
call    0 returned 100%
call    1 returned 100%
      153:  212:    d.setStride(builder, loc, i, values[kSizePosInMemRefDescriptor + rank + i]);
call    0 returned 100%
call    1 returned 100%
        -:  213:  }
        -:  214:
       38:  215:  return d;
        -:  216:}
        -:  217:
        -:  218:/// Builds IR extracting individual elements of a MemRef descriptor structure
        -:  219:/// and returning them as `results` list.
function _ZN4mlir16MemRefDescriptor6unpackERNS_9OpBuilderENS_8LocationENS_5ValueENS_10MemRefTypeERN4llvm15SmallVectorImplIS4_EE called 8 returned 100% blocks executed 100%
        8:  220:void MemRefDescriptor::unpack(OpBuilder &builder, Location loc, Value packed,
        -:  221:                              MemRefType type,
        -:  222:                              SmallVectorImpl<Value> &results) {
        8:  223:  int64_t rank = type.getRank();
call    0 returned 100%
        8:  224:  results.reserve(results.size() + getNumUnpackedValues(type));
call    0 returned 100%
        -:  225:
        8:  226:  MemRefDescriptor d(packed);
call    0 returned 100%
        8:  227:  results.push_back(d.allocatedPtr(builder, loc));
call    0 returned 100%
call    1 returned 100%
        8:  228:  results.push_back(d.alignedPtr(builder, loc));
call    0 returned 100%
call    1 returned 100%
        8:  229:  results.push_back(d.offset(builder, loc));
call    0 returned 100%
       39:  230:  for (int64_t i = 0; i < rank; ++i)
call    0 returned 100%
branch  1 taken 21% (fallthrough)
branch  2 taken 79%
       31:  231:    results.push_back(d.size(builder, loc, i));
call    0 returned 100%
call    1 returned 100%
       39:  232:  for (int64_t i = 0; i < rank; ++i)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
       31:  233:    results.push_back(d.stride(builder, loc, i));
call    0 returned 100%
call    1 returned 100%
        8:  234:}
        -:  235:
        -:  236:/// Returns the number of non-aggregate values that would be produced by
        -:  237:/// `unpack`.
function _ZN4mlir16MemRefDescriptor20getNumUnpackedValuesENS_10MemRefTypeE called 0 returned 0% blocks executed 0%
       8*:  238:unsigned MemRefDescriptor::getNumUnpackedValues(MemRefType type) {
        -:  239:  // Two pointers, offset, <rank> sizes, <rank> shapes.
       8*:  240:  return 3 + 2 * type.getRank();
call    0 never executed
call    1 returned 100%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
        -:  241:}
        -:  242:
        -:  243://===----------------------------------------------------------------------===//
        -:  244:// MemRefDescriptorView implementation.
        -:  245://===----------------------------------------------------------------------===//
        -:  246:
function _ZN4mlir20MemRefDescriptorViewC2ENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  247:MemRefDescriptorView::MemRefDescriptorView(ValueRange range)
    #####:  248:    : rank((range.size() - kSizePosInMemRefDescriptor) / 2), elements(range) {}
        -:  249:
function _ZN4mlir20MemRefDescriptorView12allocatedPtrEv called 0 returned 0% blocks executed 0%
    #####:  250:Value MemRefDescriptorView::allocatedPtr() {
    #####:  251:  return elements[kAllocatedPtrPosInMemRefDescriptor];
call    0 never executed
        -:  252:}
        -:  253:
function _ZN4mlir20MemRefDescriptorView10alignedPtrEv called 0 returned 0% blocks executed 0%
    #####:  254:Value MemRefDescriptorView::alignedPtr() {
    #####:  255:  return elements[kAlignedPtrPosInMemRefDescriptor];
call    0 never executed
        -:  256:}
        -:  257:
function _ZN4mlir20MemRefDescriptorView6offsetEv called 0 returned 0% blocks executed 0%
    #####:  258:Value MemRefDescriptorView::offset() {
    #####:  259:  return elements[kOffsetPosInMemRefDescriptor];
call    0 never executed
        -:  260:}
        -:  261:
function _ZN4mlir20MemRefDescriptorView4sizeEj called 0 returned 0% blocks executed 0%
    #####:  262:Value MemRefDescriptorView::size(unsigned pos) {
    #####:  263:  return elements[kSizePosInMemRefDescriptor + pos];
call    0 never executed
        -:  264:}
        -:  265:
function _ZN4mlir20MemRefDescriptorView6strideEj called 0 returned 0% blocks executed 0%
    #####:  266:Value MemRefDescriptorView::stride(unsigned pos) {
    #####:  267:  return elements[kSizePosInMemRefDescriptor + rank + pos];
call    0 never executed
        -:  268:}
        -:  269:
        -:  270://===----------------------------------------------------------------------===//
        -:  271:// UnrankedMemRefDescriptor implementation
        -:  272://===----------------------------------------------------------------------===//
        -:  273:
        -:  274:/// Construct a helper for the given descriptor value.
function _ZN4mlir24UnrankedMemRefDescriptorC2ENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  275:UnrankedMemRefDescriptor::UnrankedMemRefDescriptor(Value descriptor)
    #####:  276:    : StructBuilder(descriptor) {}
call    0 never executed
        -:  277:
        -:  278:/// Builds IR creating an `undef` value of the descriptor type.
function _ZN4mlir24UnrankedMemRefDescriptor5undefERNS_9OpBuilderENS_8LocationENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  279:UnrankedMemRefDescriptor UnrankedMemRefDescriptor::undef(OpBuilder &builder,
        -:  280:                                                         Location loc,
        -:  281:                                                         Type descriptorType) {
    #####:  282:  Value descriptor = builder.create<LLVM::UndefOp>(loc, descriptorType);
call    0 never executed
call    1 never executed
    #####:  283:  return UnrankedMemRefDescriptor(descriptor);
call    0 never executed
        -:  284:}
function _ZN4mlir24UnrankedMemRefDescriptor4rankERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  285:Value UnrankedMemRefDescriptor::rank(OpBuilder &builder, Location loc) {
    #####:  286:  return extractPtr(builder, loc, kRankInUnrankedMemRefDescriptor);
call    0 never executed
        -:  287:}
function _ZN4mlir24UnrankedMemRefDescriptor7setRankERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  288:void UnrankedMemRefDescriptor::setRank(OpBuilder &builder, Location loc,
        -:  289:                                       Value v) {
    #####:  290:  setPtr(builder, loc, kRankInUnrankedMemRefDescriptor, v);
call    0 never executed
    #####:  291:}
function _ZN4mlir24UnrankedMemRefDescriptor13memRefDescPtrERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  292:Value UnrankedMemRefDescriptor::memRefDescPtr(OpBuilder &builder,
        -:  293:                                              Location loc) {
    #####:  294:  return extractPtr(builder, loc, kPtrInUnrankedMemRefDescriptor);
call    0 never executed
        -:  295:}
function _ZN4mlir24UnrankedMemRefDescriptor16setMemRefDescPtrERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  296:void UnrankedMemRefDescriptor::setMemRefDescPtr(OpBuilder &builder,
        -:  297:                                                Location loc, Value v) {
    #####:  298:  setPtr(builder, loc, kPtrInUnrankedMemRefDescriptor, v);
call    0 never executed
    #####:  299:}
        -:  300:
        -:  301:/// Builds IR populating an unranked MemRef descriptor structure from a list
        -:  302:/// of individual constituent values in the following order:
        -:  303:/// - rank of the memref;
        -:  304:/// - pointer to the memref descriptor.
function _ZN4mlir24UnrankedMemRefDescriptor4packERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_18UnrankedMemRefTypeENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  305:Value UnrankedMemRefDescriptor::pack(OpBuilder &builder, Location loc,
        -:  306:                                     LLVMTypeConverter &converter,
        -:  307:                                     UnrankedMemRefType type,
        -:  308:                                     ValueRange values) {
    #####:  309:  Type llvmType = converter.convertType(type);
call    0 never executed
    #####:  310:  auto d = UnrankedMemRefDescriptor::undef(builder, loc, llvmType);
call    0 never executed
        -:  311:
    #####:  312:  d.setRank(builder, loc, values[kRankInUnrankedMemRefDescriptor]);
call    0 never executed
call    1 never executed
    #####:  313:  d.setMemRefDescPtr(builder, loc, values[kPtrInUnrankedMemRefDescriptor]);
call    0 never executed
call    1 never executed
    #####:  314:  return d;
        -:  315:}
        -:  316:
        -:  317:/// Builds IR extracting individual elements that compose an unranked memref
        -:  318:/// descriptor and returns them as `results` list.
function _ZN4mlir24UnrankedMemRefDescriptor6unpackERNS_9OpBuilderENS_8LocationENS_5ValueERN4llvm15SmallVectorImplIS4_EE called 0 returned 0% blocks executed 0%
    #####:  319:void UnrankedMemRefDescriptor::unpack(OpBuilder &builder, Location loc,
        -:  320:                                      Value packed,
        -:  321:                                      SmallVectorImpl<Value> &results) {
    #####:  322:  UnrankedMemRefDescriptor d(packed);
call    0 never executed
    #####:  323:  results.reserve(results.size() + 2);
branch  0 never executed
branch  1 never executed
    #####:  324:  results.push_back(d.rank(builder, loc));
call    0 never executed
call    1 never executed
    #####:  325:  results.push_back(d.memRefDescPtr(builder, loc));
call    0 never executed
call    1 never executed
    #####:  326:}
        -:  327:
function _ZN4mlir24UnrankedMemRefDescriptor12computeSizesERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterEN4llvm8ArrayRefIS0_EERNS6_15SmallVectorImplINS_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:  328:void UnrankedMemRefDescriptor::computeSizes(
        -:  329:    OpBuilder &builder, Location loc, LLVMTypeConverter &typeConverter,
        -:  330:    ArrayRef<UnrankedMemRefDescriptor> values, SmallVectorImpl<Value> &sizes) {
    #####:  331:  if (values.empty())
branch  0 never executed
branch  1 never executed
    #####:  332:    return;
        -:  333:
        -:  334:  // Cache the index type.
    #####:  335:  Type indexType = typeConverter.getIndexType();
call    0 never executed
        -:  336:
        -:  337:  // Initialize shared constants.
    #####:  338:  Value one = createIndexAttrConstant(builder, loc, indexType, 1);
call    0 never executed
    #####:  339:  Value two = createIndexAttrConstant(builder, loc, indexType, 2);
call    0 never executed
    #####:  340:  Value pointerSize = createIndexAttrConstant(
    #####:  341:      builder, loc, indexType, ceilDiv(typeConverter.getPointerBitwidth(), 8));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  342:  Value indexSize =
branch  0 never executed
branch  1 never executed
        -:  343:      createIndexAttrConstant(builder, loc, indexType,
    #####:  344:                              ceilDiv(typeConverter.getIndexTypeBitwidth(), 8));
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  345:
    #####:  346:  sizes.reserve(sizes.size() + values.size());
branch  0 never executed
branch  1 never executed
    #####:  347:  for (UnrankedMemRefDescriptor desc : values) {
branch  0 never executed
branch  1 never executed
        -:  348:    // Emit IR computing the memory necessary to store the descriptor. This
        -:  349:    // assumes the descriptor to be
        -:  350:    //   { type*, type*, index, index[rank], index[rank] }
        -:  351:    // and densely packed, so the total size is
        -:  352:    //   2 * sizeof(pointer) + (1 + 2 * rank) * sizeof(index).
        -:  353:    // TODO: consider including the actual size (including eventual padding due
        -:  354:    // to data layout) into the unranked descriptor.
    #####:  355:    Value doublePointerSize =
    #####:  356:        builder.create<LLVM::MulOp>(loc, indexType, two, pointerSize);
call    0 never executed
call    1 never executed
        -:  357:
        -:  358:    // (1 + 2 * rank) * sizeof(index)
    #####:  359:    Value rank = desc.rank(builder, loc);
call    0 never executed
    #####:  360:    Value doubleRank = builder.create<LLVM::MulOp>(loc, indexType, two, rank);
call    0 never executed
call    1 never executed
    #####:  361:    Value doubleRankIncremented =
    #####:  362:        builder.create<LLVM::AddOp>(loc, indexType, doubleRank, one);
call    0 never executed
call    1 never executed
    #####:  363:    Value rankIndexSize = builder.create<LLVM::MulOp>(
    #####:  364:        loc, indexType, doubleRankIncremented, indexSize);
call    0 never executed
call    1 never executed
        -:  365:
        -:  366:    // Total allocation size.
    #####:  367:    Value allocationSize = builder.create<LLVM::AddOp>(
    #####:  368:        loc, indexType, doublePointerSize, rankIndexSize);
call    0 never executed
call    1 never executed
    #####:  369:    sizes.push_back(allocationSize);
call    0 never executed
        -:  370:  }
        -:  371:}
        -:  372:
function _ZN4mlir24UnrankedMemRefDescriptor12allocatedPtrERNS_9OpBuilderENS_8LocationENS_5ValueENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  373:Value UnrankedMemRefDescriptor::allocatedPtr(OpBuilder &builder, Location loc,
        -:  374:                                             Value memRefDescPtr,
        -:  375:                                             Type elemPtrPtrType) {
        -:  376:
    #####:  377:  Value elementPtrPtr =
    #####:  378:      builder.create<LLVM::BitcastOp>(loc, elemPtrPtrType, memRefDescPtr);
call    0 never executed
call    1 never executed
    #####:  379:  return builder.create<LLVM::LoadOp>(loc, elementPtrPtr);
call    0 never executed
        -:  380:}
        -:  381:
function _ZN4mlir24UnrankedMemRefDescriptor15setAllocatedPtrERNS_9OpBuilderENS_8LocationENS_5ValueENS_4TypeES4_ called 0 returned 0% blocks executed 0%
    #####:  382:void UnrankedMemRefDescriptor::setAllocatedPtr(OpBuilder &builder, Location loc,
        -:  383:                                               Value memRefDescPtr,
        -:  384:                                               Type elemPtrPtrType,
        -:  385:                                               Value allocatedPtr) {
    #####:  386:  Value elementPtrPtr =
    #####:  387:      builder.create<LLVM::BitcastOp>(loc, elemPtrPtrType, memRefDescPtr);
call    0 never executed
call    1 never executed
    #####:  388:  builder.create<LLVM::StoreOp>(loc, allocatedPtr, elementPtrPtr);
call    0 never executed
    #####:  389:}
        -:  390:
function _ZN4mlir24UnrankedMemRefDescriptor10alignedPtrERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  391:Value UnrankedMemRefDescriptor::alignedPtr(OpBuilder &builder, Location loc,
        -:  392:                                           LLVMTypeConverter &typeConverter,
        -:  393:                                           Value memRefDescPtr,
        -:  394:                                           Type elemPtrPtrType) {
    #####:  395:  Value elementPtrPtr =
    #####:  396:      builder.create<LLVM::BitcastOp>(loc, elemPtrPtrType, memRefDescPtr);
call    0 never executed
call    1 never executed
        -:  397:
    #####:  398:  Value alignedGep = builder.create<LLVM::GEPOp>(
    #####:  399:      loc, elemPtrPtrType, elementPtrPtr, ArrayRef<LLVM::GEPArg>{1});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  400:  return builder.create<LLVM::LoadOp>(loc, alignedGep);
call    0 never executed
        -:  401:}
        -:  402:
function _ZN4mlir24UnrankedMemRefDescriptor13setAlignedPtrERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueENS_4TypeES6_ called 0 returned 0% blocks executed 0%
    #####:  403:void UnrankedMemRefDescriptor::setAlignedPtr(OpBuilder &builder, Location loc,
        -:  404:                                             LLVMTypeConverter &typeConverter,
        -:  405:                                             Value memRefDescPtr,
        -:  406:                                             Type elemPtrPtrType,
        -:  407:                                             Value alignedPtr) {
    #####:  408:  Value elementPtrPtr =
    #####:  409:      builder.create<LLVM::BitcastOp>(loc, elemPtrPtrType, memRefDescPtr);
call    0 never executed
call    1 never executed
        -:  410:
    #####:  411:  Value alignedGep = builder.create<LLVM::GEPOp>(
    #####:  412:      loc, elemPtrPtrType, elementPtrPtr, ArrayRef<LLVM::GEPArg>{1});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  413:  builder.create<LLVM::StoreOp>(loc, alignedPtr, alignedGep);
call    0 never executed
    #####:  414:}
        -:  415:
function _ZN4mlir24UnrankedMemRefDescriptor6offsetERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  416:Value UnrankedMemRefDescriptor::offset(OpBuilder &builder, Location loc,
        -:  417:                                       LLVMTypeConverter &typeConverter,
        -:  418:                                       Value memRefDescPtr,
        -:  419:                                       Type elemPtrPtrType) {
    #####:  420:  Value elementPtrPtr =
    #####:  421:      builder.create<LLVM::BitcastOp>(loc, elemPtrPtrType, memRefDescPtr);
call    0 never executed
call    1 never executed
        -:  422:
    #####:  423:  Value offsetGep = builder.create<LLVM::GEPOp>(
    #####:  424:      loc, elemPtrPtrType, elementPtrPtr, ArrayRef<LLVM::GEPArg>{2});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  425:  offsetGep = builder.create<LLVM::BitcastOp>(
    #####:  426:      loc, LLVM::LLVMPointerType::get(typeConverter.getIndexType()), offsetGep);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  427:  return builder.create<LLVM::LoadOp>(loc, offsetGep);
call    0 never executed
        -:  428:}
        -:  429:
function _ZN4mlir24UnrankedMemRefDescriptor9setOffsetERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueENS_4TypeES6_ called 0 returned 0% blocks executed 0%
    #####:  430:void UnrankedMemRefDescriptor::setOffset(OpBuilder &builder, Location loc,
        -:  431:                                         LLVMTypeConverter &typeConverter,
        -:  432:                                         Value memRefDescPtr,
        -:  433:                                         Type elemPtrPtrType, Value offset) {
    #####:  434:  Value elementPtrPtr =
    #####:  435:      builder.create<LLVM::BitcastOp>(loc, elemPtrPtrType, memRefDescPtr);
call    0 never executed
call    1 never executed
        -:  436:
    #####:  437:  Value offsetGep = builder.create<LLVM::GEPOp>(
    #####:  438:      loc, elemPtrPtrType, elementPtrPtr, ArrayRef<LLVM::GEPArg>{2});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  439:  offsetGep = builder.create<LLVM::BitcastOp>(
    #####:  440:      loc, LLVM::LLVMPointerType::get(typeConverter.getIndexType()), offsetGep);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  441:  builder.create<LLVM::StoreOp>(loc, offset, offsetGep);
call    0 never executed
    #####:  442:}
        -:  443:
function _ZN4mlir24UnrankedMemRefDescriptor11sizeBasePtrERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueENS_4LLVM15LLVMPointerTypeE called 0 returned 0% blocks executed 0%
    #####:  444:Value UnrankedMemRefDescriptor::sizeBasePtr(
        -:  445:    OpBuilder &builder, Location loc, LLVMTypeConverter &typeConverter,
        -:  446:    Value memRefDescPtr, LLVM::LLVMPointerType elemPtrPtrType) {
    #####:  447:  Type elemPtrTy = elemPtrPtrType.getElementType();
call    0 never executed
    #####:  448:  Type indexTy = typeConverter.getIndexType();
call    0 never executed
    #####:  449:  Type structPtrTy =
    #####:  450:      LLVM::LLVMPointerType::get(LLVM::LLVMStructType::getLiteral(
    #####:  451:          indexTy.getContext(), {elemPtrTy, elemPtrTy, indexTy, indexTy}));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  452:  Value structPtr =
    #####:  453:      builder.create<LLVM::BitcastOp>(loc, structPtrTy, memRefDescPtr);
call    0 never executed
call    1 never executed
        -:  454:
    #####:  455:  return builder.create<LLVM::GEPOp>(loc, LLVM::LLVMPointerType::get(indexTy),
call    0 never executed
    #####:  456:                                     structPtr, ArrayRef<LLVM::GEPArg>{0, 3});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  457:}
        -:  458:
function _ZN4mlir24UnrankedMemRefDescriptor4sizeERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueES6_ called 0 returned 0% blocks executed 0%
    #####:  459:Value UnrankedMemRefDescriptor::size(OpBuilder &builder, Location loc,
        -:  460:                                     LLVMTypeConverter &typeConverter,
        -:  461:                                     Value sizeBasePtr, Value index) {
    #####:  462:  Type indexPtrTy = LLVM::LLVMPointerType::get(typeConverter.getIndexType());
call    0 never executed
call    1 never executed
    #####:  463:  Value sizeStoreGep =
    #####:  464:      builder.create<LLVM::GEPOp>(loc, indexPtrTy, sizeBasePtr, index);
call    0 never executed
call    1 never executed
    #####:  465:  return builder.create<LLVM::LoadOp>(loc, sizeStoreGep);
call    0 never executed
        -:  466:}
        -:  467:
function _ZN4mlir24UnrankedMemRefDescriptor7setSizeERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueES6_S6_ called 0 returned 0% blocks executed 0%
    #####:  468:void UnrankedMemRefDescriptor::setSize(OpBuilder &builder, Location loc,
        -:  469:                                       LLVMTypeConverter &typeConverter,
        -:  470:                                       Value sizeBasePtr, Value index,
        -:  471:                                       Value size) {
    #####:  472:  Type indexPtrTy = LLVM::LLVMPointerType::get(typeConverter.getIndexType());
call    0 never executed
call    1 never executed
    #####:  473:  Value sizeStoreGep =
    #####:  474:      builder.create<LLVM::GEPOp>(loc, indexPtrTy, sizeBasePtr, index);
call    0 never executed
call    1 never executed
    #####:  475:  builder.create<LLVM::StoreOp>(loc, size, sizeStoreGep);
call    0 never executed
    #####:  476:}
        -:  477:
function _ZN4mlir24UnrankedMemRefDescriptor13strideBasePtrERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueES6_ called 0 returned 0% blocks executed 0%
    #####:  478:Value UnrankedMemRefDescriptor::strideBasePtr(OpBuilder &builder, Location loc,
        -:  479:                                              LLVMTypeConverter &typeConverter,
        -:  480:                                              Value sizeBasePtr, Value rank) {
    #####:  481:  Type indexPtrTy = LLVM::LLVMPointerType::get(typeConverter.getIndexType());
call    0 never executed
call    1 never executed
    #####:  482:  return builder.create<LLVM::GEPOp>(loc, indexPtrTy, sizeBasePtr, rank);
call    0 never executed
        -:  483:}
        -:  484:
function _ZN4mlir24UnrankedMemRefDescriptor6strideERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueES6_S6_ called 0 returned 0% blocks executed 0%
    #####:  485:Value UnrankedMemRefDescriptor::stride(OpBuilder &builder, Location loc,
        -:  486:                                       LLVMTypeConverter &typeConverter,
        -:  487:                                       Value strideBasePtr, Value index,
        -:  488:                                       Value stride) {
    #####:  489:  Type indexPtrTy = LLVM::LLVMPointerType::get(typeConverter.getIndexType());
call    0 never executed
call    1 never executed
    #####:  490:  Value strideStoreGep =
    #####:  491:      builder.create<LLVM::GEPOp>(loc, indexPtrTy, strideBasePtr, index);
call    0 never executed
call    1 never executed
    #####:  492:  return builder.create<LLVM::LoadOp>(loc, strideStoreGep);
call    0 never executed
        -:  493:}
        -:  494:
function _ZN4mlir24UnrankedMemRefDescriptor9setStrideERNS_9OpBuilderENS_8LocationERNS_17LLVMTypeConverterENS_5ValueES6_S6_ called 0 returned 0% blocks executed 0%
    #####:  495:void UnrankedMemRefDescriptor::setStride(OpBuilder &builder, Location loc,
        -:  496:                                         LLVMTypeConverter &typeConverter,
        -:  497:                                         Value strideBasePtr, Value index,
        -:  498:                                         Value stride) {
    #####:  499:  Type indexPtrTy = LLVM::LLVMPointerType::get(typeConverter.getIndexType());
call    0 never executed
call    1 never executed
    #####:  500:  Value strideStoreGep =
    #####:  501:      builder.create<LLVM::GEPOp>(loc, indexPtrTy, strideBasePtr, index);
call    0 never executed
call    1 never executed
    #####:  502:  builder.create<LLVM::StoreOp>(loc, stride, strideStoreGep);
call    0 never executed
    #####:  503:}
