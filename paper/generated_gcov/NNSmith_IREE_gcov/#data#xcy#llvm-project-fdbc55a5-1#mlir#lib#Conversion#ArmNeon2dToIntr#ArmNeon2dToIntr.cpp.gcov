        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/ArmNeon2dToIntr/ArmNeon2dToIntr.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ArmNeon2dToIntr/CMakeFiles/obj.MLIRArmNeon2dToIntr.dir/ArmNeon2dToIntr.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ArmNeon2dToIntr/CMakeFiles/obj.MLIRArmNeon2dToIntr.dir/ArmNeon2dToIntr.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- ArmNeon2dToIntr.cpp - convert Arm Neon 2d ops to intrinsics --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/ArmNeon2dToIntr/ArmNeon2dToIntr.h"
        -:   10:
        -:   11:#include "mlir/Dialect/ArmNeon/ArmNeonDialect.h"
        -:   12:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   13:#include "mlir/IR/PatternMatch.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:#include "mlir/Pass/PassRegistry.h"
        -:   16:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_CONVERTARMNEON2DTOINTR
        -:   20:#include "mlir/Conversion/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::arm_neon;
        -:   25:
        -:   26:namespace {
        -:   27:
        -:   28:class Sdot2dLoweringPattern : public OpRewritePattern<Sdot2dOp> {
        -:   29:public:
        -:   30:  using OpRewritePattern::OpRewritePattern;
        -:   31:
        -:   32:  /// Convert to 1-dimensional vector type to match the requirements of
        -:   33:  /// arm.neon.intr.sdot
function _ZNK12_GLOBAL__N_121Sdot2dLoweringPattern15matchAndRewriteEN4mlir8arm_neon8Sdot2dOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   34:  LogicalResult matchAndRewrite(Sdot2dOp op,
        -:   35:                                PatternRewriter &rewriter) const override {
    #####:   36:    Type elemType = op.getB().getType().cast<VectorType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   37:    int length = op.getB().getType().cast<VectorType>().getShape()[0] *
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   38:                 Sdot2dOp::kReductionSize;
    #####:   39:    VectorType flattenedVectorType = VectorType::get({length}, elemType);
call    0 never executed
    #####:   40:    Value b2d = op.getB();
call    0 never executed
    #####:   41:    Value c2d = op.getC();
call    0 never executed
    #####:   42:    Location loc = op.getLoc();
call    0 never executed
    #####:   43:    Value b1d =
    #####:   44:        rewriter.create<vector::ShapeCastOp>(loc, flattenedVectorType, b2d);
call    0 never executed
call    1 never executed
    #####:   45:    Value c1d =
    #####:   46:        rewriter.create<vector::ShapeCastOp>(loc, flattenedVectorType, c2d);
call    0 never executed
call    1 never executed
    #####:   47:    Value newOp = rewriter.create<SdotOp>(loc, op.getRes().getType(), op.getA(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   48:                                          b1d, c1d);
call    0 never executed
call    1 never executed
    #####:   49:    rewriter.replaceOp(op, {newOp});
call    0 never executed
call    1 never executed
    #####:   50:    return success();
        -:   51:  }
        -:   52:};
        -:   53:
  326702*:   54:class ConvertArmNeon2dToIntr
call    0 never executed
call    1 returned 100%
        -:   55:    : public impl::ConvertArmNeon2dToIntrBase<ConvertArmNeon2dToIntr> {
function _ZN12_GLOBAL__N_122ConvertArmNeon2dToIntr14runOnOperationEv called 916 returned 100% blocks executed 69%
      916:   56:  void runOnOperation() override {
      916:   57:    auto *context = &getContext();
call    0 returned 100%
        -:   58:
     1832:   59:    RewritePatternSet patterns(context);
call    0 returned 100%
     1832:   60:    populateConvertArmNeon2dToIntrPatterns(patterns);
        -:   61:
      916:   62:    if (failed(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      916:   63:            applyPatternsAndFoldGreedily(getOperation(), std::move(patterns))))
call    0 returned 100%
    #####:   64:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:   65:  }
        -:   66:};
        -:   67:
        -:   68:} // namespace
        -:   69:
function _ZN4mlir38populateConvertArmNeon2dToIntrPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     916*:   70:void mlir::populateConvertArmNeon2dToIntrPatterns(RewritePatternSet &patterns) {
     916*:   71:  patterns.add<Sdot2dLoweringPattern>(patterns.getContext());
call    0 never executed
call    1 returned 100%
call    2 returned 100%
    #####:   72:}
        -:   73:
function _ZN4mlir32createConvertArmNeon2dToIntrPassEv called 326702 returned 100% blocks executed 100%
   326702:   74:std::unique_ptr<Pass> mlir::createConvertArmNeon2dToIntrPass() {
   326702:   75:  return std::make_unique<ConvertArmNeon2dToIntr>();
call    0 returned 100%
        -:   76:}
