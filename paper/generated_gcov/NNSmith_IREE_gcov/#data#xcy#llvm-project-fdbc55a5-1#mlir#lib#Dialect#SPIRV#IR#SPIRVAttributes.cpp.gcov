        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/SPIRV/IR/SPIRVAttributes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVAttributes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVAttributes.cpp.gcda
        -:    0:Runs:325554
        -:    1://===- SPIRVAttributes.cpp - SPIR-V attribute definitions -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.h"
        -:   10:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   11:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/IR/DialectImplementation.h"
        -:   14:#include "llvm/ADT/TypeSwitch.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::spirv;
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// TableGen'erated attribute utility functions
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
        -:   23:namespace mlir {
        -:   24:namespace spirv {
        -:   25:#include "mlir/Dialect/SPIRV/IR/SPIRVAttrUtils.inc"
        -:   26:} // namespace spirv
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Attribute storage classes
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32:namespace spirv {
        -:   33:namespace detail {
        -:   34:
        -:   35:struct InterfaceVarABIAttributeStorage : public AttributeStorage {
        -:   36:  using KeyTy = std::tuple<Attribute, Attribute, Attribute>;
        -:   37:
    #####:   38:  InterfaceVarABIAttributeStorage(Attribute descriptorSet, Attribute binding,
        -:   39:                                  Attribute storageClass)
    #####:   40:      : descriptorSet(descriptorSet), binding(binding),
    #####:   41:        storageClass(storageClass) {}
branch  0 never executed
branch  1 never executed
        -:   42:
    #####:   43:  bool operator==(const KeyTy &key) const {
    #####:   44:    return std::get<0>(key) == descriptorSet && std::get<1>(key) == binding &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   45:           std::get<2>(key) == storageClass;
branch  0 never executed
branch  1 never executed
        -:   46:  }
        -:   47:
        -:   48:  static InterfaceVarABIAttributeStorage *
    #####:   49:  construct(AttributeStorageAllocator &allocator, const KeyTy &key) {
    #####:   50:    return new (allocator.allocate<InterfaceVarABIAttributeStorage>())
call    0 never executed
    #####:   51:        InterfaceVarABIAttributeStorage(std::get<0>(key), std::get<1>(key),
    #####:   52:                                        std::get<2>(key));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   53:  }
        -:   54:
        -:   55:  Attribute descriptorSet;
        -:   56:  Attribute binding;
        -:   57:  Attribute storageClass;
        -:   58:};
        -:   59:
        -:   60:struct VerCapExtAttributeStorage : public AttributeStorage {
        -:   61:  using KeyTy = std::tuple<Attribute, Attribute, Attribute>;
        -:   62:
     6722:   63:  VerCapExtAttributeStorage(Attribute version, Attribute capabilities,
        -:   64:                            Attribute extensions)
     6722:   65:      : version(version), capabilities(capabilities), extensions(extensions) {}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   66:
      322:   67:  bool operator==(const KeyTy &key) const {
      322:   68:    return std::get<0>(key) == version && std::get<1>(key) == capabilities &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      322:   69:           std::get<2>(key) == extensions;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   70:  }
        -:   71:
        -:   72:  static VerCapExtAttributeStorage *
     6722:   73:  construct(AttributeStorageAllocator &allocator, const KeyTy &key) {
     6722:   74:    return new (allocator.allocate<VerCapExtAttributeStorage>())
call    0 returned 100%
     6722:   75:        VerCapExtAttributeStorage(std::get<0>(key), std::get<1>(key),
     6722:   76:                                  std::get<2>(key));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   77:  }
        -:   78:
        -:   79:  Attribute version;
        -:   80:  Attribute capabilities;
        -:   81:  Attribute extensions;
        -:   82:};
        -:   83:
        -:   84:struct TargetEnvAttributeStorage : public AttributeStorage {
        -:   85:  using KeyTy = std::tuple<Attribute, Vendor, DeviceType, uint32_t, Attribute>;
        -:   86:
     6722:   87:  TargetEnvAttributeStorage(Attribute triple, Vendor vendorID,
        -:   88:                            DeviceType deviceType, uint32_t deviceID,
        -:   89:                            Attribute limits)
     6722:   90:      : triple(triple), limits(limits), vendorID(vendorID),
     6722:   91:        deviceType(deviceType), deviceID(deviceID) {}
        -:   92:
      322:   93:  bool operator==(const KeyTy &key) const {
      644:   94:    return key ==
      322:   95:           std::make_tuple(triple, vendorID, deviceType, deviceID, limits);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   96:  }
        -:   97:
        -:   98:  static TargetEnvAttributeStorage *
function _ZN4mlir5spirv6detail25TargetEnvAttributeStorage9constructERNS_14StorageUniquer16StorageAllocatorERKSt5tupleIJNS_9AttributeENS0_6VendorENS0_10DeviceTypeEjS7_EE called 6722 returned 100% blocks executed 100%
     6722:   99:  construct(AttributeStorageAllocator &allocator, const KeyTy &key) {
     6722:  100:    return new (allocator.allocate<TargetEnvAttributeStorage>())
call    0 returned 100%
     6722:  101:        TargetEnvAttributeStorage(std::get<0>(key), std::get<1>(key),
     6722:  102:                                  std::get<2>(key), std::get<3>(key),
     6722:  103:                                  std::get<4>(key));
call    0 returned 100%
        -:  104:  }
        -:  105:
        -:  106:  Attribute triple;
        -:  107:  Attribute limits;
        -:  108:  Vendor vendorID;
        -:  109:  DeviceType deviceType;
        -:  110:  uint32_t deviceID;
        -:  111:};
        -:  112:} // namespace detail
        -:  113:} // namespace spirv
        -:  114:} // namespace mlir
        -:  115:
        -:  116://===----------------------------------------------------------------------===//
        -:  117:// InterfaceVarABIAttr
        -:  118://===----------------------------------------------------------------------===//
        -:  119:
        -:  120:spirv::InterfaceVarABIAttr
function _ZN4mlir5spirv19InterfaceVarABIAttr3getEjjN4llvm8OptionalINS0_12StorageClassEEEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  121:spirv::InterfaceVarABIAttr::get(uint32_t descriptorSet, uint32_t binding,
        -:  122:                                Optional<spirv::StorageClass> storageClass,
        -:  123:                                MLIRContext *context) {
    #####:  124:  Builder b(context);
call    0 never executed
    #####:  125:  auto descriptorSetAttr = b.getI32IntegerAttr(descriptorSet);
call    0 never executed
    #####:  126:  auto bindingAttr = b.getI32IntegerAttr(binding);
call    0 never executed
    #####:  127:  auto storageClassAttr =
branch  0 never executed
branch  1 never executed
    #####:  128:      storageClass ? b.getI32IntegerAttr(static_cast<uint32_t>(*storageClass))
call    0 never executed
    #####:  129:                   : IntegerAttr();
branch  0 never executed
branch  1 never executed
    #####:  130:  return get(descriptorSetAttr, bindingAttr, storageClassAttr);
call    0 never executed
        -:  131:}
        -:  132:
        -:  133:spirv::InterfaceVarABIAttr
function _ZN4mlir5spirv19InterfaceVarABIAttr3getENS_11IntegerAttrES2_S2_ called 0 returned 0% blocks executed 0%
    #####:  134:spirv::InterfaceVarABIAttr::get(IntegerAttr descriptorSet, IntegerAttr binding,
        -:  135:                                IntegerAttr storageClass) {
    #####:  136:  assert(descriptorSet && binding);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  137:  MLIRContext *context = descriptorSet.getContext();
call    0 never executed
    #####:  138:  return Base::get(context, descriptorSet, binding, storageClass);
call    0 never executed
        -:  139:}
        -:  140:
function _ZN4mlir5spirv19InterfaceVarABIAttr11getKindNameEv called 0 returned 0% blocks executed 0%
    #####:  141:StringRef spirv::InterfaceVarABIAttr::getKindName() {
    #####:  142:  return "interface_var_abi";
        -:  143:}
        -:  144:
function _ZN4mlir5spirv19InterfaceVarABIAttr10getBindingEv called 0 returned 0% blocks executed 0%
    #####:  145:uint32_t spirv::InterfaceVarABIAttr::getBinding() {
    #####:  146:  return getImpl()->binding.cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
        -:  147:}
        -:  148:
function _ZN4mlir5spirv19InterfaceVarABIAttr16getDescriptorSetEv called 0 returned 0% blocks executed 0%
    #####:  149:uint32_t spirv::InterfaceVarABIAttr::getDescriptorSet() {
    #####:  150:  return getImpl()->descriptorSet.cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
        -:  151:}
        -:  152:
function _ZN4mlir5spirv19InterfaceVarABIAttr15getStorageClassEv called 0 returned 0% blocks executed 0%
    #####:  153:Optional<spirv::StorageClass> spirv::InterfaceVarABIAttr::getStorageClass() {
    #####:  154:  if (getImpl()->storageClass)
branch  0 never executed
branch  1 never executed
    #####:  155:    return static_cast<spirv::StorageClass>(
branch  0 never executed
branch  1 never executed
    #####:  156:        getImpl()->storageClass.cast<IntegerAttr>().getValue().getZExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  157:  return llvm::None;
        -:  158:}
        -:  159:
function _ZN4mlir5spirv19InterfaceVarABIAttr6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_11IntegerAttrES7_S7_ called 0 returned 0% blocks executed 0%
    #####:  160:LogicalResult spirv::InterfaceVarABIAttr::verify(
        -:  161:    function_ref<InFlightDiagnostic()> emitError, IntegerAttr descriptorSet,
        -:  162:    IntegerAttr binding, IntegerAttr storageClass) {
    #####:  163:  if (!descriptorSet.getType().isSignlessInteger(32))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  164:    return emitError() << "expected 32-bit integer for descriptor set";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  165:
    #####:  166:  if (!binding.getType().isSignlessInteger(32))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  167:    return emitError() << "expected 32-bit integer for binding";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  168:
    #####:  169:  if (storageClass) {
branch  0 never executed
branch  1 never executed
    #####:  170:    if (auto storageClassAttr = storageClass.cast<IntegerAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  171:      auto storageClassValue =
    #####:  172:          spirv::symbolizeStorageClass(storageClassAttr.getInt());
call    0 never executed
call    1 never executed
    #####:  173:      if (!storageClassValue)
branch  0 never executed
branch  1 never executed
    #####:  174:        return emitError() << "unknown storage class";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  175:    } else {
    #####:  176:      return emitError() << "expected valid storage class";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  177:    }
        -:  178:  }
        -:  179:
    #####:  180:  return success();
        -:  181:}
        -:  182:
        -:  183://===----------------------------------------------------------------------===//
        -:  184:// VerCapExtAttr
        -:  185://===----------------------------------------------------------------------===//
        -:  186:
function _ZN4mlir5spirv13VerCapExtAttr3getENS0_7VersionEN4llvm8ArrayRefINS0_10CapabilityEEENS4_INS0_9ExtensionEEEPNS_11MLIRContextE called 7044 returned 100% blocks executed 59%
     7044:  187:spirv::VerCapExtAttr spirv::VerCapExtAttr::get(
        -:  188:    spirv::Version version, ArrayRef<spirv::Capability> capabilities,
        -:  189:    ArrayRef<spirv::Extension> extensions, MLIRContext *context) {
     7044:  190:  Builder b(context);
call    0 returned 100%
        -:  191:
     7044:  192:  auto versionAttr = b.getI32IntegerAttr(static_cast<uint32_t>(version));
call    0 returned 100%
        -:  193:
     7044:  194:  SmallVector<Attribute, 4> capAttrs;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     7044:  195:  capAttrs.reserve(capabilities.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    14088:  196:  for (spirv::Capability cap : capabilities)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     7044:  197:    capAttrs.push_back(b.getI32IntegerAttr(static_cast<uint32_t>(cap)));
call    0 returned 100%
call    1 returned 100%
        -:  198:
    14088:  199:  SmallVector<Attribute, 4> extAttrs;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     7044:  200:  extAttrs.reserve(extensions.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    7044*:  201:  for (spirv::Extension ext : extensions)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  202:    extAttrs.push_back(b.getStringAttr(spirv::stringifyExtension(ext)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  203:
     7044:  204:  return get(versionAttr, b.getArrayAttr(capAttrs), b.getArrayAttr(extAttrs));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  205:}
        -:  206:
function _ZN4mlir5spirv13VerCapExtAttr3getENS_11IntegerAttrENS_9ArrayAttrES3_ called 7044 returned 100% blocks executed 86%
     7044:  207:spirv::VerCapExtAttr spirv::VerCapExtAttr::get(IntegerAttr version,
        -:  208:                                               ArrayAttr capabilities,
        -:  209:                                               ArrayAttr extensions) {
    7044*:  210:  assert(version && capabilities && extensions);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
     7044:  211:  MLIRContext *context = version.getContext();
call    0 returned 100%
     7044:  212:  return Base::get(context, version, capabilities, extensions);
call    0 returned 100%
        -:  213:}
        -:  214:
function _ZN4mlir5spirv13VerCapExtAttr11getKindNameEv called 0 returned 0% blocks executed 0%
    #####:  215:StringRef spirv::VerCapExtAttr::getKindName() { return "vce"; }
        -:  216:
function _ZN4mlir5spirv13VerCapExtAttr10getVersionEv called 16300 returned 100% blocks executed 71%
    16300:  217:spirv::Version spirv::VerCapExtAttr::getVersion() {
    16300:  218:  return static_cast<spirv::Version>(
    16300:  219:      getImpl()->version.cast<IntegerAttr>().getValue().getZExtValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  220:}
        -:  221:
function _ZN4mlir5spirv13VerCapExtAttr12ext_iteratorC2EPKNS_9AttributeE called 0 returned 0% blocks executed 0%
   14088*:  222:spirv::VerCapExtAttr::ext_iterator::ext_iterator(ArrayAttr::iterator it)
        -:  223:    : llvm::mapped_iterator<ArrayAttr::iterator,
        -:  224:                            spirv::Extension (*)(Attribute)>(
function _ZZN4mlir5spirv13VerCapExtAttr12ext_iteratorC4EPKNS_9AttributeEENKUlS3_E_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  225:          it, [](Attribute attr) {
    #####:  226:            return *symbolizeExtension(attr.cast<StringAttr>().getValue());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
   14088*:  227:          }) {}
        -:  228:
function _ZN4mlir5spirv13VerCapExtAttr13getExtensionsEv called 14088 returned 100% blocks executed 100%
    14088:  229:spirv::VerCapExtAttr::ext_range spirv::VerCapExtAttr::getExtensions() {
    42264:  230:  auto range = getExtensionsAttr().getValue();
    14088:  231:  return {ext_iterator(range.begin()), ext_iterator(range.end())};
        -:  232:}
        -:  233:
function _ZN4mlir5spirv13VerCapExtAttr17getExtensionsAttrEv called 0 returned 0% blocks executed 0%
   14088*:  234:ArrayAttr spirv::VerCapExtAttr::getExtensionsAttr() {
   14088*:  235:  return getImpl()->extensions.cast<ArrayAttr>();
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  236:}
        -:  237:
function _ZN4mlir5spirv13VerCapExtAttr12cap_iteratorC2EPKNS_9AttributeE called 0 returned 0% blocks executed 0%
   14088*:  238:spirv::VerCapExtAttr::cap_iterator::cap_iterator(ArrayAttr::iterator it)
        -:  239:    : llvm::mapped_iterator<ArrayAttr::iterator,
        -:  240:                            spirv::Capability (*)(Attribute)>(
function _ZZN4mlir5spirv13VerCapExtAttr12cap_iteratorC4EPKNS_9AttributeEENKUlS3_E_clES3_.isra.0 called 14088 returned 100% blocks executed 70%
    14088:  241:          it, [](Attribute attr) {
    14088:  242:            return *symbolizeCapability(
call    0 returned 100%
    14088:  243:                attr.cast<IntegerAttr>().getValue().getZExtValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
   14088*:  244:          }) {}
        -:  245:
function _ZN4mlir5spirv13VerCapExtAttr15getCapabilitiesEv called 14088 returned 100% blocks executed 100%
    14088:  246:spirv::VerCapExtAttr::cap_range spirv::VerCapExtAttr::getCapabilities() {
    42264:  247:  auto range = getCapabilitiesAttr().getValue();
    14088:  248:  return {cap_iterator(range.begin()), cap_iterator(range.end())};
        -:  249:}
        -:  250:
function _ZN4mlir5spirv13VerCapExtAttr19getCapabilitiesAttrEv called 0 returned 0% blocks executed 0%
   14088*:  251:ArrayAttr spirv::VerCapExtAttr::getCapabilitiesAttr() {
   14088*:  252:  return getImpl()->capabilities.cast<ArrayAttr>();
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  253:}
        -:  254:
        -:  255:LogicalResult
function _ZN4mlir5spirv13VerCapExtAttr6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_11IntegerAttrENS_9ArrayAttrES8_ called 7044 returned 100% blocks executed 42%
     7044:  256:spirv::VerCapExtAttr::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  257:                             IntegerAttr version, ArrayAttr capabilities,
        -:  258:                             ArrayAttr extensions) {
     7044:  259:  if (!version.getType().isSignlessInteger(32))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  260:    return emitError() << "expected 32-bit integer for version";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  261:
function _ZZN4mlir5spirv13VerCapExtAttr6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_11IntegerAttrENS_9ArrayAttrES8_ENKUlNS_9AttributeEE_clES9_.isra.0 called 7044 returned 100% blocks executed 75%
     7044:  262:  if (!llvm::all_of(capabilities.getValue(), [](Attribute attr) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     7044:  263:        if (auto intAttr = attr.dyn_cast<IntegerAttr>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     7044:  264:          if (spirv::symbolizeCapability(intAttr.getValue().getZExtValue()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
     7044:  265:            return true;
    #####:  266:        return false;
        -:  267:      }))
    #####:  268:    return emitError() << "unknown capability in capability list";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  269:
function _ZZN4mlir5spirv13VerCapExtAttr6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_11IntegerAttrENS_9ArrayAttrES8_ENKUlNS_9AttributeEE0_clES9_.isra.0 called 0 returned 0% blocks executed 0%
    7044*:  270:  if (!llvm::all_of(extensions.getValue(), [](Attribute attr) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  271:        if (auto strAttr = attr.dyn_cast<StringAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  272:          if (spirv::symbolizeExtension(strAttr.getValue()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  273:            return true;
    #####:  274:        return false;
        -:  275:      }))
    #####:  276:    return emitError() << "unknown extension in extension list";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  277:
     7044:  278:  return success();
        -:  279:}
        -:  280:
        -:  281://===----------------------------------------------------------------------===//
        -:  282:// TargetEnvAttr
        -:  283://===----------------------------------------------------------------------===//
        -:  284:
function _ZN4mlir5spirv13TargetEnvAttr3getENS0_13VerCapExtAttrENS0_6VendorENS0_10DeviceTypeEjNS0_18ResourceLimitsAttrE called 7044 returned 100% blocks executed 83%
     7044:  285:spirv::TargetEnvAttr spirv::TargetEnvAttr::get(spirv::VerCapExtAttr triple,
        -:  286:                                               Vendor vendorID,
        -:  287:                                               DeviceType deviceType,
        -:  288:                                               uint32_t deviceID,
        -:  289:                                               ResourceLimitsAttr limits) {
    7044*:  290:  assert(triple && limits && "expected valid triple and limits");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
     7044:  291:  MLIRContext *context = triple.getContext();
call    0 returned 100%
     7044:  292:  return Base::get(context, triple, vendorID, deviceType, deviceID, limits);
call    0 returned 100%
        -:  293:}
        -:  294:
function _ZN4mlir5spirv13TargetEnvAttr11getKindNameEv called 0 returned 0% blocks executed 0%
    #####:  295:StringRef spirv::TargetEnvAttr::getKindName() { return "target_env"; }
        -:  296:
function _ZNK4mlir5spirv13TargetEnvAttr13getTripleAttrEv called 0 returned 0% blocks executed 0%
   44476*:  297:spirv::VerCapExtAttr spirv::TargetEnvAttr::getTripleAttr() const {
    #####:  298:  return getImpl()->triple.cast<spirv::VerCapExtAttr>();
call    0 never executed
        -:  299:}
        -:  300:
function _ZNK4mlir5spirv13TargetEnvAttr10getVersionEv called 16300 returned 100% blocks executed 100%
    16300:  301:spirv::Version spirv::TargetEnvAttr::getVersion() const {
    16300:  302:  return getTripleAttr().getVersion();
call    0 returned 100%
call    1 returned 100%
        -:  303:}
        -:  304:
function _ZN4mlir5spirv13TargetEnvAttr13getExtensionsEv called 14088 returned 100% blocks executed 100%
    14088:  305:spirv::VerCapExtAttr::ext_range spirv::TargetEnvAttr::getExtensions() {
    14088:  306:  return getTripleAttr().getExtensions();
call    0 returned 100%
call    1 returned 100%
        -:  307:}
        -:  308:
function _ZN4mlir5spirv13TargetEnvAttr17getExtensionsAttrEv called 0 returned 0% blocks executed 0%
    #####:  309:ArrayAttr spirv::TargetEnvAttr::getExtensionsAttr() {
    #####:  310:  return getTripleAttr().getExtensionsAttr();
call    0 never executed
call    1 never executed
        -:  311:}
        -:  312:
function _ZN4mlir5spirv13TargetEnvAttr15getCapabilitiesEv called 14088 returned 100% blocks executed 100%
    14088:  313:spirv::VerCapExtAttr::cap_range spirv::TargetEnvAttr::getCapabilities() {
    14088:  314:  return getTripleAttr().getCapabilities();
call    0 returned 100%
call    1 returned 100%
        -:  315:}
        -:  316:
function _ZN4mlir5spirv13TargetEnvAttr19getCapabilitiesAttrEv called 0 returned 0% blocks executed 0%
    #####:  317:ArrayAttr spirv::TargetEnvAttr::getCapabilitiesAttr() {
    #####:  318:  return getTripleAttr().getCapabilitiesAttr();
call    0 never executed
call    1 never executed
        -:  319:}
        -:  320:
function _ZNK4mlir5spirv13TargetEnvAttr11getVendorIDEv called 0 returned 0% blocks executed 0%
    #####:  321:spirv::Vendor spirv::TargetEnvAttr::getVendorID() const {
    #####:  322:  return getImpl()->vendorID;
        -:  323:}
        -:  324:
function _ZNK4mlir5spirv13TargetEnvAttr13getDeviceTypeEv called 0 returned 0% blocks executed 0%
    #####:  325:spirv::DeviceType spirv::TargetEnvAttr::getDeviceType() const {
    #####:  326:  return getImpl()->deviceType;
        -:  327:}
        -:  328:
function _ZNK4mlir5spirv13TargetEnvAttr11getDeviceIDEv called 0 returned 0% blocks executed 0%
    #####:  329:uint32_t spirv::TargetEnvAttr::getDeviceID() const {
    #####:  330:  return getImpl()->deviceID;
        -:  331:}
        -:  332:
function _ZNK4mlir5spirv13TargetEnvAttr17getResourceLimitsEv called 0 returned 0% blocks executed 0%
    #####:  333:spirv::ResourceLimitsAttr spirv::TargetEnvAttr::getResourceLimits() const {
    #####:  334:  return getImpl()->limits.cast<spirv::ResourceLimitsAttr>();
call    0 never executed
        -:  335:}
        -:  336:
        -:  337://===----------------------------------------------------------------------===//
        -:  338:// ODS Generated Attributes
        -:  339://===----------------------------------------------------------------------===//
        -:  340:
        -:  341:#define GET_ATTRDEF_CLASSES
        -:  342:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.cpp.inc"
        -:  343:
        -:  344://===----------------------------------------------------------------------===//
        -:  345:// Attribute Parsing
        -:  346://===----------------------------------------------------------------------===//
        -:  347:
        -:  348:/// Parses a comma-separated list of keywords, invokes `processKeyword` on each
        -:  349:/// of the parsed keyword, and returns failure if any error occurs.
        -:  350:static ParseResult
function _ZL16parseKeywordListRN4mlir16DialectAsmParserEN4llvm12function_refIFNS_13LogicalResultENS2_5SMLocENS2_9StringRefEEEE called 0 returned 0% blocks executed 0%
    #####:  351:parseKeywordList(DialectAsmParser &parser,
        -:  352:                 function_ref<LogicalResult(SMLoc, StringRef)> processKeyword) {
    #####:  353:  if (parser.parseLSquare())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  354:    return failure();
        -:  355:
        -:  356:  // Special case for empty list.
    #####:  357:  if (succeeded(parser.parseOptionalRSquare()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  358:    return success();
        -:  359:
        -:  360:  // Keep parsing the keyword and an optional comma following it. If the comma
        -:  361:  // is successfully parsed, then we have more keywords to parse.
function _ZZL16parseKeywordListRN4mlir16DialectAsmParserEN4llvm12function_refIFNS_13LogicalResultENS2_5SMLocENS2_9StringRefEEEEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  362:  if (failed(parser.parseCommaSeparatedList([&]() {
branch  0 never executed
branch  1 never executed
    #####:  363:        auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:  364:        StringRef keyword;
    #####:  365:        if (parser.parseKeyword(&keyword) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  366:            failed(processKeyword(loc, keyword)))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  367:          return failure();
    #####:  368:        return success();
    #####:  369:      })))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  370:    return failure();
    #####:  371:  return parser.parseRSquare();
call    0 never executed
        -:  372:}
        -:  373:
        -:  374:/// Parses a spirv::InterfaceVarABIAttr.
function _ZL24parseInterfaceVarABIAttrRN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  375:static Attribute parseInterfaceVarABIAttr(DialectAsmParser &parser) {
    #####:  376:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  377:    return {};
        -:  378:
    #####:  379:  Builder &builder = parser.getBuilder();
call    0 never executed
        -:  380:
    #####:  381:  if (parser.parseLParen())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  382:    return {};
        -:  383:
    #####:  384:  IntegerAttr descriptorSetAttr;
    #####:  385:  {
    #####:  386:    auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:  387:    uint32_t descriptorSet = 0;
    #####:  388:    auto descriptorSetParseResult = parser.parseOptionalInteger(descriptorSet);
call    0 never executed
        -:  389:
    #####:  390:    if (!descriptorSetParseResult.has_value() ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  391:        failed(*descriptorSetParseResult)) {
branch  0 never executed
branch  1 never executed
    #####:  392:      parser.emitError(loc, "missing descriptor set");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  393:      return {};
        -:  394:    }
    #####:  395:    descriptorSetAttr = builder.getI32IntegerAttr(descriptorSet);
call    0 never executed
        -:  396:  }
        -:  397:
    #####:  398:  if (parser.parseComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  399:    return {};
        -:  400:
    #####:  401:  IntegerAttr bindingAttr;
    #####:  402:  {
    #####:  403:    auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:  404:    uint32_t binding = 0;
    #####:  405:    auto bindingParseResult = parser.parseOptionalInteger(binding);
call    0 never executed
        -:  406:
    #####:  407:    if (!bindingParseResult.has_value() || failed(*bindingParseResult)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  408:      parser.emitError(loc, "missing binding");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  409:      return {};
        -:  410:    }
    #####:  411:    bindingAttr = builder.getI32IntegerAttr(binding);
call    0 never executed
        -:  412:  }
        -:  413:
    #####:  414:  if (parser.parseRParen())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  415:    return {};
        -:  416:
    #####:  417:  IntegerAttr storageClassAttr;
    #####:  418:  {
    #####:  419:    if (succeeded(parser.parseOptionalComma())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  420:      auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:  421:      StringRef storageClass;
    #####:  422:      if (parser.parseKeyword(&storageClass))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  423:        return {};
        -:  424:
    #####:  425:      if (auto storageClassSymbol =
branch  0 never executed
branch  1 never executed
    #####:  426:              spirv::symbolizeStorageClass(storageClass)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  427:        storageClassAttr = builder.getI32IntegerAttr(
call    0 never executed
    #####:  428:            static_cast<uint32_t>(*storageClassSymbol));
call    0 never executed
        -:  429:      } else {
    #####:  430:        parser.emitError(loc, "unknown storage class: ") << storageClass;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  431:        return {};
        -:  432:      }
        -:  433:    }
        -:  434:  }
        -:  435:
    #####:  436:  if (parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  437:    return {};
        -:  438:
    #####:  439:  return spirv::InterfaceVarABIAttr::get(descriptorSetAttr, bindingAttr,
    #####:  440:                                         storageClassAttr);
call    0 never executed
        -:  441:}
        -:  442:
function _ZL18parseVerCapExtAttrRN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  443:static Attribute parseVerCapExtAttr(DialectAsmParser &parser) {
    #####:  444:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  445:    return {};
        -:  446:
    #####:  447:  Builder &builder = parser.getBuilder();
call    0 never executed
        -:  448:
    #####:  449:  IntegerAttr versionAttr;
    #####:  450:  {
    #####:  451:    auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:  452:    StringRef version;
    #####:  453:    if (parser.parseKeyword(&version) || parser.parseComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  454:      return {};
        -:  455:
    #####:  456:    if (auto versionSymbol = spirv::symbolizeVersion(version)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  457:      versionAttr =
call    0 never executed
    #####:  458:          builder.getI32IntegerAttr(static_cast<uint32_t>(*versionSymbol));
call    0 never executed
        -:  459:    } else {
    #####:  460:      parser.emitError(loc, "unknown version: ") << version;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  461:      return {};
        -:  462:    }
        -:  463:  }
        -:  464:
    #####:  465:  ArrayAttr capabilitiesAttr;
    #####:  466:  {
    #####:  467:    SmallVector<Attribute, 4> capabilities;
call    0 never executed
    #####:  468:    SMLoc errorloc;
    #####:  469:    StringRef errorKeyword;
        -:  470:
function _ZZL18parseVerCapExtAttrRN4mlir16DialectAsmParserEENKUlN4llvm5SMLocENS2_9StringRefEE_clES3_S4_ called 0 returned 0% blocks executed 0%
    #####:  471:    auto processCapability = [&](SMLoc loc, StringRef capability) {
    #####:  472:      if (auto capSymbol = spirv::symbolizeCapability(capability)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  473:        capabilities.push_back(
call    0 never executed
    #####:  474:            builder.getI32IntegerAttr(static_cast<uint32_t>(*capSymbol)));
call    0 never executed
    #####:  475:        return success();
        -:  476:      }
    #####:  477:      return errorloc = loc, errorKeyword = capability, failure();
    #####:  478:    };
    #####:  479:    if (parseKeywordList(parser, processCapability) || parser.parseComma()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  480:      if (!errorKeyword.empty())
branch  0 never executed
branch  1 never executed
    #####:  481:        parser.emitError(errorloc, "unknown capability: ") << errorKeyword;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  482:      return {};
branch  0 never executed
branch  1 never executed
        -:  483:    }
        -:  484:
    #####:  485:    capabilitiesAttr = builder.getArrayAttr(capabilities);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  486:  }
        -:  487:
    #####:  488:  ArrayAttr extensionsAttr;
    #####:  489:  {
    #####:  490:    SmallVector<Attribute, 1> extensions;
call    0 never executed
    #####:  491:    SMLoc errorloc;
    #####:  492:    StringRef errorKeyword;
        -:  493:
function _ZZL18parseVerCapExtAttrRN4mlir16DialectAsmParserEENKUlN4llvm5SMLocENS2_9StringRefEE0_clES3_S4_ called 0 returned 0% blocks executed 0%
    #####:  494:    auto processExtension = [&](SMLoc loc, StringRef extension) {
    #####:  495:      if (spirv::symbolizeExtension(extension)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  496:        extensions.push_back(builder.getStringAttr(extension));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  497:        return success();
        -:  498:      }
    #####:  499:      return errorloc = loc, errorKeyword = extension, failure();
    #####:  500:    };
    #####:  501:    if (parseKeywordList(parser, processExtension)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  502:      if (!errorKeyword.empty())
branch  0 never executed
branch  1 never executed
    #####:  503:        parser.emitError(errorloc, "unknown extension: ") << errorKeyword;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  504:      return {};
branch  0 never executed
branch  1 never executed
        -:  505:    }
        -:  506:
    #####:  507:    extensionsAttr = builder.getArrayAttr(extensions);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  508:  }
        -:  509:
    #####:  510:  if (parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  511:    return {};
        -:  512:
    #####:  513:  return spirv::VerCapExtAttr::get(versionAttr, capabilitiesAttr,
    #####:  514:                                   extensionsAttr);
call    0 never executed
        -:  515:}
        -:  516:
        -:  517:/// Parses a spirv::TargetEnvAttr.
function _ZL18parseTargetEnvAttrRN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  518:static Attribute parseTargetEnvAttr(DialectAsmParser &parser) {
    #####:  519:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  520:    return {};
        -:  521:
    #####:  522:  spirv::VerCapExtAttr tripleAttr;
    #####:  523:  if (parser.parseAttribute(tripleAttr) || parser.parseComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  524:    return {};
        -:  525:
        -:  526:  // Parse [vendor[:device-type[:device-id]]]
    #####:  527:  Vendor vendorID = Vendor::Unknown;
    #####:  528:  DeviceType deviceType = DeviceType::Unknown;
    #####:  529:  uint32_t deviceID = spirv::TargetEnvAttr::kUnknownDeviceID;
    #####:  530:  {
    #####:  531:    auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:  532:    StringRef vendorStr;
    #####:  533:    if (succeeded(parser.parseOptionalKeyword(&vendorStr))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  534:      if (auto vendorSymbol = spirv::symbolizeVendor(vendorStr)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  535:        vendorID = *vendorSymbol;
        -:  536:      } else {
    #####:  537:        parser.emitError(loc, "unknown vendor: ") << vendorStr;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  538:      }
        -:  539:
    #####:  540:      if (succeeded(parser.parseOptionalColon())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  541:        loc = parser.getCurrentLocation();
call    0 never executed
    #####:  542:        StringRef deviceTypeStr;
    #####:  543:        if (parser.parseKeyword(&deviceTypeStr))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  544:          return {};
    #####:  545:        if (auto deviceTypeSymbol = spirv::symbolizeDeviceType(deviceTypeStr)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  546:          deviceType = *deviceTypeSymbol;
        -:  547:        } else {
    #####:  548:          parser.emitError(loc, "unknown device type: ") << deviceTypeStr;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  549:        }
        -:  550:
    #####:  551:        if (succeeded(parser.parseOptionalColon())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  552:          loc = parser.getCurrentLocation();
call    0 never executed
    #####:  553:          if (parser.parseInteger(deviceID))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  554:            return {};
        -:  555:        }
        -:  556:      }
    #####:  557:      if (parser.parseComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  558:        return {};
        -:  559:    }
        -:  560:  }
        -:  561:
    #####:  562:  ResourceLimitsAttr limitsAttr;
    #####:  563:  if (parser.parseAttribute(limitsAttr) || parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  564:    return {};
        -:  565:
    #####:  566:  return spirv::TargetEnvAttr::get(tripleAttr, vendorID, deviceType, deviceID,
    #####:  567:                                   limitsAttr);
call    0 never executed
        -:  568:}
        -:  569:
function _ZNK4mlir5spirv12SPIRVDialect14parseAttributeERNS_16DialectAsmParserENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  570:Attribute SPIRVDialect::parseAttribute(DialectAsmParser &parser,
        -:  571:                                       Type type) const {
        -:  572:  // SPIR-V attributes are dictionaries so they do not have type.
    #####:  573:  if (type) {
branch  0 never executed
branch  1 never executed
    #####:  574:    parser.emitError(parser.getNameLoc(), "unexpected type");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  575:    return {};
        -:  576:  }
        -:  577:
        -:  578:  // Parse the kind keyword first.
    #####:  579:  StringRef attrKind;
    #####:  580:  Attribute attr;
    #####:  581:  OptionalParseResult result =
    #####:  582:      generatedAttributeParser(parser, &attrKind, type, attr);
call    0 never executed
    #####:  583:  if (result.has_value())
branch  0 never executed
branch  1 never executed
    #####:  584:    return attr;
        -:  585:
    #####:  586:  if (attrKind == spirv::TargetEnvAttr::getKindName())
branch  0 never executed
branch  1 never executed
    #####:  587:    return parseTargetEnvAttr(parser);
call    0 never executed
    #####:  588:  if (attrKind == spirv::VerCapExtAttr::getKindName())
branch  0 never executed
branch  1 never executed
    #####:  589:    return parseVerCapExtAttr(parser);
call    0 never executed
    #####:  590:  if (attrKind == spirv::InterfaceVarABIAttr::getKindName())
branch  0 never executed
branch  1 never executed
    #####:  591:    return parseInterfaceVarABIAttr(parser);
call    0 never executed
        -:  592:
    #####:  593:  parser.emitError(parser.getNameLoc(), "unknown SPIR-V attribute kind: ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  594:      << attrKind;
call    0 never executed
    #####:  595:  return {};
        -:  596:}
        -:  597:
        -:  598://===----------------------------------------------------------------------===//
        -:  599:// Attribute Printing
        -:  600://===----------------------------------------------------------------------===//
        -:  601:
function _ZL5printN4mlir5spirv13VerCapExtAttrERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  602:static void print(spirv::VerCapExtAttr triple, DialectAsmPrinter &printer) {
    #####:  603:  auto &os = printer.getStream();
call    0 never executed
    #####:  604:  printer << spirv::VerCapExtAttr::getKindName() << "<"
call    0 never executed
call    1 never executed
    #####:  605:          << spirv::stringifyVersion(triple.getVersion()) << ", [";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  606:  llvm::interleaveComma(
call    0 never executed
    #####:  607:      triple.getCapabilities(), os,
call    0 never executed
        -:  608:      [&](spirv::Capability cap) { os << spirv::stringifyCapability(cap); });
    #####:  609:  printer << "], [";
call    0 never executed
function _ZZL5printN4mlir5spirv13VerCapExtAttrERNS_17DialectAsmPrinterEENKUlNS_9AttributeEE0_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  610:  llvm::interleaveComma(triple.getExtensionsAttr(), os, [&](Attribute attr) {
call    0 never executed
call    1 never executed
    #####:  611:    os << attr.cast<StringAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  612:  });
    #####:  613:  printer << "]>";
call    0 never executed
    #####:  614:}
        -:  615:
function _ZL5printN4mlir5spirv13TargetEnvAttrERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  616:static void print(spirv::TargetEnvAttr targetEnv, DialectAsmPrinter &printer) {
    #####:  617:  printer << spirv::TargetEnvAttr::getKindName() << "<#spirv.";
call    0 never executed
call    1 never executed
    #####:  618:  print(targetEnv.getTripleAttr(), printer);
call    0 never executed
call    1 never executed
    #####:  619:  spirv::Vendor vendorID = targetEnv.getVendorID();
branch  0 never executed
branch  1 never executed
    #####:  620:  spirv::DeviceType deviceType = targetEnv.getDeviceType();
    #####:  621:  uint32_t deviceID = targetEnv.getDeviceID();
    #####:  622:  if (vendorID != spirv::Vendor::Unknown) {
branch  0 never executed
branch  1 never executed
    #####:  623:    printer << ", " << spirv::stringifyVendor(vendorID);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  624:    if (deviceType != spirv::DeviceType::Unknown) {
branch  0 never executed
branch  1 never executed
    #####:  625:      printer << ":" << spirv::stringifyDeviceType(deviceType);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  626:      if (deviceID != spirv::TargetEnvAttr::kUnknownDeviceID)
branch  0 never executed
branch  1 never executed
    #####:  627:        printer << ":" << deviceID;
call    0 never executed
call    1 never executed
        -:  628:    }
        -:  629:  }
    #####:  630:  printer << ", " << targetEnv.getResourceLimits() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  631:}
        -:  632:
function _ZL5printN4mlir5spirv19InterfaceVarABIAttrERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  633:static void print(spirv::InterfaceVarABIAttr interfaceVarABIAttr,
        -:  634:                  DialectAsmPrinter &printer) {
    #####:  635:  printer << spirv::InterfaceVarABIAttr::getKindName() << "<("
call    0 never executed
call    1 never executed
    #####:  636:          << interfaceVarABIAttr.getDescriptorSet() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  637:          << interfaceVarABIAttr.getBinding() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  638:  auto storageClass = interfaceVarABIAttr.getStorageClass();
call    0 never executed
    #####:  639:  if (storageClass)
branch  0 never executed
branch  1 never executed
    #####:  640:    printer << ", " << spirv::stringifyStorageClass(*storageClass);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  641:  printer << ">";
call    0 never executed
    #####:  642:}
        -:  643:
function _ZNK4mlir5spirv12SPIRVDialect14printAttributeENS_9AttributeERNS_17DialectAsmPrinterE called 48 returned 100% blocks executed 23%
       48:  644:void SPIRVDialect::printAttribute(Attribute attr,
        -:  645:                                  DialectAsmPrinter &printer) const {
       48:  646:  if (succeeded(generatedAttributePrinter(attr, printer)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  647:    return;
        -:  648:
    #####:  649:  if (auto targetEnv = attr.dyn_cast<TargetEnvAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  650:    print(targetEnv, printer);
call    0 never executed
    #####:  651:  else if (auto vceAttr = attr.dyn_cast<VerCapExtAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  652:    print(vceAttr, printer);
call    0 never executed
    #####:  653:  else if (auto interfaceVarABIAttr = attr.dyn_cast<InterfaceVarABIAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  654:    print(interfaceVarABIAttr, printer);
call    0 never executed
        -:  655:  else
    #####:  656:    llvm_unreachable("unhandled SPIR-V attribute kind");
call    0 never executed
        -:  657:}
        -:  658:
        -:  659://===----------------------------------------------------------------------===//
        -:  660:// SPIR-V Dialect
        -:  661://===----------------------------------------------------------------------===//
        -:  662:
function _ZN4mlir5spirv12SPIRVDialect18registerAttributesEv called 11762 returned 100% blocks executed 100%
    11762:  663:void spirv::SPIRVDialect::registerAttributes() {
    11762:  664:  addAttributes<InterfaceVarABIAttr, TargetEnvAttr, VerCapExtAttr>();
call    0 returned 100%
    11762:  665:  addAttributes<
        -:  666:#define GET_ATTRDEF_LIST
        -:  667:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.cpp.inc"
    11762:  668:      >();
call    0 returned 100%
    11762:  669:}
