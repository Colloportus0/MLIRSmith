        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/SCF/TestLoopParametricTiling.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/SCF/CMakeFiles/MLIRSCFTestPasses.dir/TestLoopParametricTiling.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/SCF/CMakeFiles/MLIRSCFTestPasses.dir/TestLoopParametricTiling.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestLoopParametricTiling.cpp --- Parametric loop tiling pass -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to parametrically tile nests of standard loops.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   14:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   15:#include "mlir/IR/Builders.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
        -:   20:namespace {
        -:   21:
        -:   22:// Extracts fixed-range loops for top-level loop nests with ranges defined in
        -:   23:// the pass constructor.  Assumes loops are permutable.
        -:   24:class SimpleParametricLoopTilingPass
        -:   25:    : public PassWrapper<SimpleParametricLoopTilingPass, OperationPass<>> {
        -:   26:public:
function _ZN12_GLOBAL__N_130SimpleParametricLoopTilingPass13resolveTypeIDEv called 326620 returned 100% blocks executed 100%
   326620:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(SimpleParametricLoopTilingPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:
function _ZNK12_GLOBAL__N_130SimpleParametricLoopTilingPass11getArgumentEv called 325601 returned 100% blocks executed 100%
   325601:   29:  StringRef getArgument() const final {
   325601:   30:    return "test-extract-fixed-outer-loops";
        -:   31:  }
function _ZNK12_GLOBAL__N_130SimpleParametricLoopTilingPass14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   32:  StringRef getDescription() const final {
   325560:   33:    return "test application of parametric tiling to the outer loops so that "
   325560:   34:           "the ranges of outer loops become static";
        -:   35:  }
function _ZN12_GLOBAL__N_130SimpleParametricLoopTilingPassC2Ev called 326620 returned 100% blocks executed 100%
   326620:   36:  SimpleParametricLoopTilingPass() = default;
call    0 returned 100%
call    1 returned 100%
        -:   37:  SimpleParametricLoopTilingPass(const SimpleParametricLoopTilingPass &) {}
        -:   38:  explicit SimpleParametricLoopTilingPass(ArrayRef<int64_t> outerLoopSizes) {
        -:   39:    sizes = outerLoopSizes;
        -:   40:  }
        -:   41:
function _ZN12_GLOBAL__N_130SimpleParametricLoopTilingPass14runOnOperationEv called 850 returned 100% blocks executed 75%
      850:   42:  void runOnOperation() override {
function _ZZN12_GLOBAL__N_130SimpleParametricLoopTilingPass14runOnOperationEvENKUlN4mlir3scf5ForOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     850*:   43:    getOperation()->walk([this](scf::ForOp op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:   44:      // Ignore nested loops.
    #####:   45:      if (op->getParentRegion()->getParentOfType<scf::ForOp>())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   46:        return;
    #####:   47:      extractFixedOuterLoops(op, sizes);
call    0 never executed
call    1 never executed
        -:   48:    });
      850:   49:  }
        -:   50:
        -:   51:  ListOption<int64_t> sizes{
        -:   52:      *this, "test-outer-loop-sizes",
        -:   53:      llvm::cl::desc(
        -:   54:          "fixed number of iterations that the outer loops should have")};
        -:   55:};
        -:   56:} // namespace
        -:   57:
        -:   58:namespace mlir {
        -:   59:namespace test {
function _ZN4mlir4test34registerSimpleParametricTilingPassEv called 325560 returned 100% blocks executed 100%
   325560:   60:void registerSimpleParametricTilingPass() {
   325560:   61:  PassRegistration<SimpleParametricLoopTilingPass>();
call    0 returned 100%
   325560:   62:}
        -:   63:} // namespace test
        -:   64:} // namespace mlir
