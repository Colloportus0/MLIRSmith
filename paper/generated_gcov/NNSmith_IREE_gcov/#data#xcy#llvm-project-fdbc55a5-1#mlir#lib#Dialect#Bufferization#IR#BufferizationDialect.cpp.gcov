        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Bufferization/IR/BufferizationDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/IR/CMakeFiles/obj.MLIRBufferizationDialect.dir/BufferizationDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/IR/CMakeFiles/obj.MLIRBufferizationDialect.dir/BufferizationDialect.cpp.gcda
        -:    0:Runs:325545
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   10:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   11:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   12:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   13:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   14:#include "mlir/IR/FunctionInterfaces.h"
        -:   15:#include "mlir/Transforms/InliningUtils.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:using namespace mlir::bufferization;
        -:   19:
        -:   20:#include "mlir/Dialect/Bufferization/IR/BufferizationOpsDialect.cpp.inc"
        -:   21:
        -:   22:/// Attribute name used to mark function arguments who's buffers can be written
        -:   23:/// to during One-Shot Module Bufferize.
        -:   24:constexpr const ::llvm::StringLiteral BufferizationDialect::kWritableAttrName;
        -:   25:
        -:   26:/// Attribute name used to mark the bufferization layout for region arguments
        -:   27:/// during One-Shot Module Bufferize.
        -:   28:constexpr const ::llvm::StringLiteral
        -:   29:    BufferizationDialect::kBufferLayoutAttrName;
        -:   30:
        -:   31:/// Attribute name used to mark escaping behavior of buffer allocations.
        -:   32:constexpr const ::llvm::StringLiteral BufferizationDialect::kEscapeAttrName;
        -:   33:
        -:   34://===----------------------------------------------------------------------===//
        -:   35:// Bufferization Dialect Interfaces
        -:   36://===----------------------------------------------------------------------===//
        -:   37:
        -:   38:namespace {
        -:   39:struct BufferizationInlinerInterface : public DialectInlinerInterface {
        -:   40:  using DialectInlinerInterface::DialectInlinerInterface;
        -:   41:
        -:   42:  /// Operations in Bufferization dialect are always legal to inline.
function _ZNK12_GLOBAL__N_129BufferizationInlinerInterface15isLegalToInlineEPN4mlir9OperationEPNS1_6RegionEbRNS1_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   43:  bool isLegalToInline(Operation *, Region *, bool,
        -:   44:                       BlockAndValueMapping &) const final {
    #####:   45:    return true;
        -:   46:  }
        -:   47:};
        -:   48:} // namespace
        -:   49:
        -:   50://===----------------------------------------------------------------------===//
        -:   51:// Bufferization Dialect
        -:   52://===----------------------------------------------------------------------===//
        -:   53:
function _ZN4mlir13bufferization20BufferizationDialect10initializeEv called 0 returned 0% blocks executed 0%
   15280*:   54:void mlir::bufferization::BufferizationDialect::initialize() {
   15280*:   55:  addOperations<
        -:   56:#define GET_OP_LIST
        -:   57:#include "mlir/Dialect/Bufferization/IR/BufferizationOps.cpp.inc"
   15280*:   58:      >();
call    0 never executed
call    1 returned 100%
   15280*:   59:  addInterfaces<BufferizationInlinerInterface>();
call    0 never executed
call    1 returned 100%
    #####:   60:}
        -:   61:
        -:   62:LogicalResult
function _ZN4mlir13bufferization20BufferizationDialect24verifyOperationAttributeEPNS_9OperationENS_14NamedAttributeE called 0 returned 0% blocks executed 0%
    #####:   63:BufferizationDialect::verifyOperationAttribute(Operation *op,
        -:   64:                                               NamedAttribute attr) {
    #####:   65:  using bufferization::BufferizableOpInterface;
        -:   66:
    #####:   67:  if (attr.getName() == kWritableAttrName) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   68:    if (!attr.getValue().isa<BoolAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:      return op->emitError() << "'" << kWritableAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   70:                             << "' is expected to be a boolean attribute";
call    0 never executed
        -:   71:    }
    #####:   72:    if (!isa<FunctionOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:      return op->emitError() << "expected " << attr.getName()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:   74:                             << " to be used on function-like operations";
call    0 never executed
    #####:   75:    return success();
        -:   76:  }
    #####:   77:  if (attr.getName() == kBufferLayoutAttrName) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   78:    if (!attr.getValue().isa<AffineMapAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:      return op->emitError() << "'" << kBufferLayoutAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   80:                             << "' is expected to be a affine map attribute";
call    0 never executed
        -:   81:    }
    #####:   82:    if (!isa<FunctionOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:      return op->emitError() << "expected " << attr.getName()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:   84:                             << " to be used on function-like operations";
call    0 never executed
    #####:   85:    return success();
        -:   86:  }
    #####:   87:  if (attr.getName() == kEscapeAttrName) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   88:    auto arrayAttr = attr.getValue().dyn_cast<ArrayAttr>();
call    0 never executed
    #####:   89:    if (!arrayAttr)
branch  0 never executed
branch  1 never executed
    #####:   90:      return op->emitError() << "'" << kEscapeAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   91:                             << "' is expected to be a bool array attribute";
call    0 never executed
    #####:   92:    if (arrayAttr.size() != op->getNumResults())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   93:      return op->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   94:             << "'" << kEscapeAttrName
call    0 never executed
call    1 never executed
    #####:   95:             << "' has wrong number of elements, expected "
    #####:   96:             << op->getNumResults() << ", got " << arrayAttr.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   97:    auto bufferizableOp = dyn_cast<BufferizableOpInterface>(op);
call    0 never executed
    #####:   98:    if (!bufferizableOp)
branch  0 never executed
branch  1 never executed
    #####:   99:      return op->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  100:             << "'" << kEscapeAttrName << "' only valid on bufferizable ops";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  101:    for (const auto &it : llvm::enumerate(arrayAttr)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  102:      auto attr = it.value();
call    0 never executed
    #####:  103:      auto boolAttr = attr.dyn_cast<BoolAttr>();
call    0 never executed
    #####:  104:      if (!boolAttr)
branch  0 never executed
branch  1 never executed
    #####:  105:        return op->emitError() << "'" << kEscapeAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  106:                               << "' is expected to be a bool array attribute";
call    0 never executed
    #####:  107:      if (!boolAttr.getValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:        continue;
    #####:  109:      if (!op->getResult(it.index()).getType().isa<TensorType>())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  110:        return op->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  111:               << "'" << kEscapeAttrName << "' only valid for tensor results";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  112:      if (!bufferizableOp.bufferizesToAllocation(op->getOpResult(it.index())))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:        return op->emitError() << "'" << kEscapeAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  114:                               << "' only valid for allocation results";
call    0 never executed
        -:  115:    }
    #####:  116:    return success();
        -:  117:  }
        -:  118:
    #####:  119:  return op->emitError() << "attribute '" << attr.getName()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  120:                         << "' not supported by the bufferization dialect";
call    0 never executed
        -:  121:}
