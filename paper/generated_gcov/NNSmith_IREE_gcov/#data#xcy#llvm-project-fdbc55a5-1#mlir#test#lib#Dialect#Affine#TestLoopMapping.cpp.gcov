        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Affine/TestLoopMapping.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestLoopMapping.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestLoopMapping.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestLoopMapping.cpp --- Parametric loop mapping pass ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to parametrically map scf.for loops to virtual
        -:   10:// processing element dimensions.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:namespace {
    #####:   23:struct TestLoopMappingPass
call    0 never executed
        -:   24:    : public PassWrapper<TestLoopMappingPass, OperationPass<>> {
function _ZN12_GLOBAL__N_119TestLoopMappingPass13resolveTypeIDEv called 326635 returned 100% blocks executed 100%
   326635:   25:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLoopMappingPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   26:
function _ZNK12_GLOBAL__N_119TestLoopMappingPass11getArgumentEv called 325587 returned 100% blocks executed 100%
   325587:   27:  StringRef getArgument() const final {
   325587:   28:    return "test-mapping-to-processing-elements";
        -:   29:  }
function _ZNK12_GLOBAL__N_119TestLoopMappingPass14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   30:  StringRef getDescription() const final {
   325560:   31:    return "test mapping a single loop on a virtual processor grid";
        -:   32:  }
   326635:   33:  explicit TestLoopMappingPass() = default;
call    0 returned 100%
        -:   34:
function _ZNK12_GLOBAL__N_119TestLoopMappingPass20getDependentDialectsERN4mlir15DialectRegistryE called 1075 returned 100% blocks executed 100%
     1075:   35:  void getDependentDialects(DialectRegistry &registry) const override {
     1075:   36:    registry.insert<AffineDialect, scf::SCFDialect>();
call    0 returned 100%
     1075:   37:  }
        -:   38:
function _ZN12_GLOBAL__N_119TestLoopMappingPass14runOnOperationEv called 871 returned 100% blocks executed 64%
      871:   39:  void runOnOperation() override {
        -:   40:    // SSA values for the transformation are created out of thin air by
        -:   41:    // unregistered "new_processor_id_and_range" operations. This is enough to
        -:   42:    // emulate mapping conditions.
     1742:   43:    SmallVector<Value, 8> processorIds, numProcessors;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
function _ZZN12_GLOBAL__N_119TestLoopMappingPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 11729 returned 100% blocks executed 50%
     871*:   44:    getOperation()->walk([&processorIds, &numProcessors](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    11729:   45:      if (op->getName().getStringRef() != "new_processor_id_and_range")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   46:        return;
    #####:   47:      processorIds.push_back(op->getResult(0));
call    0 never executed
    #####:   48:      numProcessors.push_back(op->getResult(1));
call    0 never executed
        -:   49:    });
        -:   50:
function _ZZN12_GLOBAL__N_119TestLoopMappingPass14runOnOperationEvENKUlN4mlir3scf5ForOpEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     871*:   51:    getOperation()->walk([&processorIds, &numProcessors](scf::ForOp op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   52:      // Ignore nested loops.
    #####:   53:      if (op->getParentRegion()->getParentOfType<scf::ForOp>())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   54:        return;
    #####:   55:      mapLoopToProcessorIds(op, processorIds, numProcessors);
call    0 never executed
        -:   56:    });
      871:   57:  }
        -:   58:};
        -:   59:} // namespace
        -:   60:
        -:   61:namespace mlir {
        -:   62:namespace test {
function _ZN4mlir4test27registerTestLoopMappingPassEv called 325560 returned 100% blocks executed 100%
   325560:   63:void registerTestLoopMappingPass() { PassRegistration<TestLoopMappingPass>(); }
call    0 returned 100%
        -:   64:} // namespace test
        -:   65:} // namespace mlir
