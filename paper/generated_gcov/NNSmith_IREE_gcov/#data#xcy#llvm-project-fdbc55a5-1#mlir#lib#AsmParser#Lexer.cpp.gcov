        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/AsmParser/Lexer.cpp
        -:    0:Graph:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/Lexer.cpp.gcno
        -:    0:Data:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/Lexer.cpp.gcda
        -:    0:Runs:325595
        -:    1://===- Lexer.cpp - MLIR Lexer Implementation ------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the lexer for the MLIR textual form.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "Lexer.h"
        -:   14:#include "mlir/AsmParser/CodeComplete.h"
        -:   15:#include "mlir/IR/Diagnostics.h"
        -:   16:#include "mlir/IR/Location.h"
        -:   17:#include "mlir/IR/MLIRContext.h"
        -:   18:#include "llvm/ADT/StringExtras.h"
        -:   19:#include "llvm/ADT/StringSwitch.h"
        -:   20:#include "llvm/Support/SourceMgr.h"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:// Returns true if 'c' is an allowable punctuation character: [$._-]
        -:   25:// Returns false otherwise.
 1270590*:   26:static bool isPunct(char c) {
 1270590*:   27:  return c == '$' || c == '.' || c == '_' || c == '-';
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 1%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100%
        -:   28:}
        -:   29:
function _ZN4mlir5LexerC2ERKN4llvm9SourceMgrEPNS_11MLIRContextEPNS_28AsmParserCodeCompleteContextE called 264004 returned 100% blocks executed 67%
   264004:   30:Lexer::Lexer(const llvm::SourceMgr &sourceMgr, MLIRContext *context,
   264004:   31:             AsmParserCodeCompleteContext *codeCompleteContext)
   264004:   32:    : sourceMgr(sourceMgr), context(context), codeCompleteLoc(nullptr) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   264004:   33:  auto bufferID = sourceMgr.getMainFileID();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   264004:   34:  curBuffer = sourceMgr.getMemoryBuffer(bufferID)->getBuffer();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   264004:   35:  curPtr = curBuffer.begin();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   36:
        -:   37:  // Set the code completion location if it was provided.
   264004:   38:  if (codeCompleteContext)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:    codeCompleteLoc = codeCompleteContext->getCodeCompleteLoc().getPointer();
   264004:   40:}
        -:   41:
        -:   42:/// Encode the specified source location information into an attribute for
        -:   43:/// attachment to the IR.
function _ZN4mlir5Lexer24getEncodedSourceLocationEN4llvm5SMLocE called 8943296 returned 100% blocks executed 82%
  8943296:   44:Location Lexer::getEncodedSourceLocation(SMLoc loc) {
  8943296:   45:  auto &sourceMgr = getSourceMgr();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
  8943296:   46:  unsigned mainFileID = sourceMgr.getMainFileID();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   47:
        -:   48:  // TODO: Fix performance issues in SourceMgr::getLineAndColumn so that we can
        -:   49:  //       use it here.
  8943296:   50:  auto &bufferInfo = sourceMgr.getBufferInfo(mainFileID);
call    0 returned 100%
  8943296:   51:  unsigned lineNo = bufferInfo.getLineNumber(loc.getPointer());
call    0 returned 100%
  8943296:   52:  unsigned column =
  8943296:   53:      (loc.getPointer() - bufferInfo.getPointerForLineNumber(lineNo)) + 1;
call    0 returned 100%
  8943296:   54:  auto *buffer = sourceMgr.getMemoryBuffer(mainFileID);
call    0 returned 100%
        -:   55:
 17886592:   56:  return FileLineColLoc::get(context, buffer->getBufferIdentifier(), lineNo,
  8943296:   57:                             column);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   58:}
        -:   59:
        -:   60:/// emitError - Emit an error message and return an Token::error token.
function _ZN4mlir5Lexer9emitErrorEPKcRKN4llvm5TwineE called 0 returned 0% blocks executed 0%
    #####:   61:Token Lexer::emitError(const char *loc, const Twine &message) {
    #####:   62:  mlir::emitError(getEncodedSourceLocation(SMLoc::getFromPointer(loc)),
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:                  message);
    #####:   64:  return formToken(Token::error, loc);
        -:   65:}
        -:   66:
function _ZN4mlir5Lexer8lexTokenEv called 209772035 returned 100% blocks executed 57%
209772035:   67:Token Lexer::lexToken() {
280881148:   68:  while (true) {
280881148:   69:    const char *tokStart = curPtr;
        -:   70:
        -:   71:    // Check to see if the current token is at the code completion location.
280881148:   72:    if (tokStart == codeCompleteLoc)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   73:      return formToken(Token::code_complete, tokStart);
        -:   74:
        -:   75:    // Lex the next token.
280881148*:   76:    switch (*curPtr++) {
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 1%
branch  4 taken 2%
branch  5 taken 2%
branch  6 taken 0%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 1%
branch 12 taken 1%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 3%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 1%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 1%
branch 23 taken 0%
branch 24 taken 3%
branch 25 taken 2%
branch 26 taken 16%
 70353982:   77:    default:
        -:   78:      // Handle bare identifiers.
 70353982:   79:      if (isalpha(curPtr[-1]))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 70353982:   80:        return lexBareIdentifierOrKeyword(tokStart);
call    0 returned 100%
        -:   81:
        -:   82:      // Unknown character, emit an error.
    #####:   83:      return emitError(tokStart, "unexpected character");
call    0 never executed
call    1 never executed
        -:   84:
 71109113:   85:    case ' ':
 71109113:   86:    case '\t':
 71109113:   87:    case '\n':
 71109113:   88:    case '\r':
        -:   89:      // Handle whitespace.
 71109113:   90:      continue;
        -:   91:
    #####:   92:    case '_':
        -:   93:      // Handle bare identifiers.
    #####:   94:      return lexBareIdentifierOrKeyword(tokStart);
call    0 never executed
        -:   95:
   218001:   96:    case 0:
        -:   97:      // This may either be a nul character in the source file or may be the EOF
        -:   98:      // marker that llvm::MemoryBuffer guarantees will be there.
   218001:   99:      if (curPtr - 1 == curBuffer.end())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   218001:  100:        return formToken(Token::eof, tokStart);
    #####:  101:      continue;
        -:  102:
  6932876:  103:    case ':':
  6932876:  104:      return formToken(Token::colon, tokStart);
  6975966:  105:    case ',':
  6975966:  106:      return formToken(Token::comma, tokStart);
    #####:  107:    case '.':
    #####:  108:      return lexEllipsis(tokStart);
call    0 never executed
  8165593:  109:    case '(':
  8165593:  110:      return formToken(Token::l_paren, tokStart);
  8128980:  111:    case ')':
  8128980:  112:      return formToken(Token::r_paren, tokStart);
  4168998:  113:    case '{':
 4168998*:  114:      if (*curPtr == '-' && *(curPtr + 1) == '#') {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  115:        curPtr += 2;
    #####:  116:        return formToken(Token::file_metadata_begin, tokStart);
        -:  117:      }
  4168998:  118:      return formToken(Token::l_brace, tokStart);
  4076992:  119:    case '}':
  4076992:  120:      return formToken(Token::r_brace, tokStart);
  1909132:  121:    case '[':
  1909132:  122:      return formToken(Token::l_square, tokStart);
  1909132:  123:    case ']':
  1909132:  124:      return formToken(Token::r_square, tokStart);
 12363272:  125:    case '<':
 12363272:  126:      return formToken(Token::less, tokStart);
 12359516:  127:    case '>':
 12359516:  128:      return formToken(Token::greater, tokStart);
  7836741:  129:    case '=':
  7836741:  130:      return formToken(Token::equal, tokStart);
        -:  131:
    #####:  132:    case '+':
    #####:  133:      return formToken(Token::plus, tokStart);
    #####:  134:    case '*':
    #####:  135:      return formToken(Token::star, tokStart);
  4054047:  136:    case '-':
  4054047:  137:      if (*curPtr == '>') {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
  4051344:  138:        ++curPtr;
  4051344:  139:        return formToken(Token::arrow, tokStart);
        -:  140:      }
     2703:  141:      return formToken(Token::minus, tokStart);
        -:  142:
    #####:  143:    case '?':
    #####:  144:      return formToken(Token::question, tokStart);
        -:  145:
    #####:  146:    case '|':
    #####:  147:      return formToken(Token::vertical_bar, tokStart);
        -:  148:
    #####:  149:    case '/':
    #####:  150:      if (*curPtr == '/') {
branch  0 never executed
branch  1 never executed
    #####:  151:        skipComment();
call    0 never executed
    #####:  152:        continue;
        -:  153:      }
    #####:  154:      return emitError(tokStart, "unexpected character");
call    0 never executed
call    1 never executed
        -:  155:
   264004:  156:    case '@':
   264004:  157:      return lexAtIdentifier(tokStart);
call    0 returned 100%
        -:  158:
    #####:  159:    case '#':
    #####:  160:      if (*curPtr == '-' && *(curPtr + 1) == '}') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  161:        curPtr += 2;
    #####:  162:        return formToken(Token::file_metadata_end, tokStart);
        -:  163:      }
  9084360:  164:      [[fallthrough]];
  9084360:  165:    case '!':
  9084360:  166:    case '^':
  9084360:  167:    case '%':
  9084360:  168:      return lexPrefixedIdentifier(tokStart);
call    0 returned 100%
  5167674:  169:    case '"':
  5167674:  170:      return lexString(tokStart);
call    0 returned 100%
        -:  171:
 45802769:  172:    case '0':
 45802769:  173:    case '1':
 45802769:  174:    case '2':
 45802769:  175:    case '3':
 45802769:  176:    case '4':
 45802769:  177:    case '5':
 45802769:  178:    case '6':
 45802769:  179:    case '7':
 45802769:  180:    case '8':
 45802769:  181:    case '9':
 45802769:  182:      return lexNumber(tokStart);
call    0 returned 100%
        -:  183:    }
        -:  184:  }
        -:  185:}
        -:  186:
        -:  187:/// Lex an '@foo' identifier.
        -:  188:///
        -:  189:///   symbol-ref-id ::= `@` (bare-id | string-literal)
        -:  190:///
function _ZN4mlir5Lexer15lexAtIdentifierEPKc called 264004 returned 100% blocks executed 55%
   264004:  191:Token Lexer::lexAtIdentifier(const char *tokStart) {
   264004:  192:  char cur = *curPtr++;
        -:  193:
        -:  194:  // Try to parse a string literal, if present.
   264004:  195:  if (cur == '"') {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  196:    Token stringIdentifier = lexString(curPtr);
call    0 never executed
    #####:  197:    if (stringIdentifier.is(Token::error))
branch  0 never executed
branch  1 never executed
    #####:  198:      return stringIdentifier;
    #####:  199:    return formToken(Token::at_identifier, tokStart);
        -:  200:  }
        -:  201:
        -:  202:  // Otherwise, these always start with a letter or underscore.
  264004*:  203:  if (!isalpha(cur) && cur != '_')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 never executed
branch  3 never executed
    #####:  204:    return emitError(curPtr - 1,
    #####:  205:                     "@ identifier expected to start with letter or '_'");
call    0 never executed
call    1 never executed
        -:  206:
   264004:  207:  while (isalpha(*curPtr) || isdigit(*curPtr) || *curPtr == '_' ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
  1340678:  208:         *curPtr == '$' || *curPtr == '.')
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   812670:  209:    ++curPtr;
   264004:  210:  return formToken(Token::at_identifier, tokStart);
        -:  211:}
        -:  212:
        -:  213:/// Lex a bare identifier or keyword that starts with a letter.
        -:  214:///
        -:  215:///   bare-id ::= (letter|[_]) (letter|digit|[_$.])*
        -:  216:///   integer-type ::= `[su]?i[1-9][0-9]*`
        -:  217:///
function _ZN4mlir5Lexer26lexBareIdentifierOrKeywordEPKc called 70353982 returned 100% blocks executed 95%
 70353982:  218:Token Lexer::lexBareIdentifierOrKeyword(const char *tokStart) {
        -:  219:  // Match the rest of the identifier regex: [0-9a-zA-Z_.$]*
239877424:  220:  while (isalpha(*curPtr) || isdigit(*curPtr) || *curPtr == '_' ||
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
506460148:  221:         *curPtr == '$' || *curPtr == '.')
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
364348615:  222:    ++curPtr;
        -:  223:
        -:  224:  // Check to see if this identifier is a keyword.
 70353982:  225:  StringRef spelling(tokStart, curPtr - tokStart);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  226:
73787135*:  227:  auto isAllDigit = [](StringRef str) {
 6866306*:  228:    return llvm::all_of(str, llvm::isDigit);
        -:  229:  };
        -:  230:
        -:  231:  // Check for i123, si456, ui789.
 70353982:  232:  if ((spelling.size() > 1 && tokStart[0] == 'i' &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
140707964:  233:       isAllDigit(spelling.drop_front())) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
 68060394:  234:      ((spelling.size() > 2 && tokStart[1] == 'i' &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
 1499426*:  235:        (tokStart[0] == 's' || tokStart[0] == 'u')) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  236:       isAllDigit(spelling.drop_front(2))))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
  2293588:  237:    return Token(Token::inttype, spelling);
        -:  238:
 68060394:  239:  Token::Kind kind = StringSwitch<Token::Kind>(spelling)
call    0 returned 100%
        -:  240:#define TOK_KEYWORD(SPELLING) .Case(#SPELLING, Token::kw_##SPELLING)
        -:  241:#include "TokenKinds.def"
 68060394:  242:                         .Default(Token::bare_identifier);
        -:  243:
 68060394:  244:  return Token(kind, spelling);
        -:  245:}
        -:  246:
        -:  247:/// Skip a comment line, starting with a '//'.
        -:  248:///
        -:  249:///   TODO: add a regex for comments here and to the spec.
        -:  250:///
function _ZN4mlir5Lexer11skipCommentEv called 0 returned 0% blocks executed 0%
    #####:  251:void Lexer::skipComment() {
        -:  252:  // Advance over the second '/' in a '//' comment.
    #####:  253:  assert(*curPtr == '/');
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  254:  ++curPtr;
        -:  255:
    #####:  256:  while (true) {
    #####:  257:    switch (*curPtr++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    case '\n':
        -:  259:    case '\r':
        -:  260:      // Newline is end of comment.
        -:  261:      return;
    #####:  262:    case 0:
        -:  263:      // If this is the end of the buffer, end the comment.
    #####:  264:      if (curPtr - 1 == curBuffer.end()) {
branch  0 never executed
branch  1 never executed
    #####:  265:        --curPtr;
    #####:  266:        return;
        -:  267:      }
        -:  268:      [[fallthrough]];
        -:  269:    default:
        -:  270:      // Skip over other characters.
        -:  271:      break;
        -:  272:    }
        -:  273:  }
        -:  274:}
        -:  275:
        -:  276:/// Lex an ellipsis.
        -:  277:///
        -:  278:///   ellipsis ::= '...'
        -:  279:///
function _ZN4mlir5Lexer11lexEllipsisEPKc called 0 returned 0% blocks executed 0%
    #####:  280:Token Lexer::lexEllipsis(const char *tokStart) {
    #####:  281:  assert(curPtr[-1] == '.');
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  282:
    #####:  283:  if (curPtr == curBuffer.end() || *curPtr != '.' || *(curPtr + 1) != '.')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  284:    return emitError(curPtr, "expected three consecutive dots for an ellipsis");
call    0 never executed
call    1 never executed
        -:  285:
    #####:  286:  curPtr += 2;
    #####:  287:  return formToken(Token::ellipsis, tokStart);
        -:  288:}
        -:  289:
        -:  290:/// Lex a number literal.
        -:  291:///
        -:  292:///   integer-literal ::= digit+ | `0x` hex_digit+
        -:  293:///   float-literal ::= [-+]?[0-9]+[.][0-9]*([eE][-+]?[0-9]+)?
        -:  294:///
function _ZN4mlir5Lexer9lexNumberEPKc called 45802769 returned 100% blocks executed 74%
 45802769:  295:Token Lexer::lexNumber(const char *tokStart) {
45802769*:  296:  assert(isdigit(curPtr[-1]));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  297:
        -:  298:  // Handle the hexadecimal case.
 45802769:  299:  if (curPtr[-1] == '0' && *curPtr == 'x') {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
        -:  300:    // If we see stuff like 0xi32, this is a literal `0` followed by an
        -:  301:    // identifier `xi32`, stop after `0`.
    #####:  302:    if (!isxdigit(curPtr[1]))
branch  0 never executed
branch  1 never executed
    #####:  303:      return formToken(Token::integer, tokStart);
        -:  304:
    #####:  305:    curPtr += 2;
    #####:  306:    while (isxdigit(*curPtr))
branch  0 never executed
branch  1 never executed
    #####:  307:      ++curPtr;
        -:  308:
    #####:  309:    return formToken(Token::integer, tokStart);
        -:  310:  }
        -:  311:
        -:  312:  // Handle the normal decimal case.
 46775439:  313:  while (isdigit(*curPtr))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   972670:  314:    ++curPtr;
        -:  315:
 45802769:  316:  if (*curPtr != '.')
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
 44111175:  317:    return formToken(Token::integer, tokStart);
  1691594:  318:  ++curPtr;
        -:  319:
        -:  320:  // Skip over [0-9]*([eE][-+]?[0-9]+)?
 13850022:  321:  while (isdigit(*curPtr))
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
 12158428:  322:    ++curPtr;
        -:  323:
  1691594:  324:  if (*curPtr == 'e' || *curPtr == 'E') {
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
   794934:  325:    if (isdigit(static_cast<unsigned char>(curPtr[1])) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   794934:  326:        ((curPtr[1] == '-' || curPtr[1] == '+') &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   794934:  327:         isdigit(static_cast<unsigned char>(curPtr[2])))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   794934:  328:      curPtr += 2;
  2252239:  329:      while (isdigit(*curPtr))
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
  1457305:  330:        ++curPtr;
        -:  331:    }
        -:  332:  }
  1691594:  333:  return formToken(Token::floatliteral, tokStart);
        -:  334:}
        -:  335:
        -:  336:/// Lex an identifier that starts with a prefix followed by suffix-id.
        -:  337:///
        -:  338:///   attribute-id  ::= `#` suffix-id
        -:  339:///   ssa-id        ::= '%' suffix-id
        -:  340:///   block-id      ::= '^' suffix-id
        -:  341:///   type-id       ::= '!' suffix-id
        -:  342:///   suffix-id     ::= digit+ | (letter|id-punct) (letter|id-punct|digit)*
        -:  343:///   id-punct      ::= `$` | `.` | `_` | `-`
        -:  344:///
function _ZN4mlir5Lexer21lexPrefixedIdentifierEPKc called 9084360 returned 100% blocks executed 55%
  9084360:  345:Token Lexer::lexPrefixedIdentifier(const char *tokStart) {
  9084360:  346:  Token::Kind kind;
  9084360:  347:  StringRef errorKind;
  9084360:  348:  switch (*tokStart) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 1%
branch  4 taken 0%
    #####:  349:  case '#':
    #####:  350:    kind = Token::hash_identifier;
    #####:  351:    errorKind = "invalid attribute name";
    #####:  352:    break;
  9079665:  353:  case '%':
  9079665:  354:    kind = Token::percent_identifier;
  9079665:  355:    errorKind = "invalid SSA name";
  9079665:  356:    break;
    #####:  357:  case '^':
    #####:  358:    kind = Token::caret_identifier;
    #####:  359:    errorKind = "invalid block name";
    #####:  360:    break;
     4695:  361:  case '!':
     4695:  362:    kind = Token::exclamation_identifier;
     4695:  363:    errorKind = "invalid type identifier";
     4695:  364:    break;
    #####:  365:  default:
    #####:  366:    llvm_unreachable("invalid caller");
call    0 never executed
        -:  367:  }
        -:  368:
        -:  369:  // Parse suffix-id.
  9084360:  370:  if (isdigit(*curPtr)) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  371:    // If suffix-id starts with a digit, the rest must be digits.
 19468247:  372:    while (isdigit(*curPtr))
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
 11649782:  373:      ++curPtr;
 1265895*:  374:  } else if (isalpha(*curPtr) || isPunct(*curPtr)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  5090811:  375:    do {
  5090811:  376:      ++curPtr;
  5090811:  377:    } while (isalpha(*curPtr) || isdigit(*curPtr) || isPunct(*curPtr));
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
    #####:  378:  } else if (curPtr == codeCompleteLoc) {
branch  0 never executed
branch  1 never executed
    #####:  379:    return formToken(Token::code_complete, tokStart);
        -:  380:  } else {
    #####:  381:    return emitError(curPtr - 1, errorKind);
call    0 never executed
call    1 never executed
        -:  382:  }
        -:  383:
        -:  384:  // Check for a code completion within the identifier.
 9084360*:  385:  if (codeCompleteLoc && codeCompleteLoc >= tokStart &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  386:      codeCompleteLoc <= curPtr) {
branch  0 never executed
branch  1 never executed
    #####:  387:    return Token(Token::code_complete,
    #####:  388:                 StringRef(tokStart, codeCompleteLoc - tokStart));
        -:  389:  }
        -:  390:
  9084360:  391:  return formToken(kind, tokStart);
        -:  392:}
        -:  393:
        -:  394:/// Lex a string literal.
        -:  395:///
        -:  396:///   string-literal ::= '"' [^"\n\f\v\r]* '"'
        -:  397:///
        -:  398:/// TODO: define escaping rules.
function _ZN4mlir5Lexer9lexStringEPKc called 5167674 returned 100% blocks executed 31%
  5167674:  399:Token Lexer::lexString(const char *tokStart) {
 5167674*:  400:  assert(curPtr[-1] == '"');
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  401:
325869774:  402:  while (true) {
        -:  403:    // Check to see if there is a code completion location within the string. In
        -:  404:    // these cases we generate a completion location and place the currently
        -:  405:    // lexed string within the token. This allows for the parser to use the
        -:  406:    // partially lexed string when computing the completion results.
325869774:  407:    if (curPtr == codeCompleteLoc)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  408:      return formToken(Token::code_complete, tokStart);
        -:  409:
325869774*:  410:    switch (*curPtr++) {
branch  0 taken 2%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 98%
  5167674:  411:    case '"':
  5167674:  412:      return formToken(Token::string, tokStart);
    #####:  413:    case 0:
        -:  414:      // If this is a random nul character in the middle of a string, just
        -:  415:      // include it.  If it is the end of file, then it is an error.
    #####:  416:      if (curPtr - 1 != curBuffer.end())
branch  0 never executed
branch  1 never executed
    #####:  417:        continue;
    #####:  418:      [[fallthrough]];
    #####:  419:    case '\n':
    #####:  420:    case '\v':
    #####:  421:    case '\f':
    #####:  422:      return emitError(curPtr - 1, "expected '\"' in string literal");
call    0 never executed
call    1 never executed
    #####:  423:    case '\\':
        -:  424:      // Handle explicitly a few escapes.
    #####:  425:      if (*curPtr == '"' || *curPtr == '\\' || *curPtr == 'n' || *curPtr == 't')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  426:        ++curPtr;
    #####:  427:      else if (llvm::isHexDigit(*curPtr) && llvm::isHexDigit(curPtr[1]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  428:        // Support \xx for two hex digits.
    #####:  429:        curPtr += 2;
        -:  430:      else
    #####:  431:        return emitError(curPtr - 1, "unknown escape in string literal");
call    0 never executed
call    1 never executed
    #####:  432:      continue;
        -:  433:
320702100:  434:    default:
320702100:  435:      continue;
        -:  436:    }
        -:  437:  }
        -:  438:}
