        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Affine/Transforms/LoopCoalescing.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopCoalescing.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopCoalescing.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- LoopCoalescing.cpp - Pass transforming loop nests into single loops-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   12:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   16:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   17:#include "mlir/Transforms/Passes.h"
        -:   18:#include "mlir/Transforms/RegionUtils.h"
        -:   19:#include "llvm/Support/Debug.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_LOOPCOALESCING
        -:   23:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:#define PASS_NAME "loop-coalescing"
        -:   27:#define DEBUG_TYPE PASS_NAME
        -:   28:
        -:   29:using namespace mlir;
        -:   30:
        -:   31:namespace {
   387740:   32:struct LoopCoalescingPass
call    0 returned 100%
call    1 returned 100%
        -:   33:    : public impl::LoopCoalescingBase<LoopCoalescingPass> {
        -:   34:
        -:   35:  /// Walk either an scf.for or an affine.for to find a band to coalesce.
        -:   36:  template <typename LoopOpTy>
    #####:   37:  static void walkLoop(LoopOpTy op) {
        -:   38:    // Ignore nested loops.
    #####:   39:    if (op->template getParentOfType<LoopOpTy>())
    #####:   40:      return;
        -:   41:
    #####:   42:    SmallVector<LoopOpTy, 4> loops;
    #####:   43:    getPerfectlyNestedLoops(loops, op);
    #####:   44:    LLVM_DEBUG(llvm::dbgs()
        -:   45:               << "found a perfect nest of depth " << loops.size() << '\n');
        -:   46:
        -:   47:    // Look for a band of loops that can be coalesced, i.e. perfectly nested
        -:   48:    // loops with bounds defined above some loop.
        -:   49:    // 1. For each loop, find above which parent loop its operands are
        -:   50:    // defined.
    #####:   51:    SmallVector<unsigned, 4> operandsDefinedAbove(loops.size());
    #####:   52:    for (unsigned i = 0, e = loops.size(); i < e; ++i) {
    #####:   53:      operandsDefinedAbove[i] = i;
    #####:   54:      for (unsigned j = 0; j < i; ++j) {
    #####:   55:        if (areValuesDefinedAbove(loops[i].getOperands(),
    #####:   56:                                  loops[j].getRegion())) {
    #####:   57:          operandsDefinedAbove[i] = j;
    #####:   58:          break;
        -:   59:        }
        -:   60:      }
    #####:   61:      LLVM_DEBUG(llvm::dbgs()
        -:   62:                 << "  bounds of loop " << i << " are known above depth "
        -:   63:                 << operandsDefinedAbove[i] << '\n');
        -:   64:    }
        -:   65:
        -:   66:    // 2. Identify bands of loops such that the operands of all of them are
        -:   67:    // defined above the first loop in the band.  Traverse the nest bottom-up
        -:   68:    // so that modifications don't invalidate the inner loops.
    #####:   69:    for (unsigned end = loops.size(); end > 0; --end) {
        -:   70:      unsigned start = 0;
    #####:   71:      for (; start < end - 1; ++start) {
    #####:   72:        auto maxPos =
    #####:   73:            *std::max_element(std::next(operandsDefinedAbove.begin(), start),
        -:   74:                              std::next(operandsDefinedAbove.begin(), end));
    #####:   75:        if (maxPos > start)
    #####:   76:          continue;
        -:   77:
    #####:   78:        assert(maxPos == start &&
        -:   79:               "expected loop bounds to be known at the start of the band");
    #####:   80:        LLVM_DEBUG(llvm::dbgs() << "  found coalesceable band from " << start
        -:   81:                                << " to " << end << '\n');
        -:   82:
        -:   83:        auto band =
    #####:   84:            llvm::makeMutableArrayRef(loops.data() + start, end - start);
    #####:   85:        (void)coalesceLoops(band);
    #####:   86:        break;
        -:   87:      }
        -:   88:      // If a band was found and transformed, keep looking at the loops above
        -:   89:      // the outermost transformed loop.
    #####:   90:      if (start != end - 1)
    #####:   91:        end = start + 1;
        -:   92:    }
        -:   93:  }
------------------
_ZN12_GLOBAL__N_118LoopCoalescingPass8walkLoopIN4mlir11AffineForOpEEEvT_:
function _ZN12_GLOBAL__N_118LoopCoalescingPass8walkLoopIN4mlir11AffineForOpEEEvT_ called 0 returned 0% blocks executed 0%
    #####:   37:  static void walkLoop(LoopOpTy op) {
        -:   38:    // Ignore nested loops.
    #####:   39:    if (op->template getParentOfType<LoopOpTy>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:      return;
        -:   41:
    #####:   42:    SmallVector<LoopOpTy, 4> loops;
    #####:   43:    getPerfectlyNestedLoops(loops, op);
call    0 never executed
    #####:   44:    LLVM_DEBUG(llvm::dbgs()
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:   45:               << "found a perfect nest of depth " << loops.size() << '\n');
        -:   46:
        -:   47:    // Look for a band of loops that can be coalesced, i.e. perfectly nested
        -:   48:    // loops with bounds defined above some loop.
        -:   49:    // 1. For each loop, find above which parent loop its operands are
        -:   50:    // defined.
    #####:   51:    SmallVector<unsigned, 4> operandsDefinedAbove(loops.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    for (unsigned i = 0, e = loops.size(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   53:      operandsDefinedAbove[i] = i;
branch  0 never executed
branch  1 never executed
    #####:   54:      for (unsigned j = 0; j < i; ++j) {
branch  0 never executed
branch  1 never executed
    #####:   55:        if (areValuesDefinedAbove(loops[i].getOperands(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   56:                                  loops[j].getRegion())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   57:          operandsDefinedAbove[i] = j;
branch  0 never executed
branch  1 never executed
    #####:   58:          break;
        -:   59:        }
        -:   60:      }
    #####:   61:      LLVM_DEBUG(llvm::dbgs()
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -:   62:                 << "  bounds of loop " << i << " are known above depth "
        -:   63:                 << operandsDefinedAbove[i] << '\n');
        -:   64:    }
        -:   65:
        -:   66:    // 2. Identify bands of loops such that the operands of all of them are
        -:   67:    // defined above the first loop in the band.  Traverse the nest bottom-up
        -:   68:    // so that modifications don't invalidate the inner loops.
    #####:   69:    for (unsigned end = loops.size(); end > 0; --end) {
branch  0 never executed
branch  1 never executed
        -:   70:      unsigned start = 0;
    #####:   71:      for (; start < end - 1; ++start) {
branch  0 never executed
branch  1 never executed
    #####:   72:        auto maxPos =
    #####:   73:            *std::max_element(std::next(operandsDefinedAbove.begin(), start),
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   74:                              std::next(operandsDefinedAbove.begin(), end));
    #####:   75:        if (maxPos > start)
branch  0 never executed
branch  1 never executed
    #####:   76:          continue;
        -:   77:
    #####:   78:        assert(maxPos == start &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   79:               "expected loop bounds to be known at the start of the band");
    #####:   80:        LLVM_DEBUG(llvm::dbgs() << "  found coalesceable band from " << start
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:   81:                                << " to " << end << '\n');
        -:   82:
        -:   83:        auto band =
    #####:   84:            llvm::makeMutableArrayRef(loops.data() + start, end - start);
call    0 never executed
    #####:   85:        (void)coalesceLoops(band);
call    0 never executed
    #####:   86:        break;
        -:   87:      }
        -:   88:      // If a band was found and transformed, keep looking at the loops above
        -:   89:      // the outermost transformed loop.
    #####:   90:      if (start != end - 1)
branch  0 never executed
branch  1 never executed
    #####:   91:        end = start + 1;
        -:   92:    }
        -:   93:  }
------------------
_ZN12_GLOBAL__N_118LoopCoalescingPass8walkLoopIN4mlir3scf5ForOpEEEvT_:
function _ZN12_GLOBAL__N_118LoopCoalescingPass8walkLoopIN4mlir3scf5ForOpEEEvT_ called 0 returned 0% blocks executed 0%
    #####:   37:  static void walkLoop(LoopOpTy op) {
        -:   38:    // Ignore nested loops.
    #####:   39:    if (op->template getParentOfType<LoopOpTy>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:      return;
        -:   41:
    #####:   42:    SmallVector<LoopOpTy, 4> loops;
    #####:   43:    getPerfectlyNestedLoops(loops, op);
call    0 never executed
    #####:   44:    LLVM_DEBUG(llvm::dbgs()
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:   45:               << "found a perfect nest of depth " << loops.size() << '\n');
        -:   46:
        -:   47:    // Look for a band of loops that can be coalesced, i.e. perfectly nested
        -:   48:    // loops with bounds defined above some loop.
        -:   49:    // 1. For each loop, find above which parent loop its operands are
        -:   50:    // defined.
    #####:   51:    SmallVector<unsigned, 4> operandsDefinedAbove(loops.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    for (unsigned i = 0, e = loops.size(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   53:      operandsDefinedAbove[i] = i;
branch  0 never executed
branch  1 never executed
    #####:   54:      for (unsigned j = 0; j < i; ++j) {
branch  0 never executed
branch  1 never executed
    #####:   55:        if (areValuesDefinedAbove(loops[i].getOperands(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   56:                                  loops[j].getRegion())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   57:          operandsDefinedAbove[i] = j;
branch  0 never executed
branch  1 never executed
    #####:   58:          break;
        -:   59:        }
        -:   60:      }
    #####:   61:      LLVM_DEBUG(llvm::dbgs()
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -:   62:                 << "  bounds of loop " << i << " are known above depth "
        -:   63:                 << operandsDefinedAbove[i] << '\n');
        -:   64:    }
        -:   65:
        -:   66:    // 2. Identify bands of loops such that the operands of all of them are
        -:   67:    // defined above the first loop in the band.  Traverse the nest bottom-up
        -:   68:    // so that modifications don't invalidate the inner loops.
    #####:   69:    for (unsigned end = loops.size(); end > 0; --end) {
branch  0 never executed
branch  1 never executed
        -:   70:      unsigned start = 0;
    #####:   71:      for (; start < end - 1; ++start) {
branch  0 never executed
branch  1 never executed
    #####:   72:        auto maxPos =
    #####:   73:            *std::max_element(std::next(operandsDefinedAbove.begin(), start),
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   74:                              std::next(operandsDefinedAbove.begin(), end));
    #####:   75:        if (maxPos > start)
branch  0 never executed
branch  1 never executed
    #####:   76:          continue;
        -:   77:
    #####:   78:        assert(maxPos == start &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   79:               "expected loop bounds to be known at the start of the band");
    #####:   80:        LLVM_DEBUG(llvm::dbgs() << "  found coalesceable band from " << start
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:   81:                                << " to " << end << '\n');
        -:   82:
        -:   83:        auto band =
    #####:   84:            llvm::makeMutableArrayRef(loops.data() + start, end - start);
call    0 never executed
    #####:   85:        (void)coalesceLoops(band);
call    0 never executed
    #####:   86:        break;
        -:   87:      }
        -:   88:      // If a band was found and transformed, keep looking at the loops above
        -:   89:      // the outermost transformed loop.
    #####:   90:      if (start != end - 1)
branch  0 never executed
branch  1 never executed
    #####:   91:        end = start + 1;
        -:   92:    }
        -:   93:  }
------------------
        -:   94:
function _ZN12_GLOBAL__N_118LoopCoalescingPass14runOnOperationEv called 910 returned 100% blocks executed 100%
      910:   95:  void runOnOperation() override {
      910:   96:    func::FuncOp func = getOperation();
call    0 returned 100%
function _ZZN12_GLOBAL__N_118LoopCoalescingPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 11368 returned 100% blocks executed 78%
    12277:   97:    func.walk([&](Operation *op) {
call    0 returned 100%
    11368:   98:      if (auto scfForOp = dyn_cast<scf::ForOp>(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   99:        walkLoop(scfForOp);
call    0 never executed
    11366:  100:      else if (auto affineForOp = dyn_cast<AffineForOp>(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  101:        walkLoop(affineForOp);
call    0 never executed
    11365:  102:    });
      906:  103:  }
        -:  104:};
        -:  105:
        -:  106:} // namespace
        -:  107:
function _ZN4mlir24createLoopCoalescingPassEv called 326612 returned 100% blocks executed 100%
   326612:  108:std::unique_ptr<OperationPass<func::FuncOp>> mlir::createLoopCoalescingPass() {
   326612:  109:  return std::make_unique<LoopCoalescingPass>();
call    0 returned 100%
        -:  110:}
