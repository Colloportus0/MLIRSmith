        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/TosaToTensor/TosaToTensor.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TosaToTensor/CMakeFiles/obj.MLIRTosaToTensor.dir/TosaToTensor.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TosaToTensor/CMakeFiles/obj.MLIRTosaToTensor.dir/TosaToTensor.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TosaToTensor.cpp - Lowering Tosa to Tensor Dialect -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// These rewriters lower from the Tosa to the Tensor dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TosaToTensor/TosaToTensor.h"
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   16:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   17:#include "mlir/IR/PatternMatch.h"
        -:   18:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:using namespace tosa;
        -:   22:
        -:   23:namespace {
        -:   24:
        -:   25:class SliceOpConverter : public OpRewritePattern<tosa::SliceOp> {
        -:   26:public:
        -:   27:  using OpRewritePattern<tosa::SliceOp>::OpRewritePattern;
        -:   28:
function _ZNK12_GLOBAL__N_116SliceOpConverter15matchAndRewriteEN4mlir4tosa7SliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   29:  LogicalResult matchAndRewrite(tosa::SliceOp sliceOp,
        -:   30:                                PatternRewriter &rewriter) const final {
    #####:   31:    Location loc = sliceOp.getLoc();
call    0 never executed
    #####:   32:    Value input = sliceOp.getInput();
call    0 never executed
    #####:   33:    SmallVector<int64_t> strides, sizes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   34:    auto starts = sliceOp.getStart();
call    0 never executed
    #####:   35:    strides.resize(sliceOp.getType().template cast<ShapedType>().getRank(), 1);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   36:
    #####:   37:    SmallVector<Value> dynSizes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   38:    for (const auto &i : llvm::enumerate(sliceOp.getSize())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   39:      int64_t size = i.value().cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
    #####:   40:      size_t index = i.index();
branch  0 never executed
branch  1 never executed
    #####:   41:      sizes.push_back(size == -1 ? ShapedType::kDynamicSize : size);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   42:      if (!ShapedType::isDynamic(sizes.back()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:        continue;
        -:   44:
    #####:   45:      auto dim = rewriter.create<tensor::DimOp>(loc, input, index);
call    0 never executed
    #####:   46:      auto offset = rewriter.create<arith::ConstantOp>(
        -:   47:          loc,
    #####:   48:          rewriter.getIndexAttr(starts[index].cast<IntegerAttr>().getInt()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   49:      dynSizes.push_back(rewriter.create<arith::SubIOp>(loc, dim, offset));
call    0 never executed
call    1 never executed
        -:   50:    }
        -:   51:
    #####:   52:    auto newSliceOp = rewriter.create<tensor::ExtractSliceOp>(
    #####:   53:        sliceOp.getLoc(), sliceOp.getType(), input, ValueRange({}), dynSizes,
call    0 never executed
    #####:   54:        ValueRange({}), starts, rewriter.getI64ArrayAttr(sizes),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   55:        rewriter.getI64ArrayAttr(strides));
call    0 never executed
call    1 never executed
        -:   56:
    #####:   57:    rewriter.replaceOp(sliceOp, newSliceOp.getResult());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   58:    return success();
branch  0 never executed
branch  1 never executed
        -:   59:  }
        -:   60:};
        -:   61:
        -:   62:} // namespace
        -:   63:
function _ZN4mlir4tosa38populateTosaToTensorConversionPatternsEPNS_17RewritePatternSetE called 843 returned 100% blocks executed 100%
      843:   64:void mlir::tosa::populateTosaToTensorConversionPatterns(
        -:   65:    RewritePatternSet *patterns) {
      843:   66:  patterns->add<SliceOpConverter>(patterns->getContext());
call    0 returned 100%
      843:   67:}
