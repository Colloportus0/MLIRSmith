        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/MathToFuncs/MathToFuncs.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/MathToFuncs/CMakeFiles/obj.MLIRMathToFuncs.dir/MathToFuncs.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/MathToFuncs/CMakeFiles/obj.MLIRMathToFuncs.dir/MathToFuncs.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- MathToFuncs.cpp - Math to outlined implementation conversion -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/MathToFuncs/MathToFuncs.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   15:#include "mlir/Dialect/Math/IR/Math.h"
        -:   16:#include "mlir/Dialect/Utils/IndexingUtils.h"
        -:   17:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   18:#include "mlir/Dialect/Vector/Utils/VectorUtils.h"
        -:   19:#include "mlir/IR/ImplicitLocOpBuilder.h"
        -:   20:#include "mlir/IR/TypeUtilities.h"
        -:   21:#include "mlir/Pass/Pass.h"
        -:   22:#include "mlir/Transforms/DialectConversion.h"
        -:   23:#include "llvm/ADT/DenseMap.h"
        -:   24:#include "llvm/ADT/TypeSwitch.h"
        -:   25:
        -:   26:namespace mlir {
        -:   27:#define GEN_PASS_DEF_CONVERTMATHTOFUNCS
        -:   28:#include "mlir/Conversion/Passes.h.inc"
        -:   29:} // namespace mlir
        -:   30:
        -:   31:using namespace mlir;
        -:   32:
        -:   33:namespace {
        -:   34:// Pattern to convert vector operations to scalar operations.
        -:   35:template <typename Op>
        -:   36:struct VecOpToScalarOp : public OpRewritePattern<Op> {
        -:   37:public:
        -:   38:  using OpRewritePattern<Op>::OpRewritePattern;
        -:   39:
        -:   40:  LogicalResult matchAndRewrite(Op op, PatternRewriter &rewriter) const final;
        -:   41:};
        -:   42:
        -:   43:// Callback type for getting pre-generated FuncOp implementing
        -:   44:// a power operation of the given type.
        -:   45:using GetPowerFuncCallbackTy = function_ref<func::FuncOp(Type)>;
        -:   46:
        -:   47:// Pattern to convert scalar IPowIOp into a call of outlined
        -:   48:// software implementation.
        -:   49:struct IPowIOpLowering : public OpRewritePattern<math::IPowIOp> {
        -:   50:
        -:   51:private:
        -:   52:  GetPowerFuncCallbackTy getFuncOpCallback;
        -:   53:
        -:   54:public:
function _ZN12_GLOBAL__N_115IPowIOpLoweringC2EPN4mlir11MLIRContextEN4llvm12function_refIFNS1_4func6FuncOpENS1_4TypeEEEE called 867 returned 100% blocks executed 100%
      867:   55:  IPowIOpLowering(MLIRContext *context, GetPowerFuncCallbackTy cb)
      867:   56:      : OpRewritePattern<math::IPowIOp>(context), getFuncOpCallback(cb) {}
call    0 returned 100%
call    1 returned 100%
        -:   57:
        -:   58:  /// Convert IPowI into a call to a local function implementing
        -:   59:  /// the power operation. The local function computes a scalar result,
        -:   60:  /// so vector forms of IPowI are linearized.
        -:   61:  LogicalResult matchAndRewrite(math::IPowIOp op,
        -:   62:                                PatternRewriter &rewriter) const final;
        -:   63:};
        -:   64:} // namespace
        -:   65:
        -:   66:template <typename Op>
        -:   67:LogicalResult
function _ZNK12_GLOBAL__N_115VecOpToScalarOpIN4mlir4math7IPowIOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   68:VecOpToScalarOp<Op>::matchAndRewrite(Op op, PatternRewriter &rewriter) const {
call    0 never executed
    #####:   69:  Type opType = op.getType();
    #####:   70:  Location loc = op.getLoc();
call    0 never executed
    #####:   71:  auto vecType = opType.template dyn_cast<VectorType>();
        -:   72:
    #####:   73:  if (!vecType)
branch  0 never executed
branch  1 never executed
    #####:   74:    return rewriter.notifyMatchFailure(op, "not a vector operation");
call    0 never executed
    #####:   75:  if (!vecType.hasRank())
call    0 never executed
        -:   76:    return rewriter.notifyMatchFailure(op, "unknown vector rank");
    #####:   77:  ArrayRef<int64_t> shape = vecType.getShape();
call    0 never executed
    #####:   78:  int64_t numElements = vecType.getNumElements();
call    0 never executed
        -:   79:
    #####:   80:  Value result = rewriter.create<arith::ConstantOp>(
call    0 never executed
call    1 never executed
    #####:   81:      loc, DenseElementsAttr::get(
call    0 never executed
call    1 never executed
    #####:   82:               vecType, IntegerAttr::get(vecType.getElementType(), 0)));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   83:  SmallVector<int64_t> ones(shape.size(), 1);
call    0 never executed
call    1 never executed
    #####:   84:  SmallVector<int64_t> strides = computeStrides(shape, ones);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   85:  for (int64_t linearIndex = 0; linearIndex < numElements; ++linearIndex) {
branch  0 never executed
branch  1 never executed
    #####:   86:    SmallVector<int64_t> positions = delinearize(strides, linearIndex);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   87:    SmallVector<Value> operands;
branch  0 never executed
branch  1 never executed
    #####:   88:    for (Value input : op->getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   89:      operands.push_back(
call    0 never executed
    #####:   90:          rewriter.create<vector::ExtractOp>(loc, input, positions));
call    0 never executed
call    1 never executed
    #####:   91:    Value scalarOp =
call    0 never executed
call    1 never executed
    #####:   92:        rewriter.create<Op>(loc, vecType.getElementType(), operands);
call    0 never executed
    #####:   93:    result =
branch  0 never executed
branch  1 never executed
    #####:   94:        rewriter.create<vector::InsertOp>(loc, scalarOp, result, positions);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   95:  }
    #####:   96:  rewriter.replaceOp(op, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   97:  return success();
branch  0 never executed
branch  1 never executed
        -:   98:}
        -:   99:
        -:  100:/// Create linkonce_odr function to implement the power function with
        -:  101:/// the given \p funcType type inside \p module. \p funcType must be
        -:  102:/// 'IntegerType (*)(IntegerType, IntegerType)' function type.
        -:  103:///
        -:  104:/// template <typename T>
        -:  105:/// T __mlir_math_ipowi_*(T b, T p) {
        -:  106:///   if (p == T(0))
        -:  107:///     return T(1);
        -:  108:///   if (p < T(0)) {
        -:  109:///     if (b == T(0))
        -:  110:///       return T(1) / T(0); // trigger div-by-zero
        -:  111:///     if (b == T(1))
        -:  112:///       return T(1);
        -:  113:///     if (b == T(-1)) {
        -:  114:///       if (p & T(1))
        -:  115:///         return T(-1);
        -:  116:///       return T(1);
        -:  117:///     }
        -:  118:///     return T(0);
        -:  119:///   }
        -:  120:///   T result = T(1);
        -:  121:///   while (true) {
        -:  122:///     if (p & T(1))
        -:  123:///       result *= b;
        -:  124:///     p >>= T(1);
        -:  125:///     if (p == T(0))
        -:  126:///       return result;
        -:  127:///     b *= b;
        -:  128:///   }
        -:  129:/// }
function _ZL22createElementIPowIFuncPN4mlir8ModuleOpENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  130:static func::FuncOp createElementIPowIFunc(ModuleOp *module, Type elementType) {
    #####:  131:  assert(elementType.isa<IntegerType>() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  132:         "non-integer element type for IPowIOp");
        -:  133:
        -:  134:  //  IntegerType elementType = funcType.getInput(0).cast<IntegerType>();
    #####:  135:  ImplicitLocOpBuilder builder =
    #####:  136:      ImplicitLocOpBuilder::atBlockEnd(module->getLoc(), module->getBody());
call    0 never executed
call    1 never executed
        -:  137:
    #####:  138:  std::string funcName("__mlir_math_ipowi");
call    0 never executed
    #####:  139:  llvm::raw_string_ostream nameOS(funcName);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:  nameOS << '_' << elementType;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  141:
    #####:  142:  FunctionType funcType = FunctionType::get(
call    0 never executed
    #####:  143:      builder.getContext(), {elementType, elementType}, elementType);
call    0 never executed
call    1 never executed
    #####:  144:  auto funcOp = builder.create<func::FuncOp>(funcName, funcType);
call    0 never executed
    #####:  145:  LLVM::linkage::Linkage inlineLinkage = LLVM::linkage::Linkage::LinkonceODR;
    #####:  146:  Attribute linkage =
    #####:  147:      LLVM::LinkageAttr::get(builder.getContext(), inlineLinkage);
call    0 never executed
    #####:  148:  funcOp->setAttr("llvm.linkage", linkage);
call    0 never executed
    #####:  149:  funcOp.setPrivate();
call    0 never executed
        -:  150:
    #####:  151:  Block *entryBlock = funcOp.addEntryBlock();
call    0 never executed
    #####:  152:  Region *funcBody = entryBlock->getParent();
call    0 never executed
        -:  153:
    #####:  154:  Value bArg = funcOp.getArgument(0);
call    0 never executed
    #####:  155:  Value pArg = funcOp.getArgument(1);
call    0 never executed
    #####:  156:  builder.setInsertionPointToEnd(entryBlock);
call    0 never executed
    #####:  157:  Value zeroValue = builder.create<arith::ConstantOp>(
    #####:  158:      elementType, builder.getIntegerAttr(elementType, 0));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  159:  Value oneValue = builder.create<arith::ConstantOp>(
    #####:  160:      elementType, builder.getIntegerAttr(elementType, 1));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  161:  Value minusOneValue = builder.create<arith::ConstantOp>(
        -:  162:      elementType,
    #####:  163:      builder.getIntegerAttr(elementType,
branch  0 never executed
branch  1 never executed
    #####:  164:                             APInt(elementType.getIntOrFloatBitWidth(), -1ULL,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:                                   /*isSigned=*/true)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  166:
        -:  167:  // if (p == T(0))
        -:  168:  //   return T(1);
    #####:  169:  auto pIsZero =
    #####:  170:      builder.create<arith::CmpIOp>(arith::CmpIPredicate::eq, pArg, zeroValue);
call    0 never executed
    #####:  171:  Block *thenBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  172:  builder.create<func::ReturnOp>(oneValue);
call    0 never executed
    #####:  173:  Block *fallthroughBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  174:  // Set up conditional branch for (p == T(0)).
    #####:  175:  builder.setInsertionPointToEnd(pIsZero->getBlock());
call    0 never executed
    #####:  176:  builder.create<cf::CondBranchOp>(pIsZero, thenBlock, fallthroughBlock);
call    0 never executed
        -:  177:
        -:  178:  // if (p < T(0)) {
    #####:  179:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  180:  auto pIsNeg =
    #####:  181:      builder.create<arith::CmpIOp>(arith::CmpIPredicate::sle, pArg, zeroValue);
call    0 never executed
        -:  182:  //   if (b == T(0))
    #####:  183:  builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  184:  auto bIsZero =
    #####:  185:      builder.create<arith::CmpIOp>(arith::CmpIPredicate::eq, bArg, zeroValue);
call    0 never executed
        -:  186:  //     return T(1) / T(0);
    #####:  187:  thenBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  188:  builder.create<func::ReturnOp>(
call    0 never executed
    #####:  189:      builder.create<arith::DivSIOp>(oneValue, zeroValue).getResult());
call    0 never executed
call    1 never executed
    #####:  190:  fallthroughBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  191:  // Set up conditional branch for (b == T(0)).
    #####:  192:  builder.setInsertionPointToEnd(bIsZero->getBlock());
call    0 never executed
    #####:  193:  builder.create<cf::CondBranchOp>(bIsZero, thenBlock, fallthroughBlock);
call    0 never executed
        -:  194:
        -:  195:  //   if (b == T(1))
    #####:  196:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  197:  auto bIsOne =
    #####:  198:      builder.create<arith::CmpIOp>(arith::CmpIPredicate::eq, bArg, oneValue);
call    0 never executed
        -:  199:  //    return T(1);
    #####:  200:  thenBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  201:  builder.create<func::ReturnOp>(oneValue);
call    0 never executed
    #####:  202:  fallthroughBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  203:  // Set up conditional branch for (b == T(1)).
    #####:  204:  builder.setInsertionPointToEnd(bIsOne->getBlock());
call    0 never executed
    #####:  205:  builder.create<cf::CondBranchOp>(bIsOne, thenBlock, fallthroughBlock);
call    0 never executed
        -:  206:
        -:  207:  //   if (b == T(-1)) {
    #####:  208:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  209:  auto bIsMinusOne = builder.create<arith::CmpIOp>(arith::CmpIPredicate::eq,
call    0 never executed
    #####:  210:                                                   bArg, minusOneValue);
        -:  211:  //     if (p & T(1))
    #####:  212:  builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  213:  auto pIsOdd = builder.create<arith::CmpIOp>(
call    0 never executed
    #####:  214:      arith::CmpIPredicate::ne, builder.create<arith::AndIOp>(pArg, oneValue),
call    0 never executed
    #####:  215:      zeroValue);
        -:  216:  //       return T(-1);
    #####:  217:  thenBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  218:  builder.create<func::ReturnOp>(minusOneValue);
call    0 never executed
    #####:  219:  fallthroughBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  220:  // Set up conditional branch for (p & T(1)).
    #####:  221:  builder.setInsertionPointToEnd(pIsOdd->getBlock());
call    0 never executed
    #####:  222:  builder.create<cf::CondBranchOp>(pIsOdd, thenBlock, fallthroughBlock);
call    0 never executed
        -:  223:
        -:  224:  //     return T(1);
        -:  225:  //   } // b == T(-1)
    #####:  226:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  227:  builder.create<func::ReturnOp>(oneValue);
call    0 never executed
    #####:  228:  fallthroughBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  229:  // Set up conditional branch for (b == T(-1)).
    #####:  230:  builder.setInsertionPointToEnd(bIsMinusOne->getBlock());
call    0 never executed
    #####:  231:  builder.create<cf::CondBranchOp>(bIsMinusOne, pIsOdd->getBlock(),
call    0 never executed
    #####:  232:                                   fallthroughBlock);
        -:  233:
        -:  234:  //   return T(0);
        -:  235:  // } // (p < T(0))
    #####:  236:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  237:  builder.create<func::ReturnOp>(zeroValue);
call    0 never executed
    #####:  238:  Block *loopHeader = builder.createBlock(
call    0 never executed
        -:  239:      funcBody, funcBody->end(), {elementType, elementType, elementType},
    #####:  240:      {builder.getLoc(), builder.getLoc(), builder.getLoc()});
call    0 never executed
        -:  241:  // Set up conditional branch for (p < T(0)).
    #####:  242:  builder.setInsertionPointToEnd(pIsNeg->getBlock());
call    0 never executed
        -:  243:  // Set initial values of 'result', 'b' and 'p' for the loop.
    #####:  244:  builder.create<cf::CondBranchOp>(pIsNeg, bIsZero->getBlock(), loopHeader,
    #####:  245:                                   ValueRange{oneValue, bArg, pArg});
call    0 never executed
call    1 never executed
        -:  246:
        -:  247:  // T result = T(1);
        -:  248:  // while (true) {
        -:  249:  //   if (p & T(1))
        -:  250:  //     result *= b;
        -:  251:  //   p >>= T(1);
        -:  252:  //   if (p == T(0))
        -:  253:  //     return result;
        -:  254:  //   b *= b;
        -:  255:  // }
    #####:  256:  Value resultTmp = loopHeader->getArgument(0);
call    0 never executed
    #####:  257:  Value baseTmp = loopHeader->getArgument(1);
    #####:  258:  Value powerTmp = loopHeader->getArgument(2);
    #####:  259:  builder.setInsertionPointToEnd(loopHeader);
call    0 never executed
        -:  260:
        -:  261:  //   if (p & T(1))
    #####:  262:  auto powerTmpIsOdd = builder.create<arith::CmpIOp>(
call    0 never executed
    #####:  263:      arith::CmpIPredicate::ne,
    #####:  264:      builder.create<arith::AndIOp>(powerTmp, oneValue), zeroValue);
call    0 never executed
    #####:  265:  thenBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  266:  //     result *= b;
    #####:  267:  Value newResultTmp = builder.create<arith::MulIOp>(resultTmp, baseTmp);
call    0 never executed
call    1 never executed
    #####:  268:  fallthroughBlock = builder.createBlock(funcBody, funcBody->end(), elementType,
call    0 never executed
    #####:  269:                                         builder.getLoc());
call    0 never executed
    #####:  270:  builder.setInsertionPointToEnd(thenBlock);
call    0 never executed
    #####:  271:  builder.create<cf::BranchOp>(newResultTmp, fallthroughBlock);
call    0 never executed
        -:  272:  // Set up conditional branch for (p & T(1)).
    #####:  273:  builder.setInsertionPointToEnd(powerTmpIsOdd->getBlock());
call    0 never executed
    #####:  274:  builder.create<cf::CondBranchOp>(powerTmpIsOdd, thenBlock, fallthroughBlock,
call    0 never executed
    #####:  275:                                   resultTmp);
        -:  276:  // Merged 'result'.
    #####:  277:  newResultTmp = fallthroughBlock->getArgument(0);
call    0 never executed
        -:  278:
        -:  279:  //   p >>= T(1);
    #####:  280:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  281:  Value newPowerTmp = builder.create<arith::ShRUIOp>(powerTmp, oneValue);
call    0 never executed
call    1 never executed
        -:  282:
        -:  283:  //   if (p == T(0))
    #####:  284:  auto newPowerIsZero = builder.create<arith::CmpIOp>(arith::CmpIPredicate::eq,
call    0 never executed
    #####:  285:                                                      newPowerTmp, zeroValue);
        -:  286:  //     return result;
    #####:  287:  thenBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
    #####:  288:  builder.create<func::ReturnOp>(newResultTmp);
call    0 never executed
    #####:  289:  fallthroughBlock = builder.createBlock(funcBody);
call    0 never executed
call    1 never executed
        -:  290:  // Set up conditional branch for (p == T(0)).
    #####:  291:  builder.setInsertionPointToEnd(newPowerIsZero->getBlock());
call    0 never executed
    #####:  292:  builder.create<cf::CondBranchOp>(newPowerIsZero, thenBlock, fallthroughBlock);
call    0 never executed
        -:  293:
        -:  294:  //   b *= b;
        -:  295:  // }
    #####:  296:  builder.setInsertionPointToEnd(fallthroughBlock);
call    0 never executed
    #####:  297:  Value newBaseTmp = builder.create<arith::MulIOp>(baseTmp, baseTmp);
call    0 never executed
call    1 never executed
        -:  298:  // Pass new values for 'result', 'b' and 'p' to the loop header.
    #####:  299:  builder.create<cf::BranchOp>(
    #####:  300:      ValueRange{newResultTmp, newBaseTmp, newPowerTmp}, loopHeader);
call    0 never executed
call    1 never executed
    #####:  301:  return funcOp;
call    0 never executed
        -:  302:}
        -:  303:
        -:  304:/// Convert IPowI into a call to a local function implementing
        -:  305:/// the power operation. The local function computes a scalar result,
        -:  306:/// so vector forms of IPowI are linearized.
        -:  307:LogicalResult
function _ZNK12_GLOBAL__N_115IPowIOpLowering15matchAndRewriteEN4mlir4math7IPowIOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  308:IPowIOpLowering::matchAndRewrite(math::IPowIOp op,
        -:  309:                                 PatternRewriter &rewriter) const {
    #####:  310:  auto baseType = op.getOperands()[0].getType().dyn_cast<IntegerType>();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  311:
    #####:  312:  if (!baseType)
branch  0 never executed
branch  1 never executed
    #####:  313:    return rewriter.notifyMatchFailure(op, "non-integer base operand");
call    0 never executed
        -:  314:
        -:  315:  // The outlined software implementation must have been already
        -:  316:  // generated.
    #####:  317:  func::FuncOp elementFunc = getFuncOpCallback(baseType);
call    0 never executed
    #####:  318:  if (!elementFunc)
branch  0 never executed
branch  1 never executed
    #####:  319:    return rewriter.notifyMatchFailure(op, "missing software implementation");
call    0 never executed
        -:  320:
    #####:  321:  rewriter.replaceOpWithNewOp<func::CallOp>(op, elementFunc, op.getOperands());
call    0 never executed
call    1 never executed
    #####:  322:  return success();
        -:  323:}
        -:  324:
        -:  325:namespace {
        -:  326:struct ConvertMathToFuncsPass
        -:  327:    : public impl::ConvertMathToFuncsBase<ConvertMathToFuncsPass> {
   326638:  328:  ConvertMathToFuncsPass() = default;
call    0 returned 100%
call    1 returned 100%
        -:  329:
        -:  330:  void runOnOperation() override;
        -:  331:
        -:  332:private:
        -:  333:  // Generate outlined implementations for power operations
        -:  334:  // and store them in powerFuncs map.
        -:  335:  void preprocessPowOperations();
        -:  336:
        -:  337:  // A map between function types deduced from power operations
        -:  338:  // and the corresponding outlined software implementations
        -:  339:  // of these operations.
        -:  340:  DenseMap<Type, func::FuncOp> powerFuncs;
        -:  341:};
        -:  342:} // namespace
        -:  343:
function _ZN12_GLOBAL__N_122ConvertMathToFuncsPass23preprocessPowOperationsEv called 867 returned 100% blocks executed 100%
      867:  344:void ConvertMathToFuncsPass::preprocessPowOperations() {
      867:  345:  ModuleOp module = getOperation();
call    0 returned 100%
        -:  346:
      867:  347:  module.walk([&](Operation *op) {
call    0 returned 100%
function _ZZZN12_GLOBAL__N_122ConvertMathToFuncsPass23preprocessPowOperationsEvENKUlPN4mlir9OperationEE_clES3_ENKUlNS1_4math7IPowIOpEE_clES6_.isra.0 called 0 returned 0% blocks executed 0%
   11629*:  348:    TypeSwitch<Operation *>(op).Case<math::IPowIOp>([&](math::IPowIOp op) {
call    0 returned 100%
    #####:  349:      Type resultType = getElementTypeOrSelf(op.getResult().getType());
call    0 never executed
call    1 never executed
        -:  350:
        -:  351:      // Generate the software implementation of this operation,
        -:  352:      // if it has not been generated yet.
    #####:  353:      auto entry = powerFuncs.try_emplace(resultType, func::FuncOp{});
call    0 never executed
    #####:  354:      if (entry.second)
branch  0 never executed
branch  1 never executed
    #####:  355:        entry.first->second = createElementIPowIFunc(&module, resultType);
call    0 never executed
call    1 never executed
   11629*:  356:    });
call    0 returned 100%
        -:  357:  });
      867:  358:}
        -:  359:
function _ZN12_GLOBAL__N_122ConvertMathToFuncsPass14runOnOperationEv called 867 returned 100% blocks executed 94%
      867:  360:void ConvertMathToFuncsPass::runOnOperation() {
      867:  361:  ModuleOp module = getOperation();
call    0 returned 100%
        -:  362:
        -:  363:  // Create outlined implementations for power operations.
      867:  364:  preprocessPowOperations();
call    0 returned 100%
        -:  365:
      867:  366:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      867:  367:  patterns.add<VecOpToScalarOp<math::IPowIOp>>(patterns.getContext());
call    0 returned 100%
        -:  368:
        -:  369:  // For the given Type Returns FuncOp stored in powerFuncs map.
function _ZZN12_GLOBAL__N_122ConvertMathToFuncsPass14runOnOperationEvENKUlN4mlir4TypeEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
     867*:  370:  auto getPowerFuncOpByType = [&](Type type) -> func::FuncOp {
    #####:  371:    auto it = powerFuncs.find(type);
call    0 never executed
    #####:  372:    if (it == powerFuncs.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  373:      return {};
        -:  374:
    #####:  375:    return it->second;
call    0 never executed
      867:  376:  };
      867:  377:  patterns.add<IPowIOpLowering>(patterns.getContext(), getPowerFuncOpByType);
call    0 returned 100%
        -:  378:
     1734:  379:  ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      867:  380:  target.addLegalDialect<arith::ArithDialect, cf::ControlFlowDialect,
      867:  381:                         func::FuncDialect, vector::VectorDialect>();
call    0 returned 100%
      867:  382:  target.addIllegalOp<math::IPowIOp>();
call    0 returned 100%
      867:  383:  if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  384:    signalPassFailure();
call    0 never executed
      867:  385:}
        -:  386:
function _ZN4mlir28createConvertMathToFuncsPassEv called 326638 returned 100% blocks executed 100%
   326638:  387:std::unique_ptr<Pass> mlir::createConvertMathToFuncsPass() {
   326638:  388:  return std::make_unique<ConvertMathToFuncsPass>();
call    0 returned 100%
        -:  389:}
