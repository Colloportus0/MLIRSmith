        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Analysis/DataFlow/IntegerRangeAnalysis.h
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/IntegerRangeAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/IntegerRangeAnalysis.cpp.gcda
        -:    0:Runs:325564
        -:    1://===-IntegerRangeAnalysis.h - Integer range analysis -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file declares the dataflow analysis class for integer range inference
        -:   10:// so that it can be used in transformations over the `arith` dialect such as
        -:   11:// branch elimination or signed->unsigned rewriting
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#ifndef MLIR_ANALYSIS_DATAFLOW_INTEGERANGEANALYSIS_H
        -:   16:#define MLIR_ANALYSIS_DATAFLOW_INTEGERANGEANALYSIS_H
        -:   17:
        -:   18:#include "mlir/Analysis/DataFlow/SparseAnalysis.h"
        -:   19:#include "mlir/Interfaces/InferIntRangeInterface.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace dataflow {
        -:   23:
        -:   24:/// This lattice value represents the integer range of an SSA value.
  154426*:   25:class IntegerValueRange {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 taken 100% (fallthrough)
branch 26 taken 0%
branch 27 taken 0% (fallthrough)
branch 28 taken 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0%
branch 32 taken 100% (fallthrough)
branch 33 taken 0%
branch 34 never executed
branch 35 never executed
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
        -:   26:public:
        -:   27:  /// Create a maximal range ([0, uint_max(t)] / [int_min(t), int_max(t)])
        -:   28:  /// range that is used to mark the value as unable to be analyzed further,
        -:   29:  /// where `t` is the type of `value`.
        -:   30:  static IntegerValueRange getMaxRange(Value value);
        -:   31:
        -:   32:  /// Create an integer value range lattice value.
   60408*:   33:  IntegerValueRange(Optional<ConstantIntRanges> value = None)
   40272*:   34:      : value(std::move(value)) {}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        -:   35:
        -:   36:  /// Whether the range is uninitialized. This happens when the state hasn't
        -:   37:  /// been set during the analysis.
    #####:   38:  bool isUninitialized() const { return !value.has_value(); }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   39:
        -:   40:  /// Get the known integer value range.
   40272*:   41:  const ConstantIntRanges &getValue() const {
   20136*:   42:    assert(!isUninitialized());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
   40272*:   43:    return *value;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 returned 100%
        -:   44:  }
        -:   45:
        -:   46:  /// Compare two ranges.
   60408*:   47:  bool operator==(const IntegerValueRange &rhs) const {
  120816*:   48:    return value == rhs.value;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:   49:  }
        -:   50:
        -:   51:  /// Take the union of two ranges.
function _ZN4mlir8dataflow17IntegerValueRange4joinERKS1_S3_ called 60408 returned 100% blocks executed 100%
    60408:   52:  static IntegerValueRange join(const IntegerValueRange &lhs,
        -:   53:                                const IntegerValueRange &rhs) {
    60408:   54:    if (lhs.isUninitialized())
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    20136:   55:      return rhs;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    40272:   56:    if (rhs.isUninitialized())
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    20136:   57:      return lhs;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    40272:   58:    return IntegerValueRange{lhs.getValue().rangeUnion(rhs.getValue())};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   59:  }
        -:   60:
        -:   61:  /// Print the integer value range.
    #####:   62:  void print(raw_ostream &os) const { os << value; }
call    0 never executed
        -:   63:
        -:   64:private:
        -:   65:  /// The known integer value range.
        -:   66:  Optional<ConstantIntRanges> value;
        -:   67:};
        -:   68:
        -:   69:/// This lattice element represents the integer value range of an SSA value.
        -:   70:/// When this lattice is updated, it automatically updates the constant value
        -:   71:/// of the SSA value (if the range can be narrowed to one).
        -:   72:class IntegerValueRangeLattice : public Lattice<IntegerValueRange> {
        -:   73:public:
    20136:   74:  using Lattice::Lattice;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   75:
        -:   76:  /// If the range can be narrowed to an integer constant, update the constant
        -:   77:  /// value of the SSA value.
        -:   78:  void onUpdate(DataFlowSolver *solver) const override;
        -:   79:};
        -:   80:
        -:   81:/// Integer range analysis determines the integer value range of SSA values
        -:   82:/// using operations that define `InferIntRangeInterface` and also sets the
        -:   83:/// range of iteration indices of loops with known bounds.
        -:   84:class IntegerRangeAnalysis
        -:   85:    : public SparseDataFlowAnalysis<IntegerValueRangeLattice> {
        -:   86:public:
        -:   87:  using SparseDataFlowAnalysis::SparseDataFlowAnalysis;
        -:   88:
        -:   89:  /// At an entry point, we cannot reason about interger value ranges.
function _ZN4mlir8dataflow20IntegerRangeAnalysis15setToEntryStateEPNS0_24IntegerValueRangeLatticeE called 3349 returned 100% blocks executed 100%
     3349:   90:  void setToEntryState(IntegerValueRangeLattice *lattice) override {
     3349:   91:    propagateIfChanged(lattice, lattice->join(IntegerValueRange::getMaxRange(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   92:                                    lattice->getPoint())));
     3349:   93:  }
        -:   94:
        -:   95:  /// Visit an operation. Invoke the transfer function on each operation that
        -:   96:  /// implements `InferIntRangeInterface`.
        -:   97:  void visitOperation(Operation *op,
        -:   98:                      ArrayRef<const IntegerValueRangeLattice *> operands,
        -:   99:                      ArrayRef<IntegerValueRangeLattice *> results) override;
        -:  100:
        -:  101:  /// Visit block arguments or operation results of an operation with region
        -:  102:  /// control-flow for which values are not defined by region control-flow. This
        -:  103:  /// function calls `InferIntRangeInterface` to provide values for block
        -:  104:  /// arguments or tries to reduce the range on loop induction variables with
        -:  105:  /// known bounds.
        -:  106:  void
        -:  107:  visitNonControlFlowArguments(Operation *op, const RegionSuccessor &successor,
        -:  108:                               ArrayRef<IntegerValueRangeLattice *> argLattices,
        -:  109:                               unsigned firstIndex) override;
        -:  110:};
        -:  111:
        -:  112:} // end namespace dataflow
        -:  113:} // end namespace mlir
        -:  114:
        -:  115:#endif // MLIR_ANALYSIS_DATAFLOW_INTEGERANGEANALYSIS_H
