        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Tosa/Transforms/TosaInferShapes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaInferShapes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaInferShapes.cpp.gcda
        -:    0:Runs:325555
        -:    1://===- TosaInferShapes.cpp ------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Propogate shapes forward along TOSA operations to resolve dynamic shape
        -:   10:// operations.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   17:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   18:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   19:#include "mlir/Dialect/Tosa/Utils/ShapeUtils.h"
        -:   20:#include "mlir/IR/BlockAndValueMapping.h"
        -:   21:#include "mlir/IR/Builders.h"
        -:   22:#include "mlir/IR/BuiltinOps.h"
        -:   23:#include "mlir/IR/Matchers.h"
        -:   24:#include "mlir/Pass/Pass.h"
        -:   25:#include "mlir/Transforms/DialectConversion.h"
        -:   26:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   27:#include "llvm/Support/FormatVariadic.h"
        -:   28:
        -:   29:namespace mlir {
        -:   30:namespace tosa {
        -:   31:#define GEN_PASS_DEF_TOSAINFERSHAPES
        -:   32:#include "mlir/Dialect/Tosa/Transforms/Passes.h.inc"
        -:   33:} // namespace tosa
        -:   34:} // namespace mlir
        -:   35:
        -:   36:using namespace mlir;
        -:   37:using namespace mlir::tosa;
        -:   38:
        -:   39:namespace {
        -:   40:
        -:   41:void propagateShapesInRegion(Region &region);
        -:   42:
function _ZN12_GLOBAL__N_123propagateShapesToTosaIfERN4mlir9OperationERN4llvm8DenseMapINS0_5ValueENS0_20ShapedTypeComponentsENS3_12DenseMapInfoIS5_vEENS3_6detail12DenseMapPairIS5_S6_EEEE called 8700 returned 100% blocks executed 8%
     8700:   43:void propagateShapesToTosaIf(
        -:   44:    Operation &op, DenseMap<Value, ShapedTypeComponents> &shapesStorage) {
     8700:   45:  IfOp ifOp = dyn_cast<IfOp>(op);
call    0 returned 100%
     8700:   46:  if (!ifOp)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     8700:   47:    return;
        -:   48:
    #####:   49:  for (auto &region : op.getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   50:    Block &frontBlock = region.front();
call    0 never executed
    #####:   51:    if (frontBlock.getNumArguments() + 1 != ifOp.getNumOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   52:      return;
        -:   53:
    #####:   54:    for (unsigned int i = 1, s = op.getNumOperands(); i < s; i++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:      auto inferredTy = shapesStorage[op.getOperand(i)];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   56:      auto blockArg = frontBlock.getArgument(i - 1);
call    0 never executed
    #####:   57:      auto oldType = blockArg.getType().cast<ShapedType>();
call    0 never executed
        -:   58:
    #####:   59:      if (inferredTy.hasRank()) {
branch  0 never executed
branch  1 never executed
    #####:   60:        Type newType = oldType.clone(inferredTy.getDims());
call    0 never executed
call    1 never executed
    #####:   61:        blockArg.setType(newType);
call    0 never executed
        -:   62:      }
        -:   63:    }
        -:   64:
    #####:   65:    for (int i = 0, e = frontBlock.getNumArguments(); i < e; i++) {
branch  0 never executed
branch  1 never executed
    #####:   66:      ValueKnowledge operandKnowledge = ValueKnowledge::getKnowledgeFromType(
    #####:   67:          ifOp.getOperand(i + 1).getType());
call    0 never executed
call    1 never executed
    #####:   68:      ValueKnowledge blockKnowledge = ValueKnowledge::getKnowledgeFromType(
    #####:   69:          frontBlock.getArgument(i).getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:      ValueKnowledge joinedKnowledge =
    #####:   71:          ValueKnowledge::join(operandKnowledge, blockKnowledge);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:      if (!joinedKnowledge)
branch  0 never executed
branch  1 never executed
    #####:   73:        continue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   74:      frontBlock.getArgument(i).setType(joinedKnowledge.getType());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   75:    }
        -:   76:
    #####:   77:    propagateShapesInRegion(region);
call    0 never executed
        -:   78:  }
        -:   79:}
        -:   80:
function _ZN12_GLOBAL__N_126propagateShapesToTosaWhileERN4mlir9OperationERN4llvm8DenseMapINS0_5ValueENS0_20ShapedTypeComponentsENS3_12DenseMapInfoIS5_vEENS3_6detail12DenseMapPairIS5_S6_EEEE called 8700 returned 100% blocks executed 3%
     8700:   81:void propagateShapesToTosaWhile(
        -:   82:    Operation &op, DenseMap<Value, ShapedTypeComponents> &shapesStorage) {
     8700:   83:  WhileOp whileOp = dyn_cast<WhileOp>(op);
call    0 returned 100%
     8700:   84:  if (!whileOp)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     8700:   85:    return;
        -:   86:
        -:   87:  // Determine what the expected argument types are to the cond/body blocks.
        -:   88:  // The expected arguments should be compatible with ever iteration of the
        -:   89:  // loop body / condition for tosa.while.
    #####:   90:  llvm::SmallVector<Type> argTypes;
call    0 never executed
    #####:   91:  for (auto operand : op.getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   92:    auto operandTy = operand.getType().cast<ShapedType>();
call    0 never executed
    #####:   93:    auto shapedTypeComponent = shapesStorage[operand];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   94:    if (shapedTypeComponent.hasRank()) {
branch  0 never executed
branch  1 never executed
    #####:   95:      auto newTy = operandTy.clone(shapedTypeComponent.getDims());
call    0 never executed
call    1 never executed
    #####:   96:      argTypes.push_back(newTy);
call    0 never executed
        -:   97:    } else {
    #####:   98:      argTypes.push_back(operand.getType());
call    0 never executed
        -:   99:    }
        -:  100:  }
        -:  101:
        -:  102:  // Save out the type information so we can restore at the end.
    #####:  103:  llvm::DenseMap<Value, Type> originalTypeMap;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  104:  for (auto &block : op.getRegion(1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  105:    for (auto arg : block.getArguments())
branch  0 never executed
branch  1 never executed
    #####:  106:      originalTypeMap[arg] = arg.getType();
call    0 never executed
    #####:  107:    for (auto &op : block)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  108:      for (auto result : op.getResults())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  109:        originalTypeMap[result] = result.getType();
call    0 never executed
        -:  110:  }
        -:  111:
        -:  112:  bool hasNewTypes = true;
    #####:  113:  while (hasNewTypes) {
branch  0 never executed
branch  1 never executed
        -:  114:
        -:  115:    // Set types on the block args.
    #####:  116:    Region &bodyRegion = op.getRegion(1);
call    0 never executed
    #####:  117:    Block &block = bodyRegion.front();
call    0 never executed
    #####:  118:    for (int i = 0, s = argTypes.size(); i < s; i++) {
branch  0 never executed
branch  1 never executed
    #####:  119:      block.getArgument(i).setType(argTypes[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  120:    }
        -:  121:
        -:  122:    // Propagate to the end.
    #####:  123:    propagateShapesInRegion(bodyRegion);
call    0 never executed
        -:  124:
        -:  125:    // Find all the tosa yield types and verify there is atleast one.
    #####:  126:    llvm::SmallVector<YieldOp> yieldOps;
    #####:  127:    for (auto &block : bodyRegion)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  128:      if (auto yieldOp = dyn_cast<YieldOp>(block.getTerminator()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  129:        yieldOps.push_back(yieldOp);
call    0 never executed
        -:  130:
    #####:  131:    if (yieldOps.empty())
branch  0 never executed
branch  1 never executed
    #####:  132:      return;
call    0 never executed
        -:  133:
        -:  134:    // Using the new tosa.yield operand types, infer the new subtypes.
    #####:  135:    llvm::SmallVector<ValueKnowledge> yieldTypeInfo;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  136:    for (auto ty : argTypes) {
branch  0 never executed
branch  1 never executed
    #####:  137:      yieldTypeInfo.push_back(ValueKnowledge::getKnowledgeFromType(ty));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  138:    }
        -:  139:
    #####:  140:    for (auto yieldOp : yieldOps) {
branch  0 never executed
branch  1 never executed
    #####:  141:      for (const auto &it : llvm::enumerate(yieldOp.getOperands())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  142:        auto newKnowledge =
call    0 never executed
    #####:  143:            ValueKnowledge::getKnowledgeFromType(it.value().getType());
call    0 never executed
call    1 never executed
    #####:  144:        yieldTypeInfo[it.index()] =
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  145:            ValueKnowledge::meet(yieldTypeInfo[it.index()], newKnowledge);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  146:      }
        -:  147:    }
        -:  148:
        -:  149:    // This should never happen.
    #####:  150:    if (yieldTypeInfo.size() != argTypes.size()) {
branch  0 never executed
branch  1 never executed
    #####:  151:      op.emitWarning("has a tosa.yield with the incorrect number of operands");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  152:      return;
call    0 never executed
        -:  153:    }
        -:  154:
        -:  155:    // Determine the new block args and see if any changed.
    #####:  156:    hasNewTypes = false;
    #####:  157:    for (int i = 0, s = yieldTypeInfo.size(); i < s; i++) {
branch  0 never executed
branch  1 never executed
    #####:  158:      Type newType = yieldTypeInfo[i].getType();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  159:      hasNewTypes |= (newType != argTypes[i]);
branch  0 never executed
branch  1 never executed
    #####:  160:      argTypes[i] = newType;
        -:  161:    }
        -:  162:
        -:  163:    // The types inferred in the block assume the operand types specified for
        -:  164:    // this iteration. We need to restore the original types to ensure that
        -:  165:    // future iterations only use the already specified types, not possible
        -:  166:    // types from previous iterations.
    #####:  167:    for (auto &block : bodyRegion) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  168:      for (auto arg : block.getArguments())
branch  0 never executed
branch  1 never executed
    #####:  169:        arg.setType(originalTypeMap[arg]);
call    0 never executed
call    1 never executed
    #####:  170:      for (auto &op : block)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  171:        for (auto result : op.getResults())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  172:          result.setType(originalTypeMap[result]);
call    0 never executed
call    1 never executed
        -:  173:    }
        -:  174:  }
        -:  175:
        -:  176:  // We now set the block arguments according to the most recent shape
        -:  177:  // inference results. This gives us the block arg types for the next
        -:  178:  // iteration.
    #####:  179:  for (auto &region : op.getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  180:    for (unsigned int i = 0, s = argTypes.size(); i < s; i++) {
branch  0 never executed
branch  1 never executed
    #####:  181:      region.front().getArgument(i).setType(argTypes[i]);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  182:    }
        -:  183:
    #####:  184:    propagateShapesInRegion(region);
call    0 never executed
        -:  185:  }
        -:  186:}
        -:  187:
function _ZN12_GLOBAL__N_123propagateShapesInRegionERN4mlir6RegionE called 1088 returned 100% blocks executed 89%
     1088:  188:void propagateShapesInRegion(Region &region) {
     2173:  189:  DenseMap<Value, ShapedTypeComponents> shapesStorage;
call    0 returned 100%
call    1 returned 100%
function _ZZN12_GLOBAL__N_123propagateShapesInRegionERN4mlir6RegionEENKUlNS0_5ValueENS0_4TypeEE_clES3_S4_.isra.0 called 6175 returned 100% blocks executed 60%
     6175:  190:  auto setShapes = [&](Value val, Type t) {
     6175:  191:    if (auto st = t.dyn_cast<ShapedType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    6175*:  192:      shapesStorage[val] = st;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  193:    else
    #####:  194:      shapesStorage[val] = t;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
     7262:  195:  };
function _ZZN12_GLOBAL__N_123propagateShapesInRegionERN4mlir6RegionEENKUlNS0_5ValueEE0_clES3_.isra.0 called 17640 returned 100% blocks executed 100%
    18727:  196:  auto operandShape = [&](Value val) -> ShapeAdaptor {
        -:  197:    // Query the WIP mapping rather than the type if set.
    17640:  198:    auto it = shapesStorage.find(val);
call    0 returned 100%
    17640:  199:    if (it == shapesStorage.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 47% (fallthrough)
branch  3 taken 53%
     8326:  200:      return nullptr;
call    0 returned 100%
     9314:  201:    return it->second;
call    0 returned 100%
call    1 returned 100%
     1087:  202:  };
        -:  203:
     1944:  204:  for (auto &block : region) {
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    10447:  205:    for (Operation &op : block) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
     9589:  206:      if (op.getDialect()->getNamespace() != TosaDialect::getDialectNamespace())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
     3408:  207:        continue;
        -:  208:
     8700:  209:      propagateShapesToTosaIf(op, shapesStorage);
call    0 returned 100%
     8700:  210:      propagateShapesToTosaWhile(op, shapesStorage);
call    0 returned 100%
        -:  211:
     8700:  212:      InferShapedTypeOpInterface shapeInterface =
call    0 returned 100%
     8700:  213:          dyn_cast<InferShapedTypeOpInterface>(op);
     8700:  214:      if (!shapeInterface)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
     2519:  215:        continue;
        -:  216:
    12362:  217:      SmallVector<ShapedTypeComponents> returnedShapes;
call    0 returned 100%
call    1 returned 100%
        -:  218:
     6181:  219:      ValueShapeRange range(op.getOperands(), operandShape);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     6181:  220:      if (shapeInterface
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     6181:  221:              .inferReturnTypeComponents(op.getContext(), op.getLoc(), range,
call    0 returned 100%
        -:  222:                                         op.getAttrDictionary(),
     6181:  223:                                         op.getRegions(), returnedShapes)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     6181:  224:              .succeeded()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    18543:  225:        for (auto it : llvm::zip(op.getResults(), returnedShapes)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
     6181:  226:          Value result = std::get<0>(it);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    12356:  227:          ShapedTypeComponents predictedShape = std::get<1>(it);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  228:
        -:  229:          // Check whether this use case is replaceable. We define an op as
        -:  230:          // being replaceable if it is used by a ReturnOp or a TosaOp.
     6181:  231:          bool replaceable = true;
    13317:  232:          for (auto *user : result.getUsers()) {
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
     7136:  233:            if (isa<func::ReturnOp>(user))
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
     2016:  234:              continue;
    12250:  235:            if (user->getDialect()->getNamespace() ==
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
        -:  236:                TosaDialect::getDialectNamespace())
     5114:  237:              continue;
        -:  238:
        -:  239:            replaceable = false;
        -:  240:          }
        -:  241:
        -:  242:          // Determine the knowledge based on the output type.
        -:  243:          // TODO: should also query WIP type probably
     6181:  244:          Type resultTy = result.getType();
call    0 returned 100%
     6181:  245:          auto currentKnowledge =
    12356:  246:              ValueKnowledge::getKnowledgeFromType(resultTy);
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
        -:  247:
        -:  248:          // Compute the knowledge based on the inferred type.
    12356:  249:          auto inferredKnowledge = ValueKnowledge::getPessimisticValueState();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     6181:  250:          inferredKnowledge.dtype =
call    0 returned 100%
     6181:  251:              resultTy.cast<ShapedType>().getElementType();
call    0 returned 100%
     6181:  252:          inferredKnowledge.hasRank = predictedShape.hasRank();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     6181:  253:          if (predictedShape.hasRank()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    30403:  254:            for (auto dim : predictedShape.getDims()) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
    24222:  255:              inferredKnowledge.sizes.push_back(dim);
call    0 returned 100%
        -:  256:            }
        -:  257:          }
        -:  258:
     6181:  259:          if (!replaceable)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
       12:  260:            continue;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  261:
        -:  262:          // Compute the new type based on the joined version.
     6175:  263:          auto newKnowledge =
    12350:  264:              ValueKnowledge::join(currentKnowledge, inferredKnowledge);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    6175*:  265:          if (!newKnowledge)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       6*:  266:            continue;
branch  0 never executed
branch  1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     6175:  267:          setShapes(result, newKnowledge.getType());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  268:        }
        -:  269:      }
        -:  270:    }
        -:  271:  }
        -:  272:
        -:  273:  // Actually update types with updated shape knowledge.
     8348:  274:  for (auto it : shapesStorage) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 85% (fallthrough)
branch  4 taken 15%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
    12350:  275:    auto result = it.second;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
     6175:  276:    if (result.hasRank()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     6175:  277:      Type t = it.first.getType().cast<ShapedType>().clone(result.getDims());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     6175:  278:      it.first.setType(t);
call    0 returned 100%
        -:  279:    }
        -:  280:  }
     1084:  281:}
        -:  282:
        -:  283:/// Pass that performs shape propagation across TOSA operations. This includes
        -:  284:/// migrating to within the regions of if/while operations.
   388594:  285:struct TosaInferShapes
call    0 returned 100%
call    1 returned 100%
        -:  286:    : public tosa::impl::TosaInferShapesBase<TosaInferShapes> {
        -:  287:public:
function _ZN12_GLOBAL__N_115TosaInferShapes14runOnOperationEv called 1091 returned 100% blocks executed 100%
     1091:  288:  void runOnOperation() override {
     1091:  289:    func::FuncOp func = getOperation();
call    0 returned 100%
        -:  290:
     1090:  291:    IRRewriter rewriter(func.getContext());
call    0 returned 100%
call    1 returned 100%
        -:  292:
     1090:  293:    propagateShapesInRegion(func.getBody());
call    0 returned 100%
call    1 returned 100%
        -:  294:
        -:  295:    // Insert UnrealizedConversionCasts to guarantee ReturnOp agress with
        -:  296:    // the FuncOp type.
function _ZZN12_GLOBAL__N_115TosaInferShapes14runOnOperationEvENKUlN4mlir4func8ReturnOpEE_clES3_.isra.0 called 858 returned 100% blocks executed 75%
     1084:  297:    func.walk([&](func::ReturnOp op) {
call    0 returned 100%
call    1 returned 100%
     1716:  298:      func::FuncOp parent = dyn_cast<func::FuncOp>(op->getParentOp());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      858:  299:      if (!parent)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  300:        return;
        -:  301:
     858*:  302:      rewriter.setInsertionPoint(op);
call    0 returned 100%
      858:  303:      FunctionType funcTy = func.getFunctionType();
call    0 returned 100%
      858:  304:      auto resultTys = funcTy.getResults();
call    0 returned 100%
        -:  305:
      858:  306:      bool castAdded = false;
     1716:  307:      SmallVector<Value> castedValues;
call    0 returned 100%
     2880:  308:      for (auto it : llvm::zip(op->getOperands(), resultTys)) {
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
     2022:  309:        auto operand = std::get<0>(it);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2022:  310:        auto currentTy = operand.getType();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2022:  311:        auto castTy = std::get<1>(it);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2022:  312:        if (currentTy == castTy) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2022:  313:          castedValues.push_back(operand);
call    0 returned 100%
     2022:  314:          continue;
        -:  315:        }
        -:  316:
    #####:  317:        castedValues.push_back(
call    0 never executed
    #####:  318:            rewriter.create<tensor::CastOp>(op.getLoc(), castTy, operand)
call    0 never executed
call    1 never executed
        -:  319:                .getResult());
        -:  320:
    #####:  321:        castAdded = true;
        -:  322:      }
        -:  323:
      858:  324:      if (castAdded) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  325:        rewriter.replaceOpWithNewOp<func::ReturnOp>(op, castedValues);
call    0 never executed
        -:  326:      }
        -:  327:    });
     1086:  328:  }
        -:  329:};
        -:  330:} // namespace
        -:  331:
function _ZN4mlir4tosa25createTosaInferShapesPassEv called 326602 returned 100% blocks executed 100%
   326602:  332:std::unique_ptr<Pass> mlir::tosa::createTosaInferShapesPass() {
   326602:  333:  return std::make_unique<TosaInferShapes>();
call    0 returned 100%
        -:  334:}
