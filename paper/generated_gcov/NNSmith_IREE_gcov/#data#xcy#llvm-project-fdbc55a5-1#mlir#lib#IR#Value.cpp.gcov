        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/IR/Value.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Value.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Value.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- Value.cpp - MLIR Value Classes -------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Value.h"
        -:   10:#include "mlir/IR/Block.h"
        -:   11:#include "mlir/IR/BuiltinTypes.h"
        -:   12:#include "mlir/IR/Operation.h"
        -:   13:#include "llvm/ADT/SmallPtrSet.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::detail;
        -:   17:
        -:   18:/// If this value is the result of an Operation, return the operation that
        -:   19:/// defines it.
function _ZNK4mlir5Value13getDefiningOpEv called 17791722 returned 100% blocks executed 100%
 17791722:   20:Operation *Value::getDefiningOp() const {
 17791722:   21:  if (auto result = dyn_cast<OpResult>())
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
 15763445:   22:    return result.getOwner();
call    0 returned 100%
        -:   23:  return nullptr;
        -:   24:}
        -:   25:
function _ZNK4mlir5Value6getLocEv called 8211 returned 100% blocks executed 100%
     8211:   26:Location Value::getLoc() const {
     8211:   27:  if (auto *op = getDefiningOp())
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
     6333:   28:    return op->getLoc();
        -:   29:
     1878:   30:  return cast<BlockArgument>().getLoc();
call    0 returned 100%
        -:   31:}
        -:   32:
function _ZN4mlir5Value6setLocENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   33:void Value::setLoc(Location loc) {
    #####:   34:  if (auto *op = getDefiningOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:    return op->setLoc(loc);
        -:   36:
    #####:   37:  return cast<BlockArgument>().setLoc(loc);
call    0 never executed
        -:   38:}
        -:   39:
        -:   40:/// Return the Region in which this Value is defined.
function _ZN4mlir5Value15getParentRegionEv called 8736143 returned 100% blocks executed 100%
  8736143:   41:Region *Value::getParentRegion() {
  8736143:   42:  if (auto *op = getDefiningOp())
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
  7061299:   43:    return op->getParentRegion();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1674880:   44:  return cast<BlockArgument>().getOwner()->getParent();
call    0 returned 100%
call    1 returned 100%
        -:   45:}
        -:   46:
        -:   47:/// Return the Block in which this Value is defined.
function _ZN4mlir5Value14getParentBlockEv called 7993 returned 100% blocks executed 67%
     7993:   48:Block *Value::getParentBlock() {
     7993:   49:  if (Operation *op = getDefiningOp())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     7993:   50:    return op->getBlock();
    #####:   51:  return cast<BlockArgument>().getOwner();
call    0 never executed
        -:   52:}
        -:   53:
        -:   54://===----------------------------------------------------------------------===//
        -:   55:// Value::UseLists
        -:   56://===----------------------------------------------------------------------===//
        -:   57:
        -:   58:/// Replace all uses of 'this' value with the new value, updating anything in
        -:   59:/// the IR that uses 'this' to use the other value instead except if the user is
        -:   60:/// listed in 'exceptions' .
function _ZNK4mlir5Value20replaceAllUsesExceptES0_RKN4llvm15SmallPtrSetImplIPNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:   61:void Value::replaceAllUsesExcept(
        -:   62:    Value newValue, const SmallPtrSetImpl<Operation *> &exceptions) const {
    #####:   63:  for (OpOperand &use : llvm::make_early_inc_range(getUses())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   64:    if (exceptions.count(use.getOwner()) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:      use.set(newValue);
branch  0 never executed
branch  1 never executed
        -:   66:  }
    #####:   67:}
        -:   68:
        -:   69:/// Replace all uses of 'this' value with 'newValue', updating anything in the
        -:   70:/// IR that uses 'this' to use the other value instead except if the user is
        -:   71:/// 'exceptedUser'.
function _ZNK4mlir5Value20replaceAllUsesExceptES0_PNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   72:void Value::replaceAllUsesExcept(Value newValue,
        -:   73:                                 Operation *exceptedUser) const {
    #####:   74:  for (OpOperand &use : llvm::make_early_inc_range(getUses())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   75:    if (use.getOwner() != exceptedUser)
branch  0 never executed
branch  1 never executed
    #####:   76:      use.set(newValue);
branch  0 never executed
branch  1 never executed
        -:   77:  }
    #####:   78:}
        -:   79:
        -:   80:/// Replace all uses of 'this' value with 'newValue' if the given callback
        -:   81:/// returns true.
function _ZN4mlir5Value17replaceUsesWithIfES0_N4llvm12function_refIFbRNS_9OpOperandEEEE called 1691 returned 100% blocks executed 88%
     1691:   82:void Value::replaceUsesWithIf(Value newValue,
        -:   83:                              function_ref<bool(OpOperand &)> shouldReplace) {
     6443:   84:  for (OpOperand &use : llvm::make_early_inc_range(getUses()))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
     2376:   85:    if (shouldReplace(use))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     4752:   86:      use.set(newValue);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1691:   87:}
        -:   88:
        -:   89:/// Returns true if the value is used outside of the given block.
function _ZN4mlir5Value20isUsedOutsideOfBlockEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:   90:bool Value::isUsedOutsideOfBlock(Block *block) {
    #####:   91:  return llvm::any_of(getUsers(), [block](Operation *user) {
    #####:   92:    return user->getBlock() != block;
branch  0 never executed
branch  1 never executed
    #####:   93:  });
        -:   94:}
        -:   95:
        -:   96://===----------------------------------------------------------------------===//
        -:   97:// OpResult
        -:   98://===----------------------------------------------------------------------===//
        -:   99:
        -:  100:/// Returns the parent operation of this trailing result.
function _ZNK4mlir6detail12OpResultImpl8getOwnerEv called 20148038 returned 100% blocks executed 80%
 20148038:  101:Operation *OpResultImpl::getOwner() const {
        -:  102:  // We need to do some arithmetic to get the operation pointer. Results are
        -:  103:  // stored in reverse order before the operation, so move the trailing owner up
        -:  104:  // to the start of the array. A rough diagram of the memory layout is:
        -:  105:  //
        -:  106:  // | Out-of-Line results | Inline results | Operation |
        -:  107:  //
        -:  108:  // Given that the results are reverse order we use the result number to know
        -:  109:  // how far to jump to get to the operation. So if we are currently the 0th
        -:  110:  // result, the layout would be:
        -:  111:  //
        -:  112:  // | Inline result 0 | Operation
        -:  113:  //
        -:  114:  // ^-- To get the base address of the operation, we add the result count + 1.
 20148038:  115:  if (const auto *result = dyn_cast<InlineOpResult>(this)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
 20148035:  116:    result += result->getResultNumber() + 1;
 20148035:  117:    return reinterpret_cast<Operation *>(const_cast<InlineOpResult *>(result));
        -:  118:  }
        -:  119:
        -:  120:  // Out-of-line results are stored in an array just before the inline results.
    #####:  121:  const OutOfLineOpResult *outOfLineIt = (const OutOfLineOpResult *)(this);
    #####:  122:  outOfLineIt += (outOfLineIt->outOfLineIndex + 1);
        -:  123:
        -:  124:  // Move the owner past the inline results to get to the operation.
    #####:  125:  const auto *inlineIt = reinterpret_cast<const InlineOpResult *>(outOfLineIt);
    #####:  126:  inlineIt += getMaxInlineResults();
    #####:  127:  return reinterpret_cast<Operation *>(const_cast<InlineOpResult *>(inlineIt));
        -:  128:}
        -:  129:
function _ZN4mlir6detail12OpResultImpl21getNextResultAtOffsetEl called 25725880 returned 100% blocks executed 25%
 25725880:  130:OpResultImpl *OpResultImpl::getNextResultAtOffset(intptr_t offset) {
 25725880:  131:  if (offset == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  132:    return this;
        -:  133:  // We need to do some arithmetic to get the next result given that results are
        -:  134:  // in reverse order, and that we need to account for the different types of
        -:  135:  // results. As a reminder, the rough diagram of the memory layout is:
        -:  136:  //
        -:  137:  // | Out-of-Line results | Inline results | Operation |
        -:  138:  //
        -:  139:  // So an example operation with two results would look something like:
        -:  140:  //
        -:  141:  // | Inline result 1 | Inline result 0 | Operation |
        -:  142:  //
        -:  143:
        -:  144:  // Handle the case where this result is an inline result.
    #####:  145:  OpResultImpl *result = this;
    #####:  146:  if (auto *inlineResult = dyn_cast<InlineOpResult>(this)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  147:    // Check to see how many results there are after this one before the start
        -:  148:    // of the out-of-line results. If the desired offset is less than the number
        -:  149:    // remaining, we can directly use the offset from the current result
        -:  150:    // pointer. The following diagrams highlight the two situations.
        -:  151:    //
        -:  152:    // | Out-of-Line results | Inline results | Operation |
        -:  153:    //                                    ^- Say we are here.
        -:  154:    //                           ^- If our destination is here, we can use the
        -:  155:    //                              offset directly.
        -:  156:    //
    #####:  157:    intptr_t leftBeforeTrailing =
branch  0 never executed
branch  1 never executed
    #####:  158:        getMaxInlineResults() - inlineResult->getResultNumber() - 1;
branch  0 never executed
branch  1 never executed
    #####:  159:    if (leftBeforeTrailing >= offset)
branch  0 never executed
branch  1 never executed
    #####:  160:      return inlineResult - offset;
        -:  161:
        -:  162:    // Otherwise, adjust the current result pointer to the end (start in memory)
        -:  163:    // of the inline result array.
        -:  164:    //
        -:  165:    // | Out-of-Line results | Inline results | Operation |
        -:  166:    //                                    ^- Say we are here.
        -:  167:    //                  ^- If our destination is here, we need to first jump to
        -:  168:    //                     the end (start in memory) of the inline result array.
        -:  169:    //
    #####:  170:    result = inlineResult - leftBeforeTrailing;
    #####:  171:    offset -= leftBeforeTrailing;
        -:  172:  }
        -:  173:
        -:  174:  // If we land here, the current result is an out-of-line result and we can
        -:  175:  // offset directly.
    #####:  176:  return reinterpret_cast<OutOfLineOpResult *>(result) - offset;
        -:  177:}
        -:  178:
        -:  179:/// Given a number of operation results, returns the number that need to be
        -:  180:/// stored inline.
function _ZN4mlir8OpResult12getNumInlineEj called 9756278 returned 100% blocks executed 67%
  9756278:  181:unsigned OpResult::getNumInline(unsigned numResults) {
  9756278:  182:  return std::min(numResults, OpResultImpl::getMaxInlineResults());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  183:}
        -:  184:
        -:  185:/// Given a number of operation results, returns the number that need to be
        -:  186:/// stored as trailing.
function _ZN4mlir8OpResult14getNumTrailingEj called 9756278 returned 100% blocks executed 67%
  9756278:  187:unsigned OpResult::getNumTrailing(unsigned numResults) {
        -:  188:  // If we can pack all of the results, there is no need for additional storage.
  9756278:  189:  unsigned maxInline = OpResultImpl::getMaxInlineResults();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
 9756278*:  190:  return numResults <= maxInline ? 0 : numResults - maxInline;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  191:}
        -:  192:
        -:  193://===----------------------------------------------------------------------===//
        -:  194:// BlockOperand
        -:  195://===----------------------------------------------------------------------===//
        -:  196:
        -:  197:/// Provide the use list that is attached to the given block.
function _ZN4mlir12BlockOperand10getUseListEPNS_5BlockE called 9270 returned 100% blocks executed 100%
     9270:  198:IRObjectWithUseList<BlockOperand> *BlockOperand::getUseList(Block *value) {
     9270:  199:  return value;
        -:  200:}
        -:  201:
        -:  202:/// Return which operand this is in the operand list.
function _ZN4mlir12BlockOperand16getOperandNumberEv called 0 returned 0% blocks executed 0%
    #####:  203:unsigned BlockOperand::getOperandNumber() {
    #####:  204:  return this - &getOwner()->getBlockOperands()[0];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  205:}
        -:  206:
        -:  207://===----------------------------------------------------------------------===//
        -:  208:// OpOperand
        -:  209://===----------------------------------------------------------------------===//
        -:  210:
        -:  211:/// Return which operand this is in the operand list.
function _ZN4mlir9OpOperand16getOperandNumberEv called 607939 returned 100% blocks executed 75%
   607939:  212:unsigned OpOperand::getOperandNumber() {
   607939:  213:  return this - &getOwner()->getOpOperands()[0];
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  214:}
