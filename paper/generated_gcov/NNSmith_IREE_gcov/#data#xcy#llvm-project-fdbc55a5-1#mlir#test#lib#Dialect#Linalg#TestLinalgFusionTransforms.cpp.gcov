        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Linalg/TestLinalgFusionTransforms.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgFusionTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgFusionTransforms.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestLinalgFusionTransforms.cpp - Test Linalg fusion patterns -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements logic for testing Linalg fusion patterns.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/Linalg/Analysis/DependenceAnalysis.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   17:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:#include "mlir/Pass/PassManager.h"
        -:   20:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   21:#include "mlir/Transforms/Passes.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::linalg;
        -:   25:
function _ZL21fuseLinalgOpsGreedilyN4mlir4func6FuncOpE called 999 returned 100% blocks executed 27%
      999:   26:static LogicalResult fuseLinalgOpsGreedily(func::FuncOp f) {
      999:   27:  OpBuilder b(f);
call    0 returned 100%
      999:   28:  DenseSet<Operation *> eraseSet;
call    0 returned 100%
        -:   29:
        -:   30:  // Save original Linalg ops, we only want to make a pass over those.
     1998:   31:  SmallVector<LinalgOp, 8> linalgOps;
call    0 returned 100%
call    1 returned 100%
     999*:   32:  f.walk([&](LinalgOp op) {
call    0 returned 100%
        -:   33:    // TODO: support multi-results.
    #####:   34:    if (op->getNumResults() <= 1)
branch  0 never executed
branch  1 never executed
    #####:   35:      linalgOps.push_back(op);
call    0 never executed
        -:   36:  });
        -:   37:
        -:   38:  // Tile and Fuse for tensors inputs (TODO: all tensor operands).
     1000:   39:  bool changed = false;
    1000*:   40:  for (LinalgOp linalgOp : llvm::reverse(linalgOps)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:   41:    for (OpOperand &opOperand : linalgOp->getOpOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:      if (opOperand.get().getType().isa<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   43:        // TODO: LinalgDependenceGraph should be able to update itself.
        -:   44:        // The current naive and expensive reconstruction of the graph should be
        -:   45:        // removed.
    #####:   46:        linalg::Aliases aliases;
call    0 never executed
    #####:   47:        linalg::LinalgDependenceGraph graph(aliases, linalgOps);
call    0 never executed
call    1 never executed
    #####:   48:        auto info = fuseProducerOfBuffer(b, opOperand, graph);
call    0 never executed
    #####:   49:        if (failed(info))
branch  0 never executed
branch  1 never executed
    #####:   50:          continue;
call    0 never executed
call    1 never executed
    #####:   51:        auto *originalOp = info->originalProducer.getOperation();
call    0 never executed
    #####:   52:        eraseSet.insert(originalOp);
call    0 never executed
    #####:   53:        auto *originalOpInLinalgOpsVector =
call    0 never executed
    #####:   54:            std::find(linalgOps.begin(), linalgOps.end(), originalOp);
call    0 never executed
    #####:   55:        *originalOpInLinalgOpsVector = info->fusedProducer.getOperation();
call    0 never executed
    #####:   56:        changed = true;
call    0 never executed
    #####:   57:      } else if (opOperand.get().getType().isa<RankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   58:        // Tile and Fuse tensor input.
    #####:   59:        if (opOperand.getOperandNumber() >= linalgOp.getNumDpsInputs())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   60:          continue;
    #####:   61:        auto info = fuseProducerOfTensor(b, opOperand);
call    0 never executed
    #####:   62:        if (failed(info))
branch  0 never executed
branch  1 never executed
    #####:   63:          continue;
    #####:   64:        auto *originalOp = info->originalProducer.getOperation();
call    0 never executed
    #####:   65:        auto *originalOpInLinalgOpsVector =
call    0 never executed
    #####:   66:            std::find(linalgOps.begin(), linalgOps.end(), originalOp);
call    0 never executed
    #####:   67:        *originalOpInLinalgOpsVector = info->fusedProducer.getOperation();
call    0 never executed
        -:   68:        // Don't mark for erasure in the tensor case, let DCE handle this.
    #####:   69:        changed = true;
        -:   70:      }
        -:   71:    }
        -:   72:  }
        -:   73:  // The `fuseProducerOfBuffer` function performs structural checks and in
        -:   74:  // particular that no covering read or write exist between the consumer and
        -:   75:  // the producer. As a consequence, the only fusions that may occur preserve
        -:   76:  // subsequent dependences and are guaranteed by construction to produce the
        -:   77:  // whole view. We may thus erase the producer once it is fused.
    1000*:   78:  for (auto *e : eraseSet)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
    #####:   79:    e->erase();
call    0 never executed
        -:   80:
     1998:   81:  return changed ? success() : failure();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   82:}
        -:   83:
        -:   84:namespace {
   388826:   85:struct TestLinalgGreedyFusion
call    0 returned 100%
call    1 returned 100%
        -:   86:    : public PassWrapper<TestLinalgGreedyFusion, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_122TestLinalgGreedyFusion13resolveTypeIDEv called 326618 returned 100% blocks executed 100%
   326618:   87:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLinalgGreedyFusion)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   88:
function _ZNK12_GLOBAL__N_122TestLinalgGreedyFusion20getDependentDialectsERN4mlir15DialectRegistryE called 1058 returned 100% blocks executed 100%
     1058:   89:  void getDependentDialects(DialectRegistry &registry) const override {
     1058:   90:    registry.insert<AffineDialect, linalg::LinalgDialect, memref::MemRefDialect,
call    0 returned 100%
     1058:   91:                    scf::SCFDialect>();
     1058:   92:  }
function _ZNK12_GLOBAL__N_122TestLinalgGreedyFusion11getArgumentEv called 325618 returned 100% blocks executed 100%
   325618:   93:  StringRef getArgument() const final { return "test-linalg-greedy-fusion"; }
function _ZNK12_GLOBAL__N_122TestLinalgGreedyFusion14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   94:  StringRef getDescription() const final {
   325560:   95:    return "Test Linalg fusion by applying a greedy test transformation.";
        -:   96:  }
function _ZN12_GLOBAL__N_122TestLinalgGreedyFusion14runOnOperationEv called 1003 returned 100% blocks executed 78%
     1003:   97:  void runOnOperation() override {
     1003:   98:    MLIRContext *context = &getContext();
call    0 returned 100%
     1003:   99:    RewritePatternSet patterns =
     1003:  100:        linalg::getLinalgTilingCanonicalizationPatterns(context);
call    0 returned 98%
      978:  101:    patterns.add<ExtractSliceOfPadTensorSwapPattern>(context);
call    0 returned 100%
      980:  102:    scf::populateSCFForLoopCanonicalizationPatterns(patterns);
call    0 returned 100%
     1979:  103:    FrozenRewritePatternSet frozenPatterns(std::move(patterns));
call    0 returned 103%
call    1 returned 100%
call    2 returned 100%
     2001:  104:    OpPassManager pm(func::FuncOp::getOperationName());
call    0 returned 100%
call    1 returned 101%
     1002:  105:    pm.addPass(createLoopInvariantCodeMotionPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1003:  106:    pm.addPass(createCanonicalizerPass());
call    0 returned 99%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      999:  107:    pm.addPass(createCSEPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      999:  108:    do {
      999:  109:      (void)applyPatternsAndFoldGreedily(getOperation(), frozenPatterns);
call    0 returned 100%
call    1 returned 100%
     1001:  110:      if (failed(runPipeline(pm, getOperation())))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  111:        this->signalPassFailure();
call    0 never executed
      998:  112:    } while (succeeded(fuseLinalgOpsGreedily(getOperation())));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1004:  113:  }
        -:  114:};
        -:  115:} // namespace
        -:  116:
        -:  117:namespace mlir {
        -:  118:namespace test {
function _ZN4mlir4test30registerTestLinalgGreedyFusionEv called 325560 returned 100% blocks executed 100%
   325560:  119:void registerTestLinalgGreedyFusion() {
   325560:  120:  PassRegistration<TestLinalgGreedyFusion>();
call    0 returned 100%
   325560:  121:}
        -:  122:
        -:  123:} // namespace test
        -:  124:} // namespace mlir
