        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/IR/OpDefinition.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:325580
        -:    1://===- OpDefinition.h - Classes for defining concrete Op types --*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements helper classes for implementing the "Op" types.  This
        -:   10:// includes the Op type, which is the base class for Op class definitions,
        -:   11:// as well as number of traits in the OpTrait namespace that provide a
        -:   12:// declarative way to specify properties of Ops.
        -:   13://
        -:   14:// The purpose of these types are to allow light-weight implementation of
        -:   15:// concrete ops (like DimOp) with very little boilerplate.
        -:   16://
        -:   17://===----------------------------------------------------------------------===//
        -:   18:
        -:   19:#ifndef MLIR_IR_OPDEFINITION_H
        -:   20:#define MLIR_IR_OPDEFINITION_H
        -:   21:
        -:   22:#include "mlir/IR/Dialect.h"
        -:   23:#include "mlir/IR/Operation.h"
        -:   24:#include "llvm/Support/PointerLikeTypeTraits.h"
        -:   25:
        -:   26:#include <type_traits>
        -:   27:
        -:   28:namespace mlir {
        -:   29:class Builder;
        -:   30:class OpBuilder;
        -:   31:
        -:   32:/// This class implements `Optional` functionality for ParseResult. We don't
        -:   33:/// directly use Optional here, because it provides an implicit conversion
        -:   34:/// to 'bool' which we want to avoid. This class is used to implement tri-state
        -:   35:/// 'parseOptional' functions that may have a failure mode when parsing that
        -:   36:/// shouldn't be attributed to "not present".
        -:   37:class OptionalParseResult {
        -:   38:public:
        -:   39:  OptionalParseResult() = default;
        -:   40:  OptionalParseResult(LogicalResult result) : impl(result) {}
        -:   41:  OptionalParseResult(ParseResult result) : impl(result) {}
        -:   42:  OptionalParseResult(const InFlightDiagnostic &)
        -:   43:      : OptionalParseResult(failure()) {}
        -:   44:  OptionalParseResult(llvm::NoneType) : impl(llvm::None) {}
        -:   45:
        -:   46:  /// Returns true if we contain a valid ParseResult value.
        -:   47:  bool has_value() const { return impl.has_value(); }
        -:   48:  LLVM_DEPRECATED("Use has_value instead", "has_value") bool hasValue() const {
        -:   49:    return impl.has_value();
        -:   50:  }
        -:   51:
        -:   52:  /// Access the internal ParseResult value.
        -:   53:  ParseResult value() const { return impl.value(); }
        -:   54:  LLVM_DEPRECATED("Use value instead", "value") ParseResult getValue() const {
        -:   55:    return impl.value();
        -:   56:  }
        -:   57:  ParseResult operator*() const { return value(); }
        -:   58:
        -:   59:private:
        -:   60:  Optional<ParseResult> impl;
        -:   61:};
        -:   62:
        -:   63:// These functions are out-of-line utilities, which avoids them being template
        -:   64:// instantiated/duplicated.
        -:   65:namespace impl {
        -:   66:/// Insert an operation, generated by `buildTerminatorOp`, at the end of the
        -:   67:/// region's only block if it does not have a terminator already. If the region
        -:   68:/// is empty, insert a new block first. `buildTerminatorOp` should return the
        -:   69:/// terminator operation to insert.
        -:   70:void ensureRegionTerminator(
        -:   71:    Region &region, OpBuilder &builder, Location loc,
        -:   72:    function_ref<Operation *(OpBuilder &, Location)> buildTerminatorOp);
        -:   73:void ensureRegionTerminator(
        -:   74:    Region &region, Builder &builder, Location loc,
        -:   75:    function_ref<Operation *(OpBuilder &, Location)> buildTerminatorOp);
        -:   76:
        -:   77:} // namespace impl
        -:   78:
        -:   79:/// This is the concrete base class that holds the operation pointer and has
        -:   80:/// non-generic methods that only depend on State (to avoid having them
        -:   81:/// instantiated on template types that don't affect them.
        -:   82:///
        -:   83:/// This also has the fallback implementations of customization hooks for when
        -:   84:/// they aren't customized.
        -:   85:class OpState {
        -:   86:public:
        -:   87:  /// Ops are pointer-like, so we allow conversion to bool.
    #####:   88:  explicit operator bool() { return getOperation() != nullptr; }
        -:   89:
        -:   90:  /// This implicitly converts to Operation*.
    #####:   91:  operator Operation *() const { return state; }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   92:
        -:   93:  /// Shortcut of `->` to access a member of Operation.
    #####:   94:  Operation *operator->() const { return state; }
branch  0 never executed
branch  1 never executed
        -:   95:
        -:   96:  /// Return the operation that this refers to.
    #####:   97:  Operation *getOperation() { return state; }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
branch 55 never executed
branch 56 never executed
branch 57 never executed
branch 58 never executed
branch 59 never executed
branch 60 never executed
branch 61 never executed
branch 62 never executed
branch 63 never executed
branch 64 never executed
branch 65 never executed
branch 66 never executed
branch 67 never executed
branch 68 never executed
branch 69 never executed
branch 70 never executed
branch 71 never executed
branch 72 never executed
branch 73 never executed
branch 74 never executed
branch 75 never executed
branch 76 never executed
branch 77 never executed
branch 78 never executed
branch 79 never executed
branch 80 never executed
branch 81 never executed
branch 82 never executed
branch 83 never executed
branch 84 never executed
branch 85 never executed
branch 86 never executed
branch 87 never executed
branch 88 never executed
branch 89 never executed
branch 90 never executed
branch 91 never executed
branch 92 never executed
branch 93 never executed
branch 94 never executed
branch 95 never executed
branch 96 never executed
branch 97 never executed
branch 98 never executed
branch 99 never executed
branch 100 never executed
branch 101 never executed
branch 102 never executed
branch 103 never executed
branch 104 never executed
branch 105 never executed
branch 106 never executed
branch 107 never executed
branch 108 never executed
branch 109 never executed
branch 110 never executed
branch 111 never executed
branch 112 never executed
branch 113 never executed
branch 114 never executed
branch 115 never executed
branch 116 never executed
branch 117 never executed
branch 118 never executed
branch 119 never executed
branch 120 never executed
branch 121 never executed
branch 122 never executed
branch 123 never executed
branch 124 never executed
branch 125 never executed
branch 126 never executed
branch 127 never executed
branch 128 never executed
branch 129 never executed
branch 130 never executed
branch 131 never executed
branch 132 never executed
branch 133 never executed
branch 134 never executed
branch 135 never executed
branch 136 never executed
branch 137 never executed
branch 138 never executed
branch 139 never executed
branch 140 never executed
branch 141 never executed
branch 142 never executed
branch 143 never executed
branch 144 never executed
branch 145 never executed
branch 146 never executed
branch 147 never executed
branch 148 never executed
branch 149 never executed
branch 150 never executed
branch 151 never executed
branch 152 never executed
branch 153 never executed
branch 154 never executed
branch 155 never executed
branch 156 never executed
branch 157 never executed
branch 158 never executed
branch 159 never executed
branch 160 never executed
branch 161 never executed
branch 162 never executed
branch 163 never executed
branch 164 never executed
branch 165 never executed
branch 166 never executed
branch 167 never executed
branch 168 never executed
branch 169 never executed
branch 170 never executed
branch 171 never executed
branch 172 never executed
branch 173 never executed
branch 174 never executed
branch 175 never executed
branch 176 never executed
branch 177 never executed
branch 178 never executed
branch 179 never executed
branch 180 never executed
branch 181 never executed
branch 182 never executed
branch 183 never executed
branch 184 never executed
branch 185 never executed
branch 186 never executed
branch 187 never executed
branch 188 never executed
branch 189 never executed
branch 190 never executed
branch 191 never executed
branch 192 never executed
branch 193 never executed
branch 194 never executed
branch 195 never executed
branch 196 never executed
branch 197 never executed
branch 198 never executed
branch 199 never executed
branch 200 never executed
branch 201 never executed
branch 202 never executed
branch 203 never executed
branch 204 never executed
branch 205 never executed
branch 206 never executed
branch 207 never executed
branch 208 never executed
branch 209 never executed
branch 210 never executed
branch 211 never executed
branch 212 never executed
branch 213 never executed
branch 214 never executed
branch 215 never executed
branch 216 never executed
branch 217 never executed
branch 218 never executed
branch 219 never executed
branch 220 never executed
branch 221 never executed
branch 222 never executed
branch 223 never executed
branch 224 never executed
branch 225 never executed
branch 226 never executed
branch 227 never executed
branch 228 never executed
branch 229 never executed
branch 230 never executed
branch 231 never executed
branch 232 never executed
branch 233 never executed
branch 234 never executed
branch 235 never executed
branch 236 never executed
branch 237 never executed
branch 238 never executed
branch 239 never executed
branch 240 never executed
branch 241 never executed
branch 242 never executed
branch 243 never executed
branch 244 never executed
branch 245 never executed
branch 246 never executed
branch 247 never executed
branch 248 never executed
branch 249 never executed
branch 250 never executed
branch 251 never executed
branch 252 never executed
branch 253 never executed
branch 254 never executed
branch 255 never executed
branch 256 never executed
branch 257 never executed
branch 258 never executed
branch 259 never executed
branch 260 never executed
branch 261 never executed
branch 262 never executed
branch 263 never executed
branch 264 never executed
branch 265 never executed
branch 266 never executed
branch 267 never executed
branch 268 never executed
branch 269 never executed
branch 270 never executed
branch 271 never executed
branch 272 never executed
branch 273 never executed
branch 274 never executed
branch 275 never executed
branch 276 never executed
branch 277 never executed
branch 278 never executed
branch 279 never executed
branch 280 never executed
branch 281 never executed
branch 282 never executed
branch 283 never executed
branch 284 never executed
branch 285 never executed
branch 286 never executed
branch 287 never executed
branch 288 never executed
branch 289 never executed
branch 290 never executed
branch 291 never executed
branch 292 never executed
branch 293 never executed
branch 294 never executed
branch 295 never executed
branch 296 never executed
branch 297 never executed
branch 298 never executed
branch 299 never executed
branch 300 never executed
branch 301 never executed
branch 302 never executed
branch 303 never executed
branch 304 never executed
branch 305 never executed
branch 306 never executed
branch 307 never executed
branch 308 never executed
branch 309 never executed
branch 310 never executed
branch 311 never executed
branch 312 never executed
branch 313 never executed
branch 314 never executed
branch 315 never executed
branch 316 never executed
branch 317 never executed
branch 318 never executed
branch 319 never executed
branch 320 never executed
branch 321 never executed
branch 322 never executed
branch 323 never executed
branch 324 never executed
branch 325 never executed
branch 326 never executed
branch 327 never executed
branch 328 never executed
branch 329 never executed
branch 330 never executed
branch 331 never executed
branch 332 never executed
branch 333 never executed
branch 334 never executed
branch 335 never executed
branch 336 never executed
branch 337 never executed
branch 338 never executed
branch 339 never executed
branch 340 never executed
branch 341 never executed
branch 342 never executed
branch 343 never executed
branch 344 never executed
branch 345 never executed
branch 346 never executed
branch 347 never executed
branch 348 never executed
branch 349 never executed
branch 350 never executed
branch 351 never executed
branch 352 never executed
branch 353 never executed
branch 354 never executed
branch 355 never executed
branch 356 never executed
branch 357 never executed
branch 358 never executed
branch 359 never executed
branch 360 never executed
branch 361 never executed
branch 362 never executed
branch 363 never executed
branch 364 never executed
branch 365 never executed
branch 366 never executed
branch 367 never executed
branch 368 never executed
branch 369 never executed
branch 370 never executed
branch 371 never executed
branch 372 never executed
branch 373 never executed
branch 374 never executed
branch 375 never executed
branch 376 never executed
branch 377 never executed
branch 378 never executed
branch 379 never executed
branch 380 never executed
branch 381 never executed
branch 382 never executed
branch 383 never executed
branch 384 never executed
branch 385 never executed
branch 386 never executed
branch 387 never executed
branch 388 never executed
branch 389 never executed
branch 390 never executed
branch 391 never executed
branch 392 never executed
branch 393 never executed
branch 394 never executed
branch 395 never executed
branch 396 never executed
branch 397 never executed
branch 398 never executed
branch 399 never executed
branch 400 never executed
branch 401 never executed
branch 402 never executed
branch 403 never executed
branch 404 never executed
branch 405 never executed
branch 406 never executed
branch 407 never executed
branch 408 never executed
branch 409 never executed
branch 410 never executed
branch 411 never executed
branch 412 never executed
branch 413 never executed
branch 414 never executed
branch 415 never executed
        -:   98:
        -:   99:  /// Return the context this operation belongs to.
        -:  100:  MLIRContext *getContext() { return getOperation()->getContext(); }
        -:  101:
        -:  102:  /// Print the operation to the given stream.
        -:  103:  void print(raw_ostream &os, OpPrintingFlags flags = llvm::None) {
        -:  104:    state->print(os, flags);
        -:  105:  }
        -:  106:  void print(raw_ostream &os, AsmState &asmState) {
        -:  107:    state->print(os, asmState);
        -:  108:  }
        -:  109:
        -:  110:  /// Dump this operation.
        -:  111:  void dump() { state->dump(); }
        -:  112:
        -:  113:  /// The source location the operation was defined or derived from.
        -:  114:  Location getLoc() { return state->getLoc(); }
        -:  115:
        -:  116:  /// Return true if there are no users of any results of this operation.
        -:  117:  bool use_empty() { return state->use_empty(); }
        -:  118:
        -:  119:  /// Remove this operation from its parent block and delete it.
        -:  120:  void erase() { state->erase(); }
        -:  121:
        -:  122:  /// Emit an error with the op name prefixed, like "'dim' op " which is
        -:  123:  /// convenient for verifiers.
        -:  124:  InFlightDiagnostic emitOpError(const Twine &message = {});
        -:  125:
        -:  126:  /// Emit an error about fatal conditions with this operation, reporting up to
        -:  127:  /// any diagnostic handlers that may be listening.
        -:  128:  InFlightDiagnostic emitError(const Twine &message = {});
        -:  129:
        -:  130:  /// Emit a warning about this operation, reporting up to any diagnostic
        -:  131:  /// handlers that may be listening.
        -:  132:  InFlightDiagnostic emitWarning(const Twine &message = {});
        -:  133:
        -:  134:  /// Emit a remark about this operation, reporting up to any diagnostic
        -:  135:  /// handlers that may be listening.
        -:  136:  InFlightDiagnostic emitRemark(const Twine &message = {});
        -:  137:
        -:  138:  /// Walk the operation by calling the callback for each nested operation
        -:  139:  /// (including this one), block or region, depending on the callback provided.
        -:  140:  /// Regions, blocks and operations at the same nesting level are visited in
        -:  141:  /// lexicographical order. The walk order for enclosing regions, blocks and
        -:  142:  /// operations with respect to their nested ones is specified by 'Order'
        -:  143:  /// (post-order by default). A callback on a block or operation is allowed to
        -:  144:  /// erase that block or operation if either:
        -:  145:  ///   * the walk is in post-order, or
        -:  146:  ///   * the walk is in pre-order and the walk is skipped after the erasure.
        -:  147:  /// See Operation::walk for more details.
        -:  148:  template <WalkOrder Order = WalkOrder::PostOrder, typename FnT,
        -:  149:            typename RetT = detail::walkResultType<FnT>>
        -:  150:  std::enable_if_t<llvm::function_traits<std::decay_t<FnT>>::num_args == 1,
        -:  151:                   RetT>
        -:  152:  walk(FnT &&callback) {
        -:  153:    return state->walk<Order>(std::forward<FnT>(callback));
        -:  154:  }
        -:  155:
        -:  156:  /// Generic walker with a stage aware callback. Walk the operation by calling
        -:  157:  /// the callback for each nested operation (including this one) N+1 times,
        -:  158:  /// where N is the number of regions attached to that operation.
        -:  159:  ///
        -:  160:  /// The callback method can take any of the following forms:
        -:  161:  ///   void(Operation *, const WalkStage &) : Walk all operation opaquely
        -:  162:  ///     * op.walk([](Operation *nestedOp, const WalkStage &stage) { ...});
        -:  163:  ///   void(OpT, const WalkStage &) : Walk all operations of the given derived
        -:  164:  ///                                  type.
        -:  165:  ///     * op.walk([](ReturnOp returnOp, const WalkStage &stage) { ...});
        -:  166:  ///   WalkResult(Operation*|OpT, const WalkStage &stage) : Walk operations,
        -:  167:  ///          but allow for interruption/skipping.
        -:  168:  ///     * op.walk([](... op, const WalkStage &stage) {
        -:  169:  ///         // Skip the walk of this op based on some invariant.
        -:  170:  ///         if (some_invariant)
        -:  171:  ///           return WalkResult::skip();
        -:  172:  ///         // Interrupt, i.e cancel, the walk based on some invariant.
        -:  173:  ///         if (another_invariant)
        -:  174:  ///           return WalkResult::interrupt();
        -:  175:  ///         return WalkResult::advance();
        -:  176:  ///       });
        -:  177:  template <typename FnT, typename RetT = detail::walkResultType<FnT>>
        -:  178:  std::enable_if_t<llvm::function_traits<std::decay_t<FnT>>::num_args == 2,
        -:  179:                   RetT>
        -:  180:  walk(FnT &&callback) {
        -:  181:    return state->walk(std::forward<FnT>(callback));
        -:  182:  }
        -:  183:
        -:  184:  // These are default implementations of customization hooks.
        -:  185:public:
        -:  186:  /// This hook returns any canonicalization pattern rewrites that the operation
        -:  187:  /// supports, for use by the canonicalization pass.
        -:  188:  static void getCanonicalizationPatterns(RewritePatternSet &results,
        -:  189:                                          MLIRContext *context) {}
        -:  190:
        -:  191:  /// This hook populates any unset default attrs.
        -:  192:  static void populateDefaultAttrs(const RegisteredOperationName &,
        -:  193:                                   NamedAttrList &) {}
        -:  194:
        -:  195:protected:
        -:  196:  /// If the concrete type didn't implement a custom verifier hook, just fall
        -:  197:  /// back to this one which accepts everything.
        -:  198:  LogicalResult verify() { return success(); }
        -:  199:  LogicalResult verifyRegions() { return success(); }
        -:  200:
        -:  201:  /// Parse the custom form of an operation. Unless overridden, this method will
        -:  202:  /// first try to get an operation parser from the op's dialect. Otherwise the
        -:  203:  /// custom assembly form of an op is always rejected. Op implementations
        -:  204:  /// should implement this to return failure. On success, they should fill in
        -:  205:  /// result with the fields to use.
        -:  206:  static ParseResult parse(OpAsmParser &parser, OperationState &result);
        -:  207:
        -:  208:  /// Print the operation. Unless overridden, this method will first try to get
        -:  209:  /// an operation printer from the dialect. Otherwise, it prints the operation
        -:  210:  /// in generic form.
        -:  211:  static void print(Operation *op, OpAsmPrinter &p, StringRef defaultDialect);
        -:  212:
        -:  213:  /// Print an operation name, eliding the dialect prefix if necessary.
        -:  214:  static void printOpName(Operation *op, OpAsmPrinter &p,
        -:  215:                          StringRef defaultDialect);
        -:  216:
        -:  217:  /// Mutability management is handled by the OpWrapper/OpConstWrapper classes,
        -:  218:  /// so we can cast it away here.
    #####:  219:  explicit OpState(Operation *state) : state(state) {}
        -:  220:
        -:  221:private:
        -:  222:  Operation *state;
        -:  223:
        -:  224:  /// Allow access to internal hook implementation methods.
        -:  225:  friend RegisteredOperationName;
        -:  226:};
        -:  227:
        -:  228:// Allow comparing operators.
        -:  229:inline bool operator==(OpState lhs, OpState rhs) {
        -:  230:  return lhs.getOperation() == rhs.getOperation();
        -:  231:}
        -:  232:inline bool operator!=(OpState lhs, OpState rhs) {
        -:  233:  return lhs.getOperation() != rhs.getOperation();
        -:  234:}
        -:  235:
        -:  236:raw_ostream &operator<<(raw_ostream &os, OpFoldResult ofr);
        -:  237:
        -:  238:/// This class represents a single result from folding an operation.
        -:  239:class OpFoldResult : public PointerUnion<Attribute, Value> {
        -:  240:  using PointerUnion<Attribute, Value>::PointerUnion;
        -:  241:
        -:  242:public:
        -:  243:  void dump() const { llvm::errs() << *this << "\n"; }
        -:  244:};
        -:  245:
        -:  246:/// Allow printing to a stream.
        -:  247:inline raw_ostream &operator<<(raw_ostream &os, OpFoldResult ofr) {
        -:  248:  if (Value value = ofr.dyn_cast<Value>())
        -:  249:    value.print(os);
        -:  250:  else
        -:  251:    ofr.dyn_cast<Attribute>().print(os);
        -:  252:  return os;
        -:  253:}
        -:  254:
        -:  255:/// Allow printing to a stream.
        -:  256:inline raw_ostream &operator<<(raw_ostream &os, OpState op) {
        -:  257:  op.print(os, OpPrintingFlags().useLocalScope());
        -:  258:  return os;
        -:  259:}
        -:  260:
        -:  261://===----------------------------------------------------------------------===//
        -:  262:// Operation Trait Types
        -:  263://===----------------------------------------------------------------------===//
        -:  264:
        -:  265:namespace OpTrait {
        -:  266:
        -:  267:// These functions are out-of-line implementations of the methods in the
        -:  268:// corresponding trait classes.  This avoids them being template
        -:  269:// instantiated/duplicated.
        -:  270:namespace impl {
        -:  271:OpFoldResult foldIdempotent(Operation *op);
        -:  272:OpFoldResult foldInvolution(Operation *op);
        -:  273:LogicalResult verifyZeroOperands(Operation *op);
        -:  274:LogicalResult verifyOneOperand(Operation *op);
        -:  275:LogicalResult verifyNOperands(Operation *op, unsigned numOperands);
        -:  276:LogicalResult verifyIsIdempotent(Operation *op);
        -:  277:LogicalResult verifyIsInvolution(Operation *op);
        -:  278:LogicalResult verifyAtLeastNOperands(Operation *op, unsigned numOperands);
        -:  279:LogicalResult verifyOperandsAreFloatLike(Operation *op);
        -:  280:LogicalResult verifyOperandsAreSignlessIntegerLike(Operation *op);
        -:  281:LogicalResult verifySameTypeOperands(Operation *op);
        -:  282:LogicalResult verifyZeroRegions(Operation *op);
        -:  283:LogicalResult verifyOneRegion(Operation *op);
        -:  284:LogicalResult verifyNRegions(Operation *op, unsigned numRegions);
        -:  285:LogicalResult verifyAtLeastNRegions(Operation *op, unsigned numRegions);
        -:  286:LogicalResult verifyZeroResults(Operation *op);
        -:  287:LogicalResult verifyOneResult(Operation *op);
        -:  288:LogicalResult verifyNResults(Operation *op, unsigned numOperands);
        -:  289:LogicalResult verifyAtLeastNResults(Operation *op, unsigned numOperands);
        -:  290:LogicalResult verifySameOperandsShape(Operation *op);
        -:  291:LogicalResult verifySameOperandsAndResultShape(Operation *op);
        -:  292:LogicalResult verifySameOperandsElementType(Operation *op);
        -:  293:LogicalResult verifySameOperandsAndResultElementType(Operation *op);
        -:  294:LogicalResult verifySameOperandsAndResultType(Operation *op);
        -:  295:LogicalResult verifyResultsAreBoolLike(Operation *op);
        -:  296:LogicalResult verifyResultsAreFloatLike(Operation *op);
        -:  297:LogicalResult verifyResultsAreSignlessIntegerLike(Operation *op);
        -:  298:LogicalResult verifyIsTerminator(Operation *op);
        -:  299:LogicalResult verifyZeroSuccessors(Operation *op);
        -:  300:LogicalResult verifyOneSuccessor(Operation *op);
        -:  301:LogicalResult verifyNSuccessors(Operation *op, unsigned numSuccessors);
        -:  302:LogicalResult verifyAtLeastNSuccessors(Operation *op, unsigned numSuccessors);
        -:  303:LogicalResult verifyValueSizeAttr(Operation *op, StringRef attrName,
        -:  304:                                  StringRef valueGroupName,
        -:  305:                                  size_t expectedCount);
        -:  306:LogicalResult verifyOperandSizeAttr(Operation *op, StringRef sizeAttrName);
        -:  307:LogicalResult verifyResultSizeAttr(Operation *op, StringRef sizeAttrName);
        -:  308:LogicalResult verifyNoRegionArguments(Operation *op);
        -:  309:LogicalResult verifyElementwise(Operation *op);
        -:  310:LogicalResult verifyIsIsolatedFromAbove(Operation *op);
        -:  311:} // namespace impl
        -:  312:
        -:  313:/// Helper class for implementing traits.  Clients are not expected to interact
        -:  314:/// with this directly, so its members are all protected.
        -:  315:template <typename ConcreteType, template <typename> class TraitType>
        -:  316:class TraitBase {
        -:  317:protected:
        -:  318:  /// Return the ultimate Operation being worked on.
    #####:  319:  Operation *getOperation() {
    #####:  320:    auto *concrete = static_cast<ConcreteType *>(this);
    #####:  321:    return concrete->getOperation();
call    0 never executed
        -:  322:  }
        -:  323:};
        -:  324:
        -:  325://===----------------------------------------------------------------------===//
        -:  326:// Operand Traits
        -:  327:
        -:  328:namespace detail {
        -:  329:/// Utility trait base that provides accessors for derived traits that have
        -:  330:/// multiple operands.
        -:  331:template <typename ConcreteType, template <typename> class TraitType>
        -:  332:struct MultiOperandTraitBase : public TraitBase<ConcreteType, TraitType> {
        -:  333:  using operand_iterator = Operation::operand_iterator;
        -:  334:  using operand_range = Operation::operand_range;
        -:  335:  using operand_type_iterator = Operation::operand_type_iterator;
        -:  336:  using operand_type_range = Operation::operand_type_range;
        -:  337:
        -:  338:  /// Return the number of operands.
function _ZN4mlir7OpTrait6detail21MultiOperandTraitBaseINS_4LLVM12LandingpadOpENS0_16VariadicOperandsEE14getNumOperandsEv called 0 returned 0% blocks executed 0%
    #####:  339:  unsigned getNumOperands() { return this->getOperation()->getNumOperands(); }
branch  0 never executed
branch  1 never executed
        -:  340:
        -:  341:  /// Return the operand at index 'i'.
    #####:  342:  Value getOperand(unsigned i) { return this->getOperation()->getOperand(i); }
call    0 never executed
call    1 never executed
        -:  343:
        -:  344:  /// Set the operand at index 'i' to 'value'.
        -:  345:  void setOperand(unsigned i, Value value) {
        -:  346:    this->getOperation()->setOperand(i, value);
        -:  347:  }
        -:  348:
        -:  349:  /// Operand iterator access.
        -:  350:  operand_iterator operand_begin() {
        -:  351:    return this->getOperation()->operand_begin();
        -:  352:  }
        -:  353:  operand_iterator operand_end() { return this->getOperation()->operand_end(); }
    #####:  354:  operand_range getOperands() { return this->getOperation()->getOperands(); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  355:
        -:  356:  /// Operand type access.
        -:  357:  operand_type_iterator operand_type_begin() {
        -:  358:    return this->getOperation()->operand_type_begin();
        -:  359:  }
        -:  360:  operand_type_iterator operand_type_end() {
        -:  361:    return this->getOperation()->operand_type_end();
        -:  362:  }
        -:  363:  operand_type_range getOperandTypes() {
        -:  364:    return this->getOperation()->getOperandTypes();
        -:  365:  }
        -:  366:};
        -:  367:} // namespace detail
        -:  368:
        -:  369:/// `verifyInvariantsImpl` verifies the invariants like the types, attrs, .etc.
        -:  370:/// It should be run after core traits and before any other user defined traits.
        -:  371:/// In order to run it in the correct order, wrap it with OpInvariants trait so
        -:  372:/// that tblgen will be able to put it in the right order.
        -:  373:template <typename ConcreteType>
        -:  374:class OpInvariants : public TraitBase<ConcreteType, OpInvariants> {
        -:  375:public:
        -:  376:  static LogicalResult verifyTrait(Operation *op) {
        -:  377:    return cast<ConcreteType>(op).verifyInvariantsImpl();
        -:  378:  }
        -:  379:};
        -:  380:
        -:  381:/// This class provides the API for ops that are known to have no
        -:  382:/// SSA operand.
        -:  383:template <typename ConcreteType>
        -:  384:class ZeroOperands : public TraitBase<ConcreteType, ZeroOperands> {
        -:  385:public:
        -:  386:  static LogicalResult verifyTrait(Operation *op) {
        -:  387:    return impl::verifyZeroOperands(op);
        -:  388:  }
        -:  389:
        -:  390:private:
        -:  391:  // Disable these.
        -:  392:  void getOperand() {}
        -:  393:  void setOperand() {}
        -:  394:};
        -:  395:
        -:  396:/// This class provides the API for ops that are known to have exactly one
        -:  397:/// SSA operand.
        -:  398:template <typename ConcreteType>
        -:  399:class OneOperand : public TraitBase<ConcreteType, OneOperand> {
        -:  400:public:
        -:  401:  Value getOperand() { return this->getOperation()->getOperand(0); }
        -:  402:
        -:  403:  void setOperand(Value value) { this->getOperation()->setOperand(0, value); }
        -:  404:
        -:  405:  static LogicalResult verifyTrait(Operation *op) {
        -:  406:    return impl::verifyOneOperand(op);
        -:  407:  }
        -:  408:};
        -:  409:
        -:  410:/// This class provides the API for ops that are known to have a specified
        -:  411:/// number of operands.  This is used as a trait like this:
        -:  412:///
        -:  413:///   class FooOp : public Op<FooOp, OpTrait::NOperands<2>::Impl> {
        -:  414:///
        -:  415:template <unsigned N>
        -:  416:class NOperands {
        -:  417:public:
        -:  418:  static_assert(N > 1, "use ZeroOperands/OneOperand for N < 2");
        -:  419:
        -:  420:  template <typename ConcreteType>
        -:  421:  class Impl
        -:  422:      : public detail::MultiOperandTraitBase<ConcreteType, NOperands<N>::Impl> {
        -:  423:  public:
        -:  424:    static LogicalResult verifyTrait(Operation *op) {
        -:  425:      return impl::verifyNOperands(op, N);
        -:  426:    }
        -:  427:  };
        -:  428:};
        -:  429:
        -:  430:/// This class provides the API for ops that are known to have a at least a
        -:  431:/// specified number of operands.  This is used as a trait like this:
        -:  432:///
        -:  433:///   class FooOp : public Op<FooOp, OpTrait::AtLeastNOperands<2>::Impl> {
        -:  434:///
        -:  435:template <unsigned N>
        -:  436:class AtLeastNOperands {
        -:  437:public:
        -:  438:  template <typename ConcreteType>
        -:  439:  class Impl : public detail::MultiOperandTraitBase<ConcreteType,
        -:  440:                                                    AtLeastNOperands<N>::Impl> {
        -:  441:  public:
        -:  442:    static LogicalResult verifyTrait(Operation *op) {
        -:  443:      return impl::verifyAtLeastNOperands(op, N);
        -:  444:    }
        -:  445:  };
        -:  446:};
        -:  447:
        -:  448:/// This class provides the API for ops which have an unknown number of
        -:  449:/// SSA operands.
        -:  450:template <typename ConcreteType>
        -:  451:class VariadicOperands
        -:  452:    : public detail::MultiOperandTraitBase<ConcreteType, VariadicOperands> {};
        -:  453:
        -:  454://===----------------------------------------------------------------------===//
        -:  455:// Region Traits
        -:  456:
        -:  457:/// This class provides verification for ops that are known to have zero
        -:  458:/// regions.
        -:  459:template <typename ConcreteType>
        -:  460:class ZeroRegions : public TraitBase<ConcreteType, ZeroRegions> {
        -:  461:public:
        -:  462:  static LogicalResult verifyTrait(Operation *op) {
        -:  463:    return impl::verifyZeroRegions(op);
        -:  464:  }
        -:  465:};
        -:  466:
        -:  467:namespace detail {
        -:  468:/// Utility trait base that provides accessors for derived traits that have
        -:  469:/// multiple regions.
        -:  470:template <typename ConcreteType, template <typename> class TraitType>
        -:  471:struct MultiRegionTraitBase : public TraitBase<ConcreteType, TraitType> {
        -:  472:  using region_iterator = MutableArrayRef<Region>;
        -:  473:  using region_range = RegionRange;
        -:  474:
        -:  475:  /// Return the number of regions.
        -:  476:  unsigned getNumRegions() { return this->getOperation()->getNumRegions(); }
        -:  477:
        -:  478:  /// Return the region at `index`.
        -:  479:  Region &getRegion(unsigned i) { return this->getOperation()->getRegion(i); }
        -:  480:
        -:  481:  /// Region iterator access.
        -:  482:  region_iterator region_begin() {
        -:  483:    return this->getOperation()->region_begin();
        -:  484:  }
        -:  485:  region_iterator region_end() { return this->getOperation()->region_end(); }
        -:  486:  region_range getRegions() { return this->getOperation()->getRegions(); }
        -:  487:};
        -:  488:} // namespace detail
        -:  489:
        -:  490:/// This class provides APIs for ops that are known to have a single region.
        -:  491:template <typename ConcreteType>
        -:  492:class OneRegion : public TraitBase<ConcreteType, OneRegion> {
        -:  493:public:
        -:  494:  Region &getRegion() { return this->getOperation()->getRegion(0); }
        -:  495:
        -:  496:  /// Returns a range of operations within the region of this operation.
        -:  497:  auto getOps() { return getRegion().getOps(); }
        -:  498:  template <typename OpT>
        -:  499:  auto getOps() {
        -:  500:    return getRegion().template getOps<OpT>();
        -:  501:  }
        -:  502:
        -:  503:  static LogicalResult verifyTrait(Operation *op) {
        -:  504:    return impl::verifyOneRegion(op);
        -:  505:  }
        -:  506:};
        -:  507:
        -:  508:/// This class provides the API for ops that are known to have a specified
        -:  509:/// number of regions.
        -:  510:template <unsigned N>
        -:  511:class NRegions {
        -:  512:public:
        -:  513:  static_assert(N > 1, "use ZeroRegions/OneRegion for N < 2");
        -:  514:
        -:  515:  template <typename ConcreteType>
        -:  516:  class Impl
        -:  517:      : public detail::MultiRegionTraitBase<ConcreteType, NRegions<N>::Impl> {
        -:  518:  public:
        -:  519:    static LogicalResult verifyTrait(Operation *op) {
        -:  520:      return impl::verifyNRegions(op, N);
        -:  521:    }
        -:  522:  };
        -:  523:};
        -:  524:
        -:  525:/// This class provides APIs for ops that are known to have at least a specified
        -:  526:/// number of regions.
        -:  527:template <unsigned N>
        -:  528:class AtLeastNRegions {
        -:  529:public:
        -:  530:  template <typename ConcreteType>
        -:  531:  class Impl : public detail::MultiRegionTraitBase<ConcreteType,
        -:  532:                                                   AtLeastNRegions<N>::Impl> {
        -:  533:  public:
        -:  534:    static LogicalResult verifyTrait(Operation *op) {
        -:  535:      return impl::verifyAtLeastNRegions(op, N);
        -:  536:    }
        -:  537:  };
        -:  538:};
        -:  539:
        -:  540:/// This class provides the API for ops which have an unknown number of
        -:  541:/// regions.
        -:  542:template <typename ConcreteType>
        -:  543:class VariadicRegions
        -:  544:    : public detail::MultiRegionTraitBase<ConcreteType, VariadicRegions> {};
        -:  545:
        -:  546://===----------------------------------------------------------------------===//
        -:  547:// Result Traits
        -:  548:
        -:  549:/// This class provides return value APIs for ops that are known to have
        -:  550:/// zero results.
        -:  551:template <typename ConcreteType>
        -:  552:class ZeroResults : public TraitBase<ConcreteType, ZeroResults> {
        -:  553:public:
        -:  554:  static LogicalResult verifyTrait(Operation *op) {
        -:  555:    return impl::verifyZeroResults(op);
        -:  556:  }
        -:  557:};
        -:  558:
        -:  559:namespace detail {
        -:  560:/// Utility trait base that provides accessors for derived traits that have
        -:  561:/// multiple results.
        -:  562:template <typename ConcreteType, template <typename> class TraitType>
        -:  563:struct MultiResultTraitBase : public TraitBase<ConcreteType, TraitType> {
        -:  564:  using result_iterator = Operation::result_iterator;
        -:  565:  using result_range = Operation::result_range;
        -:  566:  using result_type_iterator = Operation::result_type_iterator;
        -:  567:  using result_type_range = Operation::result_type_range;
        -:  568:
        -:  569:  /// Return the number of results.
    #####:  570:  unsigned getNumResults() { return this->getOperation()->getNumResults(); }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  571:
        -:  572:  /// Return the result at index 'i'.
        -:  573:  Value getResult(unsigned i) { return this->getOperation()->getResult(i); }
        -:  574:
        -:  575:  /// Replace all uses of results of this operation with the provided 'values'.
        -:  576:  /// 'values' may correspond to an existing operation, or a range of 'Value'.
        -:  577:  template <typename ValuesT>
        -:  578:  void replaceAllUsesWith(ValuesT &&values) {
        -:  579:    this->getOperation()->replaceAllUsesWith(std::forward<ValuesT>(values));
        -:  580:  }
        -:  581:
        -:  582:  /// Return the type of the `i`-th result.
        -:  583:  Type getType(unsigned i) { return getResult(i).getType(); }
        -:  584:
        -:  585:  /// Result iterator access.
        -:  586:  result_iterator result_begin() {
        -:  587:    return this->getOperation()->result_begin();
        -:  588:  }
        -:  589:  result_iterator result_end() { return this->getOperation()->result_end(); }
        -:  590:  result_range getResults() { return this->getOperation()->getResults(); }
        -:  591:
        -:  592:  /// Result type access.
        -:  593:  result_type_iterator result_type_begin() {
        -:  594:    return this->getOperation()->result_type_begin();
        -:  595:  }
        -:  596:  result_type_iterator result_type_end() {
        -:  597:    return this->getOperation()->result_type_end();
        -:  598:  }
    #####:  599:  result_type_range getResultTypes() {
    #####:  600:    return this->getOperation()->getResultTypes();
call    0 never executed
call    1 never executed
        -:  601:  }
        -:  602:};
        -:  603:} // namespace detail
        -:  604:
        -:  605:/// This class provides return value APIs for ops that are known to have a
        -:  606:/// single result.  ResultType is the concrete type returned by getType().
        -:  607:template <typename ConcreteType>
        -:  608:class OneResult : public TraitBase<ConcreteType, OneResult> {
        -:  609:public:
    #####:  610:  Value getResult() { return this->getOperation()->getResult(0); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        -:  611:
        -:  612:  /// If the operation returns a single value, then the Op can be implicitly
        -:  613:  /// converted to an Value. This yields the value of the only result.
        -:  614:  operator Value() { return getResult(); }
        -:  615:
        -:  616:  /// Replace all uses of 'this' value with the new value, updating anything
        -:  617:  /// in the IR that uses 'this' to use the other value instead.  When this
        -:  618:  /// returns there are zero uses of 'this'.
        -:  619:  void replaceAllUsesWith(Value newValue) {
        -:  620:    getResult().replaceAllUsesWith(newValue);
        -:  621:  }
        -:  622:
        -:  623:  /// Replace all uses of 'this' value with the result of 'op'.
        -:  624:  void replaceAllUsesWith(Operation *op) {
        -:  625:    this->getOperation()->replaceAllUsesWith(op);
        -:  626:  }
        -:  627:
        -:  628:  static LogicalResult verifyTrait(Operation *op) {
        -:  629:    return impl::verifyOneResult(op);
        -:  630:  }
        -:  631:};
        -:  632:
        -:  633:/// This trait is used for return value APIs for ops that are known to have a
        -:  634:/// specific type other than `Type`.  This allows the "getType()" member to be
        -:  635:/// more specific for an op.  This should be used in conjunction with OneResult,
        -:  636:/// and occur in the trait list before OneResult.
        -:  637:template <typename ResultType>
        -:  638:class OneTypedResult {
        -:  639:public:
        -:  640:  /// This class provides return value APIs for ops that are known to have a
        -:  641:  /// single result.  ResultType is the concrete type returned by getType().
        -:  642:  template <typename ConcreteType>
        -:  643:  class Impl
        -:  644:      : public TraitBase<ConcreteType, OneTypedResult<ResultType>::Impl> {
        -:  645:  public:
    #####:  646:    ResultType getType() {
    #####:  647:      auto resultTy = this->getOperation()->getResult(0).getType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  648:      return resultTy.template cast<ResultType>();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  649:    }
        -:  650:  };
        -:  651:};
        -:  652:
        -:  653:/// This class provides the API for ops that are known to have a specified
        -:  654:/// number of results.  This is used as a trait like this:
        -:  655:///
        -:  656:///   class FooOp : public Op<FooOp, OpTrait::NResults<2>::Impl> {
        -:  657:///
        -:  658:template <unsigned N>
        -:  659:class NResults {
        -:  660:public:
        -:  661:  static_assert(N > 1, "use ZeroResults/OneResult for N < 2");
        -:  662:
        -:  663:  template <typename ConcreteType>
        -:  664:  class Impl
        -:  665:      : public detail::MultiResultTraitBase<ConcreteType, NResults<N>::Impl> {
        -:  666:  public:
        -:  667:    static LogicalResult verifyTrait(Operation *op) {
        -:  668:      return impl::verifyNResults(op, N);
        -:  669:    }
        -:  670:  };
        -:  671:};
        -:  672:
        -:  673:/// This class provides the API for ops that are known to have at least a
        -:  674:/// specified number of results.  This is used as a trait like this:
        -:  675:///
        -:  676:///   class FooOp : public Op<FooOp, OpTrait::AtLeastNResults<2>::Impl> {
        -:  677:///
        -:  678:template <unsigned N>
        -:  679:class AtLeastNResults {
        -:  680:public:
        -:  681:  template <typename ConcreteType>
        -:  682:  class Impl : public detail::MultiResultTraitBase<ConcreteType,
        -:  683:                                                   AtLeastNResults<N>::Impl> {
        -:  684:  public:
        -:  685:    static LogicalResult verifyTrait(Operation *op) {
        -:  686:      return impl::verifyAtLeastNResults(op, N);
        -:  687:    }
        -:  688:  };
        -:  689:};
        -:  690:
        -:  691:/// This class provides the API for ops which have an unknown number of
        -:  692:/// results.
        -:  693:template <typename ConcreteType>
        -:  694:class VariadicResults
        -:  695:    : public detail::MultiResultTraitBase<ConcreteType, VariadicResults> {};
        -:  696:
        -:  697://===----------------------------------------------------------------------===//
        -:  698:// Terminator Traits
        -:  699:
        -:  700:/// This class indicates that the regions associated with this op don't have
        -:  701:/// terminators.
        -:  702:template <typename ConcreteType>
        -:  703:class NoTerminator : public TraitBase<ConcreteType, NoTerminator> {};
        -:  704:
        -:  705:/// This class provides the API for ops that are known to be terminators.
        -:  706:template <typename ConcreteType>
        -:  707:class IsTerminator : public TraitBase<ConcreteType, IsTerminator> {
        -:  708:public:
        -:  709:  static LogicalResult verifyTrait(Operation *op) {
        -:  710:    return impl::verifyIsTerminator(op);
        -:  711:  }
        -:  712:};
        -:  713:
        -:  714:/// This class provides verification for ops that are known to have zero
        -:  715:/// successors.
        -:  716:template <typename ConcreteType>
        -:  717:class ZeroSuccessors : public TraitBase<ConcreteType, ZeroSuccessors> {
        -:  718:public:
        -:  719:  static LogicalResult verifyTrait(Operation *op) {
        -:  720:    return impl::verifyZeroSuccessors(op);
        -:  721:  }
        -:  722:};
        -:  723:
        -:  724:namespace detail {
        -:  725:/// Utility trait base that provides accessors for derived traits that have
        -:  726:/// multiple successors.
        -:  727:template <typename ConcreteType, template <typename> class TraitType>
        -:  728:struct MultiSuccessorTraitBase : public TraitBase<ConcreteType, TraitType> {
        -:  729:  using succ_iterator = Operation::succ_iterator;
        -:  730:  using succ_range = SuccessorRange;
        -:  731:
        -:  732:  /// Return the number of successors.
        -:  733:  unsigned getNumSuccessors() {
        -:  734:    return this->getOperation()->getNumSuccessors();
        -:  735:  }
        -:  736:
        -:  737:  /// Return the successor at `index`.
    #####:  738:  Block *getSuccessor(unsigned i) {
    #####:  739:    return this->getOperation()->getSuccessor(i);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  740:  }
        -:  741:
        -:  742:  /// Set the successor at `index`.
        -:  743:  void setSuccessor(Block *block, unsigned i) {
        -:  744:    return this->getOperation()->setSuccessor(block, i);
        -:  745:  }
        -:  746:
        -:  747:  /// Successor iterator access.
        -:  748:  succ_iterator succ_begin() { return this->getOperation()->succ_begin(); }
        -:  749:  succ_iterator succ_end() { return this->getOperation()->succ_end(); }
        -:  750:  succ_range getSuccessors() { return this->getOperation()->getSuccessors(); }
        -:  751:};
        -:  752:} // namespace detail
        -:  753:
        -:  754:/// This class provides APIs for ops that are known to have a single successor.
        -:  755:template <typename ConcreteType>
        -:  756:class OneSuccessor : public TraitBase<ConcreteType, OneSuccessor> {
        -:  757:public:
    #####:  758:  Block *getSuccessor() { return this->getOperation()->getSuccessor(0); }
call    0 never executed
        -:  759:  void setSuccessor(Block *succ) {
        -:  760:    this->getOperation()->setSuccessor(succ, 0);
        -:  761:  }
        -:  762:
        -:  763:  static LogicalResult verifyTrait(Operation *op) {
        -:  764:    return impl::verifyOneSuccessor(op);
        -:  765:  }
        -:  766:};
        -:  767:
        -:  768:/// This class provides the API for ops that are known to have a specified
        -:  769:/// number of successors.
        -:  770:template <unsigned N>
        -:  771:class NSuccessors {
        -:  772:public:
        -:  773:  static_assert(N > 1, "use ZeroSuccessors/OneSuccessor for N < 2");
        -:  774:
        -:  775:  template <typename ConcreteType>
        -:  776:  class Impl : public detail::MultiSuccessorTraitBase<ConcreteType,
        -:  777:                                                      NSuccessors<N>::Impl> {
        -:  778:  public:
        -:  779:    static LogicalResult verifyTrait(Operation *op) {
        -:  780:      return impl::verifyNSuccessors(op, N);
        -:  781:    }
        -:  782:  };
        -:  783:};
        -:  784:
        -:  785:/// This class provides APIs for ops that are known to have at least a specified
        -:  786:/// number of successors.
        -:  787:template <unsigned N>
        -:  788:class AtLeastNSuccessors {
        -:  789:public:
        -:  790:  template <typename ConcreteType>
        -:  791:  class Impl
        -:  792:      : public detail::MultiSuccessorTraitBase<ConcreteType,
        -:  793:                                               AtLeastNSuccessors<N>::Impl> {
        -:  794:  public:
        -:  795:    static LogicalResult verifyTrait(Operation *op) {
        -:  796:      return impl::verifyAtLeastNSuccessors(op, N);
        -:  797:    }
        -:  798:  };
        -:  799:};
        -:  800:
        -:  801:/// This class provides the API for ops which have an unknown number of
        -:  802:/// successors.
        -:  803:template <typename ConcreteType>
        -:  804:class VariadicSuccessors
        -:  805:    : public detail::MultiSuccessorTraitBase<ConcreteType, VariadicSuccessors> {
        -:  806:};
        -:  807:
        -:  808://===----------------------------------------------------------------------===//
        -:  809:// SingleBlock
        -:  810:
        -:  811:/// This class provides APIs and verifiers for ops with regions having a single
        -:  812:/// block.
        -:  813:template <typename ConcreteType>
        -:  814:struct SingleBlock : public TraitBase<ConcreteType, SingleBlock> {
        -:  815:public:
        -:  816:  static LogicalResult verifyTrait(Operation *op) {
        -:  817:    for (unsigned i = 0, e = op->getNumRegions(); i < e; ++i) {
        -:  818:      Region &region = op->getRegion(i);
        -:  819:
        -:  820:      // Empty regions are fine.
        -:  821:      if (region.empty())
        -:  822:        continue;
        -:  823:
        -:  824:      // Non-empty regions must contain a single basic block.
        -:  825:      if (!llvm::hasSingleElement(region))
        -:  826:        return op->emitOpError("expects region #")
        -:  827:               << i << " to have 0 or 1 blocks";
        -:  828:
        -:  829:      if (!ConcreteType::template hasTrait<NoTerminator>()) {
        -:  830:        Block &block = region.front();
        -:  831:        if (block.empty())
        -:  832:          return op->emitOpError() << "expects a non-empty block";
        -:  833:      }
        -:  834:    }
        -:  835:    return success();
        -:  836:  }
        -:  837:
        -:  838:  Block *getBody(unsigned idx = 0) {
        -:  839:    Region &region = this->getOperation()->getRegion(idx);
        -:  840:    assert(!region.empty() && "unexpected empty region");
        -:  841:    return &region.front();
        -:  842:  }
        -:  843:  Region &getBodyRegion(unsigned idx = 0) {
        -:  844:    return this->getOperation()->getRegion(idx);
        -:  845:  }
        -:  846:
        -:  847:  //===------------------------------------------------------------------===//
        -:  848:  // Single Region Utilities
        -:  849:  //===------------------------------------------------------------------===//
        -:  850:
        -:  851:  /// The following are a set of methods only enabled when the parent
        -:  852:  /// operation has a single region. Each of these methods take an additional
        -:  853:  /// template parameter that represents the concrete operation so that we
        -:  854:  /// can use SFINAE to disable the methods for non-single region operations.
        -:  855:  template <typename OpT, typename T = void>
        -:  856:  using enable_if_single_region =
        -:  857:      std::enable_if_t<OpT::template hasTrait<OneRegion>(), T>;
        -:  858:
        -:  859:  template <typename OpT = ConcreteType>
        -:  860:  enable_if_single_region<OpT, Block::iterator> begin() {
        -:  861:    return getBody()->begin();
        -:  862:  }
        -:  863:  template <typename OpT = ConcreteType>
        -:  864:  enable_if_single_region<OpT, Block::iterator> end() {
        -:  865:    return getBody()->end();
        -:  866:  }
        -:  867:  template <typename OpT = ConcreteType>
        -:  868:  enable_if_single_region<OpT, Operation &> front() {
        -:  869:    return *begin();
        -:  870:  }
        -:  871:
        -:  872:  /// Insert the operation into the back of the body.
        -:  873:  template <typename OpT = ConcreteType>
        -:  874:  enable_if_single_region<OpT> push_back(Operation *op) {
        -:  875:    insert(Block::iterator(getBody()->end()), op);
        -:  876:  }
        -:  877:
        -:  878:  /// Insert the operation at the given insertion point.
        -:  879:  template <typename OpT = ConcreteType>
        -:  880:  enable_if_single_region<OpT> insert(Operation *insertPt, Operation *op) {
        -:  881:    insert(Block::iterator(insertPt), op);
        -:  882:  }
        -:  883:  template <typename OpT = ConcreteType>
        -:  884:  enable_if_single_region<OpT> insert(Block::iterator insertPt, Operation *op) {
        -:  885:    getBody()->getOperations().insert(insertPt, op);
        -:  886:  }
        -:  887:};
        -:  888:
        -:  889://===----------------------------------------------------------------------===//
        -:  890:// SingleBlockImplicitTerminator
        -:  891:
        -:  892:/// This class provides APIs and verifiers for ops with regions having a single
        -:  893:/// block that must terminate with `TerminatorOpType`.
        -:  894:template <typename TerminatorOpType>
        -:  895:struct SingleBlockImplicitTerminator {
        -:  896:  template <typename ConcreteType>
        -:  897:  class Impl : public SingleBlock<ConcreteType> {
        -:  898:  private:
        -:  899:    using Base = SingleBlock<ConcreteType>;
        -:  900:    /// Builds a terminator operation without relying on OpBuilder APIs to avoid
        -:  901:    /// cyclic header inclusion.
        -:  902:    static Operation *buildTerminator(OpBuilder &builder, Location loc) {
        -:  903:      OperationState state(loc, TerminatorOpType::getOperationName());
        -:  904:      TerminatorOpType::build(builder, state);
        -:  905:      return Operation::create(state);
        -:  906:    }
        -:  907:
        -:  908:  public:
        -:  909:    /// The type of the operation used as the implicit terminator type.
        -:  910:    using ImplicitTerminatorOpT = TerminatorOpType;
        -:  911:
        -:  912:    static LogicalResult verifyRegionTrait(Operation *op) {
        -:  913:      if (failed(Base::verifyTrait(op)))
        -:  914:        return failure();
        -:  915:      for (unsigned i = 0, e = op->getNumRegions(); i < e; ++i) {
        -:  916:        Region &region = op->getRegion(i);
        -:  917:        // Empty regions are fine.
        -:  918:        if (region.empty())
        -:  919:          continue;
        -:  920:        Operation &terminator = region.front().back();
        -:  921:        if (isa<TerminatorOpType>(terminator))
        -:  922:          continue;
        -:  923:
        -:  924:        return op->emitOpError("expects regions to end with '" +
        -:  925:                               TerminatorOpType::getOperationName() +
        -:  926:                               "', found '" +
        -:  927:                               terminator.getName().getStringRef() + "'")
        -:  928:                   .attachNote()
        -:  929:               << "in custom textual format, the absence of terminator implies "
        -:  930:                  "'"
        -:  931:               << TerminatorOpType::getOperationName() << '\'';
        -:  932:      }
        -:  933:
        -:  934:      return success();
        -:  935:    }
        -:  936:
        -:  937:    /// Ensure that the given region has the terminator required by this trait.
        -:  938:    /// If OpBuilder is provided, use it to build the terminator and notify the
        -:  939:    /// OpBuilder listeners accordingly. If only a Builder is provided, locally
        -:  940:    /// construct an OpBuilder with no listeners; this should only be used if no
        -:  941:    /// OpBuilder is available at the call site, e.g., in the parser.
        -:  942:    static void ensureTerminator(Region &region, Builder &builder,
        -:  943:                                 Location loc) {
        -:  944:      ::mlir::impl::ensureRegionTerminator(region, builder, loc,
        -:  945:                                           buildTerminator);
        -:  946:    }
        -:  947:    static void ensureTerminator(Region &region, OpBuilder &builder,
        -:  948:                                 Location loc) {
        -:  949:      ::mlir::impl::ensureRegionTerminator(region, builder, loc,
        -:  950:                                           buildTerminator);
        -:  951:    }
        -:  952:
        -:  953:    //===------------------------------------------------------------------===//
        -:  954:    // Single Region Utilities
        -:  955:    //===------------------------------------------------------------------===//
        -:  956:    using Base::getBody;
        -:  957:
        -:  958:    template <typename OpT, typename T = void>
        -:  959:    using enable_if_single_region =
        -:  960:        std::enable_if_t<OpT::template hasTrait<OneRegion>(), T>;
        -:  961:
        -:  962:    /// Insert the operation into the back of the body, before the terminator.
        -:  963:    template <typename OpT = ConcreteType>
        -:  964:    enable_if_single_region<OpT> push_back(Operation *op) {
        -:  965:      insert(Block::iterator(getBody()->getTerminator()), op);
        -:  966:    }
        -:  967:
        -:  968:    /// Insert the operation at the given insertion point. Note: The operation
        -:  969:    /// is never inserted after the terminator, even if the insertion point is
        -:  970:    /// end().
        -:  971:    template <typename OpT = ConcreteType>
        -:  972:    enable_if_single_region<OpT> insert(Operation *insertPt, Operation *op) {
        -:  973:      insert(Block::iterator(insertPt), op);
        -:  974:    }
        -:  975:    template <typename OpT = ConcreteType>
        -:  976:    enable_if_single_region<OpT> insert(Block::iterator insertPt,
        -:  977:                                        Operation *op) {
        -:  978:      auto *body = getBody();
        -:  979:      if (insertPt == body->end())
        -:  980:        insertPt = Block::iterator(body->getTerminator());
        -:  981:      body->getOperations().insert(insertPt, op);
        -:  982:    }
        -:  983:  };
        -:  984:};
        -:  985:
        -:  986:/// Check is an op defines the `ImplicitTerminatorOpT` member. This is intended
        -:  987:/// to be used with `llvm::is_detected`.
        -:  988:template <class T>
        -:  989:using has_implicit_terminator_t = typename T::ImplicitTerminatorOpT;
        -:  990:
        -:  991:/// Support to check if an operation has the SingleBlockImplicitTerminator
        -:  992:/// trait. We can't just use `hasTrait` because this class is templated on a
        -:  993:/// specific terminator op.
        -:  994:template <class Op, bool hasTerminator =
        -:  995:                        llvm::is_detected<has_implicit_terminator_t, Op>::value>
        -:  996:struct hasSingleBlockImplicitTerminator {
        -:  997:  static constexpr bool value = std::is_base_of<
        -:  998:      typename OpTrait::SingleBlockImplicitTerminator<
        -:  999:          typename Op::ImplicitTerminatorOpT>::template Impl<Op>,
        -: 1000:      Op>::value;
        -: 1001:};
        -: 1002:template <class Op>
        -: 1003:struct hasSingleBlockImplicitTerminator<Op, false> {
        -: 1004:  static constexpr bool value = false;
        -: 1005:};
        -: 1006:
        -: 1007://===----------------------------------------------------------------------===//
        -: 1008:// Misc Traits
        -: 1009:
        -: 1010:/// This class provides verification for ops that are known to have the same
        -: 1011:/// operand shape: all operands are scalars, vectors/tensors of the same
        -: 1012:/// shape.
        -: 1013:template <typename ConcreteType>
        -: 1014:class SameOperandsShape : public TraitBase<ConcreteType, SameOperandsShape> {
        -: 1015:public:
        -: 1016:  static LogicalResult verifyTrait(Operation *op) {
        -: 1017:    return impl::verifySameOperandsShape(op);
        -: 1018:  }
        -: 1019:};
        -: 1020:
        -: 1021:/// This class provides verification for ops that are known to have the same
        -: 1022:/// operand and result shape: both are scalars, vectors/tensors of the same
        -: 1023:/// shape.
        -: 1024:template <typename ConcreteType>
        -: 1025:class SameOperandsAndResultShape
        -: 1026:    : public TraitBase<ConcreteType, SameOperandsAndResultShape> {
        -: 1027:public:
        -: 1028:  static LogicalResult verifyTrait(Operation *op) {
        -: 1029:    return impl::verifySameOperandsAndResultShape(op);
        -: 1030:  }
        -: 1031:};
        -: 1032:
        -: 1033:/// This class provides verification for ops that are known to have the same
        -: 1034:/// operand element type (or the type itself if it is scalar).
        -: 1035:///
        -: 1036:template <typename ConcreteType>
        -: 1037:class SameOperandsElementType
        -: 1038:    : public TraitBase<ConcreteType, SameOperandsElementType> {
        -: 1039:public:
        -: 1040:  static LogicalResult verifyTrait(Operation *op) {
        -: 1041:    return impl::verifySameOperandsElementType(op);
        -: 1042:  }
        -: 1043:};
        -: 1044:
        -: 1045:/// This class provides verification for ops that are known to have the same
        -: 1046:/// operand and result element type (or the type itself if it is scalar).
        -: 1047:///
        -: 1048:template <typename ConcreteType>
        -: 1049:class SameOperandsAndResultElementType
        -: 1050:    : public TraitBase<ConcreteType, SameOperandsAndResultElementType> {
        -: 1051:public:
        -: 1052:  static LogicalResult verifyTrait(Operation *op) {
        -: 1053:    return impl::verifySameOperandsAndResultElementType(op);
        -: 1054:  }
        -: 1055:};
        -: 1056:
        -: 1057:/// This class provides verification for ops that are known to have the same
        -: 1058:/// operand and result type.
        -: 1059:///
        -: 1060:/// Note: this trait subsumes the SameOperandsAndResultShape and
        -: 1061:/// SameOperandsAndResultElementType traits.
        -: 1062:template <typename ConcreteType>
        -: 1063:class SameOperandsAndResultType
        -: 1064:    : public TraitBase<ConcreteType, SameOperandsAndResultType> {
        -: 1065:public:
        -: 1066:  static LogicalResult verifyTrait(Operation *op) {
        -: 1067:    return impl::verifySameOperandsAndResultType(op);
        -: 1068:  }
        -: 1069:};
        -: 1070:
        -: 1071:/// This class verifies that any results of the specified op have a boolean
        -: 1072:/// type, a vector thereof, or a tensor thereof.
        -: 1073:template <typename ConcreteType>
        -: 1074:class ResultsAreBoolLike : public TraitBase<ConcreteType, ResultsAreBoolLike> {
        -: 1075:public:
        -: 1076:  static LogicalResult verifyTrait(Operation *op) {
        -: 1077:    return impl::verifyResultsAreBoolLike(op);
        -: 1078:  }
        -: 1079:};
        -: 1080:
        -: 1081:/// This class verifies that any results of the specified op have a floating
        -: 1082:/// point type, a vector thereof, or a tensor thereof.
        -: 1083:template <typename ConcreteType>
        -: 1084:class ResultsAreFloatLike
        -: 1085:    : public TraitBase<ConcreteType, ResultsAreFloatLike> {
        -: 1086:public:
        -: 1087:  static LogicalResult verifyTrait(Operation *op) {
        -: 1088:    return impl::verifyResultsAreFloatLike(op);
        -: 1089:  }
        -: 1090:};
        -: 1091:
        -: 1092:/// This class verifies that any results of the specified op have a signless
        -: 1093:/// integer or index type, a vector thereof, or a tensor thereof.
        -: 1094:template <typename ConcreteType>
        -: 1095:class ResultsAreSignlessIntegerLike
        -: 1096:    : public TraitBase<ConcreteType, ResultsAreSignlessIntegerLike> {
        -: 1097:public:
        -: 1098:  static LogicalResult verifyTrait(Operation *op) {
        -: 1099:    return impl::verifyResultsAreSignlessIntegerLike(op);
        -: 1100:  }
        -: 1101:};
        -: 1102:
        -: 1103:/// This class adds property that the operation is commutative.
        -: 1104:template <typename ConcreteType>
        -: 1105:class IsCommutative : public TraitBase<ConcreteType, IsCommutative> {};
        -: 1106:
        -: 1107:/// This class adds property that the operation is an involution.
        -: 1108:/// This means a unary to unary operation "f" that satisfies f(f(x)) = x
        -: 1109:template <typename ConcreteType>
        -: 1110:class IsInvolution : public TraitBase<ConcreteType, IsInvolution> {
        -: 1111:public:
        -: 1112:  static LogicalResult verifyTrait(Operation *op) {
        -: 1113:    static_assert(ConcreteType::template hasTrait<OneResult>(),
        -: 1114:                  "expected operation to produce one result");
        -: 1115:    static_assert(ConcreteType::template hasTrait<OneOperand>(),
        -: 1116:                  "expected operation to take one operand");
        -: 1117:    static_assert(ConcreteType::template hasTrait<SameOperandsAndResultType>(),
        -: 1118:                  "expected operation to preserve type");
        -: 1119:    // Involution requires the operation to be side effect free as well
        -: 1120:    // but currently this check is under a FIXME and is not actually done.
        -: 1121:    return impl::verifyIsInvolution(op);
        -: 1122:  }
        -: 1123:
        -: 1124:  static OpFoldResult foldTrait(Operation *op, ArrayRef<Attribute> operands) {
        -: 1125:    return impl::foldInvolution(op);
        -: 1126:  }
        -: 1127:};
        -: 1128:
        -: 1129:/// This class adds property that the operation is idempotent.
        -: 1130:/// This means a unary to unary operation "f" that satisfies f(f(x)) = f(x),
        -: 1131:/// or a binary operation "g" that satisfies g(x, x) = x.
        -: 1132:template <typename ConcreteType>
        -: 1133:class IsIdempotent : public TraitBase<ConcreteType, IsIdempotent> {
        -: 1134:public:
        -: 1135:  static LogicalResult verifyTrait(Operation *op) {
        -: 1136:    static_assert(ConcreteType::template hasTrait<OneResult>(),
        -: 1137:                  "expected operation to produce one result");
        -: 1138:    static_assert(ConcreteType::template hasTrait<OneOperand>() ||
        -: 1139:                      ConcreteType::template hasTrait<NOperands<2>::Impl>(),
        -: 1140:                  "expected operation to take one or two operands");
        -: 1141:    static_assert(ConcreteType::template hasTrait<SameOperandsAndResultType>(),
        -: 1142:                  "expected operation to preserve type");
        -: 1143:    // Idempotent requires the operation to be side effect free as well
        -: 1144:    // but currently this check is under a FIXME and is not actually done.
        -: 1145:    return impl::verifyIsIdempotent(op);
        -: 1146:  }
        -: 1147:
        -: 1148:  static OpFoldResult foldTrait(Operation *op, ArrayRef<Attribute> operands) {
        -: 1149:    return impl::foldIdempotent(op);
        -: 1150:  }
        -: 1151:};
        -: 1152:
        -: 1153:/// This class verifies that all operands of the specified op have a float type,
        -: 1154:/// a vector thereof, or a tensor thereof.
        -: 1155:template <typename ConcreteType>
        -: 1156:class OperandsAreFloatLike
        -: 1157:    : public TraitBase<ConcreteType, OperandsAreFloatLike> {
        -: 1158:public:
        -: 1159:  static LogicalResult verifyTrait(Operation *op) {
        -: 1160:    return impl::verifyOperandsAreFloatLike(op);
        -: 1161:  }
        -: 1162:};
        -: 1163:
        -: 1164:/// This class verifies that all operands of the specified op have a signless
        -: 1165:/// integer or index type, a vector thereof, or a tensor thereof.
        -: 1166:template <typename ConcreteType>
        -: 1167:class OperandsAreSignlessIntegerLike
        -: 1168:    : public TraitBase<ConcreteType, OperandsAreSignlessIntegerLike> {
        -: 1169:public:
        -: 1170:  static LogicalResult verifyTrait(Operation *op) {
        -: 1171:    return impl::verifyOperandsAreSignlessIntegerLike(op);
        -: 1172:  }
        -: 1173:};
        -: 1174:
        -: 1175:/// This class verifies that all operands of the specified op have the same
        -: 1176:/// type.
        -: 1177:template <typename ConcreteType>
        -: 1178:class SameTypeOperands : public TraitBase<ConcreteType, SameTypeOperands> {
        -: 1179:public:
        -: 1180:  static LogicalResult verifyTrait(Operation *op) {
        -: 1181:    return impl::verifySameTypeOperands(op);
        -: 1182:  }
        -: 1183:};
        -: 1184:
        -: 1185:/// This class provides the API for a sub-set of ops that are known to be
        -: 1186:/// constant-like. These are non-side effecting operations with one result and
        -: 1187:/// zero operands that can always be folded to a specific attribute value.
        -: 1188:template <typename ConcreteType>
        -: 1189:class ConstantLike : public TraitBase<ConcreteType, ConstantLike> {
        -: 1190:public:
        -: 1191:  static LogicalResult verifyTrait(Operation *op) {
        -: 1192:    static_assert(ConcreteType::template hasTrait<OneResult>(),
        -: 1193:                  "expected operation to produce one result");
        -: 1194:    static_assert(ConcreteType::template hasTrait<ZeroOperands>(),
        -: 1195:                  "expected operation to take zero operands");
        -: 1196:    // TODO: We should verify that the operation can always be folded, but this
        -: 1197:    // requires that the attributes of the op already be verified. We should add
        -: 1198:    // support for verifying traits "after" the operation to enable this use
        -: 1199:    // case.
        -: 1200:    return success();
        -: 1201:  }
        -: 1202:};
        -: 1203:
        -: 1204:/// This class provides the API for ops that are known to be isolated from
        -: 1205:/// above.
        -: 1206:template <typename ConcreteType>
        -: 1207:class IsIsolatedFromAbove
        -: 1208:    : public TraitBase<ConcreteType, IsIsolatedFromAbove> {
        -: 1209:public:
        -: 1210:  static LogicalResult verifyRegionTrait(Operation *op) {
        -: 1211:    return impl::verifyIsIsolatedFromAbove(op);
        -: 1212:  }
        -: 1213:};
        -: 1214:
        -: 1215:/// A trait of region holding operations that defines a new scope for polyhedral
        -: 1216:/// optimization purposes. Any SSA values of 'index' type that either dominate
        -: 1217:/// such an operation or are used at the top-level of such an operation
        -: 1218:/// automatically become valid symbols for the polyhedral scope defined by that
        -: 1219:/// operation. For more details, see `Traits.md#AffineScope`.
        -: 1220:template <typename ConcreteType>
        -: 1221:class AffineScope : public TraitBase<ConcreteType, AffineScope> {
        -: 1222:public:
        -: 1223:  static LogicalResult verifyTrait(Operation *op) {
        -: 1224:    static_assert(!ConcreteType::template hasTrait<ZeroRegions>(),
        -: 1225:                  "expected operation to have one or more regions");
        -: 1226:    return success();
        -: 1227:  }
        -: 1228:};
        -: 1229:
        -: 1230:/// A trait of region holding operations that define a new scope for automatic
        -: 1231:/// allocations, i.e., allocations that are freed when control is transferred
        -: 1232:/// back from the operation's region. Any operations performing such allocations
        -: 1233:/// (for eg. memref.alloca) will have their allocations automatically freed at
        -: 1234:/// their closest enclosing operation with this trait.
        -: 1235:template <typename ConcreteType>
        -: 1236:class AutomaticAllocationScope
        -: 1237:    : public TraitBase<ConcreteType, AutomaticAllocationScope> {
        -: 1238:public:
        -: 1239:  static LogicalResult verifyTrait(Operation *op) {
        -: 1240:    static_assert(!ConcreteType::template hasTrait<ZeroRegions>(),
        -: 1241:                  "expected operation to have one or more regions");
        -: 1242:    return success();
        -: 1243:  }
        -: 1244:};
        -: 1245:
        -: 1246:/// This class provides a verifier for ops that are expecting their parent
        -: 1247:/// to be one of the given parent ops
        -: 1248:template <typename... ParentOpTypes>
        -: 1249:struct HasParent {
        -: 1250:  template <typename ConcreteType>
        -: 1251:  class Impl : public TraitBase<ConcreteType, Impl> {
        -: 1252:  public:
        -: 1253:    static LogicalResult verifyTrait(Operation *op) {
        -: 1254:      if (llvm::isa_and_nonnull<ParentOpTypes...>(op->getParentOp()))
        -: 1255:        return success();
        -: 1256:
        -: 1257:      return op->emitOpError()
        -: 1258:             << "expects parent op "
        -: 1259:             << (sizeof...(ParentOpTypes) != 1 ? "to be one of '" : "'")
        -: 1260:             << llvm::makeArrayRef({ParentOpTypes::getOperationName()...})
        -: 1261:             << "'";
        -: 1262:    }
        -: 1263:  };
        -: 1264:};
        -: 1265:
        -: 1266:/// A trait for operations that have an attribute specifying operand segments.
        -: 1267:///
        -: 1268:/// Certain operations can have multiple variadic operands and their size
        -: 1269:/// relationship is not always known statically. For such cases, we need
        -: 1270:/// a per-op-instance specification to divide the operands into logical groups
        -: 1271:/// or segments. This can be modeled by attributes. The attribute will be named
        -: 1272:/// as `operand_segment_sizes`.
        -: 1273:///
        -: 1274:/// This trait verifies the attribute for specifying operand segments has
        -: 1275:/// the correct type (1D vector) and values (non-negative), etc.
        -: 1276:template <typename ConcreteType>
        -: 1277:class AttrSizedOperandSegments
        -: 1278:    : public TraitBase<ConcreteType, AttrSizedOperandSegments> {
        -: 1279:public:
        -: 1280:  static StringRef getOperandSegmentSizeAttr() {
        -: 1281:    return "operand_segment_sizes";
        -: 1282:  }
        -: 1283:
        -: 1284:  static LogicalResult verifyTrait(Operation *op) {
        -: 1285:    return ::mlir::OpTrait::impl::verifyOperandSizeAttr(
        -: 1286:        op, getOperandSegmentSizeAttr());
        -: 1287:  }
        -: 1288:};
        -: 1289:
        -: 1290:/// Similar to AttrSizedOperandSegments but used for results.
        -: 1291:template <typename ConcreteType>
        -: 1292:class AttrSizedResultSegments
        -: 1293:    : public TraitBase<ConcreteType, AttrSizedResultSegments> {
        -: 1294:public:
        -: 1295:  static StringRef getResultSegmentSizeAttr() { return "result_segment_sizes"; }
        -: 1296:
        -: 1297:  static LogicalResult verifyTrait(Operation *op) {
        -: 1298:    return ::mlir::OpTrait::impl::verifyResultSizeAttr(
        -: 1299:        op, getResultSegmentSizeAttr());
        -: 1300:  }
        -: 1301:};
        -: 1302:
        -: 1303:/// This trait provides a verifier for ops that are expecting their regions to
        -: 1304:/// not have any arguments
        -: 1305:template <typename ConcrentType>
        -: 1306:struct NoRegionArguments : public TraitBase<ConcrentType, NoRegionArguments> {
        -: 1307:  static LogicalResult verifyTrait(Operation *op) {
        -: 1308:    return ::mlir::OpTrait::impl::verifyNoRegionArguments(op);
        -: 1309:  }
        -: 1310:};
        -: 1311:
        -: 1312:// This trait is used to flag operations that consume or produce
        -: 1313:// values of `MemRef` type where those references can be 'normalized'.
        -: 1314:// TODO: Right now, the operands of an operation are either all normalizable,
        -: 1315:// or not. In the future, we may want to allow some of the operands to be
        -: 1316:// normalizable.
        -: 1317:template <typename ConcrentType>
        -: 1318:struct MemRefsNormalizable
        -: 1319:    : public TraitBase<ConcrentType, MemRefsNormalizable> {};
        -: 1320:
        -: 1321:/// This trait tags element-wise ops on vectors or tensors.
        -: 1322:///
        -: 1323:/// NOTE: Not all ops that are "elementwise" in some abstract sense satisfy this
        -: 1324:/// trait. In particular, broadcasting behavior is not allowed.
        -: 1325:///
        -: 1326:/// An `Elementwise` op must satisfy the following properties:
        -: 1327:///
        -: 1328:/// 1. If any result is a vector/tensor then at least one operand must also be a
        -: 1329:///    vector/tensor.
        -: 1330:/// 2. If any operand is a vector/tensor then there must be at least one result
        -: 1331:///    and all results must be vectors/tensors.
        -: 1332:/// 3. All operand and result vector/tensor types must be of the same shape. The
        -: 1333:///    shape may be dynamic in which case the op's behaviour is undefined for
        -: 1334:///    non-matching shapes.
        -: 1335:/// 4. The operation must be elementwise on its vector/tensor operands and
        -: 1336:///    results. When applied to single-element vectors/tensors, the result must
        -: 1337:///    be the same per elememnt.
        -: 1338:///
        -: 1339:/// TODO: Avoid hardcoding vector/tensor, and generalize this trait to a new
        -: 1340:/// interface `ElementwiseTypeInterface` that describes the container types for
        -: 1341:/// which the operation is elementwise.
        -: 1342:///
        -: 1343:/// Rationale:
        -: 1344:/// - 1. and 2. guarantee a well-defined iteration space and exclude the cases
        -: 1345:///   of 0 non-scalar operands or 0 non-scalar results, which complicate a
        -: 1346:///   generic definition of the iteration space.
        -: 1347:/// - 3. guarantees that folding can be done across scalars/vectors/tensors with
        -: 1348:///   the same pattern, as otherwise lots of special handling for type
        -: 1349:///   mismatches would be needed.
        -: 1350:/// - 4. guarantees that no error handling is needed. Higher-level dialects
        -: 1351:///   should reify any needed guards or error handling code before lowering to
        -: 1352:///   an `Elementwise` op.
        -: 1353:template <typename ConcreteType>
        -: 1354:struct Elementwise : public TraitBase<ConcreteType, Elementwise> {
        -: 1355:  static LogicalResult verifyTrait(Operation *op) {
        -: 1356:    return ::mlir::OpTrait::impl::verifyElementwise(op);
        -: 1357:  }
        -: 1358:};
        -: 1359:
        -: 1360:/// This trait tags `Elementwise` operatons that can be systematically
        -: 1361:/// scalarized. All vector/tensor operands and results are then replaced by
        -: 1362:/// scalars of the respective element type. Semantically, this is the operation
        -: 1363:/// on a single element of the vector/tensor.
        -: 1364:///
        -: 1365:/// Rationale:
        -: 1366:/// Allow to define the vector/tensor semantics of elementwise operations based
        -: 1367:/// on the same op's behavior on scalars. This provides a constructive procedure
        -: 1368:/// for IR transformations to, e.g., create scalar loop bodies from tensor ops.
        -: 1369:///
        -: 1370:/// Example:
        -: 1371:/// ```
        -: 1372:/// %tensor_select = "arith.select"(%pred_tensor, %true_val, %false_val)
        -: 1373:///                      : (tensor<?xi1>, tensor<?xf32>, tensor<?xf32>)
        -: 1374:///                      -> tensor<?xf32>
        -: 1375:/// ```
        -: 1376:/// can be scalarized to
        -: 1377:///
        -: 1378:/// ```
        -: 1379:/// %scalar_select = "arith.select"(%pred, %true_val_scalar, %false_val_scalar)
        -: 1380:///                      : (i1, f32, f32) -> f32
        -: 1381:/// ```
        -: 1382:template <typename ConcreteType>
        -: 1383:struct Scalarizable : public TraitBase<ConcreteType, Scalarizable> {
        -: 1384:  static LogicalResult verifyTrait(Operation *op) {
        -: 1385:    static_assert(
        -: 1386:        ConcreteType::template hasTrait<Elementwise>(),
        -: 1387:        "`Scalarizable` trait is only applicable to `Elementwise` ops.");
        -: 1388:    return success();
        -: 1389:  }
        -: 1390:};
        -: 1391:
        -: 1392:/// This trait tags `Elementwise` operatons that can be systematically
        -: 1393:/// vectorized. All scalar operands and results are then replaced by vectors
        -: 1394:/// with the respective element type. Semantically, this is the operation on
        -: 1395:/// multiple elements simultaneously. See also `Tensorizable`.
        -: 1396:///
        -: 1397:/// Rationale:
        -: 1398:/// Provide the reverse to `Scalarizable` which, when chained together, allows
        -: 1399:/// reasoning about the relationship between the tensor and vector case.
        -: 1400:/// Additionally, it permits reasoning about promoting scalars to vectors via
        -: 1401:/// broadcasting in cases like `%select_scalar_pred` below.
        -: 1402:template <typename ConcreteType>
        -: 1403:struct Vectorizable : public TraitBase<ConcreteType, Vectorizable> {
        -: 1404:  static LogicalResult verifyTrait(Operation *op) {
        -: 1405:    static_assert(
        -: 1406:        ConcreteType::template hasTrait<Elementwise>(),
        -: 1407:        "`Vectorizable` trait is only applicable to `Elementwise` ops.");
        -: 1408:    return success();
        -: 1409:  }
        -: 1410:};
        -: 1411:
        -: 1412:/// This trait tags `Elementwise` operatons that can be systematically
        -: 1413:/// tensorized. All scalar operands and results are then replaced by tensors
        -: 1414:/// with the respective element type. Semantically, this is the operation on
        -: 1415:/// multiple elements simultaneously. See also `Vectorizable`.
        -: 1416:///
        -: 1417:/// Rationale:
        -: 1418:/// Provide the reverse to `Scalarizable` which, when chained together, allows
        -: 1419:/// reasoning about the relationship between the tensor and vector case.
        -: 1420:/// Additionally, it permits reasoning about promoting scalars to tensors via
        -: 1421:/// broadcasting in cases like `%select_scalar_pred` below.
        -: 1422:///
        -: 1423:/// Examples:
        -: 1424:/// ```
        -: 1425:/// %scalar = "arith.addf"(%a, %b) : (f32, f32) -> f32
        -: 1426:/// ```
        -: 1427:/// can be tensorized to
        -: 1428:/// ```
        -: 1429:/// %tensor = "arith.addf"(%a, %b) : (tensor<?xf32>, tensor<?xf32>)
        -: 1430:///               -> tensor<?xf32>
        -: 1431:/// ```
        -: 1432:///
        -: 1433:/// ```
        -: 1434:/// %scalar_pred = "arith.select"(%pred, %true_val, %false_val)
        -: 1435:///                    : (i1, tensor<?xf32>, tensor<?xf32>) -> tensor<?xf32>
        -: 1436:/// ```
        -: 1437:/// can be tensorized to
        -: 1438:/// ```
        -: 1439:/// %tensor_pred = "arith.select"(%pred, %true_val, %false_val)
        -: 1440:///                    : (tensor<?xi1>, tensor<?xf32>, tensor<?xf32>)
        -: 1441:///                    -> tensor<?xf32>
        -: 1442:/// ```
        -: 1443:template <typename ConcreteType>
        -: 1444:struct Tensorizable : public TraitBase<ConcreteType, Tensorizable> {
        -: 1445:  static LogicalResult verifyTrait(Operation *op) {
        -: 1446:    static_assert(
        -: 1447:        ConcreteType::template hasTrait<Elementwise>(),
        -: 1448:        "`Tensorizable` trait is only applicable to `Elementwise` ops.");
        -: 1449:    return success();
        -: 1450:  }
        -: 1451:};
        -: 1452:
        -: 1453:/// Together, `Elementwise`, `Scalarizable`, `Vectorizable`, and `Tensorizable`
        -: 1454:/// provide an easy way for scalar operations to conveniently generalize their
        -: 1455:/// behavior to vectors/tensors, and systematize conversion between these forms.
        -: 1456:bool hasElementwiseMappableTraits(Operation *op);
        -: 1457:
        -: 1458:} // namespace OpTrait
        -: 1459:
        -: 1460://===----------------------------------------------------------------------===//
        -: 1461:// Internal Trait Utilities
        -: 1462://===----------------------------------------------------------------------===//
        -: 1463:
        -: 1464:namespace op_definition_impl {
        -: 1465://===----------------------------------------------------------------------===//
        -: 1466:// Trait Existence
        -: 1467:
        -: 1468:/// Returns true if this given Trait ID matches the IDs of any of the provided
        -: 1469:/// trait types `Traits`.
        -: 1470:template <template <typename T> class... Traits>
        -: 1471:static bool hasTrait(TypeID traitID) {
        -: 1472:  TypeID traitIDs[] = {TypeID::get<Traits>()...};
        -: 1473:  for (unsigned i = 0, e = sizeof...(Traits); i != e; ++i)
        -: 1474:    if (traitIDs[i] == traitID)
        -: 1475:      return true;
        -: 1476:  return false;
        -: 1477:}
        -: 1478:
        -: 1479://===----------------------------------------------------------------------===//
        -: 1480:// Trait Folding
        -: 1481:
        -: 1482:/// Trait to check if T provides a 'foldTrait' method for single result
        -: 1483:/// operations.
        -: 1484:template <typename T, typename... Args>
        -: 1485:using has_single_result_fold_trait = decltype(T::foldTrait(
        -: 1486:    std::declval<Operation *>(), std::declval<ArrayRef<Attribute>>()));
        -: 1487:template <typename T>
        -: 1488:using detect_has_single_result_fold_trait =
        -: 1489:    llvm::is_detected<has_single_result_fold_trait, T>;
        -: 1490:/// Trait to check if T provides a general 'foldTrait' method.
        -: 1491:template <typename T, typename... Args>
        -: 1492:using has_fold_trait =
        -: 1493:    decltype(T::foldTrait(std::declval<Operation *>(),
        -: 1494:                          std::declval<ArrayRef<Attribute>>(),
        -: 1495:                          std::declval<SmallVectorImpl<OpFoldResult> &>()));
        -: 1496:template <typename T>
        -: 1497:using detect_has_fold_trait = llvm::is_detected<has_fold_trait, T>;
        -: 1498:/// Trait to check if T provides any `foldTrait` method.
        -: 1499:template <typename T>
        -: 1500:using detect_has_any_fold_trait =
        -: 1501:    std::disjunction<detect_has_fold_trait<T>,
        -: 1502:                     detect_has_single_result_fold_trait<T>>;
        -: 1503:
        -: 1504:/// Returns the result of folding a trait that implements a `foldTrait` function
        -: 1505:/// that is specialized for operations that have a single result.
        -: 1506:template <typename Trait>
        -: 1507:static std::enable_if_t<detect_has_single_result_fold_trait<Trait>::value,
        -: 1508:                        LogicalResult>
        -: 1509:foldTrait(Operation *op, ArrayRef<Attribute> operands,
        -: 1510:          SmallVectorImpl<OpFoldResult> &results) {
        -: 1511:  assert(op->hasTrait<OpTrait::OneResult>() &&
        -: 1512:         "expected trait on non single-result operation to implement the "
        -: 1513:         "general `foldTrait` method");
        -: 1514:  // If a previous trait has already been folded and replaced this operation, we
        -: 1515:  // fail to fold this trait.
        -: 1516:  if (!results.empty())
        -: 1517:    return failure();
        -: 1518:
        -: 1519:  if (OpFoldResult result = Trait::foldTrait(op, operands)) {
        -: 1520:    if (result.template dyn_cast<Value>() != op->getResult(0))
        -: 1521:      results.push_back(result);
        -: 1522:    return success();
        -: 1523:  }
        -: 1524:  return failure();
        -: 1525:}
        -: 1526:/// Returns the result of folding a trait that implements a generalized
        -: 1527:/// `foldTrait` function that is supports any operation type.
        -: 1528:template <typename Trait>
        -: 1529:static std::enable_if_t<detect_has_fold_trait<Trait>::value, LogicalResult>
        -: 1530:foldTrait(Operation *op, ArrayRef<Attribute> operands,
        -: 1531:          SmallVectorImpl<OpFoldResult> &results) {
        -: 1532:  // If a previous trait has already been folded and replaced this operation, we
        -: 1533:  // fail to fold this trait.
        -: 1534:  return results.empty() ? Trait::foldTrait(op, operands, results) : failure();
        -: 1535:}
        -: 1536:template <typename Trait>
        -: 1537:static inline std::enable_if_t<!detect_has_any_fold_trait<Trait>::value,
        -: 1538:                               LogicalResult>
        -: 1539:foldTrait(Operation *, ArrayRef<Attribute>, SmallVectorImpl<OpFoldResult> &) {
        -: 1540:  return failure();
        -: 1541:}
        -: 1542:
        -: 1543:/// Given a tuple type containing a set of traits, return the result of folding
        -: 1544:/// the given operation.
        -: 1545:template <typename... Ts>
        -: 1546:static LogicalResult foldTraits(Operation *op, ArrayRef<Attribute> operands,
        -: 1547:                                SmallVectorImpl<OpFoldResult> &results) {
        -: 1548:  return success((succeeded(foldTrait<Ts>(op, operands, results)) || ...));
        -: 1549:}
        -: 1550:
        -: 1551://===----------------------------------------------------------------------===//
        -: 1552:// Trait Verification
        -: 1553:
        -: 1554:/// Trait to check if T provides a `verifyTrait` method.
        -: 1555:template <typename T, typename... Args>
        -: 1556:using has_verify_trait = decltype(T::verifyTrait(std::declval<Operation *>()));
        -: 1557:template <typename T>
        -: 1558:using detect_has_verify_trait = llvm::is_detected<has_verify_trait, T>;
        -: 1559:
        -: 1560:/// Trait to check if T provides a `verifyTrait` method.
        -: 1561:template <typename T, typename... Args>
        -: 1562:using has_verify_region_trait =
        -: 1563:    decltype(T::verifyRegionTrait(std::declval<Operation *>()));
        -: 1564:template <typename T>
        -: 1565:using detect_has_verify_region_trait =
        -: 1566:    llvm::is_detected<has_verify_region_trait, T>;
        -: 1567:
        -: 1568:/// Verify the given trait if it provides a verifier.
        -: 1569:template <typename T>
        -: 1570:std::enable_if_t<detect_has_verify_trait<T>::value, LogicalResult>
        -: 1571:verifyTrait(Operation *op) {
        -: 1572:  return T::verifyTrait(op);
        -: 1573:}
        -: 1574:template <typename T>
        -: 1575:inline std::enable_if_t<!detect_has_verify_trait<T>::value, LogicalResult>
        -: 1576:verifyTrait(Operation *) {
        -: 1577:  return success();
        -: 1578:}
        -: 1579:
        -: 1580:/// Given a set of traits, return the result of verifying the given operation.
        -: 1581:template <typename... Ts>
        -: 1582:LogicalResult verifyTraits(Operation *op) {
        -: 1583:  return success((succeeded(verifyTrait<Ts>(op)) && ...));
        -: 1584:}
        -: 1585:
        -: 1586:/// Verify the given trait if it provides a region verifier.
        -: 1587:template <typename T>
        -: 1588:std::enable_if_t<detect_has_verify_region_trait<T>::value, LogicalResult>
        -: 1589:verifyRegionTrait(Operation *op) {
        -: 1590:  return T::verifyRegionTrait(op);
        -: 1591:}
        -: 1592:template <typename T>
        -: 1593:inline std::enable_if_t<!detect_has_verify_region_trait<T>::value,
        -: 1594:                        LogicalResult>
        -: 1595:verifyRegionTrait(Operation *) {
        -: 1596:  return success();
        -: 1597:}
        -: 1598:
        -: 1599:/// Given a set of traits, return the result of verifying the regions of the
        -: 1600:/// given operation.
        -: 1601:template <typename... Ts>
        -: 1602:LogicalResult verifyRegionTraits(Operation *op) {
        -: 1603:  return success((succeeded(verifyRegionTrait<Ts>(op)) && ...));
        -: 1604:}
        -: 1605:} // namespace op_definition_impl
        -: 1606:
        -: 1607://===----------------------------------------------------------------------===//
        -: 1608:// Operation Definition classes
        -: 1609://===----------------------------------------------------------------------===//
        -: 1610:
        -: 1611:/// This provides public APIs that all operations should have.  The template
        -: 1612:/// argument 'ConcreteType' should be the concrete type by CRTP and the others
        -: 1613:/// are base classes by the policy pattern.
        -: 1614:template <typename ConcreteType, template <typename T> class... Traits>
        -: 1615:class Op : public OpState, public Traits<ConcreteType>... {
        -: 1616:public:
        -: 1617:  /// Inherit getOperation from `OpState`.
        -: 1618:  using OpState::getOperation;
        -: 1619:  using OpState::verify;
        -: 1620:  using OpState::verifyRegions;
        -: 1621:
        -: 1622:  /// Return if this operation contains the provided trait.
        -: 1623:  template <template <typename T> class Trait>
        -: 1624:  static constexpr bool hasTrait() {
        -: 1625:    return llvm::is_one_of<Trait<ConcreteType>, Traits<ConcreteType>...>::value;
        -: 1626:  }
        -: 1627:
        -: 1628:  /// Create a deep copy of this operation.
        -: 1629:  ConcreteType clone() { return cast<ConcreteType>(getOperation()->clone()); }
        -: 1630:
        -: 1631:  /// Create a partial copy of this operation without traversing into attached
        -: 1632:  /// regions. The new operation will have the same number of regions as the
        -: 1633:  /// original one, but they will be left empty.
        -: 1634:  ConcreteType cloneWithoutRegions() {
        -: 1635:    return cast<ConcreteType>(getOperation()->cloneWithoutRegions());
        -: 1636:  }
        -: 1637:
        -: 1638:  /// Return true if this "op class" can match against the specified operation.
    #####: 1639:  static bool classof(Operation *op) {
    #####: 1640:    if (auto info = op->getRegisteredInfo())
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12CoroResumeOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12CoroResumeOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6Exp2OpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6Exp2OpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13EhTypeidForOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13EhTypeidForOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10DbgValueOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10DbgValueOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12DbgDeclareOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12DbgDeclareOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9DbgAddrOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9DbgAddrOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7CtPopOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7CtPopOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM20CountTrailingZerosOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM20CountTrailingZerosOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM19CountLeadingZerosOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM19CountLeadingZerosOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5CosOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5CosOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13CoroSuspendOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13CoroSuspendOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10CoroSizeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10CoroSizeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10CoroSaveOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10CoroSaveOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5ExpOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5ExpOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8CoroIdOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8CoroIdOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10CoroFreeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10CoroFreeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9CoroEndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9CoroEndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11CoroBeginOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11CoroBeginOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11CoroAlignOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11CoroAlignOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10CopySignOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10CopySignOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12BitReverseOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12BitReverseOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8AssumeOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8AssumeOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5AbsOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5AbsOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6ZExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6ZExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5XOrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5XOrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13UnreachableOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13UnreachableOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5LogOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5LogOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8MemsetOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8MemsetOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9MemmoveOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9MemmoveOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8MemcpyOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8MemcpyOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14MemcpyInlineOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14MemcpyInlineOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9MaximumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9MaximumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8MaxNumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8MaxNumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM17MatrixTransposeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM17MatrixTransposeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM16MatrixMultiplyOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM16MatrixMultiplyOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM24MatrixColumnMajorStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM24MatrixColumnMajorStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM23MatrixColumnMajorLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM23MatrixColumnMajorLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13MaskedStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13MaskedStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12MaskedLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16AtLeastNOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12MaskedLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16AtLeastNOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7UndefOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7UndefOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6Log2OpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6Log2OpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7Log10OpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7Log10OpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM15LifetimeStartOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM15LifetimeStartOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13LifetimeEndOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13LifetimeEndOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9IsFPClassEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9IsFPClassEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM19GetActiveLaneMaskOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM19GetActiveLaneMaskOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8FTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8FTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9FMulAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9FMulAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5FMAOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5FMAOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8FFloorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8FFloorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7FCeilOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7FCeilOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FAbsOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FAbsOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FCmpOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS1_22FastmathFlagsInterface5TraitENS3_16SameTypeOperandsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FCmpOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS1_22FastmathFlagsInterface5TraitENS3_16SameTypeOperandsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5GEPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16AtLeastNOperandsILj1EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5GEPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16AtLeastNOperandsILj1EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8FreezeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8FreezeOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7FenceOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7FenceOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FSubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FSubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9FPTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9FPTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8FPToUIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8FPToUIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8FPToSIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8FPToSIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7FPExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7FPExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FNegOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FNegOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6ICmpOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_16SameTypeOperandsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6ICmpOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_16SameTypeOperandsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6FAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6FAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS1_22FastmathFlagsInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14ExtractValueOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14ExtractValueOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM16ExtractElementOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM16ExtractElementOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10ConstantOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12ConstantLikeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10ConstantOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12ConstantLikeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9BitcastOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9BitcastOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11AtomicRMWOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11AtomicRMWOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM15AtomicCmpXchgOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM15AtomicCmpXchgOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5AndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5AndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8AllocaOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS1_15LLVMPointerTypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8AllocaOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS1_15LLVMPointerTypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM15AddrSpaceCastOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM15AddrSpaceCastOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5AddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS3_13IsCommutativeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5AddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS3_13IsCommutativeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6AShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6AShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6SDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6SDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6URemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6URemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8UIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8UIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6UDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6UDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7TruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7TruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5SubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5SubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7StoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7StoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM15ShuffleVectorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM15ShuffleVectorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5ShlOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5ShlOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8SelectOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8SelectOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6SRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6SRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8SIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8SIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6SExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6SExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8MinNumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8MinNumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8ReturnOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8ReturnOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8ResumeOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8ResumeOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10PtrToIntOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10PtrToIntOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM4OrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM4OrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6NullOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS1_15LLVMPointerTypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6NullOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS1_15LLVMPointerTypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5MulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS3_13IsCommutativeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5MulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS3_13IsCommutativeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6LoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6LoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6LShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6LShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10IntToPtrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10IntToPtrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13InsertValueOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13InsertValueOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM15InsertElementOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM15InsertElementOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM16VPStridedStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj5EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM16VPStridedStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj5EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM17masked_expandloadEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM17masked_expandloadEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM20masked_compressstoreEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM20masked_compressstoreEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9VaStartOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9VaStartOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VaEndOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VaEndOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VaCopyOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VaCopyOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPZExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPZExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPXorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPXorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPURemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPURemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10VPUIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10VPUIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPUDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPUDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9VPTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9VPTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPSubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPSubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13masked_gatherEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16AtLeastNOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13masked_gatherEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16AtLeastNOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM15VPStridedLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM15VPStridedLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9VPStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9VPStoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPShlOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPShlOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13VPSelectMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13VPSelectMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPSRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPSRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10VPSIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10VPSIToFPOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPSExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPSExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPSDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPSDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13VPReduceXorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13VPReduceXorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceUMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceUMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceUMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceUMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceSMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceSMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_smaxEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_smaxEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11AddressOfOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS1_15LLVMPointerTypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_21SymbolUserOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11AddressOfOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS1_15LLVMPointerTypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_21SymbolUserOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8SwitchOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_18AtLeastNSuccessorsILj1EE4ImplENS3_16AtLeastNOperandsILj1EE4ImplENS3_24AttrSizedOperandSegmentsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8SwitchOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_18AtLeastNSuccessorsILj1EE4ImplENS3_16AtLeastNOperandsILj1EE4ImplENS3_24AttrSizedOperandSegmentsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8CondBrOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_11NSuccessorsILj2EE4ImplENS3_16AtLeastNOperandsILj1EE4ImplENS3_24AttrSizedOperandSegmentsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8CondBrOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_11NSuccessorsILj2EE4ImplENS3_16AtLeastNOperandsILj1EE4ImplENS3_24AttrSizedOperandSegmentsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM4BrOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_12OneSuccessorENS3_16VariadicOperandsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM4BrOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_12OneSuccessorENS3_16VariadicOperandsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12LandingpadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12LandingpadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8InvokeOpEJNS_7OpTrait11ZeroRegionsENS3_15VariadicResultsENS3_11NSuccessorsILj2EE4ImplENS3_16VariadicOperandsENS3_24AttrSizedOperandSegmentsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_15CallOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8InvokeOpEJNS_7OpTrait11ZeroRegionsENS3_15VariadicResultsENS3_11NSuccessorsILj2EE4ImplENS3_16VariadicOperandsENS3_24AttrSizedOperandSegmentsENS3_12OpInvariantsENS_17BranchOpInterface5TraitENS_15CallOpInterface5TraitENS3_12IsTerminatorEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11InlineAsmOpEJNS_7OpTrait11ZeroRegionsENS3_15VariadicResultsENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11InlineAsmOpEJNS_7OpTrait11ZeroRegionsENS3_15VariadicResultsENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6vscaleEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6vscaleEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM17vector_reduce_xorEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM17vector_reduce_xorEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_uminEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_uminEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_umaxEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_umaxEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_sminEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_sminEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceSMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceSMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM16vector_reduce_orEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM16vector_reduce_orEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM17vector_reduce_mulEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM17vector_reduce_mulEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_fmulEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_fmulEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_fminEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_fminEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_fmaxEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_fmaxEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18vector_reduce_faddEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18vector_reduce_faddEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM17vector_reduce_andEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM17vector_reduce_andEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM17vector_reduce_addEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM17vector_reduce_addEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_32SameOperandsAndResultElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13vector_insertEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13vector_insertEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14vector_extractEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14vector_extractEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14masked_scatterEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14masked_scatterEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6SqrtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6SqrtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPFAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPFAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPAndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPAndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPAShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPAShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18USubWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18USubWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18UMulWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18UMulWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6UMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6UMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6UMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6UMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18UAddWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18UAddWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12StepVectorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12StepVectorOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11StackSaveOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11StackSaveOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_12ZeroOperandsENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14StackRestoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14StackRestoreOpEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPFDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPFDivOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5SinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5SinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18SSubWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18SSubWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18SMulWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18SMulWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6SMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6SMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6SMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6SMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM18SAddWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM18SAddWithOverflowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS3_23SameOperandsElementTypeEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7RoundOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7RoundOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11RoundEvenOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11RoundEvenOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_10OneOperandENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8PrefetchEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8PrefetchEJNS_7OpTrait11ZeroRegionsENS3_11ZeroResultsENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM5PowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM5PowOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6PowIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6PowIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9MinimumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9MinimumOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj2EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitENS3_25SameOperandsAndResultTypeENS_20InferTypeOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPLoadOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12VPReduceOrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12VPReduceOrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13VPReduceMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13VPReduceMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceFMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceFMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceFMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceFMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceFMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceFMaxOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM14VPReduceFAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM14VPReduceFAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13VPReduceAndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13VPReduceAndOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM13VPReduceAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM13VPReduceAddOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12VPPtrToIntOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12VPPtrToIntOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6VPOrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6VPOrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12VPMergeMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12VPMergeMinOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM6CallOpEJNS_7OpTrait11ZeroRegionsENS3_15VariadicResultsENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsENS1_22FastmathFlagsInterface5TraitENS_15CallOpInterface5TraitENS_21SymbolUserOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM6CallOpEJNS_7OpTrait11ZeroRegionsENS3_15VariadicResultsENS3_14ZeroSuccessorsENS3_16VariadicOperandsENS3_12OpInvariantsENS1_22FastmathFlagsInterface5TraitENS_15CallOpInterface5TraitENS_21SymbolUserOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPLShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPLShrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM12VPIntToPtrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM12VPIntToPtrOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM7VPFmaOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj5EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM7VPFmaOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj5EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPFSubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPFSubOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPFRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPFRemOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM11VPFPTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM11VPFPTruncOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10VPFPToUIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10VPFPToUIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM10VPFPToSIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM10VPFPToSIOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM9VPFPExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM9VPFPExtOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPFNegOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPFNegOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj3EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
_ZN4mlir2OpINS_4LLVM8VPFMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE:
function _ZN4mlir2OpINS_4LLVM8VPFMulOpEJNS_7OpTrait11ZeroRegionsENS3_9OneResultENS3_14OneTypedResultINS_4TypeEE4ImplENS3_14ZeroSuccessorsENS3_9NOperandsILj4EE4ImplENS3_12OpInvariantsENS_25ConditionallySpeculatable5TraitENS3_27AlwaysSpeculatableImplTraitENS_23MemoryEffectOpInterface5TraitEEE7classofEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1639:  static bool classof(Operation *op) {
branch  0 never executed
branch  1 never executed
    #####: 1640:    if (auto info = op->getRegisteredInfo())
branch  0 never executed
branch  1 never executed
    #####: 1641:      return TypeID::get<ConcreteType>() == info->getTypeID();
        -: 1642:#ifndef NDEBUG
    #####: 1643:    if (op->getName().getStringRef() == ConcreteType::getOperationName())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1644:      llvm::report_fatal_error(
    #####: 1645:          "classof on '" + ConcreteType::getOperationName() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1646:          "' failed due to the operation not being registered");
        -: 1647:#endif
        -: 1648:    return false;
        -: 1649:  }
------------------
        -: 1650:  /// Provide `classof` support for other OpBase derived classes, such as
        -: 1651:  /// Interfaces.
        -: 1652:  template <typename T>
        -: 1653:  static std::enable_if_t<std::is_base_of<OpState, T>::value, bool>
        -: 1654:  classof(const T *op) {
        -: 1655:    return classof(const_cast<T *>(op)->getOperation());
        -: 1656:  }
        -: 1657:
        -: 1658:  /// Expose the type we are instantiated on to template machinery that may want
        -: 1659:  /// to introspect traits on this operation.
        -: 1660:  using ConcreteOpType = ConcreteType;
        -: 1661:
        -: 1662:  /// This is a public constructor.  Any op can be initialized to null.
        -: 1663:  explicit Op() : OpState(nullptr) {}
    #####: 1664:  Op(std::nullptr_t) : OpState(nullptr) {}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
branch 55 never executed
branch 56 never executed
branch 57 never executed
branch 58 never executed
branch 59 never executed
branch 60 never executed
branch 61 never executed
branch 62 never executed
branch 63 never executed
branch 64 never executed
branch 65 never executed
branch 66 never executed
branch 67 never executed
branch 68 never executed
branch 69 never executed
branch 70 never executed
branch 71 never executed
branch 72 never executed
branch 73 never executed
branch 74 never executed
branch 75 never executed
branch 76 never executed
branch 77 never executed
branch 78 never executed
branch 79 never executed
branch 80 never executed
branch 81 never executed
branch 82 never executed
branch 83 never executed
branch 84 never executed
branch 85 never executed
branch 86 never executed
branch 87 never executed
branch 88 never executed
branch 89 never executed
branch 90 never executed
branch 91 never executed
branch 92 never executed
branch 93 never executed
branch 94 never executed
branch 95 never executed
branch 96 never executed
branch 97 never executed
branch 98 never executed
branch 99 never executed
branch 100 never executed
branch 101 never executed
branch 102 never executed
branch 103 never executed
branch 104 never executed
branch 105 never executed
branch 106 never executed
branch 107 never executed
branch 108 never executed
branch 109 never executed
branch 110 never executed
branch 111 never executed
branch 112 never executed
branch 113 never executed
branch 114 never executed
branch 115 never executed
branch 116 never executed
branch 117 never executed
branch 118 never executed
branch 119 never executed
branch 120 never executed
branch 121 never executed
branch 122 never executed
branch 123 never executed
branch 124 never executed
branch 125 never executed
branch 126 never executed
branch 127 never executed
branch 128 never executed
branch 129 never executed
branch 130 never executed
branch 131 never executed
branch 132 never executed
branch 133 never executed
branch 134 never executed
branch 135 never executed
branch 136 never executed
branch 137 never executed
branch 138 never executed
branch 139 never executed
branch 140 never executed
branch 141 never executed
branch 142 never executed
branch 143 never executed
branch 144 never executed
branch 145 never executed
branch 146 never executed
branch 147 never executed
branch 148 never executed
branch 149 never executed
branch 150 never executed
branch 151 never executed
branch 152 never executed
branch 153 never executed
branch 154 never executed
branch 155 never executed
branch 156 never executed
branch 157 never executed
branch 158 never executed
branch 159 never executed
branch 160 never executed
branch 161 never executed
branch 162 never executed
branch 163 never executed
branch 164 never executed
branch 165 never executed
branch 166 never executed
branch 167 never executed
branch 168 never executed
branch 169 never executed
branch 170 never executed
branch 171 never executed
branch 172 never executed
branch 173 never executed
branch 174 never executed
branch 175 never executed
branch 176 never executed
branch 177 never executed
branch 178 never executed
branch 179 never executed
branch 180 never executed
branch 181 never executed
branch 182 never executed
branch 183 never executed
branch 184 never executed
branch 185 never executed
branch 186 never executed
branch 187 never executed
branch 188 never executed
branch 189 never executed
branch 190 never executed
branch 191 never executed
branch 192 never executed
branch 193 never executed
branch 194 never executed
branch 195 never executed
branch 196 never executed
branch 197 never executed
branch 198 never executed
branch 199 never executed
branch 200 never executed
branch 201 never executed
branch 202 never executed
branch 203 never executed
branch 204 never executed
branch 205 never executed
branch 206 never executed
branch 207 never executed
branch 208 never executed
branch 209 never executed
branch 210 never executed
branch 211 never executed
branch 212 never executed
branch 213 never executed
branch 214 never executed
branch 215 never executed
branch 216 never executed
branch 217 never executed
branch 218 never executed
branch 219 never executed
branch 220 never executed
branch 221 never executed
branch 222 never executed
branch 223 never executed
branch 224 never executed
branch 225 never executed
branch 226 never executed
branch 227 never executed
branch 228 never executed
branch 229 never executed
branch 230 never executed
branch 231 never executed
branch 232 never executed
branch 233 never executed
branch 234 never executed
branch 235 never executed
branch 236 never executed
branch 237 never executed
branch 238 never executed
branch 239 never executed
branch 240 never executed
branch 241 never executed
branch 242 never executed
branch 243 never executed
branch 244 never executed
branch 245 never executed
branch 246 never executed
branch 247 never executed
branch 248 never executed
branch 249 never executed
branch 250 never executed
branch 251 never executed
branch 252 never executed
branch 253 never executed
branch 254 never executed
branch 255 never executed
branch 256 never executed
branch 257 never executed
branch 258 never executed
branch 259 never executed
branch 260 never executed
branch 261 never executed
branch 262 never executed
branch 263 never executed
branch 264 never executed
branch 265 never executed
branch 266 never executed
branch 267 never executed
branch 268 never executed
branch 269 never executed
branch 270 never executed
branch 271 never executed
branch 272 never executed
branch 273 never executed
branch 274 never executed
branch 275 never executed
branch 276 never executed
branch 277 never executed
branch 278 never executed
branch 279 never executed
branch 280 never executed
branch 281 never executed
branch 282 never executed
branch 283 never executed
branch 284 never executed
branch 285 never executed
branch 286 never executed
branch 287 never executed
branch 288 never executed
branch 289 never executed
branch 290 never executed
branch 291 never executed
branch 292 never executed
branch 293 never executed
branch 294 never executed
branch 295 never executed
branch 296 never executed
branch 297 never executed
branch 298 never executed
branch 299 never executed
branch 300 never executed
branch 301 never executed
branch 302 never executed
branch 303 never executed
branch 304 never executed
branch 305 never executed
branch 306 never executed
branch 307 never executed
branch 308 never executed
branch 309 never executed
branch 310 never executed
branch 311 never executed
branch 312 never executed
branch 313 never executed
branch 314 never executed
branch 315 never executed
branch 316 never executed
branch 317 never executed
branch 318 never executed
branch 319 never executed
branch 320 never executed
branch 321 never executed
branch 322 never executed
branch 323 never executed
branch 324 never executed
branch 325 never executed
branch 326 never executed
branch 327 never executed
branch 328 never executed
branch 329 never executed
branch 330 never executed
branch 331 never executed
branch 332 never executed
branch 333 never executed
branch 334 never executed
branch 335 never executed
branch 336 never executed
branch 337 never executed
branch 338 never executed
branch 339 never executed
branch 340 never executed
branch 341 never executed
branch 342 never executed
branch 343 never executed
branch 344 never executed
branch 345 never executed
branch 346 never executed
branch 347 never executed
branch 348 never executed
branch 349 never executed
branch 350 never executed
branch 351 never executed
branch 352 never executed
branch 353 never executed
branch 354 never executed
branch 355 never executed
branch 356 never executed
branch 357 never executed
branch 358 never executed
branch 359 never executed
branch 360 never executed
branch 361 never executed
branch 362 never executed
branch 363 never executed
branch 364 never executed
branch 365 never executed
branch 366 never executed
branch 367 never executed
branch 368 never executed
branch 369 never executed
branch 370 never executed
branch 371 never executed
branch 372 never executed
branch 373 never executed
branch 374 never executed
branch 375 never executed
branch 376 never executed
branch 377 never executed
branch 378 never executed
branch 379 never executed
branch 380 never executed
branch 381 never executed
branch 382 never executed
branch 383 never executed
branch 384 never executed
branch 385 never executed
branch 386 never executed
branch 387 never executed
branch 388 never executed
branch 389 never executed
branch 390 never executed
branch 391 never executed
branch 392 never executed
branch 393 never executed
branch 394 never executed
branch 395 never executed
branch 396 never executed
branch 397 never executed
branch 398 never executed
branch 399 never executed
branch 400 never executed
branch 401 never executed
branch 402 never executed
branch 403 never executed
branch 404 never executed
branch 405 never executed
branch 406 never executed
branch 407 never executed
        -: 1665:
        -: 1666:  /// This is a public constructor to enable access via the llvm::cast family of
        -: 1667:  /// methods. This should not be used directly.
    #####: 1668:  explicit Op(Operation *state) : OpState(state) {}
branch  0 never executed
branch  1 never executed
        -: 1669:
        -: 1670:  /// Methods for supporting PointerLikeTypeTraits.
        -: 1671:  const void *getAsOpaquePointer() const {
        -: 1672:    return static_cast<const void *>((Operation *)*this);
        -: 1673:  }
        -: 1674:  static ConcreteOpType getFromOpaquePointer(const void *pointer) {
        -: 1675:    return ConcreteOpType(
        -: 1676:        reinterpret_cast<Operation *>(const_cast<void *>(pointer)));
        -: 1677:  }
        -: 1678:
        -: 1679:  /// Attach the given models as implementations of the corresponding
        -: 1680:  /// interfaces for the concrete operation.
        -: 1681:  template <typename... Models>
        -: 1682:  static void attachInterface(MLIRContext &context) {
        -: 1683:    Optional<RegisteredOperationName> info = RegisteredOperationName::lookup(
        -: 1684:        ConcreteType::getOperationName(), &context);
        -: 1685:    if (!info)
        -: 1686:      llvm::report_fatal_error(
        -: 1687:          "Attempting to attach an interface to an unregistered operation " +
        -: 1688:          ConcreteType::getOperationName() + ".");
        -: 1689:    (checkInterfaceTarget<Models>(), ...);
        -: 1690:    info->attachInterface<Models...>();
        -: 1691:  }
        -: 1692:
        -: 1693:private:
        -: 1694:  /// Trait to check if T provides a 'fold' method for a single result op.
        -: 1695:  template <typename T, typename... Args>
        -: 1696:  using has_single_result_fold =
        -: 1697:      decltype(std::declval<T>().fold(std::declval<ArrayRef<Attribute>>()));
        -: 1698:  template <typename T>
        -: 1699:  using detect_has_single_result_fold =
        -: 1700:      llvm::is_detected<has_single_result_fold, T>;
        -: 1701:  /// Trait to check if T provides a general 'fold' method.
        -: 1702:  template <typename T, typename... Args>
        -: 1703:  using has_fold = decltype(std::declval<T>().fold(
        -: 1704:      std::declval<ArrayRef<Attribute>>(),
        -: 1705:      std::declval<SmallVectorImpl<OpFoldResult> &>()));
        -: 1706:  template <typename T>
        -: 1707:  using detect_has_fold = llvm::is_detected<has_fold, T>;
        -: 1708:  /// Trait to check if T provides a 'print' method.
        -: 1709:  template <typename T, typename... Args>
        -: 1710:  using has_print =
        -: 1711:      decltype(std::declval<T>().print(std::declval<OpAsmPrinter &>()));
        -: 1712:  template <typename T>
        -: 1713:  using detect_has_print = llvm::is_detected<has_print, T>;
        -: 1714:
        -: 1715:  /// Trait to check if T provides a 'ConcreteEntity' type alias.
        -: 1716:  template <typename T>
        -: 1717:  using has_concrete_entity_t = typename T::ConcreteEntity;
        -: 1718:
        -: 1719:  /// A struct-wrapped type alias to T::ConcreteEntity if provided and to
        -: 1720:  /// ConcreteType otherwise. This is akin to std::conditional but doesn't fail
        -: 1721:  /// on the missing typedef. Useful for checking if the interface is targeting
        -: 1722:  /// the right class.
        -: 1723:  template <typename T,
        -: 1724:            bool = llvm::is_detected<has_concrete_entity_t, T>::value>
        -: 1725:  struct InterfaceTargetOrOpT {
        -: 1726:    using type = typename T::ConcreteEntity;
        -: 1727:  };
        -: 1728:  template <typename T>
        -: 1729:  struct InterfaceTargetOrOpT<T, false> {
        -: 1730:    using type = ConcreteType;
        -: 1731:  };
        -: 1732:
        -: 1733:  /// A hook for static assertion that the external interface model T is
        -: 1734:  /// targeting the concrete type of this op. The model can also be a fallback
        -: 1735:  /// model that works for every op.
        -: 1736:  template <typename T>
        -: 1737:  static void checkInterfaceTarget() {
        -: 1738:    static_assert(std::is_same<typename InterfaceTargetOrOpT<T>::type,
        -: 1739:                               ConcreteType>::value,
        -: 1740:                  "attaching an interface to the wrong op kind");
        -: 1741:  }
        -: 1742:
        -: 1743:  /// Returns an interface map containing the interfaces registered to this
        -: 1744:  /// operation.
        -: 1745:  static detail::InterfaceMap getInterfaceMap() {
        -: 1746:    return detail::InterfaceMap::template get<Traits<ConcreteType>...>();
        -: 1747:  }
        -: 1748:
        -: 1749:  /// Return the internal implementations of each of the OperationName
        -: 1750:  /// hooks.
        -: 1751:  /// Implementation of `FoldHookFn` OperationName hook.
        -: 1752:  static OperationName::FoldHookFn getFoldHookFn() {
        -: 1753:    return getFoldHookFnImpl<ConcreteType>();
        -: 1754:  }
        -: 1755:  /// The internal implementation of `getFoldHookFn` above that is invoked if
        -: 1756:  /// the operation is single result and defines a `fold` method.
        -: 1757:  template <typename ConcreteOpT>
        -: 1758:  static std::enable_if_t<llvm::is_one_of<OpTrait::OneResult<ConcreteOpT>,
        -: 1759:                                          Traits<ConcreteOpT>...>::value &&
        -: 1760:                              detect_has_single_result_fold<ConcreteOpT>::value,
        -: 1761:                          OperationName::FoldHookFn>
        -: 1762:  getFoldHookFnImpl() {
        -: 1763:    return [](Operation *op, ArrayRef<Attribute> operands,
        -: 1764:              SmallVectorImpl<OpFoldResult> &results) {
        -: 1765:      return foldSingleResultHook<ConcreteOpT>(op, operands, results);
        -: 1766:    };
        -: 1767:  }
        -: 1768:  /// The internal implementation of `getFoldHookFn` above that is invoked if
        -: 1769:  /// the operation is not single result and defines a `fold` method.
        -: 1770:  template <typename ConcreteOpT>
        -: 1771:  static std::enable_if_t<!llvm::is_one_of<OpTrait::OneResult<ConcreteOpT>,
        -: 1772:                                           Traits<ConcreteOpT>...>::value &&
        -: 1773:                              detect_has_fold<ConcreteOpT>::value,
        -: 1774:                          OperationName::FoldHookFn>
        -: 1775:  getFoldHookFnImpl() {
        -: 1776:    return [](Operation *op, ArrayRef<Attribute> operands,
        -: 1777:              SmallVectorImpl<OpFoldResult> &results) {
        -: 1778:      return foldHook<ConcreteOpT>(op, operands, results);
        -: 1779:    };
        -: 1780:  }
        -: 1781:  /// The internal implementation of `getFoldHookFn` above that is invoked if
        -: 1782:  /// the operation does not define a `fold` method.
        -: 1783:  template <typename ConcreteOpT>
        -: 1784:  static std::enable_if_t<!detect_has_single_result_fold<ConcreteOpT>::value &&
        -: 1785:                              !detect_has_fold<ConcreteOpT>::value,
        -: 1786:                          OperationName::FoldHookFn>
        -: 1787:  getFoldHookFnImpl() {
        -: 1788:    return [](Operation *op, ArrayRef<Attribute> operands,
        -: 1789:              SmallVectorImpl<OpFoldResult> &results) {
        -: 1790:      // In this case, we only need to fold the traits of the operation.
        -: 1791:      return op_definition_impl::foldTraits<Traits<ConcreteType>...>(
        -: 1792:          op, operands, results);
        -: 1793:    };
        -: 1794:  }
        -: 1795:  /// Return the result of folding a single result operation that defines a
        -: 1796:  /// `fold` method.
        -: 1797:  template <typename ConcreteOpT>
        -: 1798:  static LogicalResult
        -: 1799:  foldSingleResultHook(Operation *op, ArrayRef<Attribute> operands,
        -: 1800:                       SmallVectorImpl<OpFoldResult> &results) {
        -: 1801:    OpFoldResult result = cast<ConcreteOpT>(op).fold(operands);
        -: 1802:
        -: 1803:    // If the fold failed or was in-place, try to fold the traits of the
        -: 1804:    // operation.
        -: 1805:    if (!result || result.template dyn_cast<Value>() == op->getResult(0)) {
        -: 1806:      if (succeeded(op_definition_impl::foldTraits<Traits<ConcreteType>...>(
        -: 1807:              op, operands, results)))
        -: 1808:        return success();
        -: 1809:      return success(static_cast<bool>(result));
        -: 1810:    }
        -: 1811:    results.push_back(result);
        -: 1812:    return success();
        -: 1813:  }
        -: 1814:  /// Return the result of folding an operation that defines a `fold` method.
        -: 1815:  template <typename ConcreteOpT>
        -: 1816:  static LogicalResult foldHook(Operation *op, ArrayRef<Attribute> operands,
        -: 1817:                                SmallVectorImpl<OpFoldResult> &results) {
        -: 1818:    LogicalResult result = cast<ConcreteOpT>(op).fold(operands, results);
        -: 1819:
        -: 1820:    // If the fold failed or was in-place, try to fold the traits of the
        -: 1821:    // operation.
        -: 1822:    if (failed(result) || results.empty()) {
        -: 1823:      if (succeeded(op_definition_impl::foldTraits<Traits<ConcreteType>...>(
        -: 1824:              op, operands, results)))
        -: 1825:        return success();
        -: 1826:    }
        -: 1827:    return result;
        -: 1828:  }
        -: 1829:
        -: 1830:  /// Implementation of `GetCanonicalizationPatternsFn` OperationName hook.
        -: 1831:  static OperationName::GetCanonicalizationPatternsFn
        -: 1832:  getGetCanonicalizationPatternsFn() {
        -: 1833:    return &ConcreteType::getCanonicalizationPatterns;
        -: 1834:  }
        -: 1835:  /// Implementation of `GetHasTraitFn`
        -: 1836:  static OperationName::HasTraitFn getHasTraitFn() {
        -: 1837:    return
        -: 1838:        [](TypeID id) { return op_definition_impl::hasTrait<Traits...>(id); };
        -: 1839:  }
        -: 1840:  /// Implementation of `ParseAssemblyFn` OperationName hook.
        -: 1841:  static OperationName::ParseAssemblyFn getParseAssemblyFn() {
        -: 1842:    return &ConcreteType::parse;
        -: 1843:  }
        -: 1844:  /// Implementation of `PrintAssemblyFn` OperationName hook.
        -: 1845:  static OperationName::PrintAssemblyFn getPrintAssemblyFn() {
        -: 1846:    return getPrintAssemblyFnImpl<ConcreteType>();
        -: 1847:  }
        -: 1848:  /// The internal implementation of `getPrintAssemblyFn` that is invoked when
        -: 1849:  /// the concrete operation does not define a `print` method.
        -: 1850:  template <typename ConcreteOpT>
        -: 1851:  static std::enable_if_t<!detect_has_print<ConcreteOpT>::value,
        -: 1852:                          OperationName::PrintAssemblyFn>
        -: 1853:  getPrintAssemblyFnImpl() {
        -: 1854:    return [](Operation *op, OpAsmPrinter &printer, StringRef defaultDialect) {
        -: 1855:      return OpState::print(op, printer, defaultDialect);
        -: 1856:    };
        -: 1857:  }
        -: 1858:  /// The internal implementation of `getPrintAssemblyFn` that is invoked when
        -: 1859:  /// the concrete operation defines a `print` method.
        -: 1860:  template <typename ConcreteOpT>
        -: 1861:  static std::enable_if_t<detect_has_print<ConcreteOpT>::value,
        -: 1862:                          OperationName::PrintAssemblyFn>
        -: 1863:  getPrintAssemblyFnImpl() {
        -: 1864:    return &printAssembly;
        -: 1865:  }
        -: 1866:  static void printAssembly(Operation *op, OpAsmPrinter &p,
        -: 1867:                            StringRef defaultDialect) {
        -: 1868:    OpState::printOpName(op, p, defaultDialect);
        -: 1869:    return cast<ConcreteType>(op).print(p);
        -: 1870:  }
        -: 1871:  /// Implementation of `PopulateDefaultAttrsFn` OperationName hook.
        -: 1872:  static OperationName::PopulateDefaultAttrsFn getPopulateDefaultAttrsFn() {
        -: 1873:    return ConcreteType::populateDefaultAttrs;
        -: 1874:  }
        -: 1875:  /// Implementation of `VerifyInvariantsFn` OperationName hook.
        -: 1876:  static LogicalResult verifyInvariants(Operation *op) {
        -: 1877:    static_assert(hasNoDataMembers(),
        -: 1878:                  "Op class shouldn't define new data members");
        -: 1879:    return failure(
        -: 1880:        failed(op_definition_impl::verifyTraits<Traits<ConcreteType>...>(op)) ||
        -: 1881:        failed(cast<ConcreteType>(op).verify()));
        -: 1882:  }
        -: 1883:  static OperationName::VerifyInvariantsFn getVerifyInvariantsFn() {
        -: 1884:    return static_cast<LogicalResult (*)(Operation *)>(&verifyInvariants);
        -: 1885:  }
        -: 1886:  /// Implementation of `VerifyRegionInvariantsFn` OperationName hook.
        -: 1887:  static LogicalResult verifyRegionInvariants(Operation *op) {
        -: 1888:    static_assert(hasNoDataMembers(),
        -: 1889:                  "Op class shouldn't define new data members");
        -: 1890:    return failure(
        -: 1891:        failed(op_definition_impl::verifyRegionTraits<Traits<ConcreteType>...>(
        -: 1892:            op)) ||
        -: 1893:        failed(cast<ConcreteType>(op).verifyRegions()));
        -: 1894:  }
        -: 1895:  static OperationName::VerifyRegionInvariantsFn getVerifyRegionInvariantsFn() {
        -: 1896:    return static_cast<LogicalResult (*)(Operation *)>(&verifyRegionInvariants);
        -: 1897:  }
        -: 1898:
        -: 1899:  static constexpr bool hasNoDataMembers() {
        -: 1900:    // Checking that the derived class does not define any member by comparing
        -: 1901:    // its size to an ad-hoc EmptyOp.
        -: 1902:    class EmptyOp : public Op<EmptyOp, Traits...> {};
        -: 1903:    return sizeof(ConcreteType) == sizeof(EmptyOp);
        -: 1904:  }
        -: 1905:
        -: 1906:  /// Allow access to internal implementation methods.
        -: 1907:  friend RegisteredOperationName;
        -: 1908:};
        -: 1909:
        -: 1910:/// This class represents the base of an operation interface. See the definition
        -: 1911:/// of `detail::Interface` for requirements on the `Traits` type.
        -: 1912:template <typename ConcreteType, typename Traits>
        -: 1913:class OpInterface
        -: 1914:    : public detail::Interface<ConcreteType, Operation *, Traits,
        -: 1915:                               Op<ConcreteType>, OpTrait::TraitBase> {
        -: 1916:public:
        -: 1917:  using Base = OpInterface<ConcreteType, Traits>;
        -: 1918:  using InterfaceBase = detail::Interface<ConcreteType, Operation *, Traits,
        -: 1919:                                          Op<ConcreteType>, OpTrait::TraitBase>;
        -: 1920:
        -: 1921:  /// Inherit the base class constructor.
    #####: 1922:  using InterfaceBase::InterfaceBase;
call    0 never executed
        -: 1923:
        -: 1924:protected:
        -: 1925:  /// Returns the impl interface instance for the given operation.
function _ZN4mlir11OpInterfaceINS_4LLVM22FastmathFlagsInterfaceENS1_6detail37FastmathFlagsInterfaceInterfaceTraitsEE15getInterfaceForEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####: 1926:  static typename InterfaceBase::Concept *getInterfaceFor(Operation *op) {
    #####: 1927:    OperationName name = op->getName();
branch  0 never executed
branch  1 never executed
        -: 1928:
        -: 1929:    // Access the raw interface from the operation info.
    #####: 1930:    if (Optional<RegisteredOperationName> rInfo = name.getRegisteredInfo()) {
branch  0 never executed
branch  1 never executed
    #####: 1931:      if (auto *opIface = rInfo->getInterface<ConcreteType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1932:        return opIface;
        -: 1933:      // Fallback to the dialect to provide it with a chance to implement this
        -: 1934:      // interface for this operation.
    #####: 1935:      return rInfo->getDialect().getRegisteredInterfaceForOp<ConcreteType>(
call    0 never executed
    #####: 1936:          op->getName());
call    0 never executed
        -: 1937:    }
        -: 1938:    // Fallback to the dialect to provide it with a chance to implement this
        -: 1939:    // interface for this operation.
    #####: 1940:    if (Dialect *dialect = name.getDialect())
branch  0 never executed
branch  1 never executed
    #####: 1941:      return dialect->getRegisteredInterfaceForOp<ConcreteType>(name);
call    0 never executed
        -: 1942:    return nullptr;
        -: 1943:  }
        -: 1944:
        -: 1945:  /// Allow access to `getInterfaceFor`.
        -: 1946:  friend InterfaceBase;
        -: 1947:};
        -: 1948:
        -: 1949://===----------------------------------------------------------------------===//
        -: 1950:// CastOpInterface utilities
        -: 1951://===----------------------------------------------------------------------===//
        -: 1952:
        -: 1953:// These functions are out-of-line implementations of the methods in
        -: 1954:// CastOpInterface, which avoids them being template instantiated/duplicated.
        -: 1955:namespace impl {
        -: 1956:/// Attempt to fold the given cast operation.
        -: 1957:LogicalResult foldCastInterfaceOp(Operation *op,
        -: 1958:                                  ArrayRef<Attribute> attrOperands,
        -: 1959:                                  SmallVectorImpl<OpFoldResult> &foldResults);
        -: 1960:/// Attempt to verify the given cast operation.
        -: 1961:LogicalResult verifyCastInterfaceOp(
        -: 1962:    Operation *op, function_ref<bool(TypeRange, TypeRange)> areCastCompatible);
        -: 1963:} // namespace impl
        -: 1964:} // namespace mlir
        -: 1965:
        -: 1966:namespace llvm {
        -: 1967:
        -: 1968:template <typename T>
        -: 1969:struct DenseMapInfo<T,
        -: 1970:                    std::enable_if_t<std::is_base_of<mlir::OpState, T>::value &&
        -: 1971:                                     !mlir::detail::IsInterface<T>::value>> {
        -: 1972:  static inline T getEmptyKey() {
        -: 1973:    auto *pointer = llvm::DenseMapInfo<void *>::getEmptyKey();
        -: 1974:    return T::getFromOpaquePointer(pointer);
        -: 1975:  }
        -: 1976:  static inline T getTombstoneKey() {
        -: 1977:    auto *pointer = llvm::DenseMapInfo<void *>::getTombstoneKey();
        -: 1978:    return T::getFromOpaquePointer(pointer);
        -: 1979:  }
        -: 1980:  static unsigned getHashValue(T val) {
        -: 1981:    return hash_value(val.getAsOpaquePointer());
        -: 1982:  }
        -: 1983:  static bool isEqual(T lhs, T rhs) { return lhs == rhs; }
        -: 1984:};
        -: 1985:
        -: 1986:} // namespace llvm
        -: 1987:
        -: 1988:#endif
