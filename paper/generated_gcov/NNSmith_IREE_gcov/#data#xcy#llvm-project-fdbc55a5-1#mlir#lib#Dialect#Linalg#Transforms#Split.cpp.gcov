        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Linalg/Transforms/Split.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Split.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Split.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- Split.cpp - Structured op splitting --------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   10:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   11:#include "mlir/Dialect/Utils/StaticValueUtils.h"
        -:   12:#include "mlir/IR/AffineExpr.h"
        -:   13:#include "mlir/IR/Attributes.h"
        -:   14:#include "mlir/IR/BuiltinAttributes.h"
        -:   15:#include "mlir/IR/OpDefinition.h"
        -:   16:#include "mlir/Interfaces/TilingInterface.h"
        -:   17:
        -:   18:#include "llvm/ADT/STLExtras.h"
        -:   19:#include "llvm/ADT/SmallVector.h"
        -:   20:
        -:   21:using namespace mlir;
        -:   22:using namespace mlir::linalg;
        -:   23:
        -:   24:/// Creates a part of the given `op` split along the iteration space `dimension`
        -:   25:/// with the given `size` and an optional `offset` (default 0). Makes slices
        -:   26:/// of operands, using the input operands of the original op and the output
        -:   27:/// operands provided as `resultOperands`. Expects `offsets` and `sizes` to
        -:   28:/// define the shape of the iteration space of the original op. Returns the
        -:   29:/// split-out op as well as the output operand values updated with the partial
        -:   30:/// results produced by this op through `results`.
        -:   31:static TilingInterface
function _ZL15createSplitPartRN4mlir12RewriterBaseENS_8LocationENS_15TilingInterfaceEN4llvm8ArrayRefINS_12OpFoldResultEEES7_NS_10ValueRangeEjS6_S6_RNS4_15SmallVectorImplINS_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:   32:createSplitPart(RewriterBase &b, Location loc, TilingInterface op,
        -:   33:                ArrayRef<OpFoldResult> offsets, ArrayRef<OpFoldResult> sizes,
        -:   34:                ValueRange resultOperands, unsigned dimension,
        -:   35:                OpFoldResult size, OpFoldResult offset,
        -:   36:                SmallVectorImpl<Value> &results) {
        -:   37:  // Iteration space of the current part.
    #####:   38:  SmallVector<OpFoldResult> sizesCopy = llvm::to_vector(sizes);
call    0 never executed
    #####:   39:  SmallVector<OpFoldResult> offsetsCopy = llvm::to_vector(offsets);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:  sizesCopy[dimension] = size;
branch  0 never executed
branch  1 never executed
    #####:   41:  offsetsCopy[dimension] = offset;
branch  0 never executed
branch  1 never executed
        -:   42:
        -:   43:  // Create the part as it it were a single tile.
    #####:   44:  SmallVector<Operation *> tiled =
call    0 never executed
    #####:   45:      op.getTiledImplementation(b, offsetsCopy, sizesCopy);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:  assert(tiled.size() == 1 && "expected a single result from tiling");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   47:  auto part = cast<TilingInterface>(tiled.front());
call    0 never executed
        -:   48:
        -:   49:  // Insert the results back and populate the `results` list.
    #####:   50:  for (auto i : llvm::seq<unsigned>(0, part->getNumResults())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:    SmallVector<OpFoldResult> resultOffsets, resultSizes;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   52:    if (failed(op.getResultTilePosition(b, i, offsetsCopy, sizesCopy,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   53:                                        resultOffsets, resultSizes)))
    #####:   54:      return nullptr;
branch  0 never executed
branch  1 never executed
    #####:   55:    SmallVector<OpFoldResult> resultStrides(resultOffsets.size(),
    #####:   56:                                            b.getIndexAttr(1));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   57:    Value inserted = b.create<tensor::InsertSliceOp>(
    #####:   58:        loc, part->getResult(i), resultOperands[i], resultOffsets, resultSizes,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:        resultStrides);
call    0 never executed
call    1 never executed
    #####:   60:    results.push_back(inserted);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   61:  }
        -:   62:
    #####:   63:  return part;
        -:   64:}
        -:   65:
        -:   66:std::pair<TilingInterface, TilingInterface>
function _ZN4mlir6linalg7splitOpERNS_12RewriterBaseENS_15TilingInterfaceEjNS_12OpFoldResultE called 0 returned 0% blocks executed 0%
    #####:   67:linalg::splitOp(RewriterBase &rewriter, TilingInterface op, unsigned dimension,
        -:   68:                OpFoldResult splitPoint) {
        -:   69:  // Compute the iteration space.
    #####:   70:  SmallVector<Range> iterationSpace = op.getIterationDomain(rewriter);
call    0 never executed
        -:   71:
        -:   72:  // Bail out on dimension overflow.
    #####:   73:  if (dimension >= iterationSpace.size())
branch  0 never executed
branch  1 never executed
    #####:   74:    return std::make_pair(op, TilingInterface());
        -:   75:
    #####:   76:  SmallVector<OpFoldResult> offsets = llvm::to_vector(llvm::map_range(
    #####:   77:      iterationSpace, [](const Range &range) { return range.offset; }));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:  SmallVector<OpFoldResult> sizes = llvm::to_vector(llvm::map_range(
    #####:   79:      iterationSpace, [](const Range &range) { return range.size; }));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   80:
        -:   81:  // Adjust the split point so that it doesn't overflow the size.
    #####:   82:  AffineExpr d0, d1, d2;
    #####:   83:  bindDims(rewriter.getContext(), d0, d1, d2);
call    0 never executed
    #####:   84:  OpFoldResult minSplitPoint = makeComposedFoldedAffineMin(
        -:   85:      rewriter, op.getLoc(),
    #####:   86:      AffineMap::inferFromExprList(ArrayRef<AffineExpr>{d0, d1 + d2}).front(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:      {splitPoint, offsets[dimension], sizes[dimension]});
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   88:
        -:   89:  // Compute the size of the second part. Return early if the second part would
        -:   90:  // have an empty iteration space.
    #####:   91:  OpFoldResult remainingSize = makeComposedFoldedAffineApply(
    #####:   92:      rewriter, op.getLoc(), d0 + d1 - d2,
call    0 never executed
    #####:   93:      {iterationSpace[dimension].offset, iterationSpace[dimension].size,
branch  0 never executed
branch  1 never executed
    #####:   94:       minSplitPoint});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   95:  if (auto attr = remainingSize.dyn_cast<Attribute>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:    if (attr.cast<IntegerAttr>().getValue().isZero())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   97:      return {op, TilingInterface()};
        -:   98:  }
        -:   99:
        -:  100:  // Compute destination tensors.
    #####:  101:  SmallVector<Value> destinationTensors;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:  LogicalResult destStatus = tensor::getOrCreateDestinations(
    #####:  103:      rewriter, op.getLoc(), op, destinationTensors);
call    0 never executed
    #####:  104:  (void)destStatus;
    #####:  105:  assert(succeeded(destStatus) && "failed to get destination tensors");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  106:
        -:  107:  // Create the first part.
    #####:  108:  SmallVector<Value> firstResults;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  109:  TilingInterface firstPart = createSplitPart(
        -:  110:      rewriter, op.getLoc(), op, offsets, sizes, destinationTensors, dimension,
    #####:  111:      minSplitPoint, iterationSpace[dimension].offset, firstResults);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  112:
        -:  113:  // Need to pretend that the original op now takes as operands firstResults,
        -:  114:  // otherwise tiling interface implementation will take the wrong value to
        -:  115:  // produce data tiles.
function _ZZN4mlir6linalg7splitOpERNS_12RewriterBaseENS_15TilingInterfaceEjNS_12OpFoldResultEENKUlvE1_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  116:  rewriter.updateRootInPlace(op, [&]() {
call    0 never executed
    #####:  117:    unsigned numTotalOperands = op->getNumOperands();
branch  0 never executed
branch  1 never executed
    #####:  118:    unsigned numOutputOperands = firstResults.size();
call    0 never executed
    #####:  119:    op->setOperands(numTotalOperands - numOutputOperands, numOutputOperands,
call    0 never executed
call    1 never executed
        -:  120:                    firstResults);
    #####:  121:  });
        -:  122:
        -:  123:  // Create the second part.
    #####:  124:  OpFoldResult totalOffset = makeComposedFoldedAffineApply(
    #####:  125:      rewriter, op.getLoc(), d0 + d1, {offsets[dimension], minSplitPoint});
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  126:  SmallVector<Value> secondResults;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  127:  TilingInterface secondPart =
call    0 never executed
        -:  128:      createSplitPart(rewriter, op.getLoc(), op, offsets, sizes, firstResults,
    #####:  129:                      dimension, remainingSize, totalOffset, secondResults);
call    0 never executed
        -:  130:
        -:  131:  // Replace the original op with the results of the two newly created ops.
    #####:  132:  rewriter.replaceOp(op, secondResults);
call    0 never executed
call    1 never executed
    #####:  133:  return {firstPart, secondPart};
branch  0 never executed
branch  1 never executed
        -:  134:}
