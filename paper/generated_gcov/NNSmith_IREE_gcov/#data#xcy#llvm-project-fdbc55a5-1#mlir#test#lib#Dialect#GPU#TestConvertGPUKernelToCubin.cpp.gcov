        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/GPU/CMakeFiles/MLIRGPUTestPasses.dir/TestConvertGPUKernelToCubin.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/GPU/CMakeFiles/MLIRGPUTestPasses.dir/TestConvertGPUKernelToCubin.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestConvertGPUKernelToCubin.cpp - Test gpu kernel cubin lowering ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/GPU/Transforms/Passes.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:#include "mlir/Target/LLVMIR/Dialect/NVVM/NVVMToLLVMIRTranslation.h"
        -:   12:#include "mlir/Target/LLVMIR/Export.h"
        -:   13:#include "llvm/Support/TargetSelect.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
        -:   17:#if MLIR_CUDA_CONVERSIONS_ENABLED
        -:   18:namespace {
    #####:   19:class TestSerializeToCubinPass
call    0 never executed
        -:   20:    : public PassWrapper<TestSerializeToCubinPass, gpu::SerializeToBlobPass> {
        -:   21:public:
function _ZN12_GLOBAL__N_124TestSerializeToCubinPass13resolveTypeIDEv called 325560 returned 100% blocks executed 100%
   325560:   22:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestSerializeToCubinPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   23:
function _ZNK12_GLOBAL__N_124TestSerializeToCubinPass11getArgumentEv called 325560 returned 100% blocks executed 100%
   325560:   24:  StringRef getArgument() const final { return "test-gpu-to-cubin"; }
function _ZNK12_GLOBAL__N_124TestSerializeToCubinPass14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   25:  StringRef getDescription() const final {
   325560:   26:    return "Lower GPU kernel function to CUBIN binary annotations";
        -:   27:  }
        -:   28:  TestSerializeToCubinPass();
        -:   29:
        -:   30:private:
        -:   31:  void getDependentDialects(DialectRegistry &registry) const override;
        -:   32:
        -:   33:  // Serializes PTX to CUBIN.
        -:   34:  std::unique_ptr<std::vector<char>>
        -:   35:  serializeISA(const std::string &isa) override;
        -:   36:};
        -:   37:} // namespace
        -:   38:
function _ZN12_GLOBAL__N_124TestSerializeToCubinPassC2Ev called 325560 returned 100% blocks executed 100%
   325560:   39:TestSerializeToCubinPass::TestSerializeToCubinPass() {
call    0 returned 100%
   325560:   40:  this->triple = "nvptx64-nvidia-cuda";
call    0 returned 100%
   325560:   41:  this->chip = "sm_35";
call    0 returned 100%
   325560:   42:  this->features = "+ptx60";
call    0 returned 100%
   325560:   43:}
        -:   44:
function _ZNK12_GLOBAL__N_124TestSerializeToCubinPass20getDependentDialectsERN4mlir15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:   45:void TestSerializeToCubinPass::getDependentDialects(
        -:   46:    DialectRegistry &registry) const {
    #####:   47:  registerNVVMDialectTranslation(registry);
call    0 never executed
    #####:   48:  gpu::SerializeToBlobPass::getDependentDialects(registry);
call    0 never executed
    #####:   49:}
        -:   50:
        -:   51:std::unique_ptr<std::vector<char>>
function _ZN12_GLOBAL__N_124TestSerializeToCubinPass12serializeISAERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   52:TestSerializeToCubinPass::serializeISA(const std::string &) {
    #####:   53:  std::string data = "CUBIN";
call    0 never executed
    #####:   54:  return std::make_unique<std::vector<char>>(data.begin(), data.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   55:}
        -:   56:
        -:   57:namespace mlir {
        -:   58:namespace test {
        -:   59:// Register test pass to serialize GPU module to a CUBIN binary annotation.
function _ZN4mlir4test35registerTestGpuSerializeToCubinPassEv called 325560 returned 100% blocks executed 100%
   325560:   60:void registerTestGpuSerializeToCubinPass() {
function _ZZN4mlir4test35registerTestGpuSerializeToCubinPassEvENKUlvE_clEv.isra.0 called 325560 returned 100% blocks executed 100%
   651120:   61:  PassRegistration<TestSerializeToCubinPass>([] {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   62:    // Initialize LLVM NVPTX backend.
   325560:   63:    LLVMInitializeNVPTXTarget();
call    0 returned 100%
   325560:   64:    LLVMInitializeNVPTXTargetInfo();
call    0 returned 100%
   325560:   65:    LLVMInitializeNVPTXTargetMC();
call    0 returned 100%
   325560:   66:    LLVMInitializeNVPTXAsmPrinter();
call    0 returned 100%
        -:   67:
   325560:   68:    return std::make_unique<TestSerializeToCubinPass>();
call    0 returned 100%
        -:   69:  });
   325560:   70:}
        -:   71:} // namespace test
        -:   72:} // namespace mlir
        -:   73:#endif // MLIR_CUDA_CONVERSIONS_ENABLED
