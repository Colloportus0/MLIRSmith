        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Linalg/Transforms/Bufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Bufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Bufferize.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- Bufferize.cpp - Bufferization of linalg ops ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Linalg/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   12:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/BufferizableOpInterfaceImpl.h"
        -:   17:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   18:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   19:#include "mlir/IR/BuiltinDialect.h"
        -:   20:#include "mlir/IR/Operation.h"
        -:   21:#include "mlir/Pass/Pass.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:#define GEN_PASS_DEF_LINALGBUFFERIZE
        -:   25:#include "mlir/Dialect/Linalg/Passes.h.inc"
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:using namespace bufferization;
        -:   30:
        -:   31:namespace {
        -:   32:/// Converts Linalg operations that work on tensor-type operands or results to
        -:   33:/// work on buffers.
   388979:   34:struct LinalgBufferizePass
call    0 returned 100%
call    1 returned 100%
        -:   35:    : public impl::LinalgBufferizeBase<LinalgBufferizePass> {
function _ZN12_GLOBAL__N_119LinalgBufferizePass14runOnOperationEv called 982 returned 98% blocks executed 88%
      982:   36:  void runOnOperation() override {
     1942:   37:    BufferizationOptions options = getPartialBufferizationOptions();
call    0 returned 100%
call    1 returned 100%
      983:   38:    options.opFilter.allowDialect<linalg::LinalgDialect>();
call    0 returned 100%
        -:   39:
      981:   40:    if (failed(bufferizeOp(getOperation(), options)))
call    0 returned 100%
call    1 returned 98%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   41:      signalPassFailure();
call    0 never executed
      959:   42:  }
        -:   43:
function _ZNK12_GLOBAL__N_119LinalgBufferizePass20getDependentDialectsERN4mlir15DialectRegistryE called 1080 returned 100% blocks executed 100%
     1080:   44:  void getDependentDialects(DialectRegistry &registry) const override {
     1080:   45:    registry.insert<bufferization::BufferizationDialect, memref::MemRefDialect,
call    0 returned 100%
     1080:   46:                    tensor::TensorDialect, linalg::LinalgDialect>();
     1080:   47:    linalg::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
     1080:   48:  }
        -:   49:};
        -:   50:} // namespace
        -:   51:
function _ZN4mlir25createLinalgBufferizePassEv called 326627 returned 100% blocks executed 100%
   326627:   52:std::unique_ptr<OperationPass<func::FuncOp>> mlir::createLinalgBufferizePass() {
   326627:   53:  return std::make_unique<LinalgBufferizePass>();
call    0 returned 100%
        -:   54:}
