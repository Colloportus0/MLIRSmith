        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/ExecutionEngine/OptUtils.cpp
        -:    0:Graph:../tools/mlir/lib/ExecutionEngine/CMakeFiles/obj.MLIRExecutionEngineUtils.dir/OptUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/ExecutionEngine/CMakeFiles/obj.MLIRExecutionEngineUtils.dir/OptUtils.cpp.gcda
        -:    0:Runs:325567
        -:    1://===- OptUtils.cpp - MLIR Execution Engine optimization pass utilities ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the utility functions to trigger LLVM optimizations from
        -:   10:// MLIR Execution Engine.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/ExecutionEngine/OptUtils.h"
        -:   15:
        -:   16:#include "llvm/Analysis/TargetTransformInfo.h"
        -:   17:#include "llvm/IR/Module.h"
        -:   18:#include "llvm/Passes/OptimizationLevel.h"
        -:   19:#include "llvm/Passes/PassBuilder.h"
        -:   20:#include "llvm/Support/Error.h"
        -:   21:#include "llvm/Support/FormatVariadic.h"
        -:   22:#include "llvm/Target/TargetMachine.h"
        -:   23:
        -:   24:using namespace llvm;
        -:   25:
function _ZL10mapToLeveljj called 0 returned 0% blocks executed 0%
    #####:   26:static Optional<OptimizationLevel> mapToLevel(unsigned optLevel,
        -:   27:                                              unsigned sizeLevel) {
    #####:   28:  switch (optLevel) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   29:  case 0:
    #####:   30:    return OptimizationLevel::O0;
        -:   31:
    #####:   32:  case 1:
    #####:   33:    return OptimizationLevel::O1;
        -:   34:
    #####:   35:  case 2:
    #####:   36:    switch (sizeLevel) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   37:    case 0:
    #####:   38:      return OptimizationLevel::O2;
        -:   39:
    #####:   40:    case 1:
    #####:   41:      return OptimizationLevel::Os;
        -:   42:
    #####:   43:    case 2:
    #####:   44:      return OptimizationLevel::Oz;
        -:   45:    }
        -:   46:    break;
    #####:   47:  case 3:
    #####:   48:    return OptimizationLevel::O3;
        -:   49:  }
    #####:   50:  return None;
        -:   51:}
        -:   52:// Create and return a lambda that uses LLVM pass manager builder to set up
        -:   53:// optimizations based on the given level.
        -:   54:std::function<Error(Module *)>
function _ZN4mlir25makeOptimizingTransformerEjjPN4llvm13TargetMachineE called 0 returned 0% blocks executed 0%
    #####:   55:mlir::makeOptimizingTransformer(unsigned optLevel, unsigned sizeLevel,
        -:   56:                                TargetMachine *targetMachine) {
function _ZZN4mlir25makeOptimizingTransformerEjjPN4llvm13TargetMachineEENKUlPNS0_6ModuleEE_clES4_ called 0 returned 0% blocks executed 0%
    #####:   57:  return [optLevel, sizeLevel, targetMachine](Module *m) -> Error {
    #####:   58:    Optional<OptimizationLevel> ol = mapToLevel(optLevel, sizeLevel);
call    0 never executed
    #####:   59:    if (!ol) {
branch  0 never executed
branch  1 never executed
    #####:   60:      return make_error<StringError>(
    #####:   61:          formatv("invalid optimization/size level {0}/{1}", optLevel,
    #####:   62:                  sizeLevel)
call    0 never executed
    #####:   63:              .str(),
call    0 never executed
call    1 never executed
    #####:   64:          inconvertibleErrorCode());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   65:    }
    #####:   66:    LoopAnalysisManager lam;
call    0 never executed
call    1 never executed
    #####:   67:    FunctionAnalysisManager fam;
call    0 never executed
call    1 never executed
    #####:   68:    CGSCCAnalysisManager cgam;
call    0 never executed
call    1 never executed
    #####:   69:    ModuleAnalysisManager mam;
call    0 never executed
call    1 never executed
        -:   70:
    #####:   71:    PassBuilder pb(targetMachine);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   72:
    #####:   73:    pb.registerModuleAnalyses(mam);
call    0 never executed
    #####:   74:    pb.registerCGSCCAnalyses(cgam);
call    0 never executed
    #####:   75:    pb.registerFunctionAnalyses(fam);
call    0 never executed
    #####:   76:    pb.registerLoopAnalyses(lam);
call    0 never executed
    #####:   77:    pb.crossRegisterProxies(lam, fam, cgam, mam);
call    0 never executed
        -:   78:
    #####:   79:    ModulePassManager mpm;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   80:    if (*ol == OptimizationLevel::O0)
branch  0 never executed
branch  1 never executed
    #####:   81:      mpm.addPass(pb.buildO0DefaultPipeline(*ol));
call    0 never executed
call    1 never executed
        -:   82:    else
    #####:   83:      mpm.addPass(pb.buildPerModuleDefaultPipeline(*ol));
call    0 never executed
call    1 never executed
        -:   84:
    #####:   85:    mpm.run(*m, mam);
call    0 never executed
call    1 never executed
    #####:   86:    return Error::success();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   87:  };
        -:   88:}
