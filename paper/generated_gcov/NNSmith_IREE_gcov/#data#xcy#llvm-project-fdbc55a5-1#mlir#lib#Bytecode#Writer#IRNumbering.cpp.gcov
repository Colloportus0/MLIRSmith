        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Bytecode/Writer/IRNumbering.cpp
        -:    0:Graph:../tools/mlir/lib/Bytecode/Writer/CMakeFiles/obj.MLIRBytecodeWriter.dir/IRNumbering.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Bytecode/Writer/CMakeFiles/obj.MLIRBytecodeWriter.dir/IRNumbering.cpp.gcda
        -:    0:Runs:325597
        -:    1://===- IRNumbering.cpp - MLIR Bytecode IR numbering -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "IRNumbering.h"
        -:   10:#include "mlir/Bytecode/BytecodeImplementation.h"
        -:   11:#include "mlir/Bytecode/BytecodeWriter.h"
        -:   12:#include "mlir/IR/AsmState.h"
        -:   13:#include "mlir/IR/BuiltinTypes.h"
        -:   14:#include "mlir/IR/OpDefinition.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::bytecode::detail;
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// NumberingDialectWriter
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
      12*:   23:struct IRNumberingState::NumberingDialectWriter : public DialectBytecodeWriter {
    47977:   24:  NumberingDialectWriter(IRNumberingState &state) : state(state) {}
        -:   25:
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter14writeAttributeENS_9AttributeE called 44149 returned 100% blocks executed 100%
    44149:   26:  void writeAttribute(Attribute attr) override { state.number(attr); }
call    0 returned 100%
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter9writeTypeENS_4TypeE called 12867 returned 100% blocks executed 100%
    12867:   27:  void writeType(Type type) override { state.number(type); }
call    0 returned 100%
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter19writeResourceHandleERKNS_24AsmDialectResourceHandleE called 0 returned 0% blocks executed 0%
    #####:   28:  void writeResourceHandle(const AsmDialectResourceHandle &resource) override {
    #####:   29:    state.number(resource.getDialect(), resource);
call    0 never executed
    #####:   30:  }
        -:   31:
        -:   32:  /// Stubbed out methods that are not used for numbering.
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter11writeVarIntEm called 90945 returned 100% blocks executed 100%
    90945:   33:  void writeVarInt(uint64_t) override {}
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter17writeSignedVarIntEl called 14803 returned 100% blocks executed 100%
    14803:   34:  void writeSignedVarInt(int64_t value) override {}
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter24writeAPIntWithKnownWidthERKN4llvm5APIntE called 1872 returned 100% blocks executed 100%
     1872:   35:  void writeAPIntWithKnownWidth(const APInt &value) override {}
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter30writeAPFloatWithKnownSemanticsERKN4llvm7APFloatE called 0 returned 0% blocks executed 0%
    #####:   36:  void writeAPFloatWithKnownSemantics(const APFloat &value) override {}
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter16writeOwnedStringEN4llvm9StringRefE called 11652 returned 100% blocks executed 100%
    11652:   37:  void writeOwnedString(StringRef) override {
        -:   38:    // TODO: It might be nice to prenumber strings and sort by the number of
        -:   39:    // references. This could potentially be useful for optimizing things like
        -:   40:    // file locations.
    11652:   41:  }
function _ZN4mlir8bytecode6detail16IRNumberingState22NumberingDialectWriter14writeOwnedBlobEN4llvm8ArrayRefIcEE called 2335 returned 100% blocks executed 100%
     2335:   42:  void writeOwnedBlob(ArrayRef<char> blob) override {}
        -:   43:
        -:   44:  /// The parent numbering state that is populated by this writer.
        -:   45:  IRNumberingState &state;
        -:   46:};
        -:   47:
        -:   48://===----------------------------------------------------------------------===//
        -:   49:// IR Numbering
        -:   50://===----------------------------------------------------------------------===//
        -:   51:
        -:   52:/// Group and sort the elements of the given range by their parent dialect. This
        -:   53:/// grouping is applied to sub-sections of the ranged defined by how many bytes
        -:   54:/// it takes to encode a varint index to that sub-section.
        -:   55:template <typename T>
     2412:   56:static void groupByDialectPerByte(T range) {
     2412:   57:  if (range.empty())
    #####:   58:    return;
        -:   59:
        -:   60:  // A functor used to sort by a given dialect, with a desired dialect to be
        -:   61:  // ordered first (to better enable sharing of dialects across byte groups).
    #####:   62:  auto sortByDialect = [](unsigned dialectToOrderFirst, const auto &lhs,
        -:   63:                          const auto &rhs) {
    #####:   64:    if (lhs->dialect->number == dialectToOrderFirst)
    #####:   65:      return rhs->dialect->number != dialectToOrderFirst;
    #####:   66:    return lhs->dialect->number < rhs->dialect->number;
        -:   67:  };
        -:   68:
     2412:   69:  unsigned dialectToOrderFirst = 0;
     2412:   70:  size_t elementsInByteGroup = 0;
     2412:   71:  auto iterRange = range;
    2417*:   72:  for (unsigned i = 1; i < 9; ++i) {
        -:   73:    // Update the number of elements in the current byte grouping. Reminder
        -:   74:    // that varint encodes 7-bits per byte, so that's how we compute the
        -:   75:    // number of elements in each byte grouping.
     2417:   76:    elementsInByteGroup = (1ULL << (7ULL * i)) - elementsInByteGroup;
        -:   77:
        -:   78:    // Slice out the sub-set of elements that are in the current byte grouping
        -:   79:    // to be sorted.
     2417:   80:    auto byteSubRange = iterRange.take_front(elementsInByteGroup);
     2417:   81:    iterRange = iterRange.drop_front(byteSubRange.size());
        -:   82:
        -:   83:    // Sort the sub range for this byte.
    2417*:   84:    llvm::stable_sort(byteSubRange, [&](const auto &lhs, const auto &rhs) {
    #####:   85:      return sortByDialect(dialectToOrderFirst, lhs, rhs);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -:   86:    });
        -:   87:
        -:   88:    // Update the dialect to order first to be the dialect at the end of the
        -:   89:    // current grouping. This seeks to allow larger dialect groupings across
        -:   90:    // byte boundaries.
     2417:   91:    dialectToOrderFirst = byteSubRange.back()->dialect->number;
        -:   92:
        -:   93:    // If the data range is now empty, we are done.
     2417:   94:    if (iterRange.empty())
        -:   95:      break;
        -:   96:  }
        -:   97:
        -:   98:  // Assign the entry numbers based on the sort order.
    57377:   99:  for (auto &entry : llvm::enumerate(range))
    54965:  100:    entry.value()->number = entry.index();
        -:  101:}
------------------
_Z21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_:
function _Z21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_ called 804 returned 100% blocks executed 83%
      804:   56:static void groupByDialectPerByte(T range) {
      804:   57:  if (range.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:    return;
        -:   59:
        -:   60:  // A functor used to sort by a given dialect, with a desired dialect to be
        -:   61:  // ordered first (to better enable sharing of dialects across byte groups).
        -:   62:  auto sortByDialect = [](unsigned dialectToOrderFirst, const auto &lhs,
        -:   63:                          const auto &rhs) {
        -:   64:    if (lhs->dialect->number == dialectToOrderFirst)
        -:   65:      return rhs->dialect->number != dialectToOrderFirst;
        -:   66:    return lhs->dialect->number < rhs->dialect->number;
        -:   67:  };
        -:   68:
      804:   69:  unsigned dialectToOrderFirst = 0;
      804:   70:  size_t elementsInByteGroup = 0;
      804:   71:  auto iterRange = range;
     804*:   72:  for (unsigned i = 1; i < 9; ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   73:    // Update the number of elements in the current byte grouping. Reminder
        -:   74:    // that varint encodes 7-bits per byte, so that's how we compute the
        -:   75:    // number of elements in each byte grouping.
      804:   76:    elementsInByteGroup = (1ULL << (7ULL * i)) - elementsInByteGroup;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:
        -:   78:    // Slice out the sub-set of elements that are in the current byte grouping
        -:   79:    // to be sorted.
      804:   80:    auto byteSubRange = iterRange.take_front(elementsInByteGroup);
      804:   81:    iterRange = iterRange.drop_front(byteSubRange.size());
call    0 returned 100%
        -:   82:
        -:   83:    // Sort the sub range for this byte.
      804:   84:    llvm::stable_sort(byteSubRange, [&](const auto &lhs, const auto &rhs) {
call    0 returned 100%
        -:   85:      return sortByDialect(dialectToOrderFirst, lhs, rhs);
        -:   86:    });
        -:   87:
        -:   88:    // Update the dialect to order first to be the dialect at the end of the
        -:   89:    // current grouping. This seeks to allow larger dialect groupings across
        -:   90:    // byte boundaries.
      804:   91:    dialectToOrderFirst = byteSubRange.back()->dialect->number;
call    0 returned 100%
        -:   92:
        -:   93:    // If the data range is now empty, we are done.
      804:   94:    if (iterRange.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   95:      break;
        -:   96:  }
        -:   97:
        -:   98:  // Assign the entry numbers based on the sort order.
     8118:   99:  for (auto &entry : llvm::enumerate(range))
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     7314:  100:    entry.value()->number = entry.index();
call    0 returned 100%
        -:  101:}
------------------
_Z21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_:
function _Z21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_ called 804 returned 100% blocks executed 83%
      804:   56:static void groupByDialectPerByte(T range) {
      804:   57:  if (range.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:    return;
        -:   59:
        -:   60:  // A functor used to sort by a given dialect, with a desired dialect to be
        -:   61:  // ordered first (to better enable sharing of dialects across byte groups).
        -:   62:  auto sortByDialect = [](unsigned dialectToOrderFirst, const auto &lhs,
        -:   63:                          const auto &rhs) {
        -:   64:    if (lhs->dialect->number == dialectToOrderFirst)
        -:   65:      return rhs->dialect->number != dialectToOrderFirst;
        -:   66:    return lhs->dialect->number < rhs->dialect->number;
        -:   67:  };
        -:   68:
      804:   69:  unsigned dialectToOrderFirst = 0;
      804:   70:  size_t elementsInByteGroup = 0;
      804:   71:  auto iterRange = range;
     804*:   72:  for (unsigned i = 1; i < 9; ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   73:    // Update the number of elements in the current byte grouping. Reminder
        -:   74:    // that varint encodes 7-bits per byte, so that's how we compute the
        -:   75:    // number of elements in each byte grouping.
      804:   76:    elementsInByteGroup = (1ULL << (7ULL * i)) - elementsInByteGroup;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:
        -:   78:    // Slice out the sub-set of elements that are in the current byte grouping
        -:   79:    // to be sorted.
      804:   80:    auto byteSubRange = iterRange.take_front(elementsInByteGroup);
      804:   81:    iterRange = iterRange.drop_front(byteSubRange.size());
call    0 returned 100%
        -:   82:
        -:   83:    // Sort the sub range for this byte.
      804:   84:    llvm::stable_sort(byteSubRange, [&](const auto &lhs, const auto &rhs) {
call    0 returned 100%
        -:   85:      return sortByDialect(dialectToOrderFirst, lhs, rhs);
        -:   86:    });
        -:   87:
        -:   88:    // Update the dialect to order first to be the dialect at the end of the
        -:   89:    // current grouping. This seeks to allow larger dialect groupings across
        -:   90:    // byte boundaries.
      804:   91:    dialectToOrderFirst = byteSubRange.back()->dialect->number;
call    0 returned 100%
        -:   92:
        -:   93:    // If the data range is now empty, we are done.
      804:   94:    if (iterRange.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   95:      break;
        -:   96:  }
        -:   97:
        -:   98:  // Assign the entry numbers based on the sort order.
     7750:   99:  for (auto &entry : llvm::enumerate(range))
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     6946:  100:    entry.value()->number = entry.index();
call    0 returned 100%
        -:  101:}
------------------
_Z21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_:
function _Z21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_ called 804 returned 100% blocks executed 94%
      804:   56:static void groupByDialectPerByte(T range) {
      804:   57:  if (range.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:    return;
        -:   59:
        -:   60:  // A functor used to sort by a given dialect, with a desired dialect to be
        -:   61:  // ordered first (to better enable sharing of dialects across byte groups).
        -:   62:  auto sortByDialect = [](unsigned dialectToOrderFirst, const auto &lhs,
        -:   63:                          const auto &rhs) {
        -:   64:    if (lhs->dialect->number == dialectToOrderFirst)
        -:   65:      return rhs->dialect->number != dialectToOrderFirst;
        -:   66:    return lhs->dialect->number < rhs->dialect->number;
        -:   67:  };
        -:   68:
      804:   69:  unsigned dialectToOrderFirst = 0;
      804:   70:  size_t elementsInByteGroup = 0;
      804:   71:  auto iterRange = range;
      809:   72:  for (unsigned i = 1; i < 9; ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   73:    // Update the number of elements in the current byte grouping. Reminder
        -:   74:    // that varint encodes 7-bits per byte, so that's how we compute the
        -:   75:    // number of elements in each byte grouping.
      809:   76:    elementsInByteGroup = (1ULL << (7ULL * i)) - elementsInByteGroup;
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   77:
        -:   78:    // Slice out the sub-set of elements that are in the current byte grouping
        -:   79:    // to be sorted.
      809:   80:    auto byteSubRange = iterRange.take_front(elementsInByteGroup);
      809:   81:    iterRange = iterRange.drop_front(byteSubRange.size());
call    0 returned 100%
        -:   82:
        -:   83:    // Sort the sub range for this byte.
      809:   84:    llvm::stable_sort(byteSubRange, [&](const auto &lhs, const auto &rhs) {
call    0 returned 100%
        -:   85:      return sortByDialect(dialectToOrderFirst, lhs, rhs);
        -:   86:    });
        -:   87:
        -:   88:    // Update the dialect to order first to be the dialect at the end of the
        -:   89:    // current grouping. This seeks to allow larger dialect groupings across
        -:   90:    // byte boundaries.
      809:   91:    dialectToOrderFirst = byteSubRange.back()->dialect->number;
call    0 returned 100%
        -:   92:
        -:   93:    // If the data range is now empty, we are done.
      809:   94:    if (iterRange.empty())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   95:      break;
        -:   96:  }
        -:   97:
        -:   98:  // Assign the entry numbers based on the sort order.
    41509:   99:  for (auto &entry : llvm::enumerate(range))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
    40705:  100:    entry.value()->number = entry.index();
call    0 returned 100%
        -:  101:}
------------------
        -:  102:
function _ZN4mlir8bytecode6detail16IRNumberingStateC2EPNS_9OperationE called 804 returned 100% blocks executed 100%
      804:  103:IRNumberingState::IRNumberingState(Operation *op) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
        -:  104:  // Number the root operation.
      804:  105:  number(*op);
call    0 returned 100%
        -:  106:
        -:  107:  // Push all of the regions of the root operation onto the worklist.
      804:  108:  SmallVector<std::pair<Region *, unsigned>, 8> numberContext;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2412:  109:  for (Region &region : op->getRegions())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
      804:  110:    numberContext.emplace_back(&region, nextValueID);
call    0 returned 100%
        -:  111:
        -:  112:  // Iteratively process each of the nested regions.
     2654:  113:  while (!numberContext.empty()) {
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
     1850:  114:    Region *region;
     1850:  115:    std::tie(region, nextValueID) = numberContext.pop_back_val();
call    0 returned 100%
call    1 returned 100%
     1850:  116:    number(*region);
call    0 returned 100%
        -:  117:
        -:  118:    // Traverse into nested regions.
    11734:  119:    for (Operation &op : region->getOps()) {
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
call    3 returned 100%
        -:  120:      // Isolated regions don't share value numbers with their parent, so we can
        -:  121:      // start numbering these regions at zero.
     9884:  122:      unsigned opFirstValueID =
call    0 returned 100%
     9884:  123:          op.hasTrait<OpTrait::IsIsolatedFromAbove>() ? 0 : nextValueID;
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
    14376:  124:      for (Region &region : op.getRegions())
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
     1046:  125:        numberContext.emplace_back(&region, opFirstValueID);
call    0 returned 100%
        -:  126:    }
        -:  127:  }
        -:  128:
        -:  129:  // Number each of the dialects. For now this is just in the order they were
        -:  130:  // found, given that the number of dialects on average is small enough to fit
        -:  131:  // within a singly byte (128). If we ever have real world use cases that have
        -:  132:  // a huge number of dialects, this could be made more intelligent.
     3273:  133:  for (auto &it : llvm::enumerate(dialects))
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
     2469:  134:    it.value().second->number = it.index();
call    0 returned 100%
        -:  135:
        -:  136:  // Number each of the recorded components within each dialect.
        -:  137:
        -:  138:  // First sort by ref count so that the most referenced elements are first. We
        -:  139:  // try to bias more heavily used elements to the front. This allows for more
        -:  140:  // frequently referenced things to be encoded using smaller varints.
     804*:  141:  auto sortByRefCountFn = [](const auto &lhs, const auto &rhs) {
    #####:  142:    return lhs->refCount > rhs->refCount;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  143:  };
      804:  144:  llvm::stable_sort(orderedAttrs, sortByRefCountFn);
call    0 returned 100%
      804:  145:  llvm::stable_sort(orderedOpNames, sortByRefCountFn);
call    0 returned 100%
      804:  146:  llvm::stable_sort(orderedTypes, sortByRefCountFn);
call    0 returned 100%
        -:  147:
        -:  148:  // After that, we apply a secondary ordering based on the parent dialect. This
        -:  149:  // ordering is applied to sub-sections of the element list defined by how many
        -:  150:  // bytes it takes to encode a varint index to that sub-section. This allows
        -:  151:  // for more efficiently encoding components of the same dialect (e.g. we only
        -:  152:  // have to encode the dialect reference once).
      804:  153:  groupByDialectPerByte(llvm::makeMutableArrayRef(orderedAttrs));
call    0 returned 100%
      804:  154:  groupByDialectPerByte(llvm::makeMutableArrayRef(orderedOpNames));
call    0 returned 100%
      804:  155:  groupByDialectPerByte(llvm::makeMutableArrayRef(orderedTypes));
call    0 returned 100%
        -:  156:
        -:  157:  // Finalize the numbering of the dialect resources.
      804:  158:  finalizeDialectResourceNumberings(op);
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      804:  159:}
        -:  160:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberENS_9AttributeE called 62809 returned 100% blocks executed 81%
    62809:  161:void IRNumberingState::number(Attribute attr) {
    62809:  162:  auto it = attrs.insert({attr, nullptr});
call    0 returned 100%
    62809:  163:  if (!it.second) {
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
    22104:  164:    ++it.first->second->refCount;
call    0 returned 100%
    62794:  165:    return;
        -:  166:  }
    40705:  167:  auto *numbering = new (attrAllocator.Allocate()) AttributeNumbering(attr);
call    0 returned 100%
call    1 returned 100%
    40705:  168:  it.first->second = numbering;
call    0 returned 100%
    40705:  169:  orderedAttrs.push_back(numbering);
call    0 returned 100%
        -:  170:
        -:  171:  // Check for OpaqueAttr, which is a dialect-specific attribute that didn't
        -:  172:  // have a registered dialect when it got created. We don't want to encode this
        -:  173:  // as the builtin OpaqueAttr, we want to encode it as if the dialect was
        -:  174:  // actually loaded.
    40705:  175:  if (OpaqueAttr opaqueAttr = attr.dyn_cast<OpaqueAttr>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  176:    numbering->dialect = &numberDialect(opaqueAttr.getDialectNamespace());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  177:    return;
        -:  178:  }
    40705:  179:  numbering->dialect = &numberDialect(&attr.getDialect());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  180:
        -:  181:  // If this attribute will be emitted using the bytecode format, perform a
        -:  182:  // dummy writing to number any nested components.
    40705:  183:  if (const auto *interface = numbering->dialect->interface) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:  184:    // TODO: We don't allow custom encodings for mutable attributes right now.
    40702:  185:    if (!attr.hasTrait<AttributeTrait::IsMutable>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    40714:  186:      NumberingDialectWriter writer(*this);
call    0 returned 100%
    40702:  187:      if (succeeded(interface->writeAttribute(attr, writer)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
    40690:  188:        return;
        -:  189:    }
        -:  190:  }
        -:  191:  // If this attribute will be emitted using the fallback, number the nested
        -:  192:  // dialect resources. We don't number everything (e.g. no nested
        -:  193:  // attributes/types), because we don't want to encode things we won't decode
        -:  194:  // (the textual format can't really share much).
       30:  195:  AsmState tempState(attr.getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       30:  196:  llvm::raw_null_ostream dummyOS;
call    0 returned 100%
call    1 returned 100%
       15:  197:  attr.print(dummyOS, tempState);
call    0 returned 100%
        -:  198:
        -:  199:  // Number the used dialect resources.
      30*:  200:  for (const auto &it : tempState.getDialectResources())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
    #####:  201:    number(it.getFirst(), it.getSecond().getArrayRef());
call    0 never executed
        -:  202:}
        -:  203:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberERNS_5BlockE called 1630 returned 100% blocks executed 100%
     1630:  204:void IRNumberingState::number(Block &block) {
        -:  205:  // Number the arguments of the block.
     3255:  206:  for (BlockArgument arg : block.getArguments()) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1625:  207:    valueIDs.try_emplace(arg, nextValueID++);
call    0 returned 100%
     1625:  208:    number(arg.getLoc());
call    0 returned 100%
     1625:  209:    number(arg.getType());
call    0 returned 100%
        -:  210:  }
        -:  211:
        -:  212:  // Number the operations in this block.
     1630:  213:  unsigned &numOps = blockOperationCounts[&block];
call    0 returned 100%
    11514:  214:  for (Operation &op : block) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
     9884:  215:    number(op);
call    0 returned 100%
     9884:  216:    ++numOps;
        -:  217:  }
     1630:  218:}
        -:  219:
function _ZN4mlir8bytecode6detail16IRNumberingState13numberDialectEPNS_7DialectE called 54965 returned 100% blocks executed 100%
    54965:  220:auto IRNumberingState::numberDialect(Dialect *dialect) -> DialectNumbering & {
    54965:  221:  DialectNumbering *&numbering = registeredDialects[dialect];
call    0 returned 100%
    54965:  222:  if (!numbering) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     2469:  223:    numbering = &numberDialect(dialect->getNamespace());
call    0 returned 100%
     2469:  224:    numbering->interface = dyn_cast<BytecodeDialectInterface>(dialect);
call    0 returned 100%
     2469:  225:    numbering->asmInterface = dyn_cast<OpAsmDialectInterface>(dialect);
call    0 returned 100%
        -:  226:  }
    54965:  227:  return *numbering;
        -:  228:}
        -:  229:
function _ZN4mlir8bytecode6detail16IRNumberingState13numberDialectEN4llvm9StringRefE called 2469 returned 100% blocks executed 100%
     2469:  230:auto IRNumberingState::numberDialect(StringRef dialect) -> DialectNumbering & {
     2469:  231:  DialectNumbering *&numbering = dialects[dialect];
call    0 returned 100%
     2469:  232:  if (!numbering) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2469:  233:    numbering = new (dialectAllocator.Allocate())
     2469:  234:        DialectNumbering(dialect, dialects.size() - 1);
call    0 returned 100%
call    1 returned 100%
        -:  235:  }
     2469:  236:  return *numbering;
        -:  237:}
        -:  238:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberERNS_6RegionE called 1850 returned 100% blocks executed 100%
     1850:  239:void IRNumberingState::number(Region &region) {
     1850:  240:  if (region.empty())
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
      220:  241:    return;
     1630:  242:  size_t firstValueID = nextValueID;
        -:  243:
        -:  244:  // Number the blocks within this region.
     1630:  245:  size_t blockCount = 0;
     3260:  246:  for (auto &it : llvm::enumerate(region)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1630:  247:    blockIDs.try_emplace(&it.value(), it.index());
call    0 returned 100%
call    1 returned 100%
     1630:  248:    number(it.value());
call    0 returned 100%
call    1 returned 100%
     1630:  249:    ++blockCount;
call    0 returned 100%
        -:  250:  }
        -:  251:
        -:  252:  // Remember the number of blocks and values in this region.
     3260:  253:  regionBlockValueCounts.try_emplace(&region, blockCount,
     1630:  254:                                     nextValueID - firstValueID);
call    0 returned 100%
        -:  255:}
        -:  256:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberERNS_9OperationE called 10688 returned 100% blocks executed 100%
    10688:  257:void IRNumberingState::number(Operation &op) {
        -:  258:  // Number the components of an operation that won't be numbered elsewhere
        -:  259:  // (e.g. we don't number operands, regions, or successors here).
    10688:  260:  number(op.getName());
call    0 returned 100%
    26734:  261:  for (OpResult result : op.getResults()) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
call    4 returned 100%
     8023:  262:    valueIDs.try_emplace(result, nextValueID++);
call    0 returned 100%
     8023:  263:    number(result.getType());
call    0 returned 100%
        -:  264:  }
        -:  265:
        -:  266:  // Only number the operation's dictionary if it isn't empty.
    10688:  267:  DictionaryAttr dictAttr = op.getAttrDictionary();
call    0 returned 100%
    10688:  268:  if (!dictAttr.empty())
call    0 returned 100%
branch  1 taken 59%
branch  2 taken 41%
     6347:  269:    number(dictAttr);
call    0 returned 100%
        -:  270:
    10688:  271:  number(op.getLoc());
call    0 returned 100%
    10688:  272:}
        -:  273:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberENS_13OperationNameE called 10688 returned 100% blocks executed 75%
    10688:  274:void IRNumberingState::number(OperationName opName) {
    10688:  275:  OpNameNumbering *&numbering = opNames[opName];
call    0 returned 100%
    10688:  276:  if (numbering) {
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
     3742:  277:    ++numbering->refCount;
     3742:  278:    return;
        -:  279:  }
     6946:  280:  DialectNumbering *dialectNumber = nullptr;
     6946:  281:  if (Dialect *dialect = opName.getDialect())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     6946:  282:    dialectNumber = &numberDialect(dialect);
call    0 returned 100%
        -:  283:  else
    #####:  284:    dialectNumber = &numberDialect(opName.getDialectNamespace());
call    0 never executed
call    1 never executed
        -:  285:
    13892:  286:  numbering =
     6946:  287:      new (opNameAllocator.Allocate()) OpNameNumbering(dialectNumber, opName);
call    0 returned 100%
call    1 returned 100%
     6946:  288:  orderedOpNames.push_back(numbering);
call    0 returned 100%
        -:  289:}
        -:  290:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberENS_4TypeE called 22515 returned 100% blocks executed 79%
    22515:  291:void IRNumberingState::number(Type type) {
    22515:  292:  auto it = types.insert({type, nullptr});
call    0 returned 100%
    22515:  293:  if (!it.second) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
    15201:  294:    ++it.first->second->refCount;
call    0 returned 100%
    22476:  295:    return;
        -:  296:  }
     7314:  297:  auto *numbering = new (typeAllocator.Allocate()) TypeNumbering(type);
call    0 returned 100%
call    1 returned 100%
     7314:  298:  it.first->second = numbering;
call    0 returned 100%
     7314:  299:  orderedTypes.push_back(numbering);
call    0 returned 100%
        -:  300:
        -:  301:  // Check for OpaqueType, which is a dialect-specific type that didn't have a
        -:  302:  // registered dialect when it got created. We don't want to encode this as the
        -:  303:  // builtin OpaqueType, we want to encode it as if the dialect was actually
        -:  304:  // loaded.
     7314:  305:  if (OpaqueType opaqueType = type.dyn_cast<OpaqueType>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  306:    numbering->dialect = &numberDialect(opaqueType.getDialectNamespace());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  307:    return;
        -:  308:  }
     7314:  309:  numbering->dialect = &numberDialect(&type.getDialect());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  310:
        -:  311:  // If this type will be emitted using the bytecode format, perform a dummy
        -:  312:  // writing to number any nested components.
     7314:  313:  if (const auto *interface = numbering->dialect->interface) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  314:    // TODO: We don't allow custom encodings for mutable types right now.
     7275:  315:    if (!type.hasTrait<TypeTrait::IsMutable>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    7275*:  316:      NumberingDialectWriter writer(*this);
call    0 returned 100%
     7275:  317:      if (succeeded(interface->writeType(type, writer)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     7275:  318:        return;
        -:  319:    }
        -:  320:  }
        -:  321:  // If this type will be emitted using the fallback, number the nested dialect
        -:  322:  // resources. We don't number everything (e.g. no nested attributes/types),
        -:  323:  // because we don't want to encode things we won't decode (the textual format
        -:  324:  // can't really share much).
       78:  325:  AsmState tempState(type.getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       78:  326:  llvm::raw_null_ostream dummyOS;
call    0 returned 100%
call    1 returned 100%
       39:  327:  type.print(dummyOS, tempState);
call    0 returned 100%
        -:  328:
        -:  329:  // Number the used dialect resources.
      78*:  330:  for (const auto &it : tempState.getDialectResources())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
    #####:  331:    number(it.getFirst(), it.getSecond().getArrayRef());
call    0 never executed
        -:  332:}
        -:  333:
function _ZN4mlir8bytecode6detail16IRNumberingState6numberEPNS_7DialectEN4llvm8ArrayRefINS_24AsmDialectResourceHandleEEE called 0 returned 0% blocks executed 0%
    #####:  334:void IRNumberingState::number(Dialect *dialect,
        -:  335:                              ArrayRef<AsmDialectResourceHandle> resources) {
    #####:  336:  DialectNumbering &dialectNumber = numberDialect(dialect);
call    0 never executed
    #####:  337:  assert(
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  338:      dialectNumber.asmInterface &&
        -:  339:      "expected dialect owning a resource to implement OpAsmDialectInterface");
        -:  340:
    #####:  341:  for (const auto &resource : resources) {
branch  0 never executed
branch  1 never executed
        -:  342:    // Check if this is a newly seen resource.
    #####:  343:    if (!dialectNumber.resources.insert(resource))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  344:      return;
        -:  345:
    #####:  346:    auto *numbering =
    #####:  347:        new (resourceAllocator.Allocate()) DialectResourceNumbering(
call    0 never executed
    #####:  348:            dialectNumber.asmInterface->getResourceKey(resource));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  349:    dialectNumber.resourceMap.insert({numbering->key, numbering});
call    0 never executed
    #####:  350:    dialectResources.try_emplace(resource, numbering);
call    0 never executed
        -:  351:  }
        -:  352:}
        -:  353:
        -:  354:namespace {
        -:  355:/// A dummy resource builder used to number dialect resources.
        -:  356:struct NumberingResourceBuilder : public AsmResourceBuilder {
      815:  357:  NumberingResourceBuilder(DialectNumbering *dialect, unsigned &nextResourceID)
      815:  358:      : dialect(dialect), nextResourceID(nextResourceID) {}
     815*:  359:  ~NumberingResourceBuilder() override = default;
call    0 returned 100%
------------------
_ZN12_GLOBAL__N_124NumberingResourceBuilderD0Ev:
function _ZN12_GLOBAL__N_124NumberingResourceBuilderD0Ev called 0 returned 0% blocks executed 0%
    #####:  359:  ~NumberingResourceBuilder() override = default;
call    0 never executed
call    1 never executed
------------------
_ZN12_GLOBAL__N_124NumberingResourceBuilderD2Ev:
function _ZN12_GLOBAL__N_124NumberingResourceBuilderD2Ev called 0 returned 0% blocks executed 0%
    #####:  359:  ~NumberingResourceBuilder() override = default;
call    0 never executed
------------------
        -:  360:
function _ZN12_GLOBAL__N_124NumberingResourceBuilder9buildBlobEN4llvm9StringRefENS1_8ArrayRefIcEEj called 0 returned 0% blocks executed 0%
    #####:  361:  void buildBlob(StringRef key, ArrayRef<char>, uint32_t) final {
    #####:  362:    numberEntry(key);
call    0 never executed
    #####:  363:  }
function _ZN12_GLOBAL__N_124NumberingResourceBuilder9buildBoolEN4llvm9StringRefEb called 0 returned 0% blocks executed 0%
    #####:  364:  void buildBool(StringRef key, bool) final { numberEntry(key); }
call    0 never executed
function _ZN12_GLOBAL__N_124NumberingResourceBuilder11buildStringEN4llvm9StringRefES2_ called 0 returned 0% blocks executed 0%
    #####:  365:  void buildString(StringRef key, StringRef) final {
        -:  366:    // TODO: We could pre-number the value string here as well.
    #####:  367:    numberEntry(key);
call    0 never executed
    #####:  368:  }
        -:  369:
        -:  370:  /// Number the dialect entry for the given key.
        -:  371:  void numberEntry(StringRef key) {
        -:  372:    // TODO: We could pre-number resource key strings here as well.
        -:  373:
        -:  374:    auto it = dialect->resourceMap.find(key);
        -:  375:    if (it != dialect->resourceMap.end()) {
        -:  376:      it->second->number = nextResourceID++;
        -:  377:      it->second->isDeclaration = false;
        -:  378:    }
        -:  379:  }
        -:  380:
        -:  381:  DialectNumbering *dialect;
        -:  382:  unsigned &nextResourceID;
        -:  383:};
        -:  384:} // namespace
        -:  385:
function _ZN4mlir8bytecode6detail16IRNumberingState33finalizeDialectResourceNumberingsEPNS_9OperationE called 804 returned 100% blocks executed 80%
      804:  386:void IRNumberingState::finalizeDialectResourceNumberings(Operation *rootOp) {
      804:  387:  unsigned nextResourceID = 0;
     3273:  388:  for (DialectNumbering &dialect : getDialects()) {
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
     2469:  389:    if (!dialect.asmInterface)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
     1654:  390:      continue;
     1630:  391:    NumberingResourceBuilder entryBuilder(&dialect, nextResourceID);
call    0 returned 100%
      815:  392:    dialect.asmInterface->buildResources(rootOp, dialect.resources,
      815:  393:                                         entryBuilder);
call    0 returned 100%
        -:  394:
        -:  395:    // Number any resources that weren't added by the dialect. This can happen
        -:  396:    // if there was no backing data to the resource, but we still want these
        -:  397:    // resource references to roundtrip, so we number them and indicate that the
        -:  398:    // data is missing.
     815*:  399:    for (const auto &it : dialect.resourceMap)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  400:      if (it.second->isDeclaration)
branch  0 never executed
branch  1 never executed
    #####:  401:        it.second->number = nextResourceID++;
        -:  402:  }
      804:  403:}
