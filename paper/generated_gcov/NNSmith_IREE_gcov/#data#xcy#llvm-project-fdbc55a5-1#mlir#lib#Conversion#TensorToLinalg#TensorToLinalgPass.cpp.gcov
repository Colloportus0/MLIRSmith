        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/TensorToLinalg/TensorToLinalgPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TensorToLinalg/CMakeFiles/obj.MLIRTensorToLinalg.dir/TensorToLinalgPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TensorToLinalg/CMakeFiles/obj.MLIRTensorToLinalg.dir/TensorToLinalgPass.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TensorToLinalgPass.cpp - Tensor to Linalg Passes -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert Tensor dialect to Linalg dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TensorToLinalg/TensorToLinalgPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/TensorToLinalg/TensorToLinalg.h"
        -:   16:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   17:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   18:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   19:
        -:   20:namespace mlir {
        -:   21:#define GEN_PASS_DEF_CONVERTTENSORTOLINALG
        -:   22:#include "mlir/Conversion/Passes.h.inc"
        -:   23:} // namespace mlir
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:namespace {
        -:   28:/// A pass converting MLIR Tensor operations into the Linalg dialect.
  326614*:   29:class ConvertTensorToLinalgPass
call    0 never executed
call    1 returned 100%
        -:   30:    : public impl::ConvertTensorToLinalgBase<ConvertTensorToLinalgPass> {
function _ZN12_GLOBAL__N_125ConvertTensorToLinalgPass14runOnOperationEv called 854 returned 100% blocks executed 75%
      854:   31:  void runOnOperation() override {
      854:   32:    auto &context = getContext();
call    0 returned 100%
      854:   33:    ConversionTarget target(context);
call    0 returned 100%
      854:   34:    target
        -:   35:        .addLegalDialect<mlir::arith::ArithDialect, mlir::linalg::LinalgDialect,
      854:   36:                         mlir::tensor::TensorDialect>();
call    0 returned 100%
      854:   37:    target.addIllegalOp<mlir::tensor::PadOp>();
call    0 returned 100%
        -:   38:
     1708:   39:    RewritePatternSet patterns(&context);
call    0 returned 100%
call    1 returned 100%
      854:   40:    populateTensorToLinalgPatterns(patterns);
call    0 returned 100%
        -:   41:
      854:   42:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      854:   43:                                      std::move(patterns))))
call    0 returned 100%
    #####:   44:      return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   45:  }
        -:   46:};
        -:   47:} // namespace
        -:   48:
        -:   49:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir31createConvertTensorToLinalgPassEv called 326614 returned 100% blocks executed 100%
   326614:   50:mlir::createConvertTensorToLinalgPass() {
   326614:   51:  return std::make_unique<ConvertTensorToLinalgPass>();
call    0 returned 100%
        -:   52:}
