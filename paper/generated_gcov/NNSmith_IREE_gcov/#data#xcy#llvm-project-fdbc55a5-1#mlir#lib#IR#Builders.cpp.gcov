        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/IR/Builders.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Builders.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Builders.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- Builders.cpp - Helpers for constructing MLIR Classes ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Builders.h"
        -:   10:#include "mlir/IR/AffineExpr.h"
        -:   11:#include "mlir/IR/AffineMap.h"
        -:   12:#include "mlir/IR/BlockAndValueMapping.h"
        -:   13:#include "mlir/IR/BuiltinTypes.h"
        -:   14:#include "mlir/IR/Dialect.h"
        -:   15:#include "mlir/IR/IntegerSet.h"
        -:   16:#include "mlir/IR/Matchers.h"
        -:   17:#include "mlir/IR/SymbolTable.h"
        -:   18:#include "llvm/Support/raw_ostream.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22://===----------------------------------------------------------------------===//
        -:   23:// Locations.
        -:   24://===----------------------------------------------------------------------===//
        -:   25:
function _ZN4mlir7Builder13getUnknownLocEv called 2246 returned 100% blocks executed 75%
     2246:   26:Location Builder::getUnknownLoc() { return UnknownLoc::get(context); }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   27:
function _ZN4mlir7Builder11getFusedLocEN4llvm8ArrayRefINS_8LocationEEENS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   28:Location Builder::getFusedLoc(ArrayRef<Location> locs, Attribute metadata) {
    #####:   29:  return FusedLoc::get(locs, metadata, context);
call    0 never executed
        -:   30:}
        -:   31:
        -:   32://===----------------------------------------------------------------------===//
        -:   33:// Types.
        -:   34://===----------------------------------------------------------------------===//
        -:   35:
function _ZN4mlir7Builder17getFloat8E5M2TypeEv called 0 returned 0% blocks executed 0%
    #####:   36:FloatType Builder::getFloat8E5M2Type() {
    #####:   37:  return FloatType::getFloat8E5M2(context);
call    0 never executed
        -:   38:}
        -:   39:
function _ZN4mlir7Builder11getBF16TypeEv called 0 returned 0% blocks executed 0%
    #####:   40:FloatType Builder::getBF16Type() { return FloatType::getBF16(context); }
call    0 never executed
        -:   41:
function _ZN4mlir7Builder10getF16TypeEv called 1588636 returned 100% blocks executed 100%
 1588636*:   42:FloatType Builder::getF16Type() { return FloatType::getF16(context); }
call    0 returned 100%
        -:   43:
function _ZN4mlir7Builder10getF32TypeEv called 8126687 returned 100% blocks executed 100%
  8126687:   44:FloatType Builder::getF32Type() { return FloatType::getF32(context); }
call    0 returned 100%
        -:   45:
function _ZN4mlir7Builder10getF64TypeEv called 0 returned 0% blocks executed 0%
    #####:   46:FloatType Builder::getF64Type() { return FloatType::getF64(context); }
call    0 never executed
        -:   47:
function _ZN4mlir7Builder10getF80TypeEv called 0 returned 0% blocks executed 0%
    #####:   48:FloatType Builder::getF80Type() { return FloatType::getF80(context); }
call    0 never executed
        -:   49:
function _ZN4mlir7Builder11getF128TypeEv called 0 returned 0% blocks executed 0%
    #####:   50:FloatType Builder::getF128Type() { return FloatType::getF128(context); }
call    0 never executed
        -:   51:
function _ZN4mlir7Builder12getIndexTypeEv called 3893 returned 100% blocks executed 100%
    3893*:   52:IndexType Builder::getIndexType() { return IndexType::get(context); }
call    0 never executed
call    1 returned 100%
        -:   53:
function _ZN4mlir7Builder9getI1TypeEv called 0 returned 0% blocks executed 0%
    #####:   54:IntegerType Builder::getI1Type() { return IntegerType::get(context, 1); }
call    0 never executed
        -:   55:
function _ZN4mlir7Builder9getI2TypeEv called 0 returned 0% blocks executed 0%
    #####:   56:IntegerType Builder::getI2Type() { return IntegerType::get(context, 2); }
call    0 never executed
        -:   57:
function _ZN4mlir7Builder9getI4TypeEv called 0 returned 0% blocks executed 0%
    #####:   58:IntegerType Builder::getI4Type() { return IntegerType::get(context, 4); }
call    0 never executed
        -:   59:
function _ZN4mlir7Builder9getI8TypeEv called 0 returned 0% blocks executed 0%
    #####:   60:IntegerType Builder::getI8Type() { return IntegerType::get(context, 8); }
call    0 never executed
        -:   61:
function _ZN4mlir7Builder10getI16TypeEv called 0 returned 0% blocks executed 0%
    #####:   62:IntegerType Builder::getI16Type() { return IntegerType::get(context, 16); }
call    0 never executed
        -:   63:
function _ZN4mlir7Builder10getI32TypeEv called 0 returned 0% blocks executed 0%
    #####:   64:IntegerType Builder::getI32Type() { return IntegerType::get(context, 32); }
call    0 never executed
        -:   65:
function _ZN4mlir7Builder10getI64TypeEv called 16 returned 100% blocks executed 100%
       16:   66:IntegerType Builder::getI64Type() { return IntegerType::get(context, 64); }
call    0 returned 100%
        -:   67:
function _ZN4mlir7Builder14getIntegerTypeEj called 1627025 returned 100% blocks executed 100%
 1662245*:   68:IntegerType Builder::getIntegerType(unsigned width) {
 1627025*:   69:  return IntegerType::get(context, width);
call    0 never executed
call    1 never executed
call    2 returned 100%
        -:   70:}
        -:   71:
function _ZN4mlir7Builder14getIntegerTypeEjb called 0 returned 0% blocks executed 0%
    #####:   72:IntegerType Builder::getIntegerType(unsigned width, bool isSigned) {
    #####:   73:  return IntegerType::get(
    #####:   74:      context, width, isSigned ? IntegerType::Signed : IntegerType::Unsigned);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   75:}
        -:   76:
function _ZN4mlir7Builder15getFunctionTypeENS_9TypeRangeES1_ called 4055437 returned 100% blocks executed 100%
  4055437:   77:FunctionType Builder::getFunctionType(TypeRange inputs, TypeRange results) {
  4055437:   78:  return FunctionType::get(context, inputs, results);
call    0 returned 100%
        -:   79:}
        -:   80:
function _ZN4mlir7Builder12getTupleTypeENS_9TypeRangeE called 0 returned 0% blocks executed 0%
    #####:   81:TupleType Builder::getTupleType(TypeRange elementTypes) {
    #####:   82:  return TupleType::get(context, elementTypes);
call    0 never executed
        -:   83:}
        -:   84:
function _ZN4mlir7Builder11getNoneTypeEv called 0 returned 0% blocks executed 0%
    #####:   85:NoneType Builder::getNoneType() { return NoneType::get(context); }
call    0 never executed
        -:   86:
        -:   87://===----------------------------------------------------------------------===//
        -:   88:// Attributes.
        -:   89://===----------------------------------------------------------------------===//
        -:   90:
function _ZN4mlir7Builder12getNamedAttrEN4llvm9StringRefENS_9AttributeE called 1859 returned 100% blocks executed 100%
     1859:   91:NamedAttribute Builder::getNamedAttr(StringRef name, Attribute val) {
     3718:   92:  return NamedAttribute(getStringAttr(name), val);
call    0 returned 100%
call    1 returned 100%
        -:   93:}
        -:   94:
function _ZN4mlir7Builder11getUnitAttrEv called 52 returned 100% blocks executed 100%
       52:   95:UnitAttr Builder::getUnitAttr() { return UnitAttr::get(context); }
call    0 returned 100%
        -:   96:
function _ZN4mlir7Builder11getBoolAttrEb called 0 returned 0% blocks executed 0%
    #####:   97:BoolAttr Builder::getBoolAttr(bool value) {
    #####:   98:  return BoolAttr::get(context, value);
call    0 never executed
        -:   99:}
        -:  100:
function _ZN4mlir7Builder17getDictionaryAttrEN4llvm8ArrayRefINS_14NamedAttributeEEE called 0 returned 0% blocks executed 0%
    #####:  101:DictionaryAttr Builder::getDictionaryAttr(ArrayRef<NamedAttribute> value) {
    #####:  102:  return DictionaryAttr::get(context, value);
call    0 never executed
        -:  103:}
        -:  104:
function _ZN4mlir7Builder12getIndexAttrEl called 3881 returned 100% blocks executed 71%
     3881:  105:IntegerAttr Builder::getIndexAttr(int64_t value) {
     3881:  106:  return IntegerAttr::get(getIndexType(), APInt(64, value));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  107:}
        -:  108:
function _ZN4mlir7Builder17getI64IntegerAttrEl called 0 returned 0% blocks executed 0%
    #####:  109:IntegerAttr Builder::getI64IntegerAttr(int64_t value) {
    #####:  110:  return IntegerAttr::get(getIntegerType(64), APInt(64, value));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  111:}
        -:  112:
function _ZN4mlir7Builder17getBoolVectorAttrEN4llvm8ArrayRefIbEE called 0 returned 0% blocks executed 0%
    #####:  113:DenseIntElementsAttr Builder::getBoolVectorAttr(ArrayRef<bool> values) {
    #####:  114:  return DenseIntElementsAttr::get(
call    0 never executed
    #####:  115:      VectorType::get(static_cast<int64_t>(values.size()), getI1Type()),
call    0 never executed
    #####:  116:      values);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  117:}
        -:  118:
function _ZN4mlir7Builder16getI32VectorAttrEN4llvm8ArrayRefIiEE called 0 returned 0% blocks executed 0%
    #####:  119:DenseIntElementsAttr Builder::getI32VectorAttr(ArrayRef<int32_t> values) {
    #####:  120:  return DenseIntElementsAttr::get(
call    0 never executed
    #####:  121:      VectorType::get(static_cast<int64_t>(values.size()), getIntegerType(32)),
call    0 never executed
    #####:  122:      values);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  123:}
        -:  124:
function _ZN4mlir7Builder16getI64VectorAttrEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:  125:DenseIntElementsAttr Builder::getI64VectorAttr(ArrayRef<int64_t> values) {
    #####:  126:  return DenseIntElementsAttr::get(
call    0 never executed
    #####:  127:      VectorType::get(static_cast<int64_t>(values.size()), getIntegerType(64)),
call    0 never executed
    #####:  128:      values);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  129:}
        -:  130:
function _ZN4mlir7Builder18getIndexVectorAttrEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:  131:DenseIntElementsAttr Builder::getIndexVectorAttr(ArrayRef<int64_t> values) {
    #####:  132:  return DenseIntElementsAttr::get(
call    0 never executed
    #####:  133:      VectorType::get(static_cast<int64_t>(values.size()), getIndexType()),
call    0 never executed
    #####:  134:      values);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  135:}
        -:  136:
function _ZN4mlir7Builder21getDenseBoolArrayAttrEN4llvm8ArrayRefIbEE called 0 returned 0% blocks executed 0%
    #####:  137:DenseBoolArrayAttr Builder::getDenseBoolArrayAttr(ArrayRef<bool> values) {
    #####:  138:  return DenseBoolArrayAttr::get(context, values);
call    0 never executed
        -:  139:}
        -:  140:
function _ZN4mlir7Builder19getDenseI8ArrayAttrEN4llvm8ArrayRefIaEE called 0 returned 0% blocks executed 0%
    #####:  141:DenseI8ArrayAttr Builder::getDenseI8ArrayAttr(ArrayRef<int8_t> values) {
    #####:  142:  return DenseI8ArrayAttr::get(context, values);
call    0 never executed
        -:  143:}
        -:  144:
function _ZN4mlir7Builder20getDenseI16ArrayAttrEN4llvm8ArrayRefIsEE called 0 returned 0% blocks executed 0%
    #####:  145:DenseI16ArrayAttr Builder::getDenseI16ArrayAttr(ArrayRef<int16_t> values) {
    #####:  146:  return DenseI16ArrayAttr::get(context, values);
call    0 never executed
        -:  147:}
        -:  148:
function _ZN4mlir7Builder20getDenseI32ArrayAttrEN4llvm8ArrayRefIiEE called 11268 returned 100% blocks executed 100%
    11268:  149:DenseI32ArrayAttr Builder::getDenseI32ArrayAttr(ArrayRef<int32_t> values) {
    11268:  150:  return DenseI32ArrayAttr::get(context, values);
call    0 returned 100%
        -:  151:}
        -:  152:
function _ZN4mlir7Builder20getDenseI64ArrayAttrEN4llvm8ArrayRefIlEE called 468 returned 100% blocks executed 100%
      468:  153:DenseI64ArrayAttr Builder::getDenseI64ArrayAttr(ArrayRef<int64_t> values) {
      468:  154:  return DenseI64ArrayAttr::get(context, values);
call    0 returned 100%
        -:  155:}
        -:  156:
function _ZN4mlir7Builder20getDenseF32ArrayAttrEN4llvm8ArrayRefIfEE called 0 returned 0% blocks executed 0%
    #####:  157:DenseF32ArrayAttr Builder::getDenseF32ArrayAttr(ArrayRef<float> values) {
    #####:  158:  return DenseF32ArrayAttr::get(context, values);
call    0 never executed
        -:  159:}
        -:  160:
function _ZN4mlir7Builder20getDenseF64ArrayAttrEN4llvm8ArrayRefIdEE called 0 returned 0% blocks executed 0%
    #####:  161:DenseF64ArrayAttr Builder::getDenseF64ArrayAttr(ArrayRef<double> values) {
    #####:  162:  return DenseF64ArrayAttr::get(context, values);
call    0 never executed
        -:  163:}
        -:  164:
function _ZN4mlir7Builder16getI32TensorAttrEN4llvm8ArrayRefIiEE called 0 returned 0% blocks executed 0%
    #####:  165:DenseIntElementsAttr Builder::getI32TensorAttr(ArrayRef<int32_t> values) {
    #####:  166:  return DenseIntElementsAttr::get(
    #####:  167:      RankedTensorType::get(static_cast<int64_t>(values.size()),
    #####:  168:                            getIntegerType(32)),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  169:      values);
call    0 never executed
        -:  170:}
        -:  171:
function _ZN4mlir7Builder16getI64TensorAttrEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:  172:DenseIntElementsAttr Builder::getI64TensorAttr(ArrayRef<int64_t> values) {
    #####:  173:  return DenseIntElementsAttr::get(
    #####:  174:      RankedTensorType::get(static_cast<int64_t>(values.size()),
    #####:  175:                            getIntegerType(64)),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  176:      values);
call    0 never executed
        -:  177:}
        -:  178:
function _ZN4mlir7Builder18getIndexTensorAttrEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:  179:DenseIntElementsAttr Builder::getIndexTensorAttr(ArrayRef<int64_t> values) {
    #####:  180:  return DenseIntElementsAttr::get(
    #####:  181:      RankedTensorType::get(static_cast<int64_t>(values.size()),
    #####:  182:                            getIndexType()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  183:      values);
call    0 never executed
        -:  184:}
        -:  185:
function _ZN4mlir7Builder17getI32IntegerAttrEi called 35220 returned 100% blocks executed 71%
    35220:  186:IntegerAttr Builder::getI32IntegerAttr(int32_t value) {
    35220:  187:  return IntegerAttr::get(getIntegerType(32), APInt(32, value));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  188:}
        -:  189:
function _ZN4mlir7Builder18getSI32IntegerAttrEi called 0 returned 0% blocks executed 0%
    #####:  190:IntegerAttr Builder::getSI32IntegerAttr(int32_t value) {
    #####:  191:  return IntegerAttr::get(getIntegerType(32, /*isSigned=*/true),
branch  0 never executed
branch  1 never executed
    #####:  192:                          APInt(32, value, /*isSigned=*/true));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  193:}
        -:  194:
function _ZN4mlir7Builder18getUI32IntegerAttrEj called 0 returned 0% blocks executed 0%
    #####:  195:IntegerAttr Builder::getUI32IntegerAttr(uint32_t value) {
    #####:  196:  return IntegerAttr::get(getIntegerType(32, /*isSigned=*/false),
branch  0 never executed
branch  1 never executed
    #####:  197:                          APInt(32, (uint64_t)value, /*isSigned=*/false));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  198:}
        -:  199:
function _ZN4mlir7Builder17getI16IntegerAttrEs called 0 returned 0% blocks executed 0%
    #####:  200:IntegerAttr Builder::getI16IntegerAttr(int16_t value) {
    #####:  201:  return IntegerAttr::get(getIntegerType(16), APInt(16, value));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  202:}
        -:  203:
function _ZN4mlir7Builder16getI8IntegerAttrEa called 0 returned 0% blocks executed 0%
    #####:  204:IntegerAttr Builder::getI8IntegerAttr(int8_t value) {
    #####:  205:  return IntegerAttr::get(getIntegerType(8), APInt(8, value));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  206:}
        -:  207:
function _ZN4mlir7Builder14getIntegerAttrENS_4TypeEl called 2078 returned 100% blocks executed 53%
     2078:  208:IntegerAttr Builder::getIntegerAttr(Type type, int64_t value) {
     2078:  209:  if (type.isIndex())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  210:    return IntegerAttr::get(type, APInt(64, value));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
     2078:  211:  return IntegerAttr::get(
     4156:  212:      type, APInt(type.getIntOrFloatBitWidth(), value, type.isSignedInteger()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -:  213:}
        -:  214:
function _ZN4mlir7Builder14getIntegerAttrENS_4TypeERKN4llvm5APIntE called 2460832 returned 100% blocks executed 100%
 2460832*:  215:IntegerAttr Builder::getIntegerAttr(Type type, const APInt &value) {
 2460832*:  216:  return IntegerAttr::get(type, value);
call    0 returned 100%
        -:  217:}
        -:  218:
function _ZN4mlir7Builder15getF64FloatAttrEd called 0 returned 0% blocks executed 0%
    #####:  219:FloatAttr Builder::getF64FloatAttr(double value) {
    #####:  220:  return FloatAttr::get(getF64Type(), APFloat(value));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  221:}
        -:  222:
function _ZN4mlir7Builder15getF32FloatAttrEf called 6 returned 100% blocks executed 100%
        6:  223:FloatAttr Builder::getF32FloatAttr(float value) {
        6:  224:  return FloatAttr::get(getF32Type(), APFloat(value));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  225:}
        -:  226:
function _ZN4mlir7Builder15getF16FloatAttrEf called 0 returned 0% blocks executed 0%
    #####:  227:FloatAttr Builder::getF16FloatAttr(float value) {
    #####:  228:  return FloatAttr::get(getF16Type(), value);
call    0 never executed
call    1 never executed
        -:  229:}
        -:  230:
function _ZN4mlir7Builder12getFloatAttrENS_4TypeEd called 0 returned 0% blocks executed 0%
    #####:  231:FloatAttr Builder::getFloatAttr(Type type, double value) {
    #####:  232:  return FloatAttr::get(type, value);
call    0 never executed
        -:  233:}
        -:  234:
function _ZN4mlir7Builder12getFloatAttrENS_4TypeERKN4llvm7APFloatE called 0 returned 0% blocks executed 0%
    #####:  235:FloatAttr Builder::getFloatAttr(Type type, const APFloat &value) {
    #####:  236:  return FloatAttr::get(type, value);
call    0 never executed
        -:  237:}
        -:  238:
function _ZN4mlir7Builder13getStringAttrERKN4llvm5TwineE called 4291545 returned 100% blocks executed 100%
  4295282:  239:StringAttr Builder::getStringAttr(const Twine &bytes) {
  4293404:  240:  return StringAttr::get(context, bytes);
call    0 returned 100%
call    1 returned 100%
        -:  241:}
        -:  242:
function _ZN4mlir7Builder12getArrayAttrEN4llvm8ArrayRefINS_9AttributeEEE called 1158992 returned 100% blocks executed 100%
 1167914*:  243:ArrayAttr Builder::getArrayAttr(ArrayRef<Attribute> value) {
 1167914*:  244:  return ArrayAttr::get(context, value);
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 never executed
call    9 returned 100%
        -:  245:}
        -:  246:
function _ZN4mlir7Builder16getBoolArrayAttrEN4llvm8ArrayRefIbEE called 0 returned 0% blocks executed 0%
    #####:  247:ArrayAttr Builder::getBoolArrayAttr(ArrayRef<bool> values) {
    #####:  248:  auto attrs = llvm::to_vector<8>(llvm::map_range(
    #####:  249:      values, [this](bool v) -> Attribute { return getBoolAttr(v); }));
call    0 never executed
    #####:  250:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  251:}
        -:  252:
function _ZN4mlir7Builder15getI32ArrayAttrEN4llvm8ArrayRefIiEE called 7044 returned 100% blocks executed 80%
     7044:  253:ArrayAttr Builder::getI32ArrayAttr(ArrayRef<int32_t> values) {
     7044:  254:  auto attrs = llvm::to_vector<8>(llvm::map_range(
     7044:  255:      values, [this](int32_t v) -> Attribute { return getI32IntegerAttr(v); }));
call    0 returned 100%
     7044:  256:  return getArrayAttr(attrs);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  257:}
function _ZN4mlir7Builder15getI64ArrayAttrEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:  258:ArrayAttr Builder::getI64ArrayAttr(ArrayRef<int64_t> values) {
    #####:  259:  auto attrs = llvm::to_vector<8>(llvm::map_range(
    #####:  260:      values, [this](int64_t v) -> Attribute { return getI64IntegerAttr(v); }));
call    0 never executed
    #####:  261:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:}
        -:  263:
function _ZN4mlir7Builder17getIndexArrayAttrEN4llvm8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:  264:ArrayAttr Builder::getIndexArrayAttr(ArrayRef<int64_t> values) {
    #####:  265:  auto attrs = llvm::to_vector<8>(
function _ZZN4mlir7Builder17getIndexArrayAttrEN4llvm8ArrayRefIlEEENKUllE_clEl.isra.0 called 0 returned 0% blocks executed 0%
    #####:  266:      llvm::map_range(values, [this](int64_t v) -> Attribute {
    #####:  267:        return getIntegerAttr(IndexType::get(getContext()), v);
call    0 never executed
call    1 never executed
    #####:  268:      }));
call    0 never executed
    #####:  269:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  270:}
        -:  271:
function _ZN4mlir7Builder15getF32ArrayAttrEN4llvm8ArrayRefIfEE called 0 returned 0% blocks executed 0%
    #####:  272:ArrayAttr Builder::getF32ArrayAttr(ArrayRef<float> values) {
    #####:  273:  auto attrs = llvm::to_vector<8>(llvm::map_range(
    #####:  274:      values, [this](float v) -> Attribute { return getF32FloatAttr(v); }));
call    0 never executed
    #####:  275:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  276:}
        -:  277:
function _ZN4mlir7Builder15getF64ArrayAttrEN4llvm8ArrayRefIdEE called 0 returned 0% blocks executed 0%
    #####:  278:ArrayAttr Builder::getF64ArrayAttr(ArrayRef<double> values) {
    #####:  279:  auto attrs = llvm::to_vector<8>(llvm::map_range(
    #####:  280:      values, [this](double v) -> Attribute { return getF64FloatAttr(v); }));
call    0 never executed
    #####:  281:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  282:}
        -:  283:
function _ZN4mlir7Builder15getStrArrayAttrEN4llvm8ArrayRefINS1_9StringRefEEE called 1878 returned 100% blocks executed 80%
     1878:  284:ArrayAttr Builder::getStrArrayAttr(ArrayRef<StringRef> values) {
     1878:  285:  auto attrs = llvm::to_vector<8>(llvm::map_range(
function _ZZN4mlir7Builder15getStrArrayAttrEN4llvm8ArrayRefINS1_9StringRefEEEENKUlS3_E_clES3_.isra.0 called 1878 returned 100% blocks executed 100%
     3756:  286:      values, [this](StringRef v) -> Attribute { return getStringAttr(v); }));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1878:  287:  return getArrayAttr(attrs);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  288:}
        -:  289:
function _ZN4mlir7Builder16getTypeArrayAttrENS_9TypeRangeE called 0 returned 0% blocks executed 0%
    #####:  290:ArrayAttr Builder::getTypeArrayAttr(TypeRange values) {
    #####:  291:  auto attrs = llvm::to_vector<8>(llvm::map_range(
    #####:  292:      values, [](Type v) -> Attribute { return TypeAttr::get(v); }));
call    0 never executed
call    1 never executed
    #####:  293:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:}
        -:  295:
function _ZN4mlir7Builder21getAffineMapArrayAttrEN4llvm8ArrayRefINS_9AffineMapEEE called 0 returned 0% blocks executed 0%
    #####:  296:ArrayAttr Builder::getAffineMapArrayAttr(ArrayRef<AffineMap> values) {
    #####:  297:  auto attrs = llvm::to_vector<8>(llvm::map_range(
    #####:  298:      values, [](AffineMap v) -> Attribute { return AffineMapAttr::get(v); }));
call    0 never executed
    #####:  299:  return getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:}
        -:  301:
function _ZN4mlir7Builder11getZeroAttrENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  302:Attribute Builder::getZeroAttr(Type type) {
    #####:  303:  if (type.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  304:    return getFloatAttr(type, 0.0);
call    0 never executed
    #####:  305:  if (type.isa<IndexType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  306:    return getIndexAttr(0);
call    0 never executed
    #####:  307:  if (auto integerType = type.dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  308:    return getIntegerAttr(type, APInt(type.cast<IntegerType>().getWidth(), 0));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  309:  if (type.isa<RankedTensorType, VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  310:    auto vtType = type.cast<ShapedType>();
call    0 never executed
    #####:  311:    auto element = getZeroAttr(vtType.getElementType());
call    0 never executed
call    1 never executed
    #####:  312:    if (!element)
branch  0 never executed
branch  1 never executed
    #####:  313:      return {};
    #####:  314:    return DenseElementsAttr::get(vtType, element);
call    0 never executed
        -:  315:  }
    #####:  316:  return {};
        -:  317:}
        -:  318:
        -:  319://===----------------------------------------------------------------------===//
        -:  320:// Affine Expressions, Affine Maps, and Integer Sets.
        -:  321://===----------------------------------------------------------------------===//
        -:  322:
function _ZN4mlir7Builder16getAffineDimExprEj called 0 returned 0% blocks executed 0%
    #####:  323:AffineExpr Builder::getAffineDimExpr(unsigned position) {
    #####:  324:  return mlir::getAffineDimExpr(position, context);
call    0 never executed
        -:  325:}
        -:  326:
function _ZN4mlir7Builder19getAffineSymbolExprEj called 0 returned 0% blocks executed 0%
    #####:  327:AffineExpr Builder::getAffineSymbolExpr(unsigned position) {
    #####:  328:  return mlir::getAffineSymbolExpr(position, context);
call    0 never executed
        -:  329:}
        -:  330:
function _ZN4mlir7Builder21getAffineConstantExprEl called 0 returned 0% blocks executed 0%
    #####:  331:AffineExpr Builder::getAffineConstantExpr(int64_t constant) {
    #####:  332:  return mlir::getAffineConstantExpr(constant, context);
call    0 never executed
        -:  333:}
        -:  334:
function _ZN4mlir7Builder17getEmptyAffineMapEv called 0 returned 0% blocks executed 0%
    #####:  335:AffineMap Builder::getEmptyAffineMap() { return AffineMap::get(context); }
call    0 never executed
        -:  336:
function _ZN4mlir7Builder20getConstantAffineMapEl called 0 returned 0% blocks executed 0%
    #####:  337:AffineMap Builder::getConstantAffineMap(int64_t val) {
    #####:  338:  return AffineMap::get(/*dimCount=*/0, /*symbolCount=*/0,
call    0 never executed
    #####:  339:                        getAffineConstantExpr(val));
call    0 never executed
        -:  340:}
        -:  341:
function _ZN4mlir7Builder17getDimIdentityMapEv called 0 returned 0% blocks executed 0%
    #####:  342:AffineMap Builder::getDimIdentityMap() {
    #####:  343:  return AffineMap::get(/*dimCount=*/1, /*symbolCount=*/0, getAffineDimExpr(0));
call    0 never executed
call    1 never executed
        -:  344:}
        -:  345:
function _ZN4mlir7Builder22getMultiDimIdentityMapEj called 0 returned 0% blocks executed 0%
    #####:  346:AffineMap Builder::getMultiDimIdentityMap(unsigned rank) {
    #####:  347:  SmallVector<AffineExpr, 4> dimExprs;
branch  0 never executed
branch  1 never executed
    #####:  348:  dimExprs.reserve(rank);
branch  0 never executed
branch  1 never executed
    #####:  349:  for (unsigned i = 0; i < rank; ++i)
branch  0 never executed
branch  1 never executed
    #####:  350:    dimExprs.push_back(getAffineDimExpr(i));
call    0 never executed
call    1 never executed
    #####:  351:  return AffineMap::get(/*dimCount=*/rank, /*symbolCount=*/0, dimExprs,
    #####:  352:                        context);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  353:}
        -:  354:
function _ZN4mlir7Builder20getSymbolIdentityMapEv called 0 returned 0% blocks executed 0%
    #####:  355:AffineMap Builder::getSymbolIdentityMap() {
    #####:  356:  return AffineMap::get(/*dimCount=*/0, /*symbolCount=*/1,
call    0 never executed
    #####:  357:                        getAffineSymbolExpr(0));
call    0 never executed
        -:  358:}
        -:  359:
function _ZN4mlir7Builder26getSingleDimShiftAffineMapEl called 0 returned 0% blocks executed 0%
    #####:  360:AffineMap Builder::getSingleDimShiftAffineMap(int64_t shift) {
        -:  361:  // expr = d0 + shift.
    #####:  362:  auto expr = getAffineDimExpr(0) + shift;
call    0 never executed
call    1 never executed
    #####:  363:  return AffineMap::get(/*dimCount=*/1, /*symbolCount=*/0, expr);
call    0 never executed
        -:  364:}
        -:  365:
function _ZN4mlir7Builder19getShiftedAffineMapENS_9AffineMapEl called 0 returned 0% blocks executed 0%
    #####:  366:AffineMap Builder::getShiftedAffineMap(AffineMap map, int64_t shift) {
    #####:  367:  SmallVector<AffineExpr, 4> shiftedResults;
call    0 never executed
    #####:  368:  shiftedResults.reserve(map.getNumResults());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:  for (auto resultExpr : map.getResults())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  370:    shiftedResults.push_back(resultExpr + shift);
call    0 never executed
call    1 never executed
    #####:  371:  return AffineMap::get(map.getNumDims(), map.getNumSymbols(), shiftedResults,
    #####:  372:                        context);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  373:}
        -:  374:
        -:  375://===----------------------------------------------------------------------===//
        -:  376:// OpBuilder
        -:  377://===----------------------------------------------------------------------===//
        -:  378:
        -:  379:OpBuilder::Listener::~Listener() = default;
        -:  380:
        -:  381:/// Insert the given operation at the current insertion point and return it.
function _ZN4mlir9OpBuilder6insertEPNS_9OperationE called 4806711 returned 100% blocks executed 100%
  4806711:  382:Operation *OpBuilder::insert(Operation *op) {
  4806711:  383:  if (block)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
  9080860:  384:    block->getOperations().insert(insertPoint, op);
call    0 returned 100%
        -:  385:
  4806711:  386:  if (listener)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
    12835:  387:    listener->notifyOperationInserted(op);
call    0 returned 100%
  4806711:  388:  return op;
        -:  389:}
        -:  390:
function _ZN4mlir9OpBuilder11createBlockEPNS_6RegionEN4llvm14ilist_iteratorINS3_12ilist_detail12node_optionsINS_5BlockELb1ELb0EvEELb0ELb0EEENS_9TypeRangeENS3_8ArrayRefINS_8LocationEEE called 0 returned 0% blocks executed 0%
    #####:  391:Block *OpBuilder::createBlock(Region *parent, Region::iterator insertPt,
        -:  392:                              TypeRange argTypes, ArrayRef<Location> locs) {
    #####:  393:  assert(parent && "expected valid parent region");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  394:  assert(argTypes.size() == locs.size() && "argument location mismatch");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  395:  if (insertPt == Region::iterator())
branch  0 never executed
branch  1 never executed
    #####:  396:    insertPt = parent->end();
        -:  397:
    #####:  398:  Block *b = new Block();
call    0 never executed
call    1 never executed
    #####:  399:  b->addArguments(argTypes, locs);
call    0 never executed
    #####:  400:  parent->getBlocks().insert(insertPt, b);
call    0 never executed
    #####:  401:  setInsertionPointToEnd(b);
branch  0 never executed
branch  1 never executed
        -:  402:
    #####:  403:  if (listener)
branch  0 never executed
branch  1 never executed
    #####:  404:    listener->notifyBlockCreated(b);
call    0 never executed
    #####:  405:  return b;
        -:  406:}
        -:  407:
        -:  408:/// Add new block with 'argTypes' arguments and set the insertion point to the
        -:  409:/// end of it.  The block is placed before 'insertBefore'.
function _ZN4mlir9OpBuilder11createBlockEPNS_5BlockENS_9TypeRangeEN4llvm8ArrayRefINS_8LocationEEE called 0 returned 0% blocks executed 0%
    #####:  410:Block *OpBuilder::createBlock(Block *insertBefore, TypeRange argTypes,
        -:  411:                              ArrayRef<Location> locs) {
    #####:  412:  assert(insertBefore && "expected valid insertion block");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  413:  return createBlock(insertBefore->getParent(), Region::iterator(insertBefore),
call    0 never executed
call    1 never executed
    #####:  414:                     argTypes, locs);
        -:  415:}
        -:  416:
        -:  417:/// Create an operation given the fields represented as an OperationState.
function _ZN4mlir9OpBuilder6createERKNS_14OperationStateE called 4788855 returned 100% blocks executed 100%
  4788902:  418:Operation *OpBuilder::create(const OperationState &state) {
  4788902:  419:  return insert(Operation::create(state));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  420:}
        -:  421:
        -:  422:/// Creates an operation with the given fields.
function _ZN4mlir9OpBuilder6createENS_8LocationENS_10StringAttrENS_10ValueRangeENS_9TypeRangeEN4llvm8ArrayRefINS_14NamedAttributeEEENS_10BlockRangeENS5_15MutableArrayRefISt10unique_ptrINS_6RegionESt14default_deleteISC_EEEE called 47 returned 100% blocks executed 100%
       47:  423:Operation *OpBuilder::create(Location loc, StringAttr opName,
        -:  424:                             ValueRange operands, TypeRange types,
        -:  425:                             ArrayRef<NamedAttribute> attributes,
        -:  426:                             BlockRange successors,
        -:  427:                             MutableArrayRef<std::unique_ptr<Region>> regions) {
       47:  428:  OperationState state(loc, opName, operands, types, attributes, successors,
call    0 returned 100%
       47:  429:                       regions);
call    0 returned 100%
       94:  430:  return create(state);
call    0 returned 100%
call    1 returned 100%
        -:  431:}
        -:  432:
        -:  433:/// Attempts to fold the given operation and places new results within
        -:  434:/// 'results'. Returns success if the operation was folded, failure otherwise.
        -:  435:/// Note: This function does not erase the operation on a successful fold.
function _ZN4mlir9OpBuilder7tryFoldEPNS_9OperationERN4llvm15SmallVectorImplINS_5ValueEEE called 623475 returned 100% blocks executed 35%
   623475:  436:LogicalResult OpBuilder::tryFold(Operation *op,
        -:  437:                                 SmallVectorImpl<Value> &results) {
   623475:  438:  ResultRange opResults = op->getResults();
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:  439:
   623475:  440:  results.reserve(opResults.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
 1246951*:  441:  auto cleanupFailure = [&] {
 1246951*:  442:    results.assign(opResults.begin(), opResults.end());
  623475*:  443:    return failure();
   623475:  444:  };
        -:  445:
        -:  446:  // If this operation is already a constant, there is nothing to do.
   623475:  447:  if (matchPattern(op, m_Constant()))
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
   144343:  448:    return cleanupFailure();
call    0 returned 100%
        -:  449:
        -:  450:  // Check to see if any operands to the operation is constant and whether
        -:  451:  // the operation knows how to constant fold itself.
   862248:  452:  SmallVector<Attribute, 4> constOperands(op->getNumOperands());
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
call    2 returned 100%
  1136406:  453:  for (unsigned i = 0, e = constOperands.size(); i != e; ++i)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
   657273:  454:    matchPattern(op->getOperand(i), m_Constant(&constOperands[i]));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
        -:  455:
        -:  456:  // Try to fold the operation.
   958265:  457:  SmallVector<OpFoldResult, 4> foldResults;
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
  479133*:  458:  if (failed(op->fold(constOperands, foldResults)) || foldResults.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
   479133:  459:    return cleanupFailure();
call    0 returned 100%
        -:  460:
        -:  461:  // A temporary builder used for creating constants during folding.
    #####:  462:  OpBuilder cstBuilder(context);
branch  0 never executed
branch  1 never executed
  479132*:  463:  SmallVector<Operation *, 1> generatedConstants;
branch  0 never executed
branch  1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  464:
        -:  465:  // Populate the results with the folded results.
    #####:  466:  Dialect *dialect = op->getDialect();
branch  0 never executed
branch  1 never executed
    #####:  467:  for (auto it : llvm::zip(foldResults, opResults.getTypes())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  468:    Type expectedType = std::get<1>(it);
branch  0 never executed
branch  1 never executed
        -:  469:
        -:  470:    // Normal values get pushed back directly.
    #####:  471:    if (auto value = std::get<0>(it).dyn_cast<Value>()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  472:      if (value.getType() != expectedType)
branch  0 never executed
branch  1 never executed
    #####:  473:        return cleanupFailure();
call    0 never executed
        -:  474:
    #####:  475:      results.push_back(value);
call    0 never executed
    #####:  476:      continue;
        -:  477:    }
        -:  478:
        -:  479:    // Otherwise, try to materialize a constant operation.
    #####:  480:    if (!dialect)
branch  0 never executed
branch  1 never executed
    #####:  481:      return cleanupFailure();
call    0 never executed
        -:  482:
        -:  483:    // Ask the dialect to materialize a constant operation for this value.
    #####:  484:    Attribute attr = std::get<0>(it).get<Attribute>();
call    0 never executed
    #####:  485:    auto *constOp = dialect->materializeConstant(cstBuilder, attr, expectedType,
    #####:  486:                                                 op->getLoc());
call    0 never executed
    #####:  487:    if (!constOp) {
branch  0 never executed
branch  1 never executed
        -:  488:      // Erase any generated constants.
    #####:  489:      for (Operation *cst : generatedConstants)
branch  0 never executed
branch  1 never executed
    #####:  490:        cst->erase();
call    0 never executed
    #####:  491:      return cleanupFailure();
call    0 never executed
        -:  492:    }
    #####:  493:    assert(matchPattern(constOp, m_Constant()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  494:
    #####:  495:    generatedConstants.push_back(constOp);
call    0 never executed
    #####:  496:    results.push_back(constOp->getResult(0));
call    0 never executed
        -:  497:  }
        -:  498:
        -:  499:  // If we were successful, insert any generated constants.
    #####:  500:  for (Operation *cst : generatedConstants)
branch  0 never executed
branch  1 never executed
    #####:  501:    insert(cst);
call    0 never executed
        -:  502:
    #####:  503:  return success();
branch  0 never executed
branch  1 never executed
        -:  504:}
        -:  505:
function _ZN4mlir9OpBuilder5cloneERNS_9OperationERNS_20BlockAndValueMappingE called 17816 returned 100% blocks executed 42%
    17816:  506:Operation *OpBuilder::clone(Operation &op, BlockAndValueMapping &mapper) {
    17816:  507:  Operation *newOp = op.clone(mapper);
call    0 returned 100%
call    1 returned 100%
        -:  508:  // The `insert` call below handles the notification for inserting `newOp`
        -:  509:  // itself. But if `newOp` has any regions, we need to notify the listener
        -:  510:  // about any ops that got inserted inside those regions as part of cloning.
    17816:  511:  if (listener) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  512:    auto walkFn = [&](Operation *walkedOp) {
    #####:  513:      listener->notifyOperationInserted(walkedOp);
call    0 never executed
    #####:  514:    };
    #####:  515:    for (Region &region : newOp->getRegions())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  516:      region.walk(walkFn);
call    0 never executed
        -:  517:  }
    17816:  518:  return insert(newOp);
call    0 returned 100%
        -:  519:}
        -:  520:
function _ZN4mlir9OpBuilder5cloneERNS_9OperationE called 17816 returned 100% blocks executed 100%
    17816:  521:Operation *OpBuilder::clone(Operation &op) {
    35632:  522:  BlockAndValueMapping mapper;
call    0 returned 100%
call    1 returned 100%
    17816:  523:  return clone(op, mapper);
call    0 returned 100%
        -:  524:}
