        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Quant/IR/QuantTypes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Quant/IR/CMakeFiles/obj.MLIRQuantDialect.dir/QuantTypes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Quant/IR/CMakeFiles/obj.MLIRQuantDialect.dir/QuantTypes.cpp.gcda
        -:    0:Runs:325550
        -:    1://===- QuantOps.cpp - Quantization Type and Ops Implementation --*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Quant/QuantTypes.h"
        -:   10:#include "TypeDetail.h"
        -:   11:#include "mlir/Dialect/Quant/QuantOps.h"
        -:   12:
        -:   13:#include "mlir/IR/BuiltinTypes.h"
        -:   14:#include "mlir/IR/MLIRContext.h"
        -:   15:#include "llvm/ADT/StringRef.h"
        -:   16:#include "llvm/ADT/Twine.h"
        -:   17:#include "llvm/Support/MathExtras.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:using namespace mlir::quant;
        -:   21:using namespace mlir::quant::detail;
        -:   22:
function _ZNK4mlir5quant13QuantizedType8getFlagsEv called 0 returned 0% blocks executed 0%
    #####:   23:unsigned QuantizedType::getFlags() const {
    #####:   24:  return static_cast<ImplType *>(impl)->flags;
        -:   25:}
        -:   26:
function _ZN4mlir5quant13QuantizedType7classofENS_4TypeE called 66760150 returned 100% blocks executed 67%
 66760150:   27:bool QuantizedType::classof(Type type) {
 66760150:   28:  return llvm::isa<QuantizationDialect>(type.getDialect());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   29:}
        -:   30:
        -:   31:LogicalResult
function _ZN4mlir5quant13QuantizedType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_ll called 0 returned 0% blocks executed 0%
    #####:   32:QuantizedType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:   33:                      unsigned flags, Type storageType, Type expressedType,
        -:   34:                      int64_t storageTypeMin, int64_t storageTypeMax) {
        -:   35:  // Verify that the storage type is integral.
        -:   36:  // This restriction may be lifted at some point in favor of using bf16
        -:   37:  // or f16 as exact representations on hardware where that is advantageous.
    #####:   38:  auto intStorageType = storageType.dyn_cast<IntegerType>();
call    0 never executed
    #####:   39:  if (!intStorageType)
branch  0 never executed
branch  1 never executed
    #####:   40:    return emitError() << "storage type must be integral";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   41:  unsigned integralWidth = intStorageType.getWidth();
call    0 never executed
        -:   42:
        -:   43:  // Verify storage width.
    #####:   44:  if (integralWidth == 0 || integralWidth > MaxStorageBits)
branch  0 never executed
branch  1 never executed
    #####:   45:    return emitError() << "illegal storage type size: " << integralWidth;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   46:
        -:   47:  // Verify storageTypeMin and storageTypeMax.
    #####:   48:  bool isSigned =
    #####:   49:      (flags & QuantizationFlags::Signed) == QuantizationFlags::Signed;
    #####:   50:  int64_t defaultIntegerMin =
    #####:   51:      getDefaultMinimumForInteger(isSigned, integralWidth);
branch  0 never executed
branch  1 never executed
    #####:   52:  int64_t defaultIntegerMax =
    #####:   53:      getDefaultMaximumForInteger(isSigned, integralWidth);
call    0 never executed
    #####:   54:  if (storageTypeMax - storageTypeMin <= 0 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:      storageTypeMin < defaultIntegerMin ||
branch  0 never executed
branch  1 never executed
        -:   56:      storageTypeMax > defaultIntegerMax) {
    #####:   57:    return emitError() << "illegal storage min and storage max: ("
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   58:                       << storageTypeMin << ":" << storageTypeMax << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   59:  }
    #####:   60:  return success();
        -:   61:}
        -:   62:
function _ZNK4mlir5quant13QuantizedType14getStorageTypeEv called 0 returned 0% blocks executed 0%
    #####:   63:Type QuantizedType::getStorageType() const {
    #####:   64:  return static_cast<ImplType *>(impl)->storageType;
call    0 never executed
        -:   65:}
        -:   66:
function _ZNK4mlir5quant13QuantizedType17getStorageTypeMinEv called 0 returned 0% blocks executed 0%
    #####:   67:int64_t QuantizedType::getStorageTypeMin() const {
    #####:   68:  return static_cast<ImplType *>(impl)->storageTypeMin;
        -:   69:}
        -:   70:
function _ZNK4mlir5quant13QuantizedType17getStorageTypeMaxEv called 0 returned 0% blocks executed 0%
    #####:   71:int64_t QuantizedType::getStorageTypeMax() const {
    #####:   72:  return static_cast<ImplType *>(impl)->storageTypeMax;
        -:   73:}
        -:   74:
function _ZNK4mlir5quant13QuantizedType27getStorageTypeIntegralWidthEv called 0 returned 0% blocks executed 0%
    #####:   75:unsigned QuantizedType::getStorageTypeIntegralWidth() const {
        -:   76:  // NOTE: If ever supporting non-integral storage types, some other scheme
        -:   77:  // for determining the width will be needed.
    #####:   78:  return static_cast<ImplType *>(impl)->storageType.getIntOrFloatBitWidth();
call    0 never executed
        -:   79:}
        -:   80:
function _ZNK4mlir5quant13QuantizedType16getExpressedTypeEv called 0 returned 0% blocks executed 0%
    #####:   81:Type QuantizedType::getExpressedType() const {
    #####:   82:  return static_cast<ImplType *>(impl)->expressedType;
        -:   83:}
        -:   84:
function _ZN4mlir5quant13QuantizedType25isCompatibleExpressedTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   85:bool QuantizedType::isCompatibleExpressedType(Type candidateExpressedType) {
    #####:   86:  if (candidateExpressedType.isa<ShapedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   87:    return candidateExpressedType.cast<ShapedType>().getElementType() ==
call    0 never executed
call    1 never executed
        -:   88:           getExpressedType();
        -:   89:  }
    #####:   90:  return candidateExpressedType == getExpressedType();
        -:   91:}
        -:   92:
        -:   93:QuantizedType
function _ZN4mlir5quant13QuantizedType23getQuantizedElementTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   94:QuantizedType::getQuantizedElementType(Type primitiveOrContainerType) {
    #####:   95:  if (primitiveOrContainerType.isa<ShapedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:    Type elementType =
call    0 never executed
    #####:   97:        primitiveOrContainerType.cast<ShapedType>().getElementType();
call    0 never executed
    #####:   98:    return elementType.dyn_cast<QuantizedType>();
call    0 never executed
        -:   99:  }
    #####:  100:  return primitiveOrContainerType.dyn_cast<QuantizedType>();
call    0 never executed
        -:  101:}
        -:  102:
function _ZN4mlir5quant13QuantizedType19castFromStorageTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  103:Type QuantizedType::castFromStorageType(Type candidateType) {
    #####:  104:  if (candidateType == getStorageType()) {
branch  0 never executed
branch  1 never executed
        -:  105:    // i.e. i32 -> quant<"uniform[i8:f32]{1.0}">
    #####:  106:    return *this;
        -:  107:  }
    #####:  108:  if (candidateType.isa<RankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  109:    // i.e. tensor<4xi8> -> tensor<4x!quant<"uniform[i8:f32]{1.0}">>
    #####:  110:    return RankedTensorType::get(
    #####:  111:        candidateType.cast<RankedTensorType>().getShape(), getStorageType());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  112:  }
    #####:  113:  if (candidateType.isa<UnrankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  114:    // i.e. tensor<i8> -> tensor<!quant<"uniform[i8:f32]{1.0}">>
    #####:  115:    return UnrankedTensorType::get(getStorageType());
call    0 never executed
        -:  116:  }
    #####:  117:  if (candidateType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  118:    // i.e. tensor<4xi8> -> tensor<4x!quant<"uniform[i8:f32]{1.0}">>
    #####:  119:    return VectorType::get(candidateType.cast<VectorType>().getShape(),
    #####:  120:                           getStorageType());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  121:  }
        -:  122:
    #####:  123:  return nullptr;
        -:  124:}
        -:  125:
function _ZN4mlir5quant13QuantizedType17castToStorageTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  126:Type QuantizedType::castToStorageType(Type quantizedType) {
    #####:  127:  if (quantizedType.isa<QuantizedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  128:    // i.e. quant<"uniform[i8:f32]{1.0}"> -> i8
    #####:  129:    return quantizedType.cast<QuantizedType>().getStorageType();
call    0 never executed
        -:  130:  }
    #####:  131:  if (quantizedType.isa<ShapedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  132:    // i.e. tensor<4xi8> -> tensor<4x!quant<"uniform[i8:f32]{1.0}">>
    #####:  133:    ShapedType sType = quantizedType.cast<ShapedType>();
call    0 never executed
    #####:  134:    if (!sType.getElementType().isa<QuantizedType>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  135:      return nullptr;
        -:  136:    }
    #####:  137:    Type storageType =
    #####:  138:        sType.getElementType().cast<QuantizedType>().getStorageType();
call    0 never executed
call    1 never executed
    #####:  139:    if (quantizedType.isa<RankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:      return RankedTensorType::get(sType.getShape(), storageType);
call    0 never executed
call    1 never executed
        -:  141:    }
    #####:  142:    if (quantizedType.isa<UnrankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:      return UnrankedTensorType::get(storageType);
call    0 never executed
        -:  144:    }
    #####:  145:    if (quantizedType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  146:      return VectorType::get(sType.getShape(), storageType);
call    0 never executed
call    1 never executed
        -:  147:    }
        -:  148:  }
        -:  149:
    #####:  150:  return nullptr;
        -:  151:}
        -:  152:
function _ZN4mlir5quant13QuantizedType21castFromExpressedTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  153:Type QuantizedType::castFromExpressedType(Type candidateType) {
    #####:  154:  if (candidateType == getExpressedType()) {
branch  0 never executed
branch  1 never executed
        -:  155:    // i.e. f32 -> quant<"uniform[i8:f32]{1.0}">
    #####:  156:    return *this;
        -:  157:  }
    #####:  158:  if (candidateType.isa<ShapedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  159:    ShapedType candidateShapedType = candidateType.cast<ShapedType>();
call    0 never executed
    #####:  160:    if (candidateShapedType.getElementType() != getExpressedType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  161:      return nullptr;
        -:  162:    }
        -:  163:
    #####:  164:    if (candidateType.isa<RankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  165:      // i.e. tensor<4xf32> -> tensor<4x!quant<"uniform[i8:f32]{1.0}">>
    #####:  166:      return RankedTensorType::get(candidateShapedType.getShape(), *this);
call    0 never executed
call    1 never executed
        -:  167:    }
    #####:  168:    if (candidateType.isa<UnrankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  169:      // i.e. tensor<xf32> -> tensor<x!quant<"uniform[i8:f32]{1.0}">>
    #####:  170:      return UnrankedTensorType::get(*this);
call    0 never executed
        -:  171:    }
    #####:  172:    if (candidateType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  173:      // i.e. tensor<4xf32> -> tensor<4x!quant<"uniform[i8:f32]{1.0}">>
    #####:  174:      return VectorType::get(candidateShapedType.getShape(), *this);
call    0 never executed
call    1 never executed
        -:  175:    }
        -:  176:  }
        -:  177:
    #####:  178:  return nullptr;
        -:  179:}
        -:  180:
function _ZN4mlir5quant13QuantizedType19castToExpressedTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  181:Type QuantizedType::castToExpressedType(Type quantizedType) {
    #####:  182:  if (quantizedType.isa<QuantizedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  183:    // i.e. quant<"uniform[i8:f32]{1.0}"> -> f32
    #####:  184:    return quantizedType.cast<QuantizedType>().getExpressedType();
call    0 never executed
        -:  185:  }
    #####:  186:  if (quantizedType.isa<ShapedType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  187:    // i.e. tensor<4xi8> -> tensor<4x!quant<"uniform[i8:f32]{1.0}">>
    #####:  188:    ShapedType sType = quantizedType.cast<ShapedType>();
call    0 never executed
    #####:  189:    if (!sType.getElementType().isa<QuantizedType>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  190:      return nullptr;
        -:  191:    }
    #####:  192:    Type expressedType =
    #####:  193:        sType.getElementType().cast<QuantizedType>().getExpressedType();
call    0 never executed
call    1 never executed
    #####:  194:    if (quantizedType.isa<RankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:      return RankedTensorType::get(sType.getShape(), expressedType);
call    0 never executed
call    1 never executed
        -:  196:    }
    #####:  197:    if (quantizedType.isa<UnrankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:      return UnrankedTensorType::get(expressedType);
call    0 never executed
        -:  199:    }
    #####:  200:    if (quantizedType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  201:      return VectorType::get(sType.getShape(), expressedType);
call    0 never executed
call    1 never executed
        -:  202:    }
        -:  203:  }
        -:  204:
    #####:  205:  return nullptr;
        -:  206:}
        -:  207:
function _ZN4mlir5quant13QuantizedType26castExpressedToStorageTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  208:Type QuantizedType::castExpressedToStorageType(Type candidateType) {
    #####:  209:  Type expressedQuantizedType = castFromExpressedType(candidateType);
call    0 never executed
    #####:  210:  if (!expressedQuantizedType) {
branch  0 never executed
branch  1 never executed
    #####:  211:    return nullptr;
        -:  212:  }
    #####:  213:  return QuantizedType::castToStorageType(expressedQuantizedType);
call    0 never executed
        -:  214:}
        -:  215:
function _ZN4mlir5quant16AnyQuantizedType3getEjNS_4TypeES2_ll called 0 returned 0% blocks executed 0%
    #####:  216:AnyQuantizedType AnyQuantizedType::get(unsigned flags, Type storageType,
        -:  217:                                       Type expressedType,
        -:  218:                                       int64_t storageTypeMin,
        -:  219:                                       int64_t storageTypeMax) {
    #####:  220:  return Base::get(storageType.getContext(), flags, storageType, expressedType,
    #####:  221:                   storageTypeMin, storageTypeMax);
call    0 never executed
call    1 never executed
        -:  222:}
        -:  223:
        -:  224:AnyQuantizedType
function _ZN4mlir5quant16AnyQuantizedType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_ll called 0 returned 0% blocks executed 0%
    #####:  225:AnyQuantizedType::getChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  226:                             unsigned flags, Type storageType,
        -:  227:                             Type expressedType, int64_t storageTypeMin,
        -:  228:                             int64_t storageTypeMax) {
    #####:  229:  return Base::getChecked(emitError, storageType.getContext(), flags,
        -:  230:                          storageType, expressedType, storageTypeMin,
    #####:  231:                          storageTypeMax);
call    0 never executed
call    1 never executed
        -:  232:}
        -:  233:
        -:  234:LogicalResult
function _ZN4mlir5quant16AnyQuantizedType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_ll called 0 returned 0% blocks executed 0%
    #####:  235:AnyQuantizedType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  236:                         unsigned flags, Type storageType, Type expressedType,
        -:  237:                         int64_t storageTypeMin, int64_t storageTypeMax) {
    #####:  238:  if (failed(QuantizedType::verify(emitError, flags, storageType, expressedType,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  239:                                   storageTypeMin, storageTypeMax))) {
    #####:  240:    return failure();
        -:  241:  }
        -:  242:
        -:  243:  // Verify that the expressed type is floating point.
        -:  244:  // If this restriction is ever eliminated, the parser/printer must be
        -:  245:  // extended.
    #####:  246:  if (expressedType && !expressedType.isa<FloatType>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  247:    return emitError() << "expressed type must be floating point";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  248:
    #####:  249:  return success();
        -:  250:}
        -:  251:
function _ZN4mlir5quant20UniformQuantizedType3getEjNS_4TypeES2_dlll called 0 returned 0% blocks executed 0%
    #####:  252:UniformQuantizedType UniformQuantizedType::get(unsigned flags, Type storageType,
        -:  253:                                               Type expressedType, double scale,
        -:  254:                                               int64_t zeroPoint,
        -:  255:                                               int64_t storageTypeMin,
        -:  256:                                               int64_t storageTypeMax) {
    #####:  257:  return Base::get(storageType.getContext(), flags, storageType, expressedType,
    #####:  258:                   scale, zeroPoint, storageTypeMin, storageTypeMax);
call    0 never executed
call    1 never executed
        -:  259:}
        -:  260:
function _ZN4mlir5quant20UniformQuantizedType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_dlll called 0 returned 0% blocks executed 0%
    #####:  261:UniformQuantizedType UniformQuantizedType::getChecked(
        -:  262:    function_ref<InFlightDiagnostic()> emitError, unsigned flags,
        -:  263:    Type storageType, Type expressedType, double scale, int64_t zeroPoint,
        -:  264:    int64_t storageTypeMin, int64_t storageTypeMax) {
    #####:  265:  return Base::getChecked(emitError, storageType.getContext(), flags,
        -:  266:                          storageType, expressedType, scale, zeroPoint,
    #####:  267:                          storageTypeMin, storageTypeMax);
call    0 never executed
call    1 never executed
        -:  268:}
        -:  269:
function _ZN4mlir5quant20UniformQuantizedType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_dlll called 0 returned 0% blocks executed 0%
    #####:  270:LogicalResult UniformQuantizedType::verify(
        -:  271:    function_ref<InFlightDiagnostic()> emitError, unsigned flags,
        -:  272:    Type storageType, Type expressedType, double scale, int64_t zeroPoint,
        -:  273:    int64_t storageTypeMin, int64_t storageTypeMax) {
    #####:  274:  if (failed(QuantizedType::verify(emitError, flags, storageType, expressedType,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  275:                                   storageTypeMin, storageTypeMax))) {
    #####:  276:    return failure();
        -:  277:  }
        -:  278:
        -:  279:  // Uniform quantization requires fully expressed parameters, including
        -:  280:  // expressed type.
    #####:  281:  if (!expressedType)
branch  0 never executed
branch  1 never executed
    #####:  282:    return emitError() << "uniform quantization requires expressed type";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  283:
        -:  284:  // Verify that the expressed type is floating point.
        -:  285:  // If this restriction is ever eliminated, the parser/printer must be
        -:  286:  // extended.
    #####:  287:  if (!expressedType.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  288:    return emitError() << "expressed type must be floating point";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  289:
        -:  290:  // Verify scale.
    #####:  291:  if (scale <= 0.0 || std::isinf(scale) || std::isnan(scale))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  292:    return emitError() << "illegal scale: " << scale;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  293:
    #####:  294:  return success();
        -:  295:}
        -:  296:
function _ZNK4mlir5quant20UniformQuantizedType8getScaleEv called 0 returned 0% blocks executed 0%
    #####:  297:double UniformQuantizedType::getScale() const { return getImpl()->scale; }
        -:  298:
function _ZNK4mlir5quant20UniformQuantizedType12getZeroPointEv called 0 returned 0% blocks executed 0%
    #####:  299:int64_t UniformQuantizedType::getZeroPoint() const {
    #####:  300:  return getImpl()->zeroPoint;
        -:  301:}
        -:  302:
function _ZN4mlir5quant27UniformQuantizedPerAxisType3getEjNS_4TypeES2_N4llvm8ArrayRefIdEENS4_IlEEill called 0 returned 0% blocks executed 0%
    #####:  303:UniformQuantizedPerAxisType UniformQuantizedPerAxisType::get(
        -:  304:    unsigned flags, Type storageType, Type expressedType,
        -:  305:    ArrayRef<double> scales, ArrayRef<int64_t> zeroPoints,
        -:  306:    int32_t quantizedDimension, int64_t storageTypeMin,
        -:  307:    int64_t storageTypeMax) {
    #####:  308:  return Base::get(storageType.getContext(), flags, storageType, expressedType,
        -:  309:                   scales, zeroPoints, quantizedDimension, storageTypeMin,
    #####:  310:                   storageTypeMax);
call    0 never executed
call    1 never executed
        -:  311:}
        -:  312:
function _ZN4mlir5quant27UniformQuantizedPerAxisType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_NS2_8ArrayRefIdEENS8_IlEEill called 0 returned 0% blocks executed 0%
    #####:  313:UniformQuantizedPerAxisType UniformQuantizedPerAxisType::getChecked(
        -:  314:    function_ref<InFlightDiagnostic()> emitError, unsigned flags,
        -:  315:    Type storageType, Type expressedType, ArrayRef<double> scales,
        -:  316:    ArrayRef<int64_t> zeroPoints, int32_t quantizedDimension,
        -:  317:    int64_t storageTypeMin, int64_t storageTypeMax) {
    #####:  318:  return Base::getChecked(emitError, storageType.getContext(), flags,
        -:  319:                          storageType, expressedType, scales, zeroPoints,
    #####:  320:                          quantizedDimension, storageTypeMin, storageTypeMax);
call    0 never executed
call    1 never executed
        -:  321:}
        -:  322:
function _ZN4mlir5quant27UniformQuantizedPerAxisType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEjNS_4TypeES7_NS2_8ArrayRefIdEENS8_IlEEill called 0 returned 0% blocks executed 0%
    #####:  323:LogicalResult UniformQuantizedPerAxisType::verify(
        -:  324:    function_ref<InFlightDiagnostic()> emitError, unsigned flags,
        -:  325:    Type storageType, Type expressedType, ArrayRef<double> scales,
        -:  326:    ArrayRef<int64_t> zeroPoints, int32_t quantizedDimension,
        -:  327:    int64_t storageTypeMin, int64_t storageTypeMax) {
    #####:  328:  if (failed(QuantizedType::verify(emitError, flags, storageType, expressedType,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  329:                                   storageTypeMin, storageTypeMax))) {
    #####:  330:    return failure();
        -:  331:  }
        -:  332:
        -:  333:  // Uniform quantization requires fully expressed parameters, including
        -:  334:  // expressed type.
    #####:  335:  if (!expressedType)
branch  0 never executed
branch  1 never executed
    #####:  336:    return emitError() << "uniform quantization requires expressed type";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  337:
        -:  338:  // Verify that the expressed type is floating point.
        -:  339:  // If this restriction is ever eliminated, the parser/printer must be
        -:  340:  // extended.
    #####:  341:  if (!expressedType.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  342:    return emitError() << "expressed type must be floating point";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  343:
        -:  344:  // Ensure that the number of scales and zeroPoints match.
    #####:  345:  if (scales.size() != zeroPoints.size())
branch  0 never executed
branch  1 never executed
    #####:  346:    return emitError() << "illegal number of scales and zeroPoints: "
call    0 never executed
call    1 never executed
    #####:  347:                       << scales.size() << ", " << zeroPoints.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  348:
        -:  349:  // Verify scale.
    #####:  350:  for (double scale : scales) {
branch  0 never executed
branch  1 never executed
    #####:  351:    if (scale <= 0.0 || std::isinf(scale) || std::isnan(scale))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  352:      return emitError() << "illegal scale: " << scale;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  353:  }
        -:  354:
    #####:  355:  return success();
        -:  356:}
        -:  357:
function _ZNK4mlir5quant27UniformQuantizedPerAxisType9getScalesEv called 0 returned 0% blocks executed 0%
    #####:  358:ArrayRef<double> UniformQuantizedPerAxisType::getScales() const {
    #####:  359:  return getImpl()->getScales();
        -:  360:}
        -:  361:
function _ZNK4mlir5quant27UniformQuantizedPerAxisType13getZeroPointsEv called 0 returned 0% blocks executed 0%
    #####:  362:ArrayRef<int64_t> UniformQuantizedPerAxisType::getZeroPoints() const {
    #####:  363:  return getImpl()->getZeroPoints();
        -:  364:}
        -:  365:
function _ZNK4mlir5quant27UniformQuantizedPerAxisType21getQuantizedDimensionEv called 0 returned 0% blocks executed 0%
    #####:  366:int32_t UniformQuantizedPerAxisType::getQuantizedDimension() const {
    #####:  367:  return getImpl()->quantizedDimension;
        -:  368:}
        -:  369:
function _ZN4mlir5quant23CalibratedQuantizedType3getENS_4TypeEdd called 0 returned 0% blocks executed 0%
    #####:  370:CalibratedQuantizedType CalibratedQuantizedType::get(Type expressedType,
        -:  371:                                                     double min, double max) {
    #####:  372:  return Base::get(expressedType.getContext(), expressedType, min, max);
call    0 never executed
call    1 never executed
        -:  373:}
        -:  374:
function _ZN4mlir5quant23CalibratedQuantizedType10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEdd called 0 returned 0% blocks executed 0%
    #####:  375:CalibratedQuantizedType CalibratedQuantizedType::getChecked(
        -:  376:    function_ref<InFlightDiagnostic()> emitError, Type expressedType,
        -:  377:    double min, double max) {
    #####:  378:  return Base::getChecked(emitError, expressedType.getContext(), expressedType,
    #####:  379:                          min, max);
call    0 never executed
call    1 never executed
        -:  380:}
        -:  381:
        -:  382:LogicalResult
function _ZN4mlir5quant23CalibratedQuantizedType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeEdd called 0 returned 0% blocks executed 0%
    #####:  383:CalibratedQuantizedType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  384:                                Type expressedType, double min, double max) {
        -:  385:  // Verify that the expressed type is floating point.
        -:  386:  // If this restriction is ever eliminated, the parser/printer must be
        -:  387:  // extended.
    #####:  388:  if (!expressedType.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  389:    return emitError() << "expressed type must be floating point";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  390:  if (max <= min)
branch  0 never executed
branch  1 never executed
    #####:  391:    return emitError() << "illegal min and max: (" << min << ":" << max << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  392:
    #####:  393:  return success();
        -:  394:}
        -:  395:
function _ZNK4mlir5quant23CalibratedQuantizedType6getMinEv called 0 returned 0% blocks executed 0%
    #####:  396:double CalibratedQuantizedType::getMin() const { return getImpl()->min; }
        -:  397:
function _ZNK4mlir5quant23CalibratedQuantizedType6getMaxEv called 0 returned 0% blocks executed 0%
    #####:  398:double CalibratedQuantizedType::getMax() const { return getImpl()->max; }
