        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Vector/TestVectorTransforms.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Vector/CMakeFiles/MLIRVectorTestPasses.dir/TestVectorTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Vector/CMakeFiles/MLIRVectorTestPasses.dir/TestVectorTransforms.cpp.gcda
        -:    0:Runs:325563
        -:    1://===- TestVectorTransforms.cpp - Test Vector transforms and lowerings ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include <type_traits>
        -:   10:
        -:   11:#include "mlir/Analysis/SliceAnalysis.h"
        -:   12:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   15:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   16:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   17:#include "mlir/Dialect/Linalg/Passes.h"
        -:   18:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   19:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   20:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   21:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   22:#include "mlir/Dialect/Vector/Transforms/VectorDistribution.h"
        -:   23:#include "mlir/Dialect/Vector/Transforms/VectorTransforms.h"
        -:   24:#include "mlir/Pass/Pass.h"
        -:   25:#include "mlir/Pass/PassManager.h"
        -:   26:#include "mlir/Support/LLVM.h"
        -:   27:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   28:
        -:   29:using namespace mlir;
        -:   30:using namespace mlir::linalg;
        -:   31:using namespace mlir::vector;
        -:   32:
        -:   33:namespace {
        -:   34:
        -:   35:struct TestVectorToVectorLowering
        -:   36:    : public PassWrapper<TestVectorToVectorLowering,
        -:   37:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_126TestVectorToVectorLowering13resolveTypeIDEv called 326642 returned 100% blocks executed 100%
   326642:   38:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorToVectorLowering)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   39:
function _ZN12_GLOBAL__N_126TestVectorToVectorLoweringC2Ev called 326643 returned 100% blocks executed 100%
   326643:   40:  TestVectorToVectorLowering() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_126TestVectorToVectorLoweringC2ERKS0_ called 62064 returned 100% blocks executed 100%
    62064:   41:  TestVectorToVectorLowering(const TestVectorToVectorLowering &pass)
    62064:   42:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
function _ZNK12_GLOBAL__N_126TestVectorToVectorLowering11getArgumentEv called 325596 returned 100% blocks executed 100%
   325596:   43:  StringRef getArgument() const final {
   325596:   44:    return "test-vector-to-vector-lowering";
        -:   45:  }
function _ZNK12_GLOBAL__N_126TestVectorToVectorLowering14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:   46:  StringRef getDescription() const final {
   325562:   47:    return "Test lowering patterns between ops in the vector dialect";
        -:   48:  }
        -:   49:
function _ZNK12_GLOBAL__N_126TestVectorToVectorLowering20getDependentDialectsERN4mlir15DialectRegistryE called 1080 returned 100% blocks executed 100%
     1080:   50:  void getDependentDialects(DialectRegistry &registry) const override {
     1080:   51:    registry.insert<AffineDialect>();
call    0 returned 100%
     1080:   52:  }
        -:   53:
        -:   54:  Option<bool> unroll{*this, "unroll", llvm::cl::desc("Include unrolling"),
        -:   55:                      llvm::cl::init(false)};
        -:   56:
function _ZN12_GLOBAL__N_126TestVectorToVectorLowering14runOnOperationEv called 1063 returned 100% blocks executed 60%
     1063:   57:  void runOnOperation() override {
     1063:   58:    auto *ctx = &getContext();
call    0 returned 100%
     1063:   59:    RewritePatternSet patterns(ctx);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1063:   60:    if (unroll) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   61:      populateVectorUnrollPatterns(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   62:          patterns,
    #####:   63:          UnrollVectorOptions().setNativeShapeFn(getShape).setFilterConstraint(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   64:              filter));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   65:    }
     1063:   66:    populateVectorToVectorCanonicalizationPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1061:   67:    populateBubbleVectorBitCastOpPatterns(patterns);
call    0 returned 100%
call    1 returned 98%
     1041:   68:    populateCastAwayVectorLeadingOneDimPatterns(patterns);
call    0 returned 100%
call    1 returned 101%
     1047:   69:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 101%
call    1 returned 100%
call    2 returned 100%
call    3 returned 101%
call    4 returned 100%
     1066:   70:  }
        -:   71:
        -:   72:private:
        -:   73:  // Return the target shape based on op type.
function _ZN12_GLOBAL__N_126TestVectorToVectorLowering8getShapeEPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   74:  static Optional<SmallVector<int64_t, 4>> getShape(Operation *op) {
    #####:   75:    if (isa<arith::AddFOp, arith::SelectOp, arith::CmpFOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:      return SmallVector<int64_t, 4>(2, 2);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   77:    if (isa<vector::ContractionOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:      return SmallVector<int64_t, 4>(3, 2);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   79:    // For transfer ops, just propagate the shape coming from
        -:   80:    // InsertStridedSlices/ExtractStridedSlices.
    #####:   81:    if (auto readOp = dyn_cast<vector::TransferReadOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:      VectorType dstVec;
    #####:   83:      for (Operation *users : readOp->getUsers()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   84:        auto extract = dyn_cast<ExtractStridedSliceOp>(users);
call    0 never executed
    #####:   85:        if (!extract)
branch  0 never executed
branch  1 never executed
    #####:   86:          return llvm::None;
    #####:   87:        auto vecType = extract.getResult().getType().cast<VectorType>();
call    0 never executed
    #####:   88:        if (dstVec && dstVec != vecType)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   89:          return llvm::None;
    #####:   90:        dstVec = vecType;
call    0 never executed
        -:   91:      }
    #####:   92:      return SmallVector<int64_t, 4>(dstVec.getShape().begin(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   93:                                     dstVec.getShape().end());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   94:    }
    #####:   95:    if (auto writeOp = dyn_cast<vector::TransferWriteOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:      auto insert = writeOp.getVector().getDefiningOp<InsertStridedSliceOp>();
call    0 never executed
call    1 never executed
    #####:   97:      if (!insert)
branch  0 never executed
branch  1 never executed
    #####:   98:        return llvm::None;
    #####:   99:      ArrayRef<int64_t> shape = insert.getSourceVectorType().getShape();
call    0 never executed
call    1 never executed
    #####:  100:      return SmallVector<int64_t, 4>(shape.begin(), shape.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  101:    }
    #####:  102:    return llvm::None;
        -:  103:  }
        -:  104:
function _ZN12_GLOBAL__N_126TestVectorToVectorLowering6filterEPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  105:  static LogicalResult filter(Operation *op) {
    #####:  106:    return success(isa<arith::AddFOp, arith::SelectOp, arith::CmpFOp,
    #####:  107:                       ContractionOp, TransferReadOp, TransferWriteOp>(op));
call    0 never executed
        -:  108:  }
        -:  109:};
        -:  110:
        -:  111:struct TestVectorContractionLowering
        -:  112:    : public PassWrapper<TestVectorContractionLowering,
        -:  113:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_129TestVectorContractionLowering13resolveTypeIDEv called 326599 returned 100% blocks executed 100%
   326599:  114:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorContractionLowering)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  115:
function _ZNK12_GLOBAL__N_129TestVectorContractionLowering11getArgumentEv called 325591 returned 100% blocks executed 100%
   325591:  116:  StringRef getArgument() const final {
   325591:  117:    return "test-vector-contraction-lowering";
        -:  118:  }
function _ZNK12_GLOBAL__N_129TestVectorContractionLowering14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  119:  StringRef getDescription() const final {
   325562:  120:    return "Test lowering patterns that lower contract ops in the vector "
   325562:  121:           "dialect";
        -:  122:  }
function _ZN12_GLOBAL__N_129TestVectorContractionLoweringC2Ev called 326600 returned 100% blocks executed 100%
   326600:  123:  TestVectorContractionLowering() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
function _ZN12_GLOBAL__N_129TestVectorContractionLoweringC2ERKS0_ called 59544 returned 100% blocks executed 100%
    59544:  124:  TestVectorContractionLowering(const TestVectorContractionLowering &pass)
    59544:  125:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  126:
        -:  127:  Option<bool> lowerToFlatMatrix{
        -:  128:      *this, "vector-lower-matrix-intrinsics",
        -:  129:      llvm::cl::desc("Lower vector.contract to llvm.intr.matrix.multiply"),
        -:  130:      llvm::cl::init(false)};
        -:  131:  Option<bool> lowerToOuterProduct{
        -:  132:      *this, "vector-outerproduct",
        -:  133:      llvm::cl::desc("Lower vector.contract to vector.outerproduct"),
        -:  134:      llvm::cl::init(false)};
        -:  135:  Option<bool> lowerToFilterOuterProduct{
        -:  136:      *this, "vector-filter-outerproduct",
        -:  137:      llvm::cl::desc("Lower vector.contract to vector.outerproduct but not for "
        -:  138:                     "vectors of size 4."),
        -:  139:      llvm::cl::init(false)};
        -:  140:  Option<bool> lowerToParallelArith{
        -:  141:      *this, "vector-parallel-arith",
        -:  142:      llvm::cl::desc("Lower vector.contract to elementwise vector ops."),
        -:  143:      llvm::cl::init(false)};
        -:  144:
function _ZN12_GLOBAL__N_129TestVectorContractionLowering14runOnOperationEv called 881 returned 100% blocks executed 46%
      881:  145:  void runOnOperation() override {
     1762:  146:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  147:
        -:  148:    // Test on one pattern in isolation.
      881:  149:    if (lowerToOuterProduct) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  150:      VectorContractLowering lowering = VectorContractLowering::OuterProduct;
    #####:  151:      VectorTransformsOptions options{lowering};
    #####:  152:      patterns.add<ContractionOpToOuterProductOpLowering>(options,
    #####:  153:                                                          &getContext());
call    0 never executed
call    1 never executed
    #####:  154:      (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  155:      return;
        -:  156:    }
        -:  157:
        -:  158:    // Test on one pattern in isolation.
      881:  159:    if (lowerToFilterOuterProduct) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  160:      VectorContractLowering lowering = VectorContractLowering::OuterProduct;
    #####:  161:      VectorTransformsOptions options{lowering};
    #####:  162:      patterns.add<ContractionOpToOuterProductOpLowering>(
function _ZZN12_GLOBAL__N_129TestVectorContractionLowering14runOnOperationEvENKUlN4mlir6vector13ContractionOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  163:          options, &getContext(), /*benefit=*/1, [](vector::ContractionOp op) {
call    0 never executed
        -:  164:            // Only lowers vector.contract where the lhs as a type vector<MxNx?>
        -:  165:            // where M is not 4.
    #####:  166:            if (op.getRhsType().getShape()[0] == 4)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  167:              return failure();
    #####:  168:            return success();
    #####:  169:          });
call    0 never executed
    #####:  170:      (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  171:      return;
        -:  172:    }
        -:  173:
      881:  174:    if (lowerToParallelArith) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  175:      vector::populateVectorContractLoweringPatterns(
call    0 never executed
        -:  176:          patterns,
    #####:  177:          vector::VectorTransformsOptions().setVectorTransformsOptions(
call    0 never executed
    #####:  178:              vector::VectorContractLowering::ParallelArith));
call    0 never executed
    #####:  179:      (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  180:      return;
        -:  181:    }
        -:  182:
        -:  183:    // Test on all contract lowering patterns.
      881:  184:    VectorContractLowering contractLowering = VectorContractLowering::Dot;
      881:  185:    if (lowerToFlatMatrix)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:      contractLowering = VectorContractLowering::Matmul;
      881:  187:    VectorMultiReductionLowering vectorMultiReductionLowering =
        -:  188:        VectorMultiReductionLowering::InnerParallel;
      881:  189:    VectorTransformsOptions options{contractLowering,
        -:  190:                                    vectorMultiReductionLowering,
      881:  191:                                    VectorTransposeLowering()};
      881:  192:    populateVectorBroadcastLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      882:  193:    populateVectorContractLoweringPatterns(patterns, options);
call    0 returned 100%
call    1 returned 100%
      881:  194:    populateVectorMaskOpLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      881:  195:    populateVectorShapeCastLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      881:  196:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  197:  }
        -:  198:};
        -:  199:
        -:  200:struct TestVectorTransposeLowering
        -:  201:    : public PassWrapper<TestVectorTransposeLowering,
        -:  202:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_127TestVectorTransposeLowering13resolveTypeIDEv called 326608 returned 100% blocks executed 100%
   326608:  203:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorTransposeLowering)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  204:
function _ZNK12_GLOBAL__N_127TestVectorTransposeLowering11getArgumentEv called 325620 returned 100% blocks executed 100%
   325620:  205:  StringRef getArgument() const final {
   325620:  206:    return "test-vector-transpose-lowering";
        -:  207:  }
function _ZNK12_GLOBAL__N_127TestVectorTransposeLowering14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  208:  StringRef getDescription() const final {
   325562:  209:    return "Test lowering patterns that lower contract ops in the vector "
   325562:  210:           "dialect";
        -:  211:  }
function _ZN12_GLOBAL__N_127TestVectorTransposeLoweringC2Ev called 326609 returned 100% blocks executed 100%
   326609:  212:  TestVectorTransposeLowering() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
function _ZN12_GLOBAL__N_127TestVectorTransposeLoweringC2ERKS0_ called 60912 returned 100% blocks executed 100%
    60912:  213:  TestVectorTransposeLowering(const TestVectorTransposeLowering &pass)
    60912:  214:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  215:
        -:  216:  Option<bool> lowerToEltwise{
        -:  217:      *this, "eltwise",
        -:  218:      llvm::cl::desc("Lower 2-D vector.transpose to eltwise insert/extract"),
        -:  219:      llvm::cl::init(false)};
        -:  220:  Option<bool> lowerToFlatTranspose{
        -:  221:      *this, "flat",
        -:  222:      llvm::cl::desc("Lower 2-D vector.transpose to vector.flat_transpose"),
        -:  223:      llvm::cl::init(false)};
        -:  224:  Option<bool> lowerToShuffleTranspose{
        -:  225:      *this, "shuffle",
        -:  226:      llvm::cl::desc("Lower 2-D vector.transpose to shape_cast + shuffle"),
        -:  227:      llvm::cl::init(false)};
        -:  228:  Option<bool> lowerToAvx2{
        -:  229:      *this, "avx2",
        -:  230:      llvm::cl::desc("Lower vector.transpose to avx2-specific patterns"),
        -:  231:      llvm::cl::init(false)};
        -:  232:
function _ZNK12_GLOBAL__N_127TestVectorTransposeLowering20getDependentDialectsERN4mlir15DialectRegistryE called 1046 returned 100% blocks executed 100%
     1046:  233:  void getDependentDialects(DialectRegistry &registry) const override {
     1046:  234:    registry.insert<LLVM::LLVMDialect>();
call    0 returned 100%
     1046:  235:  }
        -:  236:
function _ZN12_GLOBAL__N_127TestVectorTransposeLowering14runOnOperationEv called 938 returned 100% blocks executed 65%
      938:  237:  void runOnOperation() override {
      938:  238:    func::FuncOp funcOp = getOperation();
call    0 returned 100%
      938:  239:    MLIRContext *context = funcOp.getContext();
call    0 returned 100%
     1875:  240:    RewritePatternSet patterns(context);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  241:
      939:  242:    vector::VectorTransformsOptions vectorTransformOptions;
      939:  243:    if (lowerToEltwise) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:      vectorTransformOptions =
        -:  245:          vectorTransformOptions.setVectorTransposeLowering(
      939:  246:              VectorTransposeLowering::EltWise);
        -:  247:    }
      939:  248:    if (lowerToFlatTranspose) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  249:      vectorTransformOptions =
        -:  250:          vectorTransformOptions.setVectorTransposeLowering(
    #####:  251:              VectorTransposeLowering::Flat);
        -:  252:    }
      939:  253:    if (lowerToShuffleTranspose) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  254:      vectorTransformOptions =
        -:  255:          vectorTransformOptions.setVectorTransposeLowering(
    #####:  256:              VectorTransposeLowering::Shuffle);
        -:  257:    }
      939:  258:    vector::populateVectorTransposeLoweringPatterns(patterns,
call    0 returned 100%
call    1 returned 98%
        -:  259:                                                    vectorTransformOptions);
        -:  260:
      924:  261:    if (lowerToAvx2) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  262:      auto avx2LoweringOptions =
    #####:  263:          x86vector::avx2::LoweringOptions().setTransposeOptions(
call    0 never executed
    #####:  264:              x86vector::avx2::TransposeLoweringOptions()
call    0 never executed
    #####:  265:                  .lower4x8xf32()
call    0 never executed
    #####:  266:                  .lower8x8xf32());
call    0 never executed
    #####:  267:      x86vector::avx2::populateSpecializedTransposeLoweringPatterns(
call    0 never executed
        -:  268:          patterns, avx2LoweringOptions, /*benefit=*/10);
        -:  269:    }
        -:  270:
      924:  271:    if (failed(applyPatternsAndFoldGreedily(funcOp, std::move(patterns))))
call    0 returned 100%
call    1 returned 101%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  272:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  273:  }
        -:  274:};
        -:  275:
        -:  276:struct TestVectorUnrollingPatterns
        -:  277:    : public PassWrapper<TestVectorUnrollingPatterns,
        -:  278:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_127TestVectorUnrollingPatterns13resolveTypeIDEv called 326603 returned 100% blocks executed 100%
   326603:  279:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorUnrollingPatterns)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  280:
function _ZNK12_GLOBAL__N_127TestVectorUnrollingPatterns11getArgumentEv called 325604 returned 100% blocks executed 100%
   325604:  281:  StringRef getArgument() const final {
   325604:  282:    return "test-vector-unrolling-patterns";
        -:  283:  }
function _ZNK12_GLOBAL__N_127TestVectorUnrollingPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  284:  StringRef getDescription() const final {
   325562:  285:    return "Test lowering patterns to unroll contract ops in the vector "
   325562:  286:           "dialect";
        -:  287:  }
function _ZN12_GLOBAL__N_127TestVectorUnrollingPatternsC2Ev called 326604 returned 100% blocks executed 100%
   326604:  288:  TestVectorUnrollingPatterns() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN12_GLOBAL__N_127TestVectorUnrollingPatternsC2ERKS0_ called 61056 returned 100% blocks executed 100%
    61056:  289:  TestVectorUnrollingPatterns(const TestVectorUnrollingPatterns &pass)
    61056:  290:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN12_GLOBAL__N_127TestVectorUnrollingPatterns14runOnOperationEv called 848 returned 100% blocks executed 62%
      848:  291:  void runOnOperation() override {
      848:  292:    MLIRContext *ctx = &getContext();
call    0 returned 100%
      848:  293:    RewritePatternSet patterns(ctx);
call    0 returned 100%
     1696:  294:    populateVectorUnrollPatterns(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      848:  295:        patterns, UnrollVectorOptions()
call    0 returned 100%
      848:  296:                      .setNativeShape(ArrayRef<int64_t>{2, 2})
call    0 returned 100%
    #####:  297:                      .setFilterConstraint([](Operation *op) {
    #####:  298:                        return success(isa<arith::AddFOp, vector::FMAOp,
    #####:  299:                                           vector::MultiDimReductionOp>(op));
call    0 never executed
     1696:  300:                      }));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1696:  301:    populateVectorUnrollPatterns(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      848:  302:        patterns, UnrollVectorOptions()
call    0 returned 100%
      848:  303:                      .setNativeShape(ArrayRef<int64_t>{2})
call    0 returned 100%
    #####:  304:                      .setFilterConstraint([](Operation *op) {
    #####:  305:                        return success(isa<vector::ReductionOp>(op));
call    0 never executed
     1696:  306:                      }));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1696:  307:    populateVectorUnrollPatterns(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      848:  308:        patterns, UnrollVectorOptions()
call    0 returned 100%
      848:  309:                      .setNativeShape(ArrayRef<int64_t>{1, 3, 4, 2})
call    0 returned 100%
    #####:  310:                      .setFilterConstraint([](Operation *op) {
    #####:  311:                        return success(isa<vector::TransposeOp>(op));
call    0 never executed
     1696:  312:                      }));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  313:
      848:  314:    if (unrollBasedOnType) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  315:      UnrollVectorOptions::NativeShapeFnType nativeShapeFn =
function _ZZN12_GLOBAL__N_127TestVectorUnrollingPatterns14runOnOperationEvENKUlPN4mlir9OperationEE2_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  316:          [](Operation *op) -> Optional<SmallVector<int64_t, 4>> {
    #####:  317:        vector::ContractionOp contractOp = cast<vector::ContractionOp>(op);
call    0 never executed
    #####:  318:        SmallVector<int64_t, 4> nativeShape(
    #####:  319:            contractOp.getIteratorTypes().size(), 4);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  320:        Type lhsType = contractOp.getLhsType().getElementType();
call    0 never executed
call    1 never executed
    #####:  321:        nativeShape[nativeShape.size() - 1] = lhsType.isF16() ? 4 : 2;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  322:        return nativeShape;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  323:      };
call    0 never executed
        -:  324:
    #####:  325:      UnrollVectorOptions opts;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  326:      opts.setNativeShapeFn(nativeShapeFn)
call    0 never executed
call    1 never executed
        -:  327:          .setFilterConstraint(
    #####:  328:              [](Operation *op) { return success(isa<ContractionOp>(op)); });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  329:
    #####:  330:      if (!unrollOrder.empty()) {
branch  0 never executed
branch  1 never executed
function _ZZN12_GLOBAL__N_127TestVectorUnrollingPatterns14runOnOperationEvENKUlPN4mlir9OperationEE4_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  331:        opts.setUnrollTraversalOrderFn([this](Operation *op)
    #####:  332:                                           -> Optional<SmallVector<int64_t>> {
    #####:  333:          vector::ContractionOp contractOp = cast<vector::ContractionOp>(op);
call    0 never executed
    #####:  334:          if (contractOp.getIteratorTypes().size() == unrollOrder.size())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  335:            return SmallVector<int64_t>(unrollOrder.begin(), unrollOrder.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  336:          return None;
    #####:  337:        });
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  338:      }
    #####:  339:      populateVectorUnrollPatterns(patterns, opts);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  340:    } else {
      848:  341:      auto nativeShapeFn =
function _ZZN12_GLOBAL__N_127TestVectorUnrollingPatterns14runOnOperationEvENKUlPN4mlir9OperationEE5_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  342:          [](Operation *op) -> Optional<SmallVector<int64_t, 4>> {
    #####:  343:        auto contractOp = dyn_cast<ContractionOp>(op);
call    0 never executed
    #####:  344:        if (!contractOp)
branch  0 never executed
branch  1 never executed
    #####:  345:          return None;
    #####:  346:        return SmallVector<int64_t, 4>(contractOp.getIteratorTypes().size(), 2);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  347:      };
     1696:  348:      populateVectorUnrollPatterns(patterns,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     1696:  349:                                   UnrollVectorOptions()
call    0 returned 100%
     1696:  350:                                       .setNativeShapeFn(nativeShapeFn)
call    0 returned 100%
call    1 returned 100%
    #####:  351:                                       .setFilterConstraint([](Operation *op) {
    #####:  352:                                         return success(isa<ContractionOp>(op));
call    0 never executed
     1696:  353:                                       }));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  354:    }
      848:  355:    populateVectorToVectorCanonicalizationPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      848:  356:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      848:  357:  }
        -:  358:
        -:  359:  ListOption<int64_t> unrollOrder{*this, "unroll-order",
        -:  360:                                  llvm::cl::desc("set the unroll order")};
        -:  361:
        -:  362:  Option<bool> unrollBasedOnType{
        -:  363:      *this, "unroll-based-on-type",
        -:  364:      llvm::cl::desc("Set the unroll factor based on type of the operation"),
        -:  365:      llvm::cl::init(false)};
        -:  366:};
        -:  367:
        -:  368:struct TestVectorTransferUnrollingPatterns
        -:  369:    : public PassWrapper<TestVectorTransferUnrollingPatterns,
        -:  370:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_135TestVectorTransferUnrollingPatterns13resolveTypeIDEv called 326626 returned 100% blocks executed 100%
   326626:  371:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  372:      TestVectorTransferUnrollingPatterns)
        -:  373:
function _ZN12_GLOBAL__N_135TestVectorTransferUnrollingPatternsC2Ev called 326627 returned 100% blocks executed 100%
   326627:  374:  TestVectorTransferUnrollingPatterns() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_135TestVectorTransferUnrollingPatternsC2ERKS0_ called 61056 returned 100% blocks executed 100%
    61056:  375:  TestVectorTransferUnrollingPatterns(
        -:  376:      const TestVectorTransferUnrollingPatterns &pass)
    61056:  377:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
        -:  378:
function _ZNK12_GLOBAL__N_135TestVectorTransferUnrollingPatterns20getDependentDialectsERN4mlir15DialectRegistryE called 1064 returned 100% blocks executed 100%
     1064:  379:  void getDependentDialects(DialectRegistry &registry) const override {
     1064:  380:    registry.insert<AffineDialect>();
call    0 returned 100%
     1064:  381:  }
function _ZNK12_GLOBAL__N_135TestVectorTransferUnrollingPatterns11getArgumentEv called 325623 returned 100% blocks executed 100%
   325623:  382:  StringRef getArgument() const final {
   325623:  383:    return "test-vector-transfer-unrolling-patterns";
        -:  384:  }
function _ZNK12_GLOBAL__N_135TestVectorTransferUnrollingPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  385:  StringRef getDescription() const final {
   325562:  386:    return "Test lowering patterns to unroll transfer ops in the vector "
   325562:  387:           "dialect";
        -:  388:  }
function _ZN12_GLOBAL__N_135TestVectorTransferUnrollingPatterns14runOnOperationEv called 948 returned 100% blocks executed 77%
      948:  389:  void runOnOperation() override {
      948:  390:    MLIRContext *ctx = &getContext();
call    0 returned 100%
      949:  391:    RewritePatternSet patterns(ctx);
call    0 returned 100%
     1900:  392:    UnrollVectorOptions opts;
call    0 returned 100%
call    1 returned 100%
      949:  393:    opts.setNativeShape(ArrayRef<int64_t>{2, 2})
call    0 returned 100%
    #####:  394:        .setFilterConstraint([](Operation *op) {
    #####:  395:          return success(
    #####:  396:              isa<vector::TransferReadOp, vector::TransferWriteOp>(op));
call    0 never executed
      951:  397:        });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      950:  398:    if (reverseUnrollOrder.getValue()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  399:      opts.setUnrollTraversalOrderFn(
function _ZZN12_GLOBAL__N_135TestVectorTransferUnrollingPatterns14runOnOperationEvENKUlPN4mlir9OperationEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  400:          [](Operation *op) -> Optional<SmallVector<int64_t>> {
    #####:  401:            int64_t numLoops = 0;
    #####:  402:            if (auto readOp = dyn_cast<vector::TransferReadOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  403:              numLoops = readOp.getVectorType().getRank();
call    0 never executed
call    1 never executed
    #####:  404:            else if (auto writeOp = dyn_cast<vector::TransferWriteOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  405:              numLoops = writeOp.getVectorType().getRank();
call    0 never executed
call    1 never executed
        -:  406:            else
    #####:  407:              return None;
    #####:  408:            auto order = llvm::reverse(llvm::seq<int64_t>(0, numLoops));
call    0 never executed
call    1 never executed
    #####:  409:            return llvm::to_vector(order);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  410:          });
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  411:    }
      950:  412:    populateVectorUnrollPatterns(patterns, opts);
call    0 returned 100%
call    1 returned 100%
      951:  413:    populateVectorToVectorCanonicalizationPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      948:  414:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      950:  415:  }
        -:  416:
        -:  417:  Option<bool> reverseUnrollOrder{
        -:  418:      *this, "reverse-unroll-order",
        -:  419:      llvm::cl::desc(
        -:  420:          "reverse the order of unrolling of vector transfer operations"),
        -:  421:      llvm::cl::init(false)};
        -:  422:};
        -:  423:
        -:  424:struct TestVectorTransferFullPartialSplitPatterns
        -:  425:    : public PassWrapper<TestVectorTransferFullPartialSplitPatterns,
        -:  426:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatterns13resolveTypeIDEv called 326626 returned 100% blocks executed 100%
   326626:  427:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  428:      TestVectorTransferFullPartialSplitPatterns)
        -:  429:
function _ZNK12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatterns11getArgumentEv called 325592 returned 100% blocks executed 100%
   325592:  430:  StringRef getArgument() const final {
   325592:  431:    return "test-vector-transfer-full-partial-split";
        -:  432:  }
function _ZNK12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  433:  StringRef getDescription() const final {
   325562:  434:    return "Test lowering patterns to split "
   325562:  435:           "transfer ops via scf.if + linalg ops";
        -:  436:  }
function _ZN12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatternsC2Ev called 326627 returned 100% blocks executed 100%
   326627:  437:  TestVectorTransferFullPartialSplitPatterns() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatternsC2ERKS0_ called 61128 returned 100% blocks executed 100%
    61128:  438:  TestVectorTransferFullPartialSplitPatterns(
        -:  439:      const TestVectorTransferFullPartialSplitPatterns &pass)
    61128:  440:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
        -:  441:
function _ZNK12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatterns20getDependentDialectsERN4mlir15DialectRegistryE called 1064 returned 100% blocks executed 100%
     1064:  442:  void getDependentDialects(DialectRegistry &registry) const override {
     1064:  443:    registry.insert<AffineDialect, linalg::LinalgDialect, memref::MemRefDialect,
call    0 returned 100%
     1064:  444:                    scf::SCFDialect>();
     1064:  445:  }
        -:  446:
        -:  447:  Option<bool> useLinalgOps{
        -:  448:      *this, "use-memref-copy",
        -:  449:      llvm::cl::desc("Split using a unmasked vector.transfer + linalg.fill + "
        -:  450:                     "memref.copy operations."),
        -:  451:      llvm::cl::init(false)};
function _ZN12_GLOBAL__N_142TestVectorTransferFullPartialSplitPatterns14runOnOperationEv called 1005 returned 99% blocks executed 100%
     1005:  452:  void runOnOperation() override {
     1005:  453:    MLIRContext *ctx = &getContext();
call    0 returned 100%
     1004:  454:    RewritePatternSet patterns(ctx);
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     1004:  455:    VectorTransformsOptions options;
     1004:  456:    if (useLinalgOps)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     1004:  457:      options.setVectorTransferSplit(VectorTransferSplit::LinalgCopy);
        -:  458:    else
     1003:  459:      options.setVectorTransferSplit(VectorTransferSplit::VectorTransfer);
     1004:  460:    patterns.add<VectorTransferFullPartialRewriter>(ctx, options);
call    0 returned 100%
     1003:  461:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 98%
call    3 returned 101%
call    4 returned 99%
      999:  462:  }
        -:  463:};
        -:  464:
   388174:  465:struct TestVectorTransferOpt
call    0 returned 100%
call    1 returned 100%
        -:  466:    : public PassWrapper<TestVectorTransferOpt, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_121TestVectorTransferOpt13resolveTypeIDEv called 326613 returned 100% blocks executed 100%
   326613:  467:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorTransferOpt)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  468:
function _ZNK12_GLOBAL__N_121TestVectorTransferOpt11getArgumentEv called 325607 returned 100% blocks executed 100%
   325607:  469:  StringRef getArgument() const final { return "test-vector-transferop-opt"; }
function _ZNK12_GLOBAL__N_121TestVectorTransferOpt14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  470:  StringRef getDescription() const final {
   325562:  471:    return "Test optimization transformations for transfer ops";
        -:  472:  }
function _ZN12_GLOBAL__N_121TestVectorTransferOpt14runOnOperationEv called 900 returned 99% blocks executed 100%
      900:  473:  void runOnOperation() override { transferOpflowOpt(getOperation()); }
call    0 returned 100%
call    1 returned 99%
        -:  474:};
        -:  475:
   388169:  476:struct TestVectorTransferLoweringPatterns
call    0 returned 100%
call    1 returned 100%
        -:  477:    : public PassWrapper<TestVectorTransferLoweringPatterns,
        -:  478:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_134TestVectorTransferLoweringPatterns13resolveTypeIDEv called 326608 returned 100% blocks executed 100%
   326608:  479:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  480:      TestVectorTransferLoweringPatterns)
        -:  481:
function _ZNK12_GLOBAL__N_134TestVectorTransferLoweringPatterns20getDependentDialectsERN4mlir15DialectRegistryE called 1046 returned 100% blocks executed 100%
     1046:  482:  void getDependentDialects(DialectRegistry &registry) const override {
     1046:  483:    registry.insert<tensor::TensorDialect, memref::MemRefDialect>();
call    0 returned 100%
     1046:  484:  }
function _ZNK12_GLOBAL__N_134TestVectorTransferLoweringPatterns11getArgumentEv called 325594 returned 100% blocks executed 100%
   325594:  485:  StringRef getArgument() const final {
   325594:  486:    return "test-vector-transfer-lowering-patterns";
        -:  487:  }
function _ZNK12_GLOBAL__N_134TestVectorTransferLoweringPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  488:  StringRef getDescription() const final {
   325562:  489:    return "Test lowering patterns to lower transfer ops to other vector ops";
        -:  490:  }
function _ZN12_GLOBAL__N_134TestVectorTransferLoweringPatterns14runOnOperationEv called 962 returned 100% blocks executed 100%
      962:  491:  void runOnOperation() override {
      962:  492:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      963:  493:    populateVectorTransferLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 99%
      952:  494:    populateVectorTransferPermutationMapLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 101%
      958:  495:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 101%
call    4 returned 100%
      962:  496:  }
        -:  497:};
        -:  498:
        -:  499:struct TestVectorMultiReductionLoweringPatterns
        -:  500:    : public PassWrapper<TestVectorMultiReductionLoweringPatterns,
        -:  501:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_140TestVectorMultiReductionLoweringPatterns13resolveTypeIDEv called 325562 returned 100% blocks executed 100%
   325562:  502:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  503:      TestVectorMultiReductionLoweringPatterns)
        -:  504:
function _ZN12_GLOBAL__N_140TestVectorMultiReductionLoweringPatternsC2Ev called 325563 returned 100% blocks executed 100%
   325563:  505:  TestVectorMultiReductionLoweringPatterns() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_140TestVectorMultiReductionLoweringPatternsC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:  506:  TestVectorMultiReductionLoweringPatterns(
        -:  507:      const TestVectorMultiReductionLoweringPatterns &pass)
    #####:  508:      : PassWrapper(pass) {}
call    0 never executed
call    1 never executed
function _ZNK12_GLOBAL__N_140TestVectorMultiReductionLoweringPatterns20getDependentDialectsERN4mlir15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:  509:  void getDependentDialects(DialectRegistry &registry) const override {
    #####:  510:    registry.insert<memref::MemRefDialect>();
call    0 never executed
    #####:  511:  }
function _ZNK12_GLOBAL__N_140TestVectorMultiReductionLoweringPatterns11getArgumentEv called 325562 returned 100% blocks executed 100%
   325562:  512:  StringRef getArgument() const final {
   325562:  513:    return "test-vector-multi-reduction-lowering-patterns";
        -:  514:  }
function _ZNK12_GLOBAL__N_140TestVectorMultiReductionLoweringPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  515:  StringRef getDescription() const final {
   325562:  516:    return "Test lowering patterns to lower vector.multi_reduction to other "
   325562:  517:           "vector ops";
        -:  518:  }
        -:  519:  Option<bool> useOuterReductions{
        -:  520:      *this, "use-outer-reductions",
        -:  521:      llvm::cl::desc("Move reductions to outer most dimensions"),
        -:  522:      llvm::cl::init(false)};
function _ZN12_GLOBAL__N_140TestVectorMultiReductionLoweringPatterns14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  523:  void runOnOperation() override {
    #####:  524:    RewritePatternSet patterns(&getContext());
call    0 never executed
call    1 never executed
    #####:  525:    populateVectorMultiReductionLoweringPatterns(
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  526:        patterns, useOuterReductions
        -:  527:                      ? vector::VectorMultiReductionLowering::InnerParallel
    #####:  528:                      : vector::VectorMultiReductionLowering::InnerReduction);
branch  0 never executed
branch  1 never executed
    #####:  529:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  530:  }
        -:  531:};
        -:  532:
        -:  533:struct TestVectorTransferCollapseInnerMostContiguousDims
        -:  534:    : public PassWrapper<TestVectorTransferCollapseInnerMostContiguousDims,
        -:  535:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_149TestVectorTransferCollapseInnerMostContiguousDims13resolveTypeIDEv called 325562 returned 100% blocks executed 100%
   325562:  536:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  537:      TestVectorTransferCollapseInnerMostContiguousDims)
        -:  538:
   325563:  539:  TestVectorTransferCollapseInnerMostContiguousDims() = default;
call    0 returned 100%
    #####:  540:  TestVectorTransferCollapseInnerMostContiguousDims(
call    0 never executed
        -:  541:      const TestVectorTransferCollapseInnerMostContiguousDims &pass) = default;
        -:  542:
function _ZNK12_GLOBAL__N_149TestVectorTransferCollapseInnerMostContiguousDims20getDependentDialectsERN4mlir15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:  543:  void getDependentDialects(DialectRegistry &registry) const override {
    #####:  544:    registry.insert<memref::MemRefDialect, AffineDialect>();
call    0 never executed
    #####:  545:  }
        -:  546:
function _ZNK12_GLOBAL__N_149TestVectorTransferCollapseInnerMostContiguousDims11getArgumentEv called 325562 returned 100% blocks executed 100%
   325562:  547:  StringRef getArgument() const final {
   325562:  548:    return "test-vector-transfer-collapse-inner-most-dims";
        -:  549:  }
        -:  550:
function _ZNK12_GLOBAL__N_149TestVectorTransferCollapseInnerMostContiguousDims14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  551:  StringRef getDescription() const final {
   325562:  552:    return "Test lowering patterns that reducedes the rank of the vector "
   325562:  553:           "transfer memory and vector operands.";
        -:  554:  }
        -:  555:
function _ZN12_GLOBAL__N_149TestVectorTransferCollapseInnerMostContiguousDims14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  556:  void runOnOperation() override {
    #####:  557:    RewritePatternSet patterns(&getContext());
call    0 never executed
call    1 never executed
    #####:  558:    populateVectorTransferCollapseInnerMostContiguousDimsPatterns(patterns);
call    0 never executed
call    1 never executed
    #####:  559:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  560:  }
        -:  561:};
        -:  562:
   386568:  563:struct TestVectorReduceToContractPatternsPatterns
call    0 returned 100%
call    1 returned 100%
        -:  564:    : public PassWrapper<TestVectorReduceToContractPatternsPatterns,
        -:  565:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_142TestVectorReduceToContractPatternsPatterns13resolveTypeIDEv called 326591 returned 100% blocks executed 100%
   326591:  566:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  567:      TestVectorReduceToContractPatternsPatterns)
        -:  568:
function _ZNK12_GLOBAL__N_142TestVectorReduceToContractPatternsPatterns11getArgumentEv called 325599 returned 100% blocks executed 100%
   325599:  569:  StringRef getArgument() const final {
   325599:  570:    return "test-vector-reduction-to-contract-patterns";
        -:  571:  }
function _ZNK12_GLOBAL__N_142TestVectorReduceToContractPatternsPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  572:  StringRef getDescription() const final {
   325562:  573:    return "Test patterns to convert multireduce op to contract and combine "
   325562:  574:           "broadcast/transpose to contract";
        -:  575:  }
function _ZN12_GLOBAL__N_142TestVectorReduceToContractPatternsPatterns14runOnOperationEv called 919 returned 100% blocks executed 100%
      919:  576:  void runOnOperation() override {
      919:  577:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      919:  578:    populateVectorReductionToContractPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      917:  579:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      920:  580:  }
        -:  581:};
        -:  582:
  325563*:  583:struct TestVectorTransferDropUnitDimsPatterns
call    0 never executed
call    1 returned 100%
        -:  584:    : public PassWrapper<TestVectorTransferDropUnitDimsPatterns,
        -:  585:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_138TestVectorTransferDropUnitDimsPatterns13resolveTypeIDEv called 325562 returned 100% blocks executed 100%
   325562:  586:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  587:      TestVectorTransferDropUnitDimsPatterns)
        -:  588:
function _ZNK12_GLOBAL__N_138TestVectorTransferDropUnitDimsPatterns11getArgumentEv called 325562 returned 100% blocks executed 100%
   325562:  589:  StringRef getArgument() const final {
   325562:  590:    return "test-vector-transfer-drop-unit-dims-patterns";
        -:  591:  }
function _ZNK12_GLOBAL__N_138TestVectorTransferDropUnitDimsPatterns20getDependentDialectsERN4mlir15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:  592:  void getDependentDialects(DialectRegistry &registry) const override {
    #####:  593:    registry.insert<memref::MemRefDialect>();
call    0 never executed
    #####:  594:  }
function _ZN12_GLOBAL__N_138TestVectorTransferDropUnitDimsPatterns14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  595:  void runOnOperation() override {
    #####:  596:    RewritePatternSet patterns(&getContext());
call    0 never executed
call    1 never executed
    #####:  597:    populateVectorTransferDropUnitDimsPatterns(patterns);
call    0 never executed
call    1 never executed
    #####:  598:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  599:  }
        -:  600:};
        -:  601:
   387135:  602:struct TestFlattenVectorTransferPatterns
call    0 returned 100%
call    1 returned 100%
        -:  603:    : public PassWrapper<TestFlattenVectorTransferPatterns,
        -:  604:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_133TestFlattenVectorTransferPatterns13resolveTypeIDEv called 326582 returned 100% blocks executed 100%
   326582:  605:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  606:      TestFlattenVectorTransferPatterns)
        -:  607:
function _ZNK12_GLOBAL__N_133TestFlattenVectorTransferPatterns11getArgumentEv called 325601 returned 100% blocks executed 100%
   325601:  608:  StringRef getArgument() const final {
   325601:  609:    return "test-vector-transfer-flatten-patterns";
        -:  610:  }
function _ZNK12_GLOBAL__N_133TestFlattenVectorTransferPatterns14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  611:  StringRef getDescription() const final {
   325562:  612:    return "Test patterns to rewrite contiguous row-major N-dimensional "
   325562:  613:           "vector.transfer_{read,write} ops into 1D transfers";
        -:  614:  }
function _ZNK12_GLOBAL__N_133TestFlattenVectorTransferPatterns20getDependentDialectsERN4mlir15DialectRegistryE called 1020 returned 100% blocks executed 100%
     1020:  615:  void getDependentDialects(DialectRegistry &registry) const override {
     1020:  616:    registry.insert<memref::MemRefDialect>();
call    0 returned 100%
     1020:  617:  }
function _ZN12_GLOBAL__N_133TestFlattenVectorTransferPatterns14runOnOperationEv called 960 returned 99% blocks executed 100%
      960:  618:  void runOnOperation() override {
      960:  619:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      959:  620:    populateFlattenVectorTransferPatterns(patterns);
call    0 returned 100%
call    1 returned 98%
      941:  621:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 101%
call    3 returned 100%
call    4 returned 100%
      953:  622:  }
        -:  623:};
        -:  624:
   388205:  625:struct TestVectorScanLowering
call    0 returned 100%
call    1 returned 100%
        -:  626:    : public PassWrapper<TestVectorScanLowering, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_122TestVectorScanLowering13resolveTypeIDEv called 326644 returned 100% blocks executed 100%
   326644:  627:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorScanLowering)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  628:
function _ZNK12_GLOBAL__N_122TestVectorScanLowering11getArgumentEv called 325619 returned 100% blocks executed 100%
   325619:  629:  StringRef getArgument() const final { return "test-vector-scan-lowering"; }
function _ZNK12_GLOBAL__N_122TestVectorScanLowering14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  630:  StringRef getDescription() const final {
   325562:  631:    return "Test lowering patterns that lower the scan op in the vector "
   325562:  632:           "dialect";
        -:  633:  }
function _ZN12_GLOBAL__N_122TestVectorScanLowering14runOnOperationEv called 933 returned 100% blocks executed 100%
      933:  634:  void runOnOperation() override {
      933:  635:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      933:  636:    populateVectorScanLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      933:  637:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      933:  638:  }
        -:  639:};
        -:  640:
        -:  641:/// Allocate shared memory for a single warp to test lowering of
        -:  642:/// WarpExecuteOnLane0Op.
function _ZN12_GLOBAL__N_1L26allocateGlobalSharedMemoryEN4mlir8LocationERNS0_9OpBuilderENS0_6vector20WarpExecuteOnLane0OpENS0_4TypeE called 0 returned 0% blocks executed 0%
    #####:  643:static Value allocateGlobalSharedMemory(Location loc, OpBuilder &builder,
        -:  644:                                        WarpExecuteOnLane0Op warpOp,
        -:  645:                                        Type type) {
    #####:  646:  static constexpr int64_t kSharedMemorySpace = 3;
        -:  647:  // Compute type of shared memory buffer.
    #####:  648:  MemRefType memrefType;
    #####:  649:  if (auto vectorType = type.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  650:    memrefType =
        -:  651:        MemRefType::get(vectorType.getShape(), vectorType.getElementType(), {},
    #####:  652:                        kSharedMemorySpace);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  653:  } else {
    #####:  654:    memrefType = MemRefType::get({1}, type, {}, kSharedMemorySpace);
call    0 never executed
        -:  655:  }
        -:  656:
        -:  657:  // Get symbol table holding all shared memory globals.
    #####:  658:  ModuleOp moduleOp = warpOp->getParentOfType<ModuleOp>();
call    0 never executed
    #####:  659:  SymbolTable symbolTable(moduleOp);
call    0 never executed
        -:  660:
        -:  661:  // Create a pretty name.
    #####:  662:  SmallString<64> buf;
call    0 never executed
call    1 never executed
    #####:  663:  llvm::raw_svector_ostream os(buf);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  664:  interleave(memrefType.getShape(), os, "x");
call    0 never executed
call    1 never executed
    #####:  665:  os << "x" << memrefType.getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  666:  std::string symbolName = (Twine("__shared_") + os.str()).str();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  667:
    #####:  668:  auto ip = builder.saveInsertionPoint();
call    0 never executed
    #####:  669:  builder.setInsertionPoint(moduleOp);
call    0 never executed
    #####:  670:  auto global = builder.create<memref::GlobalOp>(
        -:  671:      loc,
        -:  672:      /*sym_name=*/symbolName,
    #####:  673:      /*sym_visibility=*/builder.getStringAttr("private"),
call    0 never executed
        -:  674:      /*type=*/memrefType,
    #####:  675:      /*initial_value=*/Attribute(),
    #####:  676:      /*constant=*/false,
call    0 never executed
    #####:  677:      /*alignment=*/IntegerAttr());
call    0 never executed
call    1 never executed
    #####:  678:  symbolTable.insert(global);
call    0 never executed
        -:  679:  // The symbol table inserts at the end of the module, but globals are a bit
        -:  680:  // nicer if they are at the beginning.
    #####:  681:  global->moveBefore(&moduleOp.front());
call    0 never executed
call    1 never executed
        -:  682:
    #####:  683:  builder.restoreInsertionPoint(ip);
branch  0 never executed
branch  1 never executed
    #####:  684:  return builder.create<memref::GetGlobalOp>(loc, memrefType, symbolName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  685:}
        -:  686:
function _ZN12_GLOBAL__N_1L13warpReductionEN4mlir8LocationERNS0_9OpBuilderENS0_5ValueENS0_6vector13CombiningKindEj called 0 returned 0% blocks executed 0%
    #####:  687:static Value warpReduction(Location loc, OpBuilder &builder, Value input,
        -:  688:                           CombiningKind kind, uint32_t size) {
    #####:  689:  Value laneVal = input;
        -:  690:  // Parallel reduction using butterfly shuffles.
    #####:  691:  for (uint64_t i = 1; i < size; i <<= 1) {
branch  0 never executed
branch  1 never executed
    #####:  692:    Value shuffled = builder
    #####:  693:                         .create<gpu::ShuffleOp>(loc, laneVal, i,
        -:  694:                                                 /*width=*/size,
    #####:  695:                                                 /*mode=*/gpu::ShuffleMode::XOR)
call    0 never executed
    #####:  696:                         .getShuffleResult();
call    0 never executed
    #####:  697:    laneVal = makeArithReduction(builder, loc, kind, laneVal, shuffled);
call    0 never executed
        -:  698:  }
    #####:  699:  return laneVal;
        -:  700:}
        -:  701:
        -:  702:struct TestVectorDistribution
        -:  703:    : public PassWrapper<TestVectorDistribution, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_122TestVectorDistribution13resolveTypeIDEv called 326620 returned 100% blocks executed 100%
   326620:  704:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestVectorDistribution)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  705:
function _ZNK12_GLOBAL__N_122TestVectorDistribution20getDependentDialectsERN4mlir15DialectRegistryE called 1058 returned 100% blocks executed 100%
     1058:  706:  void getDependentDialects(DialectRegistry &registry) const override {
     1058:  707:    registry.insert<scf::SCFDialect, memref::MemRefDialect, gpu::GPUDialect,
call    0 returned 100%
     1058:  708:                    AffineDialect>();
     1058:  709:  }
        -:  710:
function _ZNK12_GLOBAL__N_122TestVectorDistribution11getArgumentEv called 325598 returned 100% blocks executed 100%
   325598:  711:  StringRef getArgument() const final { return "test-vector-warp-distribute"; }
function _ZNK12_GLOBAL__N_122TestVectorDistribution14getDescriptionEv called 325562 returned 100% blocks executed 100%
   325562:  712:  StringRef getDescription() const final {
   325562:  713:    return "Test vector warp distribute transformation and lowering patterns";
        -:  714:  }
function _ZN12_GLOBAL__N_122TestVectorDistributionC2Ev called 326621 returned 100% blocks executed 100%
   326621:  715:  TestVectorDistribution() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
function _ZN12_GLOBAL__N_122TestVectorDistributionC2ERKS0_ called 61776 returned 100% blocks executed 100%
    61776:  716:  TestVectorDistribution(const TestVectorDistribution &pass)
    61776:  717:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  718:
        -:  719:  Option<bool> warpOpToSCF{
        -:  720:      *this, "rewrite-warp-ops-to-scf-if",
        -:  721:      llvm::cl::desc("Lower vector.warp_execute_on_lane0 to scf.if op"),
        -:  722:      llvm::cl::init(false)};
        -:  723:
        -:  724:  Option<bool> distributeTransferWriteOps{
        -:  725:      *this, "distribute-transfer-write",
        -:  726:      llvm::cl::desc("Test distribution of transfer write"),
        -:  727:      llvm::cl::init(false)};
        -:  728:
        -:  729:  Option<bool> hoistUniform{*this, "hoist-uniform",
        -:  730:                            llvm::cl::desc("Test hoist uniform"),
        -:  731:                            llvm::cl::init(false)};
        -:  732:
        -:  733:  Option<bool> propagateDistribution{
        -:  734:      *this, "propagate-distribution",
        -:  735:      llvm::cl::desc("Test distribution propgation"), llvm::cl::init(false)};
        -:  736:
function _ZN12_GLOBAL__N_122TestVectorDistribution14runOnOperationEv called 983 returned 100% blocks executed 29%
      983:  737:  void runOnOperation() override {
     1969:  738:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
        -:  739:
function _ZZN12_GLOBAL__N_122TestVectorDistribution14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 10430 returned 100% blocks executed 57%
    11412:  740:    getOperation().walk([&](Operation *op) {
call    0 returned 100%
call    1 returned 100%
    10430:  741:      if (auto warpOp = dyn_cast<WarpExecuteOnLane0Op>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  742:        if (hoistUniform) {
branch  0 never executed
branch  1 never executed
    #####:  743:          moveScalarUniformCode(warpOp);
call    0 never executed
        -:  744:        }
    #####:  745:        WalkResult::interrupt();
        -:  746:      }
    10429:  747:    });
      978:  748:    MLIRContext *ctx = &getContext();
call    0 returned 100%
      978:  749:    if (distributeTransferWriteOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_122TestVectorDistribution14runOnOperationEvENKUlN4mlir6vector15TransferWriteOpEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  750:      auto distributionFn = [](vector::TransferWriteOp writeOp) {
        -:  751:        // Create a map (d0, d1) -> (d1) to distribute along the inner
        -:  752:        // dimension. Once we support n-d distribution we can add more
        -:  753:        // complex cases.
    #####:  754:        int64_t vecRank = writeOp.getVectorType().getRank();
call    0 never executed
call    1 never executed
    #####:  755:        OpBuilder builder(writeOp.getContext());
call    0 never executed
call    1 never executed
    #####:  756:        auto map =
    #####:  757:            AffineMap::get(vecRank, 0, builder.getAffineDimExpr(vecRank - 1));
call    0 never executed
call    1 never executed
    #####:  758:        return map;
        -:  759:      };
    #####:  760:      RewritePatternSet patterns(ctx);
call    0 never executed
    #####:  761:      populateDistributeTransferWriteOpPatterns(patterns, distributionFn);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  762:      (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  763:    }
      978:  764:    if (propagateDistribution) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  765:      RewritePatternSet patterns(ctx);
call    0 never executed
    #####:  766:      vector::populatePropagateWarpVectorDistributionPatterns(patterns);
call    0 never executed
call    1 never executed
    #####:  767:      vector::populateDistributeReduction(patterns, warpReduction);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  768:      (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  769:    }
     1968:  770:    WarpExecuteOnLane0LoweringOptions options;
call    0 returned 101%
call    1 returned 100%
call    2 returned 100%
      978:  771:    options.warpAllocationFn = allocateGlobalSharedMemory;
call    0 returned 101%
     990*:  772:    options.warpSyncronizationFn = [](Location loc, OpBuilder &builder,
        -:  773:                                      WarpExecuteOnLane0Op warpOp) {
    #####:  774:      builder.create<gpu::BarrierOp>(loc);
call    0 never executed
      990:  775:    };
call    0 returned 100%
        -:  776:    // Test on one pattern in isolation.
      990:  777:    if (warpOpToSCF) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  778:      populateWarpExecuteOnLane0OpToScfForPattern(patterns, options);
call    0 never executed
call    1 never executed
    #####:  779:      (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  780:      return;
call    0 never executed
call    1 never executed
        -:  781:    }
        -:  782:  }
        -:  783:};
        -:  784:
        -:  785:} // namespace
        -:  786:
        -:  787:namespace mlir {
        -:  788:namespace test {
function _ZN4mlir4test27registerTestVectorLoweringsEv called 325562 returned 100% blocks executed 100%
   325562:  789:void registerTestVectorLowerings() {
   325562:  790:  PassRegistration<TestVectorToVectorLowering>();
call    0 returned 100%
        -:  791:
   325562:  792:  PassRegistration<TestVectorContractionLowering>();
call    0 returned 100%
        -:  793:
   325562:  794:  PassRegistration<TestVectorTransposeLowering>();
call    0 returned 100%
        -:  795:
   325562:  796:  PassRegistration<TestVectorUnrollingPatterns>();
call    0 returned 100%
        -:  797:
   325562:  798:  PassRegistration<TestVectorTransferUnrollingPatterns>();
call    0 returned 100%
        -:  799:
   325562:  800:  PassRegistration<TestVectorTransferFullPartialSplitPatterns>();
call    0 returned 100%
        -:  801:
   325562:  802:  PassRegistration<TestVectorTransferOpt>();
call    0 returned 100%
        -:  803:
   325562:  804:  PassRegistration<TestVectorTransferLoweringPatterns>();
call    0 returned 100%
        -:  805:
   325562:  806:  PassRegistration<TestVectorMultiReductionLoweringPatterns>();
call    0 returned 100%
        -:  807:
   325562:  808:  PassRegistration<TestVectorTransferCollapseInnerMostContiguousDims>();
call    0 returned 100%
        -:  809:
   325562:  810:  PassRegistration<TestVectorReduceToContractPatternsPatterns>();
call    0 returned 100%
        -:  811:
   325562:  812:  PassRegistration<TestVectorTransferDropUnitDimsPatterns>();
call    0 returned 100%
        -:  813:
   325562:  814:  PassRegistration<TestFlattenVectorTransferPatterns>();
call    0 returned 100%
        -:  815:
   325562:  816:  PassRegistration<TestVectorScanLowering>();
call    0 returned 100%
        -:  817:
   325562:  818:  PassRegistration<TestVectorDistribution>();
call    0 returned 100%
   325562:  819:}
        -:  820:} // namespace test
        -:  821:} // namespace mlir
