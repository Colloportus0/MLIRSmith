        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/AsmParser/LocationParser.cpp
        -:    0:Graph:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/LocationParser.cpp.gcno
        -:    0:Data:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/LocationParser.cpp.gcda
        -:    0:Runs:325596
        -:    1://===- LocationParser.cpp - MLIR Location Parser  -------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "Parser.h"
        -:   10:
        -:   11:using namespace mlir;
        -:   12:using namespace mlir::detail;
        -:   13:
        -:   14:/// Specific location instances.
        -:   15:///
        -:   16:/// location-inst ::= filelinecol-location |
        -:   17:///                   name-location |
        -:   18:///                   callsite-location |
        -:   19:///                   fused-location |
        -:   20:///                   unknown-location
        -:   21:/// filelinecol-location ::= string-literal ':' integer-literal
        -:   22:///                                         ':' integer-literal
        -:   23:/// name-location ::= string-literal
        -:   24:/// callsite-location ::= 'callsite' '(' location-inst 'at' location-inst ')'
        -:   25:/// fused-location ::= fused ('<' attribute-value '>')?
        -:   26:///                    '[' location-inst (location-inst ',')* ']'
        -:   27:/// unknown-location ::= 'unknown'
        -:   28:///
function _ZN4mlir6detail6Parser21parseCallSiteLocationERNS_12LocationAttrE called 0 returned 0% blocks executed 0%
    #####:   29:ParseResult Parser::parseCallSiteLocation(LocationAttr &loc) {
    #####:   30:  consumeToken(Token::bare_identifier);
call    0 never executed
        -:   31:
        -:   32:  // Parse the '('.
    #####:   33:  if (parseToken(Token::l_paren, "expected '(' in callsite location"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   34:    return failure();
        -:   35:
        -:   36:  // Parse the callee location.
    #####:   37:  LocationAttr calleeLoc;
    #####:   38:  if (parseLocationInstance(calleeLoc))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:    return failure();
        -:   40:
        -:   41:  // Parse the 'at'.
    #####:   42:  if (getToken().isNot(Token::bare_identifier) ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   43:      getToken().getSpelling() != "at")
branch  0 never executed
branch  1 never executed
    #####:   44:    return emitWrongTokenError("expected 'at' in callsite location");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   45:  consumeToken(Token::bare_identifier);
call    0 never executed
        -:   46:
        -:   47:  // Parse the caller location.
    #####:   48:  LocationAttr callerLoc;
    #####:   49:  if (parseLocationInstance(callerLoc))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:    return failure();
        -:   51:
        -:   52:  // Parse the ')'.
    #####:   53:  if (parseToken(Token::r_paren, "expected ')' in callsite location"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   54:    return failure();
        -:   55:
        -:   56:  // Return the callsite location.
    #####:   57:  loc = CallSiteLoc::get(calleeLoc, callerLoc);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   58:  return success();
        -:   59:}
        -:   60:
function _ZN4mlir6detail6Parser18parseFusedLocationERNS_12LocationAttrE called 0 returned 0% blocks executed 0%
    #####:   61:ParseResult Parser::parseFusedLocation(LocationAttr &loc) {
    #####:   62:  consumeToken(Token::bare_identifier);
call    0 never executed
        -:   63:
        -:   64:  // Try to parse the optional metadata.
    #####:   65:  Attribute metadata;
    #####:   66:  if (consumeIf(Token::less)) {
branch  0 never executed
branch  1 never executed
    #####:   67:    metadata = parseAttribute();
call    0 never executed
    #####:   68:    if (!metadata)
branch  0 never executed
branch  1 never executed
    #####:   69:      return failure();
        -:   70:
        -:   71:    // Parse the '>' token.
    #####:   72:    if (parseToken(Token::greater,
branch  0 never executed
branch  1 never executed
    #####:   73:                   "expected '>' after fused location metadata"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   74:      return failure();
        -:   75:  }
        -:   76:
    #####:   77:  SmallVector<Location, 4> locations;
call    0 never executed
function _ZZN4mlir6detail6Parser18parseFusedLocationERNS_12LocationAttrEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:   78:  auto parseElt = [&] {
    #####:   79:    LocationAttr newLoc;
    #####:   80:    if (parseLocationInstance(newLoc))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:      return failure();
    #####:   82:    locations.push_back(newLoc);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   83:    return success();
    #####:   84:  };
        -:   85:
    #####:   86:  if (parseCommaSeparatedList(Delimiter::Square, parseElt,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   87:                              " in fused location"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:    return failure();
        -:   89:
        -:   90:  // Return the fused location.
    #####:   91:  loc = FusedLoc::get(locations, metadata, getContext());
call    0 never executed
    #####:   92:  return success();
        -:   93:}
        -:   94:
function _ZN4mlir6detail6Parser30parseNameOrFileLineColLocationERNS_12LocationAttrE called 14085 returned 100% blocks executed 34%
    14085:   95:ParseResult Parser::parseNameOrFileLineColLocation(LocationAttr &loc) {
    14085:   96:  auto *ctx = getContext();
call    0 returned 100%
    14085:   97:  auto str = getToken().getStringValue();
call    0 returned 100%
    14085:   98:  consumeToken(Token::string);
call    0 returned 100%
        -:   99:
        -:  100:  // If the next token is ':' this is a filelinecol location.
   14085*:  101:  if (consumeIf(Token::colon)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  102:    // Parse the line number.
    14085:  103:    if (getToken().isNot(Token::integer))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  104:      return emitWrongTokenError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  105:          "expected integer line number in FileLineColLoc");
call    0 never executed
    14085:  106:    auto line = getToken().getUnsignedIntegerValue();
call    0 returned 100%
    14085:  107:    if (!line)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:      return emitWrongTokenError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  109:          "expected integer line number in FileLineColLoc");
call    0 never executed
    14085:  110:    consumeToken(Token::integer);
call    0 returned 100%
        -:  111:
        -:  112:    // Parse the ':'.
    14085:  113:    if (parseToken(Token::colon, "expected ':' in FileLineColLoc"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  114:      return failure();
        -:  115:
        -:  116:    // Parse the column number.
    14085:  117:    if (getToken().isNot(Token::integer))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  118:      return emitWrongTokenError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  119:          "expected integer column number in FileLineColLoc");
call    0 never executed
    14085:  120:    auto column = getToken().getUnsignedIntegerValue();
call    0 returned 100%
    14085:  121:    if (!column.has_value())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  122:      return emitError("expected integer column number in FileLineColLoc");
call    0 never executed
call    1 never executed
call    2 never executed
    14085:  123:    consumeToken(Token::integer);
call    0 returned 100%
        -:  124:
    14085:  125:    loc = FileLineColLoc::get(ctx, str, line.value(), column.value());
call    0 returned 100%
    14085:  126:    return success();
        -:  127:  }
        -:  128:
        -:  129:  // Otherwise, this is a NameLoc.
        -:  130:
        -:  131:  // Check for a child location.
    #####:  132:  if (consumeIf(Token::l_paren)) {
branch  0 never executed
branch  1 never executed
        -:  133:    // Parse the child location.
    #####:  134:    LocationAttr childLoc;
    #####:  135:    if (parseLocationInstance(childLoc))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  136:      return failure();
        -:  137:
    #####:  138:    loc = NameLoc::get(StringAttr::get(ctx, str), childLoc);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  139:
        -:  140:    // Parse the closing ')'.
    #####:  141:    if (parseToken(Token::r_paren,
branch  0 never executed
branch  1 never executed
    #####:  142:                   "expected ')' after child location of NameLoc"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  143:      return failure();
        -:  144:  } else {
    #####:  145:    loc = NameLoc::get(StringAttr::get(ctx, str));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  146:  }
        -:  147:
    #####:  148:  return success();
        -:  149:}
        -:  150:
function _ZN4mlir6detail6Parser21parseLocationInstanceERNS_12LocationAttrE called 14085 returned 100% blocks executed 12%
    14085:  151:ParseResult Parser::parseLocationInstance(LocationAttr &loc) {
        -:  152:  // Handle either name or filelinecol locations.
    14085:  153:  if (getToken().is(Token::string))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    14085:  154:    return parseNameOrFileLineColLocation(loc);
call    0 returned 100%
        -:  155:
        -:  156:  // Bare tokens required for other cases.
    #####:  157:  if (!getToken().is(Token::bare_identifier))
branch  0 never executed
branch  1 never executed
    #####:  158:    return emitWrongTokenError("expected location instance");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  159:
        -:  160:  // Check for the 'callsite' signifying a callsite location.
    #####:  161:  if (getToken().getSpelling() == "callsite")
branch  0 never executed
branch  1 never executed
    #####:  162:    return parseCallSiteLocation(loc);
call    0 never executed
        -:  163:
        -:  164:  // If the token is 'fused', then this is a fused location.
    #####:  165:  if (getToken().getSpelling() == "fused")
branch  0 never executed
branch  1 never executed
    #####:  166:    return parseFusedLocation(loc);
call    0 never executed
        -:  167:
        -:  168:  // Check for a 'unknown' for an unknown location.
    #####:  169:  if (getToken().getSpelling() == "unknown") {
branch  0 never executed
branch  1 never executed
    #####:  170:    consumeToken(Token::bare_identifier);
call    0 never executed
    #####:  171:    loc = UnknownLoc::get(getContext());
call    0 never executed
    #####:  172:    return success();
        -:  173:  }
        -:  174:
    #####:  175:  return emitWrongTokenError("expected location instance");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  176:}
