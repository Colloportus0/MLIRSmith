        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/IR/TestTypes.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestTypes.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestTypes.cpp.gcda
        -:    0:Runs:325561
        -:    1://===- TestTypes.cpp - Test passes for MLIR types -------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestTypes.h"
        -:   10:#include "TestDialect.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace test;
        -:   15:
        -:   16:namespace {
   388518:   17:struct TestRecursiveTypesPass
call    0 returned 100%
call    1 returned 100%
        -:   18:    : public PassWrapper<TestRecursiveTypesPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_122TestRecursiveTypesPass13resolveTypeIDEv called 326598 returned 100% blocks executed 100%
   326598:   19:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestRecursiveTypesPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   20:
        -:   21:  LogicalResult createIRWithTypes();
        -:   22:
function _ZNK12_GLOBAL__N_122TestRecursiveTypesPass11getArgumentEv called 325606 returned 100% blocks executed 100%
   325606:   23:  StringRef getArgument() const final { return "test-recursive-types"; }
function _ZNK12_GLOBAL__N_122TestRecursiveTypesPass14getDescriptionEv called 325561 returned 100% blocks executed 100%
   325561:   24:  StringRef getDescription() const final {
   325561:   25:    return "Test support for recursive types";
        -:   26:  }
function _ZN12_GLOBAL__N_122TestRecursiveTypesPass14runOnOperationEv called 923 returned 100% blocks executed 63%
      923:   27:  void runOnOperation() override {
      923:   28:    func::FuncOp func = getOperation();
call    0 returned 100%
        -:   29:
        -:   30:    // Just make sure recursive types are printed and parsed.
     920*:   31:    if (func.getName() == "roundtrip")
call    0 returned 99%
    #####:   32:      return;
        -:   33:
        -:   34:    // Create a recursive type and print it as a part of a dummy op.
     914*:   35:    if (func.getName() == "create") {
call    0 returned 100%
    #####:   36:      if (failed(createIRWithTypes()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   37:        signalPassFailure();
call    0 never executed
    #####:   38:      return;
        -:   39:    }
        -:   40:
        -:   41:    // Unknown key.
      911:   42:    func.emitOpError() << "unexpected function name";
call    0 returned 100%
call    1 returned 101%
call    2 returned 100%
call    3 returned 100%
      925:   43:    signalPassFailure();
call    0 returned 100%
        -:   44:  }
        -:   45:};
        -:   46:} // namespace
        -:   47:
function _ZN12_GLOBAL__N_122TestRecursiveTypesPass17createIRWithTypesEv called 0 returned 0% blocks executed 0%
    #####:   48:LogicalResult TestRecursiveTypesPass::createIRWithTypes() {
    #####:   49:  MLIRContext *ctx = &getContext();
call    0 never executed
    #####:   50:  func::FuncOp func = getOperation();
call    0 never executed
    #####:   51:  auto type = TestRecursiveType::get(ctx, "some_long_and_unique_name");
call    0 never executed
    #####:   52:  if (failed(type.setBody(type)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:    return func.emitError("expected to be able to set the type body");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   54:
        -:   55:  // Setting the same body is fine.
    #####:   56:  if (failed(type.setBody(type)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:    return func.emitError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   58:        "expected to be able to set the type body to the same value");
call    0 never executed
        -:   59:
        -:   60:  // Setting a different body is not.
    #####:   61:  if (succeeded(type.setBody(IndexType::get(ctx))))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   62:    return func.emitError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   63:        "not expected to be able to change function body more than once");
call    0 never executed
        -:   64:
        -:   65:  // Expecting to get the same type for the same name.
    #####:   66:  auto other = TestRecursiveType::get(ctx, "some_long_and_unique_name");
call    0 never executed
    #####:   67:  if (type != other)
branch  0 never executed
branch  1 never executed
    #####:   68:    return func.emitError("expected type name to be the uniquing key");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   69:
        -:   70:  // Create the op to check how the type is printed.
    #####:   71:  OperationState state(func.getLoc(), "test.dummy_type_test_op");
call    0 never executed
call    1 never executed
    #####:   72:  state.addTypes(type);
call    0 never executed
    #####:   73:  func.getBody().front().push_front(Operation::create(state));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   74:
    #####:   75:  return success();
call    0 never executed
        -:   76:}
        -:   77:
        -:   78:namespace mlir {
        -:   79:namespace test {
        -:   80:
function _ZN4mlir4test30registerTestRecursiveTypesPassEv called 325561 returned 100% blocks executed 100%
   325561:   81:void registerTestRecursiveTypesPass() {
   325561:   82:  PassRegistration<TestRecursiveTypesPass>();
call    0 returned 100%
   325561:   83:}
        -:   84:
        -:   85:} // namespace test
        -:   86:} // namespace mlir
