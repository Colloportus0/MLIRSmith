        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Target/LLVMIR/DebugTranslation.cpp
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/DebugTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/DebugTranslation.cpp.gcda
        -:    0:Runs:325581
        -:    1://===- DebugTranslation.cpp - MLIR to LLVM Debug conversion ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "DebugTranslation.h"
        -:   10:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   11:#include "llvm/ADT/TypeSwitch.h"
        -:   12:#include "llvm/IR/Metadata.h"
        -:   13:#include "llvm/IR/Module.h"
        -:   14:#include "llvm/Support/FileSystem.h"
        -:   15:#include "llvm/Support/Path.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:using namespace mlir::LLVM;
        -:   19:using namespace mlir::LLVM::detail;
        -:   20:
        -:   21:/// A utility walker that interrupts if the operation has valid debug
        -:   22:/// information.
function _ZL24interruptIfValidLocationPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   23:static WalkResult interruptIfValidLocation(Operation *op) {
    #####:   24:  return op->getLoc().isa<UnknownLoc>() ? WalkResult::advance()
call    0 never executed
    #####:   25:                                        : WalkResult::interrupt();
branch  0 never executed
branch  1 never executed
        -:   26:}
        -:   27:
function _ZN4mlir4LLVM6detail16DebugTranslationC2EPNS_9OperationERN4llvm6ModuleE called 0 returned 0% blocks executed 0%
    #####:   28:DebugTranslation::DebugTranslation(Operation *module, llvm::Module &llvmModule)
        -:   29:    : debugEmissionIsEnabled(false), llvmModule(llvmModule),
    #####:   30:      llvmCtx(llvmModule.getContext()) {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   31:  // If the module has no location information, there is nothing to do.
    #####:   32:  if (!module->walk(interruptIfValidLocation).wasInterrupted())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   33:    return;
    #####:   34:  debugEmissionIsEnabled = true;
        -:   35:
        -:   36:  // TODO: The version information should be encoded on the LLVM module itself,
        -:   37:  // not implicitly set here.
        -:   38:
        -:   39:  // Mark this module as having debug information.
    #####:   40:  StringRef debugVersionKey = "Debug Info Version";
call    0 never executed
    #####:   41:  if (!llvmModule.getModuleFlag(debugVersionKey))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:    llvmModule.addModuleFlag(llvm::Module::Warning, debugVersionKey,
call    0 never executed
        -:   43:                             llvm::DEBUG_METADATA_VERSION);
        -:   44:
    #####:   45:  if (auto targetTripleAttr =
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:          module->getAttr(LLVM::LLVMDialect::getTargetTripleAttrName())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   47:    auto targetTriple =
call    0 never executed
    #####:   48:        llvm::Triple(targetTripleAttr.cast<StringAttr>().getValue());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   49:    if (targetTriple.isKnownWindowsMSVCEnvironment()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   50:      // Dwarf debugging files will be generated by default, unless "CodeView"
        -:   51:      // is set explicitly. Windows/MSVC should use CodeView instead.
    #####:   52:      llvmModule.addModuleFlag(llvm::Module::Warning, "CodeView", 1);
call    0 never executed
        -:   53:    }
        -:   54:  }
        -:   55:}
        -:   56:
        -:   57:/// Finalize the translation of debug information.
function _ZN4mlir4LLVM6detail16DebugTranslation8finalizeEv called 0 returned 0% blocks executed 0%
    #####:   58:void DebugTranslation::finalize() {}
        -:   59:
        -:   60:/// Translate the debug information for the given function.
function _ZN4mlir4LLVM6detail16DebugTranslation9translateENS0_10LLVMFuncOpERN4llvm8FunctionE called 0 returned 0% blocks executed 0%
    #####:   61:void DebugTranslation::translate(LLVMFuncOp func, llvm::Function &llvmFunc) {
    #####:   62:  if (!debugEmissionIsEnabled)
branch  0 never executed
branch  1 never executed
    #####:   63:    return;
        -:   64:
        -:   65:  // If we are to create debug info for the function, we need to ensure that all
        -:   66:  // inlinable calls in it are with debug info, otherwise the LLVM verifier will
        -:   67:  // complain. For now, be more restricted and treat all calls as inlinable.
    #####:   68:  const bool hasCallWithoutDebugInfo =
    #####:   69:      func.walk([&](LLVM::CallOp call) {
    #####:   70:            return call.getLoc()->walk([](Location l) {
call    0 never executed
    #####:   71:              return l.isa<UnknownLoc>() ? WalkResult::interrupt()
call    0 never executed
    #####:   72:                                         : WalkResult::advance();
branch  0 never executed
branch  1 never executed
    #####:   73:            });
call    0 never executed
    #####:   74:          })
call    0 never executed
    #####:   75:          .wasInterrupted();
branch  0 never executed
branch  1 never executed
    #####:   76:  if (hasCallWithoutDebugInfo)
branch  0 never executed
branch  1 never executed
        -:   77:    return;
        -:   78:
        -:   79:  // Look for a sub program attached to the function.
    #####:   80:  auto spLoc =
    #####:   81:      func.getLoc()->findInstanceOf<FusedLocWith<LLVM::DISubprogramAttr>>();
call    0 never executed
    #####:   82:  if (!spLoc)
branch  0 never executed
branch  1 never executed
        -:   83:    return;
    #####:   84:  llvmFunc.setSubprogram(translate(spLoc.getMetadata()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   85:}
        -:   86:
        -:   87://===----------------------------------------------------------------------===//
        -:   88:// Attributes
        -:   89://===----------------------------------------------------------------------===//
        -:   90:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_15DIBasicTypeAttrE called 0 returned 0% blocks executed 0%
    #####:   91:llvm::DIBasicType *DebugTranslation::translateImpl(DIBasicTypeAttr attr) {
    #####:   92:  return llvm::DIBasicType::get(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   93:      llvmCtx, attr.getTag(), attr.getName(), attr.getSizeInBits(),
call    0 never executed
call    1 never executed
    #####:   94:      /*AlignInBits=*/0, attr.getEncoding(), llvm::DINode::FlagZero);
        -:   95:}
        -:   96:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_17DICompileUnitAttrE called 0 returned 0% blocks executed 0%
    #####:   97:llvm::DICompileUnit *DebugTranslation::translateImpl(DICompileUnitAttr attr) {
    #####:   98:  llvm::DIBuilder builder(llvmModule);
call    0 never executed
    #####:   99:  return builder.createCompileUnit(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  100:      attr.getSourceLanguage(), translate(attr.getFile()), attr.getProducer(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  101:      attr.getIsOptimized(), /*Flags=*/"", /*RV=*/0);
call    0 never executed
        -:  102:}
        -:  103:
        -:  104:llvm::DICompositeType *
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_19DICompositeTypeAttrE called 0 returned 0% blocks executed 0%
    #####:  105:DebugTranslation::translateImpl(DICompositeTypeAttr attr) {
    #####:  106:  SmallVector<llvm::Metadata *> elements;
call    0 never executed
    #####:  107:  for (auto member : attr.getElements())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:    elements.push_back(translate(member));
call    0 never executed
call    1 never executed
    #####:  109:  return llvm::DICompositeType::get(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  110:      llvmCtx, attr.getTag(), attr.getName(), translate(attr.getFile()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  111:      attr.getLine(), translate(attr.getScope()), /*BaseType=*/nullptr,
    #####:  112:      attr.getSizeInBits(), attr.getAlignInBits(),
call    0 never executed
        -:  113:      /*OffsetInBits=*/0, /*Flags=*/llvm::DINode::FlagZero,
    #####:  114:      llvm::MDNode::get(llvmCtx, elements),
call    0 never executed
call    1 never executed
    #####:  115:      /*RuntimeLang=*/0, /*VTableHolder=*/nullptr);
        -:  116:}
        -:  117:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_17DIDerivedTypeAttrE called 0 returned 0% blocks executed 0%
    #####:  118:llvm::DIDerivedType *DebugTranslation::translateImpl(DIDerivedTypeAttr attr) {
    #####:  119:  return llvm::DIDerivedType::get(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  120:      llvmCtx, attr.getTag(), attr.getName(), /*File=*/nullptr, /*Line=*/0,
call    0 never executed
call    1 never executed
        -:  121:      /*Scope=*/nullptr, translate(attr.getBaseType()), attr.getSizeInBits(),
        -:  122:      attr.getAlignInBits(), attr.getOffsetInBits(),
    #####:  123:      /*DWARFAddressSpace=*/llvm::None, /*Flags=*/llvm::DINode::FlagZero);
        -:  124:}
        -:  125:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_10DIFileAttrE called 0 returned 0% blocks executed 0%
    #####:  126:llvm::DIFile *DebugTranslation::translateImpl(DIFileAttr attr) {
    #####:  127:  return llvm::DIFile::get(llvmCtx, attr.getName(), attr.getDirectory());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  128:}
        -:  129:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_18DILexicalBlockAttrE called 0 returned 0% blocks executed 0%
    #####:  130:llvm::DILexicalBlock *DebugTranslation::translateImpl(DILexicalBlockAttr attr) {
    #####:  131:  return llvm::DILexicalBlock::getDistinct(llvmCtx, translate(attr.getScope()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  132:                                           translate(attr.getFile()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  133:                                           attr.getLine(), attr.getColumn());
        -:  134:}
        -:  135:
        -:  136:llvm::DILexicalBlockFile *
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_22DILexicalBlockFileAttrE called 0 returned 0% blocks executed 0%
    #####:  137:DebugTranslation::translateImpl(DILexicalBlockFileAttr attr) {
    #####:  138:  return llvm::DILexicalBlockFile::getDistinct(
call    0 never executed
    #####:  139:      llvmCtx, translate(attr.getScope()), translate(attr.getFile()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  140:      attr.getDescriminator());
        -:  141:}
        -:  142:
        -:  143:llvm::DILocalVariable *
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_19DILocalVariableAttrE called 0 returned 0% blocks executed 0%
    #####:  144:DebugTranslation::translateImpl(DILocalVariableAttr attr) {
    #####:  145:  return llvm::DILocalVariable::get(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  146:      llvmCtx, translate(attr.getScope()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  147:      llvm::MDString::get(llvmCtx, attr.getName()), translate(attr.getFile()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  148:      attr.getLine(), translate(attr.getType()), attr.getArg(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  149:      /*Flags=*/llvm::DINode::FlagZero, attr.getAlignInBits(),
    #####:  150:      /*Annotations=*/nullptr);
        -:  151:}
        -:  152:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_11DIScopeAttrE called 0 returned 0% blocks executed 0%
    #####:  153:llvm::DIScope *DebugTranslation::translateImpl(DIScopeAttr attr) {
    #####:  154:  return cast<llvm::DIScope>(translate(DINodeAttr(attr)));
call    0 never executed
call    1 never executed
        -:  155:}
        -:  156:
        -:  157:/// Return a new subprogram that is either distinct or not, depending on
        -:  158:/// `isDistinct`.
        -:  159:template <class... Ts>
function _Z13getSubprogramIJRN4llvm11LLVMContextEPNS0_7DIScopeEPNS0_8MDStringES6_PNS0_6DIFileEjPNS0_16DISubroutineTypeEjDniiNS0_6DINode7DIFlagsENS0_12DISubprogram9DISPFlagsEPNS0_13DICompileUnitEEEPSD_bDpOT_ called 0 returned 0% blocks executed 0%
    #####:  160:static llvm::DISubprogram *getSubprogram(bool isDistinct, Ts &&...args) {
    #####:  161:  if (isDistinct)
branch  0 never executed
branch  1 never executed
    #####:  162:    return llvm::DISubprogram::getDistinct(std::forward<Ts>(args)...);
call    0 never executed
    #####:  163:  return llvm::DISubprogram::get(std::forward<Ts>(args)...);
call    0 never executed
        -:  164:}
        -:  165:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_16DISubprogramAttrE called 0 returned 0% blocks executed 0%
    #####:  166:llvm::DISubprogram *DebugTranslation::translateImpl(DISubprogramAttr attr) {
    #####:  167:  bool isDefinition = static_cast<bool>(attr.getSubprogramFlags() &
call    0 never executed
call    1 never executed
    #####:  168:                                        LLVM::DISubprogramFlags::Definition);
    #####:  169:  return getSubprogram(
    #####:  170:      isDefinition, llvmCtx, translate(attr.getScope()),
call    0 never executed
call    1 never executed
    #####:  171:      llvm::MDString::get(llvmCtx, attr.getName()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  172:      llvm::MDString::get(llvmCtx, attr.getLinkageName()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  173:      translate(attr.getFile()), attr.getLine(), translate(attr.getType()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  174:      attr.getScopeLine(), /*ContainingType=*/nullptr, /*VirtualIndex=*/0,
call    0 never executed
    #####:  175:      /*ThisAdjustment=*/0, llvm::DINode::FlagZero,
    #####:  176:      static_cast<llvm::DISubprogram::DISPFlags>(attr.getSubprogramFlags()),
call    0 never executed
    #####:  177:      translate(attr.getCompileUnit()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  178:}
        -:  179:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_14DISubrangeAttrE called 0 returned 0% blocks executed 0%
    #####:  180:llvm::DISubrange *DebugTranslation::translateImpl(DISubrangeAttr attr) {
function _ZZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_14DISubrangeAttrEENKUlNS_11IntegerAttrEE_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  181:  auto getMetadataOrNull = [&](IntegerAttr attr) -> llvm::Metadata * {
    #####:  182:    if (!attr)
branch  0 never executed
branch  1 never executed
        -:  183:      return nullptr;
    #####:  184:    return llvm::ConstantAsMetadata::get(llvm::ConstantInt::getSigned(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  185:        llvm::Type::getInt64Ty(llvmCtx), attr.getInt()));
call    0 never executed
    #####:  186:  };
    #####:  187:  return llvm::DISubrange::get(llvmCtx, getMetadataOrNull(attr.getCount()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  188:                               getMetadataOrNull(attr.getLowerBound()),
        -:  189:                               getMetadataOrNull(attr.getUpperBound()),
    #####:  190:                               getMetadataOrNull(attr.getStride()));
        -:  191:}
        -:  192:
        -:  193:llvm::DISubroutineType *
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_20DISubroutineTypeAttrE called 0 returned 0% blocks executed 0%
    #####:  194:DebugTranslation::translateImpl(DISubroutineTypeAttr attr) {
    #####:  195:  SmallVector<llvm::Metadata *> types;
call    0 never executed
    #####:  196:  for (auto type : attr.getTypes())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  197:    types.push_back(translate(type));
call    0 never executed
call    1 never executed
    #####:  198:  return llvm::DISubroutineType::get(
call    0 never executed
call    1 never executed
    #####:  199:      llvmCtx, llvm::DINode::FlagZero, attr.getCallingConvention(),
call    0 never executed
    #####:  200:      llvm::DITypeRefArray(llvm::MDNode::get(llvmCtx, types)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  201:}
        -:  202:
function _ZN4mlir4LLVM6detail16DebugTranslation13translateImplENS0_10DITypeAttrE called 0 returned 0% blocks executed 0%
    #####:  203:llvm::DIType *DebugTranslation::translateImpl(DITypeAttr attr) {
    #####:  204:  return cast<llvm::DIType>(translate(DINodeAttr(attr)));
call    0 never executed
call    1 never executed
        -:  205:}
        -:  206:
function _ZN4mlir4LLVM6detail16DebugTranslation9translateENS0_10DINodeAttrE called 0 returned 0% blocks executed 0%
    #####:  207:llvm::DINode *DebugTranslation::translate(DINodeAttr attr) {
    #####:  208:  if (!attr)
branch  0 never executed
branch  1 never executed
        -:  209:    return nullptr;
        -:  210:  // Check for a cached instance.
    #####:  211:  if (llvm::DINode *node = attrToNode.lookup(attr))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  212:    return node;
        -:  213:
    #####:  214:  llvm::DINode *node =
call    0 never executed
    #####:  215:      TypeSwitch<DINodeAttr, llvm::DINode *>(attr)
        -:  216:          .Case<DIBasicTypeAttr, DICompileUnitAttr, DICompositeTypeAttr,
        -:  217:                DIDerivedTypeAttr, DIFileAttr, DILexicalBlockAttr,
        -:  218:                DILexicalBlockFileAttr, DILocalVariableAttr, DISubprogramAttr,
        -:  219:                DISubroutineTypeAttr>(
    #####:  220:              [&](auto attr) { return translateImpl(attr); });
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  221:  attrToNode.insert({attr, node});
call    0 never executed
    #####:  222:  return node;
        -:  223:}
        -:  224:
        -:  225://===----------------------------------------------------------------------===//
        -:  226:// Locations
        -:  227://===----------------------------------------------------------------------===//
        -:  228:
        -:  229:/// Translate the given location to an llvm debug location.
        -:  230:const llvm::DILocation *
function _ZN4mlir4LLVM6detail16DebugTranslation12translateLocENS_8LocationEPN4llvm12DILocalScopeE called 0 returned 0% blocks executed 0%
    #####:  231:DebugTranslation::translateLoc(Location loc, llvm::DILocalScope *scope) {
    #####:  232:  if (!debugEmissionIsEnabled)
branch  0 never executed
branch  1 never executed
        -:  233:    return nullptr;
        -:  234:
        -:  235:  // Check for a scope encoded with the location.
    #####:  236:  if (auto scopedLoc = loc->findInstanceOf<FusedLocWith<LLVM::DIScopeAttr>>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:    scope = cast<llvm::DILocalScope>(translate(scopedLoc.getMetadata()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  238:  return translateLoc(loc, scope, /*inlinedAt=*/nullptr);
call    0 never executed
        -:  239:}
        -:  240:
        -:  241:/// Translate the given location to an llvm DebugLoc.
        -:  242:const llvm::DILocation *
function _ZN4mlir4LLVM6detail16DebugTranslation12translateLocENS_8LocationEPN4llvm12DILocalScopeEPKNS4_10DILocationE called 0 returned 0% blocks executed 0%
    #####:  243:DebugTranslation::translateLoc(Location loc, llvm::DILocalScope *scope,
        -:  244:                               const llvm::DILocation *inlinedAt) {
        -:  245:  // LLVM doesn't have a representation for unknown.
    #####:  246:  if (!scope || loc.isa<UnknownLoc>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  247:    return nullptr;
        -:  248:
        -:  249:  // Check for a cached instance.
    #####:  250:  auto existingIt = locationToLoc.find(std::make_pair(loc, scope));
call    0 never executed
    #####:  251:  if (existingIt != locationToLoc.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  252:    return existingIt->second;
call    0 never executed
        -:  253:
    #####:  254:  const llvm::DILocation *llvmLoc = nullptr;
    #####:  255:  if (auto callLoc = loc.dyn_cast<CallSiteLoc>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  256:    // For callsites, the caller is fed as the inlinedAt for the callee.
    #####:  257:    const auto *callerLoc = translateLoc(callLoc.getCaller(), scope, inlinedAt);
call    0 never executed
call    1 never executed
    #####:  258:    llvmLoc = translateLoc(callLoc.getCallee(), scope, callerLoc);
call    0 never executed
call    1 never executed
        -:  259:
    #####:  260:  } else if (auto fileLoc = loc.dyn_cast<FileLineColLoc>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  261:    auto *file = translateFile(fileLoc.getFilename());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  262:    auto *fileScope = llvm::DILexicalBlockFile::get(llvmCtx, scope, file,
call    0 never executed
        -:  263:                                                    /*Discriminator=*/0);
    #####:  264:    llvmLoc = llvm::DILocation::get(llvmCtx, fileLoc.getLine(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  265:                                    fileLoc.getColumn(), fileScope,
        -:  266:                                    const_cast<llvm::DILocation *>(inlinedAt));
        -:  267:
    #####:  268:  } else if (auto fusedLoc = loc.dyn_cast<FusedLoc>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  269:    ArrayRef<Location> locations = fusedLoc.getLocations();
call    0 never executed
        -:  270:
        -:  271:    // For fused locations, merge each of the nodes.
    #####:  272:    llvmLoc = translateLoc(locations.front(), scope, inlinedAt);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  273:    for (Location locIt : locations.drop_front()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  274:      llvmLoc = llvm::DILocation::getMergedLocation(
call    0 never executed
call    1 never executed
        -:  275:          llvmLoc, translateLoc(locIt, scope, inlinedAt));
        -:  276:    }
        -:  277:
    #####:  278:  } else if (auto nameLoc = loc.dyn_cast<NameLoc>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  279:    llvmLoc = translateLoc(loc.cast<NameLoc>().getChildLoc(), scope, inlinedAt);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  280:
    #####:  281:  } else if (auto opaqueLoc = loc.dyn_cast<OpaqueLoc>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  282:    llvmLoc = translateLoc(loc.cast<OpaqueLoc>().getFallbackLocation(), scope,
call    0 never executed
call    1 never executed
call    2 never executed
        -:  283:                           inlinedAt);
        -:  284:  } else {
    #####:  285:    llvm_unreachable("unknown location kind");
call    0 never executed
        -:  286:  }
        -:  287:
    #####:  288:  locationToLoc.try_emplace(std::make_pair(loc, scope), llvmLoc);
call    0 never executed
    #####:  289:  return llvmLoc;
        -:  290:}
        -:  291:
        -:  292:/// Create an llvm debug file for the given file path.
function _ZN4mlir4LLVM6detail16DebugTranslation13translateFileEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  293:llvm::DIFile *DebugTranslation::translateFile(StringRef fileName) {
    #####:  294:  auto *&file = fileMap[fileName];
call    0 never executed
    #####:  295:  if (file)
branch  0 never executed
branch  1 never executed
        -:  296:    return file;
        -:  297:
        -:  298:  // Make sure the current working directory is up-to-date.
    #####:  299:  if (currentWorkingDir.empty())
branch  0 never executed
branch  1 never executed
    #####:  300:    llvm::sys::fs::current_path(currentWorkingDir);
call    0 never executed
        -:  301:
    #####:  302:  StringRef directory = currentWorkingDir;
call    0 never executed
    #####:  303:  SmallString<128> dirBuf;
call    0 never executed
    #####:  304:  SmallString<128> fileBuf;
branch  0 never executed
branch  1 never executed
    #####:  305:  if (llvm::sys::path::is_absolute(fileName)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  306:    // Strip the common prefix (if it is more than just "/") from current
        -:  307:    // directory and FileName for a more space-efficient encoding.
    #####:  308:    auto fileIt = llvm::sys::path::begin(fileName);
call    0 never executed
    #####:  309:    auto fileE = llvm::sys::path::end(fileName);
call    0 never executed
    #####:  310:    auto curDirIt = llvm::sys::path::begin(directory);
call    0 never executed
    #####:  311:    auto curDirE = llvm::sys::path::end(directory);
call    0 never executed
    #####:  312:    for (; curDirIt != curDirE && *curDirIt == *fileIt; ++curDirIt, ++fileIt)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  313:      llvm::sys::path::append(dirBuf, *curDirIt);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  314:    if (std::distance(llvm::sys::path::begin(directory), curDirIt) == 1) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  315:      // Don't strip the common prefix if it is only the root "/"  since that
        -:  316:      // would make LLVM diagnostic locations confusing.
    #####:  317:      directory = StringRef();
        -:  318:    } else {
    #####:  319:      for (; fileIt != fileE; ++fileIt)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  320:        llvm::sys::path::append(fileBuf, *fileIt);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  321:      directory = dirBuf;
    #####:  322:      fileName = fileBuf;
        -:  323:    }
        -:  324:  }
    #####:  325:  return (file = llvm::DIFile::get(llvmCtx, fileName, directory));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  326:}
