        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Vector/Transforms/Bufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/Bufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/Bufferize.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- Bufferize.cpp - Bufferization for `vector` dialect ops -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements bufferization of `vector` dialect ops
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   16:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   19:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   20:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   21:#include "mlir/Dialect/Vector/Transforms/BufferizableOpInterfaceImpl.h"
        -:   22:#include "mlir/Dialect/Vector/Transforms/Passes.h"
        -:   23:
        -:   24:namespace mlir {
        -:   25:namespace vector {
        -:   26:#define GEN_PASS_DEF_VECTORBUFFERIZE
        -:   27:#include "mlir/Dialect/Vector/Transforms/Passes.h.inc"
        -:   28:} // namespace vector
        -:   29:} // namespace mlir
        -:   30:
        -:   31:using namespace mlir;
        -:   32:using namespace bufferization;
        -:   33:
        -:   34:namespace {
   387746:   35:struct VectorBufferizePass
call    0 returned 100%
call    1 returned 100%
        -:   36:    : public vector::impl::VectorBufferizeBase<VectorBufferizePass> {
function _ZN12_GLOBAL__N_119VectorBufferizePass14runOnOperationEv called 1014 returned 98% blocks executed 88%
     1014:   37:  void runOnOperation() override {
     2007:   38:    BufferizationOptions options = getPartialBufferizationOptions();
call    0 returned 100%
call    1 returned 100%
     1017:   39:    options.opFilter.allowDialect<vector::VectorDialect>();
call    0 returned 99%
        -:   40:
     1002:   41:    if (failed(bufferizeOp(getOperation(), options)))
call    0 returned 100%
call    1 returned 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   42:      signalPassFailure();
call    0 never executed
      990:   43:  }
        -:   44:
function _ZNK12_GLOBAL__N_119VectorBufferizePass20getDependentDialectsERN4mlir15DialectRegistryE called 1062 returned 100% blocks executed 100%
     1062:   45:  void getDependentDialects(DialectRegistry &registry) const override {
     1062:   46:    registry.insert<bufferization::BufferizationDialect, memref::MemRefDialect,
call    0 returned 100%
     1062:   47:                    tensor::TensorDialect, vector::VectorDialect>();
     1062:   48:    vector::registerBufferizableOpInterfaceExternalModels(registry);
call    0 returned 100%
     1062:   49:  }
        -:   50:};
        -:   51:} // namespace
        -:   52:
function _ZN4mlir6vector25createVectorBufferizePassEv called 326618 returned 100% blocks executed 100%
   326618:   53:std::unique_ptr<Pass> mlir::vector::createVectorBufferizePass() {
   326618:   54:  return std::make_unique<VectorBufferizePass>();
call    0 returned 100%
        -:   55:}
