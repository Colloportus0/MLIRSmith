        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Interfaces/InferTypeOpInterface.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRInferTypeOpInterface.dir/InferTypeOpInterface.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRInferTypeOpInterface.dir/InferTypeOpInterface.cpp.gcda
        -:    0:Runs:325596
        -:    1://===- InferTypeOpInterface.cpp - Infer Type Interfaces ---------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains the definitions of the infer op interfaces defined in
        -:   10:// `InferTypeOpInterface.td`.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Interfaces/InferTypeOpInterface.h"
        -:   15:#include "mlir/IR/BuiltinTypes.h"
        -:   16:#include "mlir/IR/Matchers.h"
        -:   17:#include "llvm/Support/FormatVariadic.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace mlir {
        -:   22:#include "mlir/Interfaces/InferTypeOpInterface.cpp.inc"
        -:   23:} // namespace mlir
        -:   24:
function _ZNK4mlir12ShapeAdaptor7hasRankEv called 134616 returned 100% blocks executed 100%
   134616:   25:bool ShapeAdaptor::hasRank() const {
   134616:   26:  if (val.isNull())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   27:    return false;
   134616:   28:  if (auto t = val.dyn_cast<Type>())
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
    94621:   29:    return t.cast<ShapedType>().hasRank();
call    0 returned 100%
call    1 returned 100%
    39995:   30:  if (val.is<Attribute>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   31:    return true;
    39995:   32:  return val.get<ShapedTypeComponents *>()->hasRank();
call    0 returned 100%
        -:   33:}
        -:   34:
function _ZNK4mlir12ShapeAdaptor14getElementTypeEv called 0 returned 0% blocks executed 0%
    #####:   35:Type ShapeAdaptor::getElementType() const {
    #####:   36:  if (val.isNull())
branch  0 never executed
branch  1 never executed
    #####:   37:    return nullptr;
    #####:   38:  if (auto t = val.dyn_cast<Type>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:    return t.cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
    #####:   40:  if (val.is<Attribute>())
branch  0 never executed
branch  1 never executed
    #####:   41:    return nullptr;
    #####:   42:  return val.get<ShapedTypeComponents *>()->getElementType();
call    0 never executed
        -:   43:}
        -:   44:
function _ZNK4mlir12ShapeAdaptor7getDimsERN4llvm15SmallVectorImplIlEE called 231 returned 100% blocks executed 41%
      231:   45:void ShapeAdaptor::getDims(SmallVectorImpl<int64_t> &res) const {
     231*:   46:  assert(hasRank());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
      462:   47:  if (auto t = val.dyn_cast<Type>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   48:    ArrayRef<int64_t> vals = t.cast<ShapedType>().getShape();
call    0 never executed
call    1 never executed
    #####:   49:    res.assign(vals.begin(), vals.end());
call    0 never executed
      462:   50:  } else if (auto attr = val.dyn_cast<Attribute>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   51:    auto dattr = attr.cast<DenseIntElementsAttr>();
call    0 never executed
    #####:   52:    res.clear();
call    0 never executed
    #####:   53:    res.reserve(dattr.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    for (auto it : dattr.getValues<APInt>())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   55:      res.push_back(it.getSExtValue());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   56:  } else {
      231:   57:    auto vals = val.get<ShapedTypeComponents *>()->getDims();
call    0 returned 100%
call    1 returned 100%
      231:   58:    res.assign(vals.begin(), vals.end());
call    0 returned 100%
        -:   59:  }
      231:   60:}
        -:   61:
function _ZNK4mlir12ShapeAdaptor7getDimsERNS_20ShapedTypeComponentsE called 231 returned 100% blocks executed 80%
      231:   62:void ShapeAdaptor::getDims(ShapedTypeComponents &res) const {
     231*:   63:  assert(hasRank());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
      231:   64:  res.ranked = true;
      231:   65:  getDims(res.dims);
call    0 returned 100%
      231:   66:}
        -:   67:
function _ZNK4mlir12ShapeAdaptor10getDimSizeEi called 70125 returned 100% blocks executed 64%
    70125:   68:int64_t ShapeAdaptor::getDimSize(int index) const {
   70125*:   69:  assert(hasRank());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
   140250:   70:  if (auto t = val.dyn_cast<Type>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 71% (fallthrough)
branch  3 taken 29%
    49650:   71:    return t.cast<ShapedType>().getDimSize(index);
call    0 returned 100%
call    1 returned 100%
    40950:   72:  if (auto attr = val.dyn_cast<Attribute>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   73:    return attr.cast<DenseIntElementsAttr>()
call    0 never executed
    #####:   74:        .getValues<APInt>()[index]
call    0 never executed
    #####:   75:        .getSExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    20475:   76:  auto *stc = val.get<ShapedTypeComponents *>();
call    0 returned 100%
    20475:   77:  return stc->getDims()[index];
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   78:}
        -:   79:
function _ZNK4mlir12ShapeAdaptor7getRankEv called 42402 returned 100% blocks executed 81%
    42402:   80:int64_t ShapeAdaptor::getRank() const {
   42402*:   81:  assert(hasRank());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
    84804:   82:  if (auto t = val.dyn_cast<Type>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 72% (fallthrough)
branch  3 taken 28%
    30322:   83:    return t.cast<ShapedType>().getRank();
call    0 returned 100%
call    1 returned 100%
    24160:   84:  if (auto attr = val.dyn_cast<Attribute>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   85:    return attr.cast<DenseIntElementsAttr>().size();
call    0 never executed
call    1 never executed
    12080:   86:  return val.get<ShapedTypeComponents *>()->getDims().size();
call    0 returned 100%
call    1 returned 100%
        -:   87:}
        -:   88:
function _ZNK4mlir12ShapeAdaptor14hasStaticShapeEv called 2810 returned 100% blocks executed 49%
     2810:   89:bool ShapeAdaptor::hasStaticShape() const {
     2810:   90:  if (!hasRank())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   91:    return false;
        -:   92:
     5620:   93:  if (auto t = val.dyn_cast<Type>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 52% (fallthrough)
branch  3 taken 48%
     1448:   94:    return t.cast<ShapedType>().hasStaticShape();
call    0 returned 100%
call    1 returned 100%
     2724:   95:  if (auto attr = val.dyn_cast<Attribute>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   96:    auto dattr = attr.cast<DenseIntElementsAttr>();
call    0 never executed
    #####:   97:    for (auto index : dattr.getValues<APInt>())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   98:      if (ShapedType::isDynamic(index.getSExtValue()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   99:        return false;
branch  0 never executed
branch  1 never executed
    #####:  100:    return true;
        -:  101:  }
     1362:  102:  auto *stc = val.get<ShapedTypeComponents *>();
call    0 returned 100%
     1362:  103:  return llvm::none_of(stc->getDims(), ShapedType::isDynamic);
call    0 returned 100%
call    1 returned 100%
        -:  104:}
        -:  105:
function _ZNK4mlir12ShapeAdaptor14getNumElementsEv called 1405 returned 100% blocks executed 55%
     1405:  106:int64_t ShapeAdaptor::getNumElements() const {
    1405*:  107:  assert(hasStaticShape() && "cannot get element count of dynamic shaped type");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  108:
     2810:  109:  if (auto t = val.dyn_cast<Type>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 52% (fallthrough)
branch  3 taken 48%
      724:  110:    return t.cast<ShapedType>().getNumElements();
call    0 returned 100%
call    1 returned 100%
        -:  111:
     1362:  112:  if (auto attr = val.dyn_cast<Attribute>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  113:    auto dattr = attr.cast<DenseIntElementsAttr>();
call    0 never executed
    #####:  114:    int64_t num = 1;
    #####:  115:    for (auto index : dattr.getValues<APInt>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  116:      num *= index.getZExtValue();
call    0 never executed
    #####:  117:      assert(num >= 0 && "integer overflow in element count computation");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  118:    }
    #####:  119:    return num;
        -:  120:  }
        -:  121:
      681:  122:  auto *stc = val.get<ShapedTypeComponents *>();
call    0 returned 100%
      681:  123:  int64_t num = 1;
     3855:  124:  for (int64_t dim : stc->getDims()) {
call    0 returned 100%
branch  1 taken 82% (fallthrough)
branch  2 taken 18%
     3174:  125:    num *= dim;
    3174*:  126:    assert(num >= 0 && "integer overflow in element count computation");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  127:  }
      681:  128:  return num;
        -:  129:}
        -:  130:
function _ZNK4mlir12ShapeAdaptor4dumpEv called 0 returned 0% blocks executed 0%
    #####:  131:void ShapeAdaptor::dump() const {
    #####:  132:  if (!hasRank()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  133:    llvm::errs() << "<<unranked>>\n";
call    0 never executed
call    1 never executed
    #####:  134:    return;
        -:  135:  }
        -:  136:
    #####:  137:  SmallVector<int64_t> dims;
call    0 never executed
    #####:  138:  getDims(dims);
call    0 never executed
function _ZZNK4mlir12ShapeAdaptor4dumpEvENKUllE_clEl.isra.0 called 0 returned 0% blocks executed 0%
    #####:  139:  auto mapped = llvm::map_range(dims, [](int64_t dim) -> std::string {
    #####:  140:    if (ShapedType::isDynamic(dim))
branch  0 never executed
branch  1 never executed
    #####:  141:      return "?";
call    0 never executed
    #####:  142:    return llvm::formatv("{0}", dim).str();
call    0 never executed
    #####:  143:  });
call    0 never executed
    #####:  144:  llvm::errs() << "rank = " << getRank() << " dims = [";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  145:  llvm::interleave(mapped, llvm::errs(), "x");
call    0 never executed
call    1 never executed
    #####:  146:  llvm::errs() << "]\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  147:}
        -:  148:
function _ZN4mlir15ValueShapeRange15getValueAsShapeEi called 0 returned 0% blocks executed 0%
    #####:  149:ShapeAdaptor ValueShapeRange::getValueAsShape(int index) {
    #####:  150:  Value val = operator[](index);
call    0 never executed
    #####:  151:  if (valueToShape)
branch  0 never executed
branch  1 never executed
    #####:  152:    if (ShapeAdaptor ret = valueToShape(val))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  153:      return ret;
        -:  154:
    #####:  155:  DenseIntElementsAttr attr;
    #####:  156:  if (!matchPattern(val, m_Constant(&attr)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  157:    return nullptr;
call    0 never executed
    #####:  158:  if (attr.getType().getRank() != 1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  159:    return nullptr;
call    0 never executed
    #####:  160:  return attr;
call    0 never executed
        -:  161:}
        -:  162:
function _ZNK4mlir15ValueShapeRange8getShapeENS_5ValueE called 31640 returned 100% blocks executed 100%
    31640:  163:ShapeAdaptor ValueShapeRange::getShape(Value val) const {
    31640:  164:  if (operandShape)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
    17652:  165:    if (ShapeAdaptor ret = operandShape(val))
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
     9316:  166:      return ret;
    22324:  167:  return val.getType();
call    0 returned 100%
        -:  168:}
        -:  169:
function _ZNK4mlir15ValueShapeRange8getShapeEi called 28182 returned 100% blocks executed 71%
    28182:  170:ShapeAdaptor ValueShapeRange::getShape(int index) const {
    28182:  171:  if (index < 0 || static_cast<size_t>(index) >= size())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  172:    return nullptr;
call    0 never executed
    28182:  173:  return getShape(operator[](index));
call    0 returned 100%
call    1 returned 100%
        -:  174:}
        -:  175:
function _ZN4mlir6detail22inferReturnTensorTypesEN4llvm12function_refIFNS_13LogicalResultEPNS_11MLIRContextENS1_8OptionalINS_8LocationEEENS_15ValueShapeRangeENS_14DictionaryAttrENS_11RegionRangeERNS1_15SmallVectorImplINS_20ShapedTypeComponentsEEEEEES5_S8_NS_10ValueRangeESA_SB_RNSC_INS_4TypeEEE called 3497 returned 100% blocks executed 71%
     3497:  176:LogicalResult mlir::detail::inferReturnTensorTypes(
        -:  177:    function_ref<LogicalResult(
        -:  178:        MLIRContext *, Optional<Location> location, ValueShapeRange operands,
        -:  179:        DictionaryAttr attributes, RegionRange regions,
        -:  180:        SmallVectorImpl<ShapedTypeComponents> &retComponents)>
        -:  181:        componentTypeFn,
        -:  182:    MLIRContext *context, Optional<Location> location, ValueRange operands,
        -:  183:    DictionaryAttr attributes, RegionRange regions,
        -:  184:    SmallVectorImpl<Type> &inferredReturnTypes) {
     3497:  185:  SmallVector<ShapedTypeComponents, 2> retComponents;
call    0 returned 100%
     3497:  186:  if (failed(componentTypeFn(context, location, operands, attributes, regions,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  187:                             retComponents)))
    #####:  188:    return failure();
     6994:  189:  for (const auto &shapeAndType : retComponents) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    3497*:  190:    assert(shapeAndType.getAttribute() == nullptr && "attribute not supported");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    3497*:  191:    assert(shapeAndType.getElementType() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  192:           "element type required to construct tensor");
     3497:  193:    if (shapeAndType.hasRank())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     3497:  194:      inferredReturnTypes.push_back(RankedTensorType::get(
call    0 returned 100%
     6994:  195:          shapeAndType.getDims(), shapeAndType.getElementType()));
call    0 returned 100%
call    1 returned 100%
        -:  196:    else
    #####:  197:      inferredReturnTypes.push_back(
call    0 never executed
    #####:  198:          UnrankedTensorType::get(shapeAndType.getElementType()));
call    0 never executed
        -:  199:  }
     3497:  200:  return success();
call    0 returned 100%
        -:  201:}
        -:  202:
function _ZN4mlir6detail25verifyInferredResultTypesEPNS_9OperationE called 26206 returned 100% blocks executed 93%
    26206:  203:LogicalResult mlir::detail::verifyInferredResultTypes(Operation *op) {
    52412:  204:  SmallVector<Type, 4> inferredReturnTypes(op->getResultTypes());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    26206:  205:  auto retTypeFn = cast<InferTypeOpInterface>(op);
call    0 returned 100%
    52412:  206:  return retTypeFn.refineReturnTypes(op->getContext(), op->getLoc(),
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
call    2 returned 100%
        -:  207:                                     op->getOperands(), op->getAttrDictionary(),
    26206:  208:                                     op->getRegions(), inferredReturnTypes);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -:  209:}
