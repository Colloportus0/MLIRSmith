        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Target/LLVMIR/Dialect/NVVM/NVVMToLLVMIRTranslation.cpp
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/NVVM/CMakeFiles/obj.MLIRNVVMToLLVMIRTranslation.dir/NVVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/NVVM/CMakeFiles/obj.MLIRNVVMToLLVMIRTranslation.dir/NVVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- NVVMToLLVMIRTranslation.cpp - Translate NVVM to LLVM IR ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a translation between the MLIR NVVM dialect and
        -:   10:// LLVM IR.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Target/LLVMIR/Dialect/NVVM/NVVMToLLVMIRTranslation.h"
        -:   15:#include "mlir/Dialect/LLVMIR/NVVMDialect.h"
        -:   16:#include "mlir/Dialect/Utils/StaticValueUtils.h"
        -:   17:#include "mlir/IR/Operation.h"
        -:   18:#include "mlir/Support/LogicalResult.h"
        -:   19:#include "mlir/Target/LLVMIR/ModuleTranslation.h"
        -:   20:
        -:   21:#include "llvm/IR/IRBuilder.h"
        -:   22:#include "llvm/IR/IntrinsicsNVPTX.h"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:using namespace mlir::LLVM;
        -:   26:using mlir::LLVM::detail::createIntrinsicCall;
        -:   27:
function _ZL18getShflIntrinsicIdPN4llvm4TypeEN4mlir4NVVM8ShflKindEb called 0 returned 0% blocks executed 0%
    #####:   28:static llvm::Intrinsic::ID getShflIntrinsicId(llvm::Type *resultType,
        -:   29:                                              NVVM::ShflKind kind,
        -:   30:                                              bool withPredicate) {
        -:   31:
    #####:   32:  if (withPredicate) {
branch  0 never executed
branch  1 never executed
    #####:   33:    resultType = cast<llvm::StructType>(resultType)->getElementType(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   34:    switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   35:    case NVVM::ShflKind::bfly:
    #####:   36:      return resultType->isFloatTy()
branch  0 never executed
branch  1 never executed
    #####:   37:                 ? llvm::Intrinsic::nvvm_shfl_sync_bfly_f32p
branch  0 never executed
branch  1 never executed
        -:   38:                 : llvm::Intrinsic::nvvm_shfl_sync_bfly_i32p;
    #####:   39:    case NVVM::ShflKind::up:
    #####:   40:      return resultType->isFloatTy() ? llvm::Intrinsic::nvvm_shfl_sync_up_f32p
branch  0 never executed
branch  1 never executed
        -:   41:                                     : llvm::Intrinsic::nvvm_shfl_sync_up_i32p;
    #####:   42:    case NVVM::ShflKind::down:
    #####:   43:      return resultType->isFloatTy()
branch  0 never executed
branch  1 never executed
    #####:   44:                 ? llvm::Intrinsic::nvvm_shfl_sync_down_f32p
branch  0 never executed
branch  1 never executed
        -:   45:                 : llvm::Intrinsic::nvvm_shfl_sync_down_i32p;
    #####:   46:    case NVVM::ShflKind::idx:
    #####:   47:      return resultType->isFloatTy() ? llvm::Intrinsic::nvvm_shfl_sync_idx_f32p
branch  0 never executed
branch  1 never executed
        -:   48:                                     : llvm::Intrinsic::nvvm_shfl_sync_idx_i32p;
        -:   49:    }
        -:   50:  } else {
    #####:   51:    switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   52:    case NVVM::ShflKind::bfly:
    #####:   53:      return resultType->isFloatTy() ? llvm::Intrinsic::nvvm_shfl_sync_bfly_f32
branch  0 never executed
branch  1 never executed
        -:   54:                                     : llvm::Intrinsic::nvvm_shfl_sync_bfly_i32;
    #####:   55:    case NVVM::ShflKind::up:
    #####:   56:      return resultType->isFloatTy() ? llvm::Intrinsic::nvvm_shfl_sync_up_f32
branch  0 never executed
branch  1 never executed
        -:   57:                                     : llvm::Intrinsic::nvvm_shfl_sync_up_i32;
    #####:   58:    case NVVM::ShflKind::down:
    #####:   59:      return resultType->isFloatTy() ? llvm::Intrinsic::nvvm_shfl_sync_down_f32
branch  0 never executed
branch  1 never executed
        -:   60:                                     : llvm::Intrinsic::nvvm_shfl_sync_down_i32;
    #####:   61:    case NVVM::ShflKind::idx:
    #####:   62:      return resultType->isFloatTy() ? llvm::Intrinsic::nvvm_shfl_sync_idx_f32
branch  0 never executed
branch  1 never executed
        -:   63:                                     : llvm::Intrinsic::nvvm_shfl_sync_idx_i32;
        -:   64:    }
        -:   65:  }
    #####:   66:  llvm_unreachable("unknown shuffle kind");
call    0 never executed
        -:   67:}
        -:   68:
        -:   69:/// Return the intrinsic ID associated with ldmatrix for the given paramters.
function _ZL22getLdMatrixIntrinsicIdN4mlir4NVVM9MMALayoutEi called 0 returned 0% blocks executed 0%
    #####:   70:static llvm::Intrinsic::ID getLdMatrixIntrinsicId(NVVM::MMALayout layout,
        -:   71:                                                  int32_t num) {
    #####:   72:  if (layout == NVVM::MMALayout::row) {
branch  0 never executed
branch  1 never executed
    #####:   73:    switch (num) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   74:    case 1:
        -:   75:      return llvm::Intrinsic::nvvm_ldmatrix_sync_aligned_m8n8_x1_b16;
    #####:   76:    case 2:
    #####:   77:      return llvm::Intrinsic::nvvm_ldmatrix_sync_aligned_m8n8_x2_b16;
    #####:   78:    case 4:
    #####:   79:      return llvm::Intrinsic::nvvm_ldmatrix_sync_aligned_m8n8_x4_b16;
    #####:   80:    default:
    #####:   81:      llvm_unreachable("unsupported number of matrix");
call    0 never executed
        -:   82:    }
        -:   83:
        -:   84:  } else {
    #####:   85:    switch (num) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   86:    case 1:
        -:   87:      return llvm::Intrinsic::nvvm_ldmatrix_sync_aligned_m8n8_x1_trans_b16;
    #####:   88:    case 2:
    #####:   89:      return llvm::Intrinsic::nvvm_ldmatrix_sync_aligned_m8n8_x2_trans_b16;
    #####:   90:    case 4:
    #####:   91:      return llvm::Intrinsic::nvvm_ldmatrix_sync_aligned_m8n8_x4_trans_b16;
    #####:   92:    default:
    #####:   93:      llvm_unreachable("unsupported number of matrix");
call    0 never executed
        -:   94:    }
        -:   95:  }
        -:   96:}
        -:   97:
        -:   98:namespace {
        -:   99:/// Implementation of the dialect interface that converts operations belonging
        -:  100:/// to the NVVM dialect to LLVM IR.
        -:  101:class NVVMDialectLLVMIRTranslationInterface
        -:  102:    : public LLVMTranslationDialectInterface {
        -:  103:public:
        -:  104:  using LLVMTranslationDialectInterface::LLVMTranslationDialectInterface;
        -:  105:
        -:  106:  /// Translates the given operation to LLVM IR using the provided IR builder
        -:  107:  /// and saving the state in `moduleTranslation`.
        -:  108:  LogicalResult
function _ZNK12_GLOBAL__N_137NVVMDialectLLVMIRTranslationInterface16convertOperationEPN4mlir9OperationERN4llvm13IRBuilderBaseERNS1_4LLVM17ModuleTranslationE called 0 returned 0% blocks executed 0%
    #####:  109:  convertOperation(Operation *op, llvm::IRBuilderBase &builder,
        -:  110:                   LLVM::ModuleTranslation &moduleTranslation) const final {
    #####:  111:    Operation &opInst = *op;
call    0 never executed
        -:  112:#include "mlir/Dialect/LLVMIR/NVVMConversions.inc"
        -:  113:
    #####:  114:    return failure();
        -:  115:  }
        -:  116:
        -:  117:  /// Attaches module-level metadata for functions marked as kernels.
        -:  118:  LogicalResult
function _ZNK12_GLOBAL__N_137NVVMDialectLLVMIRTranslationInterface14amendOperationEPN4mlir9OperationENS1_14NamedAttributeERNS1_4LLVM17ModuleTranslationE called 0 returned 0% blocks executed 0%
    #####:  119:  amendOperation(Operation *op, NamedAttribute attribute,
        -:  120:                 LLVM::ModuleTranslation &moduleTranslation) const final {
    #####:  121:    auto func = dyn_cast<LLVM::LLVMFuncOp>(op);
call    0 never executed
    #####:  122:    if (!func)
branch  0 never executed
branch  1 never executed
    #####:  123:      return failure();
    #####:  124:    llvm::LLVMContext &llvmContext = moduleTranslation.getLLVMContext();
call    0 never executed
    #####:  125:    llvm::Function *llvmFunc = moduleTranslation.lookupFunction(func.getName());
call    0 never executed
call    1 never executed
        -:  126:
function _ZZNK12_GLOBAL__N_137NVVMDialectLLVMIRTranslationInterface14amendOperationEPN4mlir9OperationENS1_14NamedAttributeERNS1_4LLVM17ModuleTranslationEENKUliN4llvm9StringRefEE_clEiS9_ called 0 returned 0% blocks executed 0%
    #####:  127:    auto generateMetadata = [&](int dim, StringRef name) {
    #####:  128:      llvm::Metadata *llvmMetadata[] = {
    #####:  129:          llvm::ValueAsMetadata::get(llvmFunc),
call    0 never executed
    #####:  130:          llvm::MDString::get(llvmContext, name),
    #####:  131:          llvm::ValueAsMetadata::get(llvm::ConstantInt::get(
call    0 never executed
call    1 never executed
    #####:  132:              llvm::Type::getInt32Ty(llvmContext), dim))};
call    0 never executed
call    1 never executed
    #####:  133:      llvm::MDNode *llvmMetadataNode =
call    0 never executed
    #####:  134:          llvm::MDNode::get(llvmContext, llvmMetadata);
call    0 never executed
    #####:  135:      moduleTranslation.getOrInsertNamedModuleMetadata("nvvm.annotations")
call    0 never executed
    #####:  136:          ->addOperand(llvmMetadataNode);
call    0 never executed
call    1 never executed
    #####:  137:    };
    #####:  138:    if (attribute.getName() == NVVM::NVVMDialect::getMaxntidAttrName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  139:      if (!attribute.getValue().dyn_cast<ArrayAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:        return failure();
    #####:  141:      SmallVector<int64_t> values =
    #####:  142:          extractFromI64ArrayAttr(attribute.getValue());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  143:      generateMetadata(values[0], NVVM::NVVMDialect::getMaxntidXName());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  144:      if (values.size() > 1)
branch  0 never executed
branch  1 never executed
    #####:  145:        generateMetadata(values[1], NVVM::NVVMDialect::getMaxntidYName());
call    0 never executed
    #####:  146:      if (values.size() > 2)
branch  0 never executed
branch  1 never executed
    #####:  147:        generateMetadata(values[2], NVVM::NVVMDialect::getMaxntidZName());
call    0 never executed
    #####:  148:    } else if (attribute.getName() == NVVM::NVVMDialect::getReqntidAttrName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  149:      if (!attribute.getValue().dyn_cast<ArrayAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  150:        return failure();
    #####:  151:      SmallVector<int64_t> values =
    #####:  152:          extractFromI64ArrayAttr(attribute.getValue());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  153:      generateMetadata(values[0], NVVM::NVVMDialect::getReqntidXName());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  154:      if (values.size() > 1)
branch  0 never executed
branch  1 never executed
    #####:  155:        generateMetadata(values[1], NVVM::NVVMDialect::getReqntidYName());
call    0 never executed
    #####:  156:      if (values.size() > 2)
branch  0 never executed
branch  1 never executed
    #####:  157:        generateMetadata(values[2], NVVM::NVVMDialect::getReqntidZName());
call    0 never executed
    #####:  158:    } else if (attribute.getName() ==
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  159:               NVVM::NVVMDialect::getMinctasmAttrName()) {
    #####:  160:      auto value = attribute.getValue().dyn_cast<IntegerAttr>();
call    0 never executed
    #####:  161:      generateMetadata(value.getInt(), "minctasm");
call    0 never executed
call    1 never executed
    #####:  162:    } else if (attribute.getName() == NVVM::NVVMDialect::getMaxnregAttrName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  163:      auto value = attribute.getValue().dyn_cast<IntegerAttr>();
call    0 never executed
    #####:  164:      generateMetadata(value.getInt(), "maxnreg");
call    0 never executed
call    1 never executed
    #####:  165:    } else if (attribute.getName() ==
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  166:               NVVM::NVVMDialect::getKernelFuncAttrName()) {
    #####:  167:      llvm::Metadata *llvmMetadataKernel[] = {
    #####:  168:          llvm::ValueAsMetadata::get(llvmFunc),
call    0 never executed
    #####:  169:          llvm::MDString::get(llvmContext, "kernel"),
    #####:  170:          llvm::ValueAsMetadata::get(
call    0 never executed
    #####:  171:              llvm::ConstantInt::get(llvm::Type::getInt32Ty(llvmContext), 1))};
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  172:      llvm::MDNode *llvmMetadataNode =
call    0 never executed
    #####:  173:          llvm::MDNode::get(llvmContext, llvmMetadataKernel);
call    0 never executed
    #####:  174:      moduleTranslation.getOrInsertNamedModuleMetadata("nvvm.annotations")
call    0 never executed
    #####:  175:          ->addOperand(llvmMetadataNode);
call    0 never executed
call    1 never executed
        -:  176:    }
    #####:  177:    return success();
        -:  178:  }
        -:  179:};
        -:  180:} // namespace
        -:  181:
function _ZN4mlir30registerNVVMDialectTranslationERNS_15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:  182:void mlir::registerNVVMDialectTranslation(DialectRegistry &registry) {
    #####:  183:  registry.insert<NVVM::NVVMDialect>();
call    0 never executed
    #####:  184:  registry.addExtension(+[](MLIRContext *ctx, NVVM::NVVMDialect *dialect) {
call    0 never executed
call    1 never executed
        -:  185:    dialect->addInterfaces<NVVMDialectLLVMIRTranslationInterface>();
        -:  186:  });
    #####:  187:}
        -:  188:
function _ZN4mlir30registerNVVMDialectTranslationERNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  189:void mlir::registerNVVMDialectTranslation(MLIRContext &context) {
    #####:  190:  DialectRegistry registry;
call    0 never executed
    #####:  191:  registerNVVMDialectTranslation(registry);
call    0 never executed
    #####:  192:  context.appendDialectRegistry(registry);
call    0 never executed
call    1 never executed
    #####:  193:}
