        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/TosaToLinalg/TosaToLinalg.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TosaToLinalg/CMakeFiles/obj.MLIRTosaToLinalg.dir/TosaToLinalg.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TosaToLinalg/CMakeFiles/obj.MLIRTosaToLinalg.dir/TosaToLinalg.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TosaToLinalg.cpp - Lowering Tosa to Linalg Dialect -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// These rewriters lower from the Tosa to the Linalg dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TosaToLinalg/TosaToLinalg.h"
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   16:#include "mlir/Dialect/Math/IR/Math.h"
        -:   17:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   18:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   19:#include "mlir/Dialect/Tensor/Utils/Utils.h"
        -:   20:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   21:#include "mlir/Dialect/Tosa/Utils/CoversionUtils.h"
        -:   22:#include "mlir/Dialect/Utils/ReshapeOpsUtils.h"
        -:   23:#include "mlir/IR/ImplicitLocOpBuilder.h"
        -:   24:#include "mlir/IR/Matchers.h"
        -:   25:#include "mlir/IR/PatternMatch.h"
        -:   26:#include "mlir/Transforms/DialectConversion.h"
        -:   27:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   28:
        -:   29:#include <numeric>
        -:   30:
        -:   31:using namespace mlir;
        -:   32:using namespace mlir::tosa;
        -:   33:
        -:   34:template <typename T>
        -:   35:static arith::ConstantOp
function _Z27createConstFromIntAttributeIiEN4mlir5arith10ConstantOpEPNS0_9OperationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_4TypeERNS0_9OpBuilderE called 0 returned 0% blocks executed 0%
    #####:   36:createConstFromIntAttribute(Operation *op, const std::string &attrName,
call    0 never executed
        -:   37:                            Type requiredAttrType, OpBuilder &rewriter) {
    #####:   38:  auto castedN = static_cast<T>(
branch  0 never executed
branch  1 never executed
    #####:   39:      op->getAttr(attrName).cast<IntegerAttr>().getValue().getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   40:  return rewriter.create<arith::ConstantOp>(
    #####:   41:      op->getLoc(), IntegerAttr::get(requiredAttrType, castedN));
call    0 never executed
call    1 never executed
        -:   42:}
        -:   43:
        -:   44:static Value
function _ZL43createLinalgBodyCalculationForElementwiseOpPN4mlir9OperationENS_10ValueRangeEN4llvm8ArrayRefINS_4TypeEEERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   45:createLinalgBodyCalculationForElementwiseOp(Operation *op, ValueRange args,
        -:   46:                                            ArrayRef<Type> resultTypes,
        -:   47:                                            PatternRewriter &rewriter) {
    #####:   48:  Location loc = op->getLoc();
call    0 never executed
    #####:   49:  auto elementTy =
    #####:   50:      op->getOperand(0).getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   51:
        -:   52:  // tosa::AbsOp
    #####:   53:  if (isa<tosa::AbsOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   54:    return rewriter.create<math::AbsFOp>(loc, resultTypes, args);
call    0 never executed
        -:   55:
    #####:   56:  if (isa<tosa::AbsOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   57:    auto zero = rewriter.create<arith::ConstantOp>(
    #####:   58:        loc, rewriter.getZeroAttr(elementTy));
call    0 never executed
call    1 never executed
    #####:   59:    auto cmp = rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt,
    #####:   60:                                              args[0], zero);
call    0 never executed
call    1 never executed
    #####:   61:    auto neg = rewriter.create<arith::SubIOp>(loc, zero, args[0]);
call    0 never executed
call    1 never executed
    #####:   62:    return rewriter.create<arith::SelectOp>(loc, cmp, args[0], neg);
call    0 never executed
call    1 never executed
        -:   63:  }
        -:   64:
        -:   65:  // tosa::AddOp
    #####:   66:  if (isa<tosa::AddOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   67:    return rewriter.create<arith::AddFOp>(loc, resultTypes, args);
call    0 never executed
        -:   68:
    #####:   69:  if (isa<tosa::AddOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   70:    return rewriter.create<arith::AddIOp>(loc, resultTypes, args);
call    0 never executed
        -:   71:
        -:   72:  // tosa::SubOp
    #####:   73:  if (isa<tosa::SubOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   74:    return rewriter.create<arith::SubFOp>(loc, resultTypes, args);
call    0 never executed
        -:   75:
    #####:   76:  if (isa<tosa::SubOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   77:    return rewriter.create<arith::SubIOp>(loc, resultTypes, args);
call    0 never executed
        -:   78:
        -:   79:  // tosa::MulOp
    #####:   80:  if (isa<tosa::MulOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   81:    if (dyn_cast<tosa::MulOp>(op).getShift() != 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   82:      (void)rewriter.notifyMatchFailure(op,
    #####:   83:                                        "Cannot have shift value for float");
call    0 never executed
    #####:   84:      return nullptr;
        -:   85:    }
    #####:   86:    return rewriter.create<arith::MulFOp>(loc, resultTypes, args);
call    0 never executed
        -:   87:  }
        -:   88:
        -:   89:  // tosa::DivOp
    #####:   90:  if (isa<tosa::DivOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   91:    return rewriter.create<arith::DivSIOp>(loc, resultTypes, args);
call    0 never executed
        -:   92:
        -:   93:  // tosa::ReciprocalOp
    #####:   94:  if (isa<tosa::ReciprocalOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   95:    auto one =
    #####:   96:        rewriter.create<arith::ConstantOp>(loc, FloatAttr::get(elementTy, 1));
call    0 never executed
call    1 never executed
    #####:   97:    return rewriter.create<arith::DivFOp>(loc, resultTypes, one, args[0]);
call    0 never executed
call    1 never executed
        -:   98:  }
        -:   99:
    #####:  100:  if (isa<tosa::MulOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  101:    Value a = args[0];
call    0 never executed
    #####:  102:    Value b = args[1];
call    0 never executed
    #####:  103:    auto shift =
    #####:  104:        op->getAttr("shift").cast<IntegerAttr>().getValue().getSExtValue();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  105:    if (shift > 0) {
branch  0 never executed
branch  1 never executed
    #####:  106:      auto shiftConst =
    #####:  107:          rewriter.create<arith::ConstantIntOp>(loc, shift, /*bitwidth=*/8);
call    0 never executed
    #####:  108:      if (!a.getType().isInteger(32))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  109:        a = rewriter.create<arith::ExtSIOp>(loc, rewriter.getI32Type(), a);
call    0 never executed
call    1 never executed
        -:  110:
    #####:  111:      if (!b.getType().isInteger(32))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:        b = rewriter.create<arith::ExtSIOp>(loc, rewriter.getI32Type(), b);
call    0 never executed
call    1 never executed
        -:  113:
    #####:  114:      auto result = rewriter.create<tosa::ApplyScaleOp>(
    #####:  115:          loc, rewriter.getI32Type(), a, b, shiftConst,
call    0 never executed
    #####:  116:          rewriter.getBoolAttr(false));
call    0 never executed
call    1 never executed
        -:  117:
    #####:  118:      if (elementTy.isInteger(32))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  119:        return result;
        -:  120:
    #####:  121:      return rewriter.create<arith::TruncIOp>(loc, elementTy, result);
call    0 never executed
        -:  122:    }
        -:  123:
    #####:  124:    int aWidth = a.getType().getIntOrFloatBitWidth();
call    0 never executed
    #####:  125:    int bWidth = b.getType().getIntOrFloatBitWidth();
call    0 never executed
    #####:  126:    int cWidth = resultTypes[0].getIntOrFloatBitWidth();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  127:
    #####:  128:    if (aWidth < cWidth)
branch  0 never executed
branch  1 never executed
    #####:  129:      a = rewriter.create<arith::ExtSIOp>(loc, resultTypes[0], a);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  130:    if (bWidth < cWidth)
branch  0 never executed
branch  1 never executed
    #####:  131:      b = rewriter.create<arith::ExtSIOp>(loc, resultTypes[0], b);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  132:
    #####:  133:    return rewriter.create<arith::MulIOp>(loc, resultTypes, a, b);
call    0 never executed
        -:  134:  }
        -:  135:
        -:  136:  // tosa::NegateOp
    #####:  137:  if (isa<tosa::NegateOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  138:    return rewriter.create<arith::NegFOp>(loc, resultTypes, args);
call    0 never executed
        -:  139:
    #####:  140:  if (isa<tosa::NegateOp>(op) && elementTy.isa<IntegerType>() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  141:      !cast<tosa::NegateOp>(op).getQuantizationInfo()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  142:    auto constant =
    #####:  143:        rewriter.create<arith::ConstantOp>(loc, IntegerAttr::get(elementTy, 0));
call    0 never executed
call    1 never executed
    #####:  144:    return rewriter.create<arith::SubIOp>(loc, resultTypes, constant, args[0]);
call    0 never executed
call    1 never executed
        -:  145:  }
        -:  146:
    #####:  147:  if (isa<tosa::NegateOp>(op) && elementTy.isa<IntegerType>() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  148:      cast<tosa::NegateOp>(op).getQuantizationInfo()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  149:    auto quantizationInfo = cast<tosa::NegateOp>(op).getQuantizationInfo();
call    0 never executed
call    1 never executed
    #####:  150:    int32_t inputBitWidth = elementTy.getIntOrFloatBitWidth();
call    0 never executed
    #####:  151:    int64_t inZp = quantizationInfo.value().getInputZp();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  152:    int64_t outZp = quantizationInfo.value().getOutputZp();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  153:
        -:  154:    // Compute the maximum value that can occur in the intermediate buffer.
    #####:  155:    int64_t zpAdd = inZp + outZp;
    #####:  156:    int64_t maxValue = APInt::getSignedMaxValue(inputBitWidth).getSExtValue() +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  157:                       std::abs(zpAdd) + 1;
branch  0 never executed
branch  1 never executed
        -:  158:
        -:  159:    // Convert that maximum value into the maximum bitwidth needed to represent
        -:  160:    // it. We assume 48-bit numbers may be supported further in the pipeline.
    #####:  161:    int intermediateBitWidth = 64;
    #####:  162:    if (maxValue <= APInt::getSignedMaxValue(16).getSExtValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  163:      intermediateBitWidth = 16;
    #####:  164:    } else if (maxValue <= APInt::getSignedMaxValue(32).getSExtValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  165:      intermediateBitWidth = 32;
    #####:  166:    } else if (maxValue <= APInt::getSignedMaxValue(48).getSExtValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  167:      intermediateBitWidth = 48;
        -:  168:    }
        -:  169:
    #####:  170:    Type intermediateType = rewriter.getIntegerType(intermediateBitWidth);
call    0 never executed
    #####:  171:    Value zpAddValue = rewriter.create<arith::ConstantOp>(
    #####:  172:        loc, rewriter.getIntegerAttr(intermediateType, zpAdd));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  173:
        -:  174:    // The negation can be applied by doing:
        -:  175:    //  outputValue = inZp + outZp - inputValue
    #####:  176:    auto ext = rewriter.create<arith::ExtSIOp>(loc, intermediateType, args[0]);
call    0 never executed
call    1 never executed
    #####:  177:    auto sub = rewriter.create<arith::SubIOp>(loc, zpAddValue, ext);
call    0 never executed
        -:  178:
        -:  179:    // Clamp to the negation range.
    #####:  180:    auto min = rewriter.create<arith::ConstantIntOp>(
    #####:  181:        loc, APInt::getSignedMinValue(inputBitWidth).getSExtValue(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  182:        intermediateType);
call    0 never executed
    #####:  183:    auto max = rewriter.create<arith::ConstantIntOp>(
    #####:  184:        loc, APInt::getSignedMaxValue(inputBitWidth).getSExtValue(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  185:        intermediateType);
call    0 never executed
    #####:  186:    auto clamp = clampIntHelper(loc, sub, min, max, rewriter);
call    0 never executed
        -:  187:
        -:  188:    // Truncate to the final value.
    #####:  189:    return rewriter.create<arith::TruncIOp>(loc, elementTy, clamp);
call    0 never executed
        -:  190:  }
        -:  191:
        -:  192:  // tosa::BitwiseAndOp
    #####:  193:  if (isa<tosa::BitwiseAndOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  194:    return rewriter.create<arith::AndIOp>(loc, resultTypes, args);
call    0 never executed
        -:  195:
        -:  196:  // tosa::BitwiseOrOp
    #####:  197:  if (isa<tosa::BitwiseOrOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  198:    return rewriter.create<arith::OrIOp>(loc, resultTypes, args);
call    0 never executed
        -:  199:
        -:  200:  // tosa::BitwiseNotOp
    #####:  201:  if (isa<tosa::BitwiseNotOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  202:    auto allOnesAttr = rewriter.getIntegerAttr(
    #####:  203:        elementTy, APInt::getAllOnes(elementTy.getIntOrFloatBitWidth()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  204:    auto allOnes = rewriter.create<arith::ConstantOp>(loc, allOnesAttr);
call    0 never executed
    #####:  205:    return rewriter.create<arith::XOrIOp>(loc, resultTypes, args[0], allOnes);
call    0 never executed
call    1 never executed
        -:  206:  }
        -:  207:
        -:  208:  // tosa::BitwiseXOrOp
    #####:  209:  if (isa<tosa::BitwiseXorOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  210:    return rewriter.create<arith::XOrIOp>(loc, resultTypes, args);
call    0 never executed
        -:  211:
        -:  212:  // tosa::LogicalLeftShiftOp
    #####:  213:  if (isa<tosa::LogicalLeftShiftOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  214:    return rewriter.create<arith::ShLIOp>(loc, resultTypes, args);
call    0 never executed
        -:  215:
        -:  216:  // tosa::LogicalRightShiftOp
    #####:  217:  if (isa<tosa::LogicalRightShiftOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  218:    return rewriter.create<arith::ShRUIOp>(loc, resultTypes, args);
call    0 never executed
        -:  219:
        -:  220:  // tosa::ArithmeticRightShiftOp
    #####:  221:  if (isa<tosa::ArithmeticRightShiftOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  222:    auto result = rewriter.create<arith::ShRSIOp>(loc, resultTypes, args);
call    0 never executed
    #####:  223:    auto round = op->getAttr("round").cast<BoolAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  224:    if (!round) {
branch  0 never executed
branch  1 never executed
    #####:  225:      return result;
        -:  226:    }
        -:  227:
    #####:  228:    Type i1Ty = IntegerType::get(rewriter.getContext(), /*width=*/1);
call    0 never executed
    #####:  229:    auto one =
    #####:  230:        rewriter.create<arith::ConstantOp>(loc, IntegerAttr::get(elementTy, 1));
call    0 never executed
call    1 never executed
    #####:  231:    auto zero =
    #####:  232:        rewriter.create<arith::ConstantOp>(loc, IntegerAttr::get(elementTy, 0));
call    0 never executed
call    1 never executed
    #####:  233:    auto i1one =
    #####:  234:        rewriter.create<arith::ConstantOp>(loc, IntegerAttr::get(i1Ty, 1));
call    0 never executed
call    1 never executed
        -:  235:
        -:  236:    // Checking that input2 != 0
    #####:  237:    auto shiftValueGreaterThanZero = rewriter.create<arith::CmpIOp>(
    #####:  238:        loc, arith::CmpIPredicate::sgt, args[1], zero);
call    0 never executed
call    1 never executed
        -:  239:
        -:  240:    // Checking for the last bit of input1 to be 1
    #####:  241:    auto subtract =
    #####:  242:        rewriter.create<arith::SubIOp>(loc, resultTypes, args[1], one);
call    0 never executed
call    1 never executed
    #####:  243:    auto shifted =
    #####:  244:        rewriter.create<arith::ShRSIOp>(loc, resultTypes, args[0], subtract)
call    0 never executed
call    1 never executed
    #####:  245:            ->getResults();
branch  0 never executed
branch  1 never executed
    #####:  246:    auto truncated =
    #####:  247:        rewriter.create<arith::TruncIOp>(loc, i1Ty, shifted, mlir::None);
call    0 never executed
    #####:  248:    auto isInputOdd =
    #####:  249:        rewriter.create<arith::AndIOp>(loc, i1Ty, truncated, i1one);
call    0 never executed
        -:  250:
    #####:  251:    auto shouldRound = rewriter.create<arith::AndIOp>(
    #####:  252:        loc, i1Ty, shiftValueGreaterThanZero, isInputOdd);
call    0 never executed
    #####:  253:    auto extended =
    #####:  254:        rewriter.create<arith::ExtUIOp>(loc, resultTypes, shouldRound);
call    0 never executed
    #####:  255:    return rewriter.create<arith::AddIOp>(loc, resultTypes, result, extended);
call    0 never executed
        -:  256:  }
        -:  257:
        -:  258:  // tosa::ClzOp
    #####:  259:  if (isa<tosa::ClzOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  260:    return rewriter.create<math::CountLeadingZerosOp>(loc, elementTy, args[0]);
call    0 never executed
call    1 never executed
        -:  261:  }
        -:  262:
        -:  263:  // tosa::LogicalAnd
    #####:  264:  if (isa<tosa::LogicalAndOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  265:    return rewriter.create<arith::AndIOp>(loc, resultTypes, args);
call    0 never executed
        -:  266:
        -:  267:  // tosa::LogicalNot
    #####:  268:  if (isa<tosa::LogicalNotOp>(op) && elementTy.isInteger(1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  269:    auto one = rewriter.create<arith::ConstantOp>(
    #####:  270:        loc, rewriter.getIntegerAttr(elementTy, 1));
call    0 never executed
call    1 never executed
    #####:  271:    return rewriter.create<arith::XOrIOp>(loc, resultTypes, args[0], one);
call    0 never executed
call    1 never executed
        -:  272:  }
        -:  273:
        -:  274:  // tosa::LogicalOr
    #####:  275:  if (isa<tosa::LogicalOrOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  276:    return rewriter.create<arith::OrIOp>(loc, resultTypes, args);
call    0 never executed
        -:  277:
        -:  278:  // tosa::LogicalXor
    #####:  279:  if (isa<tosa::LogicalXorOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  280:    return rewriter.create<arith::XOrIOp>(loc, resultTypes, args);
call    0 never executed
        -:  281:
        -:  282:  // tosa::PowOp
    #####:  283:  if (isa<tosa::PowOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  284:    return rewriter.create<mlir::math::PowFOp>(loc, resultTypes, args);
call    0 never executed
        -:  285:
        -:  286:  // tosa::RsqrtOp
    #####:  287:  if (isa<tosa::RsqrtOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  288:    return rewriter.create<mlir::math::RsqrtOp>(loc, resultTypes, args);
call    0 never executed
        -:  289:
        -:  290:  // tosa::LogOp
    #####:  291:  if (isa<tosa::LogOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  292:    return rewriter.create<mlir::math::LogOp>(loc, resultTypes, args);
call    0 never executed
        -:  293:
        -:  294:  // tosa::ExpOp
    #####:  295:  if (isa<tosa::ExpOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  296:    return rewriter.create<mlir::math::ExpOp>(loc, resultTypes, args);
call    0 never executed
        -:  297:
        -:  298:  // tosa::TanhOp
    #####:  299:  if (isa<tosa::TanhOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  300:    return rewriter.create<mlir::math::TanhOp>(loc, resultTypes, args);
call    0 never executed
        -:  301:
        -:  302:  // tosa::GreaterOp
    #####:  303:  if (isa<tosa::GreaterOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  304:    return rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OGT,
    #####:  305:                                          args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  306:
    #####:  307:  if (isa<tosa::GreaterOp>(op) && elementTy.isSignlessInteger())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  308:    return rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt,
    #####:  309:                                          args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  310:
        -:  311:  // tosa::GreaterEqualOp
    #####:  312:  if (isa<tosa::GreaterEqualOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  313:    return rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OGE,
    #####:  314:                                          args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  315:
    #####:  316:  if (isa<tosa::GreaterEqualOp>(op) && elementTy.isSignlessInteger())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  317:    return rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sge,
    #####:  318:                                          args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  319:
        -:  320:  // tosa::EqualOp
    #####:  321:  if (isa<tosa::EqualOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  322:    return rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OEQ,
    #####:  323:                                          args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  324:
    #####:  325:  if (isa<tosa::EqualOp>(op) && elementTy.isSignlessInteger())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  326:    return rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::eq,
    #####:  327:                                          args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  328:
        -:  329:  // tosa::SelectOp
    #####:  330:  if (isa<tosa::SelectOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  331:    elementTy = op->getOperand(1).getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  332:    if (elementTy.isa<FloatType>() || elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  333:      return rewriter.create<arith::SelectOp>(loc, args[0], args[1], args[2]);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  334:  }
        -:  335:
        -:  336:  // tosa::MaximumOp
    #####:  337:  if (isa<tosa::MaximumOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  338:    return rewriter.create<arith::MaxFOp>(loc, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  339:  }
        -:  340:
    #####:  341:  if (isa<tosa::MaximumOp>(op) && elementTy.isSignlessInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  342:    auto predicate = rewriter.create<arith::CmpIOp>(
    #####:  343:        loc, arith::CmpIPredicate::sgt, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  344:    return rewriter.create<arith::SelectOp>(loc, predicate, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  345:  }
        -:  346:
        -:  347:  // tosa::MinimumOp
    #####:  348:  if (isa<tosa::MinimumOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  349:    return rewriter.create<arith::MinFOp>(loc, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  350:  }
        -:  351:
    #####:  352:  if (isa<tosa::MinimumOp>(op) && elementTy.isSignlessInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  353:    auto predicate = rewriter.create<arith::CmpIOp>(
    #####:  354:        loc, arith::CmpIPredicate::slt, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  355:    return rewriter.create<arith::SelectOp>(loc, predicate, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  356:  }
        -:  357:
        -:  358:  // tosa::CeilOp
    #####:  359:  if (isa<tosa::CeilOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  360:    return rewriter.create<math::CeilOp>(loc, resultTypes, args);
call    0 never executed
        -:  361:
        -:  362:  // tosa::FloorOp
    #####:  363:  if (isa<tosa::FloorOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  364:    return rewriter.create<math::FloorOp>(loc, resultTypes, args);
call    0 never executed
        -:  365:
        -:  366:  // tosa::ClampOp
    #####:  367:  if (isa<tosa::ClampOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  368:    bool losesInfo = false;
    #####:  369:    APFloat minApf = op->getAttr("min_fp").cast<FloatAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  370:    APFloat maxApf = op->getAttr("max_fp").cast<FloatAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  371:    minApf.convert(elementTy.cast<FloatType>().getFloatSemantics(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  372:                   APFloat::rmNearestTiesToEven, &losesInfo);
    #####:  373:    maxApf.convert(elementTy.cast<FloatType>().getFloatSemantics(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  374:                   APFloat::rmNearestTiesToEven, &losesInfo);
    #####:  375:    auto min = rewriter.create<arith::ConstantOp>(
    #####:  376:        loc, elementTy, rewriter.getFloatAttr(elementTy, minApf));
call    0 never executed
call    1 never executed
    #####:  377:    auto max = rewriter.create<arith::ConstantOp>(
    #####:  378:        loc, elementTy, rewriter.getFloatAttr(elementTy, maxApf));
call    0 never executed
call    1 never executed
    #####:  379:    return clampFloatHelper(loc, args[0], min, max, rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  380:  }
        -:  381:
    #####:  382:  if (isa<tosa::ClampOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  383:    auto intTy = elementTy.cast<IntegerType>();
call    0 never executed
    #####:  384:    int32_t min = static_cast<int32_t>(
    #####:  385:        op->getAttr("min_int").cast<IntegerAttr>().getValue().getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  386:    int32_t max = static_cast<int32_t>(
    #####:  387:        op->getAttr("max_int").cast<IntegerAttr>().getValue().getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  388:
    #####:  389:    if (intTy.isUnsignedInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  390:      min = std::max<int32_t>(min, 0);
branch  0 never executed
branch  1 never executed
    #####:  391:      max = std::min<int32_t>(
        -:  392:          max,
    #####:  393:          APInt::getMaxValue(intTy.getIntOrFloatBitWidth()).getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  394:    } else {
    #####:  395:      min = std::max<int32_t>(
    #####:  396:          min, APInt::getSignedMinValue(intTy.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  397:                   .getSExtValue());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  398:      max = std::min<int32_t>(
    #####:  399:          max, APInt::getSignedMaxValue(intTy.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  400:                   .getSExtValue());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  401:    }
        -:  402:
    #####:  403:    auto minVal = rewriter.create<arith::ConstantIntOp>(
    #####:  404:        loc, min, intTy.getIntOrFloatBitWidth());
call    0 never executed
call    1 never executed
    #####:  405:    auto maxVal = rewriter.create<arith::ConstantIntOp>(
    #####:  406:        loc, max, intTy.getIntOrFloatBitWidth());
call    0 never executed
call    1 never executed
    #####:  407:    return clampIntHelper(loc, args[0], minVal, maxVal, rewriter);
call    0 never executed
call    1 never executed
        -:  408:  }
        -:  409:
        -:  410:  // tosa::SigmoidOp
    #####:  411:  if (isa<tosa::SigmoidOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  412:    auto one =
    #####:  413:        rewriter.create<arith::ConstantOp>(loc, FloatAttr::get(elementTy, 1));
call    0 never executed
call    1 never executed
    #####:  414:    auto negate = rewriter.create<arith::NegFOp>(loc, resultTypes, args[0]);
call    0 never executed
call    1 never executed
    #####:  415:    auto exp = rewriter.create<mlir::math::ExpOp>(loc, resultTypes, negate);
call    0 never executed
    #####:  416:    auto added = rewriter.create<arith::AddFOp>(loc, resultTypes, exp, one);
call    0 never executed
    #####:  417:    return rewriter.create<arith::DivFOp>(loc, resultTypes, one, added);
call    0 never executed
        -:  418:  }
        -:  419:
        -:  420:  // tosa::CastOp
    #####:  421:  if (isa<tosa::CastOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  422:    Type srcTy = elementTy;
    #####:  423:    Type dstTy = resultTypes.front();
branch  0 never executed
branch  1 never executed
    #####:  424:    bool bitExtend =
    #####:  425:        srcTy.getIntOrFloatBitWidth() < dstTy.getIntOrFloatBitWidth();
call    0 never executed
call    1 never executed
        -:  426:
    #####:  427:    if (srcTy == dstTy)
branch  0 never executed
branch  1 never executed
    #####:  428:      return args.front();
call    0 never executed
        -:  429:
    #####:  430:    if (srcTy.isa<FloatType>() && dstTy.isa<FloatType>() && bitExtend)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  431:      return rewriter.create<arith::ExtFOp>(loc, resultTypes, args, mlir::None);
call    0 never executed
        -:  432:
    #####:  433:    if (srcTy.isa<FloatType>() && dstTy.isa<FloatType>() && !bitExtend)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  434:      return rewriter.create<arith::TruncFOp>(loc, resultTypes, args,
    #####:  435:                                              mlir::None);
call    0 never executed
        -:  436:
        -:  437:    // 1-bit integers need to be treated as signless.
    #####:  438:    if (srcTy.isInteger(1) && arith::UIToFPOp::areCastCompatible(srcTy, dstTy))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  439:      return rewriter.create<arith::UIToFPOp>(loc, resultTypes, args,
    #####:  440:                                              mlir::None);
call    0 never executed
        -:  441:
    #####:  442:    if (srcTy.isInteger(1) && dstTy.isa<IntegerType>() && bitExtend)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  443:      return rewriter.create<arith::ExtUIOp>(loc, resultTypes, args,
    #####:  444:                                             mlir::None);
call    0 never executed
        -:  445:
        -:  446:    // Unsigned integers need an unrealized cast so that they can be passed
        -:  447:    // to UIToFP.
    #####:  448:    if (srcTy.isUnsignedInteger() && dstTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  449:      auto unrealizedCast =
        -:  450:          rewriter
    #####:  451:              .create<UnrealizedConversionCastOp>(
    #####:  452:                  loc, rewriter.getIntegerType(srcTy.getIntOrFloatBitWidth()),
call    0 never executed
call    1 never executed
    #####:  453:                  args[0])
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  454:              .getResult(0);
    #####:  455:      return rewriter.create<arith::UIToFPOp>(loc, resultTypes[0],
    #####:  456:                                              unrealizedCast);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
        -:  459:    // All other si-to-fp conversions should be handled by SIToFP.
    #####:  460:    if (arith::SIToFPOp::areCastCompatible(srcTy, dstTy))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  461:      return rewriter.create<arith::SIToFPOp>(loc, resultTypes, args,
    #####:  462:                                              mlir::None);
call    0 never executed
        -:  463:
        -:  464:    // Casting to boolean, floats need to only be checked as not-equal to zero.
    #####:  465:    if (srcTy.isa<FloatType>() && dstTy.isInteger(1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  466:      Value zero = rewriter.create<arith::ConstantOp>(
    #####:  467:          loc, rewriter.getFloatAttr(srcTy, 0.0));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  468:      return rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::UNE,
    #####:  469:                                            args.front(), zero);
call    0 never executed
call    1 never executed
        -:  470:    }
        -:  471:
    #####:  472:    if (arith::FPToSIOp::areCastCompatible(srcTy, dstTy)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  473:      auto zero = rewriter.create<arith::ConstantOp>(
    #####:  474:          loc, rewriter.getF32FloatAttr(0.0f));
call    0 never executed
call    1 never executed
    #####:  475:      auto half = rewriter.create<arith::ConstantOp>(
    #####:  476:          loc, rewriter.getF32FloatAttr(0.5f));
call    0 never executed
call    1 never executed
        -:  477:
    #####:  478:      auto intMin = rewriter.create<arith::ConstantOp>(
    #####:  479:          loc, rewriter.getF32FloatAttr(
branch  0 never executed
branch  1 never executed
    #####:  480:                   APInt::getSignedMinValue(dstTy.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  481:                       .getSExtValue()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  482:
    #####:  483:      auto intMax = rewriter.create<arith::ConstantOp>(
    #####:  484:          loc, rewriter.getF32FloatAttr(
branch  0 never executed
branch  1 never executed
    #####:  485:                   APInt::getSignedMaxValue(dstTy.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  486:                       .getSExtValue()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  487:
    #####:  488:      auto added = rewriter.create<arith::AddFOp>(loc, args[0], half);
call    0 never executed
call    1 never executed
    #####:  489:      auto subbed = rewriter.create<arith::SubFOp>(loc, args[0], half);
call    0 never executed
call    1 never executed
    #####:  490:      auto negative = rewriter.create<arith::CmpFOp>(
    #####:  491:          loc, arith::CmpFPredicate::OLT, args[0], zero);
call    0 never executed
call    1 never executed
    #####:  492:      auto rounded =
    #####:  493:          rewriter.create<arith::SelectOp>(loc, negative, subbed, added);
call    0 never executed
        -:  494:
    #####:  495:      auto clamped = clampFloatHelper(loc, rounded, intMin, intMax, rewriter);
call    0 never executed
        -:  496:
    #####:  497:      return rewriter.create<arith::FPToSIOp>(loc, dstTy, clamped);
call    0 never executed
        -:  498:    }
        -:  499:
        -:  500:    // Casting to boolean, integers need to only be checked as not-equal to
        -:  501:    // zero.
    #####:  502:    if (srcTy.isa<IntegerType>() && dstTy.isInteger(1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  503:      Value zero = rewriter.create<arith::ConstantIntOp>(
    #####:  504:          loc, 0, srcTy.getIntOrFloatBitWidth());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  505:      return rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::ne,
    #####:  506:                                            args.front(), zero);
call    0 never executed
call    1 never executed
        -:  507:    }
        -:  508:
    #####:  509:    if (srcTy.isa<IntegerType>() && dstTy.isa<IntegerType>() && bitExtend)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  510:      return rewriter.create<arith::ExtSIOp>(loc, resultTypes, args,
    #####:  511:                                             mlir::None);
call    0 never executed
        -:  512:
    #####:  513:    if (srcTy.isa<IntegerType>() && dstTy.isa<IntegerType>() && !bitExtend) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  514:      auto intMin = rewriter.create<arith::ConstantIntOp>(
        -:  515:          loc,
    #####:  516:          APInt::getSignedMinValue(dstTy.getIntOrFloatBitWidth())
call    0 never executed
    #####:  517:              .getSExtValue(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  518:          srcTy.getIntOrFloatBitWidth());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  519:
    #####:  520:      auto intMax = rewriter.create<arith::ConstantIntOp>(
        -:  521:          loc,
    #####:  522:          APInt::getSignedMaxValue(dstTy.getIntOrFloatBitWidth())
call    0 never executed
    #####:  523:              .getSExtValue(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  524:          srcTy.getIntOrFloatBitWidth());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  525:
    #####:  526:      auto clamped = clampIntHelper(loc, args[0], intMin, intMax, rewriter);
call    0 never executed
call    1 never executed
    #####:  527:      return rewriter.create<arith::TruncIOp>(loc, dstTy, clamped);
call    0 never executed
        -:  528:    }
        -:  529:  }
        -:  530:
    #####:  531:  (void)rewriter.notifyMatchFailure(
    #####:  532:      op, "unhandled op for linalg body calculation for elementwise op");
call    0 never executed
    #####:  533:  return nullptr;
        -:  534:}
        -:  535:
        -:  536:static LogicalResult
function _ZL32elementwiseMatchAndRewriteHelperPN4mlir9OperationERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  537:elementwiseMatchAndRewriteHelper(Operation *operation,
        -:  538:                                 PatternRewriter &rewriter) {
    #####:  539:  auto loc = operation->getLoc();
branch  0 never executed
branch  1 never executed
        -:  540:
    #####:  541:  assert(operation->getNumResults() == 1 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  542:         "All TOSA elementwise ops should only return a single result.");
        -:  543:
    #####:  544:  auto results = operation->getResults();
call    0 never executed
    #####:  545:  auto resultTy = operation->getResult(0).getType().dyn_cast<ShapedType>();
call    0 never executed
        -:  546:
    #####:  547:  if (!resultTy)
branch  0 never executed
branch  1 never executed
    #####:  548:    return rewriter.notifyMatchFailure(operation,
    #####:  549:                                       "All results must be a shaped type");
call    0 never executed
        -:  550:
    #####:  551:  unsigned rank = resultTy.getRank();
call    0 never executed
        -:  552:
        -:  553:  // Construct the indexing maps needed for linalg.generic ops.
    #####:  554:  SmallVector<Type> bodyArgTypes;
call    0 never executed
        -:  555:
    #####:  556:  for (Value in : operation->getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  557:    bodyArgTypes.emplace_back(getElementTypeOrSelf(in.getType()));
call    0 never executed
call    1 never executed
        -:  558:
    #####:  559:  SmallVector<Type> opResultTypes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  560:  SmallVector<Value> emptyTensors;
branch  0 never executed
branch  1 never executed
        -:  561:
    #####:  562:  SmallVector<Value> dynDims;
branch  0 never executed
branch  1 never executed
    #####:  563:  dynDims.resize(results.front().getType().cast<ShapedType>().getRank());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  564:
    #####:  565:  for (auto arg : operation->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  566:    auto operandTy = arg.getType().cast<ShapedType>();
call    0 never executed
    #####:  567:    for (int i = 0; i < operandTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  568:      if (operandTy.isDynamicDim(i) && !dynDims[i])
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  569:        dynDims[i] = rewriter.create<tensor::DimOp>(loc, arg, i);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  570:    }
        -:  571:  }
        -:  572:
    #####:  573:  SmallVector<Value> filteredDims = condenseValues(dynDims);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  574:
    #####:  575:  for (auto result : results) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  576:    auto resultTy = result.getType().template cast<ShapedType>();
call    0 never executed
    #####:  577:    emptyTensors.push_back(rewriter.create<tensor::EmptyOp>(
call    0 never executed
    #####:  578:        loc, resultTy.getShape(), resultTy.getElementType(), filteredDims));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  579:    opResultTypes.push_back(result.getType());
call    0 never executed
        -:  580:  }
        -:  581:
    #####:  582:  auto bodyResultTypes = llvm::to_vector<4>(llvm::map_range(
    #####:  583:      emptyTensors, [](Value v) { return getElementTypeOrSelf(v); }));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  584:
    #####:  585:  SmallVector<Value, 2> operands;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  586:  SmallVector<AffineMap, 2> indexingMaps;
branch  0 never executed
branch  1 never executed
    #####:  587:  indexingMaps.reserve(operation->getNumOperands() + bodyResultTypes.size());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  588:
        -:  589:  // Input indexing maps may be broadcasted.
    #####:  590:  for (Value operand : operation->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  591:    ShapedType type = operand.getType().cast<ShapedType>();
call    0 never executed
        -:  592:
    #####:  593:    if (type.getShape() == resultTy.getShape()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  594:      operands.push_back(operand);
call    0 never executed
    #####:  595:      indexingMaps.push_back(rewriter.getMultiDimIdentityMap(rank));
call    0 never executed
call    1 never executed
    #####:  596:      continue;
        -:  597:    }
        -:  598:
    #####:  599:    SmallVector<int64_t, 5> newShape;
call    0 never executed
    #####:  600:    SmallVector<AffineExpr, 4> affineExprs;
branch  0 never executed
branch  1 never executed
    #####:  601:    newShape.reserve(type.getRank());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  602:    for (const auto &it : llvm::enumerate(type.getShape())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  603:      if (it.value() == resultTy.getDimSize(it.index())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  604:        newShape.push_back(it.value());
call    0 never executed
    #####:  605:        affineExprs.push_back(
call    0 never executed
call    1 never executed
    #####:  606:            mlir::getAffineDimExpr(it.index(), rewriter.getContext()));
call    0 never executed
        -:  607:      }
        -:  608:    }
        -:  609:
    #####:  610:    if (newShape.size() != rank) {
branch  0 never executed
branch  1 never executed
    #####:  611:      operand = rewriter.create<tosa::ReshapeOp>(
    #####:  612:          loc, RankedTensorType::get(newShape, type.getElementType()), operand,
call    0 never executed
call    1 never executed
    #####:  613:          rewriter.getI64ArrayAttr(newShape));
call    0 never executed
call    1 never executed
        -:  614:    }
        -:  615:
    #####:  616:    operands.push_back(operand);
call    0 never executed
    #####:  617:    indexingMaps.push_back(AffineMap::get(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  618:        /*dimCount=*/rank, /*symbolCount=*/0, affineExprs,
        -:  619:        rewriter.getContext()));
        -:  620:  }
        -:  621:
    #####:  622:  indexingMaps.append(operation->getNumResults(),
call    0 never executed
call    1 never executed
        -:  623:                      rewriter.getMultiDimIdentityMap(rank));
        -:  624:
    #####:  625:  bool didEncounterError = false;
    #####:  626:  auto linalgOp = rewriter.create<linalg::GenericOp>(
        -:  627:      loc, opResultTypes, operands, emptyTensors, indexingMaps,
    #####:  628:      getNParallelLoopsAttrs(rank),
function _ZZL32elementwiseMatchAndRewriteHelperPN4mlir9OperationERNS_15PatternRewriterEENKUlRNS_9OpBuilderENS_8LocationENS_10ValueRangeEE0_clES5_S6_S7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  629:      [&](OpBuilder &nestedBuilder, Location nestedLoc, ValueRange blockArgs) {
    #####:  630:        Value opResult = createLinalgBodyCalculationForElementwiseOp(
    #####:  631:            operation, blockArgs.take_front(operation->getNumOperands()),
branch  0 never executed
branch  1 never executed
    #####:  632:            bodyResultTypes, rewriter);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  633:        if (!opResult) {
branch  0 never executed
branch  1 never executed
    #####:  634:          didEncounterError = true;
    #####:  635:          return;
        -:  636:        }
    #####:  637:        nestedBuilder.create<linalg::YieldOp>(loc, opResult);
call    0 never executed
    #####:  638:      });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  639:
    #####:  640:  if (didEncounterError)
branch  0 never executed
branch  1 never executed
    #####:  641:    return failure();
        -:  642:
    #####:  643:  rewriter.replaceOp(operation, linalgOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  644:  return success();
branch  0 never executed
branch  1 never executed
        -:  645:}
        -:  646:
        -:  647:// Returns the constant initial value for a given reduction operation. The
        -:  648:// attribute type varies depending on the element type required.
function _ZL29createInitialValueForReduceOpPN4mlir9OperationENS_4TypeERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  649:static Attribute createInitialValueForReduceOp(Operation *op, Type elementTy,
        -:  650:                                               PatternRewriter &rewriter) {
    #####:  651:  if (isa<tosa::ReduceSumOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  652:    return rewriter.getFloatAttr(elementTy, 0.0);
call    0 never executed
        -:  653:
    #####:  654:  if (isa<tosa::ReduceSumOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  655:    return rewriter.getIntegerAttr(elementTy, 0);
call    0 never executed
        -:  656:
    #####:  657:  if (isa<tosa::ReduceProdOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  658:    return rewriter.getFloatAttr(elementTy, 1.0);
call    0 never executed
        -:  659:
    #####:  660:  if (isa<tosa::ReduceProdOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  661:    return rewriter.getIntegerAttr(elementTy, 1);
call    0 never executed
        -:  662:
    #####:  663:  if (isa<tosa::ReduceMinOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  664:    return rewriter.getFloatAttr(
    #####:  665:        elementTy, APFloat::getLargest(
call    0 never executed
    #####:  666:                       elementTy.cast<FloatType>().getFloatSemantics(), false));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  667:
    #####:  668:  if (isa<tosa::ReduceMinOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  669:    return rewriter.getIntegerAttr(
    #####:  670:        elementTy, APInt::getSignedMaxValue(elementTy.getIntOrFloatBitWidth()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  671:
    #####:  672:  if (isa<tosa::ReduceMaxOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  673:    return rewriter.getFloatAttr(
    #####:  674:        elementTy, APFloat::getLargest(
call    0 never executed
    #####:  675:                       elementTy.cast<FloatType>().getFloatSemantics(), true));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  676:
    #####:  677:  if (isa<tosa::ReduceMaxOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  678:    return rewriter.getIntegerAttr(
    #####:  679:        elementTy, APInt::getSignedMinValue(elementTy.getIntOrFloatBitWidth()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  680:
    #####:  681:  if (isa<tosa::ReduceAllOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  682:    return rewriter.getIntegerAttr(elementTy, APInt::getAllOnes(1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  683:
    #####:  684:  if (isa<tosa::ReduceAnyOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  685:    return rewriter.getIntegerAttr(elementTy, APInt::getZero(1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  686:
    #####:  687:  if (isa<tosa::ArgMaxOp>(op) && elementTy.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  688:    return rewriter.getFloatAttr(
    #####:  689:        elementTy, APFloat::getLargest(
call    0 never executed
    #####:  690:                       elementTy.cast<FloatType>().getFloatSemantics(), true));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  691:
    #####:  692:  if (isa<tosa::ArgMaxOp>(op) && elementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  693:    return rewriter.getIntegerAttr(
    #####:  694:        elementTy, APInt::getSignedMinValue(elementTy.getIntOrFloatBitWidth()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  695:
    #####:  696:  return {};
        -:  697:}
        -:  698:
        -:  699:// Creates the body calculation for a reduction. The operations vary depending
        -:  700:// on the input type.
function _ZL38createLinalgBodyCalculationForReduceOpPN4mlir9OperationENS_10ValueRangeENS_4TypeERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  701:static Value createLinalgBodyCalculationForReduceOp(Operation *op,
        -:  702:                                                    ValueRange args,
        -:  703:                                                    Type elementTy,
        -:  704:                                                    PatternRewriter &rewriter) {
    #####:  705:  Location loc = op->getLoc();
call    0 never executed
    #####:  706:  if (isa<tosa::ReduceSumOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  707:    return rewriter.create<arith::AddFOp>(loc, args);
call    0 never executed
        -:  708:  }
        -:  709:
    #####:  710:  if (isa<tosa::ReduceSumOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  711:    return rewriter.create<arith::AddIOp>(loc, args);
call    0 never executed
        -:  712:  }
        -:  713:
    #####:  714:  if (isa<tosa::ReduceProdOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  715:    return rewriter.create<arith::MulFOp>(loc, args);
call    0 never executed
        -:  716:  }
        -:  717:
    #####:  718:  if (isa<tosa::ReduceProdOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  719:    return rewriter.create<arith::MulIOp>(loc, args);
call    0 never executed
        -:  720:  }
        -:  721:
    #####:  722:  if (isa<tosa::ReduceMinOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  723:    return rewriter.create<arith::MinFOp>(loc, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  724:  }
        -:  725:
    #####:  726:  if (isa<tosa::ReduceMinOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  727:    auto predicate = rewriter.create<arith::CmpIOp>(
    #####:  728:        loc, arith::CmpIPredicate::slt, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  729:    return rewriter.create<arith::SelectOp>(loc, predicate, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  730:  }
        -:  731:
    #####:  732:  if (isa<tosa::ReduceMaxOp>(op) && elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  733:    return rewriter.create<arith::MaxFOp>(loc, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  734:  }
        -:  735:
    #####:  736:  if (isa<tosa::ReduceMaxOp>(op) && elementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  737:    auto predicate = rewriter.create<arith::CmpIOp>(
    #####:  738:        loc, arith::CmpIPredicate::sgt, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  739:    return rewriter.create<arith::SelectOp>(loc, predicate, args[0], args[1]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  740:  }
        -:  741:
    #####:  742:  if (isa<tosa::ReduceAllOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  743:    return rewriter.create<arith::AndIOp>(loc, args);
call    0 never executed
        -:  744:
    #####:  745:  if (isa<tosa::ReduceAnyOp>(op) && elementTy.isInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  746:    return rewriter.create<arith::OrIOp>(loc, args);
call    0 never executed
        -:  747:
    #####:  748:  return {};
        -:  749:}
        -:  750:
        -:  751:// Performs the match and rewrite for reduction operations. This includes
        -:  752:// declaring a correctly sized initial value, and the linalg.generic operation
        -:  753:// that reduces across the specified axis.
function _ZL27reduceMatchAndRewriteHelperPN4mlir9OperationEmRNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  754:static LogicalResult reduceMatchAndRewriteHelper(Operation *op, uint64_t axis,
        -:  755:                                                 PatternRewriter &rewriter) {
    #####:  756:  auto loc = op->getLoc();
call    0 never executed
    #####:  757:  auto inputTy = op->getOperand(0).getType().template cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####:  758:  auto resultTy = op->getResult(0).getType().template cast<ShapedType>();
call    0 never executed
    #####:  759:  auto elementTy = resultTy.getElementType();
call    0 never executed
    #####:  760:  Value input = op->getOperand(0);
call    0 never executed
        -:  761:
    #####:  762:  llvm::SmallVector<int64_t> reduceShape;
    #####:  763:  SmallVector<Value> dynDims;
branch  0 never executed
branch  1 never executed
    #####:  764:  for (unsigned i = 0; i < inputTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  765:    if (axis != i) {
branch  0 never executed
branch  1 never executed
    #####:  766:      reduceShape.push_back(inputTy.getDimSize(i));
call    0 never executed
call    1 never executed
    #####:  767:      if (inputTy.isDynamicDim(i))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  768:        dynDims.push_back(rewriter.create<tensor::DimOp>(loc, input, i));
call    0 never executed
call    1 never executed
        -:  769:    }
        -:  770:  }
        -:  771:
    #####:  772:  Type reduceTy = RankedTensorType::get(reduceShape, resultTy.getElementType());
call    0 never executed
call    1 never executed
        -:  773:
        -:  774:  // First fill the output buffer with the init value.
    #####:  775:  auto emptyTensor =
        -:  776:      rewriter
    #####:  777:          .create<tensor::EmptyOp>(loc, reduceShape, resultTy.getElementType(),
    #####:  778:                                   dynDims)
call    0 never executed
call    1 never executed
    #####:  779:          .getResult();
call    0 never executed
        -:  780:
    #####:  781:  auto fillValueAttr = createInitialValueForReduceOp(op, elementTy, rewriter);
call    0 never executed
    #####:  782:  if (!fillValueAttr)
branch  0 never executed
branch  1 never executed
    #####:  783:    return rewriter.notifyMatchFailure(
    #####:  784:        op, "No initial value found for reduction operation");
call    0 never executed
        -:  785:
    #####:  786:  auto fillValue = rewriter.create<arith::ConstantOp>(loc, fillValueAttr);
call    0 never executed
    #####:  787:  auto filledTensor = rewriter
    #####:  788:                          .create<linalg::FillOp>(loc, ValueRange{fillValue},
call    0 never executed
    #####:  789:                                                  ValueRange{emptyTensor})
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  790:                          .result();
call    0 never executed
        -:  791:
    #####:  792:  SmallVector<AffineExpr, 2> srcExprs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  793:  SmallVector<AffineExpr, 2> dstExprs;
branch  0 never executed
branch  1 never executed
    #####:  794:  SmallVector<StringRef, 4> iteratorTypes;
branch  0 never executed
branch  1 never executed
    #####:  795:  for (unsigned int i = 0, rank = inputTy.getRank(); i != rank; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:    srcExprs.push_back(mlir::getAffineDimExpr(i, rewriter.getContext()));
call    0 never executed
call    1 never executed
        -:  797:
    #####:  798:    iteratorTypes.push_back(axis == i ? getReductionIteratorTypeName()
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  799:                                      : getParallelIteratorTypeName());
    #####:  800:    if (axis != i)
branch  0 never executed
branch  1 never executed
    #####:  801:      dstExprs.push_back(mlir::getAffineDimExpr(i, rewriter.getContext()));
call    0 never executed
call    1 never executed
        -:  802:  }
        -:  803:
    #####:  804:  bool didEncounterError = false;
    #####:  805:  auto maps = AffineMap::inferFromExprList({srcExprs, dstExprs});
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  806:  auto linalgOp = rewriter.create<linalg::GenericOp>(
        -:  807:      loc, reduceTy, input, filledTensor, maps, iteratorTypes,
function _ZZL27reduceMatchAndRewriteHelperPN4mlir9OperationEmRNS_15PatternRewriterEENKUlRNS_9OpBuilderENS_8LocationENS_10ValueRangeEE_clES5_S6_S7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  808:      [&](OpBuilder &nestedBuilder, Location nestedLoc, ValueRange blockArgs) {
    #####:  809:        auto result = createLinalgBodyCalculationForReduceOp(
    #####:  810:            op, blockArgs, elementTy, rewriter);
call    0 never executed
    #####:  811:        if (result)
branch  0 never executed
branch  1 never executed
    #####:  812:          didEncounterError = true;
        -:  813:
    #####:  814:        nestedBuilder.create<linalg::YieldOp>(loc, result);
call    0 never executed
    #####:  815:      });
call    0 never executed
        -:  816:
    #####:  817:  if (!didEncounterError)
branch  0 never executed
branch  1 never executed
    #####:  818:    return failure();
branch  0 never executed
branch  1 never executed
        -:  819:
    #####:  820:  SmallVector<ReassociationExprs, 4> reassociationMap;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  821:  uint64_t expandInputRank =
branch  0 never executed
branch  1 never executed
    #####:  822:      linalgOp.getResults()[0].getType().cast<ShapedType>().getRank();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  823:  reassociationMap.resize(expandInputRank);
call    0 never executed
        -:  824:
    #####:  825:  for (uint64_t i = 0; i < expandInputRank; i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:    int32_t dimToPush = i > axis ? i + 1 : i;
branch  0 never executed
branch  1 never executed
    #####:  827:    reassociationMap[i].push_back(rewriter.getAffineDimExpr(dimToPush));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  828:  }
        -:  829:
    #####:  830:  if (expandInputRank != 0) {
branch  0 never executed
branch  1 never executed
    #####:  831:    int32_t expandedDim = axis < expandInputRank ? axis : expandInputRank - 1;
branch  0 never executed
branch  1 never executed
    #####:  832:    reassociationMap[expandedDim].push_back(
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  833:        rewriter.getAffineDimExpr(expandedDim + 1));
call    0 never executed
        -:  834:  }
        -:  835:
    #####:  836:  rewriter.replaceOpWithNewOp<tensor::ExpandShapeOp>(
    #####:  837:      op, resultTy, linalgOp.getResults()[0], reassociationMap);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  838:  return success();
call    0 never executed
        -:  839:}
        -:  840:
function _ZL21findIntermediateShapeN4llvm8ArrayRefIlEES1_RNS_11SmallVectorIlLj6EEEb called 0 returned 0% blocks executed 0%
    #####:  841:static bool findIntermediateShape(ArrayRef<int64_t> lhsShape,
        -:  842:                                  ArrayRef<int64_t> rhsShape,
        -:  843:                                  SmallVector<int64_t> &intermediateShape,
        -:  844:                                  bool isDynamic) {
    #####:  845:  if (isDynamic) {
branch  0 never executed
branch  1 never executed
        -:  846:    // TODO (natashaknk): Make dynamic intermediate shape not always be rank-1
    #####:  847:    intermediateShape = {ShapedType::kDynamicSize};
call    0 never executed
    #####:  848:    return true;
        -:  849:  }
        -:  850:
    #####:  851:  if (lhsShape.empty() || rhsShape.empty()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  852:    intermediateShape = {};
call    0 never executed
    #####:  853:    return true;
call    0 never executed
        -:  854:  }
        -:  855:
        -:  856:  unsigned currLhsDim = 0, currRhsDim = 0;
    #####:  857:  while (currLhsDim < lhsShape.size() && currRhsDim < rhsShape.size()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  858:    int64_t rhsSize = rhsShape[currRhsDim];
    #####:  859:    int64_t lhsSize = lhsShape[currLhsDim];
    #####:  860:    while (lhsSize != rhsSize && currLhsDim < lhsShape.size() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  861:           currRhsDim < rhsShape.size()) {
branch  0 never executed
branch  1 never executed
    #####:  862:      if (lhsSize < rhsSize) {
branch  0 never executed
branch  1 never executed
    #####:  863:        currLhsDim++;
    #####:  864:        lhsSize *= lhsShape[currLhsDim];
branch  0 never executed
branch  1 never executed
        -:  865:      } else {
    #####:  866:        currRhsDim++;
    #####:  867:        rhsSize *= rhsShape[currRhsDim];
branch  0 never executed
branch  1 never executed
        -:  868:      }
        -:  869:    }
    #####:  870:    if (lhsSize == rhsSize) {
branch  0 never executed
branch  1 never executed
    #####:  871:      intermediateShape.push_back(lhsSize);
call    0 never executed
        -:  872:    }
    #####:  873:    currRhsDim++;
    #####:  874:    currLhsDim++;
        -:  875:  }
        -:  876:
        -:  877:  // If the iterators didn't reach the end and their leftover dimensions are not
        -:  878:  // equal to 1 an intermediate shape was not found.
    #####:  879:  while (currLhsDim < lhsShape.size()) {
branch  0 never executed
branch  1 never executed
    #####:  880:    if (lhsShape[currLhsDim++] != 1) {
branch  0 never executed
branch  1 never executed
        -:  881:      return false;
        -:  882:    }
        -:  883:  }
        -:  884:
    #####:  885:  while (currRhsDim < rhsShape.size()) {
branch  0 never executed
branch  1 never executed
    #####:  886:    if (rhsShape[currRhsDim++] != 1) {
branch  0 never executed
branch  1 never executed
        -:  887:      return false;
        -:  888:    }
        -:  889:  }
        -:  890:
        -:  891:  return true;
        -:  892:}
        -:  893:
function _ZL34createReassociationMapsForCollapseRN4mlir15PatternRewriterEN4llvm8ArrayRefIlEES4_RNS2_11SmallVectorINS5_INS_10AffineExprELj2EEELj4EEEb called 0 returned 0% blocks executed 0%
    #####:  894:static bool createReassociationMapsForCollapse(
        -:  895:    PatternRewriter &rewriter, ArrayRef<int64_t> srcShape,
        -:  896:    ArrayRef<int64_t> dstShape,
        -:  897:    SmallVector<ReassociationExprs, 4> &reassociationMap, bool isDynamic) {
        -:  898:
        -:  899:  // If the shape is dynamic, create a map for collapsing into one dimension.
    #####:  900:  if (isDynamic) {
branch  0 never executed
branch  1 never executed
    #####:  901:    SmallVector<AffineExpr, 2> exprs;
    #####:  902:    for (int i = 0, s = srcShape.size(); i < s; ++i)
branch  0 never executed
branch  1 never executed
    #####:  903:      exprs.push_back(rewriter.getAffineDimExpr(i));
call    0 never executed
call    1 never executed
    #####:  904:    reassociationMap = {exprs};
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  905:    return true;
branch  0 never executed
branch  1 never executed
        -:  906:  }
        -:  907:
    #####:  908:  if (dstShape.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  909:    reassociationMap = {};
call    0 never executed
    #####:  910:    return true;
        -:  911:  }
        -:  912:
    #####:  913:  reassociationMap.resize(dstShape.size());
call    0 never executed
    #####:  914:  unsigned currSrcDim = 0, currDstDim = 0;
call    0 never executed
    #####:  915:  while (currSrcDim < srcShape.size() && currDstDim < dstShape.size()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  916:    int64_t dstSize = dstShape[currDstDim];
    #####:  917:    int64_t srcSize = srcShape[currSrcDim];
    #####:  918:    while (srcSize < dstSize && currSrcDim < srcShape.size()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  919:      reassociationMap[currDstDim].push_back(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  920:          rewriter.getAffineDimExpr(currSrcDim++));
    #####:  921:      srcSize *= srcShape[currSrcDim];
branch  0 never executed
branch  1 never executed
        -:  922:    }
    #####:  923:    if (srcSize == dstSize) {
branch  0 never executed
branch  1 never executed
    #####:  924:      reassociationMap[currDstDim].push_back(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  925:          rewriter.getAffineDimExpr(currSrcDim++));
        -:  926:      // If the next dim in collapsedShape is not 1, treat subsequent dims in
        -:  927:      // expandedShape which are 1 to be collapsed.
    #####:  928:      if (currDstDim == dstShape.size() - 1 || dstShape[currDstDim + 1] != 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  929:        while (currSrcDim < srcShape.size() && srcShape[currSrcDim] == 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  930:          reassociationMap[currDstDim].push_back(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  931:              rewriter.getAffineDimExpr(currSrcDim++));
        -:  932:        }
        -:  933:      }
        -:  934:    }
    #####:  935:    currDstDim++;
        -:  936:  }
        -:  937:
        -:  938:  // If both iterators didn't reach the end, we have leftover dimentions which
        -:  939:  // implies that we have a mismatch in shape.
    #####:  940:  return currSrcDim == srcShape.size() && currDstDim == dstShape.size();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  941:}
        -:  942:
        -:  943:namespace {
        -:  944:
        -:  945:template <typename SrcOp>
        -:  946:class PointwiseConverter : public OpRewritePattern<SrcOp> {
        -:  947:public:
        -:  948:  using OpRewritePattern<SrcOp>::OpRewritePattern;
        -:  949:
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9GreaterOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9GreaterOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa11LogicalOrOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa11LogicalOrOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12LogicalXorOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12LogicalXorOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa6CastOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa6CastOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa18LogicalLeftShiftOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa18LogicalLeftShiftOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa19LogicalRightShiftOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa19LogicalRightShiftOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa22ArithmeticRightShiftOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa22ArithmeticRightShiftOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5ClzOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5ClzOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa8SelectOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa8SelectOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12LogicalNotOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12LogicalNotOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa14GreaterEqualOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa14GreaterEqualOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7EqualOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7EqualOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9MaximumOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9MaximumOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9MinimumOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9MinimumOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa6CeilOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa6CeilOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7FloorOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7FloorOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7ClampOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7ClampOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9SigmoidOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa9SigmoidOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5ExpOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5ExpOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5SubOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5SubOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5MulOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5MulOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5DivOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5DivOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa8NegateOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa8NegateOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5PowOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5PowOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12ReciprocalOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12ReciprocalOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7RsqrtOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa7RsqrtOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5LogOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5LogOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5AddOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5AddOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5AbsOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa5AbsOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa6TanhOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa6TanhOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12BitwiseAndOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12BitwiseAndOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa11BitwiseOrOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa11BitwiseOrOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12BitwiseNotOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12BitwiseNotOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12BitwiseXorOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12BitwiseXorOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
_ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12LogicalAndOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118PointwiseConverterIN4mlir4tosa12LogicalAndOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  950:  LogicalResult matchAndRewrite(SrcOp op,
        -:  951:                                PatternRewriter &rewriter) const final {
    #####:  952:    return elementwiseMatchAndRewriteHelper(op, rewriter);
call    0 never executed
        -:  953:  }
------------------
        -:  954:};
        -:  955:
        -:  956:class ReshapeConverterCollapse : public OpConversionPattern<tosa::ReshapeOp> {
        -:  957:public:
        -:  958:  using OpConversionPattern<tosa::ReshapeOp>::OpConversionPattern;
        -:  959:
        -:  960:  LogicalResult
function _ZNK12_GLOBAL__N_124ReshapeConverterCollapse15matchAndRewriteEN4mlir4tosa9ReshapeOpENS2_16ReshapeOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  961:  matchAndRewrite(tosa::ReshapeOp reshape, OpAdaptor adaptor,
        -:  962:                  ConversionPatternRewriter &rewriter) const final {
    #####:  963:    ShapedType operandTy = adaptor.getInput1().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####:  964:    ShapedType resultTy = reshape.getType().template cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####:  965:    bool isDynamic = !operandTy.hasStaticShape();
call    0 never executed
        -:  966:
    #####:  967:    if (isDynamic && resultTy.getRank() != 1) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  968:      return rewriter.notifyMatchFailure(
    #####:  969:          reshape, "Cannot collapse dynamic dims to more than one dimension");
call    0 never executed
        -:  970:    }
        -:  971:
    #####:  972:    if (operandTy == resultTy) {
branch  0 never executed
branch  1 never executed
    #####:  973:      rewriter.replaceOp(reshape, adaptor.getOperands()[0]);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  974:      return success();
        -:  975:    }
        -:  976:
    #####:  977:    SmallVector<ReassociationExprs, 4> reassociationMap;
call    0 never executed
    #####:  978:    if (!createReassociationMapsForCollapse(rewriter, operandTy.getShape(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  979:                                            resultTy.getShape(),
        -:  980:                                            reassociationMap, isDynamic)) {
    #####:  981:      return rewriter.notifyMatchFailure(
        -:  982:          reshape,
    #####:  983:          "tosa.reshape Attempting to collapse into an incompatible shape");
call    0 never executed
        -:  984:    }
        -:  985:
    #####:  986:    SmallVector<int64_t> intermediateShape;
call    0 never executed
call    1 never executed
    #####:  987:    if (!findIntermediateShape(operandTy.getShape(), resultTy.getShape(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  988:                               intermediateShape, isDynamic)) {
    #####:  989:      return rewriter.notifyMatchFailure(
    #####:  990:          reshape, "tosa.reshape Cannot collapse into given shape");
call    0 never executed
        -:  991:    }
        -:  992:
    #####:  993:    rewriter.replaceOpWithNewOp<tensor::CollapseShapeOp>(
    #####:  994:        reshape, resultTy, adaptor.getOperands()[0], reassociationMap);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  995:    return success();
branch  0 never executed
branch  1 never executed
        -:  996:  }
        -:  997:};
        -:  998:
        -:  999:class ReshapeConverterExpand : public OpConversionPattern<tosa::ReshapeOp> {
        -: 1000:public:
        -: 1001:  using OpConversionPattern<tosa::ReshapeOp>::OpConversionPattern;
        -: 1002:
        -: 1003:  LogicalResult
function _ZNK12_GLOBAL__N_122ReshapeConverterExpand15matchAndRewriteEN4mlir4tosa9ReshapeOpENS2_16ReshapeOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1004:  matchAndRewrite(tosa::ReshapeOp reshape, OpAdaptor adaptor,
        -: 1005:                  ConversionPatternRewriter &rewriter) const final {
    #####: 1006:    ShapedType operandTy = adaptor.getInput1().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 1007:    ShapedType resultTy = reshape.getType().template cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 1008:    bool isDynamic = !operandTy.hasStaticShape();
call    0 never executed
        -: 1009:
    #####: 1010:    if (operandTy == resultTy) {
branch  0 never executed
branch  1 never executed
    #####: 1011:      rewriter.replaceOp(reshape, adaptor.getOperands()[0]);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1012:      return success();
        -: 1013:    }
        -: 1014:
    #####: 1015:    if (isDynamic && operandTy.getRank() != 1) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1016:      return rewriter.notifyMatchFailure(
    #####: 1017:          reshape, "Cannot expand dynamic dims from more than one dimension");
call    0 never executed
        -: 1018:    }
        -: 1019:
    #####: 1020:    SmallVector<ReassociationExprs, 4> reassociationMap;
call    0 never executed
    #####: 1021:    if (!createReassociationMapsForCollapse(rewriter, resultTy.getShape(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1022:                                            operandTy.getShape(),
        -: 1023:                                            reassociationMap, isDynamic)) {
    #####: 1024:      return rewriter.notifyMatchFailure(
        -: 1025:          reshape,
    #####: 1026:          "tosa.reshape Attempting to expand into an incompatible shape");
call    0 never executed
        -: 1027:    }
        -: 1028:
    #####: 1029:    SmallVector<int64_t> intermediateShape;
call    0 never executed
call    1 never executed
    #####: 1030:    if (!findIntermediateShape(operandTy.getShape(), resultTy.getShape(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1031:                               intermediateShape, isDynamic) ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1032:        intermediateShape != operandTy.getShape()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1033:      return rewriter.notifyMatchFailure(
    #####: 1034:          reshape, "tosa.reshape Cannot expand into given shape");
call    0 never executed
        -: 1035:    }
    #####: 1036:    rewriter.replaceOpWithNewOp<tensor::ExpandShapeOp>(
    #####: 1037:        reshape, resultTy, adaptor.getOperands()[0], reassociationMap);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1038:    return success();
branch  0 never executed
branch  1 never executed
        -: 1039:  }
        -: 1040:};
        -: 1041:
        -: 1042:class ReshapeConverterCollapseExpand
        -: 1043:    : public OpConversionPattern<tosa::ReshapeOp> {
        -: 1044:public:
        -: 1045:  using OpConversionPattern<tosa::ReshapeOp>::OpConversionPattern;
        -: 1046:
        -: 1047:  LogicalResult
function _ZNK12_GLOBAL__N_130ReshapeConverterCollapseExpand15matchAndRewriteEN4mlir4tosa9ReshapeOpENS2_16ReshapeOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1048:  matchAndRewrite(tosa::ReshapeOp reshape, OpAdaptor adaptor,
        -: 1049:                  ConversionPatternRewriter &rewriter) const final {
    #####: 1050:    ShapedType operandTy = adaptor.getInput1().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 1051:    ShapedType resultTy = reshape.getType().template cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 1052:    bool isDynamic = !operandTy.hasStaticShape();
call    0 never executed
        -: 1053:
    #####: 1054:    if (operandTy == resultTy) {
branch  0 never executed
branch  1 never executed
    #####: 1055:      rewriter.replaceOp(reshape, adaptor.getOperands()[0]);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1056:      return success();
        -: 1057:    }
        -: 1058:
    #####: 1059:    SmallVector<int64_t> intermediateShape;
call    0 never executed
    #####: 1060:    if (!findIntermediateShape(resultTy.getShape(), operandTy.getShape(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1061:                               intermediateShape, isDynamic)) {
    #####: 1062:      return rewriter.notifyMatchFailure(
        -: 1063:          reshape, "tosa.reshape Cannot identify an intermediate shape between "
    #####: 1064:                   "the given two shapes");
call    0 never executed
        -: 1065:    }
        -: 1066:
    #####: 1067:    Value collapse = rewriter.create<tosa::ReshapeOp>(
        -: 1068:        reshape.getLoc(),
    #####: 1069:        RankedTensorType::get(intermediateShape,
    #####: 1070:                              reshape.getType().getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1071:        adaptor.getInput1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1072:    Value expand =
    #####: 1073:        rewriter.create<tosa::ReshapeOp>(reshape.getLoc(), resultTy, collapse);
call    0 never executed
call    1 never executed
    #####: 1074:    rewriter.replaceOp(reshape, expand);
call    0 never executed
call    1 never executed
        -: 1075:
    #####: 1076:    return success();
branch  0 never executed
branch  1 never executed
        -: 1077:  }
        -: 1078:};
        -: 1079:
        -: 1080:class TransposeConverter : public OpRewritePattern<tosa::TransposeOp> {
        -: 1081:public:
        -: 1082:  using OpRewritePattern<tosa::TransposeOp>::OpRewritePattern;
        -: 1083:
function _ZNK12_GLOBAL__N_118TransposeConverter15matchAndRewriteEN4mlir4tosa11TransposeOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1084:  LogicalResult matchAndRewrite(tosa::TransposeOp op,
        -: 1085:                                PatternRewriter &rewriter) const final {
    #####: 1086:    DenseIntElementsAttr perms;
    #####: 1087:    if (!matchPattern(op.getPerms(), m_Constant(&perms))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1088:      return failure();
        -: 1089:    }
        -: 1090:
    #####: 1091:    auto loc = op.getLoc();
call    0 never executed
    #####: 1092:    auto input = op->getOperand(0);
call    0 never executed
    #####: 1093:    auto resultTy = op.getType().cast<ShapedType>();
call    0 never executed
        -: 1094:
    #####: 1095:    SmallVector<Value> dynDims;
call    0 never executed
    #####: 1096:    dynDims.resize(op->getResult(0).getType().cast<ShapedType>().getRank());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1097:
    #####: 1098:    SmallVector<AffineExpr, 2> inputExprs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1099:    inputExprs.resize(resultTy.getRank());
call    0 never executed
call    1 never executed
    #####: 1100:    auto operandTy = input.getType().cast<ShapedType>();
call    0 never executed
    #####: 1101:    for (const auto &permutation : llvm::enumerate(perms.getValues<APInt>())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1102:      auto index = permutation.index();
call    0 never executed
    #####: 1103:      auto value = permutation.value().getZExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1104:      if (!operandTy.hasRank() || operandTy.isDynamicDim(index)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1105:        dynDims[value] = rewriter.create<tensor::DimOp>(loc, input, index);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1106:      }
    #####: 1107:      inputExprs[value] = rewriter.getAffineDimExpr(index);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1108:    }
        -: 1109:
    #####: 1110:    SmallVector<Value> filteredDims = condenseValues(dynDims);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1111:
    #####: 1112:    auto emptyTensor = rewriter.create<tensor::EmptyOp>(
    #####: 1113:        loc, resultTy.getShape(), resultTy.getElementType(), filteredDims);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1114:
    #####: 1115:    SmallVector<AffineMap, 2> affineMaps = {
    #####: 1116:        AffineMap::get(resultTy.getRank(), /*symbolCount=*/0, inputExprs,
call    0 never executed
    #####: 1117:                       rewriter.getContext()),
call    0 never executed
call    1 never executed
    #####: 1118:        rewriter.getMultiDimIdentityMap(resultTy.getRank())};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1119:
    #####: 1120:    rewriter.replaceOpWithNewOp<linalg::GenericOp>(
    #####: 1121:        op, resultTy, op.getInput1(), ValueRange{emptyTensor}, affineMaps,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1122:        getNParallelLoopsAttrs(resultTy.getRank()),
call    0 never executed
call    1 never executed
function _ZZNK12_GLOBAL__N_118TransposeConverter15matchAndRewriteEN4mlir4tosa11TransposeOpERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES7_S8_S9_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1123:        [&](OpBuilder &nestedBuilder, Location nestedLoc, ValueRange args) {
    #####: 1124:          nestedBuilder.create<linalg::YieldOp>(loc, *args.begin());
call    0 never executed
call    1 never executed
    #####: 1125:        });
call    0 never executed
call    1 never executed
    #####: 1126:    return success();
branch  0 never executed
branch  1 never executed
        -: 1127:  }
        -: 1128:};
        -: 1129:
        -: 1130:class RescaleConverter : public OpRewritePattern<tosa::RescaleOp> {
        -: 1131:public:
        -: 1132:  using OpRewritePattern<tosa::RescaleOp>::OpRewritePattern;
        -: 1133:
function _ZNK12_GLOBAL__N_116RescaleConverter15matchAndRewriteEN4mlir4tosa9RescaleOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1134:  LogicalResult matchAndRewrite(tosa::RescaleOp op,
        -: 1135:                                PatternRewriter &rewriter) const final {
    #####: 1136:    auto loc = op.getLoc();
call    0 never executed
    #####: 1137:    auto input = op.getInput();
call    0 never executed
    #####: 1138:    auto inputTy = op.getInput().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1139:    auto outputTy = op.getOutput().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1140:    unsigned rank = inputTy.getRank();
call    0 never executed
        -: 1141:
        -: 1142:    // This is an illegal configuration. terminate and log an error
    #####: 1143:    if (op.getDoubleRound() && !op.getScale32())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1144:      return rewriter.notifyMatchFailure(
    #####: 1145:          op, "tosa.rescale requires scale32 for double_round to be true");
call    0 never executed
        -: 1146:
    #####: 1147:    SmallVector<Value> dynDims;
    #####: 1148:    for (int i = 0; i < outputTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1149:      if (outputTy.isDynamicDim(i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1150:        dynDims.push_back(rewriter.create<tensor::DimOp>(loc, input, i));
call    0 never executed
call    1 never executed
        -: 1151:      }
        -: 1152:    }
        -: 1153:
        -: 1154:    // The shift and multiplier values.
    #####: 1155:    SmallVector<int32_t> multiplierValues;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1156:    getValuesFromIntArrayAttribute(op.getMultiplier(), multiplierValues);
call    0 never executed
call    1 never executed
        -: 1157:
    #####: 1158:    SmallVector<int8_t> shiftValues;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1159:    getValuesFromIntArrayAttribute(op.getShift(), shiftValues);
call    0 never executed
call    1 never executed
        -: 1160:
        -: 1161:    // If we shift by more than the bitwidth, this just sets to 0.
    #####: 1162:    for (int i = 0, s = multiplierValues.size(); i < s; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1163:      if (shiftValues[i] > 63) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1164:        shiftValues[i] = 0;
branch  0 never executed
branch  1 never executed
    #####: 1165:        multiplierValues[i] = 0;
branch  0 never executed
branch  1 never executed
        -: 1166:      }
        -: 1167:    }
        -: 1168:
        -: 1169:    // Double round only occurs if shift is greater than 31, check that this
        -: 1170:    // is ever true.
    #####: 1171:    bool doubleRound =
    #####: 1172:        op.getDoubleRound() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1173:        llvm::any_of(shiftValues, [](int32_t v) { return v > 31; });
branch  0 never executed
branch  1 never executed
        -: 1174:
    #####: 1175:    SmallVector<AffineMap> indexingMaps = {
    #####: 1176:        rewriter.getMultiDimIdentityMap(rank)};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1177:    SmallVector<Value, 4> genericInputs = {input};
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1178:
        -: 1179:    // If we are rescaling per-channel then we need to store the multiplier
        -: 1180:    // values in a buffer.
    #####: 1181:    Value multiplierConstant;
    #####: 1182:    int64_t multiplierArg = 0;
    #####: 1183:    if (multiplierValues.size() == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1184:      multiplierConstant = rewriter.create<arith::ConstantOp>(
    #####: 1185:          loc, rewriter.getI32IntegerAttr(multiplierValues.front()));
call    0 never executed
call    1 never executed
        -: 1186:    } else {
    #####: 1187:      SmallVector<AffineExpr, 2> multiplierExprs{
    #####: 1188:          rewriter.getAffineDimExpr(rank - 1)};
call    0 never executed
call    1 never executed
    #####: 1189:      auto multiplierType =
    #####: 1190:          RankedTensorType::get({static_cast<int64_t>(multiplierValues.size())},
call    0 never executed
    #####: 1191:                                rewriter.getI32Type());
call    0 never executed
call    1 never executed
    #####: 1192:      genericInputs.push_back(rewriter.create<arith::ConstantOp>(
call    0 never executed
    #####: 1193:          loc, DenseIntElementsAttr::get(multiplierType, multiplierValues)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1194:
    #####: 1195:      indexingMaps.push_back(AffineMap::get(/*dimCount=*/rank,
call    0 never executed
call    1 never executed
        -: 1196:                                            /*symbolCount=*/0, multiplierExprs,
        -: 1197:                                            rewriter.getContext()));
        -: 1198:
    #####: 1199:      multiplierArg = indexingMaps.size() - 1;
branch  0 never executed
branch  1 never executed
        -: 1200:    }
        -: 1201:
        -: 1202:    // If we are rescaling per-channel then we need to store the shift
        -: 1203:    // values in a buffer.
    #####: 1204:    Value shiftConstant;
    #####: 1205:    int64_t shiftArg = 0;
    #####: 1206:    if (shiftValues.size() == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1207:      shiftConstant = rewriter.create<arith::ConstantOp>(
    #####: 1208:          loc, rewriter.getI8IntegerAttr(shiftValues.front()));
call    0 never executed
call    1 never executed
        -: 1209:    } else {
    #####: 1210:      SmallVector<AffineExpr, 2> shiftExprs = {
    #####: 1211:          rewriter.getAffineDimExpr(rank - 1)};
call    0 never executed
call    1 never executed
    #####: 1212:      auto shiftType =
    #####: 1213:          RankedTensorType::get({static_cast<int64_t>(shiftValues.size())},
call    0 never executed
    #####: 1214:                                rewriter.getIntegerType(8));
call    0 never executed
call    1 never executed
    #####: 1215:      genericInputs.push_back(rewriter.create<arith::ConstantOp>(
call    0 never executed
    #####: 1216:          loc, DenseIntElementsAttr::get(shiftType, shiftValues)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1217:      indexingMaps.push_back(AffineMap::get(/*dimCount=*/rank,
call    0 never executed
call    1 never executed
        -: 1218:                                            /*symbolCount=*/0, shiftExprs,
        -: 1219:                                            rewriter.getContext()));
    #####: 1220:      shiftArg = indexingMaps.size() - 1;
branch  0 never executed
branch  1 never executed
        -: 1221:    }
        -: 1222:
        -: 1223:    // Indexing maps for output values.
    #####: 1224:    indexingMaps.push_back(rewriter.getMultiDimIdentityMap(rank));
call    0 never executed
call    1 never executed
        -: 1225:
        -: 1226:    // Construct the indexing maps needed for linalg.generic ops.
    #####: 1227:    Value emptyTensor = rewriter.create<tensor::EmptyOp>(
    #####: 1228:        loc, outputTy.getShape(), outputTy.getElementType(),
call    0 never executed
call    1 never executed
    #####: 1229:        ArrayRef<Value>({dynDims}));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1230:
    #####: 1231:    auto linalgOp = rewriter.create<linalg::GenericOp>(
    #####: 1232:        loc, outputTy, genericInputs, ValueRange{emptyTensor}, indexingMaps,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1233:        getNParallelLoopsAttrs(rank),
function _ZZNK12_GLOBAL__N_116RescaleConverter15matchAndRewriteEN4mlir4tosa9RescaleOpERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE0_clES7_S8_S9_ called 0 returned 0% blocks executed 0%
    #####: 1234:        [&](OpBuilder &nestedBuilder, Location nestedLoc,
        -: 1235:            ValueRange blockArgs) {
    #####: 1236:          Value value = blockArgs[0];
call    0 never executed
    #####: 1237:          Type valueTy = value.getType();
call    0 never executed
        -: 1238:
        -: 1239:          // For now we do all of our math in 64-bit. This is not optimal but
        -: 1240:          // should be correct for now, consider computing correct bit depth
        -: 1241:          // later.
    #####: 1242:          int32_t inBitwidth = valueTy.getIntOrFloatBitWidth() > 32 ? 48 : 32;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1243:
    #####: 1244:          auto inputZp = createConstFromIntAttribute<int32_t>(
    #####: 1245:              op, "input_zp", nestedBuilder.getIntegerType(inBitwidth),
call    0 never executed
    #####: 1246:              nestedBuilder);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1247:          auto outputZp = createConstFromIntAttribute<int32_t>(
    #####: 1248:              op, "output_zp", nestedBuilder.getI32Type(), nestedBuilder);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1249:
    #####: 1250:          Value multiplier = multiplierConstant ? multiplierConstant
    #####: 1251:                                                : blockArgs[multiplierArg];
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1252:          Value shift = shiftConstant ? shiftConstant : blockArgs[shiftArg];
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1253:
    #####: 1254:          if (valueTy.getIntOrFloatBitWidth() < 32) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1255:            if (valueTy.isUnsignedInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1256:              value = nestedBuilder
    #####: 1257:                          .create<UnrealizedConversionCastOp>(
        -: 1258:                              nestedLoc,
    #####: 1259:                              nestedBuilder.getIntegerType(
    #####: 1260:                                  valueTy.getIntOrFloatBitWidth()),
call    0 never executed
call    1 never executed
    #####: 1261:                              value)
call    0 never executed
call    1 never executed
    #####: 1262:                          .getResult(0);
    #####: 1263:              value = nestedBuilder.create<arith::ExtUIOp>(
    #####: 1264:                  nestedLoc, nestedBuilder.getI32Type(), value);
call    0 never executed
call    1 never executed
        -: 1265:            } else {
    #####: 1266:              value = nestedBuilder.create<arith::ExtSIOp>(
    #####: 1267:                  nestedLoc, nestedBuilder.getI32Type(), value);
call    0 never executed
call    1 never executed
        -: 1268:            }
        -: 1269:          }
        -: 1270:
    #####: 1271:          value =
    #####: 1272:              nestedBuilder.create<arith::SubIOp>(nestedLoc, value, inputZp);
call    0 never executed
call    1 never executed
        -: 1273:
    #####: 1274:          value = nestedBuilder.create<tosa::ApplyScaleOp>(
    #####: 1275:              loc, nestedBuilder.getI32Type(), value, multiplier, shift,
call    0 never executed
    #####: 1276:              nestedBuilder.getBoolAttr(doubleRound));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1277:
        -: 1278:          // Move to the new zero-point.
    #####: 1279:          value =
    #####: 1280:              nestedBuilder.create<arith::AddIOp>(nestedLoc, value, outputZp);
call    0 never executed
call    1 never executed
        -: 1281:
        -: 1282:          // Saturate to the output size.
    #####: 1283:          IntegerType outIntType =
    #####: 1284:              blockArgs.back().getType().cast<IntegerType>();
call    0 never executed
call    1 never executed
    #####: 1285:          unsigned outBitWidth = outIntType.getWidth();
call    0 never executed
        -: 1286:
    #####: 1287:          int32_t intMin = APInt::getSignedMinValue(outBitWidth).getSExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1288:          int32_t intMax = APInt::getSignedMaxValue(outBitWidth).getSExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1289:
        -: 1290:          // Unsigned integers have a difference output value.
    #####: 1291:          if (outIntType.isUnsignedInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1292:            intMin = 0;
    #####: 1293:            intMax = APInt::getMaxValue(outBitWidth).getZExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1294:          }
        -: 1295:
    #####: 1296:          auto intMinVal = nestedBuilder.create<arith::ConstantOp>(
    #####: 1297:              loc, nestedBuilder.getI32IntegerAttr(intMin));
call    0 never executed
call    1 never executed
    #####: 1298:          auto intMaxVal = nestedBuilder.create<arith::ConstantOp>(
    #####: 1299:              loc, nestedBuilder.getI32IntegerAttr(intMax));
call    0 never executed
call    1 never executed
        -: 1300:
    #####: 1301:          value = clampIntHelper(nestedLoc, value, intMinVal, intMaxVal,
    #####: 1302:                                 nestedBuilder);
call    0 never executed
        -: 1303:
    #####: 1304:          if (outIntType.getWidth() < 32) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1305:            value = nestedBuilder.create<arith::TruncIOp>(
    #####: 1306:                nestedLoc, rewriter.getIntegerType(outIntType.getWidth()),
call    0 never executed
call    1 never executed
    #####: 1307:                value);
call    0 never executed
call    1 never executed
        -: 1308:
    #####: 1309:            if (outIntType.isUnsignedInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1310:              value = nestedBuilder
    #####: 1311:                          .create<UnrealizedConversionCastOp>(nestedLoc,
    #####: 1312:                                                              outIntType, value)
call    0 never executed
    #####: 1313:                          .getResult(0);
        -: 1314:            }
        -: 1315:          }
        -: 1316:
    #####: 1317:          nestedBuilder.create<linalg::YieldOp>(loc, value);
call    0 never executed
    #####: 1318:        });
call    0 never executed
call    1 never executed
        -: 1319:
    #####: 1320:    rewriter.replaceOp(op, linalgOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1321:    return success();
branch  0 never executed
branch  1 never executed
        -: 1322:  }
        -: 1323:};
        -: 1324:
        -: 1325:// Handle the case where the resize operation is a regular broadcast. We
        -: 1326:// perform this part separately to avoid generating Extract operations which
        -: 1327:// are difficult to vectorize / optimize.
        -: 1328:class BroadcastResizeConverter : public OpRewritePattern<tosa::ResizeOp> {
        -: 1329:public:
        -: 1330:  using OpRewritePattern<tosa::ResizeOp>::OpRewritePattern;
        -: 1331:
function _ZNK12_GLOBAL__N_124BroadcastResizeConverter15matchAndRewriteEN4mlir4tosa8ResizeOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1332:  LogicalResult matchAndRewrite(tosa::ResizeOp op,
        -: 1333:                                PatternRewriter &rewriter) const final {
    #####: 1334:    Location loc = op.getLoc();
call    0 never executed
    #####: 1335:    ImplicitLocOpBuilder builder(loc, rewriter);
call    0 never executed
    #####: 1336:    auto input = op.getInput();
call    0 never executed
    #####: 1337:    auto inputTy = input.getType().cast<RankedTensorType>();
call    0 never executed
    #####: 1338:    auto resultTy = op.getType().cast<RankedTensorType>();
call    0 never executed
        -: 1339:
    #####: 1340:    auto imageH = inputTy.getDimSize(1);
call    0 never executed
    #####: 1341:    auto imageW = inputTy.getDimSize(2);
call    0 never executed
        -: 1342:
    #####: 1343:    if (imageH != 1 || imageW != 1) {
branch  0 never executed
branch  1 never executed
    #####: 1344:      return rewriter.notifyMatchFailure(
    #####: 1345:          op, "tosa.resize is not a pure broadcast operation");
call    0 never executed
        -: 1346:    }
        -: 1347:
        -: 1348:    // TODO(suderman): These string values should be declared the TOSA dialect.
    #####: 1349:    if (op.getMode() != "NEAREST_NEIGHBOR" && op.getMode() != "BILINEAR")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1350:      return failure();
        -: 1351:
    #####: 1352:    const bool isBilinear = op.getMode() == "BILINEAR";
call    0 never executed
        -: 1353:
    #####: 1354:    SmallVector<int32_t> scale;
call    0 never executed
    #####: 1355:    getValuesFromIntArrayAttribute(op.getScale(), scale);
call    0 never executed
call    1 never executed
        -: 1356:
        -: 1357:    // Collapse the 1 dimensions away.
    #####: 1358:    SmallVector<ReassociationExprs, 4> collapseMap(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1359:    collapseMap[0].push_back(builder.getAffineDimExpr(0));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1360:    collapseMap[1].push_back(builder.getAffineDimExpr(1));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1361:    collapseMap[1].push_back(builder.getAffineDimExpr(2));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1362:    collapseMap[1].push_back(builder.getAffineDimExpr(3));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1363:
    #####: 1364:    auto collapseTy =
    #####: 1365:        RankedTensorType::get({inputTy.getDimSize(0), inputTy.getDimSize(3)},
call    0 never executed
    #####: 1366:                              inputTy.getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1367:    Value collapse =
call    0 never executed
    #####: 1368:        builder.create<tensor::CollapseShapeOp>(collapseTy, input, collapseMap);
call    0 never executed
        -: 1369:
        -: 1370:    // Broadcast input to the output shape.
    #####: 1371:    llvm::SmallVector<Value> outputDynSize;
call    0 never executed
call    1 never executed
    #####: 1372:    if (inputTy.isDynamicDim(0))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1373:      outputDynSize.push_back(builder.create<tensor::DimOp>(input, 0));
call    0 never executed
call    1 never executed
        -: 1374:
    #####: 1375:    if (inputTy.isDynamicDim(3))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1376:      outputDynSize.push_back(builder.create<tensor::DimOp>(input, 3));
call    0 never executed
call    1 never executed
        -: 1377:
    #####: 1378:    llvm::SmallVector<AffineExpr> inputExprs{
    #####: 1379:        rewriter.getAffineDimExpr(0),
call    0 never executed
    #####: 1380:        rewriter.getAffineDimExpr(3),
call    0 never executed
    #####: 1381:    };
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1382:
    #####: 1383:    auto inputMap = AffineMap::get(/*dimCount=*/4, /*symbolCount=*/0,
    #####: 1384:                                   inputExprs, builder.getContext());
call    0 never executed
    #####: 1385:    auto resultMap = rewriter.getMultiDimIdentityMap(resultTy.getRank());
call    0 never executed
call    1 never executed
    #####: 1386:    SmallVector<StringRef> iterators(4, getParallelIteratorTypeName());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1387:
    #####: 1388:    Value empty = builder.create<tensor::EmptyOp>(
    #####: 1389:        resultTy.getShape(), resultTy.getElementType(), outputDynSize);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1390:
    #####: 1391:    auto generic = builder.create<linalg::GenericOp>(
    #####: 1392:        resultTy, ValueRange{collapse}, ValueRange{empty},
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1393:        ArrayRef<AffineMap>{inputMap, resultMap}, iterators,
function _ZZNK12_GLOBAL__N_124BroadcastResizeConverter15matchAndRewriteEN4mlir4tosa8ResizeOpERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES7_S8_S9_ called 0 returned 0% blocks executed 0%
    #####: 1394:        [=](OpBuilder &b, Location loc, ValueRange args) {
    #####: 1395:          Value value = args[0];
call    0 never executed
        -: 1396:          // This is the quantized case.
    #####: 1397:          if (inputTy.getElementType() != resultTy.getElementType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1398:            value =
    #####: 1399:                b.create<arith::ExtSIOp>(loc, resultTy.getElementType(), value);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1400:
    #####: 1401:            if (isBilinear && scale[0] != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1402:              Value scaleY = b.create<arith::ConstantOp>(
    #####: 1403:                  loc, b.getI32IntegerAttr(scale[0]));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1404:              value = b.create<arith::MulIOp>(loc, value, scaleY);
call    0 never executed
        -: 1405:            }
        -: 1406:
    #####: 1407:            if (isBilinear && scale[2] != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1408:              Value scaleX = b.create<arith::ConstantOp>(
    #####: 1409:                  loc, b.getI32IntegerAttr(scale[2]));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1410:              value = b.create<arith::MulIOp>(loc, value, scaleX);
call    0 never executed
        -: 1411:            }
        -: 1412:          }
        -: 1413:
    #####: 1414:          b.create<linalg::YieldOp>(loc, value);
call    0 never executed
    #####: 1415:        });
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1416:
    #####: 1417:    rewriter.replaceOp(op, generic.getResult(0));
call    0 never executed
call    1 never executed
    #####: 1418:    return success();
branch  0 never executed
branch  1 never executed
        -: 1419:  }
        -: 1420:};
        -: 1421:
        -: 1422:class GenericResizeConverter : public OpRewritePattern<tosa::ResizeOp> {
        -: 1423:public:
        -: 1424:  using OpRewritePattern<tosa::ResizeOp>::OpRewritePattern;
        -: 1425:
function _ZNK12_GLOBAL__N_122GenericResizeConverter15matchAndRewriteEN4mlir4tosa8ResizeOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1426:  LogicalResult matchAndRewrite(tosa::ResizeOp op,
        -: 1427:                                PatternRewriter &rewriter) const final {
    #####: 1428:    Location loc = op.getLoc();
call    0 never executed
    #####: 1429:    auto input = op.getInput();
call    0 never executed
    #####: 1430:    auto inputTy = input.getType().cast<ShapedType>();
call    0 never executed
    #####: 1431:    auto resultTy = op.getType().cast<ShapedType>();
call    0 never executed
    #####: 1432:    auto resultElementTy = resultTy.getElementType();
call    0 never executed
        -: 1433:
    #####: 1434:    auto imageH = inputTy.getShape()[1];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1435:    auto imageW = inputTy.getShape()[2];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:
    #####: 1437:    auto dynamicDimsOr =
    #####: 1438:        checkHasDynamicBatchDims(rewriter, op, {input, op.getOutput()});
call    0 never executed
call    1 never executed
    #####: 1439:    if (!dynamicDimsOr.has_value())
branch  0 never executed
branch  1 never executed
    #####: 1440:      return failure();
    #####: 1441:    SmallVector<Value> dynamicDims = dynamicDimsOr.value();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1442:
    #####: 1443:    if (op.getMode() != "NEAREST_NEIGHBOR" && op.getMode() != "BILINEAR")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1444:      return failure();
        -: 1445:
    #####: 1446:    auto emptyTensor = rewriter.create<tensor::EmptyOp>(
    #####: 1447:        loc, resultTy.getShape(), resultElementTy, dynamicDims);
call    0 never executed
call    1 never executed
        -: 1448:
    #####: 1449:    SmallVector<AffineMap, 2> affineMaps = {
    #####: 1450:        rewriter.getMultiDimIdentityMap(resultTy.getRank())};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1451:
    #####: 1452:    Value resize = input;
    #####: 1453:    auto genericOp = rewriter.create<linalg::GenericOp>(
    #####: 1454:        loc, resultTy, ValueRange({}), ValueRange{emptyTensor}, affineMaps,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1455:        getNParallelLoopsAttrs(resultTy.getRank()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1456:    resize = genericOp.getResult(0);
call    0 never executed
        -: 1457:
    #####: 1458:    OpBuilder::InsertionGuard regionGuard(rewriter);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1459:    rewriter.createBlock(&genericOp.getRegion(), genericOp.getRegion().end(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1460:                         TypeRange({resultElementTy}), loc);
    #####: 1461:    Value batch = rewriter.create<linalg::IndexOp>(loc, 0);
call    0 never executed
call    1 never executed
    #####: 1462:    Value y = rewriter.create<linalg::IndexOp>(loc, 1);
call    0 never executed
call    1 never executed
    #####: 1463:    Value x = rewriter.create<linalg::IndexOp>(loc, 2);
call    0 never executed
call    1 never executed
    #####: 1464:    Value channel = rewriter.create<linalg::IndexOp>(loc, 3);
call    0 never executed
call    1 never executed
        -: 1465:
    #####: 1466:    auto hwMin =
    #####: 1467:        rewriter.create<arith::ConstantOp>(loc, rewriter.getI32IntegerAttr(0));
call    0 never executed
call    1 never executed
    #####: 1468:    auto hMax = rewriter.create<arith::ConstantOp>(
    #####: 1469:        loc, rewriter.getI32IntegerAttr(imageH - 1));
call    0 never executed
call    1 never executed
    #####: 1470:    auto wMax = rewriter.create<arith::ConstantOp>(
    #####: 1471:        loc, rewriter.getI32IntegerAttr(imageW - 1));
call    0 never executed
call    1 never executed
        -: 1472:
    #####: 1473:    Value inY =
    #####: 1474:        rewriter.create<arith::IndexCastOp>(loc, rewriter.getI32Type(), y);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1475:    Value inX =
    #####: 1476:        rewriter.create<arith::IndexCastOp>(loc, rewriter.getI32Type(), x);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1477:
    #####: 1478:    bool floatingPointMode = resultElementTy.isF32();
call    0 never executed
        -: 1479:
    #####: 1480:    Value yScaleN, yScaleD, xScaleN, xScaleD, yOffset, xOffset, yBorder,
    #####: 1481:        xBorder;
    #####: 1482:    SmallVector<int32_t> scale, offset, border;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1483:    getValuesFromIntArrayAttribute(op.getScale(), scale);
call    0 never executed
call    1 never executed
    #####: 1484:    getValuesFromIntArrayAttribute(op.getOffset(), offset);
call    0 never executed
call    1 never executed
    #####: 1485:    getValuesFromIntArrayAttribute(op.getBorder(), border);
call    0 never executed
call    1 never executed
        -: 1486:
    #####: 1487:    yScaleN = rewriter.create<arith::ConstantOp>(
    #####: 1488:        loc, rewriter.getI32IntegerAttr(scale[0]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1489:    yScaleD = rewriter.create<arith::ConstantOp>(
    #####: 1490:        loc, rewriter.getI32IntegerAttr(scale[1]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1491:    xScaleN = rewriter.create<arith::ConstantOp>(
    #####: 1492:        loc, rewriter.getI32IntegerAttr(scale[2]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1493:    xScaleD = rewriter.create<arith::ConstantOp>(
    #####: 1494:        loc, rewriter.getI32IntegerAttr(scale[3]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1495:    yOffset = rewriter.create<arith::ConstantOp>(
    #####: 1496:        loc, rewriter.getI32IntegerAttr(offset[0]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1497:    xOffset = rewriter.create<arith::ConstantOp>(
    #####: 1498:        loc, rewriter.getI32IntegerAttr(offset[1]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1499:    yBorder = rewriter.create<arith::ConstantOp>(
    #####: 1500:        loc, rewriter.getI32IntegerAttr(border[0]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1501:    xBorder = rewriter.create<arith::ConstantOp>(
    #####: 1502:        loc, rewriter.getI32IntegerAttr(border[1]));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1503:
        -: 1504:    // Compute the the integer index and partial offset.
    #####: 1505:    Value ix, iy, dx, dy;
        -: 1506:    // x = x * scale_d + offset;
        -: 1507:    // ix = floor(x / scale_n)
    #####: 1508:    if (floatingPointMode) {
branch  0 never executed
branch  1 never executed
        -: 1509:      // dx = x / scale_n - ix
    #####: 1510:      Value y =
    #####: 1511:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), inY);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1512:      Value x =
    #####: 1513:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), inX);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1514:
    #####: 1515:      yScaleN =
    #####: 1516:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), yScaleN);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1517:      yScaleD =
    #####: 1518:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), yScaleD);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1519:      xScaleN =
    #####: 1520:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), xScaleN);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1521:      xScaleD =
    #####: 1522:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), xScaleD);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1523:      yOffset =
    #####: 1524:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), yOffset);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1525:      xOffset =
    #####: 1526:          rewriter.create<arith::UIToFPOp>(loc, rewriter.getF32Type(), xOffset);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1527:
    #####: 1528:      y = rewriter.create<arith::MulFOp>(loc, y, yScaleD);
call    0 never executed
call    1 never executed
    #####: 1529:      x = rewriter.create<arith::MulFOp>(loc, x, xScaleD);
call    0 never executed
call    1 never executed
        -: 1530:
    #####: 1531:      y = rewriter.create<arith::AddFOp>(loc, y, yOffset);
call    0 never executed
call    1 never executed
    #####: 1532:      x = rewriter.create<arith::AddFOp>(loc, x, xOffset);
call    0 never executed
call    1 never executed
        -: 1533:
    #####: 1534:      y = rewriter.create<arith::DivFOp>(loc, y, yScaleN);
call    0 never executed
call    1 never executed
    #####: 1535:      x = rewriter.create<arith::DivFOp>(loc, x, xScaleN);
call    0 never executed
call    1 never executed
        -: 1536:
    #####: 1537:      iy = rewriter.create<math::FloorOp>(loc, y);
call    0 never executed
call    1 never executed
    #####: 1538:      ix = rewriter.create<math::FloorOp>(loc, x);
call    0 never executed
call    1 never executed
        -: 1539:
    #####: 1540:      dy = rewriter.create<arith::SubFOp>(loc, y, iy);
call    0 never executed
call    1 never executed
    #####: 1541:      dx = rewriter.create<arith::SubFOp>(loc, x, ix);
call    0 never executed
call    1 never executed
        -: 1542:
    #####: 1543:      iy = rewriter.create<arith::FPToSIOp>(loc, rewriter.getI32Type(), iy);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1544:      ix = rewriter.create<arith::FPToSIOp>(loc, rewriter.getI32Type(), ix);
call    0 never executed
call    1 never executed
        -: 1545:    } else {
        -: 1546:      //  dx = x - ix * scale_n;
    #####: 1547:      Value y = rewriter.create<arith::MulIOp>(loc, inY, yScaleD);
call    0 never executed
call    1 never executed
    #####: 1548:      Value x = rewriter.create<arith::MulIOp>(loc, inX, xScaleD);
call    0 never executed
call    1 never executed
        -: 1549:
    #####: 1550:      y = rewriter.create<arith::AddIOp>(loc, y, yOffset);
call    0 never executed
call    1 never executed
    #####: 1551:      x = rewriter.create<arith::AddIOp>(loc, x, xOffset);
call    0 never executed
call    1 never executed
        -: 1552:
    #####: 1553:      iy = rewriter.create<arith::DivUIOp>(loc, y, yScaleN);
call    0 never executed
call    1 never executed
    #####: 1554:      ix = rewriter.create<arith::DivUIOp>(loc, x, xScaleN);
call    0 never executed
call    1 never executed
        -: 1555:
    #####: 1556:      Value tempY = rewriter.create<arith::MulIOp>(loc, iy, yScaleN);
call    0 never executed
call    1 never executed
    #####: 1557:      Value tempX = rewriter.create<arith::MulIOp>(loc, ix, xScaleN);
call    0 never executed
call    1 never executed
        -: 1558:
    #####: 1559:      dy = rewriter.create<arith::SubIOp>(loc, y, tempY);
call    0 never executed
call    1 never executed
    #####: 1560:      dx = rewriter.create<arith::SubIOp>(loc, x, tempX);
call    0 never executed
        -: 1561:    }
        -: 1562:
    #####: 1563:    if (op.getMode() == "NEAREST_NEIGHBOR") {
call    0 never executed
    #####: 1564:      Value yPred, xPred;
    #####: 1565:      auto zeroVal = rewriter.create<arith::ConstantOp>(
    #####: 1566:          loc, rewriter.getI32IntegerAttr(0));
call    0 never executed
call    1 never executed
    #####: 1567:      auto oneVal = rewriter.create<arith::ConstantOp>(
    #####: 1568:          loc, rewriter.getI32IntegerAttr(1));
call    0 never executed
call    1 never executed
        -: 1569:
        -: 1570:      // Round the index position towards the closest pixel location.
    #####: 1571:      if (floatingPointMode) {
branch  0 never executed
branch  1 never executed
    #####: 1572:        auto halfVal = rewriter.create<arith::ConstantOp>(
    #####: 1573:            loc, rewriter.getF32FloatAttr(0.5f));
call    0 never executed
call    1 never executed
    #####: 1574:        yPred = rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OGE,
    #####: 1575:                                               dy, halfVal);
call    0 never executed
call    1 never executed
    #####: 1576:        xPred = rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OGE,
    #####: 1577:                                               dx, halfVal);
call    0 never executed
        -: 1578:      } else {
    #####: 1579:        Value yScaleNHalfVal =
    #####: 1580:            rewriter.create<arith::ShRSIOp>(loc, yScaleN, oneVal);
call    0 never executed
call    1 never executed
    #####: 1581:        Value xScaleNHalfVal =
    #####: 1582:            rewriter.create<arith::ShRSIOp>(loc, xScaleN, oneVal);
call    0 never executed
call    1 never executed
    #####: 1583:        yPred = rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sge,
    #####: 1584:                                               dy, yScaleNHalfVal);
call    0 never executed
call    1 never executed
    #####: 1585:        xPred = rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sge,
    #####: 1586:                                               dx, xScaleNHalfVal);
call    0 never executed
        -: 1587:      }
        -: 1588:
    #####: 1589:      auto yOffset =
    #####: 1590:          rewriter.create<arith::SelectOp>(loc, yPred, oneVal, zeroVal);
call    0 never executed
    #####: 1591:      auto xOffset =
    #####: 1592:          rewriter.create<arith::SelectOp>(loc, xPred, oneVal, zeroVal);
call    0 never executed
        -: 1593:
    #####: 1594:      iy = rewriter.create<arith::AddIOp>(loc, iy, yOffset);
call    0 never executed
call    1 never executed
    #####: 1595:      ix = rewriter.create<arith::AddIOp>(loc, ix, xOffset);
call    0 never executed
call    1 never executed
        -: 1596:
        -: 1597:      // Clamp the to be within the bounds of the input image.
    #####: 1598:      iy = clampIntHelper(loc, iy, hwMin, hMax, rewriter);
call    0 never executed
    #####: 1599:      ix = clampIntHelper(loc, ix, hwMin, wMax, rewriter);
call    0 never executed
        -: 1600:
        -: 1601:      // Read the value from the input array.
    #####: 1602:      iy =
    #####: 1603:          rewriter.create<arith::IndexCastOp>(loc, rewriter.getIndexType(), iy);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1604:      ix =
    #####: 1605:          rewriter.create<arith::IndexCastOp>(loc, rewriter.getIndexType(), ix);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1606:
    #####: 1607:      Value result = rewriter.create<tensor::ExtractOp>(
    #####: 1608:          loc, input, ValueRange{batch, iy, ix, channel});
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1609:
    #####: 1610:      rewriter.create<linalg::YieldOp>(loc, result);
call    0 never executed
        -: 1611:    } else {
        -: 1612:      // The mode here must be BILINEAR.
    #####: 1613:      assert(op.getMode() == "BILINEAR");
call    0 never executed
call    1 never executed
    #####: 1614:      Value y0 = iy;
    #####: 1615:      Value x0 = ix;
        -: 1616:
    #####: 1617:      auto oneVal = rewriter.create<arith::ConstantOp>(
    #####: 1618:          loc, rewriter.getI32IntegerAttr(1));
call    0 never executed
call    1 never executed
    #####: 1619:      Value y1 = rewriter.create<arith::AddIOp>(loc, y0, oneVal);
call    0 never executed
call    1 never executed
    #####: 1620:      Value x1 = rewriter.create<arith::AddIOp>(loc, x0, oneVal);
call    0 never executed
call    1 never executed
        -: 1621:
    #####: 1622:      y0 = clampIntHelper(loc, y0, hwMin, hMax, rewriter);
call    0 never executed
    #####: 1623:      y1 = clampIntHelper(loc, y1, hwMin, hMax, rewriter);
call    0 never executed
        -: 1624:
    #####: 1625:      x0 = clampIntHelper(loc, x0, hwMin, wMax, rewriter);
call    0 never executed
    #####: 1626:      x1 = clampIntHelper(loc, x1, hwMin, wMax, rewriter);
call    0 never executed
        -: 1627:
    #####: 1628:      y0 =
    #####: 1629:          rewriter.create<arith::IndexCastOp>(loc, rewriter.getIndexType(), y0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1630:      y1 =
    #####: 1631:          rewriter.create<arith::IndexCastOp>(loc, rewriter.getIndexType(), y1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1632:      x0 =
    #####: 1633:          rewriter.create<arith::IndexCastOp>(loc, rewriter.getIndexType(), x0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1634:      x1 =
    #####: 1635:          rewriter.create<arith::IndexCastOp>(loc, rewriter.getIndexType(), x1);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1636:
    #####: 1637:      Value y0x0 = rewriter.create<tensor::ExtractOp>(
    #####: 1638:          loc, input, ValueRange{batch, y0, x0, channel});
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1639:      Value y0x1 = rewriter.create<tensor::ExtractOp>(
    #####: 1640:          loc, input, ValueRange{batch, y0, x1, channel});
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1641:      Value y1x0 = rewriter.create<tensor::ExtractOp>(
    #####: 1642:          loc, input, ValueRange{batch, y1, x0, channel});
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1643:      Value y1x1 = rewriter.create<tensor::ExtractOp>(
    #####: 1644:          loc, input, ValueRange{batch, y1, x1, channel});
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1645:
    #####: 1646:      if (floatingPointMode) {
branch  0 never executed
branch  1 never executed
    #####: 1647:        Value rightPart = dx;
    #####: 1648:        auto oneVal = rewriter.create<arith::ConstantOp>(
    #####: 1649:            loc, rewriter.getF32FloatAttr(1.0f));
call    0 never executed
call    1 never executed
    #####: 1650:        Value leftPart = rewriter.create<arith::SubFOp>(loc, oneVal, dx);
call    0 never executed
call    1 never executed
        -: 1651:
    #####: 1652:        y0x0 = rewriter.create<arith::MulFOp>(loc, y0x0, leftPart);
call    0 never executed
call    1 never executed
    #####: 1653:        y0x1 = rewriter.create<arith::MulFOp>(loc, y0x1, rightPart);
call    0 never executed
call    1 never executed
    #####: 1654:        Value topAcc = rewriter.create<arith::AddFOp>(loc, y0x0, y0x1);
call    0 never executed
call    1 never executed
        -: 1655:
    #####: 1656:        y1x0 = rewriter.create<arith::MulFOp>(loc, y1x0, leftPart);
call    0 never executed
call    1 never executed
    #####: 1657:        y1x1 = rewriter.create<arith::MulFOp>(loc, y1x1, rightPart);
call    0 never executed
call    1 never executed
    #####: 1658:        Value bottomAcc = rewriter.create<arith::AddFOp>(loc, y1x0, y1x1);
call    0 never executed
call    1 never executed
        -: 1659:
    #####: 1660:        Value bottomPart = dy;
    #####: 1661:        Value topPart = rewriter.create<arith::SubFOp>(loc, oneVal, dy);
call    0 never executed
call    1 never executed
    #####: 1662:        topAcc = rewriter.create<arith::MulFOp>(loc, topAcc, topPart);
call    0 never executed
call    1 never executed
    #####: 1663:        bottomAcc = rewriter.create<arith::MulFOp>(loc, bottomAcc, bottomPart);
call    0 never executed
call    1 never executed
    #####: 1664:        Value result = rewriter.create<arith::AddFOp>(loc, topAcc, bottomAcc);
call    0 never executed
call    1 never executed
        -: 1665:
    #####: 1666:        rewriter.create<linalg::YieldOp>(loc, result);
call    0 never executed
        -: 1667:      } else {
        -: 1668:        // Perform in quantized space.
    #####: 1669:        y0x0 = rewriter.create<arith::ExtSIOp>(loc, resultElementTy, y0x0);
call    0 never executed
call    1 never executed
    #####: 1670:        y0x1 = rewriter.create<arith::ExtSIOp>(loc, resultElementTy, y0x1);
call    0 never executed
call    1 never executed
    #####: 1671:        y1x0 = rewriter.create<arith::ExtSIOp>(loc, resultElementTy, y1x0);
call    0 never executed
call    1 never executed
    #####: 1672:        y1x1 = rewriter.create<arith::ExtSIOp>(loc, resultElementTy, y1x1);
call    0 never executed
call    1 never executed
        -: 1673:
    #####: 1674:        if (resultElementTy.getIntOrFloatBitWidth() > 32) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1675:          dx = rewriter.create<arith::ExtSIOp>(loc, resultElementTy, dx);
call    0 never executed
call    1 never executed
    #####: 1676:          dy = rewriter.create<arith::ExtSIOp>(loc, resultElementTy, dy);
call    0 never executed
        -: 1677:        }
        -: 1678:
    #####: 1679:        Value topAcc, bottomAcc;
    #####: 1680:        if (imageW == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1681:          topAcc = rewriter.create<arith::MulIOp>(loc, y0x0, xScaleN);
call    0 never executed
call    1 never executed
    #####: 1682:          bottomAcc = rewriter.create<arith::MulIOp>(loc, y1x0, xScaleN);
call    0 never executed
        -: 1683:        } else {
    #####: 1684:          Value rightPart = dx;
    #####: 1685:          Value leftPart = rewriter.create<arith::SubIOp>(loc, xScaleN, dx);
call    0 never executed
call    1 never executed
        -: 1686:
    #####: 1687:          y0x0 = rewriter.create<arith::MulIOp>(loc, y0x0, leftPart);
call    0 never executed
call    1 never executed
    #####: 1688:          y0x1 = rewriter.create<arith::MulIOp>(loc, y0x1, rightPart);
call    0 never executed
call    1 never executed
    #####: 1689:          topAcc = rewriter.create<arith::AddIOp>(loc, y0x0, y0x1);
call    0 never executed
call    1 never executed
        -: 1690:
    #####: 1691:          y1x0 = rewriter.create<arith::MulIOp>(loc, y1x0, leftPart);
call    0 never executed
call    1 never executed
    #####: 1692:          y1x1 = rewriter.create<arith::MulIOp>(loc, y1x1, rightPart);
call    0 never executed
call    1 never executed
    #####: 1693:          bottomAcc = rewriter.create<arith::AddIOp>(loc, y1x0, y1x1);
call    0 never executed
        -: 1694:        }
        -: 1695:
    #####: 1696:        Value result;
    #####: 1697:        if (imageH == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1698:          result = rewriter.create<arith::MulIOp>(loc, topAcc, yScaleN);
call    0 never executed
        -: 1699:        } else {
    #####: 1700:          Value bottomPart = dy;
    #####: 1701:          Value topPart = rewriter.create<arith::SubIOp>(loc, yScaleN, dy);
call    0 never executed
call    1 never executed
    #####: 1702:          topAcc = rewriter.create<arith::MulIOp>(loc, topAcc, topPart);
call    0 never executed
call    1 never executed
    #####: 1703:          bottomAcc =
    #####: 1704:              rewriter.create<arith::MulIOp>(loc, bottomAcc, bottomPart);
call    0 never executed
call    1 never executed
    #####: 1705:          result = rewriter.create<arith::AddIOp>(loc, topAcc, bottomAcc);
call    0 never executed
        -: 1706:        }
        -: 1707:
    #####: 1708:        rewriter.create<linalg::YieldOp>(loc, result);
call    0 never executed
        -: 1709:      }
        -: 1710:    }
        -: 1711:
    #####: 1712:    rewriter.replaceOp(op, resize);
call    0 never executed
call    1 never executed
    #####: 1713:    return success();
branch  0 never executed
branch  1 never executed
        -: 1714:  }
        -: 1715:};
        -: 1716:
        -: 1717:// At the codegen level any identity operations should be removed. Any cases
        -: 1718:// where identity is load-bearing (e.g. cross device computation) should be
        -: 1719:// handled before lowering to codegen.
        -: 1720:template <typename SrcOp>
        -: 1721:class IdentityNConverter : public OpRewritePattern<SrcOp> {
        -: 1722:public:
        -: 1723:  using OpRewritePattern<SrcOp>::OpRewritePattern;
        -: 1724:
function _ZNK12_GLOBAL__N_118IdentityNConverterIN4mlir4tosa10IdentityOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1725:  LogicalResult matchAndRewrite(SrcOp op,
        -: 1726:                                PatternRewriter &rewriter) const final {
    #####: 1727:    rewriter.replaceOp(op, op.getOperation()->getOperands());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1728:    return success();
        -: 1729:  }
        -: 1730:};
        -: 1731:
        -: 1732:template <typename SrcOp>
        -: 1733:class ReduceConverter : public OpRewritePattern<SrcOp> {
        -: 1734:public:
        -: 1735:  using OpRewritePattern<SrcOp>::OpRewritePattern;
        -: 1736:
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
        -: 1740:  }
------------------
_ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceAllOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceAllOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
call    0 never executed
call    1 never executed
        -: 1740:  }
------------------
_ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceAnyOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceAnyOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
call    0 never executed
call    1 never executed
        -: 1740:  }
------------------
_ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceMinOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceMinOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
call    0 never executed
call    1 never executed
        -: 1740:  }
------------------
_ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceMaxOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceMaxOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
call    0 never executed
call    1 never executed
        -: 1740:  }
------------------
_ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceSumOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa11ReduceSumOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
call    0 never executed
call    1 never executed
        -: 1740:  }
------------------
_ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa12ReduceProdOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_115ReduceConverterIN4mlir4tosa12ReduceProdOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1737:  LogicalResult matchAndRewrite(SrcOp reduceOp,
        -: 1738:                                PatternRewriter &rewriter) const final {
    #####: 1739:    return reduceMatchAndRewriteHelper(reduceOp, reduceOp.getAxis(), rewriter);
call    0 never executed
call    1 never executed
        -: 1740:  }
------------------
        -: 1741:};
        -: 1742:
        -: 1743:struct ConcatConverter : public OpConversionPattern<tosa::ConcatOp> {
        -: 1744:  using OpConversionPattern<tosa::ConcatOp>::OpConversionPattern;
        -: 1745:
        -: 1746:  LogicalResult
function _ZNK12_GLOBAL__N_115ConcatConverter15matchAndRewriteEN4mlir4tosa8ConcatOpENS2_15ConcatOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1747:  matchAndRewrite(tosa::ConcatOp op, OpAdaptor adaptor,
        -: 1748:                  ConversionPatternRewriter &rewriter) const override {
    #####: 1749:    auto inputType = op.getOperand(0).getType().template cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 1750:    auto resultType = op.getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
        -: 1751:
    #####: 1752:    Location loc = op.getLoc();
call    0 never executed
    #####: 1753:    int axis = op.getAxis();
call    0 never executed
    #####: 1754:    Value axisValue = rewriter.createOrFold<arith::ConstantOp>(
    #####: 1755:        loc, rewriter.getIndexAttr(axis));
call    0 never executed
call    1 never executed
    #####: 1756:    int rank = resultType.getRank();
call    0 never executed
    #####: 1757:    SmallVector<Value, 3> offsets, sizes, strides;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1758:    sizes.reserve(rank);
branch  0 never executed
branch  1 never executed
    #####: 1759:    strides.resize(rank, rewriter.create<arith::ConstantIndexOp>(loc, 1));
call    0 never executed
call    1 never executed
    #####: 1760:    offsets.resize(rank, rewriter.create<arith::ConstantIndexOp>(loc, 0));
call    0 never executed
call    1 never executed
        -: 1761:
    #####: 1762:    SmallVector<Value> dynDims;
branch  0 never executed
branch  1 never executed
    #####: 1763:    for (int i = 0; i < rank; ++i) {
branch  0 never executed
branch  1 never executed
    #####: 1764:      sizes.push_back(rewriter.createOrFold<tensor::DimOp>(
call    0 never executed
call    1 never executed
    #####: 1765:          loc, adaptor.getOperands()[0], i));
call    0 never executed
call    1 never executed
    #####: 1766:      if (inputType.isDynamicDim(i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1767:        dynDims.push_back(
call    0 never executed
    #####: 1768:            rewriter.create<tensor::DimOp>(loc, op.getOperand(0), i));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1769:      }
        -: 1770:    }
        -: 1771:
    #####: 1772:    Value resultDimSize = sizes[axis];
branch  0 never executed
branch  1 never executed
    #####: 1773:    for (auto arg : adaptor.getOperands().drop_front()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1774:      auto size = rewriter.createOrFold<tensor::DimOp>(loc, arg, axisValue);
call    0 never executed
    #####: 1775:      resultDimSize =
    #####: 1776:          rewriter.createOrFold<arith::AddIOp>(loc, resultDimSize, size);
call    0 never executed
        -: 1777:    }
    #####: 1778:    sizes[axis] = resultDimSize;
branch  0 never executed
branch  1 never executed
        -: 1779:
    #####: 1780:    Value emptyTensor = rewriter.create<tensor::EmptyOp>(
    #####: 1781:        loc, resultType.getShape(), resultType.getElementType(), dynDims);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1782:
    #####: 1783:    Value zeroVal = rewriter.createOrFold<arith::ConstantOp>(
    #####: 1784:        loc, rewriter.getZeroAttr(resultType.getElementType()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1785:    Value result = rewriter
    #####: 1786:                       .create<linalg::FillOp>(loc, ValueRange{zeroVal},
    #####: 1787:                                               ValueRange{emptyTensor})
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1788:                       .result();
call    0 never executed
        -: 1789:
function _ZZNK12_GLOBAL__N_115ConcatConverter15matchAndRewriteEN4mlir4tosa8ConcatOpENS2_15ConcatOpAdaptorERNS1_25ConversionPatternRewriterEENKUlNS1_5ValueEE_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1790:    auto toOpFoldResult = [](Value v) -> OpFoldResult {
    #####: 1791:      auto op = v.getDefiningOp<arith::ConstantIndexOp>();
call    0 never executed
    #####: 1792:      if (!op)
branch  0 never executed
branch  1 never executed
    #####: 1793:        return v;
call    0 never executed
    #####: 1794:      return op.getValue();
call    0 never executed
call    1 never executed
        -: 1795:    };
    #####: 1796:    for (auto arg : adaptor.getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1797:      sizes[axis] = rewriter.createOrFold<tensor::DimOp>(loc, arg, axisValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1798:      result = rewriter.createOrFold<tensor::InsertSliceOp>(
        -: 1799:          loc, arg, result,
    #####: 1800:          llvm::to_vector(llvm::map_range(offsets, toOpFoldResult)),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1801:          llvm::to_vector(llvm::map_range(sizes, toOpFoldResult)),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1802:          llvm::to_vector(llvm::map_range(strides, toOpFoldResult)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1803:      offsets[axis] =
branch  0 never executed
branch  1 never executed
    #####: 1804:          rewriter.createOrFold<arith::AddIOp>(loc, offsets[axis], sizes[axis]);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1805:    }
    #####: 1806:    rewriter.replaceOp(op, result);
call    0 never executed
call    1 never executed
    #####: 1807:    return success();
branch  0 never executed
branch  1 never executed
        -: 1808:  }
        -: 1809:};
        -: 1810:
        -: 1811:class ReverseConverter : public OpRewritePattern<tosa::ReverseOp> {
        -: 1812:public:
        -: 1813:  using OpRewritePattern<tosa::ReverseOp>::OpRewritePattern;
        -: 1814:
function _ZNK12_GLOBAL__N_116ReverseConverter15matchAndRewriteEN4mlir4tosa9ReverseOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1815:  LogicalResult matchAndRewrite(tosa::ReverseOp op,
        -: 1816:                                PatternRewriter &rewriter) const final {
    #####: 1817:    auto loc = op.getLoc();
call    0 never executed
    #####: 1818:    Value input = op.getInput();
call    0 never executed
    #####: 1819:    auto inputTy = input.getType().template cast<ShapedType>();
call    0 never executed
    #####: 1820:    auto resultTy = op.getType().template cast<ShapedType>();
call    0 never executed
    #####: 1821:    auto axis = op.getAxis();
call    0 never executed
        -: 1822:
    #####: 1823:    SmallVector<Value> dynDims;
    #####: 1824:    for (int i = 0; i < inputTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1825:      if (inputTy.isDynamicDim(i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1826:        dynDims.push_back(rewriter.create<tensor::DimOp>(loc, input, i));
call    0 never executed
call    1 never executed
        -: 1827:      }
        -: 1828:    }
        -: 1829:
    #####: 1830:    Value axisDimSize = rewriter.create<tensor::DimOp>(loc, input, axis);
call    0 never executed
call    1 never executed
        -: 1831:
        -: 1832:    // First fill the output buffer with the init value.
    #####: 1833:    auto emptyTensor = rewriter
    #####: 1834:                           .create<tensor::EmptyOp>(loc, inputTy.getShape(),
call    0 never executed
    #####: 1835:                                                    inputTy.getElementType(),
call    0 never executed
    #####: 1836:                                                    ArrayRef<Value>({dynDims}))
call    0 never executed
call    1 never executed
    #####: 1837:                           .getResult();
call    0 never executed
    #####: 1838:    SmallVector<AffineMap, 2> affineMaps = {
    #####: 1839:        rewriter.getMultiDimIdentityMap(resultTy.getRank())};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1840:
    #####: 1841:    rewriter.replaceOpWithNewOp<linalg::GenericOp>(
    #####: 1842:        op, resultTy, ArrayRef<Value>({}), ValueRange{emptyTensor}, affineMaps,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1843:        getNParallelLoopsAttrs(resultTy.getRank()),
call    0 never executed
function _ZZNK12_GLOBAL__N_116ReverseConverter15matchAndRewriteEN4mlir4tosa9ReverseOpERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES7_S8_S9_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1844:        [&](OpBuilder &nestedBuilder, Location nestedLoc, ValueRange args) {
    #####: 1845:          llvm::SmallVector<Value> indices;
    #####: 1846:          for (unsigned int i = 0; i < inputTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1847:            auto index =
    #####: 1848:                rewriter.create<linalg::IndexOp>(nestedLoc, i).getResult();
call    0 never executed
call    1 never executed
    #####: 1849:            if (i == axis) {
branch  0 never executed
branch  1 never executed
    #####: 1850:              auto one = rewriter.create<arith::ConstantIndexOp>(nestedLoc, 1);
call    0 never executed
    #####: 1851:              auto sizeMinusOne =
    #####: 1852:                  rewriter.create<arith::SubIOp>(nestedLoc, axisDimSize, one);
call    0 never executed
    #####: 1853:              index = rewriter.create<arith::SubIOp>(nestedLoc, sizeMinusOne,
    #####: 1854:                                                     index);
call    0 never executed
call    1 never executed
        -: 1855:            }
        -: 1856:
    #####: 1857:            indices.push_back(index);
call    0 never executed
        -: 1858:          }
        -: 1859:
    #####: 1860:          auto extract = nestedBuilder.create<tensor::ExtractOp>(
    #####: 1861:              nestedLoc, input, indices);
call    0 never executed
    #####: 1862:          nestedBuilder.create<linalg::YieldOp>(op.getLoc(),
    #####: 1863:                                                extract.getResult());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1864:        });
call    0 never executed
call    1 never executed
    #####: 1865:    return success();
branch  0 never executed
branch  1 never executed
        -: 1866:  }
        -: 1867:};
        -: 1868:
        -: 1869:// This converter translate a tile operation to a reshape, broadcast, reshape.
        -: 1870:// The first reshape minimally expands each tiled dimension to include a
        -: 1871:// proceding size-1 dim. This dim is then broadcasted to the appropriate
        -: 1872:// multiple.
        -: 1873:struct TileConverter : public OpConversionPattern<tosa::TileOp> {
        -: 1874:  using OpConversionPattern<tosa::TileOp>::OpConversionPattern;
        -: 1875:
        -: 1876:  LogicalResult
function _ZNK12_GLOBAL__N_113TileConverter15matchAndRewriteEN4mlir4tosa6TileOpENS2_13TileOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1877:  matchAndRewrite(tosa::TileOp op, OpAdaptor adaptor,
        -: 1878:                  ConversionPatternRewriter &rewriter) const override {
    #####: 1879:    auto loc = op.getLoc();
call    0 never executed
    #####: 1880:    auto input = op.getInput1();
call    0 never executed
    #####: 1881:    auto inputTy = input.getType().cast<ShapedType>();
call    0 never executed
    #####: 1882:    auto inputShape = inputTy.getShape();
call    0 never executed
    #####: 1883:    auto resultTy = op.getType().cast<ShapedType>();
call    0 never executed
    #####: 1884:    auto elementTy = inputTy.getElementType();
call    0 never executed
    #####: 1885:    int64_t rank = inputTy.getRank();
call    0 never executed
        -: 1886:
    #####: 1887:    SmallVector<int64_t> multiples;
call    0 never executed
    #####: 1888:    getValuesFromIntArrayAttribute(op.getMultiples(), multiples);
call    0 never executed
call    1 never executed
        -: 1889:
        -: 1890:    // Broadcast the newly added dimensions to their appropriate multiple.
    #####: 1891:    SmallVector<int64_t, 2> genericShape;
branch  0 never executed
branch  1 never executed
    #####: 1892:    for (int i = 0; i < rank; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1893:      int64_t dim = multiples[i];
branch  0 never executed
branch  1 never executed
    #####: 1894:      genericShape.push_back(dim == -1 ? ShapedType::kDynamicSize : dim);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1895:      genericShape.push_back(inputShape[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1896:    }
        -: 1897:
    #####: 1898:    SmallVector<Value> dynDims;
branch  0 never executed
branch  1 never executed
    #####: 1899:    for (int i = 0; i < inputTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1900:      if (inputTy.isDynamicDim(i) || multiples[i] == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1901:        dynDims.push_back(rewriter.create<tensor::DimOp>(loc, input, i));
call    0 never executed
call    1 never executed
        -: 1902:      }
        -: 1903:    }
        -: 1904:
    #####: 1905:    auto emptyTensor = rewriter.create<tensor::EmptyOp>(
    #####: 1906:        op.getLoc(), genericShape, elementTy, dynDims);
call    0 never executed
        -: 1907:
        -: 1908:    // We needs to map the input shape to the non-broadcasted dimensions.
    #####: 1909:    SmallVector<AffineExpr, 4> dimExprs;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1910:    dimExprs.reserve(rank);
branch  0 never executed
branch  1 never executed
    #####: 1911:    for (unsigned i = 0; i < rank; ++i)
branch  0 never executed
branch  1 never executed
    #####: 1912:      dimExprs.push_back(rewriter.getAffineDimExpr(i * 2 + 1));
call    0 never executed
call    1 never executed
        -: 1913:
    #####: 1914:    auto readAffineMap =
        -: 1915:        AffineMap::get(/*dimCount=*/rank * 2, /*symbolCount=*/0, dimExprs,
    #####: 1916:                       rewriter.getContext());
call    0 never executed
        -: 1917:
    #####: 1918:    SmallVector<AffineMap, 2> affineMaps = {
    #####: 1919:        readAffineMap, rewriter.getMultiDimIdentityMap(genericShape.size())};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1920:
    #####: 1921:    auto genericOp = rewriter.create<linalg::GenericOp>(
    #####: 1922:        loc, RankedTensorType::get(genericShape, elementTy), input,
    #####: 1923:        ValueRange{emptyTensor}, affineMaps,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1924:        getNParallelLoopsAttrs(genericShape.size()),
call    0 never executed
function _ZZNK12_GLOBAL__N_113TileConverter15matchAndRewriteEN4mlir4tosa6TileOpENS2_13TileOpAdaptorERNS1_25ConversionPatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES8_S9_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1925:        [&](OpBuilder &nestedBuilder, Location nestedLoc, ValueRange args) {
    #####: 1926:          nestedBuilder.create<linalg::YieldOp>(op.getLoc(), *args.begin());
call    0 never executed
call    1 never executed
    #####: 1927:        });
call    0 never executed
call    1 never executed
        -: 1928:
    #####: 1929:    rewriter.replaceOpWithNewOp<tosa::ReshapeOp>(
    #####: 1930:        op, resultTy, genericOp.getResult(0),
call    0 never executed
    #####: 1931:        rewriter.getI64ArrayAttr(resultTy.getShape()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1932:    return success();
branch  0 never executed
branch  1 never executed
        -: 1933:  }
        -: 1934:};
        -: 1935:
        -: 1936:class PadConverter : public OpRewritePattern<tosa::PadOp> {
        -: 1937:public:
        -: 1938:  using OpRewritePattern<tosa::PadOp>::OpRewritePattern;
        -: 1939:
function _ZNK12_GLOBAL__N_112PadConverter15matchAndRewriteEN4mlir4tosa5PadOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1940:  LogicalResult matchAndRewrite(tosa::PadOp padOp,
        -: 1941:                                PatternRewriter &rewriter) const final {
    #####: 1942:    auto loc = padOp.getLoc();
call    0 never executed
    #####: 1943:    auto input = padOp.getInput1();
call    0 never executed
    #####: 1944:    auto padding = padOp.getPadding();
call    0 never executed
        -: 1945:
    #####: 1946:    ShapedType inputTy = input.getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 1947:    Type elementTy = inputTy.getElementType();
call    0 never executed
    #####: 1948:    int64_t rank = inputTy.getRank();
call    0 never executed
        -: 1949:
        -: 1950:    // Setup the default constantAttr.
        -: 1951:
    #####: 1952:    Value padConstant;
        -: 1953:
    #####: 1954:    if (padOp.getPadConst()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1955:      padConstant = rewriter.createOrFold<tensor::ExtractOp>(
    #####: 1956:          loc, padOp.getPadConst(), ValueRange({}));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1957:    } else {
    #####: 1958:      Attribute constantAttr;
    #####: 1959:      if (elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1960:        constantAttr = rewriter.getFloatAttr(elementTy, 0.0);
call    0 never executed
    #####: 1961:      } else if (elementTy.isa<IntegerType>() && !padOp.getQuantizationInfo()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1962:        constantAttr = rewriter.getIntegerAttr(elementTy, 0);
call    0 never executed
    #####: 1963:      } else if (elementTy.isa<IntegerType>() && padOp.getQuantizationInfo()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1964:        int64_t value = padOp.getQuantizationInfo()->getInputZp();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1965:        constantAttr = rewriter.getIntegerAttr(elementTy, value);
call    0 never executed
        -: 1966:      }
    #####: 1967:      if (constantAttr)
branch  0 never executed
branch  1 never executed
    #####: 1968:        padConstant = rewriter.create<arith::ConstantOp>(loc, constantAttr);
call    0 never executed
        -: 1969:    }
        -: 1970:
    #####: 1971:    if (!padConstant) {
branch  0 never executed
branch  1 never executed
    #####: 1972:      return rewriter.notifyMatchFailure(
    #####: 1973:          padOp, "tosa.pad was unable to determine the pad constant value.");
call    0 never executed
        -: 1974:    }
        -: 1975:
    #####: 1976:    Value lowIndex =
    #####: 1977:        rewriter.create<arith::ConstantOp>(loc, rewriter.getIndexAttr(0));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1978:    Value highIndex =
    #####: 1979:        rewriter.create<arith::ConstantOp>(loc, rewriter.getIndexAttr(1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1980:
    #####: 1981:    SmallVector<OpFoldResult, 3> lowValues;
branch  0 never executed
branch  1 never executed
    #####: 1982:    SmallVector<OpFoldResult, 3> highValues;
branch  0 never executed
branch  1 never executed
        -: 1983:
    #####: 1984:    lowValues.reserve(rank);
branch  0 never executed
branch  1 never executed
    #####: 1985:    highValues.reserve(rank);
branch  0 never executed
branch  1 never executed
        -: 1986:
    #####: 1987:    for (int i = 0; i < rank; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1988:      Value inputIndex = rewriter.createOrFold<arith::ConstantIndexOp>(loc, i);
call    0 never executed
    #####: 1989:      Value lowVal = rewriter.createOrFold<tensor::ExtractOp>(
    #####: 1990:          loc, padding, ValueRange({inputIndex, lowIndex}));
call    0 never executed
call    1 never executed
    #####: 1991:      Value highVal = rewriter.createOrFold<tensor::ExtractOp>(
    #####: 1992:          loc, padding, ValueRange({inputIndex, highIndex}));
call    0 never executed
call    1 never executed
        -: 1993:
    #####: 1994:      lowVal = rewriter.createOrFold<arith::IndexCastOp>(
    #####: 1995:          loc, rewriter.getIndexType(), lowVal);
call    0 never executed
call    1 never executed
    #####: 1996:      highVal = rewriter.createOrFold<arith::IndexCastOp>(
    #####: 1997:          loc, rewriter.getIndexType(), highVal);
call    0 never executed
call    1 never executed
        -: 1998:
    #####: 1999:      lowValues.push_back(lowVal);
call    0 never executed
call    1 never executed
    #####: 2000:      highValues.push_back(highVal);
call    0 never executed
call    1 never executed
        -: 2001:    }
        -: 2002:
    #####: 2003:    auto newPadOp = rewriter.create<tensor::PadOp>(
    #####: 2004:        loc, padOp.getType(), input, lowValues, highValues, padConstant);
call    0 never executed
call    1 never executed
        -: 2005:
    #####: 2006:    rewriter.replaceOp(padOp, newPadOp.getResult());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2007:    return success();
branch  0 never executed
branch  1 never executed
        -: 2008:  }
        -: 2009:};
        -: 2010:
        -: 2011:// Tosa argmax lowering represents the ArgMax op as an linalg.indexed_generic
        -: 2012:// op, producing two output buffers.
        -: 2013://
        -: 2014:// The first output buffer contains the index of the found maximum value. It is
        -: 2015:// initialized to 0 and is resulting integer type.
        -: 2016://
        -: 2017:// The second output buffer contains the maximum value found. It is initialized
        -: 2018:// to the minimum representable value of the input element type. After being
        -: 2019:// populated by indexed_generic, this buffer is disgarded as only the index is
        -: 2020:// requested.
        -: 2021://
        -: 2022:// The indexed_generic op updates both the maximum value and index if the
        -: 2023:// current value exceeds the running max.
        -: 2024:class ArgMaxConverter : public OpRewritePattern<tosa::ArgMaxOp> {
        -: 2025:public:
        -: 2026:  using OpRewritePattern<tosa::ArgMaxOp>::OpRewritePattern;
        -: 2027:
function _ZNK12_GLOBAL__N_115ArgMaxConverter15matchAndRewriteEN4mlir4tosa8ArgMaxOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 2028:  LogicalResult matchAndRewrite(tosa::ArgMaxOp argmaxOp,
        -: 2029:                                PatternRewriter &rewriter) const final {
    #####: 2030:    auto loc = argmaxOp.getLoc();
call    0 never executed
    #####: 2031:    Value input = argmaxOp.getInput();
call    0 never executed
    #####: 2032:    auto inputTy = input.getType().cast<ShapedType>();
call    0 never executed
    #####: 2033:    auto resultTy = argmaxOp.getOutput().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####: 2034:    auto inElementTy = inputTy.getElementType();
call    0 never executed
    #####: 2035:    auto outElementTy = resultTy.getElementType();
call    0 never executed
    #####: 2036:    int axis = argmaxOp.getAxis();
call    0 never executed
    #####: 2037:    auto resultMaxTy = RankedTensorType::get(resultTy.getShape(), inElementTy);
call    0 never executed
call    1 never executed
        -: 2038:
    #####: 2039:    if (!outElementTy.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2040:      return rewriter.notifyMatchFailure(
        -: 2041:          argmaxOp,
    #####: 2042:          "tosa.arg_max to linalg.* requires integer-like result type");
call    0 never executed
        -: 2043:
    #####: 2044:    SmallVector<Value> dynDims;
    #####: 2045:    for (int i = 0; i < inputTy.getRank(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2046:      if (inputTy.isDynamicDim(i) && i != axis) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2047:        dynDims.push_back(rewriter.create<tensor::DimOp>(loc, input, i));
call    0 never executed
call    1 never executed
        -: 2048:      }
        -: 2049:    }
        -: 2050:
        -: 2051:    // First fill the output buffer for the index.
    #####: 2052:    auto emptyTensorIdx = rewriter
    #####: 2053:                              .create<tensor::EmptyOp>(loc, resultTy.getShape(),
    #####: 2054:                                                       outElementTy, dynDims)
call    0 never executed
call    1 never executed
    #####: 2055:                              .getResult();
call    0 never executed
    #####: 2056:    auto fillValueIdx = rewriter.create<arith::ConstantOp>(
    #####: 2057:        loc, rewriter.getIntegerAttr(outElementTy, 0));
call    0 never executed
call    1 never executed
    #####: 2058:    auto filledTensorIdx =
        -: 2059:        rewriter
    #####: 2060:            .create<linalg::FillOp>(loc, ValueRange{fillValueIdx},
call    0 never executed
    #####: 2061:                                    ValueRange{emptyTensorIdx})
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2062:            .result();
call    0 never executed
        -: 2063:
        -: 2064:    // Second fill the output buffer for the running max.
    #####: 2065:    auto emptyTensorMax = rewriter
    #####: 2066:                              .create<tensor::EmptyOp>(loc, resultTy.getShape(),
call    0 never executed
    #####: 2067:                                                       inElementTy, dynDims)
call    0 never executed
    #####: 2068:                              .getResult();
call    0 never executed
    #####: 2069:    auto fillValueMaxAttr =
    #####: 2070:        createInitialValueForReduceOp(argmaxOp, inElementTy, rewriter);
call    0 never executed
        -: 2071:
    #####: 2072:    if (!fillValueMaxAttr)
branch  0 never executed
branch  1 never executed
    #####: 2073:      return rewriter.notifyMatchFailure(
    #####: 2074:          argmaxOp, "unsupported tosa.argmax element type");
call    0 never executed
        -: 2075:
    #####: 2076:    auto fillValueMax =
    #####: 2077:        rewriter.create<arith::ConstantOp>(loc, fillValueMaxAttr);
call    0 never executed
    #####: 2078:    auto filledTensorMax =
        -: 2079:        rewriter
    #####: 2080:            .create<linalg::FillOp>(loc, ValueRange{fillValueMax},
call    0 never executed
    #####: 2081:                                    ValueRange{emptyTensorMax})
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2082:            .result();
call    0 never executed
        -: 2083:
        -: 2084:    // We need to reduce along the arg-max axis, with parallel operations along
        -: 2085:    // the rest.
    #####: 2086:    SmallVector<StringRef, 4> iteratorTypes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2087:    iteratorTypes.resize(inputTy.getRank(), getParallelIteratorTypeName());
call    0 never executed
call    1 never executed
    #####: 2088:    iteratorTypes[axis] = getReductionIteratorTypeName();
branch  0 never executed
branch  1 never executed
        -: 2089:
    #####: 2090:    SmallVector<AffineExpr, 2> srcExprs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2091:    SmallVector<AffineExpr, 2> dstExprs;
branch  0 never executed
branch  1 never executed
    #####: 2092:    for (int i = 0, rank = inputTy.getRank(); i != rank; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2093:      srcExprs.push_back(mlir::getAffineDimExpr(i, rewriter.getContext()));
call    0 never executed
call    1 never executed
    #####: 2094:      if (axis != i)
branch  0 never executed
branch  1 never executed
    #####: 2095:        dstExprs.push_back(mlir::getAffineDimExpr(i, rewriter.getContext()));
call    0 never executed
call    1 never executed
        -: 2096:    }
        -: 2097:
    #####: 2098:    bool didEncounterError = false;
    #####: 2099:    auto maps = AffineMap::inferFromExprList({srcExprs, dstExprs, dstExprs});
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2100:    auto linalgOp = rewriter.create<linalg::GenericOp>(
    #####: 2101:        loc, ArrayRef<Type>({resultTy, resultMaxTy}), input,
    #####: 2102:        ValueRange({filledTensorIdx, filledTensorMax}), maps, iteratorTypes,
call    0 never executed
function _ZZNK12_GLOBAL__N_115ArgMaxConverter15matchAndRewriteEN4mlir4tosa8ArgMaxOpERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES7_S8_S9_ called 0 returned 0% blocks executed 0%
    #####: 2103:        [&](OpBuilder &nestedBuilder, Location nestedLoc,
        -: 2104:            ValueRange blockArgs) {
    #####: 2105:          auto newValue = blockArgs[0];
call    0 never executed
    #####: 2106:          auto oldIndex = blockArgs[1];
call    0 never executed
    #####: 2107:          auto oldValue = blockArgs[2];
call    0 never executed
        -: 2108:
    #####: 2109:          Value newIndex = rewriter.create<arith::IndexCastOp>(
    #####: 2110:              nestedLoc, oldIndex.getType(),
call    0 never executed
    #####: 2111:              rewriter.create<linalg::IndexOp>(loc, axis));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2112:
    #####: 2113:          Value predicate;
    #####: 2114:          if (inElementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2115:            predicate = rewriter.create<arith::CmpFOp>(
    #####: 2116:                nestedLoc, arith::CmpFPredicate::OGT, newValue, oldValue);
call    0 never executed
    #####: 2117:          } else if (inElementTy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2118:            predicate = rewriter.create<arith::CmpIOp>(
    #####: 2119:                nestedLoc, arith::CmpIPredicate::sgt, newValue, oldValue);
call    0 never executed
        -: 2120:          } else {
    #####: 2121:            didEncounterError = true;
    #####: 2122:            return;
        -: 2123:          }
        -: 2124:
    #####: 2125:          auto resultMax = rewriter.create<arith::SelectOp>(
    #####: 2126:              nestedLoc, predicate, newValue, oldValue);
call    0 never executed
    #####: 2127:          auto resultIndex = rewriter.create<arith::SelectOp>(
    #####: 2128:              nestedLoc, predicate, newIndex, oldIndex);
call    0 never executed
    #####: 2129:          nestedBuilder.create<linalg::YieldOp>(
call    0 never executed
    #####: 2130:              nestedLoc, ValueRange({resultIndex, resultMax}));
call    0 never executed
call    1 never executed
    #####: 2131:        });
call    0 never executed
call    1 never executed
        -: 2132:
    #####: 2133:    if (didEncounterError)
branch  0 never executed
branch  1 never executed
    #####: 2134:      return rewriter.notifyMatchFailure(
    #####: 2135:          argmaxOp, "unsupported tosa.argmax element type");
call    0 never executed
        -: 2136:
    #####: 2137:    rewriter.replaceOp(argmaxOp, linalgOp.getResult(0));
call    0 never executed
call    1 never executed
    #####: 2138:    return success();
branch  0 never executed
branch  1 never executed
        -: 2139:  }
        -: 2140:};
        -: 2141:
        -: 2142:class GatherConverter : public OpConversionPattern<tosa::GatherOp> {
        -: 2143:public:
        -: 2144:  using OpConversionPattern<tosa::GatherOp>::OpConversionPattern;
        -: 2145:  LogicalResult
function _ZNK12_GLOBAL__N_115GatherConverter15matchAndRewriteEN4mlir4tosa8GatherOpENS2_15GatherOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 2146:  matchAndRewrite(tosa::GatherOp op, OpAdaptor adaptor,
        -: 2147:                  ConversionPatternRewriter &rewriter) const final {
    #####: 2148:    auto input = adaptor.getOperands()[0];
call    0 never executed
call    1 never executed
    #####: 2149:    auto indices = adaptor.getOperands()[1];
call    0 never executed
call    1 never executed
        -: 2150:
    #####: 2151:    auto resultTy = op.getType().cast<ShapedType>();
call    0 never executed
        -: 2152:
    #####: 2153:    auto dynamicDimsOr = checkHasDynamicBatchDims(
    #####: 2154:        rewriter, op, {input, indices, op.getOutput()});
call    0 never executed
call    1 never executed
    #####: 2155:    if (!dynamicDimsOr.has_value())
branch  0 never executed
branch  1 never executed
    #####: 2156:      return failure();
    #####: 2157:    SmallVector<Value> dynamicDims = dynamicDimsOr.value();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2158:
    #####: 2159:    auto resultElementTy = resultTy.getElementType();
call    0 never executed
        -: 2160:
    #####: 2161:    auto loc = op.getLoc();
call    0 never executed
        -: 2162:
    #####: 2163:    auto emptyTensor =
        -: 2164:        rewriter
    #####: 2165:            .create<tensor::EmptyOp>(loc, resultTy.getShape(), resultElementTy,
    #####: 2166:                                     dynamicDims)
call    0 never executed
call    1 never executed
    #####: 2167:            .getResult();
call    0 never executed
        -: 2168:
    #####: 2169:    SmallVector<AffineMap, 2> affineMaps = {
        -: 2170:        AffineMap::get(
    #####: 2171:            /*dimCount=*/resultTy.getRank(), /*symbolCount=*/0,
call    0 never executed
    #####: 2172:            {rewriter.getAffineDimExpr(0), rewriter.getAffineDimExpr(1)},
call    0 never executed
call    1 never executed
    #####: 2173:            rewriter.getContext()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2174:        rewriter.getMultiDimIdentityMap(resultTy.getRank())};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2175:
    #####: 2176:    auto genericOp = rewriter.create<linalg::GenericOp>(
    #####: 2177:        loc, ArrayRef<Type>({resultTy}), ValueRange{indices},
call    0 never executed
    #####: 2178:        ValueRange{emptyTensor}, affineMaps,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2179:        getNParallelLoopsAttrs(resultTy.getRank()),
call    0 never executed
function _ZZNK12_GLOBAL__N_115GatherConverter15matchAndRewriteEN4mlir4tosa8GatherOpENS2_15GatherOpAdaptorERNS1_25ConversionPatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES8_S9_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 2180:        [&](OpBuilder &b, Location loc, ValueRange args) {
    #####: 2181:          auto indexValue = args[0];
call    0 never executed
    #####: 2182:          auto index0 = rewriter.create<linalg::IndexOp>(loc, 0);
call    0 never executed
    #####: 2183:          Value index1 = rewriter.create<arith::IndexCastOp>(
    #####: 2184:              loc, rewriter.getIndexType(), indexValue);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2185:          auto index2 = rewriter.create<linalg::IndexOp>(loc, 2);
call    0 never executed
    #####: 2186:          Value extract = rewriter.create<tensor::ExtractOp>(
    #####: 2187:              loc, input, ValueRange{index0, index1, index2});
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2188:          rewriter.create<linalg::YieldOp>(loc, extract);
call    0 never executed
    #####: 2189:        });
call    0 never executed
call    1 never executed
    #####: 2190:    rewriter.replaceOp(op, genericOp.getResult(0));
call    0 never executed
call    1 never executed
    #####: 2191:    return success();
branch  0 never executed
branch  1 never executed
        -: 2192:  }
        -: 2193:};
        -: 2194:
        -: 2195:// Lowerings the TableOp to a series of gathers and numerica operations. This
        -: 2196:// includes interpolation between the high/low values. For the I8 varient, this
        -: 2197:// simplifies to a single gather operation.
        -: 2198:class TableConverter : public OpRewritePattern<tosa::TableOp> {
        -: 2199:public:
        -: 2200:  using OpRewritePattern<tosa::TableOp>::OpRewritePattern;
        -: 2201:
function _ZNK12_GLOBAL__N_114TableConverter15matchAndRewriteEN4mlir4tosa7TableOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 2202:  LogicalResult matchAndRewrite(tosa::TableOp op,
        -: 2203:                                PatternRewriter &rewriter) const final {
    #####: 2204:    auto loc = op.getLoc();
call    0 never executed
    #####: 2205:    Value input = op.getInput();
call    0 never executed
    #####: 2206:    Value table = op.getTable();
call    0 never executed
    #####: 2207:    auto inputTy = input.getType().cast<ShapedType>();
call    0 never executed
    #####: 2208:    auto tableTy = table.getType().cast<ShapedType>();
call    0 never executed
    #####: 2209:    auto resultTy = op.getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
        -: 2210:
    #####: 2211:    auto inputElementTy = inputTy.getElementType();
call    0 never executed
    #####: 2212:    auto tableElementTy = tableTy.getElementType();
call    0 never executed
    #####: 2213:    auto resultElementTy = resultTy.getElementType();
call    0 never executed
        -: 2214:
    #####: 2215:    SmallVector<Value> dynDims;
    #####: 2216:    for (int i = 0; i < resultTy.getRank(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2217:      if (inputTy.isDynamicDim(i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2218:        dynDims.push_back(
call    0 never executed
    #####: 2219:            rewriter.create<tensor::DimOp>(loc, op.getOperand(0), i));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2220:      }
        -: 2221:    }
        -: 2222:
    #####: 2223:    auto emptyTensor = rewriter
    #####: 2224:                           .create<tensor::EmptyOp>(loc, resultTy.getShape(),
    #####: 2225:                                                    resultElementTy, dynDims)
call    0 never executed
call    1 never executed
    #####: 2226:                           .getResult();
call    0 never executed
        -: 2227:
    #####: 2228:    SmallVector<AffineMap, 2> affineMaps = {
    #####: 2229:        rewriter.getMultiDimIdentityMap(resultTy.getRank()),
call    0 never executed
call    1 never executed
    #####: 2230:        rewriter.getMultiDimIdentityMap(resultTy.getRank())};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2231:
    #####: 2232:    auto genericOp = rewriter.create<linalg::GenericOp>(
    #####: 2233:        loc, resultTy, ValueRange({input}), ValueRange{emptyTensor}, affineMaps,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2234:        getNParallelLoopsAttrs(resultTy.getRank()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2235:    rewriter.replaceOp(op, genericOp.getResult(0));
call    0 never executed
call    1 never executed
        -: 2236:
    #####: 2237:    {
    #####: 2238:      OpBuilder::InsertionGuard regionGuard(rewriter);
call    0 never executed
    #####: 2239:      Block *block = rewriter.createBlock(
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2240:          &genericOp.getRegion(), genericOp.getRegion().end(),
call    0 never executed
call    1 never executed
        -: 2241:          TypeRange({inputElementTy, resultElementTy}), {loc, loc});
        -: 2242:
    #####: 2243:      auto inputValue = block->getArgument(0);
call    0 never executed
    #####: 2244:      rewriter.setInsertionPointToStart(block);
call    0 never executed
    #####: 2245:      if (inputElementTy.isInteger(8) && tableElementTy.isInteger(8) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2246:          resultElementTy.isInteger(8)) {
call    0 never executed
    #####: 2247:        Value index = rewriter.create<arith::IndexCastOp>(
    #####: 2248:            loc, rewriter.getIndexType(), inputValue);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2249:        Value offset = rewriter.create<arith::ConstantIndexOp>(loc, 128);
call    0 never executed
call    1 never executed
    #####: 2250:        index = rewriter.create<arith::AddIOp>(loc, rewriter.getIndexType(),
call    0 never executed
    #####: 2251:                                               index, offset);
call    0 never executed
call    1 never executed
    #####: 2252:        Value extract =
    #####: 2253:            rewriter.create<tensor::ExtractOp>(loc, table, ValueRange{index});
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2254:        rewriter.create<linalg::YieldOp>(loc, extract);
call    0 never executed
    #####: 2255:        return success();
        -: 2256:      }
        -: 2257:
    #####: 2258:      if (inputElementTy.isInteger(16) && tableElementTy.isInteger(16) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2259:          resultElementTy.isInteger(32)) {
call    0 never executed
    #####: 2260:        Value extend = rewriter.create<arith::ExtSIOp>(
    #####: 2261:            loc, rewriter.getI32Type(), inputValue);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2262:
    #####: 2263:        auto offset = rewriter.create<arith::ConstantOp>(
    #####: 2264:            loc, rewriter.getI32IntegerAttr(32768));
call    0 never executed
call    1 never executed
    #####: 2265:        auto seven = rewriter.create<arith::ConstantOp>(
    #####: 2266:            loc, rewriter.getI32IntegerAttr(7));
call    0 never executed
call    1 never executed
    #####: 2267:        auto one = rewriter.create<arith::ConstantOp>(
    #####: 2268:            loc, rewriter.getI32IntegerAttr(1));
call    0 never executed
call    1 never executed
    #####: 2269:        auto b1111111 = rewriter.create<arith::ConstantOp>(
    #####: 2270:            loc, rewriter.getI32IntegerAttr(127));
call    0 never executed
call    1 never executed
        -: 2271:
        -: 2272:        // Compute the index and fractional part from the input value:
        -: 2273:        // value = value + 32768
        -: 2274:        // index = value >> 7;
        -: 2275:        // fraction = 0x01111111 & value
    #####: 2276:        auto extendAdd = rewriter.create<arith::AddIOp>(loc, extend, offset);
call    0 never executed
    #####: 2277:        Value index = rewriter.create<arith::ShRUIOp>(loc, extendAdd, seven);
call    0 never executed
call    1 never executed
    #####: 2278:        Value fraction =
    #####: 2279:            rewriter.create<arith::AndIOp>(loc, extendAdd, b1111111);
call    0 never executed
call    1 never executed
        -: 2280:
        -: 2281:        // Extract the base and next values from the table.
        -: 2282:        // base = (int32_t) table[index];
        -: 2283:        // next = (int32_t) table[index + 1];
    #####: 2284:        Value indexPlusOne = rewriter.create<arith::AddIOp>(loc, index, one);
call    0 never executed
call    1 never executed
        -: 2285:
    #####: 2286:        index = rewriter.create<arith::IndexCastOp>(
    #####: 2287:            loc, rewriter.getIndexType(), index);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2288:        indexPlusOne = rewriter.create<arith::IndexCastOp>(
    #####: 2289:            loc, rewriter.getIndexType(), indexPlusOne);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2290:
    #####: 2291:        Value base =
    #####: 2292:            rewriter.create<tensor::ExtractOp>(loc, table, ValueRange{index});
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2293:        Value next = rewriter.create<tensor::ExtractOp>(
    #####: 2294:            loc, table, ValueRange{indexPlusOne});
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2295:
    #####: 2296:        base =
    #####: 2297:            rewriter.create<arith::ExtSIOp>(loc, rewriter.getI32Type(), base);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2298:        next =
    #####: 2299:            rewriter.create<arith::ExtSIOp>(loc, rewriter.getI32Type(), next);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2300:
        -: 2301:        // Use the fractional part to interpolate between the input values:
        -: 2302:        // result = (base << 7) + (next - base) * fraction
    #####: 2303:        Value baseScaled = rewriter.create<arith::ShLIOp>(loc, base, seven);
call    0 never executed
call    1 never executed
    #####: 2304:        Value diff = rewriter.create<arith::SubIOp>(loc, next, base);
call    0 never executed
call    1 never executed
    #####: 2305:        Value diffScaled = rewriter.create<arith::MulIOp>(loc, diff, fraction);
call    0 never executed
call    1 never executed
    #####: 2306:        Value result =
    #####: 2307:            rewriter.create<arith::AddIOp>(loc, baseScaled, diffScaled);
call    0 never executed
call    1 never executed
        -: 2308:
    #####: 2309:        rewriter.create<linalg::YieldOp>(loc, result);
call    0 never executed
        -: 2310:
    #####: 2311:        return success();
        -: 2312:      }
        -: 2313:    }
        -: 2314:
    #####: 2315:    return rewriter.notifyMatchFailure(
    #####: 2316:        op, "unable to create body for tosa.table op");
call    0 never executed
        -: 2317:  }
        -: 2318:};
        -: 2319:
        -: 2320:} // namespace
        -: 2321:
function _ZN4mlir4tosa38populateTosaToLinalgConversionPatternsEPNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####: 2322:void mlir::tosa::populateTosaToLinalgConversionPatterns(
        -: 2323:    RewritePatternSet *patterns) {
        -: 2324:
        -: 2325:  // We have multiple resize coverters to handle degenerate cases.
    #####: 2326:  patterns->add<GenericResizeConverter>(patterns->getContext(),
call    0 never executed
    #####: 2327:                                        /*benefit=*/100);
call    0 never executed
    #####: 2328:  patterns->add<BroadcastResizeConverter>(patterns->getContext(),
call    0 never executed
    #####: 2329:                                          /*benefit=*/200);
call    0 never executed
        -: 2330:
    #####: 2331:  patterns->add<
        -: 2332:      // clang-format off
        -: 2333:      PointwiseConverter<tosa::AddOp>,
        -: 2334:      PointwiseConverter<tosa::SubOp>,
        -: 2335:      PointwiseConverter<tosa::MulOp>,
        -: 2336:      PointwiseConverter<tosa::DivOp>,
        -: 2337:      PointwiseConverter<tosa::NegateOp>,
        -: 2338:      PointwiseConverter<tosa::PowOp>,
        -: 2339:      PointwiseConverter<tosa::ReciprocalOp>,
        -: 2340:      PointwiseConverter<tosa::RsqrtOp>,
        -: 2341:      PointwiseConverter<tosa::LogOp>,
        -: 2342:      PointwiseConverter<tosa::ExpOp>,
        -: 2343:      PointwiseConverter<tosa::AbsOp>,
        -: 2344:      PointwiseConverter<tosa::TanhOp>,
        -: 2345:      PointwiseConverter<tosa::BitwiseAndOp>,
        -: 2346:      PointwiseConverter<tosa::BitwiseOrOp>,
        -: 2347:      PointwiseConverter<tosa::BitwiseNotOp>,
        -: 2348:      PointwiseConverter<tosa::BitwiseXorOp>,
        -: 2349:      PointwiseConverter<tosa::LogicalAndOp>,
        -: 2350:      PointwiseConverter<tosa::LogicalNotOp>,
        -: 2351:      PointwiseConverter<tosa::LogicalOrOp>,
        -: 2352:      PointwiseConverter<tosa::LogicalXorOp>,
        -: 2353:      PointwiseConverter<tosa::CastOp>,
        -: 2354:      PointwiseConverter<tosa::LogicalLeftShiftOp>,
        -: 2355:      PointwiseConverter<tosa::LogicalRightShiftOp>,
        -: 2356:      PointwiseConverter<tosa::ArithmeticRightShiftOp>,
        -: 2357:      PointwiseConverter<tosa::ClzOp>,
        -: 2358:      PointwiseConverter<tosa::SelectOp>,
        -: 2359:      PointwiseConverter<tosa::GreaterOp>,
        -: 2360:      PointwiseConverter<tosa::GreaterEqualOp>,
        -: 2361:      PointwiseConverter<tosa::EqualOp>,
        -: 2362:      PointwiseConverter<tosa::MaximumOp>,
        -: 2363:      PointwiseConverter<tosa::MinimumOp>,
        -: 2364:      PointwiseConverter<tosa::CeilOp>,
        -: 2365:      PointwiseConverter<tosa::FloorOp>,
        -: 2366:      PointwiseConverter<tosa::ClampOp>,
        -: 2367:      PointwiseConverter<tosa::SigmoidOp>,
        -: 2368:      IdentityNConverter<tosa::IdentityOp>,
        -: 2369:      ReduceConverter<tosa::ReduceAllOp>,
        -: 2370:      ReduceConverter<tosa::ReduceAnyOp>,
        -: 2371:      ReduceConverter<tosa::ReduceMinOp>,
        -: 2372:      ReduceConverter<tosa::ReduceMaxOp>,
        -: 2373:      ReduceConverter<tosa::ReduceSumOp>,
        -: 2374:      ReduceConverter<tosa::ReduceProdOp>,
        -: 2375:      ArgMaxConverter,
        -: 2376:      ConcatConverter,
        -: 2377:      GatherConverter,
        -: 2378:      PadConverter,
        -: 2379:      ReshapeConverterCollapse,
        -: 2380:      ReshapeConverterExpand,
        -: 2381:      ReshapeConverterCollapseExpand,
        -: 2382:      RescaleConverter,
        -: 2383:      ReverseConverter,
        -: 2384:      TableConverter,
        -: 2385:      TileConverter,
    #####: 2386:      TransposeConverter>(patterns->getContext());
call    0 never executed
        -: 2387:  // clang-format on
    #####: 2388:}
