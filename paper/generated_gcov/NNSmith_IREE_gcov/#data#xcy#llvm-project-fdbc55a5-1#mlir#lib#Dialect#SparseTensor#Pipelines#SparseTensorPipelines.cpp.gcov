        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/SparseTensor/Pipelines/SparseTensorPipelines.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcda
        -:    0:Runs:325552
        -:    1://===- SparseTensorPipelines.cpp - Pipelines for sparse tensor code -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SparseTensor/Pipelines/Passes.h"
        -:   10:
        -:   11:#include "mlir/Conversion/Passes.h"
        -:   12:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   14:#include "mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h"
        -:   15:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   16:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   17:#include "mlir/Dialect/Linalg/Passes.h"
        -:   18:#include "mlir/Dialect/SparseTensor/IR/SparseTensor.h"
        -:   19:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h"
        -:   20:#include "mlir/Pass/PassManager.h"
        -:   21:#include "mlir/Transforms/Passes.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::sparse_tensor;
        -:   25:
        -:   26:/// Return configuration options for One-Shot Bufferize.
        -:   27:static bufferization::OneShotBufferizationOptions
     2102:   28:getBufferizationOptions(bool analysisOnly) {
     2102:   29:  using namespace bufferization;
     1051:   30:  OneShotBufferizationOptions options;
call    0 returned 100%
     2102:   31:  options.bufferizeFunctionBoundaries = true;
        -:   32:  // TODO(springerm): To spot memory leaks more easily, returning dense allocs
        -:   33:  // should be disallowed.
     2102:   34:  options.allowReturnAllocs = true;
     2102:   35:  options.functionBoundaryTypeConversion =
        -:   36:      BufferizationOptions::LayoutMapOption::IdentityLayoutMap;
function _ZZL23getBufferizationOptionsbENKUlN4mlir5ValueEjRKNS_13bufferization20BufferizationOptionsEE_clES0_jS4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   37:  options.unknownTypeConverterFn = [](Value value, unsigned memorySpace,
        -:   38:                                      const BufferizationOptions &options) {
    #####:   39:    return getMemRefTypeWithStaticIdentityLayout(
    #####:   40:        value.getType().cast<TensorType>(), memorySpace);
call    0 never executed
call    1 never executed
     2102:   41:  };
call    0 returned 100%
call    1 returned 100%
     1051:   42:  if (analysisOnly) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:    options.testAnalysisOnly = true;
    #####:   44:    options.printConflicts = true;
        -:   45:  }
     2102:   46:  return options;
        -:   47:}
        -:   48:
        -:   49://===----------------------------------------------------------------------===//
        -:   50:// Pipeline implementation.
        -:   51://===----------------------------------------------------------------------===//
        -:   52:
function _ZN4mlir13sparse_tensor19buildSparseCompilerERNS_13OpPassManagerERKNS0_21SparseCompilerOptionsE called 1051 returned 100% blocks executed 57%
     1051:   53:void mlir::sparse_tensor::buildSparseCompiler(
        -:   54:    OpPassManager &pm, const SparseCompilerOptions &options) {
     1051:   55:  pm.addNestedPass<func::FuncOp>(createLinalgGeneralizationPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1051:   56:  pm.addPass(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     2102:   57:      bufferization::createTensorCopyInsertionPass(getBufferizationOptions(
call    0 returned 100%
call    1 returned 100%
     1051:   58:          /*analysisOnly=*/options.testBufferizationAnalysisOnly)));
call    0 returned 100%
     1051:   59:  if (options.testBufferizationAnalysisOnly)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   60:    return;
     1051:   61:  pm.addPass(createSparseTensorRewritePass(options.enableRuntimeLibrary));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   62:  pm.addPass(createSparsificationPass(options.sparsificationOptions()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   63:  if (options.enableRuntimeLibrary)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2102:   64:    pm.addPass(createSparseTensorConversionPass(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2102:   65:        options.sparseTensorConversionOptions()));
call    0 returned 100%
        -:   66:  else
    #####:   67:    pm.addPass(createSparseTensorCodegenPass());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
     1051:   68:  pm.addPass(createSparseBufferRewritePass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2102:   69:  pm.addPass(createDenseBufferizationPass(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
     1051:   70:      getBufferizationOptions(/*analysisOnly=*/false)));
call    0 returned 100%
     1051:   71:  pm.addNestedPass<func::FuncOp>(createCanonicalizerPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   72:  pm.addNestedPass<func::FuncOp>(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     1051:   73:      mlir::bufferization::createFinalizingBufferizePass());
call    0 returned 100%
call    1 returned 100%
        -:   74:  // TODO(springerm): Add sparse support to the BufferDeallocation pass and add
        -:   75:  // it to this pipeline.
     1051:   76:  pm.addNestedPass<func::FuncOp>(createConvertLinalgToLoopsPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1051:   77:  pm.addNestedPass<func::FuncOp>(createConvertVectorToSCFPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   78:  pm.addNestedPass<func::FuncOp>(createConvertSCFToCFPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   79:  pm.addPass(createLowerAffinePass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   80:  pm.addPass(createConvertVectorToLLVMPass(options.lowerVectorToLLVMOptions()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1051:   81:  pm.addPass(createMemRefToLLVMConversionPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   82:  pm.addNestedPass<func::FuncOp>(createConvertComplexToStandardPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   83:  pm.addNestedPass<mlir::func::FuncOp>(mlir::arith::createArithExpandOpsPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   84:  pm.addNestedPass<func::FuncOp>(createConvertMathToLLVMPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   85:  pm.addPass(createConvertMathToLibmPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1051:   86:  pm.addPass(createConvertComplexToLibmPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1051:   87:  pm.addPass(createConvertComplexToLLVMPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1051:   88:  pm.addPass(createConvertFuncToLLVMPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1051:   89:  pm.addPass(createReconcileUnrealizedCastsPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   90:}
        -:   91:
        -:   92://===----------------------------------------------------------------------===//
        -:   93:// Pipeline registration.
        -:   94://===----------------------------------------------------------------------===//
        -:   95:
function _ZN4mlir13sparse_tensor29registerSparseTensorPipelinesEv called 325552 returned 100% blocks executed 100%
   325552:   96:void mlir::sparse_tensor::registerSparseTensorPipelines() {
   325552:   97:  PassPipelineRegistration<SparseCompilerOptions>(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   98:      "sparse-compiler",
        -:   99:      "The standard pipeline for taking sparsity-agnostic IR using the"
        -:  100:      " sparse-tensor type, and lowering it to LLVM IR with concrete"
        -:  101:      " representations and algorithms for sparse tensors.",
        -:  102:      buildSparseCompiler);
   325552:  103:}
