        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/LinalgToLLVM/LinalgToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/LinalgToLLVM/CMakeFiles/obj.MLIRLinalgToLLVM.dir/LinalgToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/LinalgToLLVM/CMakeFiles/obj.MLIRLinalgToLLVM.dir/LinalgToLLVM.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- LinalgToLLVM.cpp - conversion from Linalg to LLVM dialect ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/LinalgToLLVM/LinalgToLLVM.h"
        -:   10:
        -:   11:#include "mlir/Conversion/AffineToStandard/AffineToStandard.h"
        -:   12:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   13:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   14:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   15:#include "mlir/Conversion/MemRefToLLVM/MemRefToLLVM.h"
        -:   16:#include "mlir/Conversion/SCFToControlFlow/SCFToControlFlow.h"
        -:   17:#include "mlir/Conversion/VectorToLLVM/ConvertVectorToLLVM.h"
        -:   18:#include "mlir/Conversion/VectorToSCF/VectorToSCF.h"
        -:   19:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   20:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   21:#include "mlir/Dialect/Linalg/Passes.h"
        -:   22:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   23:#include "mlir/IR/AffineExpr.h"
        -:   24:#include "mlir/IR/AffineMap.h"
        -:   25:#include "mlir/IR/Attributes.h"
        -:   26:#include "mlir/IR/Builders.h"
        -:   27:#include "mlir/IR/BuiltinOps.h"
        -:   28:#include "mlir/IR/BuiltinTypes.h"
        -:   29:#include "mlir/IR/MLIRContext.h"
        -:   30:#include "mlir/IR/Operation.h"
        -:   31:#include "mlir/IR/PatternMatch.h"
        -:   32:#include "mlir/IR/Types.h"
        -:   33:#include "mlir/Support/LogicalResult.h"
        -:   34:#include "mlir/Transforms/DialectConversion.h"
        -:   35:#include "mlir/Transforms/Passes.h"
        -:   36:#include "llvm/ADT/SetVector.h"
        -:   37:#include "llvm/IR/DerivedTypes.h"
        -:   38:#include "llvm/IR/Module.h"
        -:   39:#include "llvm/IR/Type.h"
        -:   40:#include "llvm/Support/Allocator.h"
        -:   41:#include "llvm/Support/ErrorHandling.h"
        -:   42:
        -:   43:namespace mlir {
        -:   44:#define GEN_PASS_DEF_CONVERTLINALGTOLLVM
        -:   45:#include "mlir/Conversion/Passes.h.inc"
        -:   46:} // namespace mlir
        -:   47:
        -:   48:using namespace mlir;
        -:   49:using namespace mlir::LLVM;
        -:   50:using namespace mlir::linalg;
        -:   51:
        -:   52:template <typename T>
        -:   53:static Type getPtrToElementType(T containerType, LLVMTypeConverter &lowering) {
        -:   54:  return LLVMPointerType::get(
        -:   55:      lowering.convertType(containerType.getElementType()));
        -:   56:}
        -:   57:
        -:   58:namespace {
        -:   59:// YieldOp produces and LLVM::ReturnOp.
        -:   60:class YieldOpConversion : public ConvertOpToLLVMPattern<linalg::YieldOp> {
        -:   61:public:
      845:   62:  using ConvertOpToLLVMPattern<linalg::YieldOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   63:
        -:   64:  LogicalResult
function _ZNK12_GLOBAL__N_117YieldOpConversion15matchAndRewriteEN4mlir6linalg7YieldOpENS2_14YieldOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   65:  matchAndRewrite(linalg::YieldOp op, OpAdaptor adaptor,
        -:   66:                  ConversionPatternRewriter &rewriter) const override {
    #####:   67:    rewriter.replaceOpWithNewOp<LLVM::ReturnOp>(op, adaptor.getOperands());
call    0 never executed
call    1 never executed
    #####:   68:    return success();
        -:   69:  }
        -:   70:};
        -:   71:} // namespace
        -:   72:
        -:   73:/// Populate the given list with patterns that convert from Linalg to LLVM.
function _ZN4mlir38populateLinalgToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     845*:   74:void mlir::populateLinalgToLLVMConversionPatterns(LLVMTypeConverter &converter,
        -:   75:                                                  RewritePatternSet &patterns) {
    #####:   76:  patterns.add<YieldOpConversion>(converter);
call    0 never executed
    #####:   77:}
        -:   78:
        -:   79:namespace {
  326621*:   80:struct ConvertLinalgToLLVMPass
call    0 never executed
call    1 returned 100%
        -:   81:    : public impl::ConvertLinalgToLLVMBase<ConvertLinalgToLLVMPass> {
        -:   82:  void runOnOperation() override;
        -:   83:};
        -:   84:} // namespace
        -:   85:
function _ZN12_GLOBAL__N_123ConvertLinalgToLLVMPass14runOnOperationEv called 845 returned 100% blocks executed 95%
      845:   86:void ConvertLinalgToLLVMPass::runOnOperation() {
      845:   87:  auto module = getOperation();
call    0 returned 100%
        -:   88:
        -:   89:  // Convert to the LLVM IR dialect using the converter defined above.
      845:   90:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     1690:   91:  LLVMTypeConverter converter(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      845:   92:  populateLinalgToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
      845:   93:  populateMemRefToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
        -:   94:
     1690:   95:  LLVMConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      845:   96:  target.addLegalOp<ModuleOp>();
call    0 returned 100%
      845:   97:  if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   98:    signalPassFailure();
call    0 never executed
      845:   99:}
        -:  100:
function _ZN4mlir29createConvertLinalgToLLVMPassEv called 326621 returned 100% blocks executed 100%
   326621:  101:std::unique_ptr<OperationPass<ModuleOp>> mlir::createConvertLinalgToLLVMPass() {
   326621:  102:  return std::make_unique<ConvertLinalgToLLVMPass>();
call    0 returned 100%
        -:  103:}
