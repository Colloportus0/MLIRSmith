        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Vector/Transforms/VectorMultiDimReductionTransforms.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/VectorMultiDimReductionTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/VectorMultiDimReductionTransforms.cpp.gcda
        -:    0:Runs:325594
        -:    1://===- VectorMultiDimReductionTransforms.cpp - Multi-Reduction Transforms -===//
        -:    2://
        -:    3:/// Part of the LLVM Project, under the Apache License v2.0 with LLVM
        -:    4:/// Exceptions. See https://llvm.org/LICENSE.txt for license information.
        -:    5:/// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:/// This file implements target-independent rewrites of MultiDimReductionOp.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Vector/Transforms/VectorRewritePatterns.h"
        -:   15:#include "mlir/Dialect/Vector/Utils/VectorUtils.h"
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:#include "mlir/IR/ImplicitLocOpBuilder.h"
        -:   18:#include "mlir/IR/TypeUtilities.h"
        -:   19:
        -:   20:#define DEBUG_TYPE "vector-multi-reduction"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:/// This file implements the following transformations as composable atomic
        -:   25:/// patterns.
        -:   26:
        -:   27:/// Converts vector.multi_reduction into inner-most/outer-most reduction form
        -:   28:/// by using vector.transpose
        -:   29:class InnerOuterDimReductionConversion
        -:   30:    : public OpRewritePattern<vector::MultiDimReductionOp> {
        -:   31:public:
        -:   32:  using OpRewritePattern::OpRewritePattern;
        -:   33:
function _ZN32InnerOuterDimReductionConversionC2EPN4mlir11MLIRContextENS0_6vector28VectorMultiReductionLoweringENS0_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:   34:  explicit InnerOuterDimReductionConversion(
        -:   35:      MLIRContext *context, vector::VectorMultiReductionLowering options,
        -:   36:      PatternBenefit benefit = 1)
    #####:   37:      : mlir::OpRewritePattern<vector::MultiDimReductionOp>(context, benefit),
        -:   38:        useInnerDimsForReduction(
    #####:   39:            options == vector::VectorMultiReductionLowering::InnerReduction) {}
call    0 never executed
        -:   40:
function _ZNK32InnerOuterDimReductionConversion15matchAndRewriteEN4mlir6vector19MultiDimReductionOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   41:  LogicalResult matchAndRewrite(vector::MultiDimReductionOp multiReductionOp,
        -:   42:                                PatternRewriter &rewriter) const override {
    #####:   43:    auto src = multiReductionOp.getSource();
call    0 never executed
    #####:   44:    auto loc = multiReductionOp.getLoc();
call    0 never executed
    #####:   45:    auto srcRank = multiReductionOp.getSourceVectorType().getRank();
call    0 never executed
call    1 never executed
        -:   46:
        -:   47:    // Separate reduction and parallel dims
    #####:   48:    auto reductionDimsRange =
    #####:   49:        multiReductionOp.getReductionDims().getAsValueRange<IntegerAttr>();
call    0 never executed
call    1 never executed
    #####:   50:    auto reductionDims = llvm::to_vector<4>(llvm::map_range(
    #####:   51:        reductionDimsRange, [](const APInt &a) { return a.getZExtValue(); }));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   52:    llvm::SmallDenseSet<int64_t> reductionDimsSet(reductionDims.begin(),
call    0 never executed
    #####:   53:                                                  reductionDims.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    int64_t reductionSize = reductionDims.size();
    #####:   55:    SmallVector<int64_t, 4> parallelDims;
call    0 never executed
    #####:   56:    for (int64_t i = 0; i < srcRank; ++i)
branch  0 never executed
branch  1 never executed
    #####:   57:      if (!reductionDimsSet.contains(i))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:        parallelDims.push_back(i);
call    0 never executed
        -:   59:
        -:   60:    // Add transpose only if inner-most/outer-most dimensions are not parallel
        -:   61:    // and there are parallel dims.
    #####:   62:    if (parallelDims.empty())
branch  0 never executed
branch  1 never executed
    #####:   63:      return failure();
    #####:   64:    if (useInnerDimsForReduction &&
branch  0 never executed
branch  1 never executed
    #####:   65:        (parallelDims ==
    #####:   66:         llvm::to_vector<4>(llvm::seq<int64_t>(0, parallelDims.size()))))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   67:      return failure();
        -:   68:
    #####:   69:    if (!useInnerDimsForReduction &&
branch  0 never executed
branch  1 never executed
    #####:   70:        (parallelDims !=
branch  0 never executed
branch  1 never executed
    #####:   71:         llvm::to_vector<4>(llvm::seq<int64_t>(0, parallelDims.size()))))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   72:      return failure();
        -:   73:
    #####:   74:    SmallVector<int64_t, 4> indices;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   75:    if (useInnerDimsForReduction) {
branch  0 never executed
branch  1 never executed
    #####:   76:      indices.append(parallelDims.begin(), parallelDims.end());
call    0 never executed
    #####:   77:      indices.append(reductionDims.begin(), reductionDims.end());
call    0 never executed
        -:   78:    } else {
    #####:   79:      indices.append(reductionDims.begin(), reductionDims.end());
call    0 never executed
    #####:   80:      indices.append(parallelDims.begin(), parallelDims.end());
call    0 never executed
        -:   81:    }
    #####:   82:    auto transposeOp = rewriter.create<vector::TransposeOp>(loc, src, indices);
call    0 never executed
    #####:   83:    SmallVector<bool> reductionMask(srcRank, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   84:    for (int i = 0; i < reductionSize; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:      if (useInnerDimsForReduction)
branch  0 never executed
branch  1 never executed
    #####:   86:        reductionMask[srcRank - i - 1] = true;
branch  0 never executed
branch  1 never executed
        -:   87:      else
    #####:   88:        reductionMask[i] = true;
branch  0 never executed
branch  1 never executed
        -:   89:    }
    #####:   90:    rewriter.replaceOpWithNewOp<vector::MultiDimReductionOp>(
    #####:   91:        multiReductionOp, transposeOp.getResult(), multiReductionOp.getAcc(),
call    0 never executed
    #####:   92:        reductionMask, multiReductionOp.getKind());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   93:    return success();
branch  0 never executed
branch  1 never executed
        -:   94:  }
        -:   95:
        -:   96:private:
        -:   97:  const bool useInnerDimsForReduction;
        -:   98:};
        -:   99:
        -:  100:/// Reduces the rank of vector.multi_reduction nd -> 2d given all reduction
        -:  101:/// dimensions are either inner most or outer most.
        -:  102:class ReduceMultiDimReductionRank
        -:  103:    : public OpRewritePattern<vector::MultiDimReductionOp> {
        -:  104:public:
        -:  105:  using OpRewritePattern::OpRewritePattern;
        -:  106:
function _ZN27ReduceMultiDimReductionRankC2EPN4mlir11MLIRContextENS0_6vector28VectorMultiReductionLoweringENS0_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  107:  explicit ReduceMultiDimReductionRank(
        -:  108:      MLIRContext *context, vector::VectorMultiReductionLowering options,
        -:  109:      PatternBenefit benefit = 1)
    #####:  110:      : mlir::OpRewritePattern<vector::MultiDimReductionOp>(context, benefit),
        -:  111:        useInnerDimsForReduction(
    #####:  112:            options == vector::VectorMultiReductionLowering::InnerReduction) {}
call    0 never executed
        -:  113:
function _ZNK27ReduceMultiDimReductionRank15matchAndRewriteEN4mlir6vector19MultiDimReductionOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  114:  LogicalResult matchAndRewrite(vector::MultiDimReductionOp multiReductionOp,
        -:  115:                                PatternRewriter &rewriter) const override {
    #####:  116:    auto srcRank = multiReductionOp.getSourceVectorType().getRank();
call    0 never executed
call    1 never executed
    #####:  117:    auto srcShape = multiReductionOp.getSourceVectorType().getShape();
call    0 never executed
call    1 never executed
    #####:  118:    auto loc = multiReductionOp.getLoc();
branch  0 never executed
branch  1 never executed
        -:  119:
        -:  120:    // If rank less than 2, nothing to do.
    #####:  121:    if (srcRank < 2)
branch  0 never executed
branch  1 never executed
    #####:  122:      return failure();
        -:  123:
        -:  124:    // If already rank-2 ["parallel", "reduce"] or ["reduce", "parallel"] bail.
    #####:  125:    SmallVector<bool> reductionMask = multiReductionOp.getReductionMask();
call    0 never executed
    #####:  126:    if (srcRank == 2 && reductionMask.front() != reductionMask.back())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  127:      return failure();
        -:  128:
        -:  129:    // 1. Separate reduction and parallel dims.
    #####:  130:    SmallVector<int64_t, 4> parallelDims, parallelShapes;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  131:    SmallVector<int64_t, 4> reductionDims, reductionShapes;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  132:    for (const auto &it : llvm::enumerate(reductionMask)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  133:      int64_t i = it.index();
branch  0 never executed
branch  1 never executed
    #####:  134:      bool isReduction = it.value();
branch  0 never executed
branch  1 never executed
    #####:  135:      if (isReduction) {
branch  0 never executed
branch  1 never executed
    #####:  136:        reductionDims.push_back(i);
call    0 never executed
    #####:  137:        reductionShapes.push_back(srcShape[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  138:      } else {
    #####:  139:        parallelDims.push_back(i);
call    0 never executed
    #####:  140:        parallelShapes.push_back(srcShape[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  141:      }
        -:  142:    }
        -:  143:
        -:  144:    // 2. Compute flattened parallel and reduction sizes.
    #####:  145:    int flattenedParallelDim = 0;
    #####:  146:    int flattenedReductionDim = 0;
    #####:  147:    if (!parallelShapes.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  148:      flattenedParallelDim = 1;
    #####:  149:      for (auto d : parallelShapes)
branch  0 never executed
branch  1 never executed
    #####:  150:        flattenedParallelDim *= d;
        -:  151:    }
    #####:  152:    if (!reductionShapes.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  153:      flattenedReductionDim = 1;
    #####:  154:      for (auto d : reductionShapes)
branch  0 never executed
branch  1 never executed
    #####:  155:        flattenedReductionDim *= d;
        -:  156:    }
        -:  157:    // We must at least have some parallel or some reduction.
    #####:  158:    assert((flattenedParallelDim || flattenedReductionDim) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  159:           "expected at least one parallel or reduction dim");
        -:  160:
        -:  161:    // 3. Fail if reduction/parallel dims are not contiguous.
        -:  162:    // Check parallelDims are exactly [0 .. size).
    #####:  163:    int64_t counter = 0;
    #####:  164:    if (useInnerDimsForReduction &&
branch  0 never executed
branch  1 never executed
    #####:  165:        llvm::any_of(parallelDims, [&](int64_t i) { return i != counter++; }))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####:  166:      return failure();
        -:  167:    // Check parallelDims are exactly {reductionDims.size()} + [0 .. size).
    #####:  168:    counter = reductionDims.size();
branch  0 never executed
branch  1 never executed
    #####:  169:    if (!useInnerDimsForReduction &&
branch  0 never executed
branch  1 never executed
    #####:  170:        llvm::any_of(parallelDims, [&](int64_t i) { return i != counter++; }))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####:  171:      return failure();
        -:  172:
        -:  173:    // 4. Shape cast to collapse consecutive parallel (resp. reduction dim) into
        -:  174:    // a single parallel (resp. reduction) dim.
    #####:  175:    SmallVector<bool, 2> mask;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  176:    SmallVector<int64_t, 2> vectorShape;
branch  0 never executed
branch  1 never executed
    #####:  177:    if (flattenedParallelDim) {
branch  0 never executed
branch  1 never executed
    #####:  178:      mask.push_back(false);
call    0 never executed
    #####:  179:      vectorShape.push_back(flattenedParallelDim);
call    0 never executed
        -:  180:    }
    #####:  181:    if (flattenedReductionDim) {
branch  0 never executed
branch  1 never executed
    #####:  182:      mask.push_back(true);
call    0 never executed
    #####:  183:      vectorShape.push_back(flattenedReductionDim);
call    0 never executed
        -:  184:    }
    #####:  185:    if (!useInnerDimsForReduction && vectorShape.size() == 2) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  186:      std::swap(mask.front(), mask.back());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  187:      std::swap(vectorShape.front(), vectorShape.back());
call    0 never executed
        -:  188:    }
    #####:  189:    auto castedType = VectorType::get(
    #####:  190:        vectorShape, multiReductionOp.getSourceVectorType().getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  191:    Value cast = rewriter.create<vector::ShapeCastOp>(
    #####:  192:        loc, castedType, multiReductionOp.getSource());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  193:    Value acc = multiReductionOp.getAcc();
call    0 never executed
    #####:  194:    if (flattenedParallelDim) {
branch  0 never executed
branch  1 never executed
    #####:  195:      auto accType = VectorType::get(
    #####:  196:          {flattenedParallelDim},
    #####:  197:          multiReductionOp.getSourceVectorType().getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  198:      acc = rewriter.create<vector::ShapeCastOp>(loc, accType, acc);
call    0 never executed
        -:  199:    }
        -:  200:    // 5. Creates the flattened form of vector.multi_reduction with inner/outer
        -:  201:    // most dim as reduction.
    #####:  202:    auto newOp = rewriter.create<vector::MultiDimReductionOp>(
    #####:  203:        loc, cast, acc, mask, multiReductionOp.getKind());
call    0 never executed
call    1 never executed
        -:  204:
        -:  205:    // 6. If there are no parallel shapes, the result is a scalar.
        -:  206:    // TODO: support 0-d vectors when available.
    #####:  207:    if (parallelShapes.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  208:      rewriter.replaceOp(multiReductionOp, newOp.getDest());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  209:      return success();
        -:  210:    }
        -:  211:
        -:  212:    // 7. Creates shape cast for the output n-D -> 2-D
    #####:  213:    VectorType outputCastedType = VectorType::get(
        -:  214:        parallelShapes,
    #####:  215:        multiReductionOp.getSourceVectorType().getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  216:    rewriter.replaceOpWithNewOp<vector::ShapeCastOp>(
    #####:  217:        multiReductionOp, outputCastedType, newOp.getDest());
call    0 never executed
call    1 never executed
    #####:  218:    return success();
branch  0 never executed
branch  1 never executed
        -:  219:  }
        -:  220:
        -:  221:private:
        -:  222:  const bool useInnerDimsForReduction;
        -:  223:};
        -:  224:
        -:  225:/// Unrolls vector.multi_reduction with outermost reductions
        -:  226:/// and combines results
        -:  227:struct TwoDimMultiReductionToElementWise
        -:  228:    : public OpRewritePattern<vector::MultiDimReductionOp> {
        -:  229:  using OpRewritePattern::OpRewritePattern;
        -:  230:
function _ZNK33TwoDimMultiReductionToElementWise15matchAndRewriteEN4mlir6vector19MultiDimReductionOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  231:  LogicalResult matchAndRewrite(vector::MultiDimReductionOp multiReductionOp,
        -:  232:                                PatternRewriter &rewriter) const override {
    #####:  233:    auto srcRank = multiReductionOp.getSourceVectorType().getRank();
call    0 never executed
call    1 never executed
        -:  234:    // Rank-2 ["parallel", "reduce"] or bail.
    #####:  235:    if (srcRank != 2)
branch  0 never executed
branch  1 never executed
    #####:  236:      return failure();
        -:  237:
    #####:  238:    if (multiReductionOp.isReducedDim(1) || !multiReductionOp.isReducedDim(0))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  239:      return failure();
        -:  240:
    #####:  241:    auto loc = multiReductionOp.getLoc();
call    0 never executed
    #####:  242:    ArrayRef<int64_t> srcShape =
    #####:  243:        multiReductionOp.getSourceVectorType().getShape();
call    0 never executed
call    1 never executed
        -:  244:
    #####:  245:    Type elementType = getElementTypeOrSelf(multiReductionOp.getDestType());
call    0 never executed
call    1 never executed
    #####:  246:    if (!elementType.isIntOrIndexOrFloat())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  247:      return failure();
        -:  248:
    #####:  249:    Value result = multiReductionOp.getAcc();
call    0 never executed
    #####:  250:    for (int64_t i = 0; i < srcShape[0]; i++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  251:      auto operand = rewriter.create<vector::ExtractOp>(
    #####:  252:          loc, multiReductionOp.getSource(), i);
call    0 never executed
call    1 never executed
    #####:  253:      result = makeArithReduction(rewriter, loc, multiReductionOp.getKind(),
call    0 never executed
    #####:  254:                                  operand, result);
call    0 never executed
call    1 never executed
        -:  255:    }
        -:  256:
    #####:  257:    rewriter.replaceOp(multiReductionOp, result);
call    0 never executed
call    1 never executed
    #####:  258:    return success();
        -:  259:  }
        -:  260:};
        -:  261:
        -:  262:/// Converts 2d vector.multi_reduction with inner most reduction dimension into
        -:  263:/// a sequence of vector.reduction ops.
        -:  264:struct TwoDimMultiReductionToReduction
        -:  265:    : public OpRewritePattern<vector::MultiDimReductionOp> {
        -:  266:  using OpRewritePattern::OpRewritePattern;
        -:  267:
function _ZNK31TwoDimMultiReductionToReduction15matchAndRewriteEN4mlir6vector19MultiDimReductionOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  268:  LogicalResult matchAndRewrite(vector::MultiDimReductionOp multiReductionOp,
        -:  269:                                PatternRewriter &rewriter) const override {
    #####:  270:    auto srcRank = multiReductionOp.getSourceVectorType().getRank();
call    0 never executed
call    1 never executed
    #####:  271:    if (srcRank != 2)
branch  0 never executed
branch  1 never executed
    #####:  272:      return failure();
        -:  273:
    #####:  274:    if (multiReductionOp.isReducedDim(0) || !multiReductionOp.isReducedDim(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  275:      return failure();
        -:  276:
    #####:  277:    auto loc = multiReductionOp.getLoc();
call    0 never executed
    #####:  278:    Value result = rewriter.create<arith::ConstantOp>(
    #####:  279:        loc, multiReductionOp.getDestType(),
    #####:  280:        rewriter.getZeroAttr(multiReductionOp.getDestType()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  281:    int outerDim = multiReductionOp.getSourceVectorType().getShape()[0];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  282:
    #####:  283:    for (int i = 0; i < outerDim; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  284:      auto v = rewriter.create<vector::ExtractOp>(
    #####:  285:          loc, multiReductionOp.getSource(), ArrayRef<int64_t>{i});
call    0 never executed
call    1 never executed
    #####:  286:      auto acc = rewriter.create<vector::ExtractOp>(
    #####:  287:          loc, multiReductionOp.getAcc(), ArrayRef<int64_t>{i});
call    0 never executed
call    1 never executed
    #####:  288:      auto reducedValue = rewriter.create<vector::ReductionOp>(
    #####:  289:          loc, multiReductionOp.getKind(), v, acc);
call    0 never executed
call    1 never executed
    #####:  290:      result = rewriter.create<vector::InsertElementOp>(
        -:  291:          loc, reducedValue, result,
    #####:  292:          rewriter.create<arith::ConstantIndexOp>(loc, i));
call    0 never executed
call    1 never executed
        -:  293:    }
    #####:  294:    rewriter.replaceOp(multiReductionOp, result);
call    0 never executed
call    1 never executed
    #####:  295:    return success();
        -:  296:  }
        -:  297:};
        -:  298:
        -:  299:/// Converts 1d vector.multi_reduction with a single reduction dimension to a 2d
        -:  300:/// form with both a single parallel and reduction dimension.
        -:  301:/// This is achieved with a simple vector.shape_cast that inserts a leading 1.
        -:  302:/// The case with a single parallel dimension is a noop and folds away
        -:  303:/// separately.
        -:  304:struct OneDimMultiReductionToTwoDim
        -:  305:    : public OpRewritePattern<vector::MultiDimReductionOp> {
        -:  306:  using OpRewritePattern::OpRewritePattern;
        -:  307:
function _ZNK28OneDimMultiReductionToTwoDim15matchAndRewriteEN4mlir6vector19MultiDimReductionOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  308:  LogicalResult matchAndRewrite(vector::MultiDimReductionOp multiReductionOp,
        -:  309:                                PatternRewriter &rewriter) const override {
    #####:  310:    auto srcRank = multiReductionOp.getSourceVectorType().getRank();
call    0 never executed
call    1 never executed
        -:  311:    // Rank-1 or bail.
    #####:  312:    if (srcRank != 1)
branch  0 never executed
branch  1 never executed
    #####:  313:      return failure();
        -:  314:
    #####:  315:    auto loc = multiReductionOp.getLoc();
call    0 never executed
    #####:  316:    auto srcVectorType = multiReductionOp.getSourceVectorType();
call    0 never executed
    #####:  317:    auto srcShape = srcVectorType.getShape();
call    0 never executed
    #####:  318:    auto castedType = VectorType::get(ArrayRef<int64_t>{1, srcShape.back()},
    #####:  319:                                      srcVectorType.getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  320:    auto accType =
    #####:  321:        VectorType::get(ArrayRef<int64_t>{1}, srcVectorType.getElementType());
call    0 never executed
call    1 never executed
    #####:  322:    assert(!multiReductionOp.getDestType().isa<VectorType>() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  323:           "multi_reduction with a single dimension expects a scalar result");
        -:  324:
        -:  325:    // If the unique dim is reduced and we insert a parallel in front, we need a
        -:  326:    // {false, true} mask.
    #####:  327:    SmallVector<bool, 2> mask{false, true};
call    0 never executed
        -:  328:
        -:  329:    /// vector.extract(vector.multi_reduce(vector.shape_cast(v, 1xk)), 0)
    #####:  330:    Value cast = rewriter.create<vector::ShapeCastOp>(
    #####:  331:        loc, castedType, multiReductionOp.getSource());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  332:    Value castAcc = rewriter.create<vector::BroadcastOp>(
    #####:  333:        loc, accType, multiReductionOp.getAcc());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  334:    Value reduced = rewriter.create<vector::MultiDimReductionOp>(
    #####:  335:        loc, cast, castAcc, mask, multiReductionOp.getKind());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  336:    rewriter.replaceOpWithNewOp<vector::ExtractOp>(multiReductionOp, reduced,
    #####:  337:                                                   ArrayRef<int64_t>{0});
call    0 never executed
    #####:  338:    return success();
branch  0 never executed
branch  1 never executed
        -:  339:  }
        -:  340:};
        -:  341:
function _ZN4mlir6vector44populateVectorMultiReductionLoweringPatternsERNS_17RewritePatternSetENS0_28VectorMultiReductionLoweringENS_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  342:void mlir::vector::populateVectorMultiReductionLoweringPatterns(
        -:  343:    RewritePatternSet &patterns, VectorMultiReductionLowering options,
        -:  344:    PatternBenefit benefit) {
    #####:  345:  patterns.add<InnerOuterDimReductionConversion, ReduceMultiDimReductionRank>(
    #####:  346:      patterns.getContext(), options, benefit);
call    0 never executed
    #####:  347:  patterns.add<OneDimMultiReductionToTwoDim>(patterns.getContext(), benefit);
call    0 never executed
    #####:  348:  if (options == VectorMultiReductionLowering ::InnerReduction)
branch  0 never executed
branch  1 never executed
    #####:  349:    patterns.add<TwoDimMultiReductionToReduction>(patterns.getContext(),
call    0 never executed
    #####:  350:                                                  benefit);
call    0 never executed
        -:  351:  else
    #####:  352:    patterns.add<TwoDimMultiReductionToElementWise>(patterns.getContext(),
call    0 never executed
    #####:  353:                                                    benefit);
call    0 never executed
    #####:  354:}
