        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Interfaces/DestinationStyleOpInterface.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRDestinationStyleOpInterface.dir/DestinationStyleOpInterface.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRDestinationStyleOpInterface.dir/DestinationStyleOpInterface.cpp.gcda
        -:    0:Runs:325595
        -:    1://===- DestinationStyleOpInterface.cpp -- Destination style ops -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/DestinationStyleOpInterface.h"
        -:   10:
        -:   11:using namespace mlir;
        -:   12:
        -:   13:namespace mlir {
        -:   14:#include "mlir/Interfaces/DestinationStyleOpInterface.cpp.inc"
        -:   15:} // namespace mlir
        -:   16:
function _ZN4mlir15OpOperandVectorcvN4llvm11SmallVectorINS_5ValueELj6EEEEv called 0 returned 0% blocks executed 0%
    #####:   17:OpOperandVector::operator SmallVector<Value>() {
    #####:   18:  SmallVector<Value> result;
branch  0 never executed
branch  1 never executed
    #####:   19:  result.reserve(this->size());
branch  0 never executed
branch  1 never executed
    #####:   20:  llvm::transform(*this, std::back_inserter(result),
call    0 never executed
    #####:   21:                  [](OpOperand *opOperand) { return opOperand->get(); });
call    0 never executed
    #####:   22:  return result;
        -:   23:}
        -:   24:
function _ZN4mlir6detail33verifyDestinationStyleOpInterfaceEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   25:LogicalResult detail::verifyDestinationStyleOpInterface(Operation *op) {
    #####:   26:  DestinationStyleOpInterface dstStyleOp =
    #####:   27:      cast<DestinationStyleOpInterface>(op);
call    0 never executed
        -:   28:
    #####:   29:  SmallVector<OpOperand *> outputBufferOperands, outputTensorOperands;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   30:  for (OpOperand *operand : dstStyleOp.getDpsInitOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   31:    Type type = operand->get().getType();
call    0 never executed
    #####:   32:    if (type.isa<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   33:      outputBufferOperands.push_back(operand);
call    0 never executed
    #####:   34:    } else if (type.isa<RankedTensorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:      outputTensorOperands.push_back(operand);
call    0 never executed
        -:   36:    } else {
    #####:   37:      return op->emitOpError("expected that operand #")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   38:             << operand->getOperandNumber()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   39:             << " is a ranked tensor or a ranked memref";
call    0 never executed
        -:   40:    }
        -:   41:  }
        -:   42:
        -:   43:  // Expect at least one output operand.
    #####:   44:  int64_t numInputs = dstStyleOp.getNumDpsInputs();
call    0 never executed
    #####:   45:  int64_t numInits = dstStyleOp.getNumDpsInits();
call    0 never executed
    #####:   46:  if (numInits == 0)
branch  0 never executed
branch  1 never executed
    #####:   47:    return op->emitOpError("expected at least one output operand");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   48:  if (failed(OpTrait::impl::verifyNOperands(op, numInputs + numInits)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:    return failure();
        -:   50:  // Verify the number of results matches the number of output tensors.
    #####:   51:  if (op->getNumResults() != outputTensorOperands.size())
branch  0 never executed
branch  1 never executed
    #####:   52:    return op->emitOpError("expected the number of results (")
call    0 never executed
call    1 never executed
    #####:   53:           << op->getNumResults()
call    0 never executed
call    1 never executed
    #####:   54:           << ") to be equal to the number of output tensors ("
    #####:   55:           << outputTensorOperands.size() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   56:
        -:   57:  // Simplifying assumption: either full tensor or full buffer mode.
        -:   58:  // This allows simpler verification of output operands vs result types
        -:   59:  // without premature tracking of which operand is what in mixed-mode.
        -:   60:  // TODO: relax when mixed-mode needs to pass verification.
    #####:   61:  if (!outputBufferOperands.empty() && !outputTensorOperands.empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   62:    return op->emitOpError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:        "expected output operands to all have tensor type or "
    #####:   64:        "all have buffer type");
call    0 never executed
        -:   65:
    #####:   66:  for (OpOperand *opOperand : outputTensorOperands) {
branch  0 never executed
branch  1 never executed
    #####:   67:    OpResult result = dstStyleOp.getTiedOpResult(opOperand);
call    0 never executed
    #####:   68:    if (result.getType() != opOperand->get().getType())
branch  0 never executed
branch  1 never executed
    #####:   69:      return op->emitOpError("expected type of operand #")
call    0 never executed
call    1 never executed
    #####:   70:             << opOperand->getOperandNumber() << " ("
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   71:             << opOperand->get().getType() << ")"
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:             << " to match type of corresponding result (" << result.getType()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   73:             << ")";
call    0 never executed
        -:   74:  }
    #####:   75:  return success();
branch  0 never executed
branch  1 never executed
        -:   76:}
