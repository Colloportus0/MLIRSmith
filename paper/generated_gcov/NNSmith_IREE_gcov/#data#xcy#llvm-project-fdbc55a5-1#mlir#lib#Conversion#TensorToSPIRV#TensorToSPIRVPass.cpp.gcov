        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/TensorToSPIRV/TensorToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TensorToSPIRV/CMakeFiles/obj.MLIRTensorToSPIRV.dir/TensorToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TensorToSPIRV/CMakeFiles/obj.MLIRTensorToSPIRV.dir/TensorToSPIRVPass.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TensorToSPIRVPass.cpp - Tensor to SPIR-V Passes ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert Tensor dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TensorToSPIRV/TensorToSPIRVPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/ArithToSPIRV/ArithToSPIRV.h"
        -:   16:#include "mlir/Conversion/FuncToSPIRV/FuncToSPIRV.h"
        -:   17:#include "mlir/Conversion/TensorToSPIRV/TensorToSPIRV.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   19:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_CONVERTTENSORTOSPIRV
        -:   23:#include "mlir/Conversion/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28:namespace {
        -:   29:/// A pass converting MLIR Tensor operations into the SPIR-V dialect.
  326615*:   30:class ConvertTensorToSPIRVPass
call    0 never executed
call    1 returned 100%
        -:   31:    : public impl::ConvertTensorToSPIRVBase<ConvertTensorToSPIRVPass> {
function _ZN12_GLOBAL__N_124ConvertTensorToSPIRVPass14runOnOperationEv called 854 returned 100% blocks executed 97%
      854:   32:  void runOnOperation() override {
      854:   33:    MLIRContext *context = &getContext();
call    0 returned 100%
      854:   34:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   35:
      854:   36:    auto targetAttr = spirv::lookupTargetEnvOrDefault(op);
call    0 returned 100%
      854:   37:    std::unique_ptr<ConversionTarget> target =
     1543:   38:        SPIRVConversionTarget::get(targetAttr);
call    0 returned 100%
call    1 returned 100%
        -:   39:
      854:   40:    SPIRVConversionOptions options;
      854:   41:    options.emulateNon32BitScalarTypes = this->emulateNon32BitScalarTypes;
call    0 returned 100%
     1543:   42:    SPIRVTypeConverter typeConverter(targetAttr, options);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   43:
     1543:   44:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      854:   45:    arith::populateArithToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
      854:   46:    populateFuncToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
      854:   47:    populateTensorToSPIRVPatterns(typeConverter, /*byteCountThreshold=*/64,
call    0 returned 100%
        -:   48:                                  patterns);
      854:   49:    populateBuiltinFuncToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
        -:   50:
      854:   51:    if (failed(applyPartialConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
      330:   52:      return signalPassFailure();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   53:  }
        -:   54:};
        -:   55:} // namespace
        -:   56:
function _ZN4mlir30createConvertTensorToSPIRVPassEv called 326615 returned 100% blocks executed 100%
   326615:   57:std::unique_ptr<OperationPass<>> mlir::createConvertTensorToSPIRVPass() {
   326615:   58:  return std::make_unique<ConvertTensorToSPIRVPass>();
call    0 returned 100%
        -:   59:}
