        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Quant/Utils/UniformSupport.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Quant/Utils/CMakeFiles/obj.MLIRQuantUtils.dir/UniformSupport.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Quant/Utils/CMakeFiles/obj.MLIRQuantUtils.dir/UniformSupport.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- UniformSupport.cpp - Support utilities for uniform quant -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Quant/UniformSupport.h"
        -:   10:#include "mlir/IR/BuiltinTypes.h"
        -:   11:#include <numeric>
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::quant;
        -:   15:
    #####:   16:static bool isQuantizablePrimitiveType(Type inputType) {
    #####:   17:  return inputType.isa<FloatType>();
        -:   18:}
        -:   19:
        -:   20:ExpressedToQuantizedConverter
function _ZN4mlir5quant29ExpressedToQuantizedConverter12forInputTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   21:ExpressedToQuantizedConverter::forInputType(Type inputType) {
    #####:   22:  if (inputType.isa<TensorType, VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   23:    Type elementType = inputType.cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
    #####:   24:    if (!isQuantizablePrimitiveType(elementType))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   25:      return ExpressedToQuantizedConverter{inputType, nullptr};
    #####:   26:    return ExpressedToQuantizedConverter{inputType, elementType};
        -:   27:  }
        -:   28:  // Supported primitive type (which just is the expressed type).
    #####:   29:  if (isQuantizablePrimitiveType(inputType))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   30:    return ExpressedToQuantizedConverter{inputType, inputType};
        -:   31:  // Unsupported.
    #####:   32:  return ExpressedToQuantizedConverter{inputType, nullptr};
        -:   33:}
        -:   34:
function _ZNK4mlir5quant29ExpressedToQuantizedConverter7convertENS0_13QuantizedTypeE called 0 returned 0% blocks executed 0%
    #####:   35:Type ExpressedToQuantizedConverter::convert(QuantizedType elementalType) const {
    #####:   36:  assert(expressedType && "convert() on unsupported conversion");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   37:  if (auto tensorType = inputType.dyn_cast<RankedTensorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   38:    return RankedTensorType::get(tensorType.getShape(), elementalType);
call    0 never executed
call    1 never executed
    #####:   39:  if (auto tensorType = inputType.dyn_cast<UnrankedTensorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    return UnrankedTensorType::get(elementalType);
call    0 never executed
    #####:   41:  if (auto vectorType = inputType.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:    return VectorType::get(vectorType.getShape(), elementalType);
call    0 never executed
call    1 never executed
        -:   43:
        -:   44:  // If the expressed types match, just use the new elemental type.
    #####:   45:  if (elementalType.getExpressedType() == expressedType)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:    return elementalType;
        -:   47:  // Unsupported.
    #####:   48:  return nullptr;
        -:   49:}
        -:   50:
        -:   51:ElementsAttr
function _ZN4mlir5quant37UniformQuantizedPerAxisValueConverter7convertENS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   52:UniformQuantizedPerAxisValueConverter::convert(Attribute realValue) {
    #####:   53:  if (auto attr = realValue.dyn_cast<DenseFPElementsAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    return convert(attr);
call    0 never executed
call    1 never executed
        -:   55:  }
        -:   56:  // TODO: handles sparse elements attribute
    #####:   57:  return nullptr;
        -:   58:}
        -:   59:
        -:   60:DenseElementsAttr
function _ZN4mlir5quant37UniformQuantizedPerAxisValueConverter7convertENS_19DenseFPElementsAttrE called 0 returned 0% blocks executed 0%
    #####:   61:UniformQuantizedPerAxisValueConverter::convert(DenseFPElementsAttr attr) {
        -:   62:  // Creates the converter for each chunk. Normally the size of the
        -:   63:  // quantization dim is 3, so we can cache all the converters.
    #####:   64:  ShapedType type = attr.getType();
call    0 never executed
    #####:   65:  size_t dimSize = type.getDimSize(quantizationDim);
call    0 never executed
    #####:   66:  if (dimSize != scales.size()) {
branch  0 never executed
branch  1 never executed
    #####:   67:    return {};
        -:   68:  }
    #####:   69:  SmallVector<UniformQuantizedValueConverter, 4> converters;
branch  0 never executed
branch  1 never executed
    #####:   70:  converters.reserve(dimSize);
branch  0 never executed
branch  1 never executed
    #####:   71:  for (int i = 0, e = dimSize; i != e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   72:    converters.push_back(getPerChunkConverter(i));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   73:  }
        -:   74:
        -:   75:  // Scan the elements of the dense elements attributes and quantize them by
        -:   76:  // using the right quantization parameters.
    #####:   77:  int64_t flattenIndex = 0;
    #####:   78:  auto shape = type.getShape();
call    0 never executed
    #####:   79:  int64_t chunkSize =
    #####:   80:      std::accumulate(std::next(shape.begin(), quantizationDim + 1),
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   81:                      shape.end(), 1, std::multiplies<int64_t>());
    #####:   82:  Type newElementType = IntegerType::get(attr.getContext(), storageBitWidth);
call    0 never executed
call    1 never executed
function _ZZN4mlir5quant37UniformQuantizedPerAxisValueConverter7convertENS_19DenseFPElementsAttrEENKUlRKN4llvm7APFloatEE_clES6_ called 0 returned 0% blocks executed 0%
    #####:   83:  return attr.mapValues(newElementType, [&](const APFloat &old) {
    #####:   84:    int chunkIndex = (flattenIndex++) / chunkSize;
    #####:   85:    return converters[chunkIndex % dimSize].quantizeFloatToInt(old);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   86:  });
call    0 never executed
call    1 never executed
        -:   87:}
