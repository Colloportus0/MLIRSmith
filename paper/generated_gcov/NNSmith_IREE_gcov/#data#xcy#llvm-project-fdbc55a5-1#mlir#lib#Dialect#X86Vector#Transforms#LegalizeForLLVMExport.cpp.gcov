        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/X86Vector/Transforms/LegalizeForLLVMExport.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/X86Vector/Transforms/CMakeFiles/obj.MLIRX86VectorTransforms.dir/LegalizeForLLVMExport.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/X86Vector/Transforms/CMakeFiles/obj.MLIRX86VectorTransforms.dir/LegalizeForLLVMExport.cpp.gcda
        -:    0:Runs:325587
        -:    1://===- LegalizeForLLVMExport.cpp - Prepare X86Vector for LLVM translation -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/X86Vector/Transforms.h"
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   12:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   15:#include "mlir/Dialect/X86Vector/X86VectorDialect.h"
        -:   16:#include "mlir/IR/BuiltinOps.h"
        -:   17:#include "mlir/IR/PatternMatch.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:using namespace mlir::x86vector;
        -:   21:
        -:   22:/// Extracts the "main" vector element type from the given X86Vector operation.
        -:   23:template <typename OpTy>
    #####:   24:static Type getSrcVectorElementType(OpTy op) {
    #####:   25:  return op.getSrc().getType().template cast<VectorType>().getElementType();
        -:   26:}
------------------
_Z23getSrcVectorElementTypeIN4mlir9x86vector14MaskRndScaleOpEENS0_4TypeET_:
function _Z23getSrcVectorElementTypeIN4mlir9x86vector14MaskRndScaleOpEENS0_4TypeET_ called 0 returned 0% blocks executed 0%
    #####:   24:static Type getSrcVectorElementType(OpTy op) {
    #####:   25:  return op.getSrc().getType().template cast<VectorType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   26:}
------------------
_Z23getSrcVectorElementTypeIN4mlir9x86vector12MaskScaleFOpEENS0_4TypeET_:
function _Z23getSrcVectorElementTypeIN4mlir9x86vector12MaskScaleFOpEENS0_4TypeET_ called 0 returned 0% blocks executed 0%
    #####:   24:static Type getSrcVectorElementType(OpTy op) {
    #####:   25:  return op.getSrc().getType().template cast<VectorType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   26:}
------------------
        -:   27:template <>
function _Z23getSrcVectorElementTypeIN4mlir9x86vector14Vp2IntersectOpEENS0_4TypeET_ called 0 returned 0% blocks executed 0%
    #####:   28:Type getSrcVectorElementType(Vp2IntersectOp op) {
    #####:   29:  return op.getA().getType().template cast<VectorType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   30:}
        -:   31:
        -:   32:namespace {
        -:   33:
        -:   34:/// Base conversion for AVX512 ops that can be lowered to one of the two
        -:   35:/// intrinsics based on the bitwidth of their "main" vector element type. This
        -:   36:/// relies on the to-LLVM-dialect conversion helpers to correctly pack the
        -:   37:/// results of multi-result intrinsic ops.
        -:   38:template <typename OpTy, typename Intr32OpTy, typename Intr64OpTy>
        -:   39:struct LowerToIntrinsic : public OpConversionPattern<OpTy> {
    #####:   40:  explicit LowerToIntrinsic(LLVMTypeConverter &converter)
    #####:   41:      : OpConversionPattern<OpTy>(converter, &converter.getContext()) {}
------------------
_ZN12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14Vp2IntersectOpENS2_19Vp2IntersectDIntrOpENS2_19Vp2IntersectQIntrOpEEC2ERNS1_17LLVMTypeConverterE:
function _ZN12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14Vp2IntersectOpENS2_19Vp2IntersectDIntrOpENS2_19Vp2IntersectQIntrOpEEC2ERNS1_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   40:  explicit LowerToIntrinsic(LLVMTypeConverter &converter)
    #####:   41:      : OpConversionPattern<OpTy>(converter, &converter.getContext()) {}
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector12MaskScaleFOpENS2_18MaskScaleFPSIntrOpENS2_18MaskScaleFPDIntrOpEEC2ERNS1_17LLVMTypeConverterE:
function _ZN12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector12MaskScaleFOpENS2_18MaskScaleFPSIntrOpENS2_18MaskScaleFPDIntrOpEEC2ERNS1_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   40:  explicit LowerToIntrinsic(LLVMTypeConverter &converter)
    #####:   41:      : OpConversionPattern<OpTy>(converter, &converter.getContext()) {}
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14MaskRndScaleOpENS2_20MaskRndScalePSIntrOpENS2_20MaskRndScalePDIntrOpEEC2ERNS1_17LLVMTypeConverterE:
function _ZN12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14MaskRndScaleOpENS2_20MaskRndScalePSIntrOpENS2_20MaskRndScalePDIntrOpEEC2ERNS1_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   40:  explicit LowerToIntrinsic(LLVMTypeConverter &converter)
    #####:   41:      : OpConversionPattern<OpTy>(converter, &converter.getContext()) {}
call    0 never executed
call    1 never executed
call    2 never executed
------------------
        -:   42:
    #####:   43:  LLVMTypeConverter &getTypeConverter() const {
        -:   44:    return *static_cast<LLVMTypeConverter *>(
    #####:   45:        OpConversionPattern<OpTy>::getTypeConverter());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   46:  }
        -:   47:
        -:   48:  LogicalResult
    #####:   49:  matchAndRewrite(OpTy op, typename OpTy::Adaptor adaptor,
        -:   50:                  ConversionPatternRewriter &rewriter) const override {
    #####:   51:    Type elementType = getSrcVectorElementType<OpTy>(op);
    #####:   52:    unsigned bitwidth = elementType.getIntOrFloatBitWidth();
    #####:   53:    if (bitwidth == 32)
    #####:   54:      return LLVM::detail::oneToOneRewrite(
    #####:   55:          op, Intr32OpTy::getOperationName(), adaptor.getOperands(),
        -:   56:          op->getAttrs(), getTypeConverter(), rewriter);
    #####:   57:    if (bitwidth == 64)
    #####:   58:      return LLVM::detail::oneToOneRewrite(
    #####:   59:          op, Intr64OpTy::getOperationName(), adaptor.getOperands(),
        -:   60:          op->getAttrs(), getTypeConverter(), rewriter);
        -:   61:    return rewriter.notifyMatchFailure(
    #####:   62:        op, "expected 'src' to be either f32 or f64");
        -:   63:  }
------------------
_ZNK12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14MaskRndScaleOpENS2_20MaskRndScalePSIntrOpENS2_20MaskRndScalePDIntrOpEE15matchAndRewriteES3_NS2_21MaskRndScaleOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14MaskRndScaleOpENS2_20MaskRndScalePSIntrOpENS2_20MaskRndScalePDIntrOpEE15matchAndRewriteES3_NS2_21MaskRndScaleOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   49:  matchAndRewrite(OpTy op, typename OpTy::Adaptor adaptor,
        -:   50:                  ConversionPatternRewriter &rewriter) const override {
    #####:   51:    Type elementType = getSrcVectorElementType<OpTy>(op);
call    0 never executed
    #####:   52:    unsigned bitwidth = elementType.getIntOrFloatBitWidth();
call    0 never executed
    #####:   53:    if (bitwidth == 32)
branch  0 never executed
branch  1 never executed
    #####:   54:      return LLVM::detail::oneToOneRewrite(
call    0 never executed
call    1 never executed
    #####:   55:          op, Intr32OpTy::getOperationName(), adaptor.getOperands(),
call    0 never executed
        -:   56:          op->getAttrs(), getTypeConverter(), rewriter);
    #####:   57:    if (bitwidth == 64)
branch  0 never executed
branch  1 never executed
    #####:   58:      return LLVM::detail::oneToOneRewrite(
call    0 never executed
call    1 never executed
    #####:   59:          op, Intr64OpTy::getOperationName(), adaptor.getOperands(),
call    0 never executed
        -:   60:          op->getAttrs(), getTypeConverter(), rewriter);
        -:   61:    return rewriter.notifyMatchFailure(
    #####:   62:        op, "expected 'src' to be either f32 or f64");
call    0 never executed
        -:   63:  }
------------------
_ZNK12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector12MaskScaleFOpENS2_18MaskScaleFPSIntrOpENS2_18MaskScaleFPDIntrOpEE15matchAndRewriteES3_NS2_19MaskScaleFOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector12MaskScaleFOpENS2_18MaskScaleFPSIntrOpENS2_18MaskScaleFPDIntrOpEE15matchAndRewriteES3_NS2_19MaskScaleFOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   49:  matchAndRewrite(OpTy op, typename OpTy::Adaptor adaptor,
        -:   50:                  ConversionPatternRewriter &rewriter) const override {
    #####:   51:    Type elementType = getSrcVectorElementType<OpTy>(op);
call    0 never executed
    #####:   52:    unsigned bitwidth = elementType.getIntOrFloatBitWidth();
call    0 never executed
    #####:   53:    if (bitwidth == 32)
branch  0 never executed
branch  1 never executed
    #####:   54:      return LLVM::detail::oneToOneRewrite(
call    0 never executed
call    1 never executed
    #####:   55:          op, Intr32OpTy::getOperationName(), adaptor.getOperands(),
call    0 never executed
        -:   56:          op->getAttrs(), getTypeConverter(), rewriter);
    #####:   57:    if (bitwidth == 64)
branch  0 never executed
branch  1 never executed
    #####:   58:      return LLVM::detail::oneToOneRewrite(
call    0 never executed
call    1 never executed
    #####:   59:          op, Intr64OpTy::getOperationName(), adaptor.getOperands(),
call    0 never executed
        -:   60:          op->getAttrs(), getTypeConverter(), rewriter);
        -:   61:    return rewriter.notifyMatchFailure(
    #####:   62:        op, "expected 'src' to be either f32 or f64");
call    0 never executed
        -:   63:  }
------------------
_ZNK12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14Vp2IntersectOpENS2_19Vp2IntersectDIntrOpENS2_19Vp2IntersectQIntrOpEE15matchAndRewriteES3_NS2_21Vp2IntersectOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116LowerToIntrinsicIN4mlir9x86vector14Vp2IntersectOpENS2_19Vp2IntersectDIntrOpENS2_19Vp2IntersectQIntrOpEE15matchAndRewriteES3_NS2_21Vp2IntersectOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   49:  matchAndRewrite(OpTy op, typename OpTy::Adaptor adaptor,
        -:   50:                  ConversionPatternRewriter &rewriter) const override {
    #####:   51:    Type elementType = getSrcVectorElementType<OpTy>(op);
call    0 never executed
    #####:   52:    unsigned bitwidth = elementType.getIntOrFloatBitWidth();
call    0 never executed
    #####:   53:    if (bitwidth == 32)
branch  0 never executed
branch  1 never executed
    #####:   54:      return LLVM::detail::oneToOneRewrite(
call    0 never executed
call    1 never executed
    #####:   55:          op, Intr32OpTy::getOperationName(), adaptor.getOperands(),
call    0 never executed
        -:   56:          op->getAttrs(), getTypeConverter(), rewriter);
    #####:   57:    if (bitwidth == 64)
branch  0 never executed
branch  1 never executed
    #####:   58:      return LLVM::detail::oneToOneRewrite(
call    0 never executed
call    1 never executed
    #####:   59:          op, Intr64OpTy::getOperationName(), adaptor.getOperands(),
call    0 never executed
        -:   60:          op->getAttrs(), getTypeConverter(), rewriter);
        -:   61:    return rewriter.notifyMatchFailure(
    #####:   62:        op, "expected 'src' to be either f32 or f64");
call    0 never executed
        -:   63:  }
------------------
        -:   64:};
        -:   65:
        -:   66:struct MaskCompressOpConversion
        -:   67:    : public ConvertOpToLLVMPattern<MaskCompressOp> {
    #####:   68:  using ConvertOpToLLVMPattern<MaskCompressOp>::ConvertOpToLLVMPattern;
call    0 never executed
        -:   69:
        -:   70:  LogicalResult
function _ZNK12_GLOBAL__N_124MaskCompressOpConversion15matchAndRewriteEN4mlir9x86vector14MaskCompressOpENS2_21MaskCompressOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   71:  matchAndRewrite(MaskCompressOp op, OpAdaptor adaptor,
        -:   72:                  ConversionPatternRewriter &rewriter) const override {
    #####:   73:    auto opType = adaptor.getA().getType();
call    0 never executed
call    1 never executed
        -:   74:
    #####:   75:    Value src;
    #####:   76:    if (op.getSrc()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   77:      src = adaptor.getSrc();
call    0 never executed
    #####:   78:    } else if (op.getConstantSrc()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:      src = rewriter.create<arith::ConstantOp>(op.getLoc(), opType,
    #####:   80:                                               op.getConstantSrcAttr());
call    0 never executed
call    1 never executed
        -:   81:    } else {
    #####:   82:      Attribute zeroAttr = rewriter.getZeroAttr(opType);
call    0 never executed
    #####:   83:      src = rewriter.create<arith::ConstantOp>(op->getLoc(), opType, zeroAttr);
call    0 never executed
        -:   84:    }
        -:   85:
    #####:   86:    rewriter.replaceOpWithNewOp<MaskCompressIntrOp>(op, opType, adaptor.getA(),
call    0 never executed
    #####:   87:                                                    src, adaptor.getK());
call    0 never executed
call    1 never executed
        -:   88:
    #####:   89:    return success();
        -:   90:  }
        -:   91:};
        -:   92:
        -:   93:struct RsqrtOpConversion : public ConvertOpToLLVMPattern<RsqrtOp> {
    #####:   94:  using ConvertOpToLLVMPattern<RsqrtOp>::ConvertOpToLLVMPattern;
call    0 never executed
        -:   95:
        -:   96:  LogicalResult
function _ZNK12_GLOBAL__N_117RsqrtOpConversion15matchAndRewriteEN4mlir9x86vector7RsqrtOpENS2_14RsqrtOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   97:  matchAndRewrite(RsqrtOp op, OpAdaptor adaptor,
        -:   98:                  ConversionPatternRewriter &rewriter) const override {
    #####:   99:    auto opType = adaptor.getA().getType();
call    0 never executed
call    1 never executed
    #####:  100:    rewriter.replaceOpWithNewOp<RsqrtIntrOp>(op, opType, adaptor.getA());
call    0 never executed
call    1 never executed
    #####:  101:    return success();
        -:  102:  }
        -:  103:};
        -:  104:
        -:  105:struct DotOpConversion : public ConvertOpToLLVMPattern<DotOp> {
    #####:  106:  using ConvertOpToLLVMPattern<DotOp>::ConvertOpToLLVMPattern;
call    0 never executed
        -:  107:
        -:  108:  LogicalResult
function _ZNK12_GLOBAL__N_115DotOpConversion15matchAndRewriteEN4mlir9x86vector5DotOpENS2_12DotOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  109:  matchAndRewrite(DotOp op, OpAdaptor adaptor,
        -:  110:                  ConversionPatternRewriter &rewriter) const override {
    #####:  111:    auto opType = adaptor.getA().getType();
call    0 never executed
call    1 never executed
    #####:  112:    Type llvmIntType = IntegerType::get(&getTypeConverter()->getContext(), 8);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  113:    // Dot product of all elements, broadcasted to all elements.
    #####:  114:    auto attr = rewriter.getI8IntegerAttr(static_cast<int8_t>(0xff));
call    0 never executed
    #####:  115:    Value scale =
    #####:  116:        rewriter.create<LLVM::ConstantOp>(op.getLoc(), llvmIntType, attr);
call    0 never executed
call    1 never executed
    #####:  117:    rewriter.replaceOpWithNewOp<DotIntrOp>(op, opType, adaptor.getA(),
call    0 never executed
    #####:  118:                                           adaptor.getB(), scale);
call    0 never executed
call    1 never executed
    #####:  119:    return success();
        -:  120:  }
        -:  121:};
        -:  122:
        -:  123:/// An entry associating the "main" AVX512 op with its instantiations for
        -:  124:/// vectors of 32-bit and 64-bit elements.
        -:  125:template <typename OpTy, typename Intr32OpTy, typename Intr64OpTy>
        -:  126:struct RegEntry {
        -:  127:  using MainOp = OpTy;
        -:  128:  using Intr32Op = Intr32OpTy;
        -:  129:  using Intr64Op = Intr64OpTy;
        -:  130:};
        -:  131:
        -:  132:/// A container for op association entries facilitating the configuration of
        -:  133:/// dialect conversion.
        -:  134:template <typename... Args>
        -:  135:struct RegistryImpl {
        -:  136:  /// Registers the patterns specializing the "main" op to one of the
        -:  137:  /// "intrinsic" ops depending on elemental type.
    #####:  138:  static void registerPatterns(LLVMTypeConverter &converter,
        -:  139:                               RewritePatternSet &patterns) {
    #####:  140:    patterns
        -:  141:        .add<LowerToIntrinsic<typename Args::MainOp, typename Args::Intr32Op,
        -:  142:                              typename Args::Intr64Op>...>(converter);
        -:  143:  }
        -:  144:
        -:  145:  /// Configures the conversion target to lower out "main" ops.
function _ZN12_GLOBAL__N_112RegistryImplIJNS_8RegEntryIN4mlir9x86vector14MaskRndScaleOpENS3_20MaskRndScalePSIntrOpENS3_20MaskRndScalePDIntrOpEEENS1_INS3_12MaskScaleFOpENS3_18MaskScaleFPSIntrOpENS3_18MaskScaleFPDIntrOpEEENS1_INS3_14Vp2IntersectOpENS3_19Vp2IntersectDIntrOpENS3_19Vp2IntersectQIntrOpEEEEE15configureTargetERNS2_20LLVMConversionTargetE called 0 returned 0% blocks executed 0%
    #####:  146:  static void configureTarget(LLVMConversionTarget &target) {
    #####:  147:    target.addIllegalOp<typename Args::MainOp...>();
call    0 never executed
    #####:  148:    target.addLegalOp<typename Args::Intr32Op...>();
call    0 never executed
    #####:  149:    target.addLegalOp<typename Args::Intr64Op...>();
call    0 never executed
    #####:  150:  }
        -:  151:};
        -:  152:
        -:  153:using Registry = RegistryImpl<
        -:  154:    RegEntry<MaskRndScaleOp, MaskRndScalePSIntrOp, MaskRndScalePDIntrOp>,
        -:  155:    RegEntry<MaskScaleFOp, MaskScaleFPSIntrOp, MaskScaleFPDIntrOp>,
        -:  156:    RegEntry<Vp2IntersectOp, Vp2IntersectDIntrOp, Vp2IntersectQIntrOp>>;
        -:  157:
        -:  158:} // namespace
        -:  159:
        -:  160:/// Populate the given list with patterns that convert from X86Vector to LLVM.
function _ZN4mlir46populateX86VectorLegalizeForLLVMExportPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:  161:void mlir::populateX86VectorLegalizeForLLVMExportPatterns(
        -:  162:    LLVMTypeConverter &converter, RewritePatternSet &patterns) {
    #####:  163:  Registry::registerPatterns(converter, patterns);
call    0 never executed
    #####:  164:  patterns.add<MaskCompressOpConversion, RsqrtOpConversion, DotOpConversion>(
    #####:  165:      converter);
call    0 never executed
    #####:  166:}
        -:  167:
function _ZN4mlir41configureX86VectorLegalizeForExportTargetERNS_20LLVMConversionTargetE called 0 returned 0% blocks executed 0%
    #####:  168:void mlir::configureX86VectorLegalizeForExportTarget(
        -:  169:    LLVMConversionTarget &target) {
    #####:  170:  Registry::configureTarget(target);
call    0 never executed
    #####:  171:  target.addLegalOp<MaskCompressIntrOp>();
call    0 never executed
    #####:  172:  target.addIllegalOp<MaskCompressOp>();
call    0 never executed
    #####:  173:  target.addLegalOp<RsqrtIntrOp>();
call    0 never executed
    #####:  174:  target.addIllegalOp<RsqrtOp>();
call    0 never executed
    #####:  175:  target.addLegalOp<DotIntrOp>();
call    0 never executed
    #####:  176:  target.addIllegalOp<DotOp>();
call    0 never executed
    #####:  177:}
