        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/GPUToVulkan/ConvertGPULaunchFuncToVulkanLaunchFunc.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUToVulkan/CMakeFiles/obj.MLIRGPUToVulkanTransforms.dir/ConvertGPULaunchFuncToVulkanLaunchFunc.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUToVulkan/CMakeFiles/obj.MLIRGPUToVulkanTransforms.dir/ConvertGPULaunchFuncToVulkanLaunchFunc.cpp.gcda
        -:    0:Runs:325556
        -:    1://===- ConvertGPULaunchFuncToVulkanLaunchFunc.cpp - MLIR conversion pass --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert gpu launch function into a vulkan
        -:   10:// launch function. Creates a SPIR-V binary shader from the `spirv::ModuleOp`
        -:   11:// using `spirv::serialize` function, attaches binary data and entry point name
        -:   12:// as an attributes to vulkan launch call op.
        -:   13://
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#include "mlir/Conversion/GPUToVulkan/ConvertGPUToVulkanPass.h"
        -:   17:
        -:   18:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   19:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   20:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   21:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   22:#include "mlir/IR/Attributes.h"
        -:   23:#include "mlir/IR/Builders.h"
        -:   24:#include "mlir/IR/BuiltinOps.h"
        -:   25:#include "mlir/IR/BuiltinTypes.h"
        -:   26:#include "mlir/Pass/Pass.h"
        -:   27:#include "mlir/Target/SPIRV/Serialization.h"
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_CONVERTGPULAUNCHFUNCTOVULKANLAUNCHFUNC
        -:   31:#include "mlir/Conversion/Passes.h.inc"
        -:   32:} // namespace mlir
        -:   33:
        -:   34:using namespace mlir;
        -:   35:
        -:   36:static constexpr const char *kSPIRVBlobAttrName = "spirv_blob";
        -:   37:static constexpr const char *kSPIRVEntryPointAttrName = "spirv_entry_point";
        -:   38:static constexpr const char *kVulkanLaunch = "vulkanLaunch";
        -:   39:
        -:   40:namespace {
        -:   41:
        -:   42:/// A pass to convert gpu launch op to vulkan launch call op, by creating a
        -:   43:/// SPIR-V binary shader from `spirv::ModuleOp` using `spirv::serialize`
        -:   44:/// function and attaching binary data and entry point name as an attributes to
        -:   45:/// created vulkan launch call op.
  326605*:   46:class ConvertGpuLaunchFuncToVulkanLaunchFunc
call    0 never executed
call    1 returned 100%
        -:   47:    : public impl::ConvertGpuLaunchFuncToVulkanLaunchFuncBase<
        -:   48:          ConvertGpuLaunchFuncToVulkanLaunchFunc> {
        -:   49:public:
        -:   50:  void runOnOperation() override;
        -:   51:
        -:   52:private:
        -:   53:  /// Creates a SPIR-V binary shader from the given `module` using
        -:   54:  /// `spirv::serialize` function.
        -:   55:  LogicalResult createBinaryShader(ModuleOp module,
        -:   56:                                   std::vector<char> &binaryShader);
        -:   57:
        -:   58:  /// Converts the given `launchOp` to vulkan launch call.
        -:   59:  void convertGpuLaunchFunc(gpu::LaunchFuncOp launchOp);
        -:   60:
        -:   61:  /// Checks where the given type is supported by Vulkan runtime.
        -:   62:  bool isSupportedType(Type type) {
        -:   63:    if (auto memRefType = type.dyn_cast_or_null<MemRefType>()) {
        -:   64:      auto elementType = memRefType.getElementType();
        -:   65:      return memRefType.hasRank() &&
        -:   66:             (memRefType.getRank() >= 1 && memRefType.getRank() <= 3) &&
        -:   67:             (elementType.isIntOrFloat());
        -:   68:    }
        -:   69:    return false;
        -:   70:  }
        -:   71:
        -:   72:  /// Declares the vulkan launch function. Returns an error if the any type of
        -:   73:  /// operand is unsupported by Vulkan runtime.
        -:   74:  LogicalResult declareVulkanLaunchFunc(Location loc,
        -:   75:                                        gpu::LaunchFuncOp launchOp);
        -:   76:
        -:   77:private:
        -:   78:  /// The number of vulkan launch configuration operands, placed at the leading
        -:   79:  /// positions of the operand list.
        -:   80:  static constexpr unsigned kVulkanLaunchNumConfigOperands = 3;
        -:   81:};
        -:   82:
        -:   83:} // namespace
        -:   84:
function _ZN12_GLOBAL__N_138ConvertGpuLaunchFuncToVulkanLaunchFunc14runOnOperationEv called 873 returned 100% blocks executed 52%
      873:   85:void ConvertGpuLaunchFuncToVulkanLaunchFunc::runOnOperation() {
      873:   86:  bool done = false;
function _ZZN12_GLOBAL__N_138ConvertGpuLaunchFuncToVulkanLaunchFunc14runOnOperationEvENKUlN4mlir3gpu12LaunchFuncOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     873*:   87:  getOperation().walk([this, &done](gpu::LaunchFuncOp op) {
call    0 returned 100%
call    1 returned 100%
    #####:   88:    if (done) {
branch  0 never executed
branch  1 never executed
    #####:   89:      op.emitError("should only contain one 'gpu::LaunchFuncOp' op");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   90:      return signalPassFailure();
call    0 never executed
        -:   91:    }
    #####:   92:    done = true;
    #####:   93:    convertGpuLaunchFunc(op);
call    0 never executed
        -:   94:  });
        -:   95:
        -:   96:  // Erase `gpu::GPUModuleOp` and `spirv::Module` operations.
    #####:   97:  for (auto gpuModule :
branch  0 never executed
branch  1 never executed
     873*:   98:       llvm::make_early_inc_range(getOperation().getOps<gpu::GPUModuleOp>()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
    #####:   99:    gpuModule.erase();
call    0 never executed
        -:  100:
    #####:  101:  for (auto spirvModule :
branch  0 never executed
branch  1 never executed
     873*:  102:       llvm::make_early_inc_range(getOperation().getOps<spirv::ModuleOp>()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
    #####:  103:    spirvModule.erase();
call    0 never executed
      873:  104:}
        -:  105:
function _ZN12_GLOBAL__N_138ConvertGpuLaunchFuncToVulkanLaunchFunc23declareVulkanLaunchFuncEN4mlir8LocationENS1_3gpu12LaunchFuncOpE called 0 returned 0% blocks executed 0%
    #####:  106:LogicalResult ConvertGpuLaunchFuncToVulkanLaunchFunc::declareVulkanLaunchFunc(
        -:  107:    Location loc, gpu::LaunchFuncOp launchOp) {
    #####:  108:  auto builder = OpBuilder::atBlockEnd(getOperation().getBody());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  109:
        -:  110:  // Workgroup size is written into the kernel. So to properly modelling
        -:  111:  // vulkan launch, we have to skip local workgroup size configuration here.
    #####:  112:  SmallVector<Type, 8> gpuLaunchTypes(launchOp.getOperandTypes());
call    0 never executed
call    1 never executed
        -:  113:  // The first kVulkanLaunchNumConfigOperands of the gpu.launch_func op are the
        -:  114:  // same as the config operands for the vulkan launch call op.
    #####:  115:  SmallVector<Type, 8> vulkanLaunchTypes(gpuLaunchTypes.begin(),
    #####:  116:                                         gpuLaunchTypes.begin() +
call    0 never executed
    #####:  117:                                             kVulkanLaunchNumConfigOperands);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:  vulkanLaunchTypes.append(gpuLaunchTypes.begin() +
call    0 never executed
        -:  119:                               gpu::LaunchOp::kNumConfigOperands,
        -:  120:                           gpuLaunchTypes.end());
        -:  121:
        -:  122:  // Check that all operands have supported types except those for the
        -:  123:  // launch configuration.
    #####:  124:  for (auto type :
    #####:  125:       llvm::drop_begin(vulkanLaunchTypes, kVulkanLaunchNumConfigOperands)) {
branch  0 never executed
branch  1 never executed
    #####:  126:    if (!isSupportedType(type))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  127:      return launchOp.emitError() << type << " is unsupported to run on Vulkan";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  128:  }
        -:  129:
        -:  130:  // Declare vulkan launch function.
    #####:  131:  auto funcType = builder.getFunctionType(vulkanLaunchTypes, {});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  132:  builder.create<func::FuncOp>(loc, kVulkanLaunch, funcType).setPrivate();
call    0 never executed
call    1 never executed
        -:  133:
    #####:  134:  return success();
branch  0 never executed
branch  1 never executed
        -:  135:}
        -:  136:
        -:  137:LogicalResult ConvertGpuLaunchFuncToVulkanLaunchFunc::createBinaryShader(
        -:  138:    ModuleOp module, std::vector<char> &binaryShader) {
        -:  139:  bool done = false;
        -:  140:  SmallVector<uint32_t, 0> binary;
        -:  141:  for (auto spirvModule : module.getOps<spirv::ModuleOp>()) {
        -:  142:    if (done)
        -:  143:      return spirvModule.emitError("should only contain one 'spirv.module' op");
        -:  144:    done = true;
        -:  145:
        -:  146:    if (failed(spirv::serialize(spirvModule, binary)))
        -:  147:      return failure();
        -:  148:  }
        -:  149:  binaryShader.resize(binary.size() * sizeof(uint32_t));
        -:  150:  std::memcpy(binaryShader.data(), reinterpret_cast<char *>(binary.data()),
        -:  151:              binaryShader.size());
        -:  152:  return success();
        -:  153:}
        -:  154:
function _ZN12_GLOBAL__N_138ConvertGpuLaunchFuncToVulkanLaunchFunc20convertGpuLaunchFuncEN4mlir3gpu12LaunchFuncOpE called 0 returned 0% blocks executed 0%
    #####:  155:void ConvertGpuLaunchFuncToVulkanLaunchFunc::convertGpuLaunchFunc(
        -:  156:    gpu::LaunchFuncOp launchOp) {
    #####:  157:  ModuleOp module = getOperation();
call    0 never executed
    #####:  158:  OpBuilder builder(launchOp);
call    0 never executed
    #####:  159:  Location loc = launchOp.getLoc();
call    0 never executed
        -:  160:
        -:  161:  // Serialize `spirv::Module` into binary form.
    #####:  162:  std::vector<char> binary;
call    0 never executed
    #####:  163:  if (failed(createBinaryShader(module, binary)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  164:    return signalPassFailure();
call    0 never executed
        -:  165:
        -:  166:  // Declare vulkan launch function.
    #####:  167:  if (failed(declareVulkanLaunchFunc(loc, launchOp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:    return signalPassFailure();
call    0 never executed
        -:  169:
    #####:  170:  SmallVector<Value, 8> gpuLaunchOperands(launchOp.getOperands());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  171:  SmallVector<Value, 8> vulkanLaunchOperands(
        -:  172:      gpuLaunchOperands.begin(),
    #####:  173:      gpuLaunchOperands.begin() + kVulkanLaunchNumConfigOperands);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  174:  vulkanLaunchOperands.append(gpuLaunchOperands.begin() +
call    0 never executed
        -:  175:                                  gpu::LaunchOp::kNumConfigOperands,
        -:  176:                              gpuLaunchOperands.end());
        -:  177:
        -:  178:  // Create vulkan launch call op.
    #####:  179:  auto vulkanLaunchCallOp = builder.create<func::CallOp>(
call    0 never executed
    #####:  180:      loc, TypeRange{}, SymbolRefAttr::get(builder.getContext(), kVulkanLaunch),
call    0 never executed
call    1 never executed
    #####:  181:      vulkanLaunchOperands);
call    0 never executed
        -:  182:
        -:  183:  // Set SPIR-V binary shader data as an attribute.
    #####:  184:  vulkanLaunchCallOp->setAttr(
call    0 never executed
call    1 never executed
        -:  185:      kSPIRVBlobAttrName,
    #####:  186:      builder.getStringAttr(StringRef(binary.data(), binary.size())));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  187:
        -:  188:  // Set entry point name as an attribute.
    #####:  189:  vulkanLaunchCallOp->setAttr(kSPIRVEntryPointAttrName,
call    0 never executed
call    1 never executed
    #####:  190:                              launchOp.getKernelName());
call    0 never executed
call    1 never executed
        -:  191:
    #####:  192:  launchOp.erase();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  193:}
        -:  194:
        -:  195:std::unique_ptr<mlir::OperationPass<mlir::ModuleOp>>
function _ZN4mlir48createConvertGpuLaunchFuncToVulkanLaunchFuncPassEv called 326605 returned 100% blocks executed 100%
   326605:  196:mlir::createConvertGpuLaunchFuncToVulkanLaunchFuncPass() {
   326605:  197:  return std::make_unique<ConvertGpuLaunchFuncToVulkanLaunchFunc>();
call    0 returned 100%
        -:  198:}
