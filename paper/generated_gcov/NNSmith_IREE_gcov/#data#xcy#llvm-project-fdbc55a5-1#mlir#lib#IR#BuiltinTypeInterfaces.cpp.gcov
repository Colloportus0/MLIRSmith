        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/IR/BuiltinTypeInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinTypeInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinTypeInterfaces.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- BuiltinTypeInterfaces.cpp ------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinTypes.h"
        -:   10:#include "mlir/IR/Diagnostics.h"
        -:   11:#include "llvm/ADT/Sequence.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::detail;
        -:   15:
        -:   16://===----------------------------------------------------------------------===//
        -:   17:/// Tablegen Interface Definitions
        -:   18://===----------------------------------------------------------------------===//
        -:   19:
        -:   20:#include "mlir/IR/BuiltinTypeInterfaces.cpp.inc"
        -:   21:
        -:   22://===----------------------------------------------------------------------===//
        -:   23:// ShapedType
        -:   24://===----------------------------------------------------------------------===//
        -:   25:
        -:   26:constexpr int64_t ShapedType::kDynamicSize;
        -:   27:constexpr int64_t ShapedType::kDynamicStrideOrOffset;
        -:   28:
function _ZN4mlir10ShapedType14getNumElementsEN4llvm8ArrayRefIlEE called 3614745 returned 100% blocks executed 83%
  3614745:   29:int64_t ShapedType::getNumElements(ArrayRef<int64_t> shape) {
  3614745:   30:  int64_t num = 1;
 15298465:   31:  for (int64_t dim : shape) {
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
 11683720:   32:    num *= dim;
11683720*:   33:    assert(num >= 0 && "integer overflow in element count computation");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   34:  }
  3614745:   35:  return num;
        -:   36:}
        -:   37:
function _ZNK4mlir10ShapedType13getSizeInBitsEv called 0 returned 0% blocks executed 0%
    #####:   38:int64_t ShapedType::getSizeInBits() const {
    #####:   39:  assert(hasStaticShape() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   40:         "cannot get the bit size of an aggregate with a dynamic shape");
        -:   41:
    #####:   42:  auto elementType = getElementType();
call    0 never executed
    #####:   43:  if (elementType.isIntOrFloat())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   44:    return elementType.getIntOrFloatBitWidth() * getNumElements();
call    0 never executed
call    1 never executed
        -:   45:
    #####:   46:  if (auto complexType = elementType.dyn_cast<ComplexType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   47:    elementType = complexType.getElementType();
call    0 never executed
    #####:   48:    return elementType.getIntOrFloatBitWidth() * getNumElements() * 2;
call    0 never executed
call    1 never executed
        -:   49:  }
    #####:   50:  return getNumElements() * elementType.cast<ShapedType>().getSizeInBits();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   51:}
