        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/GPU/Transforms/MemoryPromotion.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/GPU/CMakeFiles/obj.MLIRGPUTransforms.dir/Transforms/MemoryPromotion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/GPU/CMakeFiles/obj.MLIRGPUTransforms.dir/Transforms/MemoryPromotion.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- MemoryPromotion.cpp - Utilities for moving data across GPU memories ===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements utilities that allow one to create IR moving the data
        -:   10:// across different levels of the GPU memory hierarchy.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/GPU/Transforms/MemoryPromotion.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   17:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   18:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   19:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   20:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   21:#include "mlir/IR/ImplicitLocOpBuilder.h"
        -:   22:#include "mlir/Pass/Pass.h"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:using namespace mlir::gpu;
        -:   26:
        -:   27:/// Emits the (imperfect) loop nest performing the copy between "from" and "to"
        -:   28:/// values using the bounds derived from the "from" value. Emits at least
        -:   29:/// GPUDialect::getNumWorkgroupDimensions() loops, completing the nest with
        -:   30:/// single-iteration loops. Maps the innermost loops to thread dimensions, in
        -:   31:/// reverse order to enable access coalescing in the innermost loop.
function _ZL15insertCopyLoopsRN4mlir20ImplicitLocOpBuilderENS_5ValueES2_ called 0 returned 0% blocks executed 0%
    #####:   32:static void insertCopyLoops(ImplicitLocOpBuilder &b, Value from, Value to) {
    #####:   33:  auto memRefType = from.getType().cast<MemRefType>();
call    0 never executed
    #####:   34:  auto rank = memRefType.getRank();
call    0 never executed
        -:   35:
    #####:   36:  SmallVector<Value, 4> lbs, ubs, steps;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   37:  Value zero = b.create<arith::ConstantIndexOp>(0);
call    0 never executed
call    1 never executed
    #####:   38:  Value one = b.create<arith::ConstantIndexOp>(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   39:
        -:   40:  // Make sure we have enough loops to use all thread dimensions, these trivial
        -:   41:  // loops should be outermost and therefore inserted first.
    #####:   42:  if (rank < GPUDialect::getNumWorkgroupDimensions()) {
branch  0 never executed
branch  1 never executed
    #####:   43:    unsigned extraLoops = GPUDialect::getNumWorkgroupDimensions() - rank;
call    0 never executed
    #####:   44:    lbs.resize(extraLoops, zero);
call    0 never executed
    #####:   45:    ubs.resize(extraLoops, one);
call    0 never executed
    #####:   46:    steps.resize(extraLoops, one);
call    0 never executed
        -:   47:  }
        -:   48:
        -:   49:  // Add existing bounds.
    #####:   50:  lbs.append(rank, zero);
call    0 never executed
    #####:   51:  ubs.reserve(lbs.size());
branch  0 never executed
branch  1 never executed
    #####:   52:  steps.reserve(lbs.size());
branch  0 never executed
branch  1 never executed
    #####:   53:  for (auto idx = 0; idx < rank; ++idx) {
branch  0 never executed
branch  1 never executed
    #####:   54:    ubs.push_back(b.createOrFold<memref::DimOp>(
call    0 never executed
call    1 never executed
    #####:   55:        from, b.create<arith::ConstantIndexOp>(idx)));
call    0 never executed
    #####:   56:    steps.push_back(one);
call    0 never executed
        -:   57:  }
        -:   58:
        -:   59:  // Obtain thread identifiers and block sizes, necessary to map to them.
    #####:   60:  auto indexType = b.getIndexType();
call    0 never executed
    #####:   61:  SmallVector<Value, 3> threadIds, blockDims;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   62:  for (auto dim : {gpu::Dimension::x, gpu::Dimension::y, gpu::Dimension::z}) {
branch  0 never executed
branch  1 never executed
    #####:   63:    threadIds.push_back(b.create<gpu::ThreadIdOp>(indexType, dim));
call    0 never executed
call    1 never executed
    #####:   64:    blockDims.push_back(b.create<gpu::BlockDimOp>(indexType, dim));
call    0 never executed
call    1 never executed
        -:   65:  }
        -:   66:
        -:   67:  // Produce the loop nest with copies.
    #####:   68:  SmallVector<Value, 8> ivs(lbs.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:  mlir::scf::buildLoopNest(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   70:      b, b.getLoc(), lbs, ubs, steps,
function _ZZL15insertCopyLoopsRN4mlir20ImplicitLocOpBuilderENS_5ValueES2_ENKUlRNS_9OpBuilderENS_8LocationENS_10ValueRangeEE_clES4_S5_S6_ called 0 returned 0% blocks executed 0%
    #####:   71:      [&](OpBuilder &b, Location loc, ValueRange loopIvs) {
    #####:   72:        ivs.assign(loopIvs.begin(), loopIvs.end());
call    0 never executed
    #####:   73:        auto activeIvs = llvm::makeArrayRef(ivs).take_back(rank);
branch  0 never executed
branch  1 never executed
    #####:   74:        Value loaded = b.create<memref::LoadOp>(loc, from, activeIvs);
call    0 never executed
call    1 never executed
    #####:   75:        b.create<memref::StoreOp>(loc, loaded, to, activeIvs);
call    0 never executed
    #####:   76:      });
        -:   77:
        -:   78:  // Map the innermost loops to threads in reverse order.
    #####:   79:  for (const auto &en :
branch  0 never executed
branch  1 never executed
    #####:   80:       llvm::enumerate(llvm::reverse(llvm::makeArrayRef(ivs).take_back(
branch  0 never executed
branch  1 never executed
    #####:   81:           GPUDialect::getNumWorkgroupDimensions())))) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   82:    Value v = en.value();
call    0 never executed
    #####:   83:    auto loop = cast<scf::ForOp>(v.getParentRegion()->getParentOp());
call    0 never executed
call    1 never executed
    #####:   84:    mapLoopToProcessorIds(loop, {threadIds[en.index()]},
call    0 never executed
call    1 never executed
    #####:   85:                          {blockDims[en.index()]});
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   86:  }
    #####:   87:}
        -:   88:
        -:   89:/// Emits the loop nests performing the copy to the designated location in the
        -:   90:/// beginning of the region, and from the designated location immediately before
        -:   91:/// the terminator of the first block of the region. The region is expected to
        -:   92:/// have one block. This boils down to the following structure
        -:   93:///
        -:   94:///   ^bb(...):
        -:   95:///     <loop-bound-computation>
        -:   96:///     for %arg0 = ... to ... step ... {
        -:   97:///       ...
        -:   98:///         for %argN = <thread-id-x> to ... step <block-dim-x> {
        -:   99:///           %0 = load %from[%arg0, ..., %argN]
        -:  100:///           store %0, %to[%arg0, ..., %argN]
        -:  101:///         }
        -:  102:///       ...
        -:  103:///     }
        -:  104:///     gpu.barrier
        -:  105:///     <... original body ...>
        -:  106:///     gpu.barrier
        -:  107:///     for %arg0 = ... to ... step ... {
        -:  108:///       ...
        -:  109:///         for %argN = <thread-id-x> to ... step <block-dim-x> {
        -:  110:///           %1 = load %to[%arg0, ..., %argN]
        -:  111:///           store %1, %from[%arg0, ..., %argN]
        -:  112:///         }
        -:  113:///       ...
        -:  114:///     }
        -:  115:///
        -:  116:/// Inserts the barriers unconditionally since different threads may be copying
        -:  117:/// values and reading them. An analysis would be required to eliminate barriers
        -:  118:/// in case where value is only used by the thread that copies it. Both copies
        -:  119:/// are inserted unconditionally, an analysis would be required to only copy
        -:  120:/// live-in and live-out values when necessary. This copies the entire memref
        -:  121:/// pointed to by "from". In case a smaller block would be sufficient, the
        -:  122:/// caller can create a subview of the memref and promote it instead.
function _ZL12insertCopiesRN4mlir6RegionENS_8LocationENS_5ValueES3_ called 0 returned 0% blocks executed 0%
    #####:  123:static void insertCopies(Region &region, Location loc, Value from, Value to) {
    #####:  124:  auto fromType = from.getType().cast<MemRefType>();
call    0 never executed
    #####:  125:  auto toType = to.getType().cast<MemRefType>();
call    0 never executed
    #####:  126:  (void)fromType;
    #####:  127:  (void)toType;
    #####:  128:  assert(fromType.getShape() == toType.getShape());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  129:  assert(fromType.getRank() != 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  130:  assert(llvm::hasSingleElement(region) &&
branch  0 never executed
branch  1 never executed
        -:  131:         "unstructured control flow not supported");
        -:  132:
    #####:  133:  auto b = ImplicitLocOpBuilder::atBlockBegin(loc, &region.front());
call    0 never executed
call    1 never executed
    #####:  134:  insertCopyLoops(b, from, to);
call    0 never executed
    #####:  135:  b.create<gpu::BarrierOp>();
call    0 never executed
        -:  136:
    #####:  137:  b.setInsertionPoint(&region.front().back());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  138:  b.create<gpu::BarrierOp>();
call    0 never executed
    #####:  139:  insertCopyLoops(b, to, from);
call    0 never executed
    #####:  140:}
        -:  141:
        -:  142:/// Promotes a function argument to workgroup memory in the given function. The
        -:  143:/// copies will be inserted in the beginning and in the end of the function.
function _ZN4mlir24promoteToWorkgroupMemoryENS_3gpu9GPUFuncOpEj called 0 returned 0% blocks executed 0%
    #####:  144:void mlir::promoteToWorkgroupMemory(GPUFuncOp op, unsigned arg) {
    #####:  145:  Value value = op.getArgument(arg);
call    0 never executed
    #####:  146:  auto type = value.getType().dyn_cast<MemRefType>();
call    0 never executed
    #####:  147:  assert(type && type.hasStaticShape() && "can only promote memrefs");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  148:
        -:  149:  // Get the type of the buffer in the workgroup memory.
    #####:  150:  int workgroupMemoryAddressSpace = gpu::GPUDialect::getWorkgroupAddressSpace();
call    0 never executed
    #####:  151:  auto bufferType = MemRefType::get(type.getShape(), type.getElementType(), {},
    #####:  152:                                    workgroupMemoryAddressSpace);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  153:  Value attribution = op.addWorkgroupAttribution(bufferType, value.getLoc());
call    0 never executed
call    1 never executed
        -:  154:
        -:  155:  // Replace the uses first since only the original uses are currently present.
        -:  156:  // Then insert the copies.
    #####:  157:  value.replaceAllUsesWith(attribution);
call    0 never executed
    #####:  158:  insertCopies(op.getBody(), op.getLoc(), value, attribution);
call    0 never executed
call    1 never executed
    #####:  159:}
