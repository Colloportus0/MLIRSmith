        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Affine/Transforms/PipelineDataTransfer.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/PipelineDataTransfer.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/PipelineDataTransfer.cpp.gcda
        -:    0:Runs:325545
        -:    1://===- PipelineDataTransfer.cpp --- Pass for pipelining data movement ---*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to pipeline data transfers.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   16:#include "mlir/Dialect/Affine/Analysis/LoopAnalysis.h"
        -:   17:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   18:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   19:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   20:#include "mlir/Dialect/Affine/Utils.h"
        -:   21:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   22:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   23:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   24:#include "mlir/IR/Builders.h"
        -:   25:#include "mlir/Transforms/Passes.h"
        -:   26:#include "llvm/ADT/DenseMap.h"
        -:   27:#include "llvm/Support/Debug.h"
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_AFFINEPIPELINEDATATRANSFER
        -:   31:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   32:} // namespace mlir
        -:   33:
        -:   34:#define DEBUG_TYPE "affine-pipeline-data-transfer"
        -:   35:
        -:   36:using namespace mlir;
        -:   37:
        -:   38:namespace {
   388097:   39:struct PipelineDataTransfer
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   40:    : public impl::AffinePipelineDataTransferBase<PipelineDataTransfer> {
        -:   41:  void runOnOperation() override;
        -:   42:  void runOnAffineForOp(AffineForOp forOp);
        -:   43:
        -:   44:  std::vector<AffineForOp> forOps;
        -:   45:};
        -:   46:
        -:   47:} // namespace
        -:   48:
        -:   49:/// Creates a pass to pipeline explicit movement of data across levels of the
        -:   50:/// memory hierarchy.
        -:   51:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir30createPipelineDataTransferPassEv called 326609 returned 100% blocks executed 100%
   326609:   52:mlir::createPipelineDataTransferPass() {
   326609:   53:  return std::make_unique<PipelineDataTransfer>();
call    0 returned 100%
        -:   54:}
        -:   55:
        -:   56:// Returns the position of the tag memref operand given a DMA operation.
        -:   57:// Temporary utility: will be replaced when DmaStart/DmaFinish abstract op's are
        -:   58:// added.  TODO
function _ZL15getTagMemRefPosRN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   59:static unsigned getTagMemRefPos(Operation &dmaOp) {
    #####:   60:  assert((isa<AffineDmaStartOp, AffineDmaWaitOp>(dmaOp)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   61:  if (auto dmaStartOp = dyn_cast<AffineDmaStartOp>(dmaOp)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    return dmaStartOp.getTagMemRefOperandIndex();
call    0 never executed
        -:   63:  }
        -:   64:  // First operand for a dma finish operation.
    #####:   65:  return 0;
        -:   66:}
        -:   67:
        -:   68:/// Doubles the buffer of the supplied memref on the specified 'affine.for'
        -:   69:/// operation by adding a leading dimension of size two to the memref.
        -:   70:/// Replaces all uses of the old memref by the new one while indexing the newly
        -:   71:/// added dimension by the loop IV of the specified 'affine.for' operation
        -:   72:/// modulo 2. Returns false if such a replacement cannot be performed.
function _ZL12doubleBufferN4mlir5ValueENS_11AffineForOpE called 0 returned 0% blocks executed 0%
    #####:   73:static bool doubleBuffer(Value oldMemRef, AffineForOp forOp) {
    #####:   74:  auto *forBody = forOp.getBody();
call    0 never executed
    #####:   75:  OpBuilder bInner(forBody, forBody->begin());
call    0 never executed
        -:   76:
        -:   77:  // Doubles the shape with a leading dimension extent of 2.
function _ZZL12doubleBufferN4mlir5ValueENS_11AffineForOpEENKUlNS_10MemRefTypeEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   78:  auto doubleShape = [&](MemRefType oldMemRefType) -> MemRefType {
        -:   79:    // Add the leading dimension in the shape for the double buffer.
    #####:   80:    ArrayRef<int64_t> oldShape = oldMemRefType.getShape();
call    0 never executed
    #####:   81:    SmallVector<int64_t, 4> newShape(1 + oldMemRefType.getRank());
call    0 never executed
call    1 never executed
    #####:   82:    newShape[0] = 2;
branch  0 never executed
branch  1 never executed
    #####:   83:    std::copy(oldShape.begin(), oldShape.end(), newShape.begin() + 1);
branch  0 never executed
branch  1 never executed
    #####:   84:    return MemRefType::Builder(oldMemRefType).setShape(newShape).setLayout({});
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   85:  };
        -:   86:
    #####:   87:  auto oldMemRefType = oldMemRef.getType().cast<MemRefType>();
call    0 never executed
    #####:   88:  auto newMemRefType = doubleShape(oldMemRefType);
call    0 never executed
        -:   89:
        -:   90:  // The double buffer is allocated right before 'forOp'.
    #####:   91:  OpBuilder bOuter(forOp);
call    0 never executed
call    1 never executed
        -:   92:  // Put together alloc operands for any dynamic dimensions of the memref.
    #####:   93:  SmallVector<Value, 4> allocOperands;
call    0 never executed
    #####:   94:  for (const auto &dim : llvm::enumerate(oldMemRefType.getShape())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   95:    if (dim.value() == ShapedType::kDynamicSize)
branch  0 never executed
branch  1 never executed
    #####:   96:      allocOperands.push_back(bOuter.createOrFold<memref::DimOp>(
call    0 never executed
    #####:   97:          forOp.getLoc(), oldMemRef, dim.index()));
call    0 never executed
        -:   98:  }
        -:   99:
        -:  100:  // Create and place the alloc right before the 'affine.for' operation.
    #####:  101:  Value newMemRef = bOuter.create<memref::AllocOp>(
    #####:  102:      forOp.getLoc(), newMemRefType, allocOperands);
call    0 never executed
call    1 never executed
        -:  103:
        -:  104:  // Create 'iv mod 2' value to index the leading dimension.
    #####:  105:  auto d0 = bInner.getAffineDimExpr(0);
call    0 never executed
    #####:  106:  int64_t step = forOp.getStep();
call    0 never executed
    #####:  107:  auto modTwoMap =
    #####:  108:      AffineMap::get(/*dimCount=*/1, /*symbolCount=*/0, d0.floorDiv(step) % 2);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  109:  auto ivModTwoOp = bInner.create<AffineApplyOp>(forOp.getLoc(), modTwoMap,
call    0 never executed
    #####:  110:                                                 forOp.getInductionVar());
call    0 never executed
        -:  111:
        -:  112:  // replaceAllMemRefUsesWith will succeed unless the forOp body has
        -:  113:  // non-dereferencing uses of the memref (dealloc's are fine though).
    #####:  114:  if (failed(replaceAllMemRefUsesWith(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  115:          oldMemRef, newMemRef,
        -:  116:          /*extraIndices=*/{ivModTwoOp},
        -:  117:          /*indexRemap=*/AffineMap(),
        -:  118:          /*extraOperands=*/{},
        -:  119:          /*symbolOperands=*/{},
    #####:  120:          /*domOpFilter=*/&*forOp.getBody()->begin()))) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:    LLVM_DEBUG(
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  122:        forOp.emitError("memref replacement for double buffering failed"));
    #####:  123:    ivModTwoOp.erase();
call    0 never executed
    #####:  124:    return false;
call    0 never executed
        -:  125:  }
        -:  126:  // Insert the dealloc op right after the for loop.
    #####:  127:  bOuter.setInsertionPointAfter(forOp);
call    0 never executed
    #####:  128:  bOuter.create<memref::DeallocOp>(forOp.getLoc(), newMemRef);
call    0 never executed
        -:  129:
    #####:  130:  return true;
call    0 never executed
        -:  131:}
        -:  132:
        -:  133:/// Returns success if the IR is in a valid state.
function _ZN12_GLOBAL__N_120PipelineDataTransfer14runOnOperationEv called 988 returned 100% blocks executed 67%
      988:  134:void PipelineDataTransfer::runOnOperation() {
        -:  135:  // Do a post order walk so that inner loop DMAs are processed first. This is
        -:  136:  // necessary since 'affine.for' operations nested within would otherwise
        -:  137:  // become invalid (erased) when the outer loop is pipelined (the pipelined one
        -:  138:  // gets deleted and replaced by a prologue, a new steady-state loop and an
        -:  139:  // epilogue).
      988:  140:  forOps.clear();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     988*:  141:  getOperation().walk([&](AffineForOp forOp) { forOps.push_back(forOp); });
call    0 never executed
call    1 returned 100%
call    2 returned 100%
     985*:  142:  for (auto forOp : forOps)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:  143:    runOnAffineForOp(forOp);
call    0 never executed
      985:  144:}
        -:  145:
        -:  146:// Check if tags of the dma start op and dma wait op match.
function _ZL13checkTagMatchN4mlir16AffineDmaStartOpENS_15AffineDmaWaitOpE called 0 returned 0% blocks executed 0%
    #####:  147:static bool checkTagMatch(AffineDmaStartOp startOp, AffineDmaWaitOp waitOp) {
    #####:  148:  if (startOp.getTagMemRef() != waitOp.getTagMemRef())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  149:    return false;
    #####:  150:  auto startIndices = startOp.getTagIndices();
call    0 never executed
    #####:  151:  auto waitIndices = waitOp.getTagIndices();
call    0 never executed
        -:  152:  // Both of these have the same number of indices since they correspond to the
        -:  153:  // same tag memref.
    #####:  154:  for (auto it = startIndices.begin(), wIt = waitIndices.begin(),
    #####:  155:            e = startIndices.end();
    #####:  156:       it != e; ++it, ++wIt) {
branch  0 never executed
branch  1 never executed
        -:  157:    // Keep it simple for now, just checking if indices match.
        -:  158:    // TODO: this would in general need to check if there is no
        -:  159:    // intervening write writing to the same tag location, i.e., memory last
        -:  160:    // write/data flow analysis. This is however sufficient/powerful enough for
        -:  161:    // now since the DMA generation pass or the input for it will always have
        -:  162:    // start/wait with matching tags (same SSA operand indices).
    #####:  163:    if (*it != *wIt)
branch  0 never executed
branch  1 never executed
    #####:  164:      return false;
        -:  165:  }
        -:  166:  return true;
        -:  167:}
        -:  168:
        -:  169:// Identify matching DMA start/finish operations to overlap computation with.
function _ZL28findMatchingStartFinishInstsN4mlir11AffineForOpERN4llvm15SmallVectorImplISt4pairIPNS_9OperationES5_EEE called 0 returned 0% blocks executed 0%
    #####:  170:static void findMatchingStartFinishInsts(
        -:  171:    AffineForOp forOp,
        -:  172:    SmallVectorImpl<std::pair<Operation *, Operation *>> &startWaitPairs) {
        -:  173:
        -:  174:  // Collect outgoing DMA operations - needed to check for dependences below.
    #####:  175:  SmallVector<AffineDmaStartOp, 4> outgoingDmaOps;
call    0 never executed
    #####:  176:  for (auto &op : *forOp.getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  177:    auto dmaStartOp = dyn_cast<AffineDmaStartOp>(op);
call    0 never executed
    #####:  178:    if (dmaStartOp && dmaStartOp.isSrcMemorySpaceFaster())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  179:      outgoingDmaOps.push_back(dmaStartOp);
call    0 never executed
        -:  180:  }
        -:  181:
    #####:  182:  SmallVector<Operation *, 4> dmaStartInsts, dmaFinishInsts;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  183:  for (auto &op : *forOp.getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  184:    // Collect DMA finish operations.
    #####:  185:    if (isa<AffineDmaWaitOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:      dmaFinishInsts.push_back(&op);
call    0 never executed
    #####:  187:      continue;
        -:  188:    }
    #####:  189:    auto dmaStartOp = dyn_cast<AffineDmaStartOp>(op);
call    0 never executed
    #####:  190:    if (!dmaStartOp)
branch  0 never executed
branch  1 never executed
    #####:  191:      continue;
        -:  192:
        -:  193:    // Only DMAs incoming into higher memory spaces are pipelined for now.
        -:  194:    // TODO: handle outgoing DMA pipelining.
    #####:  195:    if (!dmaStartOp.isDestMemorySpaceFaster())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  196:      continue;
        -:  197:
        -:  198:    // Check for dependence with outgoing DMAs. Doing this conservatively.
        -:  199:    // TODO: use the dependence analysis to check for
        -:  200:    // dependences between an incoming and outgoing DMA in the same iteration.
    #####:  201:    auto *it = outgoingDmaOps.begin();
    #####:  202:    for (; it != outgoingDmaOps.end(); ++it) {
branch  0 never executed
branch  1 never executed
    #####:  203:      if (it->getDstMemRef() == dmaStartOp.getSrcMemRef())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  204:        break;
        -:  205:    }
    #####:  206:    if (it != outgoingDmaOps.end())
branch  0 never executed
branch  1 never executed
    #####:  207:      continue;
        -:  208:
        -:  209:    // We only double buffer if the buffer is not live out of loop.
    #####:  210:    auto memref = dmaStartOp.getOperand(dmaStartOp.getFasterMemPos());
call    0 never executed
call    1 never executed
    #####:  211:    bool escapingUses = false;
    #####:  212:    for (auto *user : memref.getUsers()) {
branch  0 never executed
branch  1 never executed
        -:  213:      // We can double buffer regardless of dealloc's outside the loop.
    #####:  214:      if (isa<memref::DeallocOp>(user))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  215:        continue;
    #####:  216:      if (!forOp.getBody()->findAncestorOpInBlock(*user)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  217:        LLVM_DEBUG(llvm::dbgs()
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:  218:                       << "can't pipeline: buffer is live out of loop\n";);
    #####:  219:        escapingUses = true;
    #####:  220:        break;
        -:  221:      }
        -:  222:    }
    #####:  223:    if (!escapingUses)
    #####:  224:      dmaStartInsts.push_back(&op);
call    0 never executed
        -:  225:  }
        -:  226:
        -:  227:  // For each start operation, we look for a matching finish operation.
    #####:  228:  for (auto *dmaStartOp : dmaStartInsts) {
branch  0 never executed
branch  1 never executed
    #####:  229:    for (auto *dmaFinishOp : dmaFinishInsts) {
branch  0 never executed
branch  1 never executed
    #####:  230:      if (checkTagMatch(cast<AffineDmaStartOp>(dmaStartOp),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  231:                        cast<AffineDmaWaitOp>(dmaFinishOp))) {
    #####:  232:        startWaitPairs.push_back({dmaStartOp, dmaFinishOp});
call    0 never executed
    #####:  233:        break;
        -:  234:      }
        -:  235:    }
        -:  236:  }
    #####:  237:}
        -:  238:
        -:  239:/// Overlap DMA transfers with computation in this loop. If successful,
        -:  240:/// 'forOp' is deleted, and a prologue, a new pipelined loop, and epilogue are
        -:  241:/// inserted right before where it was.
        -:  242:void PipelineDataTransfer::runOnAffineForOp(AffineForOp forOp) {
        -:  243:  auto mayBeConstTripCount = getConstantTripCount(forOp);
        -:  244:  if (!mayBeConstTripCount) {
        -:  245:    LLVM_DEBUG(forOp.emitRemark("won't pipeline due to unknown trip count"));
        -:  246:    return;
        -:  247:  }
        -:  248:
        -:  249:  SmallVector<std::pair<Operation *, Operation *>, 4> startWaitPairs;
        -:  250:  findMatchingStartFinishInsts(forOp, startWaitPairs);
        -:  251:
        -:  252:  if (startWaitPairs.empty()) {
        -:  253:    LLVM_DEBUG(forOp.emitRemark("No dma start/finish pairs\n"));
        -:  254:    return;
        -:  255:  }
        -:  256:
        -:  257:  // Double the buffers for the higher memory space memref's.
        -:  258:  // Identify memref's to replace by scanning through all DMA start
        -:  259:  // operations. A DMA start operation has two memref's - the one from the
        -:  260:  // higher level of memory hierarchy is the one to double buffer.
        -:  261:  // TODO: check whether double-buffering is even necessary.
        -:  262:  // TODO: make this work with different layouts: assuming here that
        -:  263:  // the dimension we are adding here for the double buffering is the outermost
        -:  264:  // dimension.
        -:  265:  for (auto &pair : startWaitPairs) {
        -:  266:    auto *dmaStartOp = pair.first;
        -:  267:    Value oldMemRef = dmaStartOp->getOperand(
        -:  268:        cast<AffineDmaStartOp>(dmaStartOp).getFasterMemPos());
        -:  269:    if (!doubleBuffer(oldMemRef, forOp)) {
        -:  270:      // Normally, double buffering should not fail because we already checked
        -:  271:      // that there are no uses outside.
        -:  272:      LLVM_DEBUG(llvm::dbgs()
        -:  273:                     << "double buffering failed for" << dmaStartOp << "\n";);
        -:  274:      // IR still valid and semantically correct.
        -:  275:      return;
        -:  276:    }
        -:  277:    // If the old memref has no more uses, remove its 'dead' alloc if it was
        -:  278:    // alloc'ed. (note: DMA buffers are rarely function live-in; but a 'dim'
        -:  279:    // operation could have been used on it if it was dynamically shaped in
        -:  280:    // order to create the double buffer above.)
        -:  281:    // '-canonicalize' does this in a more general way, but we'll anyway do the
        -:  282:    // simple/common case so that the output / test cases looks clear.
        -:  283:    if (auto *allocOp = oldMemRef.getDefiningOp()) {
        -:  284:      if (oldMemRef.use_empty()) {
        -:  285:        allocOp->erase();
        -:  286:      } else if (oldMemRef.hasOneUse()) {
        -:  287:        if (auto dealloc =
        -:  288:                dyn_cast<memref::DeallocOp>(*oldMemRef.user_begin())) {
        -:  289:          dealloc.erase();
        -:  290:          allocOp->erase();
        -:  291:        }
        -:  292:      }
        -:  293:    }
        -:  294:  }
        -:  295:
        -:  296:  // Double the buffers for tag memrefs.
        -:  297:  for (auto &pair : startWaitPairs) {
        -:  298:    auto *dmaFinishOp = pair.second;
        -:  299:    Value oldTagMemRef = dmaFinishOp->getOperand(getTagMemRefPos(*dmaFinishOp));
        -:  300:    if (!doubleBuffer(oldTagMemRef, forOp)) {
        -:  301:      LLVM_DEBUG(llvm::dbgs() << "tag double buffering failed\n";);
        -:  302:      return;
        -:  303:    }
        -:  304:    // If the old tag has no uses or a single dealloc use, remove it.
        -:  305:    // (canonicalization handles more complex cases).
        -:  306:    if (auto *tagAllocOp = oldTagMemRef.getDefiningOp()) {
        -:  307:      if (oldTagMemRef.use_empty()) {
        -:  308:        tagAllocOp->erase();
        -:  309:      } else if (oldTagMemRef.hasOneUse()) {
        -:  310:        if (auto dealloc =
        -:  311:                dyn_cast<memref::DeallocOp>(*oldTagMemRef.user_begin())) {
        -:  312:          dealloc.erase();
        -:  313:          tagAllocOp->erase();
        -:  314:        }
        -:  315:      }
        -:  316:    }
        -:  317:  }
        -:  318:
        -:  319:  // Double buffering would have invalidated all the old DMA start/wait insts.
        -:  320:  startWaitPairs.clear();
        -:  321:  findMatchingStartFinishInsts(forOp, startWaitPairs);
        -:  322:
        -:  323:  // Store shift for operation for later lookup for AffineApplyOp's.
        -:  324:  DenseMap<Operation *, unsigned> instShiftMap;
        -:  325:  for (auto &pair : startWaitPairs) {
        -:  326:    auto *dmaStartOp = pair.first;
        -:  327:    assert(isa<AffineDmaStartOp>(dmaStartOp));
        -:  328:    instShiftMap[dmaStartOp] = 0;
        -:  329:    // Set shifts for DMA start op's affine operand computation slices to 0.
        -:  330:    SmallVector<AffineApplyOp, 4> sliceOps;
        -:  331:    mlir::createAffineComputationSlice(dmaStartOp, &sliceOps);
        -:  332:    if (!sliceOps.empty()) {
        -:  333:      for (auto sliceOp : sliceOps) {
        -:  334:        instShiftMap[sliceOp.getOperation()] = 0;
        -:  335:      }
        -:  336:    } else {
        -:  337:      // If a slice wasn't created, the reachable affine.apply op's from its
        -:  338:      // operands are the ones that go with it.
        -:  339:      SmallVector<Operation *, 4> affineApplyInsts;
        -:  340:      SmallVector<Value, 4> operands(dmaStartOp->getOperands());
        -:  341:      getReachableAffineApplyOps(operands, affineApplyInsts);
        -:  342:      for (auto *op : affineApplyInsts) {
        -:  343:        instShiftMap[op] = 0;
        -:  344:      }
        -:  345:    }
        -:  346:  }
        -:  347:  // Everything else (including compute ops and dma finish) are shifted by one.
        -:  348:  for (auto &op : forOp.getBody()->without_terminator())
        -:  349:    if (instShiftMap.find(&op) == instShiftMap.end())
        -:  350:      instShiftMap[&op] = 1;
        -:  351:
        -:  352:  // Get shifts stored in map.
        -:  353:  SmallVector<uint64_t, 8> shifts(forOp.getBody()->getOperations().size());
        -:  354:  unsigned s = 0;
        -:  355:  for (auto &op : forOp.getBody()->without_terminator()) {
        -:  356:    assert(instShiftMap.find(&op) != instShiftMap.end());
        -:  357:    shifts[s++] = instShiftMap[&op];
        -:  358:
        -:  359:    // Tagging operations with shifts for debugging purposes.
        -:  360:    LLVM_DEBUG({
        -:  361:      OpBuilder b(&op);
        -:  362:      op.setAttr("shift", b.getI64IntegerAttr(shifts[s - 1]));
        -:  363:    });
        -:  364:  }
        -:  365:
        -:  366:  if (!isOpwiseShiftValid(forOp, shifts)) {
        -:  367:    // Violates dependences.
        -:  368:    LLVM_DEBUG(llvm::dbgs() << "Shifts invalid - unexpected\n";);
        -:  369:    return;
        -:  370:  }
        -:  371:
        -:  372:  if (failed(affineForOpBodySkew(forOp, shifts))) {
        -:  373:    LLVM_DEBUG(llvm::dbgs() << "op body skewing failed - unexpected\n";);
        -:  374:    return;
        -:  375:  }
        -:  376:}
