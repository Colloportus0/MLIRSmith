        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/MemRefToSPIRV/MapMemRefStorageClassPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/MemRefToSPIRV/CMakeFiles/obj.MLIRMemRefToSPIRV.dir/MapMemRefStorageClassPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/MemRefToSPIRV/CMakeFiles/obj.MLIRMemRefToSPIRV.dir/MapMemRefStorageClassPass.cpp.gcda
        -:    0:Runs:325557
        -:    1://===- MapMemRefStorageCLassPass.cpp --------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to map numeric MemRef memory spaces to
        -:   10:// symbolic ones defined in the SPIR-V specification.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/MemRefToSPIRV/MemRefToSPIRVPass.h"
        -:   15:
        -:   16:#include "mlir/Conversion/MemRefToSPIRV/MemRefToSPIRV.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/SPIRVEnums.h"
        -:   20:#include "mlir/Dialect/SPIRV/IR/TargetAndABI.h"
        -:   21:#include "mlir/IR/BuiltinTypes.h"
        -:   22:#include "mlir/IR/FunctionInterfaces.h"
        -:   23:#include "mlir/Transforms/DialectConversion.h"
        -:   24:#include "llvm/ADT/StringExtras.h"
        -:   25:#include "llvm/Support/Debug.h"
        -:   26:
        -:   27:namespace mlir {
        -:   28:#define GEN_PASS_DEF_MAPMEMREFSTORAGECLASS
        -:   29:#include "mlir/Conversion/Passes.h.inc"
        -:   30:} // namespace mlir
        -:   31:
        -:   32:#define DEBUG_TYPE "mlir-map-memref-storage-class"
        -:   33:
        -:   34:using namespace mlir;
        -:   35:
        -:   36://===----------------------------------------------------------------------===//
        -:   37:// Mappings
        -:   38://===----------------------------------------------------------------------===//
        -:   39:
        -:   40:/// Mapping between SPIR-V storage classes to memref memory spaces.
        -:   41:///
        -:   42:/// Note: memref does not have a defined semantics for each memory space; it
        -:   43:/// depends on the context where it is used. There are no particular reasons
        -:   44:/// behind the number assignments; we try to follow NVVM conventions and largely
        -:   45:/// give common storage classes a smaller number.
        -:   46:#define VULKAN_STORAGE_SPACE_MAP_LIST(MAP_FN)                                  \
        -:   47:  MAP_FN(spirv::StorageClass::StorageBuffer, 0)                                \
        -:   48:  MAP_FN(spirv::StorageClass::Generic, 1)                                      \
        -:   49:  MAP_FN(spirv::StorageClass::Workgroup, 3)                                    \
        -:   50:  MAP_FN(spirv::StorageClass::Uniform, 4)                                      \
        -:   51:  MAP_FN(spirv::StorageClass::Private, 5)                                      \
        -:   52:  MAP_FN(spirv::StorageClass::Function, 6)                                     \
        -:   53:  MAP_FN(spirv::StorageClass::PushConstant, 7)                                 \
        -:   54:  MAP_FN(spirv::StorageClass::UniformConstant, 8)                              \
        -:   55:  MAP_FN(spirv::StorageClass::Input, 9)                                        \
        -:   56:  MAP_FN(spirv::StorageClass::Output, 10)
        -:   57:
        -:   58:Optional<spirv::StorageClass>
function _ZN4mlir5spirv34mapMemorySpaceToVulkanStorageClassEj called 12 returned 100% blocks executed 23%
       12:   59:spirv::mapMemorySpaceToVulkanStorageClass(unsigned memorySpace) {
        -:   60:#define STORAGE_SPACE_MAP_FN(storage, space)                                   \
        -:   61:  case space:                                                                  \
        -:   62:    return storage;
        -:   63:
       12:   64:  switch (memorySpace) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
      12*:   65:    VULKAN_STORAGE_SPACE_MAP_LIST(STORAGE_SPACE_MAP_FN)
    #####:   66:  default:
    #####:   67:    break;
        -:   68:  }
    #####:   69:  return llvm::None;
        -:   70:
        -:   71:#undef STORAGE_SPACE_MAP_FN
        -:   72:}
        -:   73:
        -:   74:Optional<unsigned>
function _ZN4mlir5spirv34mapVulkanStorageClassToMemorySpaceENS0_12StorageClassE called 0 returned 0% blocks executed 0%
    #####:   75:spirv::mapVulkanStorageClassToMemorySpace(spirv::StorageClass storageClass) {
        -:   76:#define STORAGE_SPACE_MAP_FN(storage, space)                                   \
        -:   77:  case storage:                                                                \
        -:   78:    return space;
        -:   79:
    #####:   80:  switch (storageClass) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   81:    VULKAN_STORAGE_SPACE_MAP_LIST(STORAGE_SPACE_MAP_FN)
    #####:   82:  default:
    #####:   83:    break;
        -:   84:  }
    #####:   85:  return llvm::None;
        -:   86:
        -:   87:#undef STORAGE_SPACE_MAP_FN
        -:   88:}
        -:   89:
        -:   90:#undef VULKAN_STORAGE_SPACE_MAP_LIST
        -:   91:
        -:   92:#define OPENCL_STORAGE_SPACE_MAP_LIST(MAP_FN)                                  \
        -:   93:  MAP_FN(spirv::StorageClass::CrossWorkgroup, 0)                               \
        -:   94:  MAP_FN(spirv::StorageClass::Generic, 1)                                      \
        -:   95:  MAP_FN(spirv::StorageClass::Workgroup, 3)                                    \
        -:   96:  MAP_FN(spirv::StorageClass::UniformConstant, 4)                              \
        -:   97:  MAP_FN(spirv::StorageClass::Private, 5)                                      \
        -:   98:  MAP_FN(spirv::StorageClass::Function, 6)                                     \
        -:   99:  MAP_FN(spirv::StorageClass::Image, 7)
        -:  100:
        -:  101:Optional<spirv::StorageClass>
function _ZN4mlir5spirv34mapMemorySpaceToOpenCLStorageClassEj called 0 returned 0% blocks executed 0%
    #####:  102:spirv::mapMemorySpaceToOpenCLStorageClass(unsigned memorySpace) {
        -:  103:#define STORAGE_SPACE_MAP_FN(storage, space)                                   \
        -:  104:  case space:                                                                  \
        -:  105:    return storage;
        -:  106:
    #####:  107:  switch (memorySpace) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  108:    OPENCL_STORAGE_SPACE_MAP_LIST(STORAGE_SPACE_MAP_FN)
    #####:  109:  default:
    #####:  110:    break;
        -:  111:  }
    #####:  112:  return llvm::None;
        -:  113:
        -:  114:#undef STORAGE_SPACE_MAP_FN
        -:  115:}
        -:  116:
        -:  117:Optional<unsigned>
function _ZN4mlir5spirv34mapOpenCLStorageClassToMemorySpaceENS0_12StorageClassE called 0 returned 0% blocks executed 0%
    #####:  118:spirv::mapOpenCLStorageClassToMemorySpace(spirv::StorageClass storageClass) {
        -:  119:#define STORAGE_SPACE_MAP_FN(storage, space)                                   \
        -:  120:  case storage:                                                                \
        -:  121:    return space;
        -:  122:
    #####:  123:  switch (storageClass) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  124:    OPENCL_STORAGE_SPACE_MAP_LIST(STORAGE_SPACE_MAP_FN)
    #####:  125:  default:
    #####:  126:    break;
        -:  127:  }
    #####:  128:  return llvm::None;
        -:  129:
        -:  130:#undef STORAGE_SPACE_MAP_FN
        -:  131:}
        -:  132:
        -:  133:#undef OPENCL_STORAGE_SPACE_MAP_LIST
        -:  134:
        -:  135://===----------------------------------------------------------------------===//
        -:  136:// Type Converter
        -:  137://===----------------------------------------------------------------------===//
        -:  138:
function _ZN4mlir5spirv34MemorySpaceToStorageClassConverterC2ERKSt8functionIFN4llvm8OptionalINS0_12StorageClassEEEjEE called 848 returned 100% blocks executed 100%
      848:  139:spirv::MemorySpaceToStorageClassConverter::MemorySpaceToStorageClassConverter(
      848:  140:    const spirv::MemorySpaceToStorageClassMap &memorySpaceMap)
      848:  141:    : memorySpaceMap(memorySpaceMap) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  142:  // Pass through for all other types.
      862:  143:  addConversion([](Type type) { return type; });
call    0 returned 100%
call    1 returned 100%
        -:  144:
function _ZZN4mlir5spirv34MemorySpaceToStorageClassConverterC4ERKSt8functionIFN4llvm8OptionalINS0_12StorageClassEEEjEEENKUlNS_14BaseMemRefTypeEE0_clESB_.isra.0 called 12 returned 100% blocks executed 42%
      848:  145:  addConversion([this](BaseMemRefType memRefType) -> Optional<Type> {
call    0 returned 100%
        -:  146:    // Expect IntegerAttr memory spaces. The attribute can be missing for the
        -:  147:    // case of memory space == 0.
       12:  148:    Attribute spaceAttr = memRefType.getMemorySpace();
call    0 returned 100%
      12*:  149:    if (spaceAttr && !spaceAttr.isa<IntegerAttr>()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  150:      LLVM_DEBUG(llvm::dbgs() << "cannot convert " << memRefType
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  151:                              << " due to non-IntegerAttr memory space\n");
    #####:  152:      return llvm::None;
        -:  153:    }
        -:  154:
       12:  155:    unsigned space = memRefType.getMemorySpaceAsInt();
call    0 returned 100%
       12:  156:    auto storage = this->memorySpaceMap(space);
branch  0 taken 0%
branch  1 taken 100%
       12:  157:    if (!storage) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  158:      LLVM_DEBUG(llvm::dbgs()
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  159:                 << "cannot convert " << memRefType
        -:  160:                 << " due to being unable to find memory space in map\n");
    #####:  161:      return llvm::None;
        -:  162:    }
        -:  163:
       12:  164:    auto storageAttr =
call    0 returned 100%
       12:  165:        spirv::StorageClassAttr::get(memRefType.getContext(), *storage);
call    0 returned 100%
call    1 returned 100%
       12:  166:    if (auto rankedType = memRefType.dyn_cast<MemRefType>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       12:  167:      return MemRefType::get(memRefType.getShape(), memRefType.getElementType(),
       12:  168:                             rankedType.getLayout(), storageAttr);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  169:    }
    #####:  170:    return UnrankedMemRefType::get(memRefType.getElementType(), storageAttr);
call    0 never executed
call    1 never executed
        -:  171:  });
        -:  172:
function _ZZN4mlir5spirv34MemorySpaceToStorageClassConverterC4ERKSt8functionIFN4llvm8OptionalINS0_12StorageClassEEEjEEENKUlNS_12FunctionTypeEE1_clESB_.isra.0 called 3 returned 100% blocks executed 80%
      851:  173:  addConversion([this](FunctionType type) {
call    0 returned 100%
        6:  174:    SmallVector<Type> inputs, results;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        3:  175:    inputs.reserve(type.getNumInputs());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        3:  176:    results.reserve(type.getNumResults());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        7:  177:    for (Type input : type.getInputs())
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
        4:  178:      inputs.push_back(convertType(input));
call    0 returned 100%
call    1 returned 100%
       11:  179:    for (Type result : type.getResults())
call    0 returned 100%
branch  1 taken 73% (fallthrough)
branch  2 taken 27%
        8:  180:      results.push_back(convertType(result));
call    0 returned 100%
call    1 returned 100%
        3:  181:    return FunctionType::get(type.getContext(), inputs, results);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  182:  });
      848:  183:}
        -:  184:
        -:  185://===----------------------------------------------------------------------===//
        -:  186:// Conversion Target
        -:  187://===----------------------------------------------------------------------===//
        -:  188:
        -:  189:/// Returns true if the given `type` is considered as legal for SPIR-V
        -:  190:/// conversion.
function _ZL11isLegalTypeN4mlir4TypeE called 48118 returned 100% blocks executed 90%
    48118:  191:static bool isLegalType(Type type) {
    48118:  192:  if (auto memRefType = type.dyn_cast<BaseMemRefType>()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
       92:  193:    Attribute spaceAttr = memRefType.getMemorySpace();
call    0 returned 100%
      132:  194:    return spaceAttr && spaceAttr.isa<spirv::StorageClassAttr>();
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  195:  }
    48026:  196:  return true;
        -:  197:}
        -:  198:
        -:  199:/// Returns true if the given `attr` is considered as legal for SPIR-V
        -:  200:/// conversion.
function _ZL11isLegalAttrN4mlir9AttributeE called 11070 returned 100% blocks executed 57%
    11070:  201:static bool isLegalAttr(Attribute attr) {
    11070:  202:  if (auto typeAttr = attr.dyn_cast<TypeAttr>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  203:    return isLegalType(typeAttr.getValue());
call    0 never executed
call    1 never executed
    11070:  204:  return true;
        -:  205:}
        -:  206:
        -:  207:/// Returns true if the given `op` is considered as legal for SPIR-V conversion.
function _ZL9isLegalOpPN4mlir9OperationE called 21320 returned 100% blocks executed 92%
    21320:  208:static bool isLegalOp(Operation *op) {
    21320:  209:  if (auto funcOp = dyn_cast<FunctionOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
     1923:  210:    return llvm::all_of(funcOp.getArgumentTypes(), isLegalType) &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
     1923:  211:           llvm::all_of(funcOp.getResultTypes(), isLegalType);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  212:  }
        -:  213:
    19397:  214:  auto attrs = llvm::map_range(op->getAttrs(), [](const NamedAttribute &attr) {
call    0 returned 100%
        -:  215:    return attr.getValue();
    19397:  216:  });
call    0 returned 100%
        -:  217:
    38772:  218:  return llvm::all_of(op->getOperandTypes(), isLegalType) &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
    58147:  219:         llvm::all_of(op->getResultTypes(), isLegalType) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    19351:  220:         llvm::all_of(attrs, isLegalAttr);
call    0 returned 100%
        -:  221:}
        -:  222:
        -:  223:std::unique_ptr<ConversionTarget>
function _ZN4mlir5spirv34getMemorySpaceToStorageClassTargetERNS_11MLIRContextE called 848 returned 100% blocks executed 100%
      848:  224:spirv::getMemorySpaceToStorageClassTarget(MLIRContext &context) {
      848:  225:  auto target = std::make_unique<ConversionTarget>(context);
call    0 returned 100%
      848:  226:  target->markUnknownOpDynamicallyLegal(isLegalOp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      848:  227:  return target;
        -:  228:}
        -:  229:
        -:  230://===----------------------------------------------------------------------===//
        -:  231:// Conversion Pattern
        -:  232://===----------------------------------------------------------------------===//
        -:  233:
        -:  234:namespace {
        -:  235:/// Converts any op that has operands/results/attributes with numeric MemRef
        -:  236:/// memory spaces.
        -:  237:struct MapMemRefStoragePattern final : public ConversionPattern {
        -:  238:  MapMemRefStoragePattern(MLIRContext *context, TypeConverter &converter)
        -:  239:      : ConversionPattern(converter, MatchAnyOpTypeTag(), 1, context) {}
        -:  240:
        -:  241:  LogicalResult
        -:  242:  matchAndRewrite(Operation *op, ArrayRef<Value> operands,
        -:  243:                  ConversionPatternRewriter &rewriter) const override;
        -:  244:};
        -:  245:} // namespace
        -:  246:
function _ZNK12_GLOBAL__N_123MapMemRefStoragePattern15matchAndRewriteEPN4mlir9OperationEN4llvm8ArrayRefINS1_5ValueEEERNS1_25ConversionPatternRewriterE called 26 returned 100% blocks executed 92%
       26:  247:LogicalResult MapMemRefStoragePattern::matchAndRewrite(
        -:  248:    Operation *op, ArrayRef<Value> operands,
        -:  249:    ConversionPatternRewriter &rewriter) const {
       26:  250:  llvm::SmallVector<NamedAttribute, 4> newAttrs;
call    0 returned 100%
       26:  251:  newAttrs.reserve(op->getAttrs().size());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       38:  252:  for (auto attr : op->getAttrs()) {
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
       12:  253:    if (auto typeAttr = attr.getValue().dyn_cast<TypeAttr>()) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        3:  254:      auto newAttr = getTypeConverter()->convertType(typeAttr.getValue());
call    0 returned 100%
call    1 returned 100%
        3:  255:      newAttrs.emplace_back(attr.getName(), TypeAttr::get(newAttr));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  256:    } else {
        9:  257:      newAttrs.push_back(attr);
call    0 returned 100%
        -:  258:    }
        -:  259:  }
        -:  260:
       52:  261:  llvm::SmallVector<Type, 4> newResults;
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       52:  262:  (void)getTypeConverter()->convertTypes(op->getResultTypes(), newResults);
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
call    3 returned 100%
        -:  263:
       26:  264:  OperationState state(op->getLoc(), op->getName().getStringRef(), operands,
call    0 returned 100%
       78:  265:                       newResults, newAttrs, op->getSuccessors());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  266:
       32:  267:  for (Region &region : op->getRegions()) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        3:  268:    Region *newRegion = state.addRegion();
call    0 returned 100%
        3:  269:    rewriter.inlineRegionBefore(region, *newRegion, newRegion->begin());
call    0 returned 100%
        6:  270:    TypeConverter::SignatureConversion result(newRegion->getNumArguments());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3:  271:    (void)getTypeConverter()->convertSignatureArgs(
        3:  272:        newRegion->getArgumentTypes(), result);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3:  273:    rewriter.applySignatureConversion(newRegion, result);
call    0 returned 100%
        -:  274:  }
        -:  275:
       26:  276:  Operation *newOp = rewriter.create(state);
call    0 returned 100%
       46:  277:  rewriter.replaceOp(op, newOp->getResults());
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
call    3 returned 100%
       26:  278:  return success();
call    0 returned 100%
        -:  279:}
        -:  280:
function _ZN4mlir5spirv41populateMemorySpaceToStorageClassPatternsERNS0_34MemorySpaceToStorageClassConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     848*:  281:void spirv::populateMemorySpaceToStorageClassPatterns(
        -:  282:    spirv::MemorySpaceToStorageClassConverter &typeConverter,
        -:  283:    RewritePatternSet &patterns) {
    #####:  284:  patterns.add<MapMemRefStoragePattern>(patterns.getContext(), typeConverter);
call    0 never executed
    #####:  285:}
        -:  286:
        -:  287://===----------------------------------------------------------------------===//
        -:  288:// Conversion Pass
        -:  289://===----------------------------------------------------------------------===//
        -:  290:
        -:  291:namespace {
        -:  292:class MapMemRefStorageClassPass final
        -:  293:    : public impl::MapMemRefStorageClassBase<MapMemRefStorageClassPass> {
        -:  294:public:
   326593:  295:  explicit MapMemRefStorageClassPass() {
call    0 returned 100%
call    1 returned 100%
   326593:  296:    memorySpaceMap = spirv::mapMemorySpaceToVulkanStorageClass;
call    0 returned 100%
        -:  297:  }
        -:  298:  explicit MapMemRefStorageClassPass(
        -:  299:      const spirv::MemorySpaceToStorageClassMap &memorySpaceMap)
        -:  300:      : memorySpaceMap(memorySpaceMap) {}
        -:  301:
        -:  302:  LogicalResult initializeOptions(StringRef options) override;
        -:  303:
        -:  304:  void runOnOperation() override;
        -:  305:
        -:  306:private:
        -:  307:  spirv::MemorySpaceToStorageClassMap memorySpaceMap;
        -:  308:};
        -:  309:} // namespace
        -:  310:
function _ZN12_GLOBAL__N_125MapMemRefStorageClassPass17initializeOptionsEN4llvm9StringRefE called 1036 returned 100% blocks executed 62%
     1036:  311:LogicalResult MapMemRefStorageClassPass::initializeOptions(StringRef options) {
     1036:  312:  if (failed(Pass::initializeOptions(options)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  313:    return failure();
        -:  314:
     1036:  315:  if (clientAPI == "opencl") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  316:    memorySpaceMap = spirv::mapMemorySpaceToOpenCLStorageClass;
call    0 never executed
        -:  317:  }
        -:  318:
    1036*:  319:  if (clientAPI != "vulkan" && clientAPI != "opencl")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  320:    return failure();
        -:  321:
     1036:  322:  return success();
        -:  323:}
        -:  324:
function _ZN12_GLOBAL__N_125MapMemRefStorageClassPass14runOnOperationEv called 848 returned 100% blocks executed 50%
      848:  325:void MapMemRefStorageClassPass::runOnOperation() {
      848:  326:  MLIRContext *context = &getContext();
call    0 returned 100%
      848:  327:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  328:
      848:  329:  if (spirv::TargetEnvAttr attr = spirv::lookupTargetEnv(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  330:    spirv::TargetEnv targetEnv(attr);
call    0 never executed
    #####:  331:    if (targetEnv.allows(spirv::Capability::Kernel)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  332:      memorySpaceMap = spirv::mapMemorySpaceToOpenCLStorageClass;
call    0 never executed
    #####:  333:    } else if (targetEnv.allows(spirv::Capability::Shader)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:      memorySpaceMap = spirv::mapMemorySpaceToVulkanStorageClass;
call    0 never executed
        -:  335:    }
        -:  336:  }
        -:  337:
     1696:  338:  auto target = spirv::getMemorySpaceToStorageClassTarget(*context);
call    0 returned 100%
     1696:  339:  spirv::MemorySpaceToStorageClassConverter converter(memorySpaceMap);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  340:
     1696:  341:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      848:  342:  spirv::populateMemorySpaceToStorageClassPatterns(converter, patterns);
call    0 returned 100%
        -:  343:
      848:  344:  if (failed(applyFullConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  345:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  346:}
        -:  347:
function _ZN4mlir31createMapMemRefStorageClassPassEv called 326593 returned 100% blocks executed 100%
   326593:  348:std::unique_ptr<OperationPass<>> mlir::createMapMemRefStorageClassPass() {
   326593:  349:  return std::make_unique<MapMemRefStorageClassPass>();
call    0 returned 100%
        -:  350:}
