        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Parser/Parser.h
        -:    0:Graph:../tools/mlir/lib/Tools/mlir-opt/CMakeFiles/obj.MLIROptLib.dir/MlirOptMain.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Tools/mlir-opt/CMakeFiles/obj.MLIROptLib.dir/MlirOptMain.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- Parser.h - MLIR Parser Library Interface -----------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file is contains a unified interface for parsing serialized MLIR.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_PARSER_PARSER_H
        -:   14:#define MLIR_PARSER_PARSER_H
        -:   15:
        -:   16:#include "mlir/IR/AsmState.h"
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/IR/OwningOpRef.h"
        -:   19:#include <cstddef>
        -:   20:
        -:   21:namespace llvm {
        -:   22:class SourceMgr;
        -:   23:class SMDiagnostic;
        -:   24:class StringRef;
        -:   25:} // namespace llvm
        -:   26:
        -:   27:namespace mlir {
        -:   28:namespace detail {
        -:   29:
        -:   30:/// Given a block containing operations that have just been parsed, if the block
        -:   31:/// contains a single operation of `ContainerOpT` type then remove it from the
        -:   32:/// block and return it. If the block does not contain just that operation,
        -:   33:/// create a new operation instance of `ContainerOpT` and move all of the
        -:   34:/// operations within `parsedBlock` into the first block of the first region.
        -:   35:/// `ContainerOpT` is required to have a single region containing a single
        -:   36:/// block, and must implement the `SingleBlockImplicitTerminator` trait.
        -:   37:template <typename ContainerOpT>
    1102*:   38:inline OwningOpRef<ContainerOpT> constructContainerOpForParserIfNecessary(
        -:   39:    Block *parsedBlock, MLIRContext *context, Location sourceFileLoc) {
        -:   40:
        -:   41:  // Check to see if we parsed a single instance of this operation.
    1102*:   42:  if (llvm::hasSingleElement(*parsedBlock)) {
    1102*:   43:    if (ContainerOpT op = dyn_cast<ContainerOpT>(&parsedBlock->front())) {
    1102*:   44:      op->remove();
    1102*:   45:      return op;
        -:   46:    }
        -:   47:  }
        -:   48:
        -:   49:  // If not, then build a new top-level op if a concrete operation type was
        -:   50:  // specified.
        -:   51:  if constexpr (std::is_same_v<ContainerOpT, Operation *>) {
        -:   52:    return emitError(sourceFileLoc)
    #####:   53:               << "source must contain a single top-level operation, found: "
    #####:   54:               << parsedBlock->getOperations().size(),
    #####:   55:           nullptr;
        -:   56:  } else {
        -:   57:    static_assert(
        -:   58:        ContainerOpT::template hasTrait<OpTrait::OneRegion>() &&
        -:   59:            (ContainerOpT::template hasTrait<OpTrait::NoTerminator>() ||
        -:   60:             OpTrait::template hasSingleBlockImplicitTerminator<
        -:   61:                 ContainerOpT>::value),
        -:   62:        "Expected `ContainerOpT` to have a single region with a single "
        -:   63:        "block that has an implicit terminator or does not require one");
        -:   64:
    #####:   65:    OpBuilder builder(context);
    #####:   66:    ContainerOpT op = builder.create<ContainerOpT>(sourceFileLoc);
    #####:   67:    OwningOpRef<ContainerOpT> opRef(op);
    #####:   68:    assert(op->getNumRegions() == 1 &&
        -:   69:           llvm::hasSingleElement(op->getRegion(0)) &&
        -:   70:           "expected generated operation to have a single region with a single "
        -:   71:           "block");
    #####:   72:    Block *opBlock = &op->getRegion(0).front();
    #####:   73:    opBlock->getOperations().splice(opBlock->begin(),
    #####:   74:                                    parsedBlock->getOperations());
        -:   75:
        -:   76:    // After splicing, verify just this operation to ensure it can properly
        -:   77:    // contain the operations inside of it.
    #####:   78:    if (failed(op.verifyInvariants()))
    #####:   79:      return OwningOpRef<ContainerOpT>();
    #####:   80:    return opRef;
        -:   81:  }
        -:   82:}
------------------
_ZN4mlir6detail40constructContainerOpForParserIfNecessaryIPNS_9OperationEEENS_11OwningOpRefIT_EEPNS_5BlockEPNS_11MLIRContextENS_8LocationE:
function _ZN4mlir6detail40constructContainerOpForParserIfNecessaryIPNS_9OperationEEENS_11OwningOpRefIT_EEPNS_5BlockEPNS_11MLIRContextENS_8LocationE called 1102 returned 100% blocks executed 44%
     1102:   38:inline OwningOpRef<ContainerOpT> constructContainerOpForParserIfNecessary(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   39:    Block *parsedBlock, MLIRContext *context, Location sourceFileLoc) {
        -:   40:
        -:   41:  // Check to see if we parsed a single instance of this operation.
    1102*:   42:  if (llvm::hasSingleElement(*parsedBlock)) {
call    0 returned 100%
     1102:   43:    if (ContainerOpT op = dyn_cast<ContainerOpT>(&parsedBlock->front())) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1102:   44:      op->remove();
call    0 returned 100%
     1102:   45:      return op;
        -:   46:    }
        -:   47:  }
        -:   48:
        -:   49:  // If not, then build a new top-level op if a concrete operation type was
        -:   50:  // specified.
        -:   51:  if constexpr (std::is_same_v<ContainerOpT, Operation *>) {
        -:   52:    return emitError(sourceFileLoc)
    #####:   53:               << "source must contain a single top-level operation, found: "
call    0 never executed
call    1 never executed
    #####:   54:               << parsedBlock->getOperations().size(),
call    0 never executed
call    1 never executed
    #####:   55:           nullptr;
call    0 never executed
        -:   56:  } else {
        -:   57:    static_assert(
        -:   58:        ContainerOpT::template hasTrait<OpTrait::OneRegion>() &&
        -:   59:            (ContainerOpT::template hasTrait<OpTrait::NoTerminator>() ||
        -:   60:             OpTrait::template hasSingleBlockImplicitTerminator<
        -:   61:                 ContainerOpT>::value),
        -:   62:        "Expected `ContainerOpT` to have a single region with a single "
        -:   63:        "block that has an implicit terminator or does not require one");
        -:   64:
        -:   65:    OpBuilder builder(context);
        -:   66:    ContainerOpT op = builder.create<ContainerOpT>(sourceFileLoc);
        -:   67:    OwningOpRef<ContainerOpT> opRef(op);
        -:   68:    assert(op->getNumRegions() == 1 &&
        -:   69:           llvm::hasSingleElement(op->getRegion(0)) &&
        -:   70:           "expected generated operation to have a single region with a single "
        -:   71:           "block");
        -:   72:    Block *opBlock = &op->getRegion(0).front();
        -:   73:    opBlock->getOperations().splice(opBlock->begin(),
        -:   74:                                    parsedBlock->getOperations());
        -:   75:
        -:   76:    // After splicing, verify just this operation to ensure it can properly
        -:   77:    // contain the operations inside of it.
        -:   78:    if (failed(op.verifyInvariants()))
        -:   79:      return OwningOpRef<ContainerOpT>();
        -:   80:    return opRef;
        -:   81:  }
        -:   82:}
------------------
_ZN4mlir6detail40constructContainerOpForParserIfNecessaryINS_8ModuleOpEEENS_11OwningOpRefIT_EEPNS_5BlockEPNS_11MLIRContextENS_8LocationE:
function _ZN4mlir6detail40constructContainerOpForParserIfNecessaryINS_8ModuleOpEEENS_11OwningOpRefIT_EEPNS_5BlockEPNS_11MLIRContextENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   38:inline OwningOpRef<ContainerOpT> constructContainerOpForParserIfNecessary(
branch  0 never executed
branch  1 never executed
        -:   39:    Block *parsedBlock, MLIRContext *context, Location sourceFileLoc) {
        -:   40:
        -:   41:  // Check to see if we parsed a single instance of this operation.
    #####:   42:  if (llvm::hasSingleElement(*parsedBlock)) {
call    0 never executed
call    1 never executed
    #####:   43:    if (ContainerOpT op = dyn_cast<ContainerOpT>(&parsedBlock->front())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   44:      op->remove();
call    0 never executed
    #####:   45:      return op;
        -:   46:    }
        -:   47:  }
        -:   48:
        -:   49:  // If not, then build a new top-level op if a concrete operation type was
        -:   50:  // specified.
        -:   51:  if constexpr (std::is_same_v<ContainerOpT, Operation *>) {
        -:   52:    return emitError(sourceFileLoc)
        -:   53:               << "source must contain a single top-level operation, found: "
        -:   54:               << parsedBlock->getOperations().size(),
        -:   55:           nullptr;
        -:   56:  } else {
        -:   57:    static_assert(
        -:   58:        ContainerOpT::template hasTrait<OpTrait::OneRegion>() &&
        -:   59:            (ContainerOpT::template hasTrait<OpTrait::NoTerminator>() ||
        -:   60:             OpTrait::template hasSingleBlockImplicitTerminator<
        -:   61:                 ContainerOpT>::value),
        -:   62:        "Expected `ContainerOpT` to have a single region with a single "
        -:   63:        "block that has an implicit terminator or does not require one");
        -:   64:
    #####:   65:    OpBuilder builder(context);
    #####:   66:    ContainerOpT op = builder.create<ContainerOpT>(sourceFileLoc);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:    OwningOpRef<ContainerOpT> opRef(op);
    #####:   68:    assert(op->getNumRegions() == 1 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   69:           llvm::hasSingleElement(op->getRegion(0)) &&
        -:   70:           "expected generated operation to have a single region with a single "
        -:   71:           "block");
    #####:   72:    Block *opBlock = &op->getRegion(0).front();
call    0 never executed
call    1 never executed
    #####:   73:    opBlock->getOperations().splice(opBlock->begin(),
    #####:   74:                                    parsedBlock->getOperations());
call    0 never executed
        -:   75:
        -:   76:    // After splicing, verify just this operation to ensure it can properly
        -:   77:    // contain the operations inside of it.
    #####:   78:    if (failed(op.verifyInvariants()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:      return OwningOpRef<ContainerOpT>();
    #####:   80:    return opRef;
branch  0 never executed
branch  1 never executed
        -:   81:  }
        -:   82:}
------------------
        -:   83:} // namespace detail
        -:   84:
        -:   85:/// This parses the file specified by the indicated SourceMgr and appends parsed
        -:   86:/// operations to the given block. If the block is non-empty, the operations are
        -:   87:/// placed before the current terminator. If parsing is successful, success is
        -:   88:/// returned. Otherwise, an error message is emitted through the error handler
        -:   89:/// registered in the context, and failure is returned. If `sourceFileLoc` is
        -:   90:/// non-null, it is populated with a file location representing the start of the
        -:   91:/// source file that is being parsed.
        -:   92:LogicalResult parseSourceFile(const llvm::SourceMgr &sourceMgr, Block *block,
        -:   93:                              const ParserConfig &config,
        -:   94:                              LocationAttr *sourceFileLoc = nullptr);
        -:   95:
        -:   96:/// This parses the file specified by the indicated filename and appends parsed
        -:   97:/// operations to the given block. If the block is non-empty, the operations are
        -:   98:/// placed before the current terminator. If parsing is successful, success is
        -:   99:/// returned. Otherwise, an error message is emitted through the error handler
        -:  100:/// registered in the context, and failure is returned. If `sourceFileLoc` is
        -:  101:/// non-null, it is populated with a file location representing the start of the
        -:  102:/// source file that is being parsed.
        -:  103:LogicalResult parseSourceFile(llvm::StringRef filename, Block *block,
        -:  104:                              const ParserConfig &config,
        -:  105:                              LocationAttr *sourceFileLoc = nullptr);
        -:  106:
        -:  107:/// This parses the file specified by the indicated filename using the provided
        -:  108:/// SourceMgr and appends parsed operations to the given block. If the block is
        -:  109:/// non-empty, the operations are placed before the current terminator. If
        -:  110:/// parsing is successful, success is returned. Otherwise, an error message is
        -:  111:/// emitted through the error handler registered in the context, and failure is
        -:  112:/// returned. If `sourceFileLoc` is non-null, it is populated with a file
        -:  113:/// location representing the start of the source file that is being parsed.
        -:  114:LogicalResult parseSourceFile(llvm::StringRef filename,
        -:  115:                              llvm::SourceMgr &sourceMgr, Block *block,
        -:  116:                              const ParserConfig &config,
        -:  117:                              LocationAttr *sourceFileLoc = nullptr);
        -:  118:
        -:  119:/// This parses the IR string and appends parsed operations to the given block.
        -:  120:/// If the block is non-empty, the operations are placed before the current
        -:  121:/// terminator. If parsing is successful, success is returned. Otherwise, an
        -:  122:/// error message is emitted through the error handler registered in the
        -:  123:/// context, and failure is returned. If `sourceFileLoc` is non-null, it is
        -:  124:/// populated with a file location representing the start of the source file
        -:  125:/// that is being parsed.
        -:  126:LogicalResult parseSourceString(llvm::StringRef sourceStr, Block *block,
        -:  127:                                const ParserConfig &config,
        -:  128:                                LocationAttr *sourceFileLoc = nullptr);
        -:  129:
        -:  130:namespace detail {
        -:  131:/// The internal implementation of the templated `parseSourceFile` methods
        -:  132:/// below, that simply forwards to the non-templated version.
        -:  133:template <typename ContainerOpT, typename... ParserArgs>
   262108:  134:inline OwningOpRef<ContainerOpT> parseSourceFile(const ParserConfig &config,
        -:  135:                                                 ParserArgs &&...args) {
   262108:  136:  LocationAttr sourceFileLoc;
   262108:  137:  Block block;
   262108:  138:  if (failed(parseSourceFile(std::forward<ParserArgs>(args)..., &block, config,
        -:  139:                             &sourceFileLoc)))
   262108:  140:    return OwningOpRef<ContainerOpT>();
        -:  141:  return detail::constructContainerOpForParserIfNecessary<ContainerOpT>(
   171750:  142:      &block, config.getContext(), sourceFileLoc);
        -:  143:}
------------------
_ZN4mlir6detail15parseSourceFileIPNS_9OperationEJRKN4llvm9SourceMgrEEEENS_11OwningOpRefIT_EERKNS_12ParserConfigEDpOT0_:
function _ZN4mlir6detail15parseSourceFileIPNS_9OperationEJRKN4llvm9SourceMgrEEEENS_11OwningOpRefIT_EERKNS_12ParserConfigEDpOT0_ called 1669 returned 100% blocks executed 90%
     1669:  134:inline OwningOpRef<ContainerOpT> parseSourceFile(const ParserConfig &config,
        -:  135:                                                 ParserArgs &&...args) {
     1669:  136:  LocationAttr sourceFileLoc;
call    0 returned 100%
     1669:  137:  Block block;
call    0 returned 100%
     1669:  138:  if (failed(parseSourceFile(std::forward<ParserArgs>(args)..., &block, config,
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
        -:  139:                             &sourceFileLoc)))
     1669:  140:    return OwningOpRef<ContainerOpT>();
call    0 returned 100%
        -:  141:  return detail::constructContainerOpForParserIfNecessary<ContainerOpT>(
     1102:  142:      &block, config.getContext(), sourceFileLoc);
call    0 returned 100%
        -:  143:}
------------------
_ZN4mlir6detail15parseSourceFileINS_8ModuleOpEJRKN4llvm9SourceMgrEEEENS_11OwningOpRefIT_EERKNS_12ParserConfigEDpOT0_:
function _ZN4mlir6detail15parseSourceFileINS_8ModuleOpEJRKN4llvm9SourceMgrEEEENS_11OwningOpRefIT_EERKNS_12ParserConfigEDpOT0_ called 260439 returned 100% blocks executed 90%
   260439:  134:inline OwningOpRef<ContainerOpT> parseSourceFile(const ParserConfig &config,
        -:  135:                                                 ParserArgs &&...args) {
   260439:  136:  LocationAttr sourceFileLoc;
call    0 returned 100%
   260439:  137:  Block block;
call    0 returned 100%
   260439:  138:  if (failed(parseSourceFile(std::forward<ParserArgs>(args)..., &block, config,
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
        -:  139:                             &sourceFileLoc)))
   260439:  140:    return OwningOpRef<ContainerOpT>();
call    0 returned 100%
        -:  141:  return detail::constructContainerOpForParserIfNecessary<ContainerOpT>(
   170648:  142:      &block, config.getContext(), sourceFileLoc);
call    0 returned 100%
        -:  143:}
------------------
        -:  144:} // namespace detail
        -:  145:
        -:  146:/// This parses the file specified by the indicated SourceMgr. If the source IR
        -:  147:/// contained a single instance of `ContainerOpT`, it is returned. Otherwise, a
        -:  148:/// new instance of `ContainerOpT` is constructed containing all of the parsed
        -:  149:/// operations. If parsing was not successful, null is returned and an error
        -:  150:/// message is emitted through the error handler registered in the context, and
        -:  151:/// failure is returned. `ContainerOpT` is required to have a single region
        -:  152:/// containing a single block, and must implement the
        -:  153:/// `SingleBlockImplicitTerminator` trait.
        -:  154:template <typename ContainerOpT = Operation *>
        -:  155:inline OwningOpRef<ContainerOpT>
   262108:  156:parseSourceFile(const llvm::SourceMgr &sourceMgr, const ParserConfig &config) {
   262108:  157:  return detail::parseSourceFile<ContainerOpT>(config, sourceMgr);
call    0 returned 100%
call    1 returned 100%
        -:  158:}
        -:  159:
        -:  160:/// This parses the file specified by the indicated filename. If the source IR
        -:  161:/// contained a single instance of `ContainerOpT`, it is returned. Otherwise, a
        -:  162:/// new instance of `ContainerOpT` is constructed containing all of the parsed
        -:  163:/// operations. If parsing was not successful, null is returned and an error
        -:  164:/// message is emitted through the error handler registered in the context, and
        -:  165:/// failure is returned. `ContainerOpT` is required to have a single region
        -:  166:/// containing a single block, and must implement the
        -:  167:/// `SingleBlockImplicitTerminator` trait.
        -:  168:template <typename ContainerOpT = Operation *>
        -:  169:inline OwningOpRef<ContainerOpT> parseSourceFile(StringRef filename,
        -:  170:                                                 const ParserConfig &config) {
        -:  171:  return detail::parseSourceFile<ContainerOpT>(config, filename);
        -:  172:}
        -:  173:
        -:  174:/// This parses the file specified by the indicated filename using the provided
        -:  175:/// SourceMgr. If the source IR contained a single instance of `ContainerOpT`,
        -:  176:/// it is returned. Otherwise, a new instance of `ContainerOpT` is constructed
        -:  177:/// containing all of the parsed operations. If parsing was not successful, null
        -:  178:/// is returned and an error message is emitted through the error handler
        -:  179:/// registered in the context, and failure is returned. `ContainerOpT` is
        -:  180:/// required to have a single region containing a single block, and must
        -:  181:/// implement the `SingleBlockImplicitTerminator` trait.
        -:  182:template <typename ContainerOpT = Operation *>
        -:  183:inline OwningOpRef<ContainerOpT> parseSourceFile(llvm::StringRef filename,
        -:  184:                                                 llvm::SourceMgr &sourceMgr,
        -:  185:                                                 const ParserConfig &config) {
        -:  186:  return detail::parseSourceFile<ContainerOpT>(config, filename, sourceMgr);
        -:  187:}
        -:  188:
        -:  189:/// This parses the provided string containing MLIR. If the source IR contained
        -:  190:/// a single instance of `ContainerOpT`, it is returned. Otherwise, a new
        -:  191:/// instance of `ContainerOpT` is constructed containing all of the parsed
        -:  192:/// operations. If parsing was not successful, null is returned and an error
        -:  193:/// message is emitted through the error handler registered in the context, and
        -:  194:/// failure is returned. `ContainerOpT` is required to have a single region
        -:  195:/// containing a single block, and must implement the
        -:  196:/// `SingleBlockImplicitTerminator` trait.
        -:  197:template <typename ContainerOpT = Operation *>
        -:  198:inline OwningOpRef<ContainerOpT> parseSourceString(llvm::StringRef sourceStr,
        -:  199:                                                   const ParserConfig &config) {
        -:  200:  LocationAttr sourceFileLoc;
        -:  201:  Block block;
        -:  202:  if (failed(parseSourceString(sourceStr, &block, config, &sourceFileLoc)))
        -:  203:    return OwningOpRef<ContainerOpT>();
        -:  204:  return detail::constructContainerOpForParserIfNecessary<ContainerOpT>(
        -:  205:      &block, config.getContext(), sourceFileLoc);
        -:  206:}
        -:  207:
        -:  208:} // namespace mlir
        -:  209:
        -:  210:#endif // MLIR_PARSER_PARSER_H
