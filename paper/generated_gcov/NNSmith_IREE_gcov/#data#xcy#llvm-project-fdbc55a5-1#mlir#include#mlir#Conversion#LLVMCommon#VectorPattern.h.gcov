        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Conversion/LLVMCommon/VectorPattern.h
        -:    0:Graph:../tools/mlir/lib/Conversion/VectorToLLVM/CMakeFiles/obj.MLIRVectorToLLVM.dir/ConvertVectorToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/VectorToLLVM/CMakeFiles/obj.MLIRVectorToLLVM.dir/ConvertVectorToLLVM.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- VectorPattern.h - Conversion pattern to the LLVM dialect -*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_CONVERSION_LLVMCOMMON_VECTORPATTERN_H
        -:   10:#define MLIR_CONVERSION_LLVMCOMMON_VECTORPATTERN_H
        -:   11:
        -:   12:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   13:#include "mlir/Transforms/DialectConversion.h"
        -:   14:
        -:   15:namespace mlir {
        -:   16:
        -:   17:namespace LLVM {
        -:   18:namespace detail {
        -:   19:// Helper struct to "unroll" operations on n-D vectors in terms of operations on
        -:   20:// 1-D LLVM vectors.
    #####:   21:struct NDVectorTypeInfo {
branch  0 never executed
branch  1 never executed
        -:   22:  // LLVM array struct which encodes n-D vectors.
        -:   23:  Type llvmNDVectorTy;
        -:   24:  // LLVM vector type which encodes the inner 1-D vector type.
        -:   25:  Type llvm1DVectorTy;
        -:   26:  // Multiplicity of llvmNDVectorTy to llvm1DVectorTy.
        -:   27:  SmallVector<int64_t, 4> arraySizes;
        -:   28:};
        -:   29:
        -:   30:// For >1-D vector types, extracts the necessary information to iterate over all
        -:   31:// 1-D subvectors in the underlying llrepresentation of the n-D vector
        -:   32:// Iterates on the llvm array type until we hit a non-array type (which is
        -:   33:// asserted to be an llvm vector type).
        -:   34:NDVectorTypeInfo extractNDVectorTypeInfo(VectorType vectorType,
        -:   35:                                         LLVMTypeConverter &converter);
        -:   36:
        -:   37:// Express `linearIndex` in terms of coordinates of `basis`.
        -:   38:// Returns the empty vector when linearIndex is out of the range [0, P] where
        -:   39:// P is the product of all the basis coordinates.
        -:   40://
        -:   41:// Prerequisites:
        -:   42://   Basis is an array of nonnegative integers (signed type inherited from
        -:   43://   vector shape type).
        -:   44:SmallVector<int64_t, 4> getCoordinates(ArrayRef<int64_t> basis,
        -:   45:                                       unsigned linearIndex);
        -:   46:
        -:   47:// Iterate of linear index, convert to coords space and insert splatted 1-D
        -:   48:// vector in each position.
        -:   49:void nDVectorIterate(const NDVectorTypeInfo &info, OpBuilder &builder,
        -:   50:                     function_ref<void(ArrayRef<int64_t>)> fun);
        -:   51:
        -:   52:LogicalResult handleMultidimensionalVectors(
        -:   53:    Operation *op, ValueRange operands, LLVMTypeConverter &typeConverter,
        -:   54:    std::function<Value(Type, ValueRange)> createOperand,
        -:   55:    ConversionPatternRewriter &rewriter);
        -:   56:
        -:   57:LogicalResult vectorOneToOneRewrite(Operation *op, StringRef targetOp,
        -:   58:                                    ValueRange operands,
        -:   59:                                    ArrayRef<NamedAttribute> targetAttrs,
        -:   60:                                    LLVMTypeConverter &typeConverter,
        -:   61:                                    ConversionPatternRewriter &rewriter);
        -:   62:} // namespace detail
        -:   63:} // namespace LLVM
        -:   64:
        -:   65:// Default attribute conversion class, which passes all source attributes
        -:   66:// through to the target op, unmodified.
        -:   67:template <typename SourceOp, typename TargetOp>
        -:   68:class AttrConvertPassThrough {
        -:   69:public:
        -:   70:  AttrConvertPassThrough(SourceOp srcOp) : srcAttrs(srcOp->getAttrs()) {}
        -:   71:
        -:   72:  ArrayRef<NamedAttribute> getAttrs() const { return srcAttrs; }
        -:   73:
        -:   74:private:
        -:   75:  ArrayRef<NamedAttribute> srcAttrs;
        -:   76:};
        -:   77:
        -:   78:/// Basic lowering implementation to rewrite Ops with just one result to the
        -:   79:/// LLVM Dialect. This supports higher-dimensional vector types.
        -:   80:/// The AttrConvert template template parameter should be a template class
        -:   81:/// with SourceOp and TargetOp type parameters, a constructor that takes
        -:   82:/// a SourceOp instance, and a getAttrs() method that returns
        -:   83:/// ArrayRef<NamedAttribute>.
        -:   84:template <typename SourceOp, typename TargetOp,
        -:   85:          template <typename, typename> typename AttrConvert =
        -:   86:              AttrConvertPassThrough>
        -:   87:class VectorConvertToLLVMPattern : public ConvertOpToLLVMPattern<SourceOp> {
        -:   88:public:
        -:   89:  using ConvertOpToLLVMPattern<SourceOp>::ConvertOpToLLVMPattern;
        -:   90:  using Super = VectorConvertToLLVMPattern<SourceOp, TargetOp>;
        -:   91:
        -:   92:  LogicalResult
        -:   93:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
        -:   94:                  ConversionPatternRewriter &rewriter) const override {
        -:   95:    static_assert(
        -:   96:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   97:        "expected single result op");
        -:   98:    // Determine attributes for the target op
        -:   99:    AttrConvert<SourceOp, TargetOp> attrConvert(op);
        -:  100:
        -:  101:    return LLVM::detail::vectorOneToOneRewrite(
        -:  102:        op, TargetOp::getOperationName(), adaptor.getOperands(),
        -:  103:        attrConvert.getAttrs(), *this->getTypeConverter(), rewriter);
        -:  104:  }
        -:  105:};
        -:  106:} // namespace mlir
        -:  107:
        -:  108:#endif // MLIR_CONVERSION_LLVMCOMMON_VECTORPATTERN_H
