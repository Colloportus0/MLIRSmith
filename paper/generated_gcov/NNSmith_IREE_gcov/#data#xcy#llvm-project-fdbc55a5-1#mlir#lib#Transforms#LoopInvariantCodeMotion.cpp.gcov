        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Transforms/LoopInvariantCodeMotion.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/LoopInvariantCodeMotion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/LoopInvariantCodeMotion.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- LoopInvariantCodeMotion.cpp - Code to perform loop fusion-----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop invariant code motion.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Interfaces/LoopLikeInterface.h"
        -:   16:#include "mlir/Transforms/LoopInvariantCodeMotionUtils.h"
        -:   17:#include "mlir/Transforms/SideEffectUtils.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_LOOPINVARIANTCODEMOTION
        -:   21:#include "mlir/Transforms/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:/// Loop invariant code motion (LICM) pass.
  327641*:   28:struct LoopInvariantCodeMotion
call    0 never executed
call    1 returned 100%
        -:   29:    : public impl::LoopInvariantCodeMotionBase<LoopInvariantCodeMotion> {
        -:   30:  void runOnOperation() override;
        -:   31:};
        -:   32:} // namespace
        -:   33:
function _ZN12_GLOBAL__N_123LoopInvariantCodeMotion14runOnOperationEv called 1862 returned 100% blocks executed 75%
     1862:   34:void LoopInvariantCodeMotion::runOnOperation() {
        -:   35:  // Walk through all loops in a function in innermost-loop-first order. This
        -:   36:  // way, we first LICM from the inner loop, and place the ops in
        -:   37:  // the outer loop, which in turn can be further LICM'ed.
     1862:   38:  getOperation()->walk(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    #####:   39:      [&](LoopLikeOpInterface loopLike) { moveLoopInvariantCode(loopLike); });
call    0 never executed
     1862:   40:}
        -:   41:
function _ZN4mlir33createLoopInvariantCodeMotionPassEv called 327639 returned 100% blocks executed 100%
   327639:   42:std::unique_ptr<Pass> mlir::createLoopInvariantCodeMotionPass() {
   327639:   43:  return std::make_unique<LoopInvariantCodeMotion>();
call    0 returned 100%
        -:   44:}
