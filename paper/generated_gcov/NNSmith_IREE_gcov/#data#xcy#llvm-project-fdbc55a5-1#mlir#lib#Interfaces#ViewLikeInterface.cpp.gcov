        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Interfaces/ViewLikeInterface.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRViewLikeInterface.dir/ViewLikeInterface.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRViewLikeInterface.dir/ViewLikeInterface.cpp.gcda
        -:    0:Runs:325597
        -:    1://===- ViewLikeInterface.cpp - View-like operations in MLIR ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/ViewLikeInterface.h"
        -:   10:
        -:   11:using namespace mlir;
        -:   12:
        -:   13://===----------------------------------------------------------------------===//
        -:   14:// ViewLike Interfaces
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:/// Include the definitions of the loop-like interfaces.
        -:   18:#include "mlir/Interfaces/ViewLikeInterface.cpp.inc"
        -:   19:
function _ZN4mlir30verifyListOfOperandsOrIntegersEPNS_9OperationEN4llvm9StringRefEjNS_9ArrayAttrENS_10ValueRangeENS2_12function_refIFblEEE called 0 returned 0% blocks executed 0%
    #####:   20:LogicalResult mlir::verifyListOfOperandsOrIntegers(
        -:   21:    Operation *op, StringRef name, unsigned numElements, ArrayAttr attr,
        -:   22:    ValueRange values, llvm::function_ref<bool(int64_t)> isDynamic) {
        -:   23:  /// Check static and dynamic offsets/sizes/strides does not overflow type.
    #####:   24:  if (attr.size() != numElements)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   25:    return op->emitError("expected ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   26:           << numElements << " " << name << " values";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   27:  unsigned expectedNumDynamicEntries =
function _ZZN4mlir30verifyListOfOperandsOrIntegersEPNS_9OperationEN4llvm9StringRefEjNS_9ArrayAttrENS_10ValueRangeENS2_12function_refIFblEEEENKUlNS_9AttributeEE_clES9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   28:      llvm::count_if(attr.getValue(), [&](Attribute attr) {
call    0 never executed
call    1 never executed
    #####:   29:        return isDynamic(attr.cast<IntegerAttr>().getInt());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   30:      });
    #####:   31:  if (values.size() != expectedNumDynamicEntries)
branch  0 never executed
branch  1 never executed
    #####:   32:    return op->emitError("expected ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   33:           << expectedNumDynamicEntries << " dynamic " << name << " values";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   34:  return success();
        -:   35:}
        -:   36:
        -:   37:LogicalResult
function _ZN4mlir6detail27verifyOffsetSizeAndStrideOpENS_30OffsetSizeAndStrideOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:   38:mlir::detail::verifyOffsetSizeAndStrideOp(OffsetSizeAndStrideOpInterface op) {
    #####:   39:  std::array<unsigned, 3> maxRanks = op.getArrayAttrMaxRanks();
call    0 never executed
        -:   40:  // Offsets can come in 2 flavors:
        -:   41:  //   1. Either single entry (when maxRanks == 1).
        -:   42:  //   2. Or as an array whose rank must match that of the mixed sizes.
        -:   43:  // So that the result type is well-formed.
    #####:   44:  if (!(op.getMixedOffsets().size() == 1 && maxRanks[0] == 1) && // NOLINT
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   45:      op.getMixedOffsets().size() != op.getMixedSizes().size())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   46:    return op->emitError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:   47:               "expected mixed offsets rank to match mixed sizes rank (")
    #####:   48:           << op.getMixedOffsets().size() << " vs " << op.getMixedSizes().size()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:   49:           << ") so the rank of the result type is well-formed.";
call    0 never executed
        -:   50:  // Ranks of mixed sizes and strides must always match so the result type is
        -:   51:  // well-formed.
    #####:   52:  if (op.getMixedSizes().size() != op.getMixedStrides().size())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   53:    return op->emitError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:   54:               "expected mixed sizes rank to match mixed strides rank (")
    #####:   55:           << op.getMixedSizes().size() << " vs " << op.getMixedStrides().size()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:   56:           << ") so the rank of the result type is well-formed.";
call    0 never executed
        -:   57:
    #####:   58:  if (failed(verifyListOfOperandsOrIntegers(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   59:          op, "offset", maxRanks[0], op.static_offsets(), op.offsets(),
call    0 never executed
        -:   60:          ShapedType::isDynamicStrideOrOffset)))
    #####:   61:    return failure();
    #####:   62:  if (failed(verifyListOfOperandsOrIntegers(op, "size", maxRanks[1],
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   63:                                            op.static_sizes(), op.sizes(),
        -:   64:                                            ShapedType::isDynamic)))
    #####:   65:    return failure();
    #####:   66:  if (failed(verifyListOfOperandsOrIntegers(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   67:          op, "stride", maxRanks[2], op.static_strides(), op.strides(),
call    0 never executed
        -:   68:          ShapedType::isDynamicStrideOrOffset)))
    #####:   69:    return failure();
    #####:   70:  return success();
        -:   71:}
        -:   72:
function _ZN4mlir21printDynamicIndexListERNS_12OpAsmPrinterEPNS_9OperationENS_12OperandRangeENS_9ArrayAttrEl called 0 returned 0% blocks executed 0%
    #####:   73:void mlir::printDynamicIndexList(OpAsmPrinter &printer, Operation *op,
        -:   74:                                 OperandRange values, ArrayAttr integers,
        -:   75:                                 int64_t dynVal) {
    #####:   76:  printer << '[';
call    0 never executed
    #####:   77:  if (integers.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:    printer << "]";
call    0 never executed
    #####:   79:    return;
        -:   80:  }
    #####:   81:  unsigned idx = 0;
function _ZZN4mlir21printDynamicIndexListERNS_12OpAsmPrinterEPNS_9OperationENS_12OperandRangeENS_9ArrayAttrElENKUlNS_9AttributeEE_clES6_ called 0 returned 0% blocks executed 0%
    #####:   82:  llvm::interleaveComma(integers, printer, [&](Attribute a) {
call    0 never executed
    #####:   83:    int64_t val = a.cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
    #####:   84:    if (val == dynVal)
branch  0 never executed
branch  1 never executed
    #####:   85:      printer << values[idx++];
call    0 never executed
call    1 never executed
        -:   86:    else
    #####:   87:      printer << val;
call    0 never executed
    #####:   88:  });
    #####:   89:  printer << ']';
call    0 never executed
        -:   90:}
        -:   91:
function _ZN4mlir21parseDynamicIndexListERNS_11OpAsmParserERN4llvm15SmallVectorImplINS0_17UnresolvedOperandEEERNS_9ArrayAttrEl called 0 returned 0% blocks executed 0%
    #####:   92:ParseResult mlir::parseDynamicIndexList(
        -:   93:    OpAsmParser &parser,
        -:   94:    SmallVectorImpl<OpAsmParser::UnresolvedOperand> &values,
        -:   95:    ArrayAttr &integers, int64_t dynVal) {
    #####:   96:  if (failed(parser.parseLSquare()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   97:    return failure();
        -:   98:  // 0-D.
    #####:   99:  if (succeeded(parser.parseOptionalRSquare())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  100:    integers = parser.getBuilder().getArrayAttr({});
call    0 never executed
call    1 never executed
    #####:  101:    return success();
        -:  102:  }
        -:  103:
    #####:  104:  SmallVector<int64_t, 4> attrVals;
    #####:  105:  while (true) {
    #####:  106:    OpAsmParser::UnresolvedOperand operand;
call    0 never executed
    #####:  107:    auto res = parser.parseOptionalOperand(operand);
call    0 never executed
    #####:  108:    if (res.has_value() && succeeded(res.value())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  109:      values.push_back(operand);
call    0 never executed
    #####:  110:      attrVals.push_back(dynVal);
call    0 never executed
        -:  111:    } else {
    #####:  112:      IntegerAttr attr;
    #####:  113:      if (failed(parser.parseAttribute<IntegerAttr>(attr)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  114:        return parser.emitError(parser.getNameLoc())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  115:               << "expected SSA value or integer";
call    0 never executed
call    1 never executed
    #####:  116:      attrVals.push_back(attr.getInt());
call    0 never executed
call    1 never executed
        -:  117:    }
        -:  118:
    #####:  119:    if (succeeded(parser.parseOptionalComma()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  120:      continue;
    #####:  121:    if (failed(parser.parseRSquare()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  122:      return failure();
    #####:  123:    break;
        -:  124:  }
    #####:  125:  integers = parser.getBuilder().getI64ArrayAttr(attrVals);
call    0 never executed
call    1 never executed
    #####:  126:  return success();
        -:  127:}
        -:  128:
function _ZN4mlir6detail26sameOffsetsSizesAndStridesENS_30OffsetSizeAndStrideOpInterfaceES1_N4llvm12function_refIFbNS_12OpFoldResultES4_EEE called 0 returned 0% blocks executed 0%
    #####:  129:bool mlir::detail::sameOffsetsSizesAndStrides(
        -:  130:    OffsetSizeAndStrideOpInterface a, OffsetSizeAndStrideOpInterface b,
        -:  131:    llvm::function_ref<bool(OpFoldResult, OpFoldResult)> cmp) {
    #####:  132:  if (a.static_offsets().size() != b.static_offsets().size())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  133:    return false;
    #####:  134:  if (a.static_sizes().size() != b.static_sizes().size())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  135:    return false;
    #####:  136:  if (a.static_strides().size() != b.static_strides().size())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  137:    return false;
    #####:  138:  for (auto it : llvm::zip(a.getMixedOffsets(), b.getMixedOffsets()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  139:    if (!cmp(std::get<0>(it), std::get<1>(it)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:      return false;
call    0 never executed
    #####:  141:  for (auto it : llvm::zip(a.getMixedSizes(), b.getMixedSizes()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  142:    if (!cmp(std::get<0>(it), std::get<1>(it)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:      return false;
call    0 never executed
    #####:  144:  for (auto it : llvm::zip(a.getMixedStrides(), b.getMixedStrides()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  145:    if (!cmp(std::get<0>(it), std::get<1>(it)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  146:      return false;
call    0 never executed
    #####:  147:  return true;
        -:  148:}
        -:  149:
        -:  150:SmallVector<OpFoldResult, 4>
function _ZN4mlir14getMixedValuesENS_9ArrayAttrENS_10ValueRangeEl called 0 returned 0% blocks executed 0%
    #####:  151:mlir::getMixedValues(ArrayAttr staticValues, ValueRange dynamicValues,
        -:  152:                     const int64_t dynamicValueIndicator) {
    #####:  153:  SmallVector<OpFoldResult, 4> res;
call    0 never executed
    #####:  154:  res.reserve(staticValues.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  155:  unsigned numDynamic = 0;
    #####:  156:  unsigned count = static_cast<unsigned>(staticValues.size());
call    0 never executed
    #####:  157:  for (unsigned idx = 0; idx < count; ++idx) {
branch  0 never executed
branch  1 never executed
    #####:  158:    APInt value = staticValues[idx].cast<IntegerAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  159:    res.push_back(value.getSExtValue() == dynamicValueIndicator
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  160:                      ? OpFoldResult{dynamicValues[numDynamic++]}
call    0 never executed
        -:  161:                      : OpFoldResult{staticValues[idx]});
        -:  162:  }
    #####:  163:  return res;
        -:  164:}
        -:  165:
        -:  166:SmallVector<OpFoldResult, 4>
function _ZN4mlir24getMixedStridesOrOffsetsENS_9ArrayAttrENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  167:mlir::getMixedStridesOrOffsets(ArrayAttr staticValues,
        -:  168:                               ValueRange dynamicValues) {
    #####:  169:  return getMixedValues(staticValues, dynamicValues,
    #####:  170:                        ShapedType::kDynamicStrideOrOffset);
call    0 never executed
        -:  171:}
        -:  172:
function _ZN4mlir13getMixedSizesENS_9ArrayAttrENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  173:SmallVector<OpFoldResult, 4> mlir::getMixedSizes(ArrayAttr staticValues,
        -:  174:                                                 ValueRange dynamicValues) {
    #####:  175:  return getMixedValues(staticValues, dynamicValues, ShapedType::kDynamicSize);
call    0 never executed
        -:  176:}
        -:  177:
        -:  178:std::pair<ArrayAttr, SmallVector<Value>>
function _ZN4mlir20decomposeMixedValuesERNS_7BuilderERKN4llvm15SmallVectorImplINS_12OpFoldResultEEEl called 0 returned 0% blocks executed 0%
    #####:  179:mlir::decomposeMixedValues(Builder &b,
        -:  180:                           const SmallVectorImpl<OpFoldResult> &mixedValues,
        -:  181:                           const int64_t dynamicValueIndicator) {
    #####:  182:  SmallVector<int64_t> staticValues;
    #####:  183:  SmallVector<Value> dynamicValues;
branch  0 never executed
branch  1 never executed
    #####:  184:  for (const auto &it : mixedValues) {
branch  0 never executed
branch  1 never executed
    #####:  185:    if (it.is<Attribute>()) {
branch  0 never executed
branch  1 never executed
    #####:  186:      staticValues.push_back(it.get<Attribute>().cast<IntegerAttr>().getInt());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  187:    } else {
    #####:  188:      staticValues.push_back(dynamicValueIndicator);
call    0 never executed
    #####:  189:      dynamicValues.push_back(it.get<Value>());
call    0 never executed
call    1 never executed
        -:  190:    }
        -:  191:  }
    #####:  192:  return {b.getI64ArrayAttr(staticValues), dynamicValues};
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  193:}
        -:  194:
function _ZN4mlir30decomposeMixedStridesOrOffsetsERNS_9OpBuilderERKN4llvm15SmallVectorImplINS_12OpFoldResultEEE called 0 returned 0% blocks executed 0%
    #####:  195:std::pair<ArrayAttr, SmallVector<Value>> mlir::decomposeMixedStridesOrOffsets(
        -:  196:    OpBuilder &b, const SmallVectorImpl<OpFoldResult> &mixedValues) {
    #####:  197:  return decomposeMixedValues(b, mixedValues,
    #####:  198:                              ShapedType::kDynamicStrideOrOffset);
call    0 never executed
        -:  199:}
        -:  200:
        -:  201:std::pair<ArrayAttr, SmallVector<Value>>
function _ZN4mlir19decomposeMixedSizesERNS_9OpBuilderERKN4llvm15SmallVectorImplINS_12OpFoldResultEEE called 0 returned 0% blocks executed 0%
    #####:  202:mlir::decomposeMixedSizes(OpBuilder &b,
        -:  203:                          const SmallVectorImpl<OpFoldResult> &mixedValues) {
    #####:  204:  return decomposeMixedValues(b, mixedValues, ShapedType::kDynamicSize);
call    0 never executed
        -:  205:}
