        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Transforms/OpStats.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/OpStats.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/OpStats.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- OpStats.cpp - Prints stats of operations in module -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:#include "mlir/IR/Operation.h"
        -:   13:#include "mlir/IR/OperationSupport.h"
        -:   14:#include "llvm/ADT/DenseMap.h"
        -:   15:#include "llvm/Support/Format.h"
        -:   16:#include "llvm/Support/raw_ostream.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_PRINTOPSTATS
        -:   20:#include "mlir/Transforms/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:struct PrintOpStatsPass : public impl::PrintOpStatsBase<PrintOpStatsPass> {
   326643:   27:  explicit PrintOpStatsPass(raw_ostream &os) : os(os) {}
call    0 returned 100%
        -:   28:
function _ZN12_GLOBAL__N_116PrintOpStatsPassC2ERN4llvm11raw_ostreamEb called 0 returned 0% blocks executed 0%
    #####:   29:  explicit PrintOpStatsPass(raw_ostream &os, bool printAsJSON) : os(os) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   30:    this->printAsJSON = printAsJSON;
branch  0 never executed
branch  1 never executed
    #####:   31:  }
        -:   32:
        -:   33:  // Prints the resultant operation statistics post iterating over the module.
        -:   34:  void runOnOperation() override;
        -:   35:
        -:   36:  // Print summary of op stats.
        -:   37:  void printSummary();
        -:   38:
        -:   39:  // Print symmary of op stats in JSON.
        -:   40:  void printSummaryInJSON();
        -:   41:
        -:   42:private:
        -:   43:  llvm::StringMap<int64_t> opCount;
        -:   44:  raw_ostream &os;
        -:   45:};
        -:   46:} // namespace
        -:   47:
function _ZN12_GLOBAL__N_116PrintOpStatsPass14runOnOperationEv called 870 returned 100% blocks executed 75%
      870:   48:void PrintOpStatsPass::runOnOperation() {
      870:   49:  opCount.clear();
call    0 returned 100%
        -:   50:
        -:   51:  // Compute the operation statistics for the currently visited operation.
      870:   52:  getOperation()->walk(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
function _ZZN12_GLOBAL__N_116PrintOpStatsPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 11846 returned 100% blocks executed 100%
    11846:   53:      [&](Operation *op) { ++opCount[op->getName().getStringRef()]; });
call    0 returned 100%
call    1 returned 100%
      870:   54:  if (printAsJSON) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   55:    printSummaryInJSON();
call    0 never executed
        -:   56:  } else
      870:   57:    printSummary();
call    0 returned 100%
      870:   58:}
        -:   59:
function _ZN12_GLOBAL__N_116PrintOpStatsPass12printSummaryEv called 870 returned 100% blocks executed 89%
      870:   60:void PrintOpStatsPass::printSummary() {
      870:   61:  os << "Operations encountered:\n";
call    0 returned 100%
      870:   62:  os << "-----------------------\n";
call    0 returned 100%
     1740:   63:  SmallVector<StringRef, 64> sorted(opCount.keys());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      870:   64:  llvm::sort(sorted);
call    0 returned 100%
        -:   65:
        -:   66:  // Split an operation name from its dialect prefix.
function _ZZN12_GLOBAL__N_116PrintOpStatsPass12printSummaryEvENKUlN4llvm9StringRefEE_clES2_.isra.0 called 15310 returned 100% blocks executed 83%
    15310:   67:  auto splitOperationName = [](StringRef opName) {
    15310:   68:    auto splitName = opName.split('.');
call    0 returned 100%
   15310*:   69:    return splitName.second.empty() ? std::make_pair("", splitName.first)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    15310:   70:                                    : splitName;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   71:  };
        -:   72:
        -:   73:  // Compute the largest dialect and operation name.
      870:   74:  size_t maxLenOpName = 0, maxLenDialect = 0;
     8525:   75:  for (const auto &key : sorted) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     7655:   76:    auto [dialectName, opName] = splitOperationName(key);
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
     7655:   77:    maxLenDialect = std::max(maxLenDialect, dialectName.size());
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
     9451:   78:    maxLenOpName = std::max(maxLenOpName, opName.size());
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:   79:  }
        -:   80:
     8525:   81:  for (const auto &key : sorted) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     7655:   82:    auto [dialectName, opName] = splitOperationName(key);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   83:
        -:   84:    // Left-align the names (aligning on the dialect) and right-align the count
        -:   85:    // below. The alignment is for readability and does not affect CSV/FileCheck
        -:   86:    // parsing.
     7655:   87:    if (dialectName.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:      os.indent(maxLenDialect + 3);
call    0 never executed
        -:   89:    else
    15310:   90:      os << llvm::right_justify(dialectName, maxLenDialect + 2) << '.';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   91:
        -:   92:    // Left justify the operation name.
     7655:   93:    os << llvm::left_justify(opName, maxLenOpName) << " , " << opCount[key]
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
     7655:   94:       << '\n';
        -:   95:  }
      870:   96:}
        -:   97:
function _ZN12_GLOBAL__N_116PrintOpStatsPass18printSummaryInJSONEv called 0 returned 0% blocks executed 0%
    #####:   98:void PrintOpStatsPass::printSummaryInJSON() {
    #####:   99:  SmallVector<StringRef, 64> sorted(opCount.keys());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  100:  llvm::sort(sorted);
call    0 never executed
        -:  101:
    #####:  102:  os << "{\n";
call    0 never executed
        -:  103:
    #####:  104:  for (unsigned i = 0, e = sorted.size(); i != e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  105:    const auto &key = sorted[i];
branch  0 never executed
branch  1 never executed
    #####:  106:    os << "  \"" << key << "\" : " << opCount[key];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  107:    if (i != e - 1)
branch  0 never executed
branch  1 never executed
    #####:  108:      os << ",\n";
call    0 never executed
        -:  109:    else
    #####:  110:      os << "\n";
call    0 never executed
        -:  111:  }
    #####:  112:  os << "}\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:}
        -:  114:
function _ZN4mlir22createPrintOpStatsPassERN4llvm11raw_ostreamE called 326643 returned 100% blocks executed 100%
   326643:  115:std::unique_ptr<Pass> mlir::createPrintOpStatsPass(raw_ostream &os) {
   326643:  116:  return std::make_unique<PrintOpStatsPass>(os);
call    0 returned 100%
        -:  117:}
        -:  118:
function _ZN4mlir22createPrintOpStatsPassERN4llvm11raw_ostreamEb called 0 returned 0% blocks executed 0%
    #####:  119:std::unique_ptr<Pass> mlir::createPrintOpStatsPass(raw_ostream &os,
        -:  120:                                                   bool printAsJSON) {
    #####:  121:  return std::make_unique<PrintOpStatsPass>(os, printAsJSON);
call    0 never executed
        -:  122:}
