        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/AsmParser/Token.cpp
        -:    0:Graph:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/Token.cpp.gcno
        -:    0:Data:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/Token.cpp.gcda
        -:    0:Runs:325595
        -:    1://===- Token.cpp - MLIR Token Implementation ------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the Token class for the MLIR textual form.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "Token.h"
        -:   14:#include "llvm/ADT/StringExtras.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
function _ZNK4mlir5Token6getLocEv called 81700064 returned 100% blocks executed 100%
    #####:   18:SMLoc Token::getLoc() const { return SMLoc::getFromPointer(spelling.data()); }
call    0 never executed
        -:   19:
function _ZNK4mlir5Token9getEndLocEv called 0 returned 0% blocks executed 0%
    #####:   20:SMLoc Token::getEndLoc() const {
    #####:   21:  return SMLoc::getFromPointer(spelling.data() + spelling.size());
        -:   22:}
        -:   23:
function _ZNK4mlir5Token11getLocRangeEv called 0 returned 0% blocks executed 0%
    #####:   24:SMRange Token::getLocRange() const { return SMRange(getLoc(), getEndLoc()); }
call    0 never executed
        -:   25:
        -:   26:/// For an integer token, return its value as an unsigned.  If it doesn't fit,
        -:   27:/// return None.
function _ZNK4mlir5Token23getUnsignedIntegerValueEv called 28170 returned 100% blocks executed 78%
    28170:   28:Optional<unsigned> Token::getUnsignedIntegerValue() const {
    28170:   29:  bool isHex = spelling.size() > 1 && spelling[1] == 'x';
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   30:
    28170:   31:  unsigned result = 0;
   28170*:   32:  if (spelling.getAsInteger(isHex ? 0 : 10, result))
call    0 returned 100%
    #####:   33:    return None;
    28170:   34:  return result;
        -:   35:}
        -:   36:
        -:   37:/// For an integer token, return its value as a uint64_t.  If it doesn't fit,
        -:   38:/// return None.
function _ZN4mlir5Token21getUInt64IntegerValueEN4llvm9StringRefE called 41215828 returned 100% blocks executed 75%
 41215828:   39:Optional<uint64_t> Token::getUInt64IntegerValue(StringRef spelling) {
 41215828:   40:  bool isHex = spelling.size() > 1 && spelling[1] == 'x';
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   41:
 41215828:   42:  uint64_t result = 0;
41215828*:   43:  if (spelling.getAsInteger(isHex ? 0 : 10, result))
call    0 returned 100%
    #####:   44:    return None;
 41215828:   45:  return result;
        -:   46:}
        -:   47:
        -:   48:/// For a floatliteral, return its value as a double. Return None if the value
        -:   49:/// underflows or overflows.
function _ZNK4mlir5Token21getFloatingPointValueEv called 1691594 returned 100% blocks executed 80%
  1691594:   50:Optional<double> Token::getFloatingPointValue() const {
  1691594:   51:  double result = 0;
  1691594:   52:  if (spelling.getAsDouble(result))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   53:    return None;
  1691594:   54:  return result;
        -:   55:}
        -:   56:
        -:   57:/// For an inttype token, return its bitwidth.
function _ZNK4mlir5Token18getIntTypeBitwidthEv called 2293588 returned 100% blocks executed 69%
  2293588:   58:Optional<unsigned> Token::getIntTypeBitwidth() const {
 2293588*:   59:  assert(getKind() == inttype);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
  2293588:   60:  unsigned bitwidthStart = (spelling[0] == 'i' ? 1 : 2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  2293588:   61:  unsigned result = 0;
 2293588*:   62:  if (spelling.drop_front(bitwidthStart).getAsInteger(10, result))
call    0 returned 100%
call    1 returned 100%
    #####:   63:    return None;
  2293588:   64:  return result;
        -:   65:}
        -:   66:
function _ZNK4mlir5Token20getIntTypeSignednessEv called 2293588 returned 100% blocks executed 42%
  2293588:   67:Optional<bool> Token::getIntTypeSignedness() const {
 2293588*:   68:  assert(getKind() == inttype);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
  2293588:   69:  if (spelling[0] == 'i')
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
  2293588:   70:    return llvm::None;
    #####:   71:  if (spelling[0] == 's')
branch  0 never executed
branch  1 never executed
    #####:   72:    return true;
    #####:   73:  assert(spelling[0] == 'u');
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   74:  return false;
        -:   75:}
        -:   76:
        -:   77:/// Given a token containing a string literal, return its value, including
        -:   78:/// removing the quote characters and unescaping the contents of the string. The
        -:   79:/// lexer has already verified that this token is valid.
function _ZNK4mlir5Token14getStringValueB5cxx11Ev called 5035111 returned 100% blocks executed 34%
  5035111:   80:std::string Token::getStringValue() const {
 5035111*:   81:  assert(getKind() == string || getKind() == code_complete ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:   82:         (getKind() == at_identifier && getSpelling()[1] == '"'));
        -:   83:  // Start by dropping the quotes.
  5035111:   84:  StringRef bytes = getSpelling().drop_front();
call    0 returned 100%
  5035111:   85:  if (getKind() != Token::code_complete) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  5035111:   86:    bytes = bytes.drop_back();
call    0 returned 100%
  5035111:   87:    if (getKind() == at_identifier)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:      bytes = bytes.drop_front();
call    0 never executed
        -:   89:  }
        -:   90:
  5035111:   91:  std::string result;
call    0 returned 100%
  5035111:   92:  result.reserve(bytes.size());
call    0 returned 100%
 53452809:   93:  for (unsigned i = 0, e = bytes.size(); i != e;) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
 48417698:   94:    auto c = bytes[i++];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
 48417698:   95:    if (c != '\\') {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 48417698:   96:      result.push_back(c);
call    0 returned 100%
 48417698:   97:      continue;
        -:   98:    }
        -:   99:
    #####:  100:    assert(i + 1 <= e && "invalid string should be caught by lexer");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  101:    auto c1 = bytes[i++];
branch  0 never executed
branch  1 never executed
    #####:  102:    switch (c1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  103:    case '"':
    #####:  104:    case '\\':
    #####:  105:      result.push_back(c1);
call    0 never executed
    #####:  106:      continue;
    #####:  107:    case 'n':
    #####:  108:      result.push_back('\n');
call    0 never executed
    #####:  109:      continue;
    #####:  110:    case 't':
    #####:  111:      result.push_back('\t');
call    0 never executed
    #####:  112:      continue;
    #####:  113:    default:
    #####:  114:      break;
        -:  115:    }
        -:  116:
    #####:  117:    assert(i + 1 <= e && "invalid string should be caught by lexer");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  118:    auto c2 = bytes[i++];
branch  0 never executed
branch  1 never executed
        -:  119:
    #####:  120:    assert(llvm::isHexDigit(c1) && llvm::isHexDigit(c2) && "invalid escape");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  121:    result.push_back((llvm::hexDigitValue(c1) << 4) | llvm::hexDigitValue(c2));
call    0 never executed
        -:  122:  }
        -:  123:
  5035111:  124:  return result;
        -:  125:}
        -:  126:
        -:  127:/// Given a token containing a hex string literal, return its value or None if
        -:  128:/// the token does not contain a valid hex string.
function _ZNK4mlir5Token17getHexStringValueB5cxx11Ev called 132563 returned 100% blocks executed 72%
   132563:  129:Optional<std::string> Token::getHexStringValue() const {
  132563*:  130:  assert(getKind() == string);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  131:
        -:  132:  // Get the internal string data, without the quotes.
   132563:  133:  StringRef bytes = getSpelling().drop_front().drop_back();
call    0 returned 100%
call    1 returned 100%
        -:  134:
        -:  135:  // Try to extract the binary data from the hex string. We expect the hex
        -:  136:  // string to start with `0x` and have an even number of hex nibbles (nibbles
        -:  137:  // should come in pairs).
   132563:  138:  std::string hex;
call    0 returned 100%
  265126*:  139:  if (!bytes.consume_front("0x") || (bytes.size() & 1) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
   132563:  140:      !llvm::tryGetFromHex(bytes, hex))
call    0 returned 100%
    #####:  141:    return llvm::None;
   265126:  142:  return hex;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  143:}
        -:  144:
        -:  145:/// Given a token containing a symbol reference, return the unescaped string
        -:  146:/// value.
function _ZNK4mlir5Token18getSymbolReferenceB5cxx11Ev called 264004 returned 100% blocks executed 67%
   264004:  147:std::string Token::getSymbolReference() const {
  264004*:  148:  assert(is(Token::at_identifier) && "expected valid @-identifier");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   264004:  149:  StringRef nameStr = getSpelling().drop_front();
call    0 returned 100%
        -:  150:
        -:  151:  // Check to see if the reference is a string literal, or a bare identifier.
   264004:  152:  if (nameStr.front() == '"')
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  153:    return getStringValue();
call    0 never executed
   264004:  154:  return std::string(nameStr);
call    0 returned 100%
        -:  155:}
        -:  156:
        -:  157:/// Given a hash_identifier token like #123, try to parse the number out of
        -:  158:/// the identifier, returning None if it is a named identifier like #x or
        -:  159:/// if the integer doesn't fit.
function _ZNK4mlir5Token23getHashIdentifierNumberEv called 0 returned 0% blocks executed 0%
    #####:  160:Optional<unsigned> Token::getHashIdentifierNumber() const {
    #####:  161:  assert(getKind() == hash_identifier);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  162:  unsigned result = 0;
    #####:  163:  if (spelling.drop_front().getAsInteger(10, result))
call    0 never executed
call    1 never executed
    #####:  164:    return None;
    #####:  165:  return result;
        -:  166:}
        -:  167:
        -:  168:/// Given a punctuation or keyword token kind, return the spelling of the
        -:  169:/// token as a string.  Warning: This will abort on markers, identifiers and
        -:  170:/// literal tokens since they have no fixed spelling.
function _ZN4mlir5Token16getTokenSpellingENS0_4KindE called 616887 returned 100% blocks executed 5%
   616887:  171:StringRef Token::getTokenSpelling(Kind kind) {
   616887:  172:  switch (kind) {
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 100%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
branch 28 taken 0%
branch 29 taken 0%
branch 30 taken 0%
branch 31 taken 0%
branch 32 taken 0%
branch 33 taken 0%
branch 34 taken 0%
branch 35 taken 0%
branch 36 taken 0%
branch 37 taken 0%
branch 38 taken 0%
branch 39 taken 0%
branch 40 taken 0%
branch 41 taken 0%
branch 42 taken 0%
branch 43 taken 0%
branch 44 taken 0%
branch 45 taken 0%
branch 46 taken 0%
branch 47 taken 0%
branch 48 taken 0%
branch 49 taken 0%
branch 50 taken 0%
branch 51 taken 0%
branch 52 taken 0%
branch 53 taken 0%
branch 54 taken 0%
branch 55 taken 0%
branch 56 taken 0%
branch 57 taken 0%
branch 58 taken 0%
branch 59 taken 0%
branch 60 taken 0%
    #####:  173:  default:
    #####:  174:    llvm_unreachable("This token kind has no fixed spelling");
call    0 never executed
        -:  175:#define TOK_PUNCTUATION(NAME, SPELLING)                                        \
        -:  176:  case NAME:                                                                   \
        -:  177:    return SPELLING;
        -:  178:#define TOK_KEYWORD(SPELLING)                                                  \
        -:  179:  case kw_##SPELLING:                                                          \
        -:  180:    return #SPELLING;
        -:  181:#include "TokenKinds.def"
        -:  182:  }
        -:  183:}
        -:  184:
        -:  185:/// Return true if this is one of the keyword token kinds (e.g. kw_if).
function _ZNK4mlir5Token9isKeywordEv called 4671595 returned 100% blocks executed 100%
  4671595:  186:bool Token::isKeyword() const {
  4671595:  187:  switch (kind) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  188:  default:
        -:  189:    return false;
        -:  190:#define TOK_KEYWORD(SPELLING)                                                  \
        -:  191:  case kw_##SPELLING:                                                          \
        -:  192:    return true;
        -:  193:#include "TokenKinds.def"
        -:  194:  }
        -:  195:}
        -:  196:
function _ZNK4mlir5Token19isCodeCompletionForENS0_4KindE called 1361262 returned 100% blocks executed 22%
  1361262:  197:bool Token::isCodeCompletionFor(Kind kind) const {
 1361262*:  198:  if (!isCodeCompletion() || spelling.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  199:    return false;
    #####:  200:  switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  201:  case Kind::string:
    #####:  202:    return spelling[0] == '"';
    #####:  203:  case Kind::hash_identifier:
    #####:  204:    return spelling[0] == '#';
    #####:  205:  case Kind::percent_identifier:
    #####:  206:    return spelling[0] == '%';
    #####:  207:  case Kind::caret_identifier:
    #####:  208:    return spelling[0] == '^';
    #####:  209:  case Kind::exclamation_identifier:
    #####:  210:    return spelling[0] == '!';
        -:  211:  default:
        -:  212:    return false;
        -:  213:  }
        -:  214:}
