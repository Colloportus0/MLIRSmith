        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/OpenACCToSCF/OpenACCToSCF.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/OpenACCToSCF/CMakeFiles/obj.MLIROpenACCToSCF.dir/OpenACCToSCF.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/OpenACCToSCF/CMakeFiles/obj.MLIROpenACCToSCF.dir/OpenACCToSCF.cpp.gcda
        -:    0:Runs:325558
        -:    1://===- OpenACCToSCF.cpp - OpenACC condition to SCF if conversion ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/OpenACCToSCF/ConvertOpenACCToSCF.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Dialect/OpenACC/OpenACC.h"
        -:   13:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:#include "mlir/Transforms/DialectConversion.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:#define GEN_PASS_DEF_CONVERTOPENACCTOSCF
        -:   19:#include "mlir/Conversion/Passes.h.inc"
        -:   20:} // namespace mlir
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24://===----------------------------------------------------------------------===//
        -:   25:// Conversion patterns
        -:   26://===----------------------------------------------------------------------===//
        -:   27:
        -:   28:namespace {
        -:   29:/// Pattern to transform the `getIfCond` on operation without region into a
        -:   30:/// scf.if and move the operation into the `then` region.
        -:   31:template <typename OpTy>
        -:   32:class ExpandIfCondition : public OpRewritePattern<OpTy> {
        -:   33:  using OpRewritePattern<OpTy>::OpRewritePattern;
        -:   34:
    #####:   35:  LogicalResult matchAndRewrite(OpTy op,
        -:   36:                                PatternRewriter &rewriter) const override {
        -:   37:    // Early exit if there is no condition.
    #####:   38:    if (!op.getIfCond())
    #####:   39:      return success();
        -:   40:
        -:   41:    // Condition is not a constant.
    #####:   42:    if (!op.getIfCond().template getDefiningOp<arith::ConstantOp>()) {
    #####:   43:      auto ifOp = rewriter.create<scf::IfOp>(op.getLoc(), TypeRange(),
    #####:   44:                                             op.getIfCond(), false);
    #####:   45:      rewriter.updateRootInPlace(op, [&]() { op.getIfCondMutable().erase(0); });
    #####:   46:      auto thenBodyBuilder = ifOp.getThenBodyBuilder();
    #####:   47:      thenBodyBuilder.setListener(rewriter.getListener());
    #####:   48:      thenBodyBuilder.clone(*op.getOperation());
    #####:   49:      rewriter.eraseOp(op);
        -:   50:    }
        -:   51:
    #####:   52:    return success();
        -:   53:  }
------------------
_ZNK12_GLOBAL__N_117ExpandIfConditionIN4mlir3acc11EnterDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_117ExpandIfConditionIN4mlir3acc11EnterDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   35:  LogicalResult matchAndRewrite(OpTy op,
        -:   36:                                PatternRewriter &rewriter) const override {
        -:   37:    // Early exit if there is no condition.
    #####:   38:    if (!op.getIfCond())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:      return success();
        -:   40:
        -:   41:    // Condition is not a constant.
    #####:   42:    if (!op.getIfCond().template getDefiningOp<arith::ConstantOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   43:      auto ifOp = rewriter.create<scf::IfOp>(op.getLoc(), TypeRange(),
call    0 never executed
call    1 never executed
    #####:   44:                                             op.getIfCond(), false);
call    0 never executed
    #####:   45:      rewriter.updateRootInPlace(op, [&]() { op.getIfCondMutable().erase(0); });
call    0 never executed
    #####:   46:      auto thenBodyBuilder = ifOp.getThenBodyBuilder();
call    0 never executed
    #####:   47:      thenBodyBuilder.setListener(rewriter.getListener());
call    0 never executed
    #####:   48:      thenBodyBuilder.clone(*op.getOperation());
call    0 never executed
    #####:   49:      rewriter.eraseOp(op);
call    0 never executed
        -:   50:    }
        -:   51:
    #####:   52:    return success();
        -:   53:  }
------------------
_ZNK12_GLOBAL__N_117ExpandIfConditionIN4mlir3acc10ExitDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_117ExpandIfConditionIN4mlir3acc10ExitDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   35:  LogicalResult matchAndRewrite(OpTy op,
        -:   36:                                PatternRewriter &rewriter) const override {
        -:   37:    // Early exit if there is no condition.
    #####:   38:    if (!op.getIfCond())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:      return success();
        -:   40:
        -:   41:    // Condition is not a constant.
    #####:   42:    if (!op.getIfCond().template getDefiningOp<arith::ConstantOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   43:      auto ifOp = rewriter.create<scf::IfOp>(op.getLoc(), TypeRange(),
call    0 never executed
call    1 never executed
    #####:   44:                                             op.getIfCond(), false);
call    0 never executed
    #####:   45:      rewriter.updateRootInPlace(op, [&]() { op.getIfCondMutable().erase(0); });
call    0 never executed
    #####:   46:      auto thenBodyBuilder = ifOp.getThenBodyBuilder();
call    0 never executed
    #####:   47:      thenBodyBuilder.setListener(rewriter.getListener());
call    0 never executed
    #####:   48:      thenBodyBuilder.clone(*op.getOperation());
call    0 never executed
    #####:   49:      rewriter.eraseOp(op);
call    0 never executed
        -:   50:    }
        -:   51:
    #####:   52:    return success();
        -:   53:  }
------------------
_ZNK12_GLOBAL__N_117ExpandIfConditionIN4mlir3acc8UpdateOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_117ExpandIfConditionIN4mlir3acc8UpdateOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   35:  LogicalResult matchAndRewrite(OpTy op,
        -:   36:                                PatternRewriter &rewriter) const override {
        -:   37:    // Early exit if there is no condition.
    #####:   38:    if (!op.getIfCond())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:      return success();
        -:   40:
        -:   41:    // Condition is not a constant.
    #####:   42:    if (!op.getIfCond().template getDefiningOp<arith::ConstantOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   43:      auto ifOp = rewriter.create<scf::IfOp>(op.getLoc(), TypeRange(),
call    0 never executed
call    1 never executed
    #####:   44:                                             op.getIfCond(), false);
call    0 never executed
    #####:   45:      rewriter.updateRootInPlace(op, [&]() { op.getIfCondMutable().erase(0); });
call    0 never executed
    #####:   46:      auto thenBodyBuilder = ifOp.getThenBodyBuilder();
call    0 never executed
    #####:   47:      thenBodyBuilder.setListener(rewriter.getListener());
call    0 never executed
    #####:   48:      thenBodyBuilder.clone(*op.getOperation());
call    0 never executed
    #####:   49:      rewriter.eraseOp(op);
call    0 never executed
        -:   50:    }
        -:   51:
    #####:   52:    return success();
        -:   53:  }
------------------
        -:   54:};
        -:   55:} // namespace
        -:   56:
function _ZN4mlir38populateOpenACCToSCFConversionPatternsERNS_17RewritePatternSetE called 889 returned 100% blocks executed 100%
      889:   57:void mlir::populateOpenACCToSCFConversionPatterns(RewritePatternSet &patterns) {
      889:   58:  patterns.add<ExpandIfCondition<acc::EnterDataOp>>(patterns.getContext());
call    0 returned 100%
      889:   59:  patterns.add<ExpandIfCondition<acc::ExitDataOp>>(patterns.getContext());
call    0 returned 100%
      889:   60:  patterns.add<ExpandIfCondition<acc::UpdateOp>>(patterns.getContext());
call    0 returned 100%
      889:   61:}
        -:   62:
        -:   63:namespace {
  326633*:   64:struct ConvertOpenACCToSCFPass
call    0 never executed
call    1 returned 100%
        -:   65:    : public impl::ConvertOpenACCToSCFBase<ConvertOpenACCToSCFPass> {
        -:   66:  void runOnOperation() override;
        -:   67:};
        -:   68:} // namespace
        -:   69:
function _ZN12_GLOBAL__N_123ConvertOpenACCToSCFPass14runOnOperationEv called 889 returned 100% blocks executed 94%
      889:   70:void ConvertOpenACCToSCFPass::runOnOperation() {
      889:   71:  auto op = getOperation();
call    0 returned 100%
      889:   72:  auto *context = op.getContext();
call    0 returned 100%
        -:   73:
      889:   74:  RewritePatternSet patterns(context);
call    0 returned 100%
     1778:   75:  ConversionTarget target(*context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      889:   76:  populateOpenACCToSCFConversionPatterns(patterns);
call    0 returned 100%
        -:   77:
      889:   78:  target.addLegalDialect<scf::SCFDialect>();
call    0 returned 100%
      889:   79:  target.addLegalDialect<acc::OpenACCDialect>();
call    0 returned 100%
        -:   80:
      889:   81:  target.addDynamicallyLegalOp<acc::EnterDataOp>(
call    0 returned 100%
    #####:   82:      [](acc::EnterDataOp op) { return !op.getIfCond(); });
call    0 never executed
        -:   83:
      889:   84:  target.addDynamicallyLegalOp<acc::ExitDataOp>(
call    0 returned 100%
    #####:   85:      [](acc::ExitDataOp op) { return !op.getIfCond(); });
call    0 never executed
        -:   86:
      889:   87:  target.addDynamicallyLegalOp<acc::UpdateOp>(
call    0 returned 100%
    #####:   88:      [](acc::UpdateOp op) { return !op.getIfCond(); });
call    0 never executed
        -:   89:
      889:   90:  if (failed(applyPartialConversion(op, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   91:    signalPassFailure();
call    0 never executed
      889:   92:}
        -:   93:
function _ZN4mlir29createConvertOpenACCToSCFPassEv called 326633 returned 100% blocks executed 100%
   326633:   94:std::unique_ptr<OperationPass<ModuleOp>> mlir::createConvertOpenACCToSCFPass() {
   326633:   95:  return std::make_unique<ConvertOpenACCToSCFPass>();
call    0 returned 100%
        -:   96:}
