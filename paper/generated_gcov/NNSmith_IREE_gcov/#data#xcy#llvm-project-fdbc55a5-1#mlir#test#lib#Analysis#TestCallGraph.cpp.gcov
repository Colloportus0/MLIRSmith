        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Analysis/TestCallGraph.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestCallGraph.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestCallGraph.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestCallGraph.cpp - Test callgraph construction and iteration ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains test passes for constructing and iterating over a
        -:   10:// callgraph.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Analysis/CallGraph.h"
        -:   15:#include "mlir/IR/BuiltinOps.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
        -:   20:namespace {
  326617*:   21:struct TestCallGraphPass
call    0 never executed
call    1 returned 100%
        -:   22:    : public PassWrapper<TestCallGraphPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_117TestCallGraphPass13resolveTypeIDEv called 326617 returned 100% blocks executed 100%
   326617:   23:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestCallGraphPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   24:
function _ZNK12_GLOBAL__N_117TestCallGraphPass11getArgumentEv called 325587 returned 100% blocks executed 100%
   325587:   25:  StringRef getArgument() const final { return "test-print-callgraph"; }
function _ZNK12_GLOBAL__N_117TestCallGraphPass14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   26:  StringRef getDescription() const final {
   325560:   27:    return "Print the contents of a constructed callgraph.";
        -:   28:  }
function _ZN12_GLOBAL__N_117TestCallGraphPass14runOnOperationEv called 873 returned 100% blocks executed 100%
      873:   29:  void runOnOperation() override {
      873:   30:    llvm::errs() << "Testing : " << getOperation()->getAttr("test.name")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      873:   31:                 << "\n";
call    0 returned 100%
      873:   32:    getAnalysis<CallGraph>().print(llvm::errs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      873:   33:  }
        -:   34:};
        -:   35:} // namespace
        -:   36:
        -:   37:namespace mlir {
        -:   38:namespace test {
function _ZN4mlir4test25registerTestCallGraphPassEv called 325560 returned 100% blocks executed 100%
   325560:   39:void registerTestCallGraphPass() { PassRegistration<TestCallGraphPass>(); }
call    0 returned 100%
        -:   40:} // namespace test
        -:   41:} // namespace mlir
