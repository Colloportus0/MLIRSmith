        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/IR/FunctionInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/FunctionInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/FunctionInterfaces.cpp.gcda
        -:    0:Runs:325565
        -:    1://===- FunctionSupport.cpp - Utility types for function-like ops ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/FunctionInterfaces.h"
        -:   10:
        -:   11:using namespace mlir;
        -:   12:
        -:   13://===----------------------------------------------------------------------===//
        -:   14:// Tablegen Interface Definitions
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:#include "mlir/IR/FunctionOpInterfaces.cpp.inc"
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// Function Arguments and Results.
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
function _ZL15isEmptyAttrDictN4mlir9AttributeE called 3481 returned 100% blocks executed 100%
     3481:   23:static bool isEmptyAttrDict(Attribute attr) {
     3481:   24:  return attr.cast<DictionaryAttr>().empty();
call    0 returned 100%
call    1 returned 100%
        -:   25:}
        -:   26:
function _ZN4mlir23function_interface_impl14getArgAttrDictEPNS_9OperationEj called 5166 returned 100% blocks executed 100%
     5166:   27:DictionaryAttr mlir::function_interface_impl::getArgAttrDict(Operation *op,
        -:   28:                                                             unsigned index) {
     5166:   29:  ArrayAttr attrs = op->getAttrOfType<ArrayAttr>(getArgDictAttrName());
call    0 returned 100%
     5166:   30:  DictionaryAttr argAttrs =
     5166:   31:      attrs ? attrs[index].cast<DictionaryAttr>() : DictionaryAttr();
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
     5166:   32:  return argAttrs;
        -:   33:}
        -:   34:
        -:   35:DictionaryAttr
function _ZN4mlir23function_interface_impl17getResultAttrDictEPNS_9OperationEj called 3273 returned 97% blocks executed 100%
     3273:   36:mlir::function_interface_impl::getResultAttrDict(Operation *op,
        -:   37:                                                 unsigned index) {
     3273:   38:  ArrayAttr attrs = op->getAttrOfType<ArrayAttr>(getResultDictAttrName());
call    0 returned 97%
     3172:   39:  DictionaryAttr resAttrs =
     3172:   40:      attrs ? attrs[index].cast<DictionaryAttr>() : DictionaryAttr();
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
call    2 returned 100%
call    3 returned 100%
     3172:   41:  return resAttrs;
        -:   42:}
        -:   43:
function _ZN4mlir23function_interface_impl6detail17setArgResAttrDictEPNS_9OperationEN4llvm9StringRefEjjNS_14DictionaryAttrE called 18 returned 100% blocks executed 36%
       18:   44:void mlir::function_interface_impl::detail::setArgResAttrDict(
        -:   45:    Operation *op, StringRef attrName, unsigned numTotalIndices, unsigned index,
        -:   46:    DictionaryAttr attrs) {
       18:   47:  ArrayAttr allAttrs = op->getAttrOfType<ArrayAttr>(attrName);
call    0 returned 100%
       36:   48:  if (!allAttrs) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   49:    if (attrs.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   50:      return;
        -:   51:
        -:   52:    // If this attribute is not empty, we need to create a new attribute array.
    #####:   53:    SmallVector<Attribute, 8> newAttrs(numTotalIndices,
call    0 never executed
    #####:   54:                                       DictionaryAttr::get(op->getContext()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   55:    newAttrs[index] = attrs;
branch  0 never executed
branch  1 never executed
    #####:   56:    op->setAttr(attrName, ArrayAttr::get(op->getContext(), newAttrs));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   57:    return;
branch  0 never executed
branch  1 never executed
        -:   58:  }
        -:   59:  // Check to see if the attribute is different from what we already have.
       18:   60:  if (allAttrs[index] == attrs)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   61:    return;
        -:   62:
        -:   63:  // If it is, check to see if the attribute array would now contain only empty
        -:   64:  // dictionaries.
       18:   65:  ArrayRef<Attribute> rawAttrArray = allAttrs.getValue();
call    0 returned 100%
      18*:   66:  if (attrs.empty() &&
call    0 returned 100%
      18*:   67:      llvm::all_of(rawAttrArray.take_front(index), isEmptyAttrDict) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   68:      llvm::all_of(rawAttrArray.drop_front(index + 1), isEmptyAttrDict)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:    op->removeAttr(attrName);
    #####:   70:    return;
call    0 never executed
        -:   71:  }
        -:   72:
        -:   73:  // Otherwise, create a new attribute array with the updated dictionary.
       36:   74:  SmallVector<Attribute, 8> newAttrs(rawAttrArray.begin(), rawAttrArray.end());
call    0 returned 100%
       18:   75:  newAttrs[index] = attrs;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       18:   76:  op->setAttr(attrName, ArrayAttr::get(op->getContext(), newAttrs));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   77:}
        -:   78:
        -:   79:/// Set all of the argument or result attribute dictionaries for a function.
function _ZL21setAllArgResAttrDictsPN4mlir9OperationEN4llvm9StringRefENS2_8ArrayRefINS_9AttributeEEE called 3488 returned 100% blocks executed 100%
     3488:   80:static void setAllArgResAttrDicts(Operation *op, StringRef attrName,
        -:   81:                                  ArrayRef<Attribute> attrs) {
     3488:   82:  if (llvm::all_of(attrs, isEmptyAttrDict))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        7:   83:    op->removeAttr(attrName);
call    0 returned 100%
        -:   84:  else
     3481:   85:    op->setAttr(attrName, ArrayAttr::get(op->getContext(), attrs));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     3488:   86:}
        -:   87:
function _ZN4mlir23function_interface_impl18setAllArgAttrDictsEPNS_9OperationEN4llvm8ArrayRefINS_14DictionaryAttrEEE called 0 returned 0% blocks executed 0%
     858*:   88:void mlir::function_interface_impl::setAllArgAttrDicts(
        -:   89:    Operation *op, ArrayRef<DictionaryAttr> attrs) {
     858*:   90:  setAllArgAttrDicts(op, ArrayRef<Attribute>(attrs.data(), attrs.size()));
call    0 returned 100%
call    1 never executed
call    2 never executed
    #####:   91:}
function _ZN4mlir23function_interface_impl18setAllArgAttrDictsEPNS_9OperationEN4llvm8ArrayRefINS_9AttributeEEE called 865 returned 100% blocks executed 100%
      865:   92:void mlir::function_interface_impl::setAllArgAttrDicts(
        -:   93:    Operation *op, ArrayRef<Attribute> attrs) {
function _ZZN4mlir23function_interface_impl18setAllArgAttrDictsEPNS_9OperationEN4llvm8ArrayRefINS_9AttributeEEEENKUlS5_E_clES5_.isra.0 called 1765 returned 100% blocks executed 100%
     1765:   94:  auto wrappedAttrs = llvm::map_range(attrs, [op](Attribute attr) -> Attribute {
     1765:   95:    return !attr ? DictionaryAttr::get(op->getContext()) : attr;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
      865:   96:  });
call    0 returned 100%
      865:   97:  setAllArgResAttrDicts(op, getArgDictAttrName(),
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
      865:   98:                        llvm::to_vector<8>(wrappedAttrs));
call    0 returned 100%
call    1 returned 100%
      865:   99:}
        -:  100:
function _ZN4mlir23function_interface_impl21setAllResultAttrDictsEPNS_9OperationEN4llvm8ArrayRefINS_14DictionaryAttrEEE called 0 returned 0% blocks executed 0%
    2623*:  101:void mlir::function_interface_impl::setAllResultAttrDicts(
        -:  102:    Operation *op, ArrayRef<DictionaryAttr> attrs) {
    2623*:  103:  setAllResultAttrDicts(op, ArrayRef<Attribute>(attrs.data(), attrs.size()));
call    0 returned 100%
call    1 never executed
call    2 never executed
    #####:  104:}
function _ZN4mlir23function_interface_impl21setAllResultAttrDictsEPNS_9OperationEN4llvm8ArrayRefINS_9AttributeEEE called 2623 returned 100% blocks executed 80%
     2623:  105:void mlir::function_interface_impl::setAllResultAttrDicts(
        -:  106:    Operation *op, ArrayRef<Attribute> attrs) {
function _ZZN4mlir23function_interface_impl21setAllResultAttrDictsEPNS_9OperationEN4llvm8ArrayRefINS_9AttributeEEEENKUlS5_E_clES5_.isra.0 called 6068 returned 100% blocks executed 57%
    6068*:  107:  auto wrappedAttrs = llvm::map_range(attrs, [op](Attribute attr) -> Attribute {
    6068*:  108:    return !attr ? DictionaryAttr::get(op->getContext()) : attr;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
     2623:  109:  });
call    0 returned 100%
     2623:  110:  setAllArgResAttrDicts(op, getResultDictAttrName(),
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     2623:  111:                        llvm::to_vector<8>(wrappedAttrs));
call    0 returned 100%
call    1 returned 100%
     2623:  112:}
        -:  113:
function _ZN4mlir23function_interface_impl23insertFunctionArgumentsEPNS_9OperationEN4llvm8ArrayRefIjEENS_9TypeRangeENS4_INS_14DictionaryAttrEEENS4_INS_8LocationEEEjNS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  114:void mlir::function_interface_impl::insertFunctionArguments(
        -:  115:    Operation *op, ArrayRef<unsigned> argIndices, TypeRange argTypes,
        -:  116:    ArrayRef<DictionaryAttr> argAttrs, ArrayRef<Location> argLocs,
        -:  117:    unsigned originalNumArgs, Type newType) {
    #####:  118:  assert(argIndices.size() == argTypes.size());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  119:  assert(argIndices.size() == argAttrs.size() || argAttrs.empty());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  120:  assert(argIndices.size() == argLocs.size());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  121:  if (argIndices.empty())
branch  0 never executed
branch  1 never executed
    #####:  122:    return;
        -:  123:
        -:  124:  // There are 3 things that need to be updated:
        -:  125:  // - Function type.
        -:  126:  // - Arg attrs.
        -:  127:  // - Block arguments of entry block.
    #####:  128:  Block &entry = op->getRegion(0).front();
call    0 never executed
call    1 never executed
        -:  129:
        -:  130:  // Update the argument attributes of the function.
    #####:  131:  auto oldArgAttrs = op->getAttrOfType<ArrayAttr>(getArgDictAttrName());
call    0 never executed
    #####:  132:  if (oldArgAttrs || !argAttrs.empty()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  133:    SmallVector<DictionaryAttr, 4> newArgAttrs;
branch  0 never executed
branch  1 never executed
    #####:  134:    newArgAttrs.reserve(originalNumArgs + argIndices.size());
branch  0 never executed
branch  1 never executed
    #####:  135:    unsigned oldIdx = 0;
function _ZZN4mlir23function_interface_impl23insertFunctionArgumentsEPNS_9OperationEN4llvm8ArrayRefIjEENS_9TypeRangeENS4_INS_14DictionaryAttrEEENS4_INS_8LocationEEEjNS_4TypeEENKUljE_clEj called 0 returned 0% blocks executed 0%
    #####:  136:    auto migrate = [&](unsigned untilIdx) {
    #####:  137:      if (!oldArgAttrs) {
branch  0 never executed
branch  1 never executed
    #####:  138:        newArgAttrs.resize(newArgAttrs.size() + untilIdx - oldIdx);
call    0 never executed
        -:  139:      } else {
    #####:  140:        auto oldArgAttrRange = oldArgAttrs.getAsRange<DictionaryAttr>();
call    0 never executed
    #####:  141:        newArgAttrs.append(oldArgAttrRange.begin() + oldIdx,
    #####:  142:                           oldArgAttrRange.begin() + untilIdx);
call    0 never executed
        -:  143:      }
    #####:  144:      oldIdx = untilIdx;
    #####:  145:    };
    #####:  146:    for (unsigned i = 0, e = argIndices.size(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  147:      migrate(argIndices[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  148:      newArgAttrs.push_back(argAttrs.empty() ? DictionaryAttr{} : argAttrs[i]);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  149:    }
    #####:  150:    migrate(originalNumArgs);
call    0 never executed
    #####:  151:    setAllArgAttrDicts(op, newArgAttrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  152:  }
        -:  153:
        -:  154:  // Update the function type and any entry block arguments.
    #####:  155:  op->setAttr(getTypeAttrName(), TypeAttr::get(newType));
call    0 never executed
call    1 never executed
    #####:  156:  for (unsigned i = 0, e = argIndices.size(); i < e; ++i)
branch  0 never executed
branch  1 never executed
    #####:  157:    entry.insertArgument(argIndices[i] + i, argTypes[i], argLocs[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  158:}
        -:  159:
function _ZN4mlir23function_interface_impl21insertFunctionResultsEPNS_9OperationEN4llvm8ArrayRefIjEENS_9TypeRangeENS4_INS_14DictionaryAttrEEEjNS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  160:void mlir::function_interface_impl::insertFunctionResults(
        -:  161:    Operation *op, ArrayRef<unsigned> resultIndices, TypeRange resultTypes,
        -:  162:    ArrayRef<DictionaryAttr> resultAttrs, unsigned originalNumResults,
        -:  163:    Type newType) {
    #####:  164:  assert(resultIndices.size() == resultTypes.size());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  165:  assert(resultIndices.size() == resultAttrs.size() || resultAttrs.empty());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  166:  if (resultIndices.empty())
branch  0 never executed
branch  1 never executed
    #####:  167:    return;
        -:  168:
        -:  169:  // There are 2 things that need to be updated:
        -:  170:  // - Function type.
        -:  171:  // - Result attrs.
        -:  172:
        -:  173:  // Update the result attributes of the function.
    #####:  174:  auto oldResultAttrs = op->getAttrOfType<ArrayAttr>(getResultDictAttrName());
call    0 never executed
    #####:  175:  if (oldResultAttrs || !resultAttrs.empty()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  176:    SmallVector<DictionaryAttr, 4> newResultAttrs;
branch  0 never executed
branch  1 never executed
    #####:  177:    newResultAttrs.reserve(originalNumResults + resultIndices.size());
branch  0 never executed
branch  1 never executed
    #####:  178:    unsigned oldIdx = 0;
function _ZZN4mlir23function_interface_impl21insertFunctionResultsEPNS_9OperationEN4llvm8ArrayRefIjEENS_9TypeRangeENS4_INS_14DictionaryAttrEEEjNS_4TypeEENKUljE_clEj called 0 returned 0% blocks executed 0%
    #####:  179:    auto migrate = [&](unsigned untilIdx) {
    #####:  180:      if (!oldResultAttrs) {
branch  0 never executed
branch  1 never executed
    #####:  181:        newResultAttrs.resize(newResultAttrs.size() + untilIdx - oldIdx);
call    0 never executed
        -:  182:      } else {
    #####:  183:        auto oldResultAttrsRange = oldResultAttrs.getAsRange<DictionaryAttr>();
call    0 never executed
    #####:  184:        newResultAttrs.append(oldResultAttrsRange.begin() + oldIdx,
    #####:  185:                              oldResultAttrsRange.begin() + untilIdx);
call    0 never executed
        -:  186:      }
    #####:  187:      oldIdx = untilIdx;
    #####:  188:    };
    #####:  189:    for (unsigned i = 0, e = resultIndices.size(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  190:      migrate(resultIndices[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  191:      newResultAttrs.push_back(resultAttrs.empty() ? DictionaryAttr{}
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  192:                                                   : resultAttrs[i]);
branch  0 never executed
branch  1 never executed
        -:  193:    }
    #####:  194:    migrate(originalNumResults);
call    0 never executed
    #####:  195:    setAllResultAttrDicts(op, newResultAttrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  196:  }
        -:  197:
        -:  198:  // Update the function type.
    #####:  199:  op->setAttr(getTypeAttrName(), TypeAttr::get(newType));
call    0 never executed
call    1 never executed
        -:  200:}
        -:  201:
function _ZN4mlir23function_interface_impl22eraseFunctionArgumentsEPNS_9OperationERKN4llvm9BitVectorENS_4TypeE called 861 returned 100% blocks executed 100%
      861:  202:void mlir::function_interface_impl::eraseFunctionArguments(
        -:  203:    Operation *op, const BitVector &argIndices, Type newType) {
        -:  204:  // There are 3 things that need to be updated:
        -:  205:  // - Function type.
        -:  206:  // - Arg attrs.
        -:  207:  // - Block arguments of entry block.
      861:  208:  Block &entry = op->getRegion(0).front();
call    0 returned 100%
call    1 returned 100%
        -:  209:
        -:  210:  // Update the argument attributes of the function.
      861:  211:  if (auto argAttrs = op->getAttrOfType<ArrayAttr>(getArgDictAttrName())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
     1716:  212:    SmallVector<DictionaryAttr, 4> newArgAttrs;
call    0 returned 100%
      858:  213:    newArgAttrs.reserve(argAttrs.size());
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
     2591:  214:    for (unsigned i = 0, e = argIndices.size(); i < e; ++i)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
     1733:  215:      if (!argIndices[i])
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1733:  216:        newArgAttrs.emplace_back(argAttrs[i].cast<DictionaryAttr>());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      858:  217:    setAllArgAttrDicts(op, newArgAttrs);
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        -:  218:  }
        -:  219:
        -:  220:  // Update the function type and any entry block arguments.
      861:  221:  op->setAttr(getTypeAttrName(), TypeAttr::get(newType));
call    0 returned 100%
call    1 returned 100%
      861:  222:  entry.eraseArguments(argIndices);
call    0 returned 100%
      861:  223:}
        -:  224:
function _ZN4mlir23function_interface_impl20eraseFunctionResultsEPNS_9OperationERKN4llvm9BitVectorENS_4TypeE called 2779 returned 100% blocks executed 86%
     2779:  225:void mlir::function_interface_impl::eraseFunctionResults(
        -:  226:    Operation *op, const BitVector &resultIndices, Type newType) {
        -:  227:  // There are 2 things that need to be updated:
        -:  228:  // - Function type.
        -:  229:  // - Result attrs.
        -:  230:
        -:  231:  // Update the result attributes of the function.
     2779:  232:  if (auto resAttrs = op->getAttrOfType<ArrayAttr>(getResultDictAttrName())) {
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
     5246:  233:    SmallVector<DictionaryAttr, 4> newResultAttrs;
call    0 returned 100%
     2623:  234:    newResultAttrs.reserve(resAttrs.size());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     8709:  235:    for (unsigned i = 0, e = resultIndices.size(); i < e; ++i)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
     6086:  236:      if (!resultIndices[i])
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
     6068:  237:        newResultAttrs.emplace_back(resAttrs[i].cast<DictionaryAttr>());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     2623:  238:    setAllResultAttrDicts(op, newResultAttrs);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  239:  }
        -:  240:
        -:  241:  // Update the function type.
     2779:  242:  op->setAttr(getTypeAttrName(), TypeAttr::get(newType));
call    0 returned 100%
call    1 returned 100%
     2779:  243:}
        -:  244:
function _ZN4mlir23function_interface_impl15insertTypesIntoENS_9TypeRangeEN4llvm8ArrayRefIjEES1_RNS2_15SmallVectorImplINS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  245:TypeRange mlir::function_interface_impl::insertTypesInto(
        -:  246:    TypeRange oldTypes, ArrayRef<unsigned> indices, TypeRange newTypes,
        -:  247:    SmallVectorImpl<Type> &storage) {
    #####:  248:  assert(indices.size() == newTypes.size() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  249:         "mismatch between indice and type count");
    #####:  250:  if (indices.empty())
branch  0 never executed
branch  1 never executed
    #####:  251:    return oldTypes;
        -:  252:
    #####:  253:  auto fromIt = oldTypes.begin();
    #####:  254:  for (auto it : llvm::zip(indices, newTypes)) {
branch  0 never executed
branch  1 never executed
    #####:  255:    const auto toIt = oldTypes.begin() + std::get<0>(it);
call    0 never executed
    #####:  256:    storage.append(fromIt, toIt);
call    0 never executed
    #####:  257:    storage.push_back(std::get<1>(it));
call    0 never executed
    #####:  258:    fromIt = toIt;
        -:  259:  }
    #####:  260:  storage.append(fromIt, oldTypes.end());
call    0 never executed
    #####:  261:  return storage;
call    0 never executed
        -:  262:}
        -:  263:
function _ZN4mlir23function_interface_impl14filterTypesOutENS_9TypeRangeERKN4llvm9BitVectorERNS2_15SmallVectorImplINS_4TypeEEE called 3640 returned 100% blocks executed 77%
     3640:  264:TypeRange mlir::function_interface_impl::filterTypesOut(
        -:  265:    TypeRange types, const BitVector &indices, SmallVectorImpl<Type> &storage) {
     3640:  266:  if (indices.none())
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     3633:  267:    return types;
        -:  268:
       25:  269:  for (unsigned i = 0, e = types.size(); i < e; ++i)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
       18:  270:    if (!indices[i])
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  271:      storage.emplace_back(types[i]);
call    0 never executed
call    1 never executed
        7:  272:  return storage;
call    0 returned 100%
        -:  273:}
        -:  274:
        -:  275://===----------------------------------------------------------------------===//
        -:  276:// Function type signature.
        -:  277://===----------------------------------------------------------------------===//
        -:  278:
function _ZN4mlir23function_interface_impl15setFunctionTypeEPNS_9OperationENS_4TypeE called 15687 returned 100% blocks executed 100%
    15687:  279:void mlir::function_interface_impl::setFunctionType(Operation *op,
        -:  280:                                                    Type newType) {
    15687:  281:  FunctionOpInterface funcOp = cast<FunctionOpInterface>(op);
call    0 returned 100%
    15687:  282:  unsigned oldNumArgs = funcOp.getNumArguments();
call    0 returned 100%
    15687:  283:  unsigned oldNumResults = funcOp.getNumResults();
call    0 returned 100%
    15687:  284:  op->setAttr(getTypeAttrName(), TypeAttr::get(newType));
call    0 returned 100%
call    1 returned 100%
    15687:  285:  unsigned newNumArgs = funcOp.getNumArguments();
call    0 returned 100%
    15687:  286:  unsigned newNumResults = funcOp.getNumResults();
call    0 returned 100%
        -:  287:
        -:  288:  // Functor used to update the argument and result attributes of the function.
    47061:  289:  auto updateAttrFn = [&](StringRef attrName, unsigned oldCount,
        -:  290:                          unsigned newCount, auto setAttrFn) {
    31374:  291:    if (oldCount == newCount)
    31367:  292:      return;
        -:  293:    // The new type has no arguments/results, just drop the attribute.
    1885*:  294:    if (newCount == 0) {
    #####:  295:      op->removeAttr(attrName);
    #####:  296:      return;
        -:  297:    }
    1885*:  298:    ArrayAttr attrs = op->getAttrOfType<ArrayAttr>(attrName);
    1885*:  299:    if (!attrs)
        -:  300:      return;
        -:  301:
        -:  302:    // The new type has less arguments/results, take the first N attributes.
       7*:  303:    if (newCount < oldCount)
    #####:  304:      return setAttrFn(op, attrs.getValue().take_front(newCount));
        -:  305:
        -:  306:    // Otherwise, the new type has more arguments/results. Initialize the new
        -:  307:    // arguments/results with empty attributes.
      14*:  308:    SmallVector<Attribute> newAttrs(attrs.begin(), attrs.end());
       7*:  309:    newAttrs.resize(newCount);
      14*:  310:    setAttrFn(op, newAttrs);
    15687:  311:  };
------------------
_ZZN4mlir23function_interface_impl15setFunctionTypeEPNS_9OperationENS_4TypeEENKUlN4llvm9StringRefEjjT_E_clIZNS0_15setFunctionTypeES2_S3_EUlS2_OS6_E1_EEDaS5_jjS6_.isra.0:
function _ZZN4mlir23function_interface_impl15setFunctionTypeEPNS_9OperationENS_4TypeEENKUlN4llvm9StringRefEjjT_E_clIZNS0_15setFunctionTypeES2_S3_EUlS2_OS6_E1_EEDaS5_jjS6_.isra.0 called 15687 returned 100% blocks executed 13%
    15687:  289:  auto updateAttrFn = [&](StringRef attrName, unsigned oldCount,
        -:  290:                          unsigned newCount, auto setAttrFn) {
    15687:  291:    if (oldCount == newCount)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    15687:  292:      return;
        -:  293:    // The new type has no arguments/results, just drop the attribute.
    #####:  294:    if (newCount == 0) {
branch  0 never executed
branch  1 never executed
    #####:  295:      op->removeAttr(attrName);
call    0 never executed
    #####:  296:      return;
        -:  297:    }
    #####:  298:    ArrayAttr attrs = op->getAttrOfType<ArrayAttr>(attrName);
call    0 never executed
    #####:  299:    if (!attrs)
branch  0 never executed
branch  1 never executed
        -:  300:      return;
        -:  301:
        -:  302:    // The new type has less arguments/results, take the first N attributes.
    #####:  303:    if (newCount < oldCount)
branch  0 never executed
branch  1 never executed
    #####:  304:      return setAttrFn(op, attrs.getValue().take_front(newCount));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  305:
        -:  306:    // Otherwise, the new type has more arguments/results. Initialize the new
        -:  307:    // arguments/results with empty attributes.
    #####:  308:    SmallVector<Attribute> newAttrs(attrs.begin(), attrs.end());
call    0 never executed
call    1 never executed
    #####:  309:    newAttrs.resize(newCount);
call    0 never executed
    #####:  310:    setAttrFn(op, newAttrs);
        -:  311:  };
------------------
_ZZN4mlir23function_interface_impl15setFunctionTypeEPNS_9OperationENS_4TypeEENKUlN4llvm9StringRefEjjT_E_clIZNS0_15setFunctionTypeES2_S3_EUlS2_OS6_E0_EEDaS5_jjS6_.isra.0:
function _ZZN4mlir23function_interface_impl15setFunctionTypeEPNS_9OperationENS_4TypeEENKUlN4llvm9StringRefEjjT_E_clIZNS0_15setFunctionTypeES2_S3_EUlS2_OS6_E0_EEDaS5_jjS6_.isra.0 called 15687 returned 100% blocks executed 61%
    15687:  289:  auto updateAttrFn = [&](StringRef attrName, unsigned oldCount,
        -:  290:                          unsigned newCount, auto setAttrFn) {
    15687:  291:    if (oldCount == newCount)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
    15680:  292:      return;
        -:  293:    // The new type has no arguments/results, just drop the attribute.
     1885:  294:    if (newCount == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  295:      op->removeAttr(attrName);
call    0 never executed
    #####:  296:      return;
        -:  297:    }
     1885:  298:    ArrayAttr attrs = op->getAttrOfType<ArrayAttr>(attrName);
call    0 returned 100%
     1885:  299:    if (!attrs)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        -:  300:      return;
        -:  301:
        -:  302:    // The new type has less arguments/results, take the first N attributes.
        7:  303:    if (newCount < oldCount)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  304:      return setAttrFn(op, attrs.getValue().take_front(newCount));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  305:
        -:  306:    // Otherwise, the new type has more arguments/results. Initialize the new
        -:  307:    // arguments/results with empty attributes.
       14:  308:    SmallVector<Attribute> newAttrs(attrs.begin(), attrs.end());
call    0 returned 100%
call    1 returned 100%
        7:  309:    newAttrs.resize(newCount);
call    0 returned 100%
       14:  310:    setAttrFn(op, newAttrs);
        -:  311:  };
------------------
        -:  312:
        -:  313:  // Update the argument and result attributes.
    15687:  314:  updateAttrFn(
call    0 returned 100%
        -:  315:      getArgDictAttrName(), oldNumArgs, newNumArgs,
       7*:  316:      [&](Operation *op, auto &&attrs) { setAllArgAttrDicts(op, attrs); });
call    0 never executed
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    15687:  317:  updateAttrFn(
call    0 returned 100%
        -:  318:      getResultDictAttrName(), oldNumResults, newNumResults,
    #####:  319:      [&](Operation *op, auto &&attrs) { setAllResultAttrDicts(op, attrs); });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    15687:  320:}
