        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/IR/TestOperationEquals.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestOperationEquals.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestOperationEquals.cpp.gcda
        -:    0:Runs:325561
        -:    1://===- TestOperationEquals.cpp - Passes to test OperationEquivalence ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinOps.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14:namespace {
        -:   15:/// This pass illustrates the IR def-use chains through printing.
  326608*:   16:struct TestOperationEqualPass
call    0 never executed
call    1 returned 100%
        -:   17:    : public PassWrapper<TestOperationEqualPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_122TestOperationEqualPass13resolveTypeIDEv called 326608 returned 100% blocks executed 100%
   326608:   18:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestOperationEqualPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   19:
function _ZNK12_GLOBAL__N_122TestOperationEqualPass11getArgumentEv called 325599 returned 100% blocks executed 100%
   325599:   20:  StringRef getArgument() const final { return "test-operations-equality"; }
function _ZNK12_GLOBAL__N_122TestOperationEqualPass14getDescriptionEv called 325561 returned 100% blocks executed 100%
   325561:   21:  StringRef getDescription() const final { return "Test operations equality."; }
function _ZN12_GLOBAL__N_122TestOperationEqualPass14runOnOperationEv called 846 returned 100% blocks executed 39%
      846:   22:  void runOnOperation() override {
      846:   23:    ModuleOp module = getOperation();
call    0 returned 100%
        -:   24:    // Expects two operations at the top-level:
      846:   25:    int opCount = module.getBody()->getOperations().size();
call    0 returned 100%
      846:   26:    if (opCount != 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      846:   27:      module.emitError() << "expected 2 top-level ops in the module, got "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      846:   28:                         << opCount;
call    0 returned 100%
      846:   29:      return signalPassFailure();
call    0 returned 100%
        -:   30:    }
    #####:   31:    DenseMap<Value, Value> valuesMap;
call    0 never executed
function _ZZN12_GLOBAL__N_122TestOperationEqualPass14runOnOperationEvENKUlN4mlir5ValueES2_E_clES2_S2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   32:    auto mapValue = [&](Value lhs, Value rhs) {
    #####:   33:      auto insertion = valuesMap.insert({lhs, rhs});
call    0 never executed
    #####:   34:      return success(insertion.first->second == rhs);
call    0 never executed
    #####:   35:    };
        -:   36:
    #####:   37:    Operation *first = &module.getBody()->front();
call    0 never executed
call    1 never executed
    #####:   38:    llvm::outs() << first->getName().getStringRef() << " with attr "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   39:                 << first->getAttrDictionary();
call    0 never executed
call    1 never executed
    #####:   40:    OperationEquivalence::Flags flags{};
    #####:   41:    if (!first->hasAttr("strict_loc_check"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:      flags |= OperationEquivalence::IgnoreLocations;
call    0 never executed
    #####:   43:    if (OperationEquivalence::isEquivalentTo(first, &module.getBody()->back(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   44:                                             mapValue, mapValue, flags))
    #####:   45:      llvm::outs() << " compares equals.\n";
call    0 never executed
call    1 never executed
        -:   46:    else
    #####:   47:      llvm::outs() << " compares NOT equals!\n";
call    0 never executed
call    1 never executed
        -:   48:  }
        -:   49:};
        -:   50:} // namespace
        -:   51:
        -:   52:namespace mlir {
function _ZN4mlir30registerTestOperationEqualPassEv called 325561 returned 100% blocks executed 100%
   325561:   53:void registerTestOperationEqualPass() {
   325561:   54:  PassRegistration<TestOperationEqualPass>();
call    0 returned 100%
   325561:   55:}
        -:   56:} // namespace mlir
