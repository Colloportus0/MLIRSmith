        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:325580
        -:    1://===- ModuleTranslation.h - MLIR to LLVM conversion ------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the translation between an MLIR LLVM dialect module and
        -:   10:// the corresponding LLVMIR module. It only handles core LLVM IR operations.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_TARGET_LLVMIR_MODULETRANSLATION_H
        -:   15:#define MLIR_TARGET_LLVMIR_MODULETRANSLATION_H
        -:   16:
        -:   17:#include "mlir/IR/Operation.h"
        -:   18:#include "mlir/IR/Value.h"
        -:   19:#include "mlir/IR/SymbolTable.h"
        -:   20:#include "mlir/Target/LLVMIR/Export.h"
        -:   21:#include "mlir/Target/LLVMIR/LLVMTranslationInterface.h"
        -:   22:#include "mlir/Target/LLVMIR/TypeToLLVM.h"
        -:   23:
        -:   24:#include "llvm/ADT/SetVector.h"
        -:   25:#include "llvm/Frontend/OpenMP/OMPIRBuilder.h"
        -:   26:
        -:   27:namespace llvm {
        -:   28:class BasicBlock;
        -:   29:class IRBuilderBase;
        -:   30:class Function;
        -:   31:class Value;
        -:   32:} // namespace llvm
        -:   33:
        -:   34:namespace mlir {
        -:   35:class Attribute;
        -:   36:class Block;
        -:   37:class Location;
        -:   38:
        -:   39:namespace LLVM {
        -:   40:
        -:   41:namespace detail {
        -:   42:class DebugTranslation;
        -:   43:} // namespace detail
        -:   44:
        -:   45:class DINodeAttr;
        -:   46:class LLVMFuncOp;
        -:   47:
        -:   48:/// Implementation class for module translation. Holds a reference to the module
        -:   49:/// being translated, and the mappings between the original and the translated
        -:   50:/// functions, basic blocks and values. It is practically easier to hold these
        -:   51:/// mappings in one class since the conversion of control flow operations
        -:   52:/// needs to look up block and function mappings.
        -:   53:class ModuleTranslation {
        -:   54:  friend std::unique_ptr<llvm::Module>
        -:   55:  mlir::translateModuleToLLVMIR(Operation *, llvm::LLVMContext &, StringRef);
        -:   56:
        -:   57:public:
        -:   58:  /// Stores the mapping between a function name and its LLVM IR representation.
        -:   59:  void mapFunction(StringRef name, llvm::Function *func) {
        -:   60:    auto result = functionMapping.try_emplace(name, func);
        -:   61:    (void)result;
        -:   62:    assert(result.second &&
        -:   63:           "attempting to map a function that is already mapped");
        -:   64:  }
        -:   65:
        -:   66:  /// Finds an LLVM IR function by its name.
    #####:   67:  llvm::Function *lookupFunction(StringRef name) const {
    #####:   68:    return functionMapping.lookup(name);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   69:  }
        -:   70:
        -:   71:  /// Stores the mapping between an MLIR value and its LLVM IR counterpart.
    #####:   72:  void mapValue(Value mlir, llvm::Value *llvm) { mapValue(mlir) = llvm; }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   73:
        -:   74:  /// Provides write-once access to store the LLVM IR value corresponding to the
        -:   75:  /// given MLIR value.
function _ZN4mlir4LLVM17ModuleTranslation8mapValueENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   76:  llvm::Value *&mapValue(Value value) {
    #####:   77:    llvm::Value *&llvm = valueMapping[value];
call    0 never executed
    #####:   78:    assert(llvm == nullptr &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   79:           "attempting to map a value that is already mapped");
    #####:   80:    return llvm;
        -:   81:  }
        -:   82:
        -:   83:  /// Finds an LLVM IR value corresponding to the given MLIR value.
    #####:   84:  llvm::Value *lookupValue(Value value) const {
    #####:   85:    return valueMapping.lookup(value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
call   166 never executed
branch 167 never executed
branch 168 never executed
call   169 never executed
branch 170 never executed
branch 171 never executed
call   172 never executed
call   173 never executed
call   174 never executed
call   175 never executed
call   176 never executed
call   177 never executed
call   178 never executed
call   179 never executed
call   180 never executed
call   181 never executed
call   182 never executed
call   183 never executed
call   184 never executed
call   185 never executed
call   186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 never executed
call   196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 never executed
call   201 never executed
call   202 never executed
call   203 never executed
call   204 never executed
call   205 never executed
call   206 never executed
call   207 never executed
call   208 never executed
call   209 never executed
call   210 never executed
call   211 never executed
call   212 never executed
call   213 never executed
call   214 never executed
call   215 never executed
call   216 never executed
call   217 never executed
call   218 never executed
call   219 never executed
call   220 never executed
call   221 never executed
call   222 never executed
call   223 never executed
call   224 never executed
call   225 never executed
        -:   86:  }
        -:   87:
        -:   88:  /// Looks up remapped a list of remapped values.
        -:   89:  SmallVector<llvm::Value *> lookupValues(ValueRange values);
        -:   90:
        -:   91:  /// Stores the mapping between an MLIR block and LLVM IR basic block.
        -:   92:  void mapBlock(Block *mlir, llvm::BasicBlock *llvm) {
        -:   93:    auto result = blockMapping.try_emplace(mlir, llvm);
        -:   94:    (void)result;
        -:   95:    assert(result.second && "attempting to map a block that is already mapped");
        -:   96:  }
        -:   97:
        -:   98:  /// Finds an LLVM IR basic block that corresponds to the given MLIR block.
    #####:   99:  llvm::BasicBlock *lookupBlock(Block *block) const {
    #####:  100:    return blockMapping.lookup(block);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  101:  }
        -:  102:
        -:  103:  /// Stores the mapping between an MLIR operation with successors and a
        -:  104:  /// corresponding LLVM IR instruction.
function _ZN4mlir4LLVM17ModuleTranslation9mapBranchEPNS_9OperationEPN4llvm11InstructionE called 0 returned 0% blocks executed 0%
    #####:  105:  void mapBranch(Operation *mlir, llvm::Instruction *llvm) {
    #####:  106:    auto result = branchMapping.try_emplace(mlir, llvm);
call    0 never executed
    #####:  107:    (void)result;
    #####:  108:    assert(result.second &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  109:           "attempting to map a branch that is already mapped");
    #####:  110:  }
        -:  111:
        -:  112:  /// Finds an LLVM IR instruction that corresponds to the given MLIR operation
        -:  113:  /// with successors.
        -:  114:  llvm::Instruction *lookupBranch(Operation *op) const {
        -:  115:    return branchMapping.lookup(op);
        -:  116:  }
        -:  117:
        -:  118:  /// Removes the mapping for blocks contained in the region and values defined
        -:  119:  /// in these blocks.
        -:  120:  void forgetMapping(Region &region);
        -:  121:
        -:  122:  /// Returns the LLVM metadata corresponding to a reference to an mlir LLVM
        -:  123:  /// dialect access group operation.
        -:  124:  llvm::MDNode *getAccessGroup(Operation &opInst,
        -:  125:                               SymbolRefAttr accessGroupRef) const;
        -:  126:
        -:  127:  /// Returns the LLVM metadata corresponding to a reference to an mlir LLVM
        -:  128:  /// dialect alias scope operation
        -:  129:  llvm::MDNode *getAliasScope(Operation &opInst,
        -:  130:                              SymbolRefAttr aliasScopeRef) const;
        -:  131:
        -:  132:  /// Returns the LLVM metadata corresponding to a llvm loop's codegen
        -:  133:  /// options attribute.
    #####:  134:  llvm::MDNode *lookupLoopOptionsMetadata(Attribute options) const {
    #####:  135:    return loopOptionsMetadataMapping.lookup(options);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  136:  }
        -:  137:
function _ZN4mlir4LLVM17ModuleTranslation22mapLoopOptionsMetadataENS_9AttributeEPN4llvm6MDNodeE called 0 returned 0% blocks executed 0%
    #####:  138:  void mapLoopOptionsMetadata(Attribute options, llvm::MDNode *metadata) {
    #####:  139:    auto result = loopOptionsMetadataMapping.try_emplace(options, metadata);
call    0 never executed
    #####:  140:    (void)result;
    #####:  141:    assert(result.second &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  142:           "attempting to map loop options that was already mapped");
    #####:  143:  }
        -:  144:
        -:  145:  // Sets LLVM metadata for memory operations that are in a parallel loop.
        -:  146:  void setAccessGroupsMetadata(Operation *op, llvm::Instruction *inst);
        -:  147:
        -:  148:  // Sets LLVM metadata for memory operations that have alias scope information.
        -:  149:  void setAliasScopeMetadata(Operation *op, llvm::Instruction *inst);
        -:  150:
        -:  151:  /// Converts the type from MLIR LLVM dialect to LLVM.
        -:  152:  llvm::Type *convertType(Type type);
        -:  153:
        -:  154:  /// Returns the MLIR context of the module being translated.
    #####:  155:  MLIRContext &getContext() { return *mlirModule->getContext(); }
call    0 never executed
call    1 never executed
        -:  156:
        -:  157:  /// Returns the LLVM context in which the IR is being constructed.
    #####:  158:  llvm::LLVMContext &getLLVMContext() const { return llvmModule->getContext(); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  159:
        -:  160:  /// Finds an LLVM IR global value that corresponds to the given MLIR operation
        -:  161:  /// defining a global value.
    #####:  162:  llvm::GlobalValue *lookupGlobal(Operation *op) {
    #####:  163:    return globalsMapping.lookup(op);
call    0 never executed
        -:  164:  }
        -:  165:
        -:  166:  /// Returns the OpenMP IR builder associated with the LLVM IR module being
        -:  167:  /// constructed.
        -:  168:  llvm::OpenMPIRBuilder *getOpenMPBuilder() {
        -:  169:    if (!ompBuilder) {
        -:  170:      ompBuilder = std::make_unique<llvm::OpenMPIRBuilder>(*llvmModule);
        -:  171:      ompBuilder->initialize();
        -:  172:    }
        -:  173:    return ompBuilder.get();
        -:  174:  }
        -:  175:
        -:  176:  /// Translates the given location.
        -:  177:  const llvm::DILocation *translateLoc(Location loc, llvm::DILocalScope *scope);
        -:  178:
        -:  179:  /// Translates the given LLVM debug info metadata.
        -:  180:  llvm::Metadata *translateDebugInfo(LLVM::DINodeAttr attr);
        -:  181:
        -:  182:  /// Translates the contents of the given block to LLVM IR using this
        -:  183:  /// translator. The LLVM IR basic block corresponding to the given block is
        -:  184:  /// expected to exist in the mapping of this translator. Uses `builder` to
        -:  185:  /// translate the IR, leaving it at the end of the block. If `ignoreArguments`
        -:  186:  /// is set, does not produce PHI nodes for the block arguments. Otherwise, the
        -:  187:  /// PHI nodes are constructed for block arguments but are _not_ connected to
        -:  188:  /// the predecessors that may not exist yet.
        -:  189:  LogicalResult convertBlock(Block &bb, bool ignoreArguments,
        -:  190:                             llvm::IRBuilderBase &builder);
        -:  191:
        -:  192:  /// Gets the named metadata in the LLVM IR module being constructed, creating
        -:  193:  /// it if it does not exist.
        -:  194:  llvm::NamedMDNode *getOrInsertNamedModuleMetadata(StringRef name);
        -:  195:
        -:  196:  /// Common CRTP base class for ModuleTranslation stack frames.
        -:  197:  class StackFrame {
        -:  198:  public:
        -:  199:    virtual ~StackFrame() = default;
        -:  200:    TypeID getTypeID() const { return typeID; }
        -:  201:
        -:  202:  protected:
        -:  203:    explicit StackFrame(TypeID typeID) : typeID(typeID) {}
        -:  204:
        -:  205:  private:
        -:  206:    const TypeID typeID;
        -:  207:    virtual void anchor();
        -:  208:  };
        -:  209:
        -:  210:  /// Concrete CRTP base class for ModuleTranslation stack frames. When
        -:  211:  /// translating operations with regions, users of ModuleTranslation can store
        -:  212:  /// state on ModuleTranslation stack before entering the region and inspect
        -:  213:  /// it when converting operations nested within that region. Users are
        -:  214:  /// expected to derive this class and put any relevant information into fields
        -:  215:  /// of the derived class. The usual isa/dyn_cast functionality is available
        -:  216:  /// for instances of derived classes.
        -:  217:  template <typename Derived>
        -:  218:  class StackFrameBase : public StackFrame {
        -:  219:  public:
        -:  220:    explicit StackFrameBase() : StackFrame(TypeID::get<Derived>()) {}
        -:  221:  };
        -:  222:
        -:  223:  /// Creates a stack frame of type `T` on ModuleTranslation stack. `T` must
        -:  224:  /// be derived from `StackFrameBase<T>` and constructible from the provided
        -:  225:  /// arguments. Doing this before entering the region of the op being
        -:  226:  /// translated makes the frame available when translating ops within that
        -:  227:  /// region.
        -:  228:  template <typename T, typename... Args>
        -:  229:  void stackPush(Args &&...args) {
        -:  230:    static_assert(
        -:  231:        std::is_base_of<StackFrame, T>::value,
        -:  232:        "can only push instances of StackFrame on ModuleTranslation stack");
        -:  233:    stack.push_back(std::make_unique<T>(std::forward<Args>(args)...));
        -:  234:  }
        -:  235:
        -:  236:  /// Pops the last element from the ModuleTranslation stack.
        -:  237:  void stackPop() { stack.pop_back(); }
        -:  238:
        -:  239:  /// Calls `callback` for every ModuleTranslation stack frame of type `T`
        -:  240:  /// starting from the top of the stack.
        -:  241:  template <typename T>
        -:  242:  WalkResult
        -:  243:  stackWalk(llvm::function_ref<WalkResult(const T &)> callback) const {
        -:  244:    static_assert(std::is_base_of<StackFrame, T>::value,
        -:  245:                  "expected T derived from StackFrame");
        -:  246:    if (!callback)
        -:  247:      return WalkResult::skip();
        -:  248:    for (const std::unique_ptr<StackFrame> &frame : llvm::reverse(stack)) {
        -:  249:      if (T *ptr = dyn_cast_or_null<T>(frame.get())) {
        -:  250:        WalkResult result = callback(*ptr);
        -:  251:        if (result.wasInterrupted())
        -:  252:          return result;
        -:  253:      }
        -:  254:    }
        -:  255:    return WalkResult::advance();
        -:  256:  }
        -:  257:
        -:  258:  /// RAII object calling stackPush/stackPop on construction/destruction.
        -:  259:  template <typename T>
        -:  260:  struct SaveStack {
        -:  261:    template <typename... Args>
        -:  262:    explicit SaveStack(ModuleTranslation &m, Args &&...args)
        -:  263:        : moduleTranslation(m) {
        -:  264:      moduleTranslation.stackPush<T>(std::forward<Args>(args)...);
        -:  265:    }
        -:  266:    ~SaveStack() { moduleTranslation.stackPop(); }
        -:  267:
        -:  268:  private:
        -:  269:    ModuleTranslation &moduleTranslation;
        -:  270:  };
        -:  271:
    #####:  272:  SymbolTableCollection& symbolTable() { return symbolTableCollection; }
call    0 never executed
call    1 never executed
        -:  273:
        -:  274:private:
        -:  275:  ModuleTranslation(Operation *module,
        -:  276:                    std::unique_ptr<llvm::Module> llvmModule);
        -:  277:  ~ModuleTranslation();
        -:  278:
        -:  279:  /// Converts individual components.
        -:  280:  LogicalResult convertOperation(Operation &op, llvm::IRBuilderBase &builder);
        -:  281:  LogicalResult convertFunctionSignatures();
        -:  282:  LogicalResult convertFunctions();
        -:  283:  LogicalResult convertGlobals();
        -:  284:  LogicalResult convertOneFunction(LLVMFuncOp func);
        -:  285:
        -:  286:  /// Process access_group LLVM Metadata operations and create LLVM
        -:  287:  /// metadata nodes.
        -:  288:  LogicalResult createAccessGroupMetadata();
        -:  289:
        -:  290:  /// Process alias.scope LLVM Metadata operations and create LLVM
        -:  291:  /// metadata nodes for them and their domains.
        -:  292:  LogicalResult createAliasScopeMetadata();
        -:  293:
        -:  294:  /// Translates dialect attributes attached to the given operation.
        -:  295:  LogicalResult convertDialectAttributes(Operation *op);
        -:  296:
        -:  297:  /// Original and translated module.
        -:  298:  Operation *mlirModule;
        -:  299:  std::unique_ptr<llvm::Module> llvmModule;
        -:  300:  /// A converter for translating debug information.
        -:  301:  std::unique_ptr<detail::DebugTranslation> debugTranslation;
        -:  302:
        -:  303:  /// Builder for LLVM IR generation of OpenMP constructs.
        -:  304:  std::unique_ptr<llvm::OpenMPIRBuilder> ompBuilder;
        -:  305:
        -:  306:  /// Mappings between llvm.mlir.global definitions and corresponding globals.
        -:  307:  DenseMap<Operation *, llvm::GlobalValue *> globalsMapping;
        -:  308:
        -:  309:  /// A stateful object used to translate types.
        -:  310:  TypeToLLVMIRTranslator typeTranslator;
        -:  311:
        -:  312:  /// A dialect interface collection used for dispatching the translation to
        -:  313:  /// specific dialects.
        -:  314:  LLVMTranslationInterface iface;
        -:  315:
        -:  316:  /// Mappings between original and translated values, used for lookups.
        -:  317:  llvm::StringMap<llvm::Function *> functionMapping;
        -:  318:  DenseMap<Value, llvm::Value *> valueMapping;
        -:  319:  DenseMap<Block *, llvm::BasicBlock *> blockMapping;
        -:  320:
        -:  321:  /// A mapping between MLIR LLVM dialect terminators and LLVM IR terminators
        -:  322:  /// they are converted to. This allows for connecting PHI nodes to the source
        -:  323:  /// values after all operations are converted.
        -:  324:  DenseMap<Operation *, llvm::Instruction *> branchMapping;
        -:  325:
        -:  326:  /// Mapping from an access group metadata operation to its LLVM metadata.
        -:  327:  /// This map is populated on module entry and is used to annotate loops (as
        -:  328:  /// identified via their branches) and contained memory accesses.
        -:  329:  DenseMap<Operation *, llvm::MDNode *> accessGroupMetadataMapping;
        -:  330:
        -:  331:  /// Mapping from an attribute describing loop codegen options to its LLVM
        -:  332:  /// metadata. The metadata is attached to Latch block branches with this
        -:  333:  /// attribute.
        -:  334:  DenseMap<Attribute, llvm::MDNode *> loopOptionsMetadataMapping;
        -:  335:
        -:  336:  /// Mapping from an access scope metadata operation to its LLVM metadata.
        -:  337:  /// This map is populated on module entry.
        -:  338:  DenseMap<Operation *, llvm::MDNode *> aliasScopeMetadataMapping;
        -:  339:
        -:  340:  /// Stack of user-specified state elements, useful when translating operations
        -:  341:  /// with regions.
        -:  342:  SmallVector<std::unique_ptr<StackFrame>> stack;
        -:  343:
        -:  344:  /// A cache for the symbol tables constructed during symbols lookup.
        -:  345:  SymbolTableCollection symbolTableCollection;
        -:  346:};
        -:  347:
        -:  348:namespace detail {
        -:  349:/// For all blocks in the region that were converted to LLVM IR using the given
        -:  350:/// ModuleTranslation, connect the PHI nodes of the corresponding LLVM IR blocks
        -:  351:/// to the results of preceding blocks.
        -:  352:void connectPHINodes(Region &region, const ModuleTranslation &state);
        -:  353:
        -:  354:/// Get a topologically sorted list of blocks of the given region.
        -:  355:SetVector<Block *> getTopologicallySortedBlocks(Region &region);
        -:  356:
        -:  357:/// Create an LLVM IR constant of `llvmType` from the MLIR attribute `attr`.
        -:  358:/// This currently supports integer, floating point, splat and dense element
        -:  359:/// attributes and combinations thereof. Also, an array attribute with two
        -:  360:/// elements is supported to represent a complex constant.  In case of error,
        -:  361:/// report it to `loc` and return nullptr.
        -:  362:llvm::Constant *getLLVMConstant(llvm::Type *llvmType, Attribute attr,
        -:  363:                                Location loc,
        -:  364:                                const ModuleTranslation &moduleTranslation);
        -:  365:
        -:  366:/// Creates a call to an LLVM IR intrinsic function with the given arguments.
        -:  367:llvm::Value *createIntrinsicCall(llvm::IRBuilderBase &builder,
        -:  368:                                 llvm::Intrinsic::ID intrinsic,
        -:  369:                                 ArrayRef<llvm::Value *> args = {},
        -:  370:                                 ArrayRef<llvm::Type *> tys = {});
        -:  371:} // namespace detail
        -:  372:
        -:  373:} // namespace LLVM
        -:  374:} // namespace mlir
        -:  375:
        -:  376:namespace llvm {
        -:  377:template <typename T>
        -:  378:struct isa_impl<T, ::mlir::LLVM::ModuleTranslation::StackFrame> {
        -:  379:  static inline bool
        -:  380:  doit(const ::mlir::LLVM::ModuleTranslation::StackFrame &frame) {
        -:  381:    return frame.getTypeID() == ::mlir::TypeID::get<T>();
        -:  382:  }
        -:  383:};
        -:  384:} // namespace llvm
        -:  385:
        -:  386:#endif // MLIR_TARGET_LLVMIR_MODULETRANSLATION_H
