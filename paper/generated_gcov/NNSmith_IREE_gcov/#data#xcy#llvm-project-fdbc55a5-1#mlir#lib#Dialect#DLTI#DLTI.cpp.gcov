        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/DLTI/DLTI.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/DLTI/CMakeFiles/obj.MLIRDLTIDialect.dir/DLTI.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/DLTI/CMakeFiles/obj.MLIRDLTIDialect.dir/DLTI.cpp.gcda
        -:    0:Runs:325546
        -:    1://===- DLTI.cpp - Data Layout And Target Info MLIR Dialect Implementation -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/DLTI/DLTI.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/BuiltinDialect.h"
        -:   12:#include "mlir/IR/BuiltinOps.h"
        -:   13:#include "mlir/IR/Dialect.h"
        -:   14:#include "mlir/IR/DialectImplementation.h"
        -:   15:#include "llvm/ADT/TypeSwitch.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:#include "mlir/Dialect/DLTI/DLTIDialect.cpp.inc"
        -:   20:
        -:   21://===----------------------------------------------------------------------===//
        -:   22:// DataLayoutEntryAttr
        -:   23://===----------------------------------------------------------------------===//
        -:   24://
        -:   25:constexpr const StringLiteral mlir::DataLayoutEntryAttr::kAttrKeyword;
        -:   26:
        -:   27:namespace mlir {
        -:   28:namespace impl {
        -:   29:class DataLayoutEntryStorage : public AttributeStorage {
        -:   30:public:
        -:   31:  using KeyTy = std::pair<DataLayoutEntryKey, Attribute>;
        -:   32:
    #####:   33:  DataLayoutEntryStorage(DataLayoutEntryKey entryKey, Attribute value)
    #####:   34:      : entryKey(entryKey), value(value) {}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   35:
    #####:   36:  static DataLayoutEntryStorage *construct(AttributeStorageAllocator &allocator,
        -:   37:                                           const KeyTy &key) {
    #####:   38:    return new (allocator.allocate<DataLayoutEntryStorage>())
    #####:   39:        DataLayoutEntryStorage(key.first, key.second);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   40:  }
        -:   41:
    #####:   42:  bool operator==(const KeyTy &other) const {
    #####:   43:    return other.first == entryKey && other.second == value;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   44:  }
        -:   45:
        -:   46:  DataLayoutEntryKey entryKey;
        -:   47:  Attribute value;
        -:   48:};
        -:   49:} // namespace impl
        -:   50:} // namespace mlir
        -:   51:
function _ZN4mlir19DataLayoutEntryAttr3getENS_10StringAttrENS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   52:DataLayoutEntryAttr DataLayoutEntryAttr::get(StringAttr key, Attribute value) {
    #####:   53:  return Base::get(key.getContext(), key, value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   54:}
        -:   55:
function _ZN4mlir19DataLayoutEntryAttr3getENS_4TypeENS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   56:DataLayoutEntryAttr DataLayoutEntryAttr::get(Type key, Attribute value) {
    #####:   57:  return Base::get(key.getContext(), key, value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   58:}
        -:   59:
function _ZNK4mlir19DataLayoutEntryAttr6getKeyEv called 0 returned 0% blocks executed 0%
    #####:   60:DataLayoutEntryKey DataLayoutEntryAttr::getKey() const {
    #####:   61:  return getImpl()->entryKey;
        -:   62:}
        -:   63:
function _ZNK4mlir19DataLayoutEntryAttr8getValueEv called 0 returned 0% blocks executed 0%
    #####:   64:Attribute DataLayoutEntryAttr::getValue() const { return getImpl()->value; }
        -:   65:
        -:   66:/// Parses an attribute with syntax:
        -:   67:///   attr ::= `#target.` `dl_entry` `<` (type | quoted-string) `,` attr `>`
function _ZN4mlir19DataLayoutEntryAttr5parseERNS_9AsmParserE called 0 returned 0% blocks executed 0%
    #####:   68:DataLayoutEntryAttr DataLayoutEntryAttr::parse(AsmParser &parser) {
    #####:   69:  if (failed(parser.parseLess()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:    return {};
        -:   71:
    #####:   72:  Type type = nullptr;
call    0 never executed
    #####:   73:  std::string identifier;
call    0 never executed
    #####:   74:  SMLoc idLoc = parser.getCurrentLocation();
call    0 never executed
    #####:   75:  OptionalParseResult parsedType = parser.parseOptionalType(type);
call    0 never executed
    #####:   76:  if (parsedType.has_value() && failed(parsedType.value()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   77:    return {};
    #####:   78:  if (!parsedType.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:   79:    OptionalParseResult parsedString = parser.parseOptionalString(&identifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:    if (!parsedString.has_value() || failed(parsedString.value())) {
branch  0 never executed
branch  1 never executed
    #####:   81:      parser.emitError(idLoc) << "expected a type or a quoted string";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   82:      return {};
        -:   83:    }
        -:   84:  }
        -:   85:
    #####:   86:  Attribute value;
    #####:   87:  if (failed(parser.parseComma()) || failed(parser.parseAttribute(value)) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   88:      failed(parser.parseGreater()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:    return {};
        -:   90:
    #####:   91:  return type ? get(type, value)
    #####:   92:              : get(parser.getBuilder().getStringAttr(identifier), value);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   93:}
        -:   94:
function _ZNK4mlir19DataLayoutEntryAttr5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   95:void DataLayoutEntryAttr::print(AsmPrinter &os) const {
    #####:   96:  os << DataLayoutEntryAttr::kAttrKeyword << "<";
call    0 never executed
call    1 never executed
    #####:   97:  if (auto type = getKey().dyn_cast<Type>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:    os << type;
call    0 never executed
        -:   99:  else
    #####:  100:    os << "\"" << getKey().get<StringAttr>().strref() << "\"";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  101:  os << ", " << getValue() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  102:}
        -:  103:
        -:  104://===----------------------------------------------------------------------===//
        -:  105:// DataLayoutSpecAttr
        -:  106://===----------------------------------------------------------------------===//
        -:  107://
        -:  108:constexpr const StringLiteral mlir::DataLayoutSpecAttr::kAttrKeyword;
        -:  109:
        -:  110:namespace mlir {
        -:  111:namespace impl {
        -:  112:class DataLayoutSpecStorage : public AttributeStorage {
        -:  113:public:
        -:  114:  using KeyTy = ArrayRef<DataLayoutEntryInterface>;
        -:  115:
        -:  116:  DataLayoutSpecStorage(ArrayRef<DataLayoutEntryInterface> entries)
        -:  117:      : entries(entries) {}
        -:  118:
    #####:  119:  bool operator==(const KeyTy &key) const { return key == entries; }
branch  0 never executed
branch  1 never executed
        -:  120:
        -:  121:  static DataLayoutSpecStorage *construct(AttributeStorageAllocator &allocator,
        -:  122:                                          const KeyTy &key) {
        -:  123:    return new (allocator.allocate<DataLayoutSpecStorage>())
        -:  124:        DataLayoutSpecStorage(allocator.copyInto(key));
        -:  125:  }
        -:  126:
        -:  127:  ArrayRef<DataLayoutEntryInterface> entries;
        -:  128:};
        -:  129:} // namespace impl
        -:  130:} // namespace mlir
        -:  131:
        -:  132:DataLayoutSpecAttr
function _ZN4mlir18DataLayoutSpecAttr3getEPNS_11MLIRContextEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  133:DataLayoutSpecAttr::get(MLIRContext *ctx,
        -:  134:                        ArrayRef<DataLayoutEntryInterface> entries) {
    #####:  135:  return Base::get(ctx, entries);
call    0 never executed
        -:  136:}
        -:  137:
        -:  138:DataLayoutSpecAttr
function _ZN4mlir18DataLayoutSpecAttr10getCheckedEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEEPNS_11MLIRContextENS1_8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  139:DataLayoutSpecAttr::getChecked(function_ref<InFlightDiagnostic()> emitError,
        -:  140:                               MLIRContext *context,
        -:  141:                               ArrayRef<DataLayoutEntryInterface> entries) {
    #####:  142:  return Base::getChecked(emitError, context, entries);
call    0 never executed
call    1 never executed
        -:  143:}
        -:  144:
        -:  145:LogicalResult
function _ZN4mlir18DataLayoutSpecAttr6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS1_8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  146:DataLayoutSpecAttr::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  147:                           ArrayRef<DataLayoutEntryInterface> entries) {
    #####:  148:  DenseSet<Type> types;
call    0 never executed
    #####:  149:  DenseSet<StringAttr> ids;
call    0 never executed
call    1 never executed
    #####:  150:  for (DataLayoutEntryInterface entry : entries) {
branch  0 never executed
branch  1 never executed
    #####:  151:    if (auto type = entry.getKey().dyn_cast<Type>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  152:      if (!types.insert(type).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  153:        return emitError() << "repeated layout entry key: " << type;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  154:    } else {
    #####:  155:      auto id = entry.getKey().get<StringAttr>();
call    0 never executed
call    1 never executed
    #####:  156:      if (!ids.insert(id).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  157:        return emitError() << "repeated layout entry key: " << id.getValue();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  158:    }
        -:  159:  }
    #####:  160:  return success();
call    0 never executed
        -:  161:}
        -:  162:
        -:  163:/// Given a list of old and a list of new entries, overwrites old entries with
        -:  164:/// new ones if they have matching keys, appends new entries to the old entry
        -:  165:/// list otherwise.
        -:  166:static void
function _ZL25overwriteDuplicateEntriesRN4llvm15SmallVectorImplIN4mlir24DataLayoutEntryInterfaceEEENS_8ArrayRefIS2_EE called 0 returned 0% blocks executed 0%
    #####:  167:overwriteDuplicateEntries(SmallVectorImpl<DataLayoutEntryInterface> &oldEntries,
        -:  168:                          ArrayRef<DataLayoutEntryInterface> newEntries) {
    #####:  169:  unsigned oldEntriesSize = oldEntries.size();
    #####:  170:  for (DataLayoutEntryInterface entry : newEntries) {
branch  0 never executed
branch  1 never executed
        -:  171:    // We expect a small (dozens) number of entries, so it is practically
        -:  172:    // cheaper to iterate over the list linearly rather than to create an
        -:  173:    // auxiliary hashmap to avoid duplication. Also note that we never need to
        -:  174:    // check for duplicate keys the values that were added from `newEntries`.
    #####:  175:    bool replaced = false;
    #####:  176:    for (unsigned i = 0; i < oldEntriesSize; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  177:      if (oldEntries[i].getKey() == entry.getKey()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  178:        oldEntries[i] = entry;
branch  0 never executed
branch  1 never executed
    #####:  179:        replaced = true;
    #####:  180:        break;
        -:  181:      }
        -:  182:    }
    #####:  183:    if (!replaced)
    #####:  184:      oldEntries.push_back(entry);
call    0 never executed
        -:  185:  }
    #####:  186:}
        -:  187:
        -:  188:/// Combines a data layout spec into the given lists of entries organized by
        -:  189:/// type class and identifier, overwriting them if necessary. Fails to combine
        -:  190:/// if the two entries with identical keys are not compatible.
        -:  191:static LogicalResult
function _ZL14combineOneSpecN4mlir23DataLayoutSpecInterfaceERN4llvm8DenseMapINS_6TypeIDENS1_11SmallVectorINS_24DataLayoutEntryInterfaceELj4EEENS1_12DenseMapInfoIS3_vEENS1_6detail12DenseMapPairIS3_S6_EEEERNS2_INS_10StringAttrES5_NS7_ISE_vEENSA_ISE_S5_EEEE called 0 returned 0% blocks executed 0%
    #####:  192:combineOneSpec(DataLayoutSpecInterface spec,
        -:  193:               DenseMap<TypeID, DataLayoutEntryList> &entriesForType,
        -:  194:               DenseMap<StringAttr, DataLayoutEntryInterface> &entriesForID) {
        -:  195:  // A missing spec should be fine.
    #####:  196:  if (!spec)
branch  0 never executed
branch  1 never executed
    #####:  197:    return success();
        -:  198:
    #####:  199:  DenseMap<TypeID, DataLayoutEntryList> newEntriesForType;
call    0 never executed
    #####:  200:  DenseMap<StringAttr, DataLayoutEntryInterface> newEntriesForID;
call    0 never executed
call    1 never executed
    #####:  201:  spec.bucketEntriesByType(newEntriesForType, newEntriesForID);
call    0 never executed
        -:  202:
        -:  203:  // Try overwriting the old entries with the new ones.
    #####:  204:  for (auto &kvp : newEntriesForType) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  205:    if (!entriesForType.count(kvp.first)) {
call    0 never executed
    #####:  206:      entriesForType[kvp.first] = std::move(kvp.second);
call    0 never executed
call    1 never executed
    #####:  207:      continue;
        -:  208:    }
        -:  209:
    #####:  210:    Type typeSample = kvp.second.front().getKey().get<Type>();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  211:    assert(&typeSample.getDialect() !=
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  212:               typeSample.getContext()->getLoadedDialect<BuiltinDialect>() &&
        -:  213:           "unexpected data layout entry for built-in type");
        -:  214:
    #####:  215:    auto interface = typeSample.cast<DataLayoutTypeInterface>();
call    0 never executed
    #####:  216:    if (!interface.areCompatible(entriesForType.lookup(kvp.first), kvp.second))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  217:      return failure();
        -:  218:
    #####:  219:    overwriteDuplicateEntries(entriesForType[kvp.first], kvp.second);
call    0 never executed
call    1 never executed
        -:  220:  }
        -:  221:
    #####:  222:  for (const auto &kvp : newEntriesForID) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  223:    StringAttr id = kvp.second.getKey().get<StringAttr>();
call    0 never executed
call    1 never executed
    #####:  224:    Dialect *dialect = id.getReferencedDialect();
call    0 never executed
    #####:  225:    if (!entriesForID.count(id)) {
call    0 never executed
    #####:  226:      entriesForID[id] = kvp.second;
call    0 never executed
    #####:  227:      continue;
        -:  228:    }
        -:  229:
        -:  230:    // Attempt to combine the enties using the dialect interface. If the
        -:  231:    // dialect is not loaded for some reason, use the default combinator
        -:  232:    // that conservatively accepts identical entries only.
    #####:  233:    entriesForID[id] =
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:        dialect ? cast<DataLayoutDialectInterface>(dialect)->combine(
call    0 never executed
    #####:  235:                      entriesForID[id], kvp.second)
call    0 never executed
call    1 never executed
    #####:  236:                : DataLayoutDialectInterface::defaultCombine(entriesForID[id],
call    0 never executed
    #####:  237:                                                             kvp.second);
call    0 never executed
    #####:  238:    if (!entriesForID[id])
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  239:      return failure();
        -:  240:  }
        -:  241:
    #####:  242:  return success();
call    0 never executed
        -:  243:}
        -:  244:
        -:  245:DataLayoutSpecAttr
function _ZNK4mlir18DataLayoutSpecAttr11combineWithEN4llvm8ArrayRefINS_23DataLayoutSpecInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  246:DataLayoutSpecAttr::combineWith(ArrayRef<DataLayoutSpecInterface> specs) const {
        -:  247:  // Only combine with attributes of the same kind.
        -:  248:  // TODO: reconsider this when the need arises.
    #####:  249:  if (llvm::any_of(specs, [](DataLayoutSpecInterface spec) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  250:        return !spec.isa<DataLayoutSpecAttr>();
        -:  251:      }))
    #####:  252:    return {};
        -:  253:
        -:  254:  // Combine all specs in order, with `this` being the last one.
    #####:  255:  DenseMap<TypeID, DataLayoutEntryList> entriesForType;
call    0 never executed
    #####:  256:  DenseMap<StringAttr, DataLayoutEntryInterface> entriesForID;
call    0 never executed
call    1 never executed
    #####:  257:  for (DataLayoutSpecInterface spec : specs)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  258:    if (failed(combineOneSpec(spec, entriesForType, entriesForID)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  259:      return nullptr;
    #####:  260:  if (failed(combineOneSpec(*this, entriesForType, entriesForID)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  261:    return nullptr;
        -:  262:
        -:  263:  // Rebuild the linear list of entries.
    #####:  264:  SmallVector<DataLayoutEntryInterface> entries;
call    0 never executed
call    1 never executed
    #####:  265:  llvm::append_range(entries, llvm::make_second_range(entriesForID));
call    0 never executed
call    1 never executed
    #####:  266:  for (const auto &kvp : entriesForType)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  267:    llvm::append_range(entries, kvp.getSecond());
call    0 never executed
        -:  268:
    #####:  269:  return DataLayoutSpecAttr::get(getContext(), entries);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  270:}
        -:  271:
function _ZNK4mlir18DataLayoutSpecAttr10getEntriesEv called 0 returned 0% blocks executed 0%
    #####:  272:DataLayoutEntryListRef DataLayoutSpecAttr::getEntries() const {
    #####:  273:  return getImpl()->entries;
call    0 never executed
call    1 never executed
        -:  274:}
        -:  275:
        -:  276:/// Parses an attribute with syntax
        -:  277:///   attr ::= `#target.` `dl_spec` `<` attr-list? `>`
        -:  278:///   attr-list ::= attr
        -:  279:///               | attr `,` attr-list
function _ZN4mlir18DataLayoutSpecAttr5parseERNS_9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  280:DataLayoutSpecAttr DataLayoutSpecAttr::parse(AsmParser &parser) {
    #####:  281:  if (failed(parser.parseLess()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  282:    return {};
        -:  283:
        -:  284:  // Empty spec.
    #####:  285:  if (succeeded(parser.parseOptionalGreater()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  286:    return get(parser.getContext(), {});
call    0 never executed
call    1 never executed
        -:  287:
    #####:  288:  SmallVector<DataLayoutEntryInterface> entries;
call    0 never executed
    #####:  289:  if (parser.parseCommaSeparatedList(
function _ZZN4mlir18DataLayoutSpecAttr5parseERNS_9AsmParserEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  290:          [&]() { return parser.parseAttribute(entries.emplace_back()); }) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  291:      parser.parseGreater())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  292:    return {};
        -:  293:
function _ZZN4mlir18DataLayoutSpecAttr5parseERNS_9AsmParserEENKUlvE0_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  294:  return getChecked([&] { return parser.emitError(parser.getNameLoc()); },
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  295:                    parser.getContext(), entries);
call    0 never executed
call    1 never executed
        -:  296:}
        -:  297:
function _ZNK4mlir18DataLayoutSpecAttr5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  298:void DataLayoutSpecAttr::print(AsmPrinter &os) const {
    #####:  299:  os << DataLayoutSpecAttr::kAttrKeyword << "<";
call    0 never executed
call    1 never executed
    #####:  300:  llvm::interleaveComma(getEntries(), os);
call    0 never executed
    #####:  301:  os << ">";
call    0 never executed
    #####:  302:}
        -:  303:
        -:  304://===----------------------------------------------------------------------===//
        -:  305:// DLTIDialect
        -:  306://===----------------------------------------------------------------------===//
        -:  307:
        -:  308:constexpr const StringLiteral mlir::DLTIDialect::kDataLayoutAttrName;
        -:  309:constexpr const StringLiteral mlir::DLTIDialect::kDataLayoutEndiannessKey;
        -:  310:constexpr const StringLiteral mlir::DLTIDialect::kDataLayoutEndiannessBig;
        -:  311:constexpr const StringLiteral mlir::DLTIDialect::kDataLayoutEndiannessLittle;
        -:  312:
        -:  313:namespace {
        -:  314:class TargetDataLayoutInterface : public DataLayoutDialectInterface {
        -:  315:public:
        -:  316:  using DataLayoutDialectInterface::DataLayoutDialectInterface;
        -:  317:
function _ZNK12_GLOBAL__N_125TargetDataLayoutInterface11verifyEntryEN4mlir24DataLayoutEntryInterfaceENS1_8LocationE called 0 returned 0% blocks executed 0%
    #####:  318:  LogicalResult verifyEntry(DataLayoutEntryInterface entry,
        -:  319:                            Location loc) const final {
    #####:  320:    StringRef entryName = entry.getKey().get<StringAttr>().strref();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  321:    if (entryName == DLTIDialect::kDataLayoutEndiannessKey) {
branch  0 never executed
branch  1 never executed
    #####:  322:      auto value = entry.getValue().dyn_cast<StringAttr>();
call    0 never executed
call    1 never executed
    #####:  323:      if (value &&
    #####:  324:          (value.getValue() == DLTIDialect::kDataLayoutEndiannessBig ||
call    0 never executed
    #####:  325:           value.getValue() == DLTIDialect::kDataLayoutEndiannessLittle))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  326:        return success();
    #####:  327:      return emitError(loc) << "'" << entryName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  328:                            << "' data layout entry is expected to be either '"
call    0 never executed
    #####:  329:                            << DLTIDialect::kDataLayoutEndiannessBig << "' or '"
call    0 never executed
call    1 never executed
    #####:  330:                            << DLTIDialect::kDataLayoutEndiannessLittle << "'";
call    0 never executed
call    1 never executed
        -:  331:    }
    #####:  332:    return emitError(loc) << "unknown data layout entry name: " << entryName;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  333:  }
        -:  334:};
        -:  335:} // namespace
        -:  336:
function _ZN4mlir11DLTIDialect10initializeEv called 6113 returned 100% blocks executed 100%
     6113:  337:void DLTIDialect::initialize() {
     6113:  338:  addAttributes<DataLayoutEntryAttr, DataLayoutSpecAttr>();
call    0 returned 100%
     6113:  339:  addInterfaces<TargetDataLayoutInterface>();
call    0 returned 100%
     6113:  340:}
        -:  341:
function _ZNK4mlir11DLTIDialect14parseAttributeERNS_16DialectAsmParserENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  342:Attribute DLTIDialect::parseAttribute(DialectAsmParser &parser,
        -:  343:                                      Type type) const {
    #####:  344:  StringRef attrKind;
    #####:  345:  if (parser.parseKeyword(&attrKind))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  346:    return {};
        -:  347:
    #####:  348:  if (attrKind == DataLayoutEntryAttr::kAttrKeyword)
branch  0 never executed
branch  1 never executed
    #####:  349:    return DataLayoutEntryAttr::parse(parser);
call    0 never executed
    #####:  350:  if (attrKind == DataLayoutSpecAttr::kAttrKeyword)
branch  0 never executed
branch  1 never executed
    #####:  351:    return DataLayoutSpecAttr::parse(parser);
call    0 never executed
        -:  352:
    #####:  353:  parser.emitError(parser.getNameLoc(), "unknown attrribute type: ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  354:      << attrKind;
call    0 never executed
    #####:  355:  return {};
        -:  356:}
        -:  357:
function _ZNK4mlir11DLTIDialect14printAttributeENS_9AttributeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  358:void DLTIDialect::printAttribute(Attribute attr, DialectAsmPrinter &os) const {
    #####:  359:  llvm::TypeSwitch<Attribute>(attr)
call    0 never executed
        -:  360:      .Case<DataLayoutEntryAttr, DataLayoutSpecAttr>(
    #####:  361:          [&](auto a) { a.print(os); })
call    0 never executed
call    1 never executed
call    2 never executed
function _ZZNK4mlir11DLTIDialect14printAttributeENS_9AttributeERNS_17DialectAsmPrinterEENKUlS1_E0_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  362:      .Default([](Attribute) { llvm_unreachable("unknown attribute kind"); });
branch  0 never executed
branch  1 never executed
    #####:  363:}
        -:  364:
function _ZN4mlir11DLTIDialect24verifyOperationAttributeEPNS_9OperationENS_14NamedAttributeE called 0 returned 0% blocks executed 0%
    #####:  365:LogicalResult DLTIDialect::verifyOperationAttribute(Operation *op,
        -:  366:                                                    NamedAttribute attr) {
    #####:  367:  if (attr.getName() == DLTIDialect::kDataLayoutAttrName) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  368:    if (!attr.getValue().isa<DataLayoutSpecAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:      return op->emitError() << "'" << DLTIDialect::kDataLayoutAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  370:                             << "' is expected to be a #dlti.dl_spec attribute";
call    0 never executed
        -:  371:    }
    #####:  372:    if (isa<ModuleOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  373:      return detail::verifyDataLayoutOp(op);
call    0 never executed
    #####:  374:    return success();
        -:  375:  }
        -:  376:
    #####:  377:  return op->emitError() << "attribute '" << attr.getName().getValue()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  378:                         << "' not supported by dialect";
call    0 never executed
        -:  379:}
