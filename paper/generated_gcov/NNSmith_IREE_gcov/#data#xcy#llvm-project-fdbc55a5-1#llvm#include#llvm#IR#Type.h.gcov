        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/llvm/include/llvm/IR/Type.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:325580
        -:    1://===- llvm/Type.h - Classes for handling data types ------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains the declaration of the Type class.  For more "Type"
        -:   10:// stuff, look in DerivedTypes.h.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef LLVM_IR_TYPE_H
        -:   15:#define LLVM_IR_TYPE_H
        -:   16:
        -:   17:#include "llvm/ADT/ArrayRef.h"
        -:   18:#include "llvm/Support/CBindingWrapping.h"
        -:   19:#include "llvm/Support/Casting.h"
        -:   20:#include "llvm/Support/Compiler.h"
        -:   21:#include "llvm/Support/ErrorHandling.h"
        -:   22:#include "llvm/Support/TypeSize.h"
        -:   23:#include <cassert>
        -:   24:#include <cstdint>
        -:   25:#include <iterator>
        -:   26:
        -:   27:namespace llvm {
        -:   28:
        -:   29:class IntegerType;
        -:   30:struct fltSemantics;
        -:   31:class LLVMContext;
        -:   32:class PointerType;
        -:   33:class raw_ostream;
        -:   34:class StringRef;
        -:   35:template <typename PtrType> class SmallPtrSetImpl;
        -:   36:
        -:   37:/// The instances of the Type class are immutable: once they are created,
        -:   38:/// they are never changed.  Also note that only one instance of a particular
        -:   39:/// type is ever created.  Thus seeing if two types are equal is a matter of
        -:   40:/// doing a trivial pointer comparison. To enforce that no two equal instances
        -:   41:/// are created, Type instances can only be created via static factory methods
        -:   42:/// in class Type and in derived classes.  Once allocated, Types are never
        -:   43:/// free'd.
        -:   44:///
        -:   45:class Type {
        -:   46:public:
        -:   47:  //===--------------------------------------------------------------------===//
        -:   48:  /// Definitions of all of the base types for the Type system.  Based on this
        -:   49:  /// value, you can cast to a class defined in DerivedTypes.h.
        -:   50:  /// Note: If you add an element to this, you need to add an element to the
        -:   51:  /// Type::getPrimitiveType function, or else things will break!
        -:   52:  /// Also update LLVMTypeKind and LLVMGetTypeKind () in the C binding.
        -:   53:  ///
        -:   54:  enum TypeID {
        -:   55:    // PrimitiveTypes
        -:   56:    HalfTyID = 0,  ///< 16-bit floating point type
        -:   57:    BFloatTyID,    ///< 16-bit floating point type (7-bit significand)
        -:   58:    FloatTyID,     ///< 32-bit floating point type
        -:   59:    DoubleTyID,    ///< 64-bit floating point type
        -:   60:    X86_FP80TyID,  ///< 80-bit floating point type (X87)
        -:   61:    FP128TyID,     ///< 128-bit floating point type (112-bit significand)
        -:   62:    PPC_FP128TyID, ///< 128-bit floating point type (two 64-bits, PowerPC)
        -:   63:    VoidTyID,      ///< type with no size
        -:   64:    LabelTyID,     ///< Labels
        -:   65:    MetadataTyID,  ///< Metadata
        -:   66:    X86_MMXTyID,   ///< MMX vectors (64 bits, X86 specific)
        -:   67:    X86_AMXTyID,   ///< AMX vectors (8192 bits, X86 specific)
        -:   68:    TokenTyID,     ///< Tokens
        -:   69:
        -:   70:    // Derived types... see DerivedTypes.h file.
        -:   71:    IntegerTyID,        ///< Arbitrary bit width integers
        -:   72:    FunctionTyID,       ///< Functions
        -:   73:    PointerTyID,        ///< Pointers
        -:   74:    StructTyID,         ///< Structures
        -:   75:    ArrayTyID,          ///< Arrays
        -:   76:    FixedVectorTyID,    ///< Fixed width SIMD vector type
        -:   77:    ScalableVectorTyID, ///< Scalable SIMD vector type
        -:   78:    TypedPointerTyID,   ///< Typed pointer used by some GPU targets
        -:   79:  };
        -:   80:
        -:   81:private:
        -:   82:  /// This refers to the LLVMContext in which this type was uniqued.
        -:   83:  LLVMContext &Context;
        -:   84:
        -:   85:  TypeID   ID : 8;            // The current base type of this type.
        -:   86:  unsigned SubclassData : 24; // Space for subclasses to store data.
        -:   87:                              // Note that this should be synchronized with
        -:   88:                              // MAX_INT_BITS value in IntegerType class.
        -:   89:
        -:   90:protected:
        -:   91:  friend class LLVMContextImpl;
        -:   92:
        -:   93:  explicit Type(LLVMContext &C, TypeID tid)
        -:   94:    : Context(C), ID(tid), SubclassData(0) {}
        -:   95:  ~Type() = default;
        -:   96:
    #####:   97:  unsigned getSubclassData() const { return SubclassData; }
call    0 never executed
call    1 never executed
call    2 never executed
        -:   98:
        -:   99:  void setSubclassData(unsigned val) {
        -:  100:    SubclassData = val;
        -:  101:    // Ensure we don't have any accidental truncation.
        -:  102:    assert(getSubclassData() == val && "Subclass data too large for field");
        -:  103:  }
        -:  104:
        -:  105:  /// Keeps track of how many Type*'s there are in the ContainedTys list.
        -:  106:  unsigned NumContainedTys = 0;
        -:  107:
        -:  108:  /// A pointer to the array of Types contained by this Type. For example, this
        -:  109:  /// includes the arguments of a function type, the elements of a structure,
        -:  110:  /// the pointee of a pointer, the element type of an array, etc. This pointer
        -:  111:  /// may be 0 for types that don't contain other types (Integer, Double,
        -:  112:  /// Float).
        -:  113:  Type * const *ContainedTys = nullptr;
        -:  114:
        -:  115:public:
        -:  116:  /// Print the current type.
        -:  117:  /// Omit the type details if \p NoDetails == true.
        -:  118:  /// E.g., let %st = type { i32, i16 }
        -:  119:  /// When \p NoDetails is true, we only print %st.
        -:  120:  /// Put differently, \p NoDetails prints the type as if
        -:  121:  /// inlined with the operands when printing an instruction.
        -:  122:  void print(raw_ostream &O, bool IsForDebug = false,
        -:  123:             bool NoDetails = false) const;
        -:  124:
        -:  125:  void dump() const;
        -:  126:
        -:  127:  /// Return the LLVMContext in which this type was uniqued.
    #####:  128:  LLVMContext &getContext() const { return Context; }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  129:
        -:  130:  //===--------------------------------------------------------------------===//
        -:  131:  // Accessors for working with types.
        -:  132:  //
        -:  133:
        -:  134:  /// Return the type id for the type. This will return one of the TypeID enum
        -:  135:  /// elements defined above.
    #####:  136:  TypeID getTypeID() const { return ID; }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
        -:  137:
        -:  138:  /// Return true if this is 'void'.
    #####:  139:  bool isVoidTy() const { return getTypeID() == VoidTyID; }
        -:  140:
        -:  141:  /// Return true if this is 'half', a 16-bit IEEE fp type.
        -:  142:  bool isHalfTy() const { return getTypeID() == HalfTyID; }
        -:  143:
        -:  144:  /// Return true if this is 'bfloat', a 16-bit bfloat type.
        -:  145:  bool isBFloatTy() const { return getTypeID() == BFloatTyID; }
        -:  146:
        -:  147:  /// Return true if this is a 16-bit float type.
        -:  148:  bool is16bitFPTy() const {
        -:  149:    return getTypeID() == BFloatTyID || getTypeID() == HalfTyID;
        -:  150:  }
        -:  151:
        -:  152:  /// Return true if this is 'float', a 32-bit IEEE fp type.
        -:  153:  bool isFloatTy() const { return getTypeID() == FloatTyID; }
        -:  154:
        -:  155:  /// Return true if this is 'double', a 64-bit IEEE fp type.
        -:  156:  bool isDoubleTy() const { return getTypeID() == DoubleTyID; }
        -:  157:
        -:  158:  /// Return true if this is x86 long double.
        -:  159:  bool isX86_FP80Ty() const { return getTypeID() == X86_FP80TyID; }
        -:  160:
        -:  161:  /// Return true if this is 'fp128'.
        -:  162:  bool isFP128Ty() const { return getTypeID() == FP128TyID; }
        -:  163:
        -:  164:  /// Return true if this is powerpc long double.
        -:  165:  bool isPPC_FP128Ty() const { return getTypeID() == PPC_FP128TyID; }
        -:  166:
        -:  167:  /// Return true if this is one of the six floating-point types
    #####:  168:  bool isFloatingPointTy() const {
    #####:  169:    return getTypeID() == HalfTyID || getTypeID() == BFloatTyID ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  170:           getTypeID() == FloatTyID || getTypeID() == DoubleTyID ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  171:           getTypeID() == X86_FP80TyID || getTypeID() == FP128TyID ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  172:           getTypeID() == PPC_FP128TyID;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  173:  }
        -:  174:
        -:  175:  const fltSemantics &getFltSemantics() const;
        -:  176:
        -:  177:  /// Return true if this is X86 MMX.
        -:  178:  bool isX86_MMXTy() const { return getTypeID() == X86_MMXTyID; }
        -:  179:
        -:  180:  /// Return true if this is X86 AMX.
        -:  181:  bool isX86_AMXTy() const { return getTypeID() == X86_AMXTyID; }
        -:  182:
        -:  183:  /// Return true if this is a FP type or a vector of FP.
function _ZNK4llvm4Type16isFPOrFPVectorTyEv called 0 returned 0% blocks executed 0%
    #####:  184:  bool isFPOrFPVectorTy() const { return getScalarType()->isFloatingPointTy(); }
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  185:
        -:  186:  /// Return true if this is 'label'.
        -:  187:  bool isLabelTy() const { return getTypeID() == LabelTyID; }
        -:  188:
        -:  189:  /// Return true if this is 'metadata'.
        -:  190:  bool isMetadataTy() const { return getTypeID() == MetadataTyID; }
        -:  191:
        -:  192:  /// Return true if this is 'token'.
        -:  193:  bool isTokenTy() const { return getTypeID() == TokenTyID; }
        -:  194:
        -:  195:  /// True if this is an instance of IntegerType.
    #####:  196:  bool isIntegerTy() const { return getTypeID() == IntegerTyID; }
        -:  197:
        -:  198:  /// Return true if this is an IntegerType of the given width.
        -:  199:  bool isIntegerTy(unsigned Bitwidth) const;
        -:  200:
        -:  201:  /// Return true if this is an integer type or a vector of integer types.
    #####:  202:  bool isIntOrIntVectorTy() const { return getScalarType()->isIntegerTy(); }
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  203:
        -:  204:  /// Return true if this is an integer type or a vector of integer types of
        -:  205:  /// the given width.
        -:  206:  bool isIntOrIntVectorTy(unsigned BitWidth) const {
        -:  207:    return getScalarType()->isIntegerTy(BitWidth);
        -:  208:  }
        -:  209:
        -:  210:  /// Return true if this is an integer type or a pointer type.
        -:  211:  bool isIntOrPtrTy() const { return isIntegerTy() || isPointerTy(); }
        -:  212:
        -:  213:  /// True if this is an instance of FunctionType.
        -:  214:  bool isFunctionTy() const { return getTypeID() == FunctionTyID; }
        -:  215:
        -:  216:  /// True if this is an instance of StructType.
        -:  217:  bool isStructTy() const { return getTypeID() == StructTyID; }
        -:  218:
        -:  219:  /// True if this is an instance of ArrayType.
        -:  220:  bool isArrayTy() const { return getTypeID() == ArrayTyID; }
        -:  221:
        -:  222:  /// True if this is an instance of PointerType.
    #####:  223:  bool isPointerTy() const { return getTypeID() == PointerTyID; }
        -:  224:
        -:  225:  /// True if this is an instance of an opaque PointerType.
        -:  226:  bool isOpaquePointerTy() const;
        -:  227:
        -:  228:  /// Return true if this is a pointer type or a vector of pointer types.
    #####:  229:  bool isPtrOrPtrVectorTy() const { return getScalarType()->isPointerTy(); }
branch  0 never executed
branch  1 never executed
        -:  230:
        -:  231:  /// True if this is an instance of VectorType.
    #####:  232:  inline bool isVectorTy() const {
    #####:  233:    return getTypeID() == ScalableVectorTyID || getTypeID() == FixedVectorTyID;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  234:  }
        -:  235:
        -:  236:  /// Return true if this type could be converted with a lossless BitCast to
        -:  237:  /// type 'Ty'. For example, i8* to i32*. BitCasts are valid for types of the
        -:  238:  /// same size only where no re-interpretation of the bits is done.
        -:  239:  /// Determine if this type could be losslessly bitcast to Ty
        -:  240:  bool canLosslesslyBitCastTo(Type *Ty) const;
        -:  241:
        -:  242:  /// Return true if this type is empty, that is, it has no elements or all of
        -:  243:  /// its elements are empty.
        -:  244:  bool isEmptyTy() const;
        -:  245:
        -:  246:  /// Return true if the type is "first class", meaning it is a valid type for a
        -:  247:  /// Value.
        -:  248:  bool isFirstClassType() const {
        -:  249:    return getTypeID() != FunctionTyID && getTypeID() != VoidTyID;
        -:  250:  }
        -:  251:
        -:  252:  /// Return true if the type is a valid type for a register in codegen. This
        -:  253:  /// includes all first-class types except struct and array types.
        -:  254:  bool isSingleValueType() const {
        -:  255:    return isFloatingPointTy() || isX86_MMXTy() || isIntegerTy() ||
        -:  256:           isPointerTy() || isVectorTy() || isX86_AMXTy();
        -:  257:  }
        -:  258:
        -:  259:  /// Return true if the type is an aggregate type. This means it is valid as
        -:  260:  /// the first operand of an insertvalue or extractvalue instruction. This
        -:  261:  /// includes struct and array types, but does not include vector types.
        -:  262:  bool isAggregateType() const {
        -:  263:    return getTypeID() == StructTyID || getTypeID() == ArrayTyID;
        -:  264:  }
        -:  265:
        -:  266:  /// Return true if it makes sense to take the size of this type. To get the
        -:  267:  /// actual size for a particular target, it is reasonable to use the
        -:  268:  /// DataLayout subsystem to do this.
function _ZNK4llvm4Type7isSizedEPNS_15SmallPtrSetImplIPS0_EE called 0 returned 0% blocks executed 0%
    #####:  269:  bool isSized(SmallPtrSetImpl<Type*> *Visited = nullptr) const {
        -:  270:    // If it's a primitive, it is always sized.
    #####:  271:    if (getTypeID() == IntegerTyID || isFloatingPointTy() ||
    #####:  272:        getTypeID() == PointerTyID || getTypeID() == X86_MMXTyID ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  273:        getTypeID() == X86_AMXTyID)
branch  0 never executed
branch  1 never executed
        -:  274:      return true;
        -:  275:    // If it is not something that can have a size (e.g. a function or label),
        -:  276:    // it doesn't have a size.
    #####:  277:    if (getTypeID() != StructTyID && getTypeID() != ArrayTyID && !isVectorTy())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  278:      return false;
        -:  279:    // Otherwise we have to try harder to decide.
    #####:  280:    return isSizedDerivedType(Visited);
call    0 never executed
        -:  281:  }
        -:  282:
        -:  283:  /// Return the basic size of this type if it is a primitive type. These are
        -:  284:  /// fixed by LLVM and are not target-dependent.
        -:  285:  /// This will return zero if the type does not have a size or is not a
        -:  286:  /// primitive type.
        -:  287:  ///
        -:  288:  /// If this is a scalable vector type, the scalable property will be set and
        -:  289:  /// the runtime size will be a positive integer multiple of the base size.
        -:  290:  ///
        -:  291:  /// Note that this may not reflect the size of memory allocated for an
        -:  292:  /// instance of the type or the number of bytes that are written when an
        -:  293:  /// instance of the type is stored to memory. The DataLayout class provides
        -:  294:  /// additional query functions to provide this information.
        -:  295:  ///
        -:  296:  TypeSize getPrimitiveSizeInBits() const LLVM_READONLY;
        -:  297:
        -:  298:  /// If this is a vector type, return the getPrimitiveSizeInBits value for the
        -:  299:  /// element type. Otherwise return the getPrimitiveSizeInBits value for this
        -:  300:  /// type.
        -:  301:  unsigned getScalarSizeInBits() const LLVM_READONLY;
        -:  302:
        -:  303:  /// Return the width of the mantissa of this type. This is only valid on
        -:  304:  /// floating-point types. If the FP type does not have a stable mantissa (e.g.
        -:  305:  /// ppc long double), this method returns -1.
        -:  306:  int getFPMantissaWidth() const;
        -:  307:
        -:  308:  /// Return whether the type is IEEE compatible, as defined by the eponymous
        -:  309:  /// method in APFloat.
        -:  310:  bool isIEEE() const;
        -:  311:
        -:  312:  /// If this is a vector type, return the element type, otherwise return
        -:  313:  /// 'this'.
function _ZNK4llvm4Type13getScalarTypeEv called 0 returned 0% blocks executed 0%
    #####:  314:  inline Type *getScalarType() const {
    #####:  315:    if (isVectorTy())
branch  0 never executed
branch  1 never executed
    #####:  316:      return getContainedType(0);
        -:  317:    return const_cast<Type *>(this);
        -:  318:  }
        -:  319:
        -:  320:  //===--------------------------------------------------------------------===//
        -:  321:  // Type Iteration support.
        -:  322:  //
        -:  323:  using subtype_iterator = Type * const *;
        -:  324:
        -:  325:  subtype_iterator subtype_begin() const { return ContainedTys; }
        -:  326:  subtype_iterator subtype_end() const { return &ContainedTys[NumContainedTys];}
        -:  327:  ArrayRef<Type*> subtypes() const {
        -:  328:    return makeArrayRef(subtype_begin(), subtype_end());
        -:  329:  }
        -:  330:
        -:  331:  using subtype_reverse_iterator = std::reverse_iterator<subtype_iterator>;
        -:  332:
        -:  333:  subtype_reverse_iterator subtype_rbegin() const {
        -:  334:    return subtype_reverse_iterator(subtype_end());
        -:  335:  }
        -:  336:  subtype_reverse_iterator subtype_rend() const {
        -:  337:    return subtype_reverse_iterator(subtype_begin());
        -:  338:  }
        -:  339:
        -:  340:  /// This method is used to implement the type iterator (defined at the end of
        -:  341:  /// the file). For derived types, this returns the types 'contained' in the
        -:  342:  /// derived type.
    #####:  343:  Type *getContainedType(unsigned i) const {
    #####:  344:    assert(i < NumContainedTys && "Index out of range!");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  345:    return ContainedTys[i];
        -:  346:  }
        -:  347:
        -:  348:  /// Return the number of types in the derived type.
        -:  349:  unsigned getNumContainedTypes() const { return NumContainedTys; }
        -:  350:
        -:  351:  //===--------------------------------------------------------------------===//
        -:  352:  // Helper methods corresponding to subclass methods.  This forces a cast to
        -:  353:  // the specified subclass and calls its accessor.  "getArrayNumElements" (for
        -:  354:  // example) is shorthand for cast<ArrayType>(Ty)->getNumElements().  This is
        -:  355:  // only intended to cover the core methods that are frequently used, helper
        -:  356:  // methods should not be added here.
        -:  357:
        -:  358:  inline unsigned getIntegerBitWidth() const;
        -:  359:
        -:  360:  inline Type *getFunctionParamType(unsigned i) const;
        -:  361:  inline unsigned getFunctionNumParams() const;
        -:  362:  inline bool isFunctionVarArg() const;
        -:  363:
        -:  364:  inline StringRef getStructName() const;
        -:  365:  inline unsigned getStructNumElements() const;
        -:  366:  inline Type *getStructElementType(unsigned N) const;
        -:  367:
        -:  368:  inline uint64_t getArrayNumElements() const;
        -:  369:
        -:  370:  Type *getArrayElementType() const {
        -:  371:    assert(getTypeID() == ArrayTyID);
        -:  372:    return ContainedTys[0];
        -:  373:  }
        -:  374:
        -:  375:  /// This method is deprecated without replacement. Pointer element types are
        -:  376:  /// not available with opaque pointers.
        -:  377:  [[deprecated("Deprecated without replacement, see "
        -:  378:               "https://llvm.org/docs/OpaquePointers.html for context and "
        -:  379:               "migration instructions")]]
        -:  380:  Type *getPointerElementType() const {
        -:  381:    return getNonOpaquePointerElementType();
        -:  382:  }
        -:  383:
        -:  384:  /// Only use this method in code that is not reachable with opaque pointers,
        -:  385:  /// or part of deprecated methods that will be removed as part of the opaque
        -:  386:  /// pointers transition.
        -:  387:  Type *getNonOpaquePointerElementType() const {
        -:  388:    assert(getTypeID() == PointerTyID);
        -:  389:    assert(NumContainedTys &&
        -:  390:           "Attempting to get element type of opaque pointer");
        -:  391:    return ContainedTys[0];
        -:  392:  }
        -:  393:
        -:  394:  /// Given vector type, change the element type,
        -:  395:  /// whilst keeping the old number of elements.
        -:  396:  /// For non-vectors simply returns \p EltTy.
        -:  397:  inline Type *getWithNewType(Type *EltTy) const;
        -:  398:
        -:  399:  /// Given an integer or vector type, change the lane bitwidth to NewBitwidth,
        -:  400:  /// whilst keeping the old number of lanes.
        -:  401:  inline Type *getWithNewBitWidth(unsigned NewBitWidth) const;
        -:  402:
        -:  403:  /// Given scalar/vector integer type, returns a type with elements twice as
        -:  404:  /// wide as in the original type. For vectors, preserves element count.
        -:  405:  inline Type *getExtendedType() const;
        -:  406:
        -:  407:  /// Get the address space of this pointer or pointer vector type.
        -:  408:  inline unsigned getPointerAddressSpace() const;
        -:  409:
        -:  410:  //===--------------------------------------------------------------------===//
        -:  411:  // Static members exported by the Type class itself.  Useful for getting
        -:  412:  // instances of Type.
        -:  413:  //
        -:  414:
        -:  415:  /// Return a type based on an identifier.
        -:  416:  static Type *getPrimitiveType(LLVMContext &C, TypeID IDNumber);
        -:  417:
        -:  418:  //===--------------------------------------------------------------------===//
        -:  419:  // These are the builtin types that are always available.
        -:  420:  //
        -:  421:  static Type *getVoidTy(LLVMContext &C);
        -:  422:  static Type *getLabelTy(LLVMContext &C);
        -:  423:  static Type *getHalfTy(LLVMContext &C);
        -:  424:  static Type *getBFloatTy(LLVMContext &C);
        -:  425:  static Type *getFloatTy(LLVMContext &C);
        -:  426:  static Type *getDoubleTy(LLVMContext &C);
        -:  427:  static Type *getMetadataTy(LLVMContext &C);
        -:  428:  static Type *getX86_FP80Ty(LLVMContext &C);
        -:  429:  static Type *getFP128Ty(LLVMContext &C);
        -:  430:  static Type *getPPC_FP128Ty(LLVMContext &C);
        -:  431:  static Type *getX86_MMXTy(LLVMContext &C);
        -:  432:  static Type *getX86_AMXTy(LLVMContext &C);
        -:  433:  static Type *getTokenTy(LLVMContext &C);
        -:  434:  static IntegerType *getIntNTy(LLVMContext &C, unsigned N);
        -:  435:  static IntegerType *getInt1Ty(LLVMContext &C);
        -:  436:  static IntegerType *getInt8Ty(LLVMContext &C);
        -:  437:  static IntegerType *getInt16Ty(LLVMContext &C);
        -:  438:  static IntegerType *getInt32Ty(LLVMContext &C);
        -:  439:  static IntegerType *getInt64Ty(LLVMContext &C);
        -:  440:  static IntegerType *getInt128Ty(LLVMContext &C);
        -:  441:  template <typename ScalarTy> static Type *getScalarTy(LLVMContext &C) {
        -:  442:    int noOfBits = sizeof(ScalarTy) * CHAR_BIT;
        -:  443:    if (std::is_integral<ScalarTy>::value) {
        -:  444:      return (Type*) Type::getIntNTy(C, noOfBits);
        -:  445:    } else if (std::is_floating_point<ScalarTy>::value) {
        -:  446:      switch (noOfBits) {
        -:  447:      case 32:
        -:  448:        return Type::getFloatTy(C);
        -:  449:      case 64:
        -:  450:        return Type::getDoubleTy(C);
        -:  451:      }
        -:  452:    }
        -:  453:    llvm_unreachable("Unsupported type in Type::getScalarTy");
        -:  454:  }
        -:  455:  static Type *getFloatingPointTy(LLVMContext &C, const fltSemantics &S);
        -:  456:
        -:  457:  //===--------------------------------------------------------------------===//
        -:  458:  // Convenience methods for getting pointer types with one of the above builtin
        -:  459:  // types as pointee.
        -:  460:  //
        -:  461:  static PointerType *getHalfPtrTy(LLVMContext &C, unsigned AS = 0);
        -:  462:  static PointerType *getBFloatPtrTy(LLVMContext &C, unsigned AS = 0);
        -:  463:  static PointerType *getFloatPtrTy(LLVMContext &C, unsigned AS = 0);
        -:  464:  static PointerType *getDoublePtrTy(LLVMContext &C, unsigned AS = 0);
        -:  465:  static PointerType *getX86_FP80PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  466:  static PointerType *getFP128PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  467:  static PointerType *getPPC_FP128PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  468:  static PointerType *getX86_MMXPtrTy(LLVMContext &C, unsigned AS = 0);
        -:  469:  static PointerType *getX86_AMXPtrTy(LLVMContext &C, unsigned AS = 0);
        -:  470:  static PointerType *getIntNPtrTy(LLVMContext &C, unsigned N, unsigned AS = 0);
        -:  471:  static PointerType *getInt1PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  472:  static PointerType *getInt8PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  473:  static PointerType *getInt16PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  474:  static PointerType *getInt32PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  475:  static PointerType *getInt64PtrTy(LLVMContext &C, unsigned AS = 0);
        -:  476:
        -:  477:  /// Return a pointer to the current type. This is equivalent to
        -:  478:  /// PointerType::get(Foo, AddrSpace).
        -:  479:  /// TODO: Remove this after opaque pointer transition is complete.
        -:  480:  PointerType *getPointerTo(unsigned AddrSpace = 0) const;
        -:  481:
        -:  482:private:
        -:  483:  /// Derived types like structures and arrays are sized iff all of the members
        -:  484:  /// of the type are sized as well. Since asking for their size is relatively
        -:  485:  /// uncommon, move this operation out-of-line.
        -:  486:  bool isSizedDerivedType(SmallPtrSetImpl<Type*> *Visited = nullptr) const;
        -:  487:};
        -:  488:
        -:  489:// Printing of types.
        -:  490:inline raw_ostream &operator<<(raw_ostream &OS, const Type &T) {
        -:  491:  T.print(OS);
        -:  492:  return OS;
        -:  493:}
        -:  494:
        -:  495:// allow isa<PointerType>(x) to work without DerivedTypes.h included.
        -:  496:template <> struct isa_impl<PointerType, Type> {
    #####:  497:  static inline bool doit(const Type &Ty) {
    #####:  498:    return Ty.getTypeID() == Type::PointerTyID;
branch  0 never executed
branch  1 never executed
        -:  499:  }
        -:  500:};
        -:  501:
        -:  502:// Create wrappers for C Binding types (see CBindingWrapping.h).
        -:  503:DEFINE_ISA_CONVERSION_FUNCTIONS(Type, LLVMTypeRef)
        -:  504:
        -:  505:/* Specialized opaque type conversions.
        -:  506: */
        -:  507:inline Type **unwrap(LLVMTypeRef* Tys) {
        -:  508:  return reinterpret_cast<Type**>(Tys);
        -:  509:}
        -:  510:
        -:  511:inline LLVMTypeRef *wrap(Type **Tys) {
        -:  512:  return reinterpret_cast<LLVMTypeRef*>(const_cast<Type**>(Tys));
        -:  513:}
        -:  514:
        -:  515:} // end namespace llvm
        -:  516:
        -:  517:#endif // LLVM_IR_TYPE_H
