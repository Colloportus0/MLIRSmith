        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Transforms/TestConstantFold.cpp
        -:    0:Graph:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestConstantFold.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestConstantFold.cpp.gcda
        -:    0:Runs:325561
        -:    1://===- TestConstantFold.cpp - Pass to test constant folding ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Pass/Pass.h"
        -:   10:#include "mlir/Transforms/FoldUtils.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14:namespace {
        -:   15:/// Simple constant folding pass.
   326658:   16:struct TestConstantFold
call    0 returned 100%
        -:   17:    : public PassWrapper<TestConstantFold, OperationPass<>> {
function _ZN12_GLOBAL__N_116TestConstantFold13resolveTypeIDEv called 326658 returned 100% blocks executed 100%
   326658:   18:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestConstantFold)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   19:
function _ZNK12_GLOBAL__N_116TestConstantFold11getArgumentEv called 325605 returned 100% blocks executed 100%
   325605:   20:  StringRef getArgument() const final { return "test-constant-fold"; }
function _ZNK12_GLOBAL__N_116TestConstantFold14getDescriptionEv called 325561 returned 100% blocks executed 100%
   325561:   21:  StringRef getDescription() const final {
   325561:   22:    return "Test operation constant folding";
        -:   23:  }
        -:   24:  // All constants in the operation post folding.
        -:   25:  SmallVector<Operation *> existingConstants;
        -:   26:
        -:   27:  void foldOperation(Operation *op, OperationFolder &helper);
        -:   28:  void runOnOperation() override;
        -:   29:};
        -:   30:} // namespace
        -:   31:
    11509:   32:void TestConstantFold::foldOperation(Operation *op, OperationFolder &helper) {
    14096:   33:  auto processGeneratedConstants = [this](Operation *op) {
     2587:   34:    existingConstants.push_back(op);
call    0 returned 100%
    11509:   35:  };
        -:   36:
        -:   37:  // Attempt to fold the specified operation, including handling unused or
        -:   38:  // duplicated constants.
    23018:   39:  (void)helper.tryToFold(op, processGeneratedConstants);
        -:   40:}
        -:   41:
function _ZN12_GLOBAL__N_116TestConstantFold14runOnOperationEv called 883 returned 100% blocks executed 95%
      883:   42:void TestConstantFold::runOnOperation() {
      883:   43:  existingConstants.clear();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   44:
        -:   45:  // Collect and fold the operations within the operation.
      883:   46:  SmallVector<Operation *, 8> ops;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    12392:   47:  getOperation()->walk([&](Operation *op) { ops.push_back(op); });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
        -:   48:
        -:   49:  // Fold the constants in reverse so that the last generated constants from
        -:   50:  // folding are at the beginning. This creates somewhat of a linear ordering to
        -:   51:  // the newly generated constants that matches the operation order and improves
        -:   52:  // the readability of test cases.
     1766:   53:  OperationFolder helper(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 29% (fallthrough)
branch  4 taken 71%
    12392:   54:  for (Operation *op : llvm::reverse(ops))
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
    11509:   55:    foldOperation(op, helper);
call    0 returned 100%
        -:   56:
        -:   57:  // By the time we are done, we may have simplified a bunch of code, leaving
        -:   58:  // around dead constants. Check for them now and remove them.
     3470:   59:  for (auto *cst : existingConstants) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
     5174:   60:    if (cst->use_empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 100%
        9:   61:      cst->erase();
call    0 returned 100%
        -:   62:  }
      883:   63:}
        -:   64:
        -:   65:namespace mlir {
        -:   66:namespace test {
function _ZN4mlir4test24registerTestConstantFoldEv called 325561 returned 100% blocks executed 100%
   325561:   67:void registerTestConstantFold() { PassRegistration<TestConstantFold>(); }
call    0 returned 100%
        -:   68:} // namespace test
        -:   69:} // namespace mlir
