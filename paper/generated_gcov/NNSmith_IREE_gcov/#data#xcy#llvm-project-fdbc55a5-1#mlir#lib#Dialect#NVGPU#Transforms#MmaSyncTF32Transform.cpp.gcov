        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/NVGPU/Transforms/MmaSyncTF32Transform.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/NVGPU/Transforms/CMakeFiles/obj.MLIRNVGPUTransforms.dir/MmaSyncTF32Transform.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/NVGPU/Transforms/CMakeFiles/obj.MLIRNVGPUTransforms.dir/MmaSyncTF32Transform.cpp.gcda
        -:    0:Runs:325587
        -:    1://===- OptimizeSharedMemory.cpp - MLIR NVGPU pass implementation ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements transforms to enable 1xtf32 and 3xtf32 nvgpu.mma sync
        -:   10:// operations on f32 input datatype
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   16:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   17:#include "mlir/Dialect/NVGPU/IR/NVGPUDialect.h"
        -:   18:#include "mlir/Dialect/NVGPU/Passes.h"
        -:   19:#include "mlir/Dialect/NVGPU/Transforms/Transforms.h"
        -:   20:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   21:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   22:#include "mlir/Support/LogicalResult.h"
        -:   23:#include "llvm/ADT/STLExtras.h"
        -:   24:#include "llvm/Support/MathExtras.h"
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace mlir::nvgpu;
        -:   28:
        -:   29:namespace {
        -:   30:
        -:   31:struct MmaSyncF32ToTF32Pattern : public OpRewritePattern<nvgpu::MmaSyncOp> {
        -:   32:
        -:   33:  using OpRewritePattern<nvgpu::MmaSyncOp>::OpRewritePattern;
        -:   34:
function _ZN12_GLOBAL__N_123MmaSyncF32ToTF32PatternC2EPN4mlir11MLIRContextENS1_5nvgpu18MmaSyncF32LoweringE called 940 returned 100% blocks executed 100%
      940:   35:  MmaSyncF32ToTF32Pattern(MLIRContext *context,
        -:   36:                          nvgpu::MmaSyncF32Lowering precision)
      940:   37:      : OpRewritePattern<nvgpu::MmaSyncOp>(context, /*benifit*/ 1),
      940:   38:        precision(precision) {}
call    0 returned 100%
call    1 returned 100%
        -:   39:
function _ZNK12_GLOBAL__N_123MmaSyncF32ToTF32Pattern15matchAndRewriteEN4mlir5nvgpu9MmaSyncOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   40:  LogicalResult matchAndRewrite(nvgpu::MmaSyncOp op,
        -:   41:                                PatternRewriter &rewrite) const override {
    #####:   42:    Location location = op->getLoc();
call    0 never executed
        -:   43:
    #####:   44:    if (op->hasAttr(op.getTf32EnabledAttrName()) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   45:        !op.getMatrixA().getType().cast<VectorType>().getElementType().isF32())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   46:      return failure();
        -:   47:
    #####:   48:    if (precision == MmaSyncF32Lowering::Unkown)
branch  0 never executed
branch  1 never executed
    #####:   49:      return emitError(location, "MmaSync F32-to-TF32 cannot be lowered with "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   50:                                 "unknown precision level");
call    0 never executed
        -:   51:
    #####:   52:    if (precision == MmaSyncF32Lowering::TF32x3)
branch  0 never executed
branch  1 never executed
    #####:   53:      return emitError(location, "TF32x3 is not supported at the moment "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   54:                                 "for nvgpu.mma.sync on f32 datatype");
call    0 never executed
        -:   55:
    #####:   56:    if (precision == MmaSyncF32Lowering::TF32)
branch  0 never executed
branch  1 never executed
    #####:   57:      op.setTf32EnabledAttr(rewrite.getUnitAttr());
call    0 never executed
call    1 never executed
        -:   58:
    #####:   59:    return success();
        -:   60:  }
        -:   61:
        -:   62:private:
        -:   63:  /// Precision for F32 Tensor Cores (TF32 or TF32x3)
        -:   64:  nvgpu::MmaSyncF32Lowering precision;
        -:   65:};
        -:   66:
        -:   67:} // namespace
        -:   68:
function _ZN4mlir5nvgpu32populateMmaSyncF32ToTF32PatternsERNS_17RewritePatternSetENS0_18MmaSyncF32LoweringE called 938 returned 100% blocks executed 100%
      938:   69:void mlir::nvgpu::populateMmaSyncF32ToTF32Patterns(
        -:   70:    RewritePatternSet &patterns, nvgpu::MmaSyncF32Lowering precision) {
        -:   71:
      938:   72:  patterns.add<MmaSyncF32ToTF32Pattern>(patterns.getContext(), precision);
call    0 returned 100%
      936:   73:}
