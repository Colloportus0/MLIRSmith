        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/llvm/include/llvm/ADT/Any.h
        -:    0:Graph:../tools/mlir/lib/ExecutionEngine/CMakeFiles/obj.MLIRExecutionEngineUtils.dir/OptUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/ExecutionEngine/CMakeFiles/obj.MLIRExecutionEngineUtils.dir/OptUtils.cpp.gcda
        -:    0:Runs:325567
        -:    1://===- Any.h - Generic type erased holder of any type -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:///
        -:    9:/// \file
        -:   10:///  This file provides Any, a non-template class modeled in the spirit of
        -:   11:///  std::any.  The idea is to provide a type-safe replacement for C's void*.
        -:   12:///  It can hold a value of any copy-constructible copy-assignable type
        -:   13:///
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#ifndef LLVM_ADT_ANY_H
        -:   17:#define LLVM_ADT_ANY_H
        -:   18:
        -:   19:#include "llvm/ADT/STLForwardCompat.h"
        -:   20:#include "llvm/Support/Compiler.h"
        -:   21:
        -:   22:#include <cassert>
        -:   23:#include <memory>
        -:   24:#include <type_traits>
        -:   25:
        -:   26:namespace llvm {
        -:   27:
    #####:   28:class LLVM_EXTERNAL_VISIBILITY Any {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   29:
        -:   30:  // The `Typeid<T>::Id` static data member below is a globally unique
        -:   31:  // identifier for the type `T`. It is explicitly marked with default
        -:   32:  // visibility so that when `-fvisibility=hidden` is used, the loader still
        -:   33:  // merges duplicate definitions across DSO boundaries.
        -:   34:  template <typename T> struct TypeId {
        -:   35:    static const char Id;
        -:   36:  };
        -:   37:
    #####:   38:  struct StorageBase {
        -:   39:    virtual ~StorageBase() = default;
        -:   40:    virtual std::unique_ptr<StorageBase> clone() const = 0;
        -:   41:    virtual const void *id() const = 0;
        -:   42:  };
        -:   43:
        -:   44:  template <typename T> struct StorageImpl : public StorageBase {
    #####:   45:    explicit StorageImpl(const T &Value) : Value(Value) {}
        -:   46:
    #####:   47:    explicit StorageImpl(T &&Value) : Value(std::move(Value)) {}
branch  0 never executed
branch  1 never executed
        -:   48:
function _ZNK4llvm3Any11StorageImplIPKNS_6ModuleEE5cloneEv called 0 returned 0% blocks executed 0%
    #####:   49:    std::unique_ptr<StorageBase> clone() const override {
    #####:   50:      return std::make_unique<StorageImpl<T>>(Value);
call    0 never executed
        -:   51:    }
        -:   52:
function _ZNK4llvm3Any11StorageImplIPKNS_6ModuleEE2idEv called 0 returned 0% blocks executed 0%
    #####:   53:    const void *id() const override { return &TypeId<T>::Id; }
        -:   54:
        -:   55:    T Value;
        -:   56:
        -:   57:  private:
        -:   58:    StorageImpl &operator=(const StorageImpl &Other) = delete;
        -:   59:    StorageImpl(const StorageImpl &Other) = delete;
        -:   60:  };
        -:   61:
        -:   62:public:
        -:   63:  Any() = default;
        -:   64:
        -:   65:  Any(const Any &Other)
        -:   66:      : Storage(Other.Storage ? Other.Storage->clone() : nullptr) {}
        -:   67:
        -:   68:  // When T is Any or T is not copy-constructible we need to explicitly disable
        -:   69:  // the forwarding constructor so that the copy constructor gets selected
        -:   70:  // instead.
        -:   71:  template <typename T,
        -:   72:            std::enable_if_t<
        -:   73:                std::conjunction<
        -:   74:                    std::negation<std::is_same<std::decay_t<T>, Any>>,
        -:   75:                    // We also disable this overload when an `Any` object can be
        -:   76:                    // converted to the parameter type because in that case,
        -:   77:                    // this constructor may combine with that conversion during
        -:   78:                    // overload resolution for determining copy
        -:   79:                    // constructibility, and then when we try to determine copy
        -:   80:                    // constructibility below we may infinitely recurse. This is
        -:   81:                    // being evaluated by the standards committee as a potential
        -:   82:                    // DR in `std::any` as well, but we're going ahead and
        -:   83:                    // adopting it to work-around usage of `Any` with types that
        -:   84:                    // need to be implicitly convertible from an `Any`.
        -:   85:                    std::negation<std::is_convertible<Any, std::decay_t<T>>>,
        -:   86:                    std::is_copy_constructible<std::decay_t<T>>>::value,
        -:   87:                int> = 0>
function _ZN4llvm3AnyC2IPKNS_6ModuleELi0EEEOT_ called 0 returned 0% blocks executed 0%
    #####:   88:  Any(T &&Value) {
call    0 never executed
    #####:   89:    Storage =
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   90:        std::make_unique<StorageImpl<std::decay_t<T>>>(std::forward<T>(Value));
    #####:   91:  }
        -:   92:
        -:   93:  Any(Any &&Other) : Storage(std::move(Other.Storage)) {}
        -:   94:
        -:   95:  Any &swap(Any &Other) {
        -:   96:    std::swap(Storage, Other.Storage);
        -:   97:    return *this;
        -:   98:  }
        -:   99:
        -:  100:  Any &operator=(Any Other) {
        -:  101:    Storage = std::move(Other.Storage);
        -:  102:    return *this;
        -:  103:  }
        -:  104:
        -:  105:  LLVM_DEPRECATED("Use has_value instead.", "has_value")
        -:  106:  bool hasValue() const { return !!Storage; }
        -:  107:  bool has_value() const { return !!Storage; }
        -:  108:
        -:  109:  void reset() { Storage.reset(); }
        -:  110:
        -:  111:private:
        -:  112:  template <class T> friend T any_cast(const Any &Value);
        -:  113:  template <class T> friend T any_cast(Any &Value);
        -:  114:  template <class T> friend T any_cast(Any &&Value);
        -:  115:  template <class T> friend const T *any_cast(const Any *Value);
        -:  116:  template <class T> friend T *any_cast(Any *Value);
        -:  117:  template <typename T> friend bool any_isa(const Any &Value);
        -:  118:
        -:  119:  std::unique_ptr<StorageBase> Storage;
        -:  120:};
        -:  121:
        -:  122:template <typename T> const char Any::TypeId<T>::Id = 0;
        -:  123:
        -:  124:template <typename T> bool any_isa(const Any &Value) {
        -:  125:  if (!Value.Storage)
        -:  126:    return false;
        -:  127:  return Value.Storage->id() == &Any::TypeId<remove_cvref_t<T>>::Id;
        -:  128:}
        -:  129:
        -:  130:template <class T> T any_cast(const Any &Value) {
        -:  131:  return static_cast<T>(*any_cast<remove_cvref_t<T>>(&Value));
        -:  132:}
        -:  133:
        -:  134:template <class T> T any_cast(Any &Value) {
        -:  135:  return static_cast<T>(*any_cast<remove_cvref_t<T>>(&Value));
        -:  136:}
        -:  137:
        -:  138:template <class T> T any_cast(Any &&Value) {
        -:  139:  return static_cast<T>(std::move(*any_cast<remove_cvref_t<T>>(&Value)));
        -:  140:}
        -:  141:
        -:  142:template <class T> const T *any_cast(const Any *Value) {
        -:  143:  using U = remove_cvref_t<T>;
        -:  144:  assert(Value && any_isa<T>(*Value) && "Bad any cast!");
        -:  145:  if (!Value || !any_isa<U>(*Value))
        -:  146:    return nullptr;
        -:  147:  return &static_cast<Any::StorageImpl<U> &>(*Value->Storage).Value;
        -:  148:}
        -:  149:
        -:  150:template <class T> T *any_cast(Any *Value) {
        -:  151:  using U = std::decay_t<T>;
        -:  152:  assert(Value && any_isa<U>(*Value) && "Bad any cast!");
        -:  153:  if (!Value || !any_isa<U>(*Value))
        -:  154:    return nullptr;
        -:  155:  return &static_cast<Any::StorageImpl<U> &>(*Value->Storage).Value;
        -:  156:}
        -:  157:
        -:  158:} // end namespace llvm
        -:  159:
        -:  160:#endif // LLVM_ADT_ANY_H
