        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Linalg/Transforms/Loops.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Loops.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Loops.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- Loops.cpp - conversion from Linalg named and generic ops to loops --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Linalg/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   12:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   13:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   17:#include "mlir/Dialect/Linalg/Utils/Utils.h"
        -:   18:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   19:#include "mlir/Dialect/SCF/Utils/AffineCanonicalizationUtils.h"
        -:   20:#include "mlir/IR/AffineExpr.h"
        -:   21:#include "mlir/IR/AffineMap.h"
        -:   22:#include "mlir/IR/BlockAndValueMapping.h"
        -:   23:#include "mlir/Support/LLVM.h"
        -:   24:#include "mlir/Transforms/DialectConversion.h"
        -:   25:#include "mlir/Transforms/FoldUtils.h"
        -:   26:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   27:#include "llvm/ADT/TypeSwitch.h"
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_LINALGLOWERTOAFFINELOOPS
        -:   31:#define GEN_PASS_DEF_LINALGLOWERTOLOOPS
        -:   32:#define GEN_PASS_DEF_LINALGLOWERTOPARALLELLOOPS
        -:   33:#include "mlir/Dialect/Linalg/Passes.h.inc"
        -:   34:} // namespace mlir
        -:   35:
        -:   36:using namespace mlir;
        -:   37:using namespace mlir::linalg;
        -:   38:
function _ZL26makeCanonicalAffineAppliesRN4mlir9OpBuilderENS_8LocationENS_9AffineMapEN4llvm8ArrayRefINS_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:   39:static SmallVector<Value> makeCanonicalAffineApplies(OpBuilder &b, Location loc,
        -:   40:                                                     AffineMap map,
        -:   41:                                                     ArrayRef<Value> vals) {
    #####:   42:  if (map.isEmpty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:    return {};
        -:   44:
    #####:   45:  assert(map.getNumInputs() == vals.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   46:  SmallVector<Value> res;
call    0 never executed
    #####:   47:  res.reserve(map.getNumResults());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   48:  auto dims = map.getNumDims();
call    0 never executed
    #####:   49:  for (auto e : map.getResults()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:    auto exprMap = AffineMap::get(dims, map.getNumSymbols(), e);
call    0 never executed
call    1 never executed
    #####:   51:    SmallVector<Value> operands(vals.begin(), vals.end());
call    0 never executed
    #####:   52:    canonicalizeMapAndOperands(&exprMap, &operands);
call    0 never executed
    #####:   53:    res.push_back(b.create<AffineApplyOp>(loc, exprMap, operands));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   54:  }
    #####:   55:  return res;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   56:}
        -:   57:
        -:   58:template <typename LoadOpTy, typename StoreOpTy, typename OpType>
        -:   59:static void inlineRegionAndEmitStore(OpBuilder &b, Location loc, OpType op,
        -:   60:                                     ArrayRef<Value> indexedValues,
        -:   61:                                     ArrayRef<SmallVector<Value>> indexing,
        -:   62:                                     ArrayRef<Value> outputBuffers) {
        -:   63:  auto &block = op->getRegion(0).front();
        -:   64:  BlockAndValueMapping map;
        -:   65:  map.map(block.getArguments(), indexedValues);
        -:   66:  for (auto &op : block.without_terminator()) {
        -:   67:    auto *newOp = b.clone(op, map);
        -:   68:    map.map(op.getResults(), newOp->getResults());
        -:   69:  }
        -:   70:
        -:   71:  Operation *terminator = block.getTerminator();
        -:   72:  for (OpOperand &operand : terminator->getOpOperands()) {
        -:   73:    Value toStore = map.lookupOrDefault(operand.get());
        -:   74:    b.create<StoreOpTy>(loc, toStore, outputBuffers[operand.getOperandNumber()],
        -:   75:                        indexing[operand.getOperandNumber()]);
        -:   76:  }
        -:   77:}
        -:   78:
        -:   79:// Returns a pair that contains input indices and output indices of a
        -:   80:// SingleInputPoolingOp `op`.
        -:   81:struct InputAndOutputIndices {
        -:   82:  SmallVector<Value> inputs;
        -:   83:  SmallVector<Value> outputs;
        -:   84:};
        -:   85:template <typename SingleInputPoolingOp>
        -:   86:static InputAndOutputIndices
        -:   87:getInputAndOutputIndices(OpBuilder &b, Location loc, ArrayRef<Value> allIvs,
        -:   88:                         SingleInputPoolingOp op) {
        -:   89:  auto mapsRange = op.getIndexingMapsArray();
        -:   90:  auto maps = llvm::to_vector<8>(
        -:   91:      llvm::map_range(mapsRange, [](AffineMapAttr a) { return a.getValue(); }));
        -:   92:  return InputAndOutputIndices{
        -:   93:      makeCanonicalAffineApplies(b, loc, maps[0], allIvs),
        -:   94:      makeCanonicalAffineApplies(b, loc, maps[2], allIvs)};
        -:   95:}
        -:   96:
        -:   97:/// Emits the MLIR for the scalar part of the generic op by:
        -:   98:///   1. Emitting load ops for each input and output view in order. This is
        -:   99:///      achieved by applying the appropriate input or output map to the
        -:  100:///      enclosing induction variables.
        -:  101:///   2. Emitting a call to `op.fun()` that takes as arguments the scalars
        -:  102:///      from point 1. above.
        -:  103:///   3. Emitting store ops to store the results of 2. to the output
        -:  104:///      views.
        -:  105:///
        -:  106:/// An example output may resemble:
        -:  107:///
        -:  108:/// ```
        -:  109:///    scf.for %i = %c0 to %0 step %c1 {
        -:  110:///      scf.for %j = %c0 to %1 step %c1 {
        -:  111:///        scf.for %k = %c0 to %4 step %c1 {
        -:  112:///          %11 = load %arg0[%i, %j] :
        -:  113:///            memref<?x?xf32, stride_specification>
        -:  114:///          %12 = load %arg1[%i, %j, %k] :
        -:  115:///            memref<?x?x?xf32, stride_specification>
        -:  116:///          %13 = load %arg2[%i, %k, %j] :
        -:  117:///            memref<?x?x?xf32, stride_specification>
        -:  118:///          %14:2 = call @foo(%11, %12, %13) : (f32, f32, f32) -> (f32, f32)
        -:  119:///          store %14#0, %arg1[%i, %j, %k] :
        -:  120:///            memref<?x?x?Xf32, stride_specification>
        -:  121:///          store %14#1, %arg2[%i, %k, %j] :
        -:  122:///            memref<?x?x?Xf32, stride_specification>
        -:  123:///       }
        -:  124:///      }
        -:  125:///    }
        -:  126:/// ```
        -:  127:template <typename LoadOpTy, typename StoreOpTy>
    #####:  128:static void emitScalarImplementation(OpBuilder &b, Location loc,
        -:  129:                                     ArrayRef<Value> allIvs,
        -:  130:                                     LinalgOp linalgOp) {
    #####:  131:  assert(linalgOp.hasBufferSemantics() &&
        -:  132:         "expected linalg op with buffer semantics");
    #####:  133:  SmallVector<Value> indexedValues;
    #####:  134:  indexedValues.reserve(linalgOp->getNumOperands());
        -:  135:
    #####:  136:  auto allIvsPlusDims = SmallVector<Value>(allIvs.begin(), allIvs.end());
        -:  137:
        -:  138:  // TODO: Avoid the loads if the corresponding argument of the
        -:  139:  // region has no uses.
        -:  140:  // 1.a. Emit load from input operand or for scalars access the operand itself.
    #####:  141:  for (OpOperand *inputOperand : linalgOp.getDpsInputOperands()) {
    #####:  142:    if (linalgOp.isScalar(inputOperand)) {
    #####:  143:      indexedValues.push_back(inputOperand->get());
    #####:  144:      continue;
        -:  145:    }
    #####:  146:    auto indexing = makeCanonicalAffineApplies(
        -:  147:        b, loc, linalgOp.getMatchingIndexingMap(inputOperand), allIvsPlusDims);
    #####:  148:    indexedValues.push_back(
    #####:  149:        b.create<LoadOpTy>(loc, inputOperand->get(), indexing));
        -:  150:  }
        -:  151:  // 1.b. Emit load from output views.
    #####:  152:  for (OpOperand *outputOperand : linalgOp.getDpsInitOperands()) {
    #####:  153:    SmallVector<Value> indexing = makeCanonicalAffineApplies(
        -:  154:        b, loc, linalgOp.getMatchingIndexingMap(outputOperand), allIvsPlusDims);
    #####:  155:    indexedValues.push_back(
    #####:  156:        b.create<LoadOpTy>(loc, outputOperand->get(), indexing));
        -:  157:  }
        -:  158:
        -:  159:  // TODO: When a region inliner exists, use it.
        -:  160:  // 2. Inline region, currently only works for a single basic block.
        -:  161:  // 3. Emit store.
    #####:  162:  SmallVector<SmallVector<Value>, 8> indexing;
    #####:  163:  SmallVector<Value> outputBuffers;
    #####:  164:  for (OpOperand *outputOperand : linalgOp.getDpsInitOperands()) {
    #####:  165:    if (!outputOperand->get().getType().isa<MemRefType>())
    #####:  166:      continue;
    #####:  167:    indexing.push_back(makeCanonicalAffineApplies(
        -:  168:        b, loc, linalgOp.getMatchingIndexingMap(outputOperand),
        -:  169:        allIvsPlusDims));
    #####:  170:    outputBuffers.push_back(outputOperand->get());
        -:  171:  }
    #####:  172:  inlineRegionAndEmitStore<LoadOpTy, StoreOpTy>(b, loc, linalgOp, indexedValues,
        -:  173:                                                indexing, outputBuffers);
    #####:  174:}
------------------
_Z24emitScalarImplementationIN4mlir6memref6LoadOpENS1_7StoreOpEEvRNS0_9OpBuilderENS0_8LocationEN4llvm8ArrayRefINS0_5ValueEEENS0_6linalg8LinalgOpE:
function _Z24emitScalarImplementationIN4mlir6memref6LoadOpENS1_7StoreOpEEvRNS0_9OpBuilderENS0_8LocationEN4llvm8ArrayRefINS0_5ValueEEENS0_6linalg8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  128:static void emitScalarImplementation(OpBuilder &b, Location loc,
call    0 never executed
        -:  129:                                     ArrayRef<Value> allIvs,
        -:  130:                                     LinalgOp linalgOp) {
    #####:  131:  assert(linalgOp.hasBufferSemantics() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  132:         "expected linalg op with buffer semantics");
    #####:  133:  SmallVector<Value> indexedValues;
    #####:  134:  indexedValues.reserve(linalgOp->getNumOperands());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  135:
    #####:  136:  auto allIvsPlusDims = SmallVector<Value>(allIvs.begin(), allIvs.end());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  137:
        -:  138:  // TODO: Avoid the loads if the corresponding argument of the
        -:  139:  // region has no uses.
        -:  140:  // 1.a. Emit load from input operand or for scalars access the operand itself.
    #####:  141:  for (OpOperand *inputOperand : linalgOp.getDpsInputOperands()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  142:    if (linalgOp.isScalar(inputOperand)) {
branch  0 never executed
branch  1 never executed
    #####:  143:      indexedValues.push_back(inputOperand->get());
call    0 never executed
    #####:  144:      continue;
        -:  145:    }
    #####:  146:    auto indexing = makeCanonicalAffineApplies(
call    0 never executed
call    1 never executed
        -:  147:        b, loc, linalgOp.getMatchingIndexingMap(inputOperand), allIvsPlusDims);
    #####:  148:    indexedValues.push_back(
call    0 never executed
call    1 never executed
    #####:  149:        b.create<LoadOpTy>(loc, inputOperand->get(), indexing));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  150:  }
        -:  151:  // 1.b. Emit load from output views.
    #####:  152:  for (OpOperand *outputOperand : linalgOp.getDpsInitOperands()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  153:    SmallVector<Value> indexing = makeCanonicalAffineApplies(
call    0 never executed
call    1 never executed
        -:  154:        b, loc, linalgOp.getMatchingIndexingMap(outputOperand), allIvsPlusDims);
    #####:  155:    indexedValues.push_back(
call    0 never executed
call    1 never executed
    #####:  156:        b.create<LoadOpTy>(loc, outputOperand->get(), indexing));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:  }
        -:  158:
        -:  159:  // TODO: When a region inliner exists, use it.
        -:  160:  // 2. Inline region, currently only works for a single basic block.
        -:  161:  // 3. Emit store.
    #####:  162:  SmallVector<SmallVector<Value>, 8> indexing;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  163:  SmallVector<Value> outputBuffers;
call    0 never executed
call    1 never executed
    #####:  164:  for (OpOperand *outputOperand : linalgOp.getDpsInitOperands()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  165:    if (!outputOperand->get().getType().isa<MemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  166:      continue;
    #####:  167:    indexing.push_back(makeCanonicalAffineApplies(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  168:        b, loc, linalgOp.getMatchingIndexingMap(outputOperand),
        -:  169:        allIvsPlusDims));
    #####:  170:    outputBuffers.push_back(outputOperand->get());
call    0 never executed
        -:  171:  }
    #####:  172:  inlineRegionAndEmitStore<LoadOpTy, StoreOpTy>(b, loc, linalgOp, indexedValues,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  173:                                                indexing, outputBuffers);
    #####:  174:}
------------------
_Z24emitScalarImplementationIN4mlir12AffineLoadOpENS0_13AffineStoreOpEEvRNS0_9OpBuilderENS0_8LocationEN4llvm8ArrayRefINS0_5ValueEEENS0_6linalg8LinalgOpE:
function _Z24emitScalarImplementationIN4mlir12AffineLoadOpENS0_13AffineStoreOpEEvRNS0_9OpBuilderENS0_8LocationEN4llvm8ArrayRefINS0_5ValueEEENS0_6linalg8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  128:static void emitScalarImplementation(OpBuilder &b, Location loc,
call    0 never executed
        -:  129:                                     ArrayRef<Value> allIvs,
        -:  130:                                     LinalgOp linalgOp) {
    #####:  131:  assert(linalgOp.hasBufferSemantics() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  132:         "expected linalg op with buffer semantics");
    #####:  133:  SmallVector<Value> indexedValues;
    #####:  134:  indexedValues.reserve(linalgOp->getNumOperands());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  135:
    #####:  136:  auto allIvsPlusDims = SmallVector<Value>(allIvs.begin(), allIvs.end());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  137:
        -:  138:  // TODO: Avoid the loads if the corresponding argument of the
        -:  139:  // region has no uses.
        -:  140:  // 1.a. Emit load from input operand or for scalars access the operand itself.
    #####:  141:  for (OpOperand *inputOperand : linalgOp.getDpsInputOperands()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  142:    if (linalgOp.isScalar(inputOperand)) {
branch  0 never executed
branch  1 never executed
    #####:  143:      indexedValues.push_back(inputOperand->get());
call    0 never executed
    #####:  144:      continue;
        -:  145:    }
    #####:  146:    auto indexing = makeCanonicalAffineApplies(
call    0 never executed
call    1 never executed
        -:  147:        b, loc, linalgOp.getMatchingIndexingMap(inputOperand), allIvsPlusDims);
    #####:  148:    indexedValues.push_back(
call    0 never executed
call    1 never executed
    #####:  149:        b.create<LoadOpTy>(loc, inputOperand->get(), indexing));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  150:  }
        -:  151:  // 1.b. Emit load from output views.
    #####:  152:  for (OpOperand *outputOperand : linalgOp.getDpsInitOperands()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  153:    SmallVector<Value> indexing = makeCanonicalAffineApplies(
call    0 never executed
call    1 never executed
        -:  154:        b, loc, linalgOp.getMatchingIndexingMap(outputOperand), allIvsPlusDims);
    #####:  155:    indexedValues.push_back(
call    0 never executed
call    1 never executed
    #####:  156:        b.create<LoadOpTy>(loc, outputOperand->get(), indexing));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:  }
        -:  158:
        -:  159:  // TODO: When a region inliner exists, use it.
        -:  160:  // 2. Inline region, currently only works for a single basic block.
        -:  161:  // 3. Emit store.
    #####:  162:  SmallVector<SmallVector<Value>, 8> indexing;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  163:  SmallVector<Value> outputBuffers;
call    0 never executed
call    1 never executed
    #####:  164:  for (OpOperand *outputOperand : linalgOp.getDpsInitOperands()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  165:    if (!outputOperand->get().getType().isa<MemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  166:      continue;
    #####:  167:    indexing.push_back(makeCanonicalAffineApplies(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  168:        b, loc, linalgOp.getMatchingIndexingMap(outputOperand),
        -:  169:        allIvsPlusDims));
    #####:  170:    outputBuffers.push_back(outputOperand->get());
call    0 never executed
        -:  171:  }
    #####:  172:  inlineRegionAndEmitStore<LoadOpTy, StoreOpTy>(b, loc, linalgOp, indexedValues,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  173:                                                indexing, outputBuffers);
    #####:  174:}
------------------
        -:  175:
        -:  176:/// Replace the index operations in the body of the loop nest by the matching
        -:  177:/// induction variables.
function _ZL35replaceIndexOpsByInductionVariablesN4mlir6linalg8LinalgOpERNS_15PatternRewriterEN4llvm8ArrayRefIPNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:  178:static void replaceIndexOpsByInductionVariables(LinalgOp linalgOp,
        -:  179:                                                PatternRewriter &rewriter,
        -:  180:                                                ArrayRef<Operation *> loopOps) {
        -:  181:  // Extract the induction variables of the loop nest from outer to inner.
    #####:  182:  SmallVector<Value> allIvs;
    #####:  183:  for (Operation *loopOp : loopOps) {
branch  0 never executed
branch  1 never executed
    #####:  184:    llvm::TypeSwitch<Operation *>(loopOp)
call    0 never executed
function _ZZL35replaceIndexOpsByInductionVariablesN4mlir6linalg8LinalgOpERNS_15PatternRewriterEN4llvm8ArrayRefIPNS_9OperationEEEENKUlNS_3scf10ParallelOpEE_clESA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  185:        .Case([&](scf::ParallelOp parallelOp) {
    #####:  186:          allIvs.append(parallelOp.getInductionVars().begin(),
call    0 never executed
call    1 never executed
    #####:  187:                        parallelOp.getInductionVars().end());
call    0 never executed
call    1 never executed
    #####:  188:        })
call    0 never executed
function _ZZL35replaceIndexOpsByInductionVariablesN4mlir6linalg8LinalgOpERNS_15PatternRewriterEN4llvm8ArrayRefIPNS_9OperationEEEENKUlNS_3scf5ForOpEE0_clESA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  189:        .Case([&](scf::ForOp forOp) {
    #####:  190:          allIvs.push_back(forOp.getInductionVar());
call    0 never executed
call    1 never executed
    #####:  191:        })
call    0 never executed
function _ZZL35replaceIndexOpsByInductionVariablesN4mlir6linalg8LinalgOpERNS_15PatternRewriterEN4llvm8ArrayRefIPNS_9OperationEEEENKUlNS_11AffineForOpEE1_clES9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  192:        .Case([&](AffineForOp affineForOp) {
    #####:  193:          allIvs.push_back(affineForOp.getInductionVar());
call    0 never executed
call    1 never executed
    #####:  194:        })
call    0 never executed
function _ZZL35replaceIndexOpsByInductionVariablesN4mlir6linalg8LinalgOpERNS_15PatternRewriterEN4llvm8ArrayRefIPNS_9OperationEEEENKUlS7_E2_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  195:        .Default([&](Operation *op) { assert(false && "unexpected op"); });
branch  0 never executed
branch  1 never executed
        -:  196:  }
    #####:  197:  assert(linalgOp.getNumLoops() == allIvs.size() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  198:         "expected the number of loops and induction variables to match");
        -:  199:  // Replace the index operations in the body of the innermost loop op.
    #####:  200:  if (!loopOps.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  201:    LoopLikeOpInterface loopOp = loopOps.back();
call    0 never executed
call    1 never executed
    #####:  202:    for (IndexOp indexOp :
    #####:  203:         llvm::make_early_inc_range(loopOp.getLoopBody().getOps<IndexOp>()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  204:      rewriter.replaceOp(indexOp, allIvs[indexOp.getDim()]);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  205:  }
    #####:  206:}
        -:  207:
        -:  208:template <typename LoopTy>
    #####:  209:static FailureOr<LinalgLoops> linalgOpToLoopsImpl(PatternRewriter &rewriter,
        -:  210:                                                  LinalgOp linalgOp) {
        -:  211:  using LoadOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  212:                                      AffineLoadOp, memref::LoadOp>;
        -:  213:  using StoreOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  214:                                       AffineStoreOp, memref::StoreOp>;
        -:  215:
        -:  216:  // The flattened loopToOperandRangesMaps is expected to be an invertible
        -:  217:  // permutation map (which is asserted in the inverse calculation).
    #####:  218:  assert(linalgOp.hasBufferSemantics() &&
        -:  219:         "expected linalg op with buffer semantics");
        -:  220:
    #####:  221:  auto loopRanges = linalgOp.createLoopRanges(rewriter, linalgOp.getLoc());
    #####:  222:  auto iteratorTypes = linalgOp.getIteratorTypesArray();
        -:  223:
    #####:  224:  SmallVector<Value> allIvs;
    #####:  225:  GenerateLoopNest<LoopTy>::doit(
        -:  226:      rewriter, linalgOp.getLoc(), loopRanges, linalgOp, iteratorTypes,
    #####:  227:      [&](OpBuilder &b, Location loc, ValueRange ivs,
        -:  228:          ValueRange operandValuesToUse) -> scf::ValueVector {
    #####:  229:        assert(operandValuesToUse == linalgOp->getOperands() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
        -:  230:               "expect operands are captured and not passed by loop argument");
    #####:  231:        allIvs.append(ivs.begin(), ivs.end());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  232:        emitScalarImplementation<LoadOpTy, StoreOpTy>(b, loc, allIvs, linalgOp);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  233:        return scf::ValueVector{};
        -:  234:      });
        -:  235:  // Number of loop ops might be different from the number of ivs since some
        -:  236:  // loops like affine.parallel and scf.parallel have multiple ivs.
    #####:  237:  SetVector<Operation *> loopSet;
    #####:  238:  for (Value iv : allIvs) {
    #####:  239:    if (!iv)
    #####:  240:      return failure();
        -:  241:    // The induction variable is a block argument of the entry block of the
        -:  242:    // loop operation.
    #####:  243:    BlockArgument ivVal = iv.dyn_cast<BlockArgument>();
    #####:  244:    if (!ivVal)
    #####:  245:      return failure();
    #####:  246:    loopSet.insert(ivVal.getOwner()->getParentOp());
        -:  247:  }
    #####:  248:  LinalgLoops loops(loopSet.begin(), loopSet.end());
        -:  249:  // Replace all index operations in the loop body.
    #####:  250:  replaceIndexOpsByInductionVariables(linalgOp, rewriter, loops);
    #####:  251:  return loops;
        -:  252:}
------------------
_Z19linalgOpToLoopsImplIN4mlir3scf10ParallelOpEENS0_9FailureOrIN4llvm11SmallVectorIPNS0_9OperationELj4EEEEERNS0_15PatternRewriterENS0_6linalg8LinalgOpE:
function _Z19linalgOpToLoopsImplIN4mlir3scf10ParallelOpEENS0_9FailureOrIN4llvm11SmallVectorIPNS0_9OperationELj4EEEEERNS0_15PatternRewriterENS0_6linalg8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  209:static FailureOr<LinalgLoops> linalgOpToLoopsImpl(PatternRewriter &rewriter,
call    0 never executed
        -:  210:                                                  LinalgOp linalgOp) {
        -:  211:  using LoadOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  212:                                      AffineLoadOp, memref::LoadOp>;
        -:  213:  using StoreOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  214:                                       AffineStoreOp, memref::StoreOp>;
        -:  215:
        -:  216:  // The flattened loopToOperandRangesMaps is expected to be an invertible
        -:  217:  // permutation map (which is asserted in the inverse calculation).
    #####:  218:  assert(linalgOp.hasBufferSemantics() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  219:         "expected linalg op with buffer semantics");
        -:  220:
    #####:  221:  auto loopRanges = linalgOp.createLoopRanges(rewriter, linalgOp.getLoc());
call    0 never executed
    #####:  222:  auto iteratorTypes = linalgOp.getIteratorTypesArray();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  223:
    #####:  224:  SmallVector<Value> allIvs;
branch  0 never executed
branch  1 never executed
    #####:  225:  GenerateLoopNest<LoopTy>::doit(
call    0 never executed
call    1 never executed
        -:  226:      rewriter, linalgOp.getLoc(), loopRanges, linalgOp, iteratorTypes,
        -:  227:      [&](OpBuilder &b, Location loc, ValueRange ivs,
        -:  228:          ValueRange operandValuesToUse) -> scf::ValueVector {
        -:  229:        assert(operandValuesToUse == linalgOp->getOperands() &&
        -:  230:               "expect operands are captured and not passed by loop argument");
        -:  231:        allIvs.append(ivs.begin(), ivs.end());
        -:  232:        emitScalarImplementation<LoadOpTy, StoreOpTy>(b, loc, allIvs, linalgOp);
        -:  233:        return scf::ValueVector{};
        -:  234:      });
        -:  235:  // Number of loop ops might be different from the number of ivs since some
        -:  236:  // loops like affine.parallel and scf.parallel have multiple ivs.
    #####:  237:  SetVector<Operation *> loopSet;
branch  0 never executed
branch  1 never executed
    #####:  238:  for (Value iv : allIvs) {
branch  0 never executed
branch  1 never executed
    #####:  239:    if (!iv)
branch  0 never executed
branch  1 never executed
    #####:  240:      return failure();
        -:  241:    // The induction variable is a block argument of the entry block of the
        -:  242:    // loop operation.
    #####:  243:    BlockArgument ivVal = iv.dyn_cast<BlockArgument>();
    #####:  244:    if (!ivVal)
branch  0 never executed
branch  1 never executed
    #####:  245:      return failure();
    #####:  246:    loopSet.insert(ivVal.getOwner()->getParentOp());
call    0 never executed
call    1 never executed
        -:  247:  }
    #####:  248:  LinalgLoops loops(loopSet.begin(), loopSet.end());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  249:  // Replace all index operations in the loop body.
    #####:  250:  replaceIndexOpsByInductionVariables(linalgOp, rewriter, loops);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  251:  return loops;
branch  0 never executed
branch  1 never executed
        -:  252:}
------------------
_Z19linalgOpToLoopsImplIN4mlir3scf5ForOpEENS0_9FailureOrIN4llvm11SmallVectorIPNS0_9OperationELj4EEEEERNS0_15PatternRewriterENS0_6linalg8LinalgOpE:
function _Z19linalgOpToLoopsImplIN4mlir3scf5ForOpEENS0_9FailureOrIN4llvm11SmallVectorIPNS0_9OperationELj4EEEEERNS0_15PatternRewriterENS0_6linalg8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  209:static FailureOr<LinalgLoops> linalgOpToLoopsImpl(PatternRewriter &rewriter,
call    0 never executed
        -:  210:                                                  LinalgOp linalgOp) {
        -:  211:  using LoadOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  212:                                      AffineLoadOp, memref::LoadOp>;
        -:  213:  using StoreOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  214:                                       AffineStoreOp, memref::StoreOp>;
        -:  215:
        -:  216:  // The flattened loopToOperandRangesMaps is expected to be an invertible
        -:  217:  // permutation map (which is asserted in the inverse calculation).
    #####:  218:  assert(linalgOp.hasBufferSemantics() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  219:         "expected linalg op with buffer semantics");
        -:  220:
    #####:  221:  auto loopRanges = linalgOp.createLoopRanges(rewriter, linalgOp.getLoc());
call    0 never executed
    #####:  222:  auto iteratorTypes = linalgOp.getIteratorTypesArray();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  223:
    #####:  224:  SmallVector<Value> allIvs;
branch  0 never executed
branch  1 never executed
    #####:  225:  GenerateLoopNest<LoopTy>::doit(
call    0 never executed
call    1 never executed
        -:  226:      rewriter, linalgOp.getLoc(), loopRanges, linalgOp, iteratorTypes,
        -:  227:      [&](OpBuilder &b, Location loc, ValueRange ivs,
        -:  228:          ValueRange operandValuesToUse) -> scf::ValueVector {
        -:  229:        assert(operandValuesToUse == linalgOp->getOperands() &&
        -:  230:               "expect operands are captured and not passed by loop argument");
        -:  231:        allIvs.append(ivs.begin(), ivs.end());
        -:  232:        emitScalarImplementation<LoadOpTy, StoreOpTy>(b, loc, allIvs, linalgOp);
        -:  233:        return scf::ValueVector{};
        -:  234:      });
        -:  235:  // Number of loop ops might be different from the number of ivs since some
        -:  236:  // loops like affine.parallel and scf.parallel have multiple ivs.
    #####:  237:  SetVector<Operation *> loopSet;
branch  0 never executed
branch  1 never executed
    #####:  238:  for (Value iv : allIvs) {
branch  0 never executed
branch  1 never executed
    #####:  239:    if (!iv)
branch  0 never executed
branch  1 never executed
    #####:  240:      return failure();
        -:  241:    // The induction variable is a block argument of the entry block of the
        -:  242:    // loop operation.
    #####:  243:    BlockArgument ivVal = iv.dyn_cast<BlockArgument>();
    #####:  244:    if (!ivVal)
branch  0 never executed
branch  1 never executed
    #####:  245:      return failure();
    #####:  246:    loopSet.insert(ivVal.getOwner()->getParentOp());
call    0 never executed
call    1 never executed
        -:  247:  }
    #####:  248:  LinalgLoops loops(loopSet.begin(), loopSet.end());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  249:  // Replace all index operations in the loop body.
    #####:  250:  replaceIndexOpsByInductionVariables(linalgOp, rewriter, loops);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  251:  return loops;
branch  0 never executed
branch  1 never executed
        -:  252:}
------------------
_Z19linalgOpToLoopsImplIN4mlir11AffineForOpEENS0_9FailureOrIN4llvm11SmallVectorIPNS0_9OperationELj4EEEEERNS0_15PatternRewriterENS0_6linalg8LinalgOpE:
function _Z19linalgOpToLoopsImplIN4mlir11AffineForOpEENS0_9FailureOrIN4llvm11SmallVectorIPNS0_9OperationELj4EEEEERNS0_15PatternRewriterENS0_6linalg8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  209:static FailureOr<LinalgLoops> linalgOpToLoopsImpl(PatternRewriter &rewriter,
call    0 never executed
        -:  210:                                                  LinalgOp linalgOp) {
        -:  211:  using LoadOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  212:                                      AffineLoadOp, memref::LoadOp>;
        -:  213:  using StoreOpTy = std::conditional_t<std::is_same<LoopTy, AffineForOp>::value,
        -:  214:                                       AffineStoreOp, memref::StoreOp>;
        -:  215:
        -:  216:  // The flattened loopToOperandRangesMaps is expected to be an invertible
        -:  217:  // permutation map (which is asserted in the inverse calculation).
    #####:  218:  assert(linalgOp.hasBufferSemantics() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  219:         "expected linalg op with buffer semantics");
        -:  220:
    #####:  221:  auto loopRanges = linalgOp.createLoopRanges(rewriter, linalgOp.getLoc());
call    0 never executed
    #####:  222:  auto iteratorTypes = linalgOp.getIteratorTypesArray();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  223:
    #####:  224:  SmallVector<Value> allIvs;
branch  0 never executed
branch  1 never executed
    #####:  225:  GenerateLoopNest<LoopTy>::doit(
call    0 never executed
call    1 never executed
        -:  226:      rewriter, linalgOp.getLoc(), loopRanges, linalgOp, iteratorTypes,
        -:  227:      [&](OpBuilder &b, Location loc, ValueRange ivs,
        -:  228:          ValueRange operandValuesToUse) -> scf::ValueVector {
        -:  229:        assert(operandValuesToUse == linalgOp->getOperands() &&
        -:  230:               "expect operands are captured and not passed by loop argument");
        -:  231:        allIvs.append(ivs.begin(), ivs.end());
        -:  232:        emitScalarImplementation<LoadOpTy, StoreOpTy>(b, loc, allIvs, linalgOp);
        -:  233:        return scf::ValueVector{};
        -:  234:      });
        -:  235:  // Number of loop ops might be different from the number of ivs since some
        -:  236:  // loops like affine.parallel and scf.parallel have multiple ivs.
    #####:  237:  SetVector<Operation *> loopSet;
branch  0 never executed
branch  1 never executed
    #####:  238:  for (Value iv : allIvs) {
branch  0 never executed
branch  1 never executed
    #####:  239:    if (!iv)
branch  0 never executed
branch  1 never executed
    #####:  240:      return failure();
        -:  241:    // The induction variable is a block argument of the entry block of the
        -:  242:    // loop operation.
    #####:  243:    BlockArgument ivVal = iv.dyn_cast<BlockArgument>();
    #####:  244:    if (!ivVal)
branch  0 never executed
branch  1 never executed
    #####:  245:      return failure();
    #####:  246:    loopSet.insert(ivVal.getOwner()->getParentOp());
call    0 never executed
call    1 never executed
        -:  247:  }
    #####:  248:  LinalgLoops loops(loopSet.begin(), loopSet.end());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  249:  // Replace all index operations in the loop body.
    #####:  250:  replaceIndexOpsByInductionVariables(linalgOp, rewriter, loops);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  251:  return loops;
branch  0 never executed
branch  1 never executed
        -:  252:}
------------------
        -:  253:
        -:  254:namespace {
        -:  255:template <typename LoopType>
        -:  256:class LinalgRewritePattern : public RewritePattern {
        -:  257:public:
     2697:  258:  LinalgRewritePattern(MLIRContext *context)
     2697:  259:      : RewritePattern(MatchAnyOpTypeTag(), /*benefit=*/1, context) {}
------------------
_ZN12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf10ParallelOpEEC2EPNS1_11MLIRContextE:
function _ZN12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf10ParallelOpEEC2EPNS1_11MLIRContextE called 914 returned 100% blocks executed 100%
      914:  258:  LinalgRewritePattern(MLIRContext *context)
      914:  259:      : RewritePattern(MatchAnyOpTypeTag(), /*benefit=*/1, context) {}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf5ForOpEEC2EPNS1_11MLIRContextE:
function _ZN12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf5ForOpEEC2EPNS1_11MLIRContextE called 902 returned 100% blocks executed 100%
      902:  258:  LinalgRewritePattern(MLIRContext *context)
      902:  259:      : RewritePattern(MatchAnyOpTypeTag(), /*benefit=*/1, context) {}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN12_GLOBAL__N_120LinalgRewritePatternIN4mlir11AffineForOpEEC2EPNS1_11MLIRContextE:
function _ZN12_GLOBAL__N_120LinalgRewritePatternIN4mlir11AffineForOpEEC2EPNS1_11MLIRContextE called 881 returned 100% blocks executed 100%
      881:  258:  LinalgRewritePattern(MLIRContext *context)
      881:  259:      : RewritePattern(MatchAnyOpTypeTag(), /*benefit=*/1, context) {}
call    0 returned 100%
call    1 returned 100%
------------------
        -:  260:
    28382:  261:  LogicalResult matchAndRewrite(Operation *op,
        -:  262:                                PatternRewriter &rewriter) const override {
    28382:  263:    auto linalgOp = dyn_cast<LinalgOp>(op);
    28382:  264:    if (!isa<LinalgOp>(op))
    28382:  265:      return failure();
    #####:  266:    if (failed(linalgOpToLoopsImpl<LoopType>(rewriter, linalgOp)))
    28382:  267:      return failure();
    #####:  268:    rewriter.eraseOp(op);
    28382:  269:    return success();
        -:  270:  }
------------------
_ZNK12_GLOBAL__N_120LinalgRewritePatternIN4mlir11AffineForOpEE15matchAndRewriteEPNS1_9OperationERNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_120LinalgRewritePatternIN4mlir11AffineForOpEE15matchAndRewriteEPNS1_9OperationERNS1_15PatternRewriterE called 9273 returned 100% blocks executed 38%
     9273:  261:  LogicalResult matchAndRewrite(Operation *op,
        -:  262:                                PatternRewriter &rewriter) const override {
     9273:  263:    auto linalgOp = dyn_cast<LinalgOp>(op);
call    0 returned 100%
     9273:  264:    if (!isa<LinalgOp>(op))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     9273:  265:      return failure();
    #####:  266:    if (failed(linalgOpToLoopsImpl<LoopType>(rewriter, linalgOp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
     9273:  267:      return failure();
    #####:  268:    rewriter.eraseOp(op);
call    0 never executed
     9273:  269:    return success();
        -:  270:  }
------------------
_ZNK12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf5ForOpEE15matchAndRewriteEPNS1_9OperationERNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf5ForOpEE15matchAndRewriteEPNS1_9OperationERNS1_15PatternRewriterE called 9545 returned 100% blocks executed 38%
     9545:  261:  LogicalResult matchAndRewrite(Operation *op,
        -:  262:                                PatternRewriter &rewriter) const override {
     9545:  263:    auto linalgOp = dyn_cast<LinalgOp>(op);
call    0 returned 100%
     9545:  264:    if (!isa<LinalgOp>(op))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     9545:  265:      return failure();
    #####:  266:    if (failed(linalgOpToLoopsImpl<LoopType>(rewriter, linalgOp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
     9545:  267:      return failure();
    #####:  268:    rewriter.eraseOp(op);
call    0 never executed
     9545:  269:    return success();
        -:  270:  }
------------------
_ZNK12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf10ParallelOpEE15matchAndRewriteEPNS1_9OperationERNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_120LinalgRewritePatternIN4mlir3scf10ParallelOpEE15matchAndRewriteEPNS1_9OperationERNS1_15PatternRewriterE called 9564 returned 100% blocks executed 38%
     9564:  261:  LogicalResult matchAndRewrite(Operation *op,
        -:  262:                                PatternRewriter &rewriter) const override {
     9564:  263:    auto linalgOp = dyn_cast<LinalgOp>(op);
call    0 returned 100%
     9564:  264:    if (!isa<LinalgOp>(op))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     9564:  265:      return failure();
    #####:  266:    if (failed(linalgOpToLoopsImpl<LoopType>(rewriter, linalgOp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
     9564:  267:      return failure();
    #####:  268:    rewriter.eraseOp(op);
call    0 never executed
     9564:  269:    return success();
        -:  270:  }
------------------
        -:  271:};
        -:  272:
        -:  273:/// Local folding pattern for AffineApplyOp that we can apply greedily.
        -:  274:/// This replaces AffineApplyOp by the proper value in cases where the
        -:  275:/// associated map is trivial.
        -:  276:/// A trivial map here is defined as a map with a single result and either:
        -:  277:///   1. Zero operand + returns a single AffineConstantExpr
        -:  278:///   2. One operand + returns a single AffineDimExpr
        -:  279:///   3. One operand + returns a single AffineSymbolExpr
        -:  280://
        -:  281:/// In the first case, the AffineApplyOp is replaced by a new constant. In the
        -:  282:/// other cases, it is replaced by its unique operand.
        -:  283:struct FoldAffineOp : public RewritePattern {
function _ZN12_GLOBAL__N_112FoldAffineOpC2EPN4mlir11MLIRContextE called 2677 returned 100% blocks executed 100%
     2677:  284:  FoldAffineOp(MLIRContext *context)
     2677:  285:      : RewritePattern(AffineApplyOp::getOperationName(), 0, context) {}
call    0 returned 100%
call    1 returned 100%
        -:  286:
function _ZNK12_GLOBAL__N_112FoldAffineOp15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  287:  LogicalResult matchAndRewrite(Operation *op,
        -:  288:                                PatternRewriter &rewriter) const override {
    #####:  289:    AffineApplyOp affineApplyOp = cast<AffineApplyOp>(op);
call    0 never executed
    #####:  290:    auto map = affineApplyOp.getAffineMap();
call    0 never executed
    #####:  291:    if (map.getNumResults() != 1 || map.getNumInputs() > 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  292:      return failure();
        -:  293:
    #####:  294:    AffineExpr expr = map.getResult(0);
call    0 never executed
    #####:  295:    if (map.getNumInputs() == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  296:      if (auto val = expr.dyn_cast<AffineConstantExpr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  297:        rewriter.replaceOpWithNewOp<arith::ConstantIndexOp>(op, val.getValue());
call    0 never executed
call    1 never executed
    #####:  298:        return success();
        -:  299:      }
    #####:  300:      return failure();
        -:  301:    }
    #####:  302:    if (expr.dyn_cast<AffineDimExpr>() || expr.dyn_cast<AffineSymbolExpr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  303:      rewriter.replaceOp(op, op->getOperand(0));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  304:      return success();
        -:  305:    }
    #####:  306:    return failure();
        -:  307:  }
        -:  308:};
        -:  309:
        -:  310:template <typename LoopType>
     2698:  311:static void lowerLinalgToLoopsImpl(func::FuncOp funcOp) {
     2696:  312:  MLIRContext *context = funcOp.getContext();
     2696:  313:  RewritePatternSet patterns(context);
     2696:  314:  patterns.add<LinalgRewritePattern<LoopType>>(context);
     2691:  315:  memref::DimOp::getCanonicalizationPatterns(patterns, context);
     2694:  316:  tensor::DimOp::getCanonicalizationPatterns(patterns, context);
     2688:  317:  AffineApplyOp::getCanonicalizationPatterns(patterns, context);
     2666:  318:  patterns.add<FoldAffineOp>(context);
        -:  319:  // Just apply the patterns greedily.
     2677:  320:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
     2694:  321:}
------------------
_ZN12_GLOBAL__N_1L22lowerLinalgToLoopsImplIN4mlir3scf10ParallelOpEEEvNS1_4func6FuncOpE:
function _ZN12_GLOBAL__N_1L22lowerLinalgToLoopsImplIN4mlir3scf10ParallelOpEEEvNS1_4func6FuncOpE called 913 returned 100% blocks executed 100%
      913:  311:static void lowerLinalgToLoopsImpl(func::FuncOp funcOp) {
call    0 returned 100%
      912:  312:  MLIRContext *context = funcOp.getContext();
      912:  313:  RewritePatternSet patterns(context);
call    0 returned 100%
      912:  314:  patterns.add<LinalgRewritePattern<LoopType>>(context);
call    0 returned 100%
      908:  315:  memref::DimOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 101%
      914:  316:  tensor::DimOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 100%
      913:  317:  AffineApplyOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 98%
      898:  318:  patterns.add<FoldAffineOp>(context);
call    0 returned 101%
        -:  319:  // Just apply the patterns greedily.
      905:  320:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 returned 100%
call    1 returned 101%
call    2 returned 100%
call    3 returned 100%
      915:  321:}
------------------
_ZN12_GLOBAL__N_1L22lowerLinalgToLoopsImplIN4mlir3scf5ForOpEEEvNS1_4func6FuncOpE:
function _ZN12_GLOBAL__N_1L22lowerLinalgToLoopsImplIN4mlir3scf5ForOpEEEvNS1_4func6FuncOpE called 904 returned 99% blocks executed 100%
      904:  311:static void lowerLinalgToLoopsImpl(func::FuncOp funcOp) {
call    0 returned 100%
      903:  312:  MLIRContext *context = funcOp.getContext();
      903:  313:  RewritePatternSet patterns(context);
call    0 returned 100%
      903:  314:  patterns.add<LinalgRewritePattern<LoopType>>(context);
call    0 returned 100%
      902:  315:  memref::DimOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 100%
      899:  316:  tensor::DimOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 99%
      894:  317:  AffineApplyOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 99%
      887:  318:  patterns.add<FoldAffineOp>(context);
call    0 returned 100%
        -:  319:  // Just apply the patterns greedily.
      891:  320:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 returned 100%
call    1 returned 101%
call    2 returned 100%
call    3 returned 100%
      898:  321:}
------------------
_ZN12_GLOBAL__N_1L22lowerLinalgToLoopsImplIN4mlir11AffineForOpEEEvNS1_4func6FuncOpE:
function _ZN12_GLOBAL__N_1L22lowerLinalgToLoopsImplIN4mlir11AffineForOpEEEvNS1_4func6FuncOpE called 881 returned 100% blocks executed 100%
      881:  311:static void lowerLinalgToLoopsImpl(func::FuncOp funcOp) {
call    0 returned 100%
      881:  312:  MLIRContext *context = funcOp.getContext();
      881:  313:  RewritePatternSet patterns(context);
call    0 returned 100%
      881:  314:  patterns.add<LinalgRewritePattern<LoopType>>(context);
call    0 returned 100%
      881:  315:  memref::DimOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 100%
      881:  316:  tensor::DimOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 100%
      881:  317:  AffineApplyOp::getCanonicalizationPatterns(patterns, context);
call    0 returned 100%
      881:  318:  patterns.add<FoldAffineOp>(context);
call    0 returned 100%
        -:  319:  // Just apply the patterns greedily.
      881:  320:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      881:  321:}
------------------
        -:  322:
   387966:  323:struct LowerToAffineLoops
call    0 returned 100%
call    1 returned 100%
        -:  324:    : public impl::LinalgLowerToAffineLoopsBase<LowerToAffineLoops> {
function _ZNK12_GLOBAL__N_118LowerToAffineLoops20getDependentDialectsERN4mlir15DialectRegistryE called 1075 returned 100% blocks executed 100%
     1075:  325:  void getDependentDialects(DialectRegistry &registry) const override {
     1075:  326:    registry.insert<memref::MemRefDialect>();
call    0 returned 100%
     1075:  327:  }
function _ZN12_GLOBAL__N_118LowerToAffineLoops14runOnOperationEv called 881 returned 100% blocks executed 100%
      881:  328:  void runOnOperation() override {
      881:  329:    lowerLinalgToLoopsImpl<AffineForOp>(getOperation());
call    0 returned 100%
call    1 returned 100%
      881:  330:  }
        -:  331:};
        -:  332:
   387469:  333:struct LowerToLoops : public impl::LinalgLowerToLoopsBase<LowerToLoops> {
call    0 returned 100%
call    1 returned 100%
function _ZNK12_GLOBAL__N_112LowerToLoops20getDependentDialectsERN4mlir15DialectRegistryE called 2090 returned 100% blocks executed 100%
     2090:  334:  void getDependentDialects(DialectRegistry &registry) const override {
     2090:  335:    registry.insert<memref::MemRefDialect, scf::SCFDialect>();
call    0 returned 100%
     2090:  336:  }
function _ZN12_GLOBAL__N_112LowerToLoops14runOnOperationEv called 904 returned 99% blocks executed 100%
      904:  337:  void runOnOperation() override {
      904:  338:    lowerLinalgToLoopsImpl<scf::ForOp>(getOperation());
call    0 returned 100%
call    1 returned 99%
      898:  339:  }
        -:  340:};
        -:  341:
   388686:  342:struct LowerToParallelLoops
call    0 returned 100%
call    1 returned 100%
        -:  343:    : public impl::LinalgLowerToParallelLoopsBase<LowerToParallelLoops> {
function _ZN12_GLOBAL__N_120LowerToParallelLoops14runOnOperationEv called 914 returned 100% blocks executed 100%
      914:  344:  void runOnOperation() override {
      914:  345:    lowerLinalgToLoopsImpl<scf::ParallelOp>(getOperation());
call    0 returned 100%
call    1 returned 100%
      915:  346:  }
        -:  347:};
        -:  348:
        -:  349:} // namespace
        -:  350:
        -:  351:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir30createConvertLinalgToLoopsPassEv called 327637 returned 100% blocks executed 100%
   327637:  352:mlir::createConvertLinalgToLoopsPass() {
   327637:  353:  return std::make_unique<LowerToLoops>();
call    0 returned 100%
        -:  354:}
        -:  355:
        -:  356:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir38createConvertLinalgToParallelLoopsPassEv called 326622 returned 100% blocks executed 100%
   326622:  357:mlir::createConvertLinalgToParallelLoopsPass() {
   326622:  358:  return std::make_unique<LowerToParallelLoops>();
call    0 returned 100%
        -:  359:}
        -:  360:
        -:  361:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir36createConvertLinalgToAffineLoopsPassEv called 326622 returned 100% blocks executed 100%
   326622:  362:mlir::createConvertLinalgToAffineLoopsPass() {
   326622:  363:  return std::make_unique<LowerToAffineLoops>();
call    0 returned 100%
        -:  364:}
        -:  365:
        -:  366:/// Emits a loop nest of `affine.for` with the proper body for `linalgOp`.
        -:  367:FailureOr<LinalgLoops>
function _ZN4mlir6linalg21linalgOpToAffineLoopsERNS_15PatternRewriterENS0_8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  368:mlir::linalg::linalgOpToAffineLoops(PatternRewriter &rewriter,
        -:  369:                                    LinalgOp linalgOp) {
    #####:  370:  return linalgOpToLoopsImpl<AffineForOp>(rewriter, linalgOp);
call    0 never executed
        -:  371:}
        -:  372:
        -:  373:/// Emits a loop nest of `scf.for` with the proper body for `linalgOp`.
function _ZN4mlir6linalg15linalgOpToLoopsERNS_15PatternRewriterENS0_8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  374:FailureOr<LinalgLoops> mlir::linalg::linalgOpToLoops(PatternRewriter &rewriter,
        -:  375:                                                     LinalgOp linalgOp) {
    #####:  376:  return linalgOpToLoopsImpl<scf::ForOp>(rewriter, linalgOp);
call    0 never executed
        -:  377:}
        -:  378:
        -:  379:/// Emits a loop nest of `scf.parallel` with the proper body for `linalgOp`.
        -:  380:FailureOr<LinalgLoops>
function _ZN4mlir6linalg23linalgOpToParallelLoopsERNS_15PatternRewriterENS0_8LinalgOpE called 0 returned 0% blocks executed 0%
    #####:  381:mlir::linalg::linalgOpToParallelLoops(PatternRewriter &rewriter,
        -:  382:                                      LinalgOp linalgOp) {
    #####:  383:  return linalgOpToLoopsImpl<scf::ParallelOp>(rewriter, linalgOp);
call    0 never executed
        -:  384:}
