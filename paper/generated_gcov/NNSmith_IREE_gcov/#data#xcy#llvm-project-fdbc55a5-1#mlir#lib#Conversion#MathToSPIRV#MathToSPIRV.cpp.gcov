        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Conversion/MathToSPIRV/MathToSPIRV.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/MathToSPIRV/CMakeFiles/obj.MLIRMathToSPIRV.dir/MathToSPIRV.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/MathToSPIRV/CMakeFiles/obj.MLIRMathToSPIRV.dir/MathToSPIRV.cpp.gcda
        -:    0:Runs:325557
        -:    1://===- MathToSPIRV.cpp - Math to SPIR-V Patterns --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to convert Math dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "../SPIRVCommon/Pattern.h"
        -:   14:#include "mlir/Dialect/Math/IR/Math.h"
        -:   15:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   17:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   18:#include "mlir/IR/BuiltinTypes.h"
        -:   19:#include "mlir/IR/TypeUtilities.h"
        -:   20:#include "mlir/Transforms/DialectConversion.h"
        -:   21:#include "llvm/Support/Debug.h"
        -:   22:
        -:   23:#define DEBUG_TYPE "math-to-spirv-pattern"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27://===----------------------------------------------------------------------===//
        -:   28:// Utility functions
        -:   29://===----------------------------------------------------------------------===//
        -:   30:
        -:   31:/// Creates a 32-bit scalar/vector integer constant. Returns nullptr if the
        -:   32:/// given type is not a 32-bit scalar/vector type.
function _ZL28getScalarOrVectorI32ConstantN4mlir4TypeEiRNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   33:static Value getScalarOrVectorI32Constant(Type type, int value,
        -:   34:                                          OpBuilder &builder, Location loc) {
    #####:   35:  if (auto vectorType = type.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:    if (!vectorType.getElementType().isInteger(32))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   37:      return nullptr;
    #####:   38:    SmallVector<int> values(vectorType.getNumElements(), value);
call    0 never executed
call    1 never executed
    #####:   39:    return builder.create<spirv::ConstantOp>(loc, type,
branch  0 never executed
branch  1 never executed
    #####:   40:                                             builder.getI32VectorAttr(values));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   41:  }
    #####:   42:  if (type.isInteger(32))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:    return builder.create<spirv::ConstantOp>(loc, type,
    #####:   44:                                             builder.getI32IntegerAttr(value));
call    0 never executed
call    1 never executed
        -:   45:
    #####:   46:  return nullptr;
        -:   47:}
        -:   48:
        -:   49://===----------------------------------------------------------------------===//
        -:   50:// Operation conversion
        -:   51://===----------------------------------------------------------------------===//
        -:   52:
        -:   53:// Note that DRR cannot be used for the patterns in this file: we may need to
        -:   54:// convert type along the way, which requires ConversionPattern. DRR generates
        -:   55:// normal RewritePattern.
        -:   56:
        -:   57:namespace {
        -:   58:/// Converts math.copysign to SPIR-V ops.
        -:   59:class CopySignPattern final : public OpConversionPattern<math::CopySignOp> {
        -:   60:  using OpConversionPattern::OpConversionPattern;
        -:   61:
        -:   62:  LogicalResult
function _ZNK12_GLOBAL__N_115CopySignPattern15matchAndRewriteEN4mlir4math10CopySignOpENS2_17CopySignOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   63:  matchAndRewrite(math::CopySignOp copySignOp, OpAdaptor adaptor,
        -:   64:                  ConversionPatternRewriter &rewriter) const override {
    #####:   65:    auto type = getTypeConverter()->convertType(copySignOp.getType());
call    0 never executed
    #####:   66:    if (!type)
branch  0 never executed
branch  1 never executed
    #####:   67:      return failure();
        -:   68:
    #####:   69:    FloatType floatType;
    #####:   70:    if (auto scalarType = copySignOp.getType().dyn_cast<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:      floatType = scalarType;
    #####:   72:    } else if (auto vectorType = copySignOp.getType().dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:      floatType = vectorType.getElementType().cast<FloatType>();
call    0 never executed
call    1 never executed
        -:   74:    } else {
    #####:   75:      return failure();
        -:   76:    }
        -:   77:
    #####:   78:    Location loc = copySignOp.getLoc();
call    0 never executed
    #####:   79:    int bitwidth = floatType.getWidth();
call    0 never executed
    #####:   80:    Type intType = rewriter.getIntegerType(bitwidth);
call    0 never executed
    #####:   81:    uint64_t intValue = uint64_t(1) << (bitwidth - 1);
        -:   82:
    #####:   83:    Value signMask = rewriter.create<spirv::ConstantOp>(
    #####:   84:        loc, intType, rewriter.getIntegerAttr(intType, intValue));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   85:    Value valueMask = rewriter.create<spirv::ConstantOp>(
    #####:   86:        loc, intType, rewriter.getIntegerAttr(intType, intValue - 1u));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   87:
    #####:   88:    if (auto vectorType = copySignOp.getType().dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:      assert(vectorType.getRank() == 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   90:      int count = vectorType.getNumElements();
call    0 never executed
    #####:   91:      intType = VectorType::get(count, intType);
call    0 never executed
        -:   92:
    #####:   93:      SmallVector<Value> signSplat(count, signMask);
call    0 never executed
    #####:   94:      signMask =
    #####:   95:          rewriter.create<spirv::CompositeConstructOp>(loc, intType, signSplat);
call    0 never executed
call    1 never executed
        -:   96:
    #####:   97:      SmallVector<Value> valueSplat(count, valueMask);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:      valueMask = rewriter.create<spirv::CompositeConstructOp>(loc, intType,
branch  0 never executed
branch  1 never executed
    #####:   99:                                                               valueSplat);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  100:    }
        -:  101:
    #####:  102:    Value lhsCast =
    #####:  103:        rewriter.create<spirv::BitcastOp>(loc, intType, adaptor.getLhs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  104:    Value rhsCast =
    #####:  105:        rewriter.create<spirv::BitcastOp>(loc, intType, adaptor.getRhs());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  106:
    #####:  107:    Value value = rewriter.create<spirv::BitwiseAndOp>(
    #####:  108:        loc, intType, ValueRange{lhsCast, valueMask});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  109:    Value sign = rewriter.create<spirv::BitwiseAndOp>(
    #####:  110:        loc, intType, ValueRange{rhsCast, signMask});
call    0 never executed
call    1 never executed
call    2 never executed
        -:  111:
    #####:  112:    Value result = rewriter.create<spirv::BitwiseOrOp>(loc, intType,
    #####:  113:                                                       ValueRange{value, sign});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  114:    rewriter.replaceOpWithNewOp<spirv::BitcastOp>(copySignOp, type, result);
call    0 never executed
    #####:  115:    return success();
        -:  116:  }
        -:  117:};
        -:  118:
        -:  119:/// Converts math.ctlz to SPIR-V ops.
        -:  120:///
        -:  121:/// SPIR-V does not have a direct operations for counting leading zeros. If
        -:  122:/// Shader capability is supported, we can leverage GL FindUMsb to calculate
        -:  123:/// it.
        -:  124:class CountLeadingZerosPattern final
        -:  125:    : public OpConversionPattern<math::CountLeadingZerosOp> {
        -:  126:  using OpConversionPattern::OpConversionPattern;
        -:  127:
        -:  128:  LogicalResult
function _ZNK12_GLOBAL__N_124CountLeadingZerosPattern15matchAndRewriteEN4mlir4math19CountLeadingZerosOpENS2_26CountLeadingZerosOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  129:  matchAndRewrite(math::CountLeadingZerosOp countOp, OpAdaptor adaptor,
        -:  130:                  ConversionPatternRewriter &rewriter) const override {
    #####:  131:    auto type = getTypeConverter()->convertType(countOp.getType());
call    0 never executed
    #####:  132:    if (!type)
branch  0 never executed
branch  1 never executed
    #####:  133:      return failure();
        -:  134:
        -:  135:    // We can only support 32-bit integer types for now.
    #####:  136:    unsigned bitwidth = 0;
    #####:  137:    if (type.isa<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:      bitwidth = type.getIntOrFloatBitWidth();
call    0 never executed
    #####:  139:    if (auto vectorType = type.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:      bitwidth = vectorType.getElementTypeBitWidth();
call    0 never executed
    #####:  141:    if (bitwidth != 32)
branch  0 never executed
branch  1 never executed
    #####:  142:      return failure();
        -:  143:
    #####:  144:    Location loc = countOp.getLoc();
call    0 never executed
    #####:  145:    Value input = adaptor.getOperand();
call    0 never executed
    #####:  146:    Value val1 = getScalarOrVectorI32Constant(type, 1, rewriter, loc);
call    0 never executed
    #####:  147:    Value val31 = getScalarOrVectorI32Constant(type, 31, rewriter, loc);
call    0 never executed
    #####:  148:    Value val32 = getScalarOrVectorI32Constant(type, 32, rewriter, loc);
call    0 never executed
        -:  149:
    #####:  150:    Value msb = rewriter.create<spirv::GLFindUMsbOp>(loc, input);
call    0 never executed
call    1 never executed
        -:  151:    // We need to subtract from 31 given that the index returned by GLSL
        -:  152:    // FindUMsb is counted from the least significant bit. Theoretically this
        -:  153:    // also gives the correct result even if the integer has all zero bits, in
        -:  154:    // which case GL FindUMsb would return -1.
    #####:  155:    Value subMsb = rewriter.create<spirv::ISubOp>(loc, val31, msb);
call    0 never executed
call    1 never executed
        -:  156:    // However, certain Vulkan implementations have driver bugs for the corner
        -:  157:    // case where the input is zero. And.. it can be smart to optimize a select
        -:  158:    // only involving the corner case. So separately compute the result when the
        -:  159:    // input is either zero or one.
    #####:  160:    Value subInput = rewriter.create<spirv::ISubOp>(loc, val32, input);
call    0 never executed
call    1 never executed
    #####:  161:    Value cmp = rewriter.create<spirv::ULessThanEqualOp>(loc, input, val1);
call    0 never executed
call    1 never executed
    #####:  162:    rewriter.replaceOpWithNewOp<spirv::SelectOp>(countOp, cmp, subInput,
    #####:  163:                                                 subMsb);
call    0 never executed
    #####:  164:    return success();
        -:  165:  }
        -:  166:};
        -:  167:
        -:  168:/// Converts math.expm1 to SPIR-V ops.
        -:  169:///
        -:  170:/// SPIR-V does not have a direct operations for exp(x)-1. Explicitly lower to
        -:  171:/// these operations.
        -:  172:template <typename ExpOp>
        -:  173:struct ExpM1OpPattern final : public OpConversionPattern<math::ExpM1Op> {
        -:  174:  using OpConversionPattern::OpConversionPattern;
        -:  175:
        -:  176:  LogicalResult
    #####:  177:  matchAndRewrite(math::ExpM1Op operation, OpAdaptor adaptor,
        -:  178:                  ConversionPatternRewriter &rewriter) const override {
    #####:  179:    assert(adaptor.getOperands().size() == 1);
    #####:  180:    Location loc = operation.getLoc();
    #####:  181:    auto type = this->getTypeConverter()->convertType(operation.getType());
    #####:  182:    auto exp = rewriter.create<ExpOp>(loc, type, adaptor.getOperand());
    #####:  183:    auto one = spirv::ConstantOp::getOne(type, loc, rewriter);
    #####:  184:    rewriter.replaceOpWithNewOp<spirv::FSubOp>(operation, exp, one);
    #####:  185:    return success();
        -:  186:  }
------------------
_ZNK12_GLOBAL__N_114ExpM1OpPatternIN4mlir5spirv7GLExpOpEE15matchAndRewriteENS1_4math7ExpM1OpENS5_14ExpM1OpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_114ExpM1OpPatternIN4mlir5spirv7GLExpOpEE15matchAndRewriteENS1_4math7ExpM1OpENS5_14ExpM1OpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  177:  matchAndRewrite(math::ExpM1Op operation, OpAdaptor adaptor,
        -:  178:                  ConversionPatternRewriter &rewriter) const override {
    #####:  179:    assert(adaptor.getOperands().size() == 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  180:    Location loc = operation.getLoc();
call    0 never executed
    #####:  181:    auto type = this->getTypeConverter()->convertType(operation.getType());
call    0 never executed
    #####:  182:    auto exp = rewriter.create<ExpOp>(loc, type, adaptor.getOperand());
call    0 never executed
call    1 never executed
    #####:  183:    auto one = spirv::ConstantOp::getOne(type, loc, rewriter);
call    0 never executed
    #####:  184:    rewriter.replaceOpWithNewOp<spirv::FSubOp>(operation, exp, one);
call    0 never executed
    #####:  185:    return success();
        -:  186:  }
------------------
_ZNK12_GLOBAL__N_114ExpM1OpPatternIN4mlir5spirv7CLExpOpEE15matchAndRewriteENS1_4math7ExpM1OpENS5_14ExpM1OpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_114ExpM1OpPatternIN4mlir5spirv7CLExpOpEE15matchAndRewriteENS1_4math7ExpM1OpENS5_14ExpM1OpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  177:  matchAndRewrite(math::ExpM1Op operation, OpAdaptor adaptor,
        -:  178:                  ConversionPatternRewriter &rewriter) const override {
    #####:  179:    assert(adaptor.getOperands().size() == 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  180:    Location loc = operation.getLoc();
call    0 never executed
    #####:  181:    auto type = this->getTypeConverter()->convertType(operation.getType());
call    0 never executed
    #####:  182:    auto exp = rewriter.create<ExpOp>(loc, type, adaptor.getOperand());
call    0 never executed
call    1 never executed
    #####:  183:    auto one = spirv::ConstantOp::getOne(type, loc, rewriter);
call    0 never executed
    #####:  184:    rewriter.replaceOpWithNewOp<spirv::FSubOp>(operation, exp, one);
call    0 never executed
    #####:  185:    return success();
        -:  186:  }
------------------
        -:  187:};
        -:  188:
        -:  189:/// Converts math.log1p to SPIR-V ops.
        -:  190:///
        -:  191:/// SPIR-V does not have a direct operations for log(1+x). Explicitly lower to
        -:  192:/// these operations.
        -:  193:template <typename LogOp>
        -:  194:struct Log1pOpPattern final : public OpConversionPattern<math::Log1pOp> {
        -:  195:  using OpConversionPattern::OpConversionPattern;
        -:  196:
        -:  197:  LogicalResult
    #####:  198:  matchAndRewrite(math::Log1pOp operation, OpAdaptor adaptor,
        -:  199:                  ConversionPatternRewriter &rewriter) const override {
    #####:  200:    assert(adaptor.getOperands().size() == 1);
    #####:  201:    Location loc = operation.getLoc();
    #####:  202:    auto type = this->getTypeConverter()->convertType(operation.getType());
    #####:  203:    auto one = spirv::ConstantOp::getOne(type, operation.getLoc(), rewriter);
        -:  204:    auto onePlus =
    #####:  205:        rewriter.create<spirv::FAddOp>(loc, one, adaptor.getOperand());
    #####:  206:    rewriter.replaceOpWithNewOp<LogOp>(operation, type, onePlus);
    #####:  207:    return success();
        -:  208:  }
------------------
_ZNK12_GLOBAL__N_114Log1pOpPatternIN4mlir5spirv7GLLogOpEE15matchAndRewriteENS1_4math7Log1pOpENS5_14Log1pOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_114Log1pOpPatternIN4mlir5spirv7GLLogOpEE15matchAndRewriteENS1_4math7Log1pOpENS5_14Log1pOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  198:  matchAndRewrite(math::Log1pOp operation, OpAdaptor adaptor,
        -:  199:                  ConversionPatternRewriter &rewriter) const override {
    #####:  200:    assert(adaptor.getOperands().size() == 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  201:    Location loc = operation.getLoc();
call    0 never executed
    #####:  202:    auto type = this->getTypeConverter()->convertType(operation.getType());
call    0 never executed
    #####:  203:    auto one = spirv::ConstantOp::getOne(type, operation.getLoc(), rewriter);
call    0 never executed
        -:  204:    auto onePlus =
    #####:  205:        rewriter.create<spirv::FAddOp>(loc, one, adaptor.getOperand());
call    0 never executed
call    1 never executed
    #####:  206:    rewriter.replaceOpWithNewOp<LogOp>(operation, type, onePlus);
call    0 never executed
    #####:  207:    return success();
        -:  208:  }
------------------
_ZNK12_GLOBAL__N_114Log1pOpPatternIN4mlir5spirv7CLLogOpEE15matchAndRewriteENS1_4math7Log1pOpENS5_14Log1pOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_114Log1pOpPatternIN4mlir5spirv7CLLogOpEE15matchAndRewriteENS1_4math7Log1pOpENS5_14Log1pOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  198:  matchAndRewrite(math::Log1pOp operation, OpAdaptor adaptor,
        -:  199:                  ConversionPatternRewriter &rewriter) const override {
    #####:  200:    assert(adaptor.getOperands().size() == 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  201:    Location loc = operation.getLoc();
call    0 never executed
    #####:  202:    auto type = this->getTypeConverter()->convertType(operation.getType());
call    0 never executed
    #####:  203:    auto one = spirv::ConstantOp::getOne(type, operation.getLoc(), rewriter);
call    0 never executed
        -:  204:    auto onePlus =
    #####:  205:        rewriter.create<spirv::FAddOp>(loc, one, adaptor.getOperand());
call    0 never executed
call    1 never executed
    #####:  206:    rewriter.replaceOpWithNewOp<LogOp>(operation, type, onePlus);
call    0 never executed
    #####:  207:    return success();
        -:  208:  }
------------------
        -:  209:};
        -:  210:
        -:  211:/// Converts math.powf to SPIRV-Ops.
        -:  212:struct PowFOpPattern final : public OpConversionPattern<math::PowFOp> {
        -:  213:  using OpConversionPattern::OpConversionPattern;
        -:  214:
        -:  215:  LogicalResult
function _ZNK12_GLOBAL__N_113PowFOpPattern15matchAndRewriteEN4mlir4math6PowFOpENS2_13PowFOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  216:  matchAndRewrite(math::PowFOp powfOp, OpAdaptor adaptor,
        -:  217:                  ConversionPatternRewriter &rewriter) const override {
    #####:  218:    auto dstType = getTypeConverter()->convertType(powfOp.getType());
call    0 never executed
    #####:  219:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  220:      return failure();
        -:  221:
        -:  222:    // Per GL Pow extended instruction spec:
        -:  223:    // "Result is undefined if x < 0. Result is undefined if x = 0 and y <= 0."
    #####:  224:    Location loc = powfOp.getLoc();
call    0 never executed
    #####:  225:    Value zero =
    #####:  226:        spirv::ConstantOp::getZero(adaptor.getLhs().getType(), loc, rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  227:    Value lessThan =
    #####:  228:        rewriter.create<spirv::FOrdLessThanOp>(loc, adaptor.getLhs(), zero);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  229:    Value abs = rewriter.create<spirv::GLFAbsOp>(loc, adaptor.getLhs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  230:    Value pow = rewriter.create<spirv::GLPowOp>(loc, abs, adaptor.getRhs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  231:    Value negate = rewriter.create<spirv::FNegateOp>(loc, pow);
call    0 never executed
call    1 never executed
    #####:  232:    rewriter.replaceOpWithNewOp<spirv::SelectOp>(powfOp, lessThan, negate, pow);
call    0 never executed
    #####:  233:    return success();
        -:  234:  }
        -:  235:};
        -:  236:
        -:  237:/// Converts math.round to GLSL SPIRV extended ops.
        -:  238:struct RoundOpPattern final : public OpConversionPattern<math::RoundOp> {
        -:  239:  using OpConversionPattern::OpConversionPattern;
        -:  240:
        -:  241:  LogicalResult
function _ZNK12_GLOBAL__N_114RoundOpPattern15matchAndRewriteEN4mlir4math7RoundOpENS2_14RoundOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  242:  matchAndRewrite(math::RoundOp roundOp, OpAdaptor adaptor,
        -:  243:                  ConversionPatternRewriter &rewriter) const override {
    #####:  244:    Location loc = roundOp.getLoc();
call    0 never executed
    #####:  245:    auto operand = roundOp.getOperand();
call    0 never executed
    #####:  246:    auto ty = operand.getType();
call    0 never executed
    #####:  247:    auto ety = getElementTypeOrSelf(ty);
call    0 never executed
        -:  248:
    #####:  249:    auto zero = spirv::ConstantOp::getZero(ty, loc, rewriter);
call    0 never executed
    #####:  250:    auto one = spirv::ConstantOp::getOne(ty, loc, rewriter);
call    0 never executed
    #####:  251:    Value half;
    #####:  252:    if (VectorType vty = ty.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  253:      half = rewriter.create<spirv::ConstantOp>(
        -:  254:          loc, vty,
    #####:  255:          DenseElementsAttr::get(vty,
call    0 never executed
    #####:  256:                                 rewriter.getFloatAttr(ety, 0.5).getValue()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  257:    } else {
    #####:  258:      half = rewriter.create<spirv::ConstantOp>(
    #####:  259:          loc, ty, rewriter.getFloatAttr(ety, 0.5));
call    0 never executed
call    1 never executed
        -:  260:    }
        -:  261:
    #####:  262:    auto abs = rewriter.create<spirv::GLFAbsOp>(loc, operand);
call    0 never executed
    #####:  263:    auto floor = rewriter.create<spirv::GLFloorOp>(loc, abs);
call    0 never executed
    #####:  264:    auto sub = rewriter.create<spirv::FSubOp>(loc, abs, floor);
call    0 never executed
    #####:  265:    auto greater =
    #####:  266:        rewriter.create<spirv::FOrdGreaterThanEqualOp>(loc, sub, half);
call    0 never executed
    #####:  267:    auto select = rewriter.create<spirv::SelectOp>(loc, greater, one, zero);
call    0 never executed
    #####:  268:    auto add = rewriter.create<spirv::FAddOp>(loc, floor, select);
call    0 never executed
    #####:  269:    rewriter.replaceOpWithNewOp<math::CopySignOp>(roundOp, add, operand);
call    0 never executed
    #####:  270:    return success();
        -:  271:  }
        -:  272:};
        -:  273:
        -:  274:} // namespace
        -:  275:
        -:  276://===----------------------------------------------------------------------===//
        -:  277:// Pattern population
        -:  278://===----------------------------------------------------------------------===//
        -:  279:
        -:  280:namespace mlir {
function _ZN4mlir27populateMathToSPIRVPatternsERNS_18SPIRVTypeConverterERNS_17RewritePatternSetE called 884 returned 100% blocks executed 100%
      884:  281:void populateMathToSPIRVPatterns(SPIRVTypeConverter &typeConverter,
        -:  282:                                 RewritePatternSet &patterns) {
        -:  283:  // Core patterns
      884:  284:  patterns.add<CopySignPattern>(typeConverter, patterns.getContext());
call    0 returned 100%
        -:  285:
        -:  286:  // GLSL patterns
      884:  287:  patterns
        -:  288:      .add<CountLeadingZerosPattern, Log1pOpPattern<spirv::GLLogOp>,
        -:  289:           ExpM1OpPattern<spirv::GLExpOp>, PowFOpPattern, RoundOpPattern,
        -:  290:           spirv::ElementwiseOpPattern<math::AbsFOp, spirv::GLFAbsOp>,
        -:  291:           spirv::ElementwiseOpPattern<math::AbsIOp, spirv::GLSAbsOp>,
        -:  292:           spirv::ElementwiseOpPattern<math::CeilOp, spirv::GLCeilOp>,
        -:  293:           spirv::ElementwiseOpPattern<math::CosOp, spirv::GLCosOp>,
        -:  294:           spirv::ElementwiseOpPattern<math::ExpOp, spirv::GLExpOp>,
        -:  295:           spirv::ElementwiseOpPattern<math::FloorOp, spirv::GLFloorOp>,
        -:  296:           spirv::ElementwiseOpPattern<math::FmaOp, spirv::GLFmaOp>,
        -:  297:           spirv::ElementwiseOpPattern<math::LogOp, spirv::GLLogOp>,
        -:  298:           spirv::ElementwiseOpPattern<math::RoundEvenOp, spirv::GLRoundEvenOp>,
        -:  299:           spirv::ElementwiseOpPattern<math::RsqrtOp, spirv::GLInverseSqrtOp>,
        -:  300:           spirv::ElementwiseOpPattern<math::SinOp, spirv::GLSinOp>,
        -:  301:           spirv::ElementwiseOpPattern<math::SqrtOp, spirv::GLSqrtOp>,
        -:  302:           spirv::ElementwiseOpPattern<math::TanhOp, spirv::GLTanhOp>>(
      884:  303:          typeConverter, patterns.getContext());
call    0 returned 100%
        -:  304:
        -:  305:  // OpenCL patterns
      884:  306:  patterns.add<Log1pOpPattern<spirv::CLLogOp>, ExpM1OpPattern<spirv::CLExpOp>,
        -:  307:               spirv::ElementwiseOpPattern<math::AbsFOp, spirv::CLFAbsOp>,
        -:  308:               spirv::ElementwiseOpPattern<math::CeilOp, spirv::CLCeilOp>,
        -:  309:               spirv::ElementwiseOpPattern<math::CosOp, spirv::CLCosOp>,
        -:  310:               spirv::ElementwiseOpPattern<math::ErfOp, spirv::CLErfOp>,
        -:  311:               spirv::ElementwiseOpPattern<math::ExpOp, spirv::CLExpOp>,
        -:  312:               spirv::ElementwiseOpPattern<math::FloorOp, spirv::CLFloorOp>,
        -:  313:               spirv::ElementwiseOpPattern<math::FmaOp, spirv::CLFmaOp>,
        -:  314:               spirv::ElementwiseOpPattern<math::LogOp, spirv::CLLogOp>,
        -:  315:               spirv::ElementwiseOpPattern<math::PowFOp, spirv::CLPowOp>,
        -:  316:               spirv::ElementwiseOpPattern<math::RoundEvenOp, spirv::CLRintOp>,
        -:  317:               spirv::ElementwiseOpPattern<math::RoundOp, spirv::CLRoundOp>,
        -:  318:               spirv::ElementwiseOpPattern<math::RsqrtOp, spirv::CLRsqrtOp>,
        -:  319:               spirv::ElementwiseOpPattern<math::SinOp, spirv::CLSinOp>,
        -:  320:               spirv::ElementwiseOpPattern<math::SqrtOp, spirv::CLSqrtOp>,
        -:  321:               spirv::ElementwiseOpPattern<math::TanhOp, spirv::CLTanhOp>>(
      884:  322:      typeConverter, patterns.getContext());
call    0 returned 100%
      884:  323:}
        -:  324:
        -:  325:} // namespace mlir
