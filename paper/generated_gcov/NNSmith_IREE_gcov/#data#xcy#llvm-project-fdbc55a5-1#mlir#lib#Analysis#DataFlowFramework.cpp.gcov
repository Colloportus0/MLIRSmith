        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Analysis/DataFlowFramework.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlowFramework.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlowFramework.cpp.gcda
        -:    0:Runs:325563
        -:    1://===- DataFlowFramework.cpp - A generic framework for data-flow analysis -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlowFramework.h"
        -:   10:#include "llvm/Support/Debug.h"
        -:   11:
        -:   12:#define DEBUG_TYPE "dataflow"
        -:   13:#if LLVM_ENABLE_ABI_BREAKING_CHECKS
        -:   14:#define DATAFLOW_DEBUG(X) LLVM_DEBUG(X)
        -:   15:#else
        -:   16:#define DATAFLOW_DEBUG(X)
        -:   17:#endif // LLVM_ENABLE_ABI_BREAKING_CHECKS
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21://===----------------------------------------------------------------------===//
        -:   22:// GenericProgramPoint
        -:   23://===----------------------------------------------------------------------===//
        -:   24:
        -:   25:GenericProgramPoint::~GenericProgramPoint() = default;
        -:   26:
        -:   27://===----------------------------------------------------------------------===//
        -:   28:// AnalysisState
        -:   29://===----------------------------------------------------------------------===//
        -:   30:
        -:   31:AnalysisState::~AnalysisState() = default;
        -:   32:
        -:   33://===----------------------------------------------------------------------===//
        -:   34:// ProgramPoint
        -:   35://===----------------------------------------------------------------------===//
        -:   36:
function _ZNK4mlir12ProgramPoint5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   37:void ProgramPoint::print(raw_ostream &os) const {
    #####:   38:  if (isNull()) {
branch  0 never executed
branch  1 never executed
    #####:   39:    os << "<NULL POINT>";
    #####:   40:    return;
call    0 never executed
        -:   41:  }
    #####:   42:  if (auto *programPoint = dyn_cast<GenericProgramPoint *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:    return programPoint->print(os);
call    0 never executed
    #####:   44:  if (auto *op = dyn_cast<Operation *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:    return op->print(os);
call    0 never executed
call    1 never executed
    #####:   46:  if (auto value = dyn_cast<Value>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   47:    return value.print(os);
call    0 never executed
    #####:   48:  return get<Block *>()->print(os);
call    0 never executed
call    1 never executed
        -:   49:}
        -:   50:
function _ZNK4mlir12ProgramPoint6getLocEv called 0 returned 0% blocks executed 0%
    #####:   51:Location ProgramPoint::getLoc() const {
    #####:   52:  if (auto *programPoint = dyn_cast<GenericProgramPoint *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:    return programPoint->getLoc();
call    0 never executed
    #####:   54:  if (auto *op = dyn_cast<Operation *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:    return op->getLoc();
    #####:   56:  if (auto value = dyn_cast<Value>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   57:    return value.getLoc();
call    0 never executed
    #####:   58:  return get<Block *>()->getParent()->getLoc();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   59:}
        -:   60:
        -:   61://===----------------------------------------------------------------------===//
        -:   62:// DataFlowSolver
        -:   63://===----------------------------------------------------------------------===//
        -:   64:
function _ZN4mlir14DataFlowSolver16initializeAndRunEPNS_9OperationE called 5134 returned 100% blocks executed 48%
     5134:   65:LogicalResult DataFlowSolver::initializeAndRun(Operation *top) {
        -:   66:  // Initialize the analyses.
    16340:   67:  for (DataFlowAnalysis &analysis : llvm::make_pointee_range(childAnalyses)) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   11206*:   68:    DATAFLOW_DEBUG(llvm::dbgs()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:   69:                   << "Priming analysis: " << analysis.debugName << "\n");
    11206:   70:    if (failed(analysis.initialize(top)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   71:      return failure();
        -:   72:  }
        -:   73:
        -:   74:  // Run the analysis until fixpoint.
     5135:   75:  do {
        -:   76:    // Exhaust the worklist.
     5135:   77:    while (!worklist.empty()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        1:   78:      auto [point, analysis] = worklist.front();
call    0 returned 100%
        1:   79:      worklist.pop();
call    0 returned 100%
        -:   80:
       1*:   81:      DATAFLOW_DEBUG(llvm::dbgs() << "Invoking '" << analysis->debugName
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:   82:                                  << "' on: " << point << "\n");
        1:   83:      if (failed(analysis->visit(point)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   84:        return failure();
        -:   85:    }
        -:   86:
        -:   87:    // Iterate until all states are in some initialized state and the worklist
        -:   88:    // is exhausted.
     5134:   89:  } while (!worklist.empty());
        -:   90:
     5134:   91:  return success();
        -:   92:}
        -:   93:
function _ZN4mlir14DataFlowSolver18propagateIfChangedEPNS_13AnalysisStateENS_12ChangeResultE called 117500 returned 100% blocks executed 42%
   117500:   94:void DataFlowSolver::propagateIfChanged(AnalysisState *state,
        -:   95:                                        ChangeResult changed) {
   117500:   96:  if (changed == ChangeResult::Change) {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
  104789*:   97:    DATAFLOW_DEBUG(llvm::dbgs() << "Propagating update to " << state->debugName
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:   98:                                << " of " << state->point << "\n"
        -:   99:                                << "Value: " << *state << "\n");
   104790:  100:    for (const WorkItem &item : state->dependents)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        1:  101:      enqueue(item);
call    0 returned 100%
   104789:  102:    state->onUpdate(this);
call    0 returned 100%
        -:  103:  }
   117500:  104:}
        -:  105:
function _ZN4mlir14DataFlowSolver13addDependencyEPNS_13AnalysisStateEPNS_16DataFlowAnalysisENS_12ProgramPointE called 47993 returned 100% blocks executed 19%
    47993:  106:void DataFlowSolver::addDependency(AnalysisState *state,
        -:  107:                                   DataFlowAnalysis *analysis,
        -:  108:                                   ProgramPoint point) {
    47993:  109:  auto inserted = state->dependents.insert({point, analysis});
call    0 returned 100%
    47993:  110:  (void)inserted;
   47993*:  111:  DATAFLOW_DEBUG({
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  112:    if (inserted) {
        -:  113:      llvm::dbgs() << "Creating dependency between " << state->debugName
        -:  114:                   << " of " << state->point << "\nand " << analysis->debugName
        -:  115:                   << " on " << point << "\n";
        -:  116:    }
        -:  117:  });
    47993:  118:}
        -:  119:
        -:  120://===----------------------------------------------------------------------===//
        -:  121:// DataFlowAnalysis
        -:  122://===----------------------------------------------------------------------===//
        -:  123:
        -:  124:DataFlowAnalysis::~DataFlowAnalysis() = default;
        -:  125:
function _ZN4mlir16DataFlowAnalysisC2ERNS_14DataFlowSolverE called 11206 returned 100% blocks executed 100%
    11206:  126:DataFlowAnalysis::DataFlowAnalysis(DataFlowSolver &solver) : solver(solver) {}
        -:  127:
function _ZN4mlir16DataFlowAnalysis13addDependencyEPNS_13AnalysisStateENS_12ProgramPointE called 47993 returned 100% blocks executed 100%
    47993:  128:void DataFlowAnalysis::addDependency(AnalysisState *state, ProgramPoint point) {
    47993:  129:  solver.addDependency(state, this, point);
call    0 returned 100%
    47993:  130:}
        -:  131:
function _ZN4mlir16DataFlowAnalysis18propagateIfChangedEPNS_13AnalysisStateENS_12ChangeResultE called 97364 returned 100% blocks executed 100%
    97364:  132:void DataFlowAnalysis::propagateIfChanged(AnalysisState *state,
        -:  133:                                          ChangeResult changed) {
    97364:  134:  solver.propagateIfChanged(state, changed);
call    0 returned 100%
    97364:  135:}
