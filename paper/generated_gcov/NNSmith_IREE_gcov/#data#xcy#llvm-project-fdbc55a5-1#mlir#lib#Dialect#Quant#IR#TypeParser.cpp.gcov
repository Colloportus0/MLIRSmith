        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Quant/IR/TypeParser.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Quant/IR/CMakeFiles/obj.MLIRQuantDialect.dir/TypeParser.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Quant/IR/CMakeFiles/obj.MLIRQuantDialect.dir/TypeParser.cpp.gcda
        -:    0:Runs:325550
        -:    1://===- TypeParser.h - Quantization Type Parser ------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Quant/QuantOps.h"
        -:   10:#include "mlir/Dialect/Quant/QuantTypes.h"
        -:   11:#include "mlir/IR/BuiltinTypes.h"
        -:   12:#include "mlir/IR/DialectImplementation.h"
        -:   13:#include "mlir/IR/Location.h"
        -:   14:#include "mlir/IR/Types.h"
        -:   15:#include "llvm/ADT/APFloat.h"
        -:   16:#include "llvm/Support/Format.h"
        -:   17:#include "llvm/Support/MathExtras.h"
        -:   18:#include "llvm/Support/SourceMgr.h"
        -:   19:#include "llvm/Support/raw_ostream.h"
        -:   20:
        -:   21:using namespace mlir;
        -:   22:using namespace quant;
        -:   23:
function _ZL16parseStorageTypeRN4mlir16DialectAsmParserERb called 0 returned 0% blocks executed 0%
    #####:   24:static IntegerType parseStorageType(DialectAsmParser &parser, bool &isSigned) {
    #####:   25:  auto typeLoc = parser.getCurrentLocation();
call    0 never executed
    #####:   26:  IntegerType type;
        -:   27:
        -:   28:  // Parse storage type (alpha_ident, integer_literal).
    #####:   29:  StringRef identifier;
    #####:   30:  unsigned storageTypeWidth = 0;
    #####:   31:  OptionalParseResult result = parser.parseOptionalType(type);
call    0 never executed
    #####:   32:  if (result.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:   33:    if (!succeeded(*result))
branch  0 never executed
branch  1 never executed
    #####:   34:      return nullptr;
    #####:   35:    isSigned = !type.isUnsigned();
call    0 never executed
    #####:   36:    storageTypeWidth = type.getWidth();
call    0 never executed
    #####:   37:  } else if (succeeded(parser.parseKeyword(&identifier))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   38:    // Otherwise, this must be an unsigned integer (`u` integer-literal).
    #####:   39:    if (!identifier.consume_front("u")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:      parser.emitError(typeLoc, "illegal storage type prefix");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   41:      return nullptr;
        -:   42:    }
    #####:   43:    if (identifier.getAsInteger(10, storageTypeWidth)) {
call    0 never executed
    #####:   44:      parser.emitError(typeLoc, "expected storage type width");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   45:      return nullptr;
        -:   46:    }
    #####:   47:    isSigned = false;
    #####:   48:    type = parser.getBuilder().getIntegerType(storageTypeWidth);
call    0 never executed
call    1 never executed
        -:   49:  } else {
    #####:   50:    return nullptr;
        -:   51:  }
        -:   52:
    #####:   53:  if (storageTypeWidth == 0 ||
branch  0 never executed
branch  1 never executed
        -:   54:      storageTypeWidth > QuantizedType::MaxStorageBits) {
    #####:   55:    parser.emitError(typeLoc, "illegal storage type size: ")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   56:        << storageTypeWidth;
call    0 never executed
    #####:   57:    return nullptr;
        -:   58:  }
        -:   59:
    #####:   60:  return type;
        -:   61:}
        -:   62:
function _ZL17parseStorageRangeRN4mlir16DialectAsmParserENS_11IntegerTypeEbRlS3_ called 0 returned 0% blocks executed 0%
    #####:   63:static ParseResult parseStorageRange(DialectAsmParser &parser,
        -:   64:                                     IntegerType storageType, bool isSigned,
        -:   65:                                     int64_t &storageTypeMin,
        -:   66:                                     int64_t &storageTypeMax) {
    #####:   67:  int64_t defaultIntegerMin = QuantizedType::getDefaultMinimumForInteger(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   68:      isSigned, storageType.getWidth());
    #####:   69:  int64_t defaultIntegerMax = QuantizedType::getDefaultMaximumForInteger(
call    0 never executed
call    1 never executed
        -:   70:      isSigned, storageType.getWidth());
    #####:   71:  if (failed(parser.parseOptionalLess())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:    storageTypeMin = defaultIntegerMin;
    #####:   73:    storageTypeMax = defaultIntegerMax;
    #####:   74:    return success();
        -:   75:  }
        -:   76:
        -:   77:  // Explicit storage min and storage max.
    #####:   78:  SMLoc minLoc = parser.getCurrentLocation(), maxLoc;
call    0 never executed
    #####:   79:  if (parser.parseInteger(storageTypeMin) || parser.parseColon() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   80:      parser.getCurrentLocation(&maxLoc) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   81:      parser.parseInteger(storageTypeMax) || parser.parseGreater())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:   82:    return failure();
    #####:   83:  if (storageTypeMin < defaultIntegerMin) {
branch  0 never executed
branch  1 never executed
    #####:   84:    return parser.emitError(minLoc, "illegal storage type minimum: ")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   85:           << storageTypeMin;
call    0 never executed
call    1 never executed
        -:   86:  }
    #####:   87:  if (storageTypeMax > defaultIntegerMax) {
branch  0 never executed
branch  1 never executed
    #####:   88:    return parser.emitError(maxLoc, "illegal storage type maximum: ")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   89:           << storageTypeMax;
call    0 never executed
call    1 never executed
        -:   90:  }
    #####:   91:  return success();
        -:   92:}
        -:   93:
function _ZL26parseExpressedTypeAndRangeRN4mlir16DialectAsmParserERdS2_ called 0 returned 0% blocks executed 0%
    #####:   94:static FloatType parseExpressedTypeAndRange(DialectAsmParser &parser,
        -:   95:                                            double &min, double &max) {
    #####:   96:  auto typeLoc = parser.getCurrentLocation();
call    0 never executed
    #####:   97:  FloatType type;
        -:   98:
    #####:   99:  if (failed(parser.parseType(type))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  100:    parser.emitError(typeLoc, "expecting float expressed type");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  101:    return nullptr;
        -:  102:  }
        -:  103:
        -:  104:  // Calibrated min and max values.
    #####:  105:  if (parser.parseLess() || parser.parseFloat(min) || parser.parseColon() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  106:      parser.parseFloat(max) || parser.parseGreater()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  107:    parser.emitError(typeLoc, "calibrated values must be present");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  108:    return nullptr;
        -:  109:  }
    #####:  110:  return type;
        -:  111:}
        -:  112:
        -:  113:/// Parses an AnyQuantizedType.
        -:  114:///
        -:  115:///   any ::= `any<` storage-spec (expressed-type-spec)?`>`
        -:  116:///   storage-spec ::= storage-type (`<` storage-range `>`)?
        -:  117:///   storage-range ::= integer-literal `:` integer-literal
        -:  118:///   storage-type ::= (`i` | `u`) integer-literal
        -:  119:///   expressed-type-spec ::= `:` `f` integer-literal
function _ZL12parseAnyTypeRN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  120:static Type parseAnyType(DialectAsmParser &parser) {
    #####:  121:  IntegerType storageType;
    #####:  122:  FloatType expressedType;
    #####:  123:  unsigned typeFlags = 0;
    #####:  124:  int64_t storageTypeMin;
    #####:  125:  int64_t storageTypeMax;
        -:  126:
        -:  127:  // Type specification.
    #####:  128:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:    return nullptr;
        -:  130:
        -:  131:  // Storage type.
    #####:  132:  bool isSigned = false;
    #####:  133:  storageType = parseStorageType(parser, isSigned);
call    0 never executed
    #####:  134:  if (!storageType) {
branch  0 never executed
branch  1 never executed
    #####:  135:    return nullptr;
        -:  136:  }
    #####:  137:  if (isSigned) {
branch  0 never executed
branch  1 never executed
    #####:  138:    typeFlags |= QuantizationFlags::Signed;
        -:  139:  }
        -:  140:
        -:  141:  // Storage type range.
    #####:  142:  if (parseStorageRange(parser, storageType, isSigned, storageTypeMin,
branch  0 never executed
branch  1 never executed
    #####:  143:                        storageTypeMax)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:    return nullptr;
        -:  145:  }
        -:  146:
        -:  147:  // Optional expressed type.
    #####:  148:  if (succeeded(parser.parseOptionalColon())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:    if (parser.parseType(expressedType)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  150:      return nullptr;
        -:  151:    }
        -:  152:  }
        -:  153:
    #####:  154:  if (parser.parseGreater()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  155:    return nullptr;
        -:  156:  }
        -:  157:
    #####:  158:  return parser.getChecked<AnyQuantizedType>(
    #####:  159:      typeFlags, storageType, expressedType, storageTypeMin, storageTypeMax);
call    0 never executed
        -:  160:}
        -:  161:
function _ZL16parseQuantParamsRN4mlir16DialectAsmParserERdRl called 0 returned 0% blocks executed 0%
    #####:  162:static ParseResult parseQuantParams(DialectAsmParser &parser, double &scale,
        -:  163:                                    int64_t &zeroPoint) {
        -:  164:  // scale[:zeroPoint]?
        -:  165:  // scale.
    #####:  166:  if (parser.parseFloat(scale))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  167:    return failure();
        -:  168:
        -:  169:  // zero point.
    #####:  170:  zeroPoint = 0;
    #####:  171:  if (failed(parser.parseOptionalColon())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  172:    // Default zero point.
    #####:  173:    return success();
        -:  174:  }
        -:  175:
    #####:  176:  return parser.parseInteger(zeroPoint);
call    0 never executed
        -:  177:}
        -:  178:
        -:  179:/// Parses a UniformQuantizedType.
        -:  180:///
        -:  181:///   uniform_type ::= uniform_per_layer
        -:  182:///                  | uniform_per_axis
        -:  183:///   uniform_per_layer ::= `uniform<` storage-spec expressed-type-spec
        -:  184:///                          `,` scale-zero `>`
        -:  185:///   uniform_per_axis ::= `uniform<` storage-spec expressed-type-spec
        -:  186:///                        axis-spec `,` scale-zero-list `>`
        -:  187:///   storage-spec ::= storage-type (`<` storage-range `>`)?
        -:  188:///   storage-range ::= integer-literal `:` integer-literal
        -:  189:///   storage-type ::= (`i` | `u`) integer-literal
        -:  190:///   expressed-type-spec ::= `:` `f` integer-literal
        -:  191:///   axis-spec ::= `:` integer-literal
        -:  192:///   scale-zero ::= float-literal `:` integer-literal
        -:  193:///   scale-zero-list ::= `{` scale-zero (`,` scale-zero)* `}`
function _ZL16parseUniformTypeRN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  194:static Type parseUniformType(DialectAsmParser &parser) {
    #####:  195:  IntegerType storageType;
    #####:  196:  FloatType expressedType;
    #####:  197:  unsigned typeFlags = 0;
    #####:  198:  int64_t storageTypeMin;
    #####:  199:  int64_t storageTypeMax;
    #####:  200:  bool isPerAxis = false;
    #####:  201:  int32_t quantizedDimension;
    #####:  202:  SmallVector<double, 1> scales;
call    0 never executed
    #####:  203:  SmallVector<int64_t, 1> zeroPoints;
branch  0 never executed
branch  1 never executed
        -:  204:
        -:  205:  // Type specification.
    #####:  206:  if (parser.parseLess()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:    return nullptr;
        -:  208:  }
        -:  209:
        -:  210:  // Storage type.
    #####:  211:  bool isSigned = false;
    #####:  212:  storageType = parseStorageType(parser, isSigned);
call    0 never executed
    #####:  213:  if (!storageType) {
branch  0 never executed
branch  1 never executed
    #####:  214:    return nullptr;
        -:  215:  }
    #####:  216:  if (isSigned) {
branch  0 never executed
branch  1 never executed
    #####:  217:    typeFlags |= QuantizationFlags::Signed;
        -:  218:  }
        -:  219:
        -:  220:  // Storage type range.
    #####:  221:  if (parseStorageRange(parser, storageType, isSigned, storageTypeMin,
branch  0 never executed
branch  1 never executed
    #####:  222:                        storageTypeMax)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  223:    return nullptr;
        -:  224:  }
        -:  225:
        -:  226:  // Expressed type.
    #####:  227:  if (parser.parseColon() || parser.parseType(expressedType)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  228:    return nullptr;
        -:  229:  }
        -:  230:
        -:  231:  // Optionally parse quantized dimension for per-axis quantization.
    #####:  232:  if (succeeded(parser.parseOptionalColon())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  233:    if (parser.parseInteger(quantizedDimension))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:      return nullptr;
        -:  235:    isPerAxis = true;
        -:  236:  }
        -:  237:
        -:  238:  // Comma leading into range_spec.
    #####:  239:  if (parser.parseComma()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  240:    return nullptr;
        -:  241:  }
        -:  242:
        -:  243:  // Parameter specification.
        -:  244:  // For per-axis, ranges are in a {} delimitted list.
    #####:  245:  if (isPerAxis) {
branch  0 never executed
branch  1 never executed
    #####:  246:    if (parser.parseLBrace()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  247:      return nullptr;
        -:  248:    }
        -:  249:  }
        -:  250:
        -:  251:  // Parse scales/zeroPoints.
    #####:  252:  SMLoc scaleZPLoc = parser.getCurrentLocation();
call    0 never executed
    #####:  253:  do {
    #####:  254:    scales.resize(scales.size() + 1);
call    0 never executed
    #####:  255:    zeroPoints.resize(zeroPoints.size() + 1);
call    0 never executed
    #####:  256:    if (parseQuantParams(parser, scales.back(), zeroPoints.back())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  257:      return nullptr;
        -:  258:    }
    #####:  259:  } while (isPerAxis && succeeded(parser.parseOptionalComma()));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  260:
    #####:  261:  if (isPerAxis) {
branch  0 never executed
branch  1 never executed
    #####:  262:    if (parser.parseRBrace()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  263:      return nullptr;
        -:  264:    }
        -:  265:  }
        -:  266:
    #####:  267:  if (parser.parseGreater()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  268:    return nullptr;
        -:  269:  }
        -:  270:
    #####:  271:  if (!isPerAxis && scales.size() > 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  272:    return (parser.emitError(scaleZPLoc,
        -:  273:                             "multiple scales/zeroPoints provided, but "
    #####:  274:                             "quantizedDimension wasn't specified"),
    #####:  275:            nullptr);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  276:  }
        -:  277:
    #####:  278:  if (isPerAxis) {
branch  0 never executed
branch  1 never executed
    #####:  279:    ArrayRef<double> scalesRef(scales.begin(), scales.end());
call    0 never executed
    #####:  280:    ArrayRef<int64_t> zeroPointsRef(zeroPoints.begin(), zeroPoints.end());
    #####:  281:    return parser.getChecked<UniformQuantizedPerAxisType>(
        -:  282:        typeFlags, storageType, expressedType, scalesRef, zeroPointsRef,
    #####:  283:        quantizedDimension, storageTypeMin, storageTypeMax);
call    0 never executed
        -:  284:  }
        -:  285:
    #####:  286:  return parser.getChecked<UniformQuantizedType>(
    #####:  287:      typeFlags, storageType, expressedType, scales.front(), zeroPoints.front(),
branch  0 never executed
branch  1 never executed
    #####:  288:      storageTypeMin, storageTypeMax);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  289:}
        -:  290:
        -:  291:/// Parses an CalibratedQuantizedType.
        -:  292:///
        -:  293:///   calibrated ::= `calibrated<` expressed-spec `>`
        -:  294:///   expressed-spec ::= expressed-type `<` calibrated-range `>`
        -:  295:///   expressed-type ::= `f` integer-literal
        -:  296:///   calibrated-range ::= float-literal `:` float-literal
function _ZL19parseCalibratedTypeRN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  297:static Type parseCalibratedType(DialectAsmParser &parser) {
    #####:  298:  FloatType expressedType;
    #####:  299:  double min;
    #####:  300:  double max;
        -:  301:
        -:  302:  // Type specification.
    #####:  303:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  304:    return nullptr;
        -:  305:
        -:  306:  // Expressed type.
    #####:  307:  expressedType = parseExpressedTypeAndRange(parser, min, max);
call    0 never executed
    #####:  308:  if (!expressedType) {
branch  0 never executed
branch  1 never executed
    #####:  309:    return nullptr;
        -:  310:  }
        -:  311:
    #####:  312:  if (parser.parseGreater()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  313:    return nullptr;
        -:  314:  }
        -:  315:
    #####:  316:  return parser.getChecked<CalibratedQuantizedType>(expressedType, min, max);
call    0 never executed
        -:  317:}
        -:  318:
        -:  319:/// Parse a type registered to this dialect.
function _ZNK4mlir5quant19QuantizationDialect9parseTypeERNS_16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  320:Type QuantizationDialect::parseType(DialectAsmParser &parser) const {
        -:  321:  // All types start with an identifier that we switch on.
    #####:  322:  StringRef typeNameSpelling;
    #####:  323:  if (failed(parser.parseKeyword(&typeNameSpelling)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  324:    return nullptr;
        -:  325:
    #####:  326:  if (typeNameSpelling == "uniform")
branch  0 never executed
branch  1 never executed
    #####:  327:    return parseUniformType(parser);
call    0 never executed
    #####:  328:  if (typeNameSpelling == "any")
branch  0 never executed
branch  1 never executed
    #####:  329:    return parseAnyType(parser);
call    0 never executed
    #####:  330:  if (typeNameSpelling == "calibrated")
branch  0 never executed
branch  1 never executed
    #####:  331:    return parseCalibratedType(parser);
call    0 never executed
        -:  332:
    #####:  333:  parser.emitError(parser.getNameLoc(),
call    0 never executed
call    1 never executed
    #####:  334:                   "unknown quantized type " + typeNameSpelling);
call    0 never executed
call    1 never executed
    #####:  335:  return nullptr;
        -:  336:}
        -:  337:
function _ZL16printStorageTypeN4mlir5quant13QuantizedTypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  338:static void printStorageType(QuantizedType type, DialectAsmPrinter &out) {
        -:  339:  // storage type
    #####:  340:  unsigned storageWidth = type.getStorageTypeIntegralWidth();
call    0 never executed
    #####:  341:  bool isSigned = type.isSigned();
call    0 never executed
    #####:  342:  if (isSigned) {
branch  0 never executed
branch  1 never executed
    #####:  343:    out << "i" << storageWidth;
call    0 never executed
call    1 never executed
        -:  344:  } else {
    #####:  345:    out << "u" << storageWidth;
call    0 never executed
call    1 never executed
        -:  346:  }
        -:  347:
        -:  348:  // storageTypeMin and storageTypeMax if not default.
    #####:  349:  int64_t defaultIntegerMin =
    #####:  350:      QuantizedType::getDefaultMinimumForInteger(isSigned, storageWidth);
branch  0 never executed
branch  1 never executed
    #####:  351:  int64_t defaultIntegerMax =
    #####:  352:      QuantizedType::getDefaultMaximumForInteger(isSigned, storageWidth);
call    0 never executed
    #####:  353:  if (defaultIntegerMin != type.getStorageTypeMin() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  354:      defaultIntegerMax != type.getStorageTypeMax()) {
call    0 never executed
    #####:  355:    out << "<" << type.getStorageTypeMin() << ":" << type.getStorageTypeMax()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  356:        << ">";
call    0 never executed
        -:  357:  }
    #####:  358:}
        -:  359:
function _ZL16printQuantParamsdlRN4mlir17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  360:static void printQuantParams(double scale, int64_t zeroPoint,
        -:  361:                             DialectAsmPrinter &out) {
    #####:  362:  out << scale;
call    0 never executed
    #####:  363:  if (zeroPoint != 0) {
branch  0 never executed
branch  1 never executed
    #####:  364:    out << ":" << zeroPoint;
call    0 never executed
call    1 never executed
        -:  365:  }
    #####:  366:}
        -:  367:
        -:  368:/// Helper that prints a AnyQuantizedType.
function _ZL21printAnyQuantizedTypeN4mlir5quant16AnyQuantizedTypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  369:static void printAnyQuantizedType(AnyQuantizedType type,
        -:  370:                                  DialectAsmPrinter &out) {
    #####:  371:  out << "any<";
call    0 never executed
    #####:  372:  printStorageType(type, out);
call    0 never executed
    #####:  373:  if (Type expressedType = type.getExpressedType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  374:    out << ":" << expressedType;
call    0 never executed
call    1 never executed
        -:  375:  }
    #####:  376:  out << ">";
call    0 never executed
    #####:  377:}
        -:  378:
        -:  379:/// Helper that prints a UniformQuantizedType.
function _ZL25printUniformQuantizedTypeN4mlir5quant20UniformQuantizedTypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  380:static void printUniformQuantizedType(UniformQuantizedType type,
        -:  381:                                      DialectAsmPrinter &out) {
    #####:  382:  out << "uniform<";
call    0 never executed
    #####:  383:  printStorageType(type, out);
call    0 never executed
    #####:  384:  out << ":" << type.getExpressedType() << ", ";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  385:
        -:  386:  // scheme specific parameters
    #####:  387:  printQuantParams(type.getScale(), type.getZeroPoint(), out);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  388:  out << ">";
call    0 never executed
    #####:  389:}
        -:  390:
        -:  391:/// Helper that prints a UniformQuantizedPerAxisType.
function _ZL32printUniformQuantizedPerAxisTypeN4mlir5quant27UniformQuantizedPerAxisTypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  392:static void printUniformQuantizedPerAxisType(UniformQuantizedPerAxisType type,
        -:  393:                                             DialectAsmPrinter &out) {
    #####:  394:  out << "uniform<";
call    0 never executed
    #####:  395:  printStorageType(type, out);
call    0 never executed
    #####:  396:  out << ":" << type.getExpressedType() << ":";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  397:  out << type.getQuantizedDimension();
call    0 never executed
call    1 never executed
    #####:  398:  out << ", ";
call    0 never executed
        -:  399:
        -:  400:  // scheme specific parameters
    #####:  401:  ArrayRef<double> scales = type.getScales();
call    0 never executed
    #####:  402:  ArrayRef<int64_t> zeroPoints = type.getZeroPoints();
call    0 never executed
    #####:  403:  out << "{";
call    0 never executed
    #####:  404:  llvm::interleave(
call    0 never executed
    #####:  405:      llvm::seq<size_t>(0, scales.size()), out,
call    0 never executed
call    1 never executed
function _ZZL32printUniformQuantizedPerAxisTypeN4mlir5quant27UniformQuantizedPerAxisTypeERNS_17DialectAsmPrinterEENKUlmE_clEm called 0 returned 0% blocks executed 0%
    #####:  406:      [&](size_t index) {
    #####:  407:        printQuantParams(scales[index], zeroPoints[index], out);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  408:      },
        -:  409:      ",");
    #####:  410:  out << "}>";
call    0 never executed
    #####:  411:}
        -:  412:
        -:  413:/// Helper that prints a CalibratedQuantizedType.
function _ZL28printCalibratedQuantizedTypeN4mlir5quant23CalibratedQuantizedTypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  414:static void printCalibratedQuantizedType(CalibratedQuantizedType type,
        -:  415:                                         DialectAsmPrinter &out) {
    #####:  416:  out << "calibrated<" << type.getExpressedType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  417:  out << "<" << type.getMin() << ":" << type.getMax() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  418:  out << ">";
call    0 never executed
    #####:  419:}
        -:  420:
        -:  421:/// Print a type registered to this dialect.
function _ZNK4mlir5quant19QuantizationDialect9printTypeENS_4TypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  422:void QuantizationDialect::printType(Type type, DialectAsmPrinter &os) const {
    #####:  423:  if (auto anyType = type.dyn_cast<AnyQuantizedType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  424:    printAnyQuantizedType(anyType, os);
call    0 never executed
    #####:  425:  else if (auto uniformType = type.dyn_cast<UniformQuantizedType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  426:    printUniformQuantizedType(uniformType, os);
call    0 never executed
    #####:  427:  else if (auto perAxisType = type.dyn_cast<UniformQuantizedPerAxisType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  428:    printUniformQuantizedPerAxisType(perAxisType, os);
call    0 never executed
    #####:  429:  else if (auto calibratedType = type.dyn_cast<CalibratedQuantizedType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  430:    printCalibratedQuantizedType(calibratedType, os);
call    0 never executed
        -:  431:  else
    #####:  432:    llvm_unreachable("Unhandled quantized type");
call    0 never executed
    #####:  433:}
