        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Utils/StaticValueUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Utils/CMakeFiles/obj.MLIRDialectUtils.dir/StaticValueUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Utils/CMakeFiles/obj.MLIRDialectUtils.dir/StaticValueUtils.cpp.gcda
        -:    0:Runs:325595
        -:    1://===- StaticValueUtils.cpp - Utilities for dealing with static values ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Utils/StaticValueUtils.h"
        -:   10:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   11:#include "mlir/IR/Matchers.h"
        -:   12:#include "mlir/Support/LLVM.h"
        -:   13:#include "llvm/ADT/APSInt.h"
        -:   14:
        -:   15:namespace mlir {
        -:   16:
        -:   17:std::tuple<SmallVector<OpFoldResult>, SmallVector<OpFoldResult>,
        -:   18:           SmallVector<OpFoldResult>>
function _ZN4mlir25getOffsetsSizesAndStridesEN4llvm8ArrayRefINS_5RangeEEE called 0 returned 0% blocks executed 0%
    #####:   19:getOffsetsSizesAndStrides(ArrayRef<Range> ranges) {
    #####:   20:  SmallVector<OpFoldResult> offsets, sizes, strides;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   21:  offsets.reserve(ranges.size());
branch  0 never executed
branch  1 never executed
    #####:   22:  sizes.reserve(ranges.size());
branch  0 never executed
branch  1 never executed
    #####:   23:  strides.reserve(ranges.size());
branch  0 never executed
branch  1 never executed
    #####:   24:  for (const auto &[offset, size, stride] : ranges) {
branch  0 never executed
branch  1 never executed
    #####:   25:    offsets.push_back(offset);
call    0 never executed
    #####:   26:    sizes.push_back(size);
call    0 never executed
    #####:   27:    strides.push_back(stride);
call    0 never executed
        -:   28:  }
    #####:   29:  return std::make_tuple(offsets, sizes, strides);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   30:}
        -:   31:
        -:   32:/// Helper function to dispatch an OpFoldResult into `staticVec` if:
        -:   33:///   a) it is an IntegerAttr
        -:   34:/// In other cases, the OpFoldResult is dispached to the `dynamicVec`.
        -:   35:/// In such dynamic cases, a copy of the `sentinel` value is also pushed to
        -:   36:/// `staticVec`. This is useful to extract mixed static and dynamic entries that
        -:   37:/// come from an AttrSizedOperandSegments trait.
function _ZN4mlir25dispatchIndexOpFoldResultENS_12OpFoldResultERN4llvm15SmallVectorImplINS_5ValueEEERNS2_IlEEl called 0 returned 0% blocks executed 0%
    #####:   38:void dispatchIndexOpFoldResult(OpFoldResult ofr,
        -:   39:                               SmallVectorImpl<Value> &dynamicVec,
        -:   40:                               SmallVectorImpl<int64_t> &staticVec,
        -:   41:                               int64_t sentinel) {
    #####:   42:  auto v = ofr.dyn_cast<Value>();
branch  0 never executed
branch  1 never executed
    #####:   43:  if (!v) {
branch  0 never executed
branch  1 never executed
    #####:   44:    APInt apInt = ofr.get<Attribute>().cast<IntegerAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   45:    staticVec.push_back(apInt.getSExtValue());
call    0 never executed
call    1 never executed
    #####:   46:    return;
branch  0 never executed
branch  1 never executed
        -:   47:  }
    #####:   48:  dynamicVec.push_back(v);
call    0 never executed
    #####:   49:  staticVec.push_back(sentinel);
call    0 never executed
        -:   50:}
        -:   51:
function _ZN4mlir26dispatchIndexOpFoldResultsEN4llvm8ArrayRefINS_12OpFoldResultEEERNS0_15SmallVectorImplINS_5ValueEEERNS4_IlEEl called 0 returned 0% blocks executed 0%
    #####:   52:void dispatchIndexOpFoldResults(ArrayRef<OpFoldResult> ofrs,
        -:   53:                                SmallVectorImpl<Value> &dynamicVec,
        -:   54:                                SmallVectorImpl<int64_t> &staticVec,
        -:   55:                                int64_t sentinel) {
    #####:   56:  for (OpFoldResult ofr : ofrs)
branch  0 never executed
branch  1 never executed
    #####:   57:    dispatchIndexOpFoldResult(ofr, dynamicVec, staticVec, sentinel);
call    0 never executed
    #####:   58:}
        -:   59:
        -:   60:/// Extract int64_t values from the assumed ArrayAttr of IntegerAttr.
function _ZN4mlir23extractFromI64ArrayAttrENS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   61:SmallVector<int64_t, 4> extractFromI64ArrayAttr(Attribute attr) {
    #####:   62:  return llvm::to_vector<4>(
call    0 never executed
function _ZZN4mlir23extractFromI64ArrayAttrENS_9AttributeEENKUlS0_E_clES0_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   63:      llvm::map_range(attr.cast<ArrayAttr>(), [](Attribute a) -> int64_t {
    #####:   64:        return a.cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
    #####:   65:      }));
call    0 never executed
call    1 never executed
        -:   66:}
        -:   67:
        -:   68:/// Given a value, try to extract a constant Attribute. If this fails, return
        -:   69:/// the original value.
function _ZN4mlir17getAsOpFoldResultENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   70:OpFoldResult getAsOpFoldResult(Value val) {
    #####:   71:  if (!val)
branch  0 never executed
branch  1 never executed
    #####:   72:    return OpFoldResult();
    #####:   73:  Attribute attr;
    #####:   74:  if (matchPattern(val, m_Constant(&attr)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:    return attr;
call    0 never executed
    #####:   76:  return val;
call    0 never executed
        -:   77:}
        -:   78:
        -:   79:/// Given an array of values, try to extract a constant Attribute from each
        -:   80:/// value. If this fails, return the original value.
function _ZN4mlir17getAsOpFoldResultENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:   81:SmallVector<OpFoldResult> getAsOpFoldResult(ValueRange values) {
    #####:   82:  return llvm::to_vector<4>(
branch  0 never executed
branch  1 never executed
    #####:   83:      llvm::map_range(values, [](Value v) { return getAsOpFoldResult(v); }));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   84:}
        -:   85:
        -:   86:/// Convert `arrayAttr` to a vector of OpFoldResult.
function _ZN4mlir17getAsOpFoldResultENS_9ArrayAttrE called 0 returned 0% blocks executed 0%
    #####:   87:SmallVector<OpFoldResult> getAsOpFoldResult(ArrayAttr arrayAttr) {
    #####:   88:  SmallVector<OpFoldResult> res;
call    0 never executed
    #####:   89:  res.reserve(arrayAttr.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   90:  for (Attribute a : arrayAttr)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   91:    res.push_back(a);
call    0 never executed
call    1 never executed
    #####:   92:  return res;
        -:   93:}
        -:   94:
        -:   95:/// If ofr is a constant integer or an IntegerAttr, return the integer.
function _ZN4mlir19getConstantIntValueENS_12OpFoldResultE called 0 returned 0% blocks executed 0%
    #####:   96:Optional<int64_t> getConstantIntValue(OpFoldResult ofr) {
        -:   97:  // Case 1: Check for Constant integer.
    #####:   98:  if (auto val = ofr.dyn_cast<Value>()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   99:    APSInt intVal;
call    0 never executed
    #####:  100:    if (matchPattern(val, m_ConstantInt(&intVal)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:      return intVal.getSExtValue();
call    0 never executed
    #####:  102:    return llvm::None;
        -:  103:  }
        -:  104:  // Case 2: Check for IntegerAttr.
    #####:  105:  Attribute attr = ofr.dyn_cast<Attribute>();
call    0 never executed
    #####:  106:  if (auto intAttr = attr.dyn_cast_or_null<IntegerAttr>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  107:    return intAttr.getValue().getSExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  108:  return llvm::None;
        -:  109:}
        -:  110:
        -:  111:/// Return true if `ofr` is constant integer equal to `value`.
function _ZN4mlir18isConstantIntValueENS_12OpFoldResultEl called 0 returned 0% blocks executed 0%
    #####:  112:bool isConstantIntValue(OpFoldResult ofr, int64_t value) {
    #####:  113:  auto val = getConstantIntValue(ofr);
call    0 never executed
    #####:  114:  return val && *val == value;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  115:}
        -:  116:
        -:  117:/// Return true if ofr1 and ofr2 are the same integer constant attribute values
        -:  118:/// or the same SSA value.
        -:  119:/// Ignore integer bitwidth and type mismatch that come from the fact there is
        -:  120:/// no IndexAttr and that IndexType has no bitwidth.
function _ZN4mlir25isEqualConstantIntOrValueENS_12OpFoldResultES0_ called 0 returned 0% blocks executed 0%
    #####:  121:bool isEqualConstantIntOrValue(OpFoldResult ofr1, OpFoldResult ofr2) {
    #####:  122:  auto cst1 = getConstantIntValue(ofr1), cst2 = getConstantIntValue(ofr2);
call    0 never executed
call    1 never executed
    #####:  123:  if (cst1 && cst2 && *cst1 == *cst2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  124:    return true;
    #####:  125:  auto v1 = ofr1.dyn_cast<Value>(), v2 = ofr2.dyn_cast<Value>();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  126:  return v1 && v1 == v2;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  127:}
        -:  128:
        -:  129:/// Helper function to convert a vector of `OpFoldResult`s into a vector of
        -:  130:/// `Value`s. For each `OpFoldResult` in `valueOrAttrVec` return the fold result
        -:  131:/// if it casts to  a `Value` or create an index-type constant if it casts to
        -:  132:/// `IntegerAttr`. No other attribute types are supported.
function _ZN4mlir11getAsValuesERNS_9OpBuilderENS_8LocationEN4llvm8ArrayRefINS_12OpFoldResultEEE called 0 returned 0% blocks executed 0%
    #####:  133:SmallVector<Value> getAsValues(OpBuilder &b, Location loc,
        -:  134:                               ArrayRef<OpFoldResult> valueOrAttrVec) {
    #####:  135:  return llvm::to_vector<4>(
branch  0 never executed
branch  1 never executed
    #####:  136:      llvm::map_range(valueOrAttrVec, [&](OpFoldResult value) -> Value {
    #####:  137:        return getValueOrCreateConstantIndexOp(b, loc, value);
call    0 never executed
    #####:  138:      }));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  139:}
        -:  140:} // namespace mlir
