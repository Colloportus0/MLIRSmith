        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Linalg/Transforms/NamedOpConversions.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/NamedOpConversions.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/NamedOpConversions.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- NamedOpConversions.cpp - Implements conversions between named ops --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements conversions between named ops that can be seens as
        -:   10:// canonicalizations of named ops.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Linalg/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   17:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   18:#include "mlir/IR/PatternMatch.h"
        -:   19:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   20:#include "llvm/ADT/SmallVector.h"
        -:   21:#include "llvm/ADT/TypeSwitch.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:#define GEN_PASS_DEF_LINALGNAMEDOPCONVERSION
        -:   25:#include "mlir/Dialect/Linalg/Passes.h.inc"
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:using namespace mlir::linalg;
        -:   30:
function _ZL16getIndicesVectorii called 0 returned 0% blocks executed 0%
    #####:   31:static llvm::SmallVector<int64_t> getIndicesVector(int start, int end) {
    #####:   32:  return llvm::to_vector<2>(llvm::seq<int64_t>(start, end));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   33:}
        -:   34:
        -:   35:static LogicalResult
function _ZL28matchAndReplaceDepthwiseConvPN4mlir9OperationENS_5ValueES2_S2_S2_S2_NS_9AttributeES3_RNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   36:matchAndReplaceDepthwiseConv(Operation *operation, Value input, Value kernel,
        -:   37:                             Value iZp, Value kZp, Value init, Attribute stride,
        -:   38:                             Attribute dilation, PatternRewriter &rewriter) {
    #####:   39:  Location loc = operation->getLoc();
call    0 never executed
    #####:   40:  auto linalgOp = dyn_cast<LinalgOp>(operation);
call    0 never executed
        -:   41:  // Exit out on the memref version of this operation.
    #####:   42:  if (!linalgOp || !linalgOp.hasTensorSemantics())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   43:    return failure();
        -:   44:
    #####:   45:  auto result = operation->getResult(0);
call    0 never executed
        -:   46:
    #####:   47:  auto kernelTy = kernel.getType().dyn_cast<RankedTensorType>();
call    0 never executed
    #####:   48:  auto initTy = init.getType().dyn_cast<RankedTensorType>();
call    0 never executed
    #####:   49:  auto resultTy = result.getType().template dyn_cast<RankedTensorType>();
call    0 never executed
    #####:   50:  if (!kernelTy || !initTy || !resultTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   51:    return failure();
        -:   52:
    #####:   53:  if (kernelTy.getDimSize(3) != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    return failure();
        -:   55:
        -:   56:  // Collapse kernel dims.
    #####:   57:  SmallVector<ReassociationIndices, 4> collapsedKernelDims = {
    #####:   58:      getIndicesVector(0, 1), getIndicesVector(1, 2), getIndicesVector(2, 4)};
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    #####:   59:  auto newKernelTy = RankedTensorType::get(
    #####:   60:      {kernelTy.getDimSize(0), kernelTy.getDimSize(1), kernelTy.getDimSize(2)},
call    0 never executed
    #####:   61:      kernelTy.getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   62:  auto collapsedKernel = rewriter.create<tensor::CollapseShapeOp>(
    #####:   63:      loc, newKernelTy, kernel, collapsedKernelDims);
call    0 never executed
        -:   64:
        -:   65:  // Collapse init dims.
    #####:   66:  SmallVector<ReassociationIndices, 4> collapsedInitDims = {
    #####:   67:      getIndicesVector(0, 1), getIndicesVector(1, 2), getIndicesVector(2, 3),
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   68:      getIndicesVector(3, 5)};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   69:  auto newInitTy =
    #####:   70:      RankedTensorType::get({initTy.getDimSize(0), initTy.getDimSize(1),
call    0 never executed
    #####:   71:                             initTy.getDimSize(2), initTy.getDimSize(3)},
    #####:   72:                            initTy.getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   73:  auto collapsedInit = rewriter.create<tensor::CollapseShapeOp>(
    #####:   74:      loc, newInitTy, init, collapsedInitDims);
call    0 never executed
        -:   75:
    #####:   76:  SmallVector<NamedAttribute> preservedAttrs;
call    0 never executed
call    1 never executed
    #####:   77:  Operation *newConv =
call    0 never executed
    #####:   78:      TypeSwitch<Operation *, Operation *>(operation)
function _ZZL28matchAndReplaceDepthwiseConvPN4mlir9OperationENS_5ValueES2_S2_S2_S2_NS_9AttributeES3_RNS_15PatternRewriterEENKUlT_E_clINS_6linalg25DepthwiseConv2DNhwcHwcmOpEEEDaS6_ called 0 returned 0% blocks executed 0%
    #####:   79:          .Case<DepthwiseConv2DNhwcHwcmOp>([&](auto op) {
    #####:   80:            preservedAttrs = getPrunedAttributeList(op);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   81:            return rewriter.create<DepthwiseConv2DNhwcHwcOp>(
    #####:   82:                loc, newInitTy, ValueRange{input, collapsedKernel},
call    0 never executed
call    1 never executed
    #####:   83:                ValueRange{collapsedInit}, stride, dilation);
call    0 never executed
    #####:   84:          })
call    0 never executed
function _ZZL28matchAndReplaceDepthwiseConvPN4mlir9OperationENS_5ValueES2_S2_S2_S2_NS_9AttributeES3_RNS_15PatternRewriterEENKUlT_E0_clINS_6linalg26DepthwiseConv2DNhwcHwcmQOpEEEDaS6_ called 0 returned 0% blocks executed 0%
    #####:   85:          .Case<DepthwiseConv2DNhwcHwcmQOp>([&](auto op) {
    #####:   86:            preservedAttrs = getPrunedAttributeList(op);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:            return rewriter.create<DepthwiseConv2DNhwcHwcQOp>(
    #####:   88:                loc, newInitTy, ValueRange{input, collapsedKernel, iZp, kZp},
call    0 never executed
call    1 never executed
    #####:   89:                ValueRange{collapsedInit}, stride, dilation);
call    0 never executed
    #####:   90:          })
call    0 never executed
    #####:   91:          .Default([](Operation *op) { return nullptr; });
branch  0 never executed
branch  1 never executed
    #####:   92:  if (!newConv)
branch  0 never executed
branch  1 never executed
    #####:   93:    return failure();
    #####:   94:  for (auto attr : preservedAttrs)
branch  0 never executed
branch  1 never executed
    #####:   95:    newConv->setAttr(attr.getName(), attr.getValue());
call    0 never executed
call    1 never executed
        -:   96:
        -:   97:  // Expand dimensions back out to
    #####:   98:  rewriter.replaceOpWithNewOp<tensor::ExpandShapeOp>(
    #####:   99:      operation, resultTy, newConv->getResult(0), collapsedInitDims);
call    0 never executed
    #####:  100:  return success();
branch  0 never executed
branch  1 never executed
        -:  101:}
        -:  102:
        -:  103:namespace {
        -:  104:struct SimplifyDepthwiseConvOp
        -:  105:    : public OpRewritePattern<DepthwiseConv2DNhwcHwcmOp> {
        -:  106:  using OpRewritePattern<DepthwiseConv2DNhwcHwcmOp>::OpRewritePattern;
        -:  107:
function _ZNK12_GLOBAL__N_123SimplifyDepthwiseConvOp15matchAndRewriteEN4mlir6linalg25DepthwiseConv2DNhwcHwcmOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  108:  LogicalResult matchAndRewrite(DepthwiseConv2DNhwcHwcmOp op,
        -:  109:                                PatternRewriter &rewriter) const override {
    #####:  110:    Operation *operation = op.getOperation();
call    0 never executed
    #####:  111:    Value input = op.getDpsInputOperand(0)->get();
call    0 never executed
call    1 never executed
    #####:  112:    Value kernel = op.getDpsInputOperand(1)->get();
call    0 never executed
call    1 never executed
    #####:  113:    Value init = op.getDpsInitOperand(0)->get();
call    0 never executed
call    1 never executed
        -:  114:
    #####:  115:    auto stride = op.getStrides();
call    0 never executed
    #####:  116:    auto dilation = op.getDilations();
call    0 never executed
        -:  117:
    #####:  118:    return matchAndReplaceDepthwiseConv(operation, input, kernel, nullptr,
call    0 never executed
        -:  119:                                        nullptr, init, stride, dilation,
    #####:  120:                                        rewriter);
call    0 never executed
        -:  121:  }
        -:  122:};
        -:  123:
        -:  124:struct SimplifyDepthwiseConvQOp
        -:  125:    : public OpRewritePattern<DepthwiseConv2DNhwcHwcmQOp> {
        -:  126:  using OpRewritePattern<DepthwiseConv2DNhwcHwcmQOp>::OpRewritePattern;
        -:  127:
function _ZNK12_GLOBAL__N_124SimplifyDepthwiseConvQOp15matchAndRewriteEN4mlir6linalg26DepthwiseConv2DNhwcHwcmQOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  128:  LogicalResult matchAndRewrite(DepthwiseConv2DNhwcHwcmQOp op,
        -:  129:                                PatternRewriter &rewriter) const override {
    #####:  130:    Operation *operation = op.getOperation();
call    0 never executed
    #####:  131:    Value input = op.getDpsInputOperand(0)->get();
call    0 never executed
call    1 never executed
    #####:  132:    Value kernel = op.getDpsInputOperand(1)->get();
call    0 never executed
call    1 never executed
    #####:  133:    Value iZp = op.getDpsInputOperand(2)->get();
call    0 never executed
call    1 never executed
    #####:  134:    Value kZp = op.getDpsInputOperand(3)->get();
call    0 never executed
call    1 never executed
    #####:  135:    Value init = op.getDpsInitOperand(0)->get();
call    0 never executed
call    1 never executed
        -:  136:
        -:  137:    auto stride = op.getStrides();
    #####:  138:    auto dilation = op.getDilations();
call    0 never executed
        -:  139:
    #####:  140:    return matchAndReplaceDepthwiseConv(operation, input, kernel, iZp, kZp,
    #####:  141:                                        init, stride, dilation, rewriter);
call    0 never executed
        -:  142:  }
        -:  143:};
        -:  144:
        -:  145:struct LinalgNamedOpConversionPass
        -:  146:    : public impl::LinalgNamedOpConversionBase<LinalgNamedOpConversionPass> {
   326602:  147:  LinalgNamedOpConversionPass() = default;
call    0 returned 100%
    #####:  148:  LinalgNamedOpConversionPass(const LinalgNamedOpConversionPass &) = default;
call    0 never executed
        -:  149:
function _ZN12_GLOBAL__N_127LinalgNamedOpConversionPass14runOnOperationEv called 847 returned 100% blocks executed 69%
      847:  150:  void runOnOperation() override {
      847:  151:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1694:  152:    RewritePatternSet patterns(op->getContext());
call    0 returned 100%
call    1 returned 100%
     1694:  153:    populateLinalgNamedOpConversionPatterns(patterns);
      847:  154:    if (failed(applyPatternsAndFoldGreedily(op, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  155:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  156:  }
        -:  157:};
        -:  158:} // namespace
        -:  159:
function _ZN4mlir6linalg39populateLinalgNamedOpConversionPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     847*:  160:void mlir::linalg::populateLinalgNamedOpConversionPatterns(
        -:  161:    RewritePatternSet &patterns) {
     847*:  162:  patterns.add<SimplifyDepthwiseConvOp, SimplifyDepthwiseConvQOp>(
     847*:  163:      patterns.getContext());
call    0 never executed
call    1 returned 100%
call    2 returned 100%
    #####:  164:}
        -:  165:
function _ZN4mlir33createLinalgNamedOpConversionPassEv called 326602 returned 100% blocks executed 100%
   326602:  166:std::unique_ptr<Pass> mlir::createLinalgNamedOpConversionPass() {
   326602:  167:  return std::make_unique<LinalgNamedOpConversionPass>();
call    0 returned 100%
        -:  168:}
