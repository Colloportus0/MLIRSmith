        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Linalg/Transforms/InlineScalarOperands.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/InlineScalarOperands.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/InlineScalarOperands.cpp.gcda
        -:    0:Runs:325547
        -:    1://===- InlineScalarOperands.cpp - Pass to inline scalar operands =============//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns/pass to inline scalar operands into a generic
        -:   10:// operation. A scalar operand is an operand whose indexing map has a constant
        -:   11:// rhs.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/Linalg/Passes.h"
        -:   16:
        -:   17:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   18:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   19:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   20:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   21:#include "mlir/IR/AffineExpr.h"
        -:   22:#include "mlir/IR/AffineMap.h"
        -:   23:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   24:
        -:   25:namespace mlir {
        -:   26:#define GEN_PASS_DEF_LINALGINLINESCALAROPERANDS
        -:   27:#include "mlir/Dialect/Linalg/Passes.h.inc"
        -:   28:} // namespace mlir
        -:   29:
        -:   30:using namespace mlir;
        -:   31:using namespace mlir::linalg;
        -:   32:
        -:   33:namespace {
        -:   34:struct InlineScalarOperands : public OpRewritePattern<GenericOp> {
        -:   35:  using OpRewritePattern<GenericOp>::OpRewritePattern;
function _ZNK12_GLOBAL__N_120InlineScalarOperands15matchAndRewriteEN4mlir6linalg9GenericOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   36:  LogicalResult matchAndRewrite(GenericOp genericOp,
        -:   37:                                PatternRewriter &rewriter) const override {
    #####:   38:    if (!genericOp.hasTensorSemantics())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:      return failure();
        -:   40:
    #####:   41:    SmallVector<size_t> scalarOperands;
call    0 never executed
    #####:   42:    SmallVector<AffineMap> newIndexingMaps;
branch  0 never executed
branch  1 never executed
    #####:   43:    SmallVector<Value> newOperands;
branch  0 never executed
branch  1 never executed
    #####:   44:    for (OpOperand *opOperand : genericOp.getDpsInputOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:      AffineMap map = genericOp.getMatchingIndexingMap(opOperand);
call    0 never executed
    #####:   46:      if (genericOp.isDpsInput(opOperand) && map.isConstant()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   47:        scalarOperands.emplace_back(opOperand->getOperandNumber());
call    0 never executed
call    1 never executed
        -:   48:      } else {
    #####:   49:        newIndexingMaps.emplace_back(map);
call    0 never executed
    #####:   50:        newOperands.emplace_back(opOperand->get());
call    0 never executed
        -:   51:      }
        -:   52:    }
        -:   53:
    #####:   54:    if (scalarOperands.empty())
branch  0 never executed
branch  1 never executed
    #####:   55:      return failure();
        -:   56:
    #####:   57:    for (OpOperand *opOperand : genericOp.getDpsInitOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:      newIndexingMaps.emplace_back(genericOp.getMatchingIndexingMap(opOperand));
call    0 never executed
call    1 never executed
        -:   59:
    #####:   60:    Location loc = genericOp->getLoc();
call    0 never executed
    #####:   61:    SmallVector<Value> outputOperands = genericOp.getOutputs();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   62:    auto newOp = rewriter.create<GenericOp>(
    #####:   63:        loc, genericOp->getResultTypes(), newOperands, outputOperands,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   64:        newIndexingMaps, genericOp.getIteratorTypesArray());
call    0 never executed
call    1 never executed
    #####:   65:    rewriter.cloneRegionBefore(genericOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   66:                               newOp.getRegion().begin());
call    0 never executed
call    1 never executed
        -:   67:
    #####:   68:    Block *body = newOp.getBody();
call    0 never executed
    #####:   69:    PatternRewriter::InsertionGuard guard(rewriter);
branch  0 never executed
branch  1 never executed
    #####:   70:    rewriter.setInsertionPointToStart(body);
        -:   71:
    #####:   72:    for (auto idx : llvm::reverse(scalarOperands)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   73:      OpOperand *opOperand = genericOp.getDpsInputOperand(idx);
call    0 never executed
    #####:   74:      AffineMap map = genericOp.getMatchingIndexingMap(opOperand);
call    0 never executed
    #####:   75:      SmallVector<int64_t> indices = map.getConstantResults();
call    0 never executed
    #####:   76:      SmallVector<Value> indicesValues;
branch  0 never executed
branch  1 never executed
    #####:   77:      for (auto idx : indices)
branch  0 never executed
branch  1 never executed
    #####:   78:        indicesValues.emplace_back(
    #####:   79:            rewriter.create<arith::ConstantIndexOp>(loc, idx));
call    0 never executed
call    1 never executed
    #####:   80:      Value extractedValue = rewriter.create<tensor::ExtractOp>(
    #####:   81:          loc, opOperand->get(), indicesValues);
call    0 never executed
call    1 never executed
    #####:   82:      body->getArgument(idx).replaceAllUsesWith(extractedValue);
call    0 never executed
    #####:   83:      body->eraseArgument(idx);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   84:    }
        -:   85:
    #####:   86:    rewriter.replaceOp(genericOp, newOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   87:    return success();
branch  0 never executed
branch  1 never executed
        -:   88:  }
        -:   89:};
        -:   90:} // namespace
        -:   91:
        -:   92:/// Patterns that are used to inline constant operands into linalg generic
        -:   93:/// ops.
function _ZN4mlir6linalg38populateInlineConstantOperandsPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     915*:   94:void mlir::linalg::populateInlineConstantOperandsPatterns(
        -:   95:    RewritePatternSet &patterns) {
    #####:   96:  auto *context = patterns.getContext();
call    0 never executed
     915*:   97:  patterns.add<InlineScalarOperands>(context);
call    0 returned 100%
call    1 never executed
    #####:   98:}
        -:   99:
        -:  100:namespace {
        -:  101:/// Pass that removes unit-extent dims within generic ops.
   387581:  102:struct LinalgInlineScalarOperandsPass
call    0 returned 100%
call    1 returned 100%
        -:  103:    : public impl::LinalgInlineScalarOperandsBase<
        -:  104:          LinalgInlineScalarOperandsPass> {
function _ZN12_GLOBAL__N_130LinalgInlineScalarOperandsPass14runOnOperationEv called 918 returned 100% blocks executed 100%
      918:  105:  void runOnOperation() override {
      918:  106:    func::FuncOp funcOp = getOperation();
call    0 returned 100%
      918:  107:    MLIRContext *context = funcOp.getContext();
call    0 returned 100%
      915:  108:    RewritePatternSet patterns(context);
call    0 returned 100%
        -:  109:
      915:  110:    populateInlineConstantOperandsPatterns(patterns);
call    0 returned 100%
      917:  111:    (void)applyPatternsAndFoldGreedily(funcOp.getBody(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      919:  112:  }
        -:  113:};
        -:  114:} // namespace
        -:  115:
        -:  116:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir36createLinalgInlineScalarOperandsPassEv called 326597 returned 100% blocks executed 100%
   326597:  117:mlir::createLinalgInlineScalarOperandsPass() {
   326597:  118:  return std::make_unique<LinalgInlineScalarOperandsPass>();
call    0 returned 100%
        -:  119:}
