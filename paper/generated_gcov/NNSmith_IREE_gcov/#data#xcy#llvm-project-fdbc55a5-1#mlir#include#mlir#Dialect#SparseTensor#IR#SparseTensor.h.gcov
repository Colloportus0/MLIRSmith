        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/Sparsification.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/Sparsification.cpp.gcda
        -:    0:Runs:325552
        -:    1://===- SparseTensor.h - Sparse tensor dialect -------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_DIALECT_SPARSETENSOR_IR_SPARSETENSOR_H_
        -:   10:#define MLIR_DIALECT_SPARSETENSOR_IR_SPARSETENSOR_H_
        -:   11:
        -:   12:#include "mlir/Dialect/SparseTensor/IR/Enums.h"
        -:   13:#include "mlir/IR/BuiltinTypes.h"
        -:   14:#include "mlir/IR/Dialect.h"
        -:   15:#include "mlir/IR/OpDefinition.h"
        -:   16:#include "mlir/IR/OpImplementation.h"
        -:   17:#include "mlir/IR/TensorEncoding.h"
        -:   18:#include "mlir/Interfaces/InferTypeOpInterface.h"
        -:   19:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   20:
        -:   21:#define GET_ATTRDEF_CLASSES
        -:   22:#include "mlir/Dialect/SparseTensor/IR/SparseTensorAttrDefs.h.inc"
        -:   23:
        -:   24:#define GET_OP_CLASSES
        -:   25:#include "mlir/Dialect/SparseTensor/IR/SparseTensorOps.h.inc"
        -:   26:
        -:   27:#include "mlir/Dialect/SparseTensor/IR/SparseTensorOpsDialect.h.inc"
        -:   28:
        -:   29:namespace mlir {
        -:   30:namespace sparse_tensor {
        -:   31:
        -:   32:/// Convenience method to get a sparse encoding attribute from a type.
        -:   33:/// Returns null-attribute for any type without an encoding.
        -:   34:SparseTensorEncodingAttr getSparseTensorEncoding(Type type);
        -:   35:
        -:   36:/// Returns true iff the given type is a type for a COO tensor with the last
        -:   37:/// dimension level type being unique.
        -:   38:bool isUniqueCOOType(RankedTensorType tp);
        -:   39:
        -:   40://
        -:   41:// Dimension level types.
        -:   42://
        -:   43:
        -:   44:// MSVC does not allow this function to be constexpr, because
        -:   45:// `SparseTensorEncodingAttr::operator bool` isn't declared constexpr.
        -:   46:// And therefore all functions calling it cannot be constexpr either.
        -:   47:// TODO: since Clang does allow these to be constexpr, perhaps we should
        -:   48:// define a macro to abstract over `inline` vs `constexpr` annotations.
function _ZN4mlir13sparse_tensor15getDimLevelTypeERKNS0_24SparseTensorEncodingAttrEm called 0 returned 0% blocks executed 0%
    #####:   49:inline DimLevelType getDimLevelType(const SparseTensorEncodingAttr &enc,
        -:   50:                                    uint64_t d) {
    #####:   51:  if (enc) {
branch  0 never executed
branch  1 never executed
    #####:   52:    auto types = enc.getDimLevelType();
call    0 never executed
    #####:   53:    assert(d < types.size() && "Dimension out of bounds");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   54:    return types[d];
        -:   55:  }
        -:   56:  return DimLevelType::Dense; // unannotated tensor is dense
        -:   57:}
        -:   58:
        -:   59:inline DimLevelType getDimLevelType(RankedTensorType type, uint64_t d) {
        -:   60:  return getDimLevelType(getSparseTensorEncoding(type), d);
        -:   61:}
        -:   62:
        -:   63:/// Convenience function to test for dense dimension (0 <= d < rank).
        -:   64:inline bool isDenseDim(RankedTensorType type, uint64_t d) {
        -:   65:  return isDenseDLT(getDimLevelType(type, d));
        -:   66:}
        -:   67:
        -:   68:/// Convenience function to test for compressed dimension (0 <= d < rank).
        -:   69:inline bool isCompressedDim(RankedTensorType type, uint64_t d) {
        -:   70:  return isCompressedDLT(getDimLevelType(type, d));
        -:   71:}
        -:   72:
        -:   73:/// Convenience function to test for singleton dimension (0 <= d < rank).
        -:   74:inline bool isSingletonDim(RankedTensorType type, uint64_t d) {
        -:   75:  return isSingletonDLT(getDimLevelType(type, d));
        -:   76:}
        -:   77:
        -:   78://
        -:   79:// Dimension level properties.
        -:   80://
        -:   81:
        -:   82:/// Convenience function to test for ordered property in the
        -:   83:/// given dimension (0 <= d < rank).
        -:   84:inline bool isOrderedDim(RankedTensorType type, uint64_t d) {
        -:   85:  return isOrderedDLT(getDimLevelType(type, d));
        -:   86:}
        -:   87:
        -:   88:/// Convenience function to test for unique property in the
        -:   89:/// given dimension (0 <= d < rank).
        -:   90:inline bool isUniqueDim(RankedTensorType type, uint64_t d) {
        -:   91:  return isUniqueDLT(getDimLevelType(type, d));
        -:   92:}
        -:   93:
        -:   94://
        -:   95:// Reordering.
        -:   96://
        -:   97:
        -:   98:uint64_t toOrigDim(const SparseTensorEncodingAttr &enc, uint64_t d);
        -:   99:uint64_t toStoredDim(const SparseTensorEncodingAttr &enc, uint64_t d);
        -:  100:
        -:  101:/// Convenience method to translate the given stored dimension
        -:  102:/// to the original dimension (0 <= d < rank).
        -:  103:uint64_t toOrigDim(RankedTensorType type, uint64_t d);
        -:  104:
        -:  105:/// Convenience method to translate the given original dimension
        -:  106:/// to the stored dimension (0 <= d < rank).
        -:  107:uint64_t toStoredDim(RankedTensorType type, uint64_t d);
        -:  108:
        -:  109:} // namespace sparse_tensor
        -:  110:} // namespace mlir
        -:  111:
        -:  112:#endif // MLIR_DIALECT_SPARSETENSOR_IR_SPARSETENSOR_H_
