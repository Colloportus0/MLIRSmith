        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/Conversion/VectorToLLVM/ConvertVectorToLLVM.h
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcda
        -:    0:Runs:325552
        -:    1://===- ConvertVectorToLLVM.h - Utils to convert from the vector dialect ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:#ifndef MLIR_CONVERSION_VECTORTOLLVM_CONVERTVECTORTOLLVM_H_
        -:    9:#define MLIR_CONVERSION_VECTORTOLLVM_CONVERTVECTORTOLLVM_H_
        -:   10:
        -:   11:#include "mlir/Transforms/DialectConversion.h"
        -:   12:
        -:   13:namespace mlir {
        -:   14:class LLVMTypeConverter;
        -:   15:class ModuleOp;
        -:   16:template <typename T>
        -:   17:class OperationPass;
        -:   18:
        -:   19:#define GEN_PASS_DECL_CONVERTVECTORTOLLVM
        -:   20:#include "mlir/Conversion/Passes.h.inc"
        -:   21:
        -:   22:/// Options to control Vector to LLVM lowering.
        -:   23:///
        -:   24:/// This should kept in sync with VectorToLLVM options defined for the
        -:   25:/// ConvertVectorToLLVM pass in include/mlir/Conversion/Passes.td
        -:   26:struct LowerVectorToLLVMOptions {
     1051:   27:  LowerVectorToLLVMOptions() {}
call    0 returned 100%
        -:   28:
     1051:   29:  LowerVectorToLLVMOptions &enableReassociateFPReductions(bool b = true) {
     1051:   30:    reassociateFPReductions = b;
     1051:   31:    return *this;
call    0 returned 100%
        -:   32:  }
     1051:   33:  LowerVectorToLLVMOptions &enableIndexOptimizations(bool b = true) {
     1051:   34:    force32BitVectorIndices = b;
     1051:   35:    return *this;
call    0 returned 100%
        -:   36:  }
     1051:   37:  LowerVectorToLLVMOptions &enableArmNeon(bool b = true) {
     1051:   38:    armNeon = b;
     1051:   39:    return *this;
call    0 returned 100%
        -:   40:  }
     1051:   41:  LowerVectorToLLVMOptions &enableArmSVE(bool b = true) {
     1051:   42:    armSVE = b;
     1051:   43:    return *this;
call    0 returned 100%
        -:   44:  }
     1051:   45:  LowerVectorToLLVMOptions &enableAMX(bool b = true) {
     1051:   46:    amx = b;
     1051:   47:    return *this;
call    0 returned 100%
        -:   48:  }
     1051:   49:  LowerVectorToLLVMOptions &enableX86Vector(bool b = true) {
     1051:   50:    x86Vector = b;
     1051:   51:    return *this;
call    0 returned 100%
        -:   52:  }
        -:   53:
        -:   54:  bool reassociateFPReductions{false};
        -:   55:  bool force32BitVectorIndices{true};
        -:   56:  bool armNeon{false};
        -:   57:  bool armSVE{false};
        -:   58:  bool amx{false};
        -:   59:  bool x86Vector{false};
        -:   60:};
        -:   61:
        -:   62:/// Collect a set of patterns to convert from Vector contractions to LLVM Matrix
        -:   63:/// Intrinsics. To lower to assembly, the LLVM flag -lower-matrix-intrinsics
        -:   64:/// will be needed when invoking LLVM.
        -:   65:void populateVectorToLLVMMatrixConversionPatterns(LLVMTypeConverter &converter,
        -:   66:                                                  RewritePatternSet &patterns);
        -:   67:
        -:   68:/// Collect a set of patterns to convert from the Vector dialect to LLVM.
        -:   69:void populateVectorToLLVMConversionPatterns(
        -:   70:    LLVMTypeConverter &converter, RewritePatternSet &patterns,
        -:   71:    bool reassociateFPReductions = false, bool force32BitVectorIndices = false);
        -:   72:
        -:   73:/// Create a pass to convert vector operations to the LLVMIR dialect.
        -:   74:std::unique_ptr<OperationPass<ModuleOp>> createConvertVectorToLLVMPass(
        -:   75:    const LowerVectorToLLVMOptions &options = LowerVectorToLLVMOptions());
        -:   76:
        -:   77:} // namespace mlir
        -:   78:
        -:   79:#endif // MLIR_CONVERSION_VECTORTOLLVM_CONVERTVECTORTOLLVM_H_
