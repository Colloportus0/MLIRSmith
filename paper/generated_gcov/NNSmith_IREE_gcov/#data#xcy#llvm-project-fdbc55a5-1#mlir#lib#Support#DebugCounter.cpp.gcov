        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Support/DebugCounter.cpp
        -:    0:Graph:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/DebugCounter.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/DebugCounter.cpp.gcda
        -:    0:Runs:325564
        -:    1://===- DebugCounter.cpp - Debug Counter Facilities ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Support/DebugCounter.h"
        -:   10:#include "llvm/Support/CommandLine.h"
        -:   11:#include "llvm/Support/Debug.h"
        -:   12:#include "llvm/Support/Format.h"
        -:   13:#include "llvm/Support/ManagedStatic.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// DebugCounter CommandLine Options
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
        -:   21:namespace {
        -:   22:/// This struct contains command line options that can be used to initialize
        -:   23:/// various bits of a DebugCounter. This uses a struct wrapper to avoid the need
        -:   24:/// for global command line options.
   263316:   25:struct DebugCounterOptions {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   26:  llvm::cl::list<std::string> counters{
        -:   27:      "mlir-debug-counter",
        -:   28:      llvm::cl::desc(
        -:   29:          "Comma separated list of debug counter skip and count arguments"),
        -:   30:      llvm::cl::CommaSeparated};
        -:   31:
        -:   32:  llvm::cl::opt<bool> printCounterInfo{
        -:   33:      "mlir-print-debug-counter", llvm::cl::init(false), llvm::cl::Optional,
        -:   34:      llvm::cl::desc("Print out debug counter information after all counters "
        -:   35:                     "have been accumulated")};
        -:   36:};
        -:   37:} // namespace
        -:   38:
        -:   39:static llvm::ManagedStatic<DebugCounterOptions> clOptions;
        -:   40:
        -:   41://===----------------------------------------------------------------------===//
        -:   42:// DebugCounter
        -:   43://===----------------------------------------------------------------------===//
        -:   44:
function _ZN4mlir12DebugCounterC2Ev called 262108 returned 100% blocks executed 100%
   262108:   45:DebugCounter::DebugCounter() { applyCLOptions(); }
call    0 returned 100%
call    1 returned 100%
        -:   46:
   523452:   47:DebugCounter::~DebugCounter() {
        -:   48:  // Print information when destroyed, iff command line option is specified.
   523452:   49:  if (clOptions.isConstructed() && clOptions->printCounterInfo)
     1625:   50:    print(llvm::dbgs());
   523452:   51:}
------------------
_ZN4mlir12DebugCounterD0Ev:
function _ZN4mlir12DebugCounterD0Ev called 261726 returned 100% blocks executed 100%
   261726:   47:DebugCounter::~DebugCounter() {
        -:   48:  // Print information when destroyed, iff command line option is specified.
        -:   49:  if (clOptions.isConstructed() && clOptions->printCounterInfo)
        -:   50:    print(llvm::dbgs());
   261726:   51:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN4mlir12DebugCounterD2Ev:
function _ZN4mlir12DebugCounterD2Ev called 261726 returned 100% blocks executed 100%
   261726:   47:DebugCounter::~DebugCounter() {
call    0 returned 100%
        -:   48:  // Print information when destroyed, iff command line option is specified.
   523452:   49:  if (clOptions.isConstructed() && clOptions->printCounterInfo)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     1625:   50:    print(llvm::dbgs());
call    0 returned 100%
call    1 returned 100%
   261726:   51:}
------------------
        -:   52:
        -:   53:/// Add a counter for the given debug action tag. `countToSkip` is the number
        -:   54:/// of counter executions to skip before enabling execution of the action.
        -:   55:/// `countToStopAfter` is the number of executions of the counter to allow
        -:   56:/// before preventing the action from executing any more.
function _ZN4mlir12DebugCounter10addCounterEN4llvm9StringRefEll called 0 returned 0% blocks executed 0%
    #####:   57:void DebugCounter::addCounter(StringRef actionTag, int64_t countToSkip,
        -:   58:                              int64_t countToStopAfter) {
    #####:   59:  assert(!counters.count(actionTag) &&
call    0 never executed
        -:   60:         "a counter for the given action was already registered");
    #####:   61:  counters.try_emplace(actionTag, countToSkip, countToStopAfter);
call    0 never executed
    #####:   62:}
        -:   63:
        -:   64:// Register a counter with the specified name.
function _ZN4mlir12DebugCounter13shouldExecuteEN4llvm9StringRefES2_ called 0 returned 0% blocks executed 0%
    #####:   65:FailureOr<bool> DebugCounter::shouldExecute(StringRef tag,
        -:   66:                                            StringRef description) {
    #####:   67:  auto counterIt = counters.find(tag);
call    0 never executed
    #####:   68:  if (counterIt == counters.end())
branch  0 never executed
branch  1 never executed
    #####:   69:    return true;
        -:   70:
    #####:   71:  ++counterIt->second.count;
branch  0 never executed
branch  1 never executed
        -:   72:
        -:   73:  // We only execute while the `countToSkip` is not smaller than `count`, and
        -:   74:  // `countToStopAfter + countToSkip` is larger than `count`. Negative counters
        -:   75:  // always execute.
    #####:   76:  if (counterIt->second.countToSkip < 0)
branch  0 never executed
branch  1 never executed
    #####:   77:    return true;
    #####:   78:  if (counterIt->second.countToSkip >= counterIt->second.count)
branch  0 never executed
branch  1 never executed
    #####:   79:    return false;
    #####:   80:  if (counterIt->second.countToStopAfter < 0)
branch  0 never executed
branch  1 never executed
    #####:   81:    return true;
    #####:   82:  return counterIt->second.countToStopAfter + counterIt->second.countToSkip >=
    #####:   83:         counterIt->second.count;
        -:   84:}
        -:   85:
function _ZNK4mlir12DebugCounter5printERN4llvm11raw_ostreamE called 1625 returned 100% blocks executed 35%
     1625:   86:void DebugCounter::print(raw_ostream &os) const {
        -:   87:  // Order the registered counters by name.
     1625:   88:  SmallVector<const llvm::StringMapEntry<Counter> *, 16> sortedCounters(
     1625:   89:      llvm::make_pointer_range(counters));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
     1625:   90:  llvm::array_pod_sort(sortedCounters.begin(), sortedCounters.end(),
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   91:                       [](const decltype(sortedCounters)::value_type *lhs,
        -:   92:                          const decltype(sortedCounters)::value_type *rhs) {
        -:   93:                         return (*lhs)->getKey().compare((*rhs)->getKey());
        -:   94:                       });
        -:   95:
     1625:   96:  os << "DebugCounter counters:\n";
call    0 returned 100%
    1625*:   97:  for (const llvm::StringMapEntry<Counter> *counter : sortedCounters) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:    os << llvm::left_justify(counter->getKey(), 32) << ": {"
call    0 never executed
call    1 never executed
    #####:   99:       << counter->second.count << "," << counter->second.countToSkip << ","
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  100:       << counter->second.countToStopAfter << "}\n";
call    0 never executed
call    1 never executed
        -:  101:  }
     1625:  102:}
        -:  103:
        -:  104:/// Register a set of useful command-line options that can be used to configure
        -:  105:/// various flags within the DebugCounter. These flags are used when
        -:  106:/// constructing a DebugCounter for initialization.
function _ZN4mlir12DebugCounter17registerCLOptionsEv called 325564 returned 100% blocks executed 100%
   325564:  107:void DebugCounter::registerCLOptions() {
        -:  108:#ifndef NDEBUG
        -:  109:  // Make sure that the options struct has been initialized.
   325564:  110:  *clOptions;
call    0 returned 100%
        -:  111:#endif
   325564:  112:}
        -:  113:
        -:  114:// This is called by the command line parser when it sees a value for the
        -:  115:// debug-counter option defined above.
function _ZN4mlir12DebugCounter14applyCLOptionsEv called 262108 returned 100% blocks executed 16%
   262108:  116:void DebugCounter::applyCLOptions() {
   262108:  117:  if (!clOptions.isConstructed())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  118:    return;
        -:  119:
  262108*:  120:  for (StringRef arg : clOptions->counters) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:  121:    if (arg.empty())
branch  0 never executed
branch  1 never executed
    #####:  122:      continue;
        -:  123:
        -:  124:    // Debug counter arguments are expected to be in the form: `counter=value`.
    #####:  125:    auto [counterName, counterValueStr] = arg.split('=');
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:    if (counterValueStr.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  127:      llvm::errs() << "error: expected DebugCounter argument to have an `=` "
call    0 never executed
        -:  128:                      "separating the counter name and value, but the provided "
    #####:  129:                      "argument was: `"
call    0 never executed
    #####:  130:                   << arg << "`\n";
call    0 never executed
call    1 never executed
    #####:  131:      llvm::report_fatal_error(
call    0 never executed
        -:  132:          "Invalid DebugCounter command-line configuration");
        -:  133:    }
        -:  134:
        -:  135:    // Extract the counter value.
    #####:  136:    int64_t counterValue;
    #####:  137:    if (counterValueStr.getAsInteger(0, counterValue)) {
call    0 never executed
    #####:  138:      llvm::errs() << "error: expected DebugCounter counter value to be "
call    0 never executed
    #####:  139:                      "numeric, but got `"
call    0 never executed
    #####:  140:                   << counterValueStr << "`\n";
call    0 never executed
call    1 never executed
    #####:  141:      llvm::report_fatal_error(
call    0 never executed
        -:  142:          "Invalid DebugCounter command-line configuration");
        -:  143:    }
        -:  144:
        -:  145:    // Now we need to see if this is the skip or the count, remove the suffix,
        -:  146:    // and add it to the counter values.
    #####:  147:    if (counterName.consume_back("-skip")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:      counters[counterName].countToSkip = counterValue;
call    0 never executed
        -:  149:
    #####:  150:    } else if (counterName.consume_back("-count")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  151:      counters[counterName].countToStopAfter = counterValue;
call    0 never executed
        -:  152:
        -:  153:    } else {
    #####:  154:      llvm::errs() << "error: expected DebugCounter counter name to end with "
call    0 never executed
    #####:  155:                      "either `-skip` or `-count`, but got`"
call    0 never executed
    #####:  156:                   << counterName << "`\n";
call    0 never executed
call    1 never executed
    #####:  157:      llvm::report_fatal_error(
call    0 never executed
        -:  158:          "Invalid DebugCounter command-line configuration");
        -:  159:    }
        -:  160:  }
        -:  161:}
