        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Affine/TestAffineLoopParametricTiling.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestAffineLoopParametricTiling.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestAffineLoopParametricTiling.cpp.gcda
        -:    0:Runs:325560
        -:    1://= TestAffineLoopParametricTiling.cpp -- Parametric Affine loop tiling pass =//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a test pass to test parametric tiling of perfectly
        -:   10:// nested affine for loops.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   16:#include "mlir/Dialect/Affine/Passes.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:#define DEBUG_TYPE "test-affine-parametric-tile"
        -:   22:
        -:   23:namespace {
   388991:   24:struct TestAffineLoopParametricTiling
call    0 returned 100%
call    1 returned 100%
        -:   25:    : public PassWrapper<TestAffineLoopParametricTiling,
        -:   26:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_130TestAffineLoopParametricTiling13resolveTypeIDEv called 326639 returned 100% blocks executed 100%
   326639:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestAffineLoopParametricTiling)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:
function _ZNK12_GLOBAL__N_130TestAffineLoopParametricTiling11getArgumentEv called 325590 returned 100% blocks executed 100%
   325590:   29:  StringRef getArgument() const final { return "test-affine-parametric-tile"; }
function _ZNK12_GLOBAL__N_130TestAffineLoopParametricTiling14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   30:  StringRef getDescription() const final {
   325560:   31:    return "Tile affine loops using SSA values as tile sizes";
        -:   32:  }
        -:   33:  void runOnOperation() override;
        -:   34:};
        -:   35:} // namespace
        -:   36:
        -:   37:/// Checks if the function enclosing the loop nest has any arguments passed to
        -:   38:/// it, which can be used as tiling parameters. Assumes that atleast 'n'
        -:   39:/// arguments are passed, where 'n' is the number of loops in the loop nest.
function _ZL28checkIfTilingParametersExistN4llvm8ArrayRefIN4mlir11AffineForOpEEE called 0 returned 0% blocks executed 0%
    #####:   40:static void checkIfTilingParametersExist(ArrayRef<AffineForOp> band) {
    #####:   41:  assert(!band.empty() && "no loops in input band");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   42:  AffineForOp topLoop = band[0];
branch  0 never executed
branch  1 never executed
        -:   43:
    #####:   44:  if (func::FuncOp funcOp = dyn_cast<func::FuncOp>(topLoop->getParentOp()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   45:    assert(funcOp.getNumArguments() >= band.size() && "Too few tile sizes");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   46:}
        -:   47:
        -:   48:/// Captures tiling parameters, which are expected to be passed as arguments
        -:   49:/// to the function enclosing the loop nest. Also checks if the required
        -:   50:/// parameters are of index type. This approach is temporary for testing
        -:   51:/// purposes.
function _ZL19getTilingParametersN4llvm8ArrayRefIN4mlir11AffineForOpEEERNS_15SmallVectorImplINS1_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:   52:static void getTilingParameters(ArrayRef<AffineForOp> band,
        -:   53:                                SmallVectorImpl<Value> &tilingParameters) {
    #####:   54:  AffineForOp topLoop = band[0];
branch  0 never executed
branch  1 never executed
    #####:   55:  Region *funcOpRegion = topLoop->getParentRegion();
branch  0 never executed
branch  1 never executed
    #####:   56:  unsigned nestDepth = band.size();
call    0 never executed
        -:   57:
    #####:   58:  for (BlockArgument blockArgument :
    #####:   59:       funcOpRegion->getArguments().take_front(nestDepth)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   60:    if (blockArgument.getArgNumber() < nestDepth) {
branch  0 never executed
branch  1 never executed
    #####:   61:      assert(blockArgument.getType().isIndex() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   62:             "expected tiling parameters to be of index type.");
    #####:   63:      tilingParameters.push_back(blockArgument);
call    0 never executed
        -:   64:    }
        -:   65:  }
    #####:   66:}
        -:   67:
function _ZN12_GLOBAL__N_130TestAffineLoopParametricTiling14runOnOperationEv called 997 returned 100% blocks executed 43%
      997:   68:void TestAffineLoopParametricTiling::runOnOperation() {
        -:   69:  // Bands of loops to tile.
     1995:   70:  std::vector<SmallVector<AffineForOp, 6>> bands;
call    0 returned 100%
call    1 returned 100%
      997:   71:  getTileableBands(getOperation(), &bands);
call    0 returned 100%
call    1 returned 100%
        -:   72:
        -:   73:  // Tile each band.
     998*:   74:  for (MutableArrayRef<AffineForOp> band : bands) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   75:    // Capture the tiling parameters from the arguments to the function
        -:   76:    // enclosing this loop nest.
    #####:   77:    SmallVector<AffineForOp, 6> tiledNest;
call    0 never executed
    #####:   78:    SmallVector<Value, 6> tilingParameters;
branch  0 never executed
branch  1 never executed
        -:   79:    // Check if tiling parameters are present.
    #####:   80:    checkIfTilingParametersExist(band);
call    0 never executed
        -:   81:
        -:   82:    // Get function arguments as tiling parameters.
    #####:   83:    getTilingParameters(band, tilingParameters);
call    0 never executed
        -:   84:
    #####:   85:    (void)tilePerfectlyNestedParametric(band, tilingParameters, &tiledNest);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   86:  }
      999:   87:}
        -:   88:
        -:   89:namespace mlir {
        -:   90:namespace test {
function _ZN4mlir4test42registerTestAffineLoopParametricTilingPassEv called 325560 returned 100% blocks executed 100%
   325560:   91:void registerTestAffineLoopParametricTilingPass() {
   325560:   92:  PassRegistration<TestAffineLoopParametricTiling>();
call    0 returned 100%
   325560:   93:}
        -:   94:} // namespace test
        -:   95:} // namespace mlir
