        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/MemRef/IR/MemRefDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/MemRef/IR/CMakeFiles/obj.MLIRMemRefDialect.dir/MemRefDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/MemRef/IR/CMakeFiles/obj.MLIRMemRefDialect.dir/MemRefDialect.cpp.gcda
        -:    0:Runs:325549
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   11:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   12:#include "mlir/Transforms/InliningUtils.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::memref;
        -:   16:
        -:   17:#include "mlir/Dialect/MemRef/IR/MemRefOpsDialect.cpp.inc"
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// MemRefDialect Dialect Interfaces
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
        -:   23:namespace {
        -:   24:struct MemRefInlinerInterface : public DialectInlinerInterface {
        -:   25:  using DialectInlinerInterface::DialectInlinerInterface;
function _ZNK12_GLOBAL__N_122MemRefInlinerInterface15isLegalToInlineEPN4mlir6RegionES3_bRNS1_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   26:  bool isLegalToInline(Region *dest, Region *src, bool wouldBeCloned,
        -:   27:                       BlockAndValueMapping &valueMapping) const final {
    #####:   28:    return true;
        -:   29:  }
function _ZNK12_GLOBAL__N_122MemRefInlinerInterface15isLegalToInlineEPN4mlir9OperationEPNS1_6RegionEbRNS1_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   30:  bool isLegalToInline(Operation *, Region *, bool wouldBeCloned,
        -:   31:                       BlockAndValueMapping &) const final {
    #####:   32:    return true;
        -:   33:  }
        -:   34:};
        -:   35:} // namespace
        -:   36:
function _ZN4mlir6memref13MemRefDialect10initializeEv called 0 returned 0% blocks executed 0%
  262097*:   37:void mlir::memref::MemRefDialect::initialize() {
  262097*:   38:  addOperations<
        -:   39:#define GET_OP_LIST
        -:   40:#include "mlir/Dialect/MemRef/IR/MemRefOps.cpp.inc"
  262097*:   41:      >();
call    0 never executed
call    1 returned 100%
  262097*:   42:  addInterfaces<MemRefInlinerInterface>();
call    0 never executed
call    1 returned 100%
    #####:   43:}
        -:   44:
        -:   45:/// Finds the unique dealloc operation (if one exists) for `allocValue`.
function _ZN4mlir6memref11findDeallocENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   46:llvm::Optional<Operation *> mlir::memref::findDealloc(Value allocValue) {
    #####:   47:  Operation *dealloc = nullptr;
    #####:   48:  for (Operation *user : allocValue.getUsers()) {
branch  0 never executed
branch  1 never executed
    #####:   49:    if (!hasEffect<MemoryEffects::Free>(user, allocValue))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:      continue;
        -:   51:    // If we found > 1 dealloc, return None.
    #####:   52:    if (dealloc)
branch  0 never executed
branch  1 never executed
    #####:   53:      return llvm::None;
        -:   54:    dealloc = user;
        -:   55:  }
    #####:   56:  return dealloc;
        -:   57:}
