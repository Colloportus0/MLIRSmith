        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/SCF/Transforms/ParallelLoopFusion.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ParallelLoopFusion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ParallelLoopFusion.cpp.gcda
        -:    0:Runs:325550
        -:    1://===- ParallelLoopFusion.cpp - Code to perform loop fusion ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop fusion on parallel loops.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   18:#include "mlir/IR/BlockAndValueMapping.h"
        -:   19:#include "mlir/IR/Builders.h"
        -:   20:#include "mlir/IR/OpDefinition.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:#define GEN_PASS_DEF_SCFPARALLELLOOPFUSION
        -:   24:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   25:} // namespace mlir
        -:   26:
        -:   27:using namespace mlir;
        -:   28:using namespace mlir::scf;
        -:   29:
        -:   30:/// Verify there are no nested ParallelOps.
function _ZL19hasNestedParallelOpN4mlir3scf10ParallelOpE called 0 returned 0% blocks executed 0%
    #####:   31:static bool hasNestedParallelOp(ParallelOp ploop) {
    #####:   32:  auto walkResult =
    #####:   33:      ploop.getBody()->walk([](ParallelOp) { return WalkResult::interrupt(); });
call    0 never executed
call    1 never executed
    #####:   34:  return walkResult.wasInterrupted();
        -:   35:}
        -:   36:
        -:   37:/// Verify equal iteration spaces.
function _ZL20equalIterationSpacesN4mlir3scf10ParallelOpES1_ called 0 returned 0% blocks executed 0%
    #####:   38:static bool equalIterationSpaces(ParallelOp firstPloop,
        -:   39:                                 ParallelOp secondPloop) {
    #####:   40:  if (firstPloop.getNumLoops() != secondPloop.getNumLoops())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   41:    return false;
        -:   42:
    #####:   43:  auto matchOperands = [&](const OperandRange &lhs,
        -:   44:                           const OperandRange &rhs) -> bool {
        -:   45:    // TODO: Extend this to support aliases and equal constants.
    #####:   46:    return std::equal(lhs.begin(), lhs.end(), rhs.begin());
        -:   47:  };
    #####:   48:  return matchOperands(firstPloop.getLowerBound(),
call    0 never executed
    #####:   49:                       secondPloop.getLowerBound()) &&
call    0 never executed
    #####:   50:         matchOperands(firstPloop.getUpperBound(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:                       secondPloop.getUpperBound()) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   52:         matchOperands(firstPloop.getStep(), secondPloop.getStep());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   53:}
        -:   54:
        -:   55:/// Checks if the parallel loops have mixed access to the same buffers. Returns
        -:   56:/// `true` if the first parallel loop writes to the same indices that the second
        -:   57:/// loop reads.
function _ZL36haveNoReadsAfterWriteExceptSameIndexN4mlir3scf10ParallelOpES1_RKNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   58:static bool haveNoReadsAfterWriteExceptSameIndex(
        -:   59:    ParallelOp firstPloop, ParallelOp secondPloop,
        -:   60:    const BlockAndValueMapping &firstToSecondPloopIndices) {
    #####:   61:  DenseMap<Value, SmallVector<ValueRange, 1>> bufferStores;
call    0 never executed
call    1 never executed
function _ZZL36haveNoReadsAfterWriteExceptSameIndexN4mlir3scf10ParallelOpES1_RKNS_20BlockAndValueMappingEENKUlNS_6memref7StoreOpEE_clES6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   62:  firstPloop.getBody()->walk([&](memref::StoreOp store) {
call    0 never executed
call    1 never executed
    #####:   63:    bufferStores[store.getMemRef()].push_back(store.getIndices());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   64:  });
function _ZZL36haveNoReadsAfterWriteExceptSameIndexN4mlir3scf10ParallelOpES1_RKNS_20BlockAndValueMappingEENKUlNS_6memref6LoadOpEE0_clES6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   65:  auto walkResult = secondPloop.getBody()->walk([&](memref::LoadOp load) {
        -:   66:    // Stop if the memref is defined in secondPloop body. Careful alias analysis
        -:   67:    // is needed.
    #####:   68:    auto *memrefDef = load.getMemRef().getDefiningOp();
call    0 never executed
call    1 never executed
    #####:   69:    if (memrefDef && memrefDef->getBlock() == load->getBlock())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   70:      return WalkResult::interrupt();
        -:   71:
    #####:   72:    auto write = bufferStores.find(load.getMemRef());
call    0 never executed
call    1 never executed
    #####:   73:    if (write == bufferStores.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   74:      return WalkResult::advance();
        -:   75:
        -:   76:    // Allow only single write access per buffer.
    #####:   77:    if (write->second.size() != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:      return WalkResult::interrupt();
        -:   79:
        -:   80:    // Check that the load indices of secondPloop coincide with store indices of
        -:   81:    // firstPloop for the same memrefs.
    #####:   82:    auto storeIndices = write->second.front();
call    0 never executed
    #####:   83:    auto loadIndices = load.getIndices();
call    0 never executed
    #####:   84:    if (storeIndices.size() != loadIndices.size())
branch  0 never executed
branch  1 never executed
    #####:   85:      return WalkResult::interrupt();
    #####:   86:    for (int i = 0, e = storeIndices.size(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   87:      if (firstToSecondPloopIndices.lookupOrDefault(storeIndices[i]) !=
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   88:          loadIndices[i])
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:        return WalkResult::interrupt();
        -:   90:    }
    #####:   91:    return WalkResult::advance();
    #####:   92:  });
call    0 never executed
call    1 never executed
    #####:   93:  return !walkResult.wasInterrupted();
call    0 never executed
        -:   94:}
        -:   95:
        -:   96:/// Analyzes dependencies in the most primitive way by checking simple read and
        -:   97:/// write patterns.
        -:   98:static LogicalResult
function _ZL18verifyDependenciesN4mlir3scf10ParallelOpES1_RKNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   99:verifyDependencies(ParallelOp firstPloop, ParallelOp secondPloop,
        -:  100:                   const BlockAndValueMapping &firstToSecondPloopIndices) {
    #####:  101:  if (!haveNoReadsAfterWriteExceptSameIndex(firstPloop, secondPloop,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  102:                                            firstToSecondPloopIndices))
    #####:  103:    return failure();
        -:  104:
    #####:  105:  BlockAndValueMapping secondToFirstPloopIndices;
call    0 never executed
    #####:  106:  secondToFirstPloopIndices.map(secondPloop.getBody()->getArguments(),
call    0 never executed
call    1 never executed
    #####:  107:                                firstPloop.getBody()->getArguments());
call    0 never executed
call    1 never executed
    #####:  108:  return success(haveNoReadsAfterWriteExceptSameIndex(
call    0 never executed
    #####:  109:      secondPloop, firstPloop, secondToFirstPloopIndices));
call    0 never executed
        -:  110:}
        -:  111:
        -:  112:static bool
function _ZL13isFusionLegalN4mlir3scf10ParallelOpES1_RKNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:  113:isFusionLegal(ParallelOp firstPloop, ParallelOp secondPloop,
        -:  114:              const BlockAndValueMapping &firstToSecondPloopIndices) {
    #####:  115:  return !hasNestedParallelOp(firstPloop) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:         !hasNestedParallelOp(secondPloop) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:         equalIterationSpaces(firstPloop, secondPloop) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  118:         succeeded(verifyDependencies(firstPloop, secondPloop,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  119:                                      firstToSecondPloopIndices));
        -:  120:}
        -:  121:
        -:  122:/// Prepends operations of firstPloop's body into secondPloop's body.
function _ZL11fuseIfLegalN4mlir3scf10ParallelOpES1_NS_9OpBuilderE called 0 returned 0% blocks executed 0%
    #####:  123:static void fuseIfLegal(ParallelOp firstPloop, ParallelOp secondPloop,
        -:  124:                        OpBuilder b) {
    #####:  125:  BlockAndValueMapping firstToSecondPloopIndices;
call    0 never executed
call    1 never executed
    #####:  126:  firstToSecondPloopIndices.map(firstPloop.getBody()->getArguments(),
call    0 never executed
call    1 never executed
    #####:  127:                                secondPloop.getBody()->getArguments());
call    0 never executed
call    1 never executed
        -:  128:
    #####:  129:  if (!isFusionLegal(firstPloop, secondPloop, firstToSecondPloopIndices))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:    return;
call    0 never executed
        -:  131:
    #####:  132:  b.setInsertionPointToStart(secondPloop.getBody());
call    0 never executed
call    1 never executed
    #####:  133:  for (auto &op : firstPloop.getBody()->without_terminator())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  134:    b.clone(op, firstToSecondPloopIndices);
call    0 never executed
    #####:  135:  firstPloop.erase();
call    0 never executed
        -:  136:}
        -:  137:
function _ZN4mlir3scf22naivelyFuseParallelOpsERNS_6RegionE called 1870 returned 100% blocks executed 59%
     1870:  138:void mlir::scf::naivelyFuseParallelOps(Region &region) {
     1870:  139:  OpBuilder b(region);
call    0 returned 100%
        -:  140:  // Consider every single block and attempt to fuse adjacent loops.
     3608:  141:  for (auto &block : region) {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     5214:  142:    SmallVector<SmallVector<ParallelOp, 8>, 1> ploopChains{{}};
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
        -:  143:    // Not using `walk()` to traverse only top-level parallel loops and also
        -:  144:    // make sure that there are no side-effecting ops between the parallel
        -:  145:    // loops.
     1738:  146:    bool noSideEffects = true;
    12336:  147:    for (auto &op : block) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 86% (fallthrough)
branch  3 taken 14%
call    4 returned 100%
   21196*:  148:      if (auto ploop = dyn_cast<ParallelOp>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  149:        if (noSideEffects) {
branch  0 never executed
branch  1 never executed
    #####:  150:          ploopChains.back().push_back(ploop);
call    0 never executed
call    1 never executed
        -:  151:        } else {
    #####:  152:          ploopChains.push_back({ploop});
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  153:          noSideEffects = true;
        -:  154:        }
    #####:  155:        continue;
        -:  156:      }
        -:  157:      // TODO: Handle region side effects properly.
    10598:  158:      noSideEffects &=
    10598:  159:          MemoryEffectOpInterface::hasNoEffect(&op) && op.getNumRegions() == 0;
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  160:    }
     3476:  161:    for (ArrayRef<ParallelOp> ploops : ploopChains) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    1738*:  162:      for (int i = 0, e = ploops.size(); i + 1 < e; ++i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  163:        fuseIfLegal(ploops[i], ploops[i + 1], b);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  164:    }
        -:  165:  }
     1870:  166:}
        -:  167:
        -:  168:namespace {
  326616*:  169:struct ParallelLoopFusion
call    0 never executed
call    1 returned 100%
        -:  170:    : public impl::SCFParallelLoopFusionBase<ParallelLoopFusion> {
function _ZN12_GLOBAL__N_118ParallelLoopFusion14runOnOperationEv called 864 returned 100% blocks executed 75%
      864:  171:  void runOnOperation() override {
function _ZZN12_GLOBAL__N_118ParallelLoopFusion14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 11462 returned 100% blocks executed 100%
    12326:  172:    getOperation()->walk([&](Operation *child) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    17766:  173:      for (Region &region : child->getRegions())
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
     1870:  174:        naivelyFuseParallelOps(region);
call    0 returned 100%
    11462:  175:    });
      864:  176:  }
        -:  177:};
        -:  178:} // namespace
        -:  179:
function _ZN4mlir28createParallelLoopFusionPassEv called 326616 returned 100% blocks executed 100%
   326616:  180:std::unique_ptr<Pass> mlir::createParallelLoopFusionPass() {
   326616:  181:  return std::make_unique<ParallelLoopFusion>();
call    0 returned 100%
        -:  182:}
