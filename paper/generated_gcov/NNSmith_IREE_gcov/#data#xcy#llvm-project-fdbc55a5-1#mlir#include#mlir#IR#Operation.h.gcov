        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/include/mlir/IR/Operation.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:325580
        -:    1://===- Operation.h - MLIR Operation Class -----------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the Operation class.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_IR_OPERATION_H
        -:   14:#define MLIR_IR_OPERATION_H
        -:   15:
        -:   16:#include "mlir/IR/Block.h"
        -:   17:#include "mlir/IR/BuiltinAttributes.h"
        -:   18:#include "mlir/IR/Diagnostics.h"
        -:   19:#include "mlir/IR/OperationSupport.h"
        -:   20:#include "mlir/IR/Region.h"
        -:   21:#include "llvm/ADT/Twine.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:/// Operation is a basic unit of execution within MLIR. Operations can
        -:   25:/// be nested within `Region`s held by other operations effectively forming a
        -:   26:/// tree. Child operations are organized into operation blocks represented by a
        -:   27:/// 'Block' class.
        -:   28:class alignas(8) Operation final
        -:   29:    : public llvm::ilist_node_with_parent<Operation, Block>,
        -:   30:      private llvm::TrailingObjects<Operation, detail::OperandStorage,
        -:   31:                                    BlockOperand, Region, OpOperand> {
        -:   32:public:
        -:   33:  /// Create a new Operation with the specific fields.
        -:   34:  static Operation *create(Location location, OperationName name,
        -:   35:                           TypeRange resultTypes, ValueRange operands,
        -:   36:                           NamedAttrList &&attributes, BlockRange successors,
        -:   37:                           unsigned numRegions);
        -:   38:
        -:   39:  /// Create a new Operation from the fields stored in `state`.
        -:   40:  static Operation *create(const OperationState &state);
        -:   41:
        -:   42:  /// Create a new Operation with the specific fields.
        -:   43:  static Operation *create(Location location, OperationName name,
        -:   44:                           TypeRange resultTypes, ValueRange operands,
        -:   45:                           NamedAttrList &&attributes,
        -:   46:                           BlockRange successors = {},
        -:   47:                           RegionRange regions = {});
        -:   48:
        -:   49:  /// The name of an operation is the key identifier for it.
    #####:   50:  OperationName getName() { return name; }
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
call   166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
call   170 never executed
call   171 never executed
call   172 never executed
call   173 never executed
call   174 never executed
call   175 never executed
call   176 never executed
call   177 never executed
call   178 never executed
call   179 never executed
call   180 never executed
call   181 never executed
call   182 never executed
call   183 never executed
call   184 never executed
call   185 never executed
call   186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 never executed
call   196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 never executed
call   201 never executed
call   202 never executed
call   203 never executed
call   204 never executed
call   205 never executed
call   206 never executed
call   207 never executed
        -:   51:
        -:   52:  /// If this operation has a registered operation description, return it.
        -:   53:  /// Otherwise return None.
    #####:   54:  Optional<RegisteredOperationName> getRegisteredInfo() {
    #####:   55:    return getName().getRegisteredInfo();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
branch 55 never executed
branch 56 never executed
branch 57 never executed
branch 58 never executed
branch 59 never executed
branch 60 never executed
branch 61 never executed
branch 62 never executed
branch 63 never executed
branch 64 never executed
branch 65 never executed
branch 66 never executed
branch 67 never executed
branch 68 never executed
branch 69 never executed
branch 70 never executed
branch 71 never executed
branch 72 never executed
branch 73 never executed
branch 74 never executed
branch 75 never executed
branch 76 never executed
branch 77 never executed
branch 78 never executed
branch 79 never executed
branch 80 never executed
branch 81 never executed
branch 82 never executed
branch 83 never executed
branch 84 never executed
branch 85 never executed
branch 86 never executed
branch 87 never executed
branch 88 never executed
branch 89 never executed
branch 90 never executed
branch 91 never executed
branch 92 never executed
branch 93 never executed
branch 94 never executed
branch 95 never executed
branch 96 never executed
branch 97 never executed
branch 98 never executed
branch 99 never executed
branch 100 never executed
branch 101 never executed
branch 102 never executed
branch 103 never executed
branch 104 never executed
branch 105 never executed
branch 106 never executed
branch 107 never executed
branch 108 never executed
branch 109 never executed
branch 110 never executed
branch 111 never executed
branch 112 never executed
branch 113 never executed
branch 114 never executed
branch 115 never executed
branch 116 never executed
branch 117 never executed
branch 118 never executed
branch 119 never executed
branch 120 never executed
branch 121 never executed
branch 122 never executed
branch 123 never executed
branch 124 never executed
branch 125 never executed
branch 126 never executed
branch 127 never executed
branch 128 never executed
branch 129 never executed
branch 130 never executed
branch 131 never executed
branch 132 never executed
branch 133 never executed
branch 134 never executed
branch 135 never executed
branch 136 never executed
branch 137 never executed
branch 138 never executed
branch 139 never executed
branch 140 never executed
branch 141 never executed
branch 142 never executed
branch 143 never executed
branch 144 never executed
branch 145 never executed
branch 146 never executed
branch 147 never executed
branch 148 never executed
branch 149 never executed
branch 150 never executed
branch 151 never executed
branch 152 never executed
branch 153 never executed
branch 154 never executed
branch 155 never executed
branch 156 never executed
branch 157 never executed
branch 158 never executed
branch 159 never executed
branch 160 never executed
branch 161 never executed
branch 162 never executed
branch 163 never executed
branch 164 never executed
branch 165 never executed
branch 166 never executed
branch 167 never executed
branch 168 never executed
branch 169 never executed
branch 170 never executed
branch 171 never executed
branch 172 never executed
branch 173 never executed
branch 174 never executed
branch 175 never executed
branch 176 never executed
branch 177 never executed
branch 178 never executed
branch 179 never executed
branch 180 never executed
branch 181 never executed
branch 182 never executed
branch 183 never executed
branch 184 never executed
branch 185 never executed
branch 186 never executed
branch 187 never executed
branch 188 never executed
branch 189 never executed
branch 190 never executed
branch 191 never executed
branch 192 never executed
branch 193 never executed
branch 194 never executed
branch 195 never executed
branch 196 never executed
branch 197 never executed
branch 198 never executed
branch 199 never executed
branch 200 never executed
branch 201 never executed
branch 202 never executed
branch 203 never executed
branch 204 never executed
branch 205 never executed
branch 206 never executed
branch 207 never executed
branch 208 never executed
branch 209 never executed
branch 210 never executed
branch 211 never executed
branch 212 never executed
branch 213 never executed
branch 214 never executed
branch 215 never executed
branch 216 never executed
branch 217 never executed
branch 218 never executed
branch 219 never executed
branch 220 never executed
branch 221 never executed
branch 222 never executed
branch 223 never executed
branch 224 never executed
branch 225 never executed
branch 226 never executed
branch 227 never executed
branch 228 never executed
branch 229 never executed
branch 230 never executed
branch 231 never executed
branch 232 never executed
branch 233 never executed
branch 234 never executed
branch 235 never executed
branch 236 never executed
branch 237 never executed
branch 238 never executed
branch 239 never executed
branch 240 never executed
branch 241 never executed
branch 242 never executed
branch 243 never executed
branch 244 never executed
branch 245 never executed
branch 246 never executed
branch 247 never executed
branch 248 never executed
branch 249 never executed
branch 250 never executed
branch 251 never executed
branch 252 never executed
branch 253 never executed
branch 254 never executed
branch 255 never executed
branch 256 never executed
branch 257 never executed
branch 258 never executed
branch 259 never executed
branch 260 never executed
branch 261 never executed
branch 262 never executed
branch 263 never executed
branch 264 never executed
branch 265 never executed
branch 266 never executed
branch 267 never executed
branch 268 never executed
branch 269 never executed
branch 270 never executed
branch 271 never executed
branch 272 never executed
branch 273 never executed
branch 274 never executed
branch 275 never executed
branch 276 never executed
branch 277 never executed
branch 278 never executed
branch 279 never executed
branch 280 never executed
branch 281 never executed
branch 282 never executed
branch 283 never executed
branch 284 never executed
branch 285 never executed
branch 286 never executed
branch 287 never executed
branch 288 never executed
branch 289 never executed
branch 290 never executed
branch 291 never executed
branch 292 never executed
branch 293 never executed
branch 294 never executed
branch 295 never executed
branch 296 never executed
branch 297 never executed
branch 298 never executed
branch 299 never executed
branch 300 never executed
branch 301 never executed
branch 302 never executed
branch 303 never executed
branch 304 never executed
branch 305 never executed
branch 306 never executed
branch 307 never executed
branch 308 never executed
branch 309 never executed
branch 310 never executed
branch 311 never executed
branch 312 never executed
branch 313 never executed
branch 314 never executed
branch 315 never executed
branch 316 never executed
branch 317 never executed
branch 318 never executed
branch 319 never executed
branch 320 never executed
branch 321 never executed
branch 322 never executed
branch 323 never executed
branch 324 never executed
branch 325 never executed
branch 326 never executed
branch 327 never executed
branch 328 never executed
branch 329 never executed
branch 330 never executed
branch 331 never executed
branch 332 never executed
branch 333 never executed
branch 334 never executed
branch 335 never executed
branch 336 never executed
branch 337 never executed
branch 338 never executed
branch 339 never executed
branch 340 never executed
branch 341 never executed
branch 342 never executed
branch 343 never executed
branch 344 never executed
branch 345 never executed
branch 346 never executed
branch 347 never executed
branch 348 never executed
branch 349 never executed
branch 350 never executed
branch 351 never executed
branch 352 never executed
branch 353 never executed
branch 354 never executed
branch 355 never executed
branch 356 never executed
branch 357 never executed
branch 358 never executed
branch 359 never executed
branch 360 never executed
branch 361 never executed
branch 362 never executed
branch 363 never executed
branch 364 never executed
branch 365 never executed
branch 366 never executed
branch 367 never executed
branch 368 never executed
branch 369 never executed
branch 370 never executed
branch 371 never executed
branch 372 never executed
branch 373 never executed
branch 374 never executed
branch 375 never executed
branch 376 never executed
branch 377 never executed
branch 378 never executed
branch 379 never executed
branch 380 never executed
branch 381 never executed
branch 382 never executed
branch 383 never executed
branch 384 never executed
branch 385 never executed
branch 386 never executed
branch 387 never executed
branch 388 never executed
branch 389 never executed
branch 390 never executed
branch 391 never executed
branch 392 never executed
branch 393 never executed
branch 394 never executed
branch 395 never executed
branch 396 never executed
branch 397 never executed
branch 398 never executed
branch 399 never executed
branch 400 never executed
branch 401 never executed
branch 402 never executed
branch 403 never executed
branch 404 never executed
branch 405 never executed
branch 406 never executed
branch 407 never executed
branch 408 never executed
branch 409 never executed
branch 410 never executed
branch 411 never executed
branch 412 never executed
branch 413 never executed
branch 414 never executed
branch 415 never executed
branch 416 never executed
branch 417 never executed
branch 418 never executed
branch 419 never executed
branch 420 never executed
branch 421 never executed
branch 422 never executed
branch 423 never executed
branch 424 never executed
branch 425 never executed
branch 426 never executed
branch 427 never executed
branch 428 never executed
branch 429 never executed
branch 430 never executed
branch 431 never executed
branch 432 never executed
branch 433 never executed
branch 434 never executed
branch 435 never executed
branch 436 never executed
branch 437 never executed
branch 438 never executed
branch 439 never executed
branch 440 never executed
branch 441 never executed
branch 442 never executed
branch 443 never executed
branch 444 never executed
branch 445 never executed
branch 446 never executed
branch 447 never executed
branch 448 never executed
branch 449 never executed
branch 450 never executed
branch 451 never executed
branch 452 never executed
branch 453 never executed
branch 454 never executed
branch 455 never executed
branch 456 never executed
branch 457 never executed
branch 458 never executed
branch 459 never executed
branch 460 never executed
branch 461 never executed
branch 462 never executed
branch 463 never executed
branch 464 never executed
branch 465 never executed
branch 466 never executed
branch 467 never executed
branch 468 never executed
branch 469 never executed
branch 470 never executed
branch 471 never executed
branch 472 never executed
branch 473 never executed
branch 474 never executed
branch 475 never executed
branch 476 never executed
branch 477 never executed
branch 478 never executed
branch 479 never executed
branch 480 never executed
branch 481 never executed
branch 482 never executed
branch 483 never executed
branch 484 never executed
branch 485 never executed
branch 486 never executed
branch 487 never executed
branch 488 never executed
branch 489 never executed
branch 490 never executed
branch 491 never executed
branch 492 never executed
branch 493 never executed
branch 494 never executed
branch 495 never executed
branch 496 never executed
branch 497 never executed
branch 498 never executed
branch 499 never executed
branch 500 never executed
branch 501 never executed
branch 502 never executed
branch 503 never executed
branch 504 never executed
branch 505 never executed
branch 506 never executed
branch 507 never executed
branch 508 never executed
branch 509 never executed
branch 510 never executed
branch 511 never executed
branch 512 never executed
branch 513 never executed
branch 514 never executed
branch 515 never executed
branch 516 never executed
branch 517 never executed
branch 518 never executed
branch 519 never executed
branch 520 never executed
branch 521 never executed
branch 522 never executed
branch 523 never executed
branch 524 never executed
branch 525 never executed
branch 526 never executed
branch 527 never executed
branch 528 never executed
branch 529 never executed
branch 530 never executed
branch 531 never executed
branch 532 never executed
branch 533 never executed
branch 534 never executed
branch 535 never executed
branch 536 never executed
branch 537 never executed
branch 538 never executed
branch 539 never executed
branch 540 never executed
branch 541 never executed
branch 542 never executed
branch 543 never executed
branch 544 never executed
branch 545 never executed
branch 546 never executed
branch 547 never executed
branch 548 never executed
branch 549 never executed
branch 550 never executed
branch 551 never executed
branch 552 never executed
branch 553 never executed
branch 554 never executed
branch 555 never executed
branch 556 never executed
branch 557 never executed
branch 558 never executed
branch 559 never executed
branch 560 never executed
branch 561 never executed
branch 562 never executed
branch 563 never executed
branch 564 never executed
branch 565 never executed
branch 566 never executed
branch 567 never executed
branch 568 never executed
branch 569 never executed
branch 570 never executed
branch 571 never executed
branch 572 never executed
branch 573 never executed
branch 574 never executed
branch 575 never executed
branch 576 never executed
branch 577 never executed
branch 578 never executed
branch 579 never executed
branch 580 never executed
branch 581 never executed
branch 582 never executed
branch 583 never executed
branch 584 never executed
branch 585 never executed
branch 586 never executed
branch 587 never executed
branch 588 never executed
branch 589 never executed
branch 590 never executed
branch 591 never executed
branch 592 never executed
branch 593 never executed
branch 594 never executed
branch 595 never executed
branch 596 never executed
branch 597 never executed
branch 598 never executed
branch 599 never executed
branch 600 never executed
branch 601 never executed
branch 602 never executed
branch 603 never executed
branch 604 never executed
branch 605 never executed
branch 606 never executed
branch 607 never executed
branch 608 never executed
branch 609 never executed
branch 610 never executed
branch 611 never executed
branch 612 never executed
branch 613 never executed
branch 614 never executed
branch 615 never executed
branch 616 never executed
branch 617 never executed
branch 618 never executed
branch 619 never executed
branch 620 never executed
branch 621 never executed
branch 622 never executed
branch 623 never executed
branch 624 never executed
branch 625 never executed
branch 626 never executed
branch 627 never executed
branch 628 never executed
branch 629 never executed
branch 630 never executed
branch 631 never executed
branch 632 never executed
branch 633 never executed
branch 634 never executed
branch 635 never executed
branch 636 never executed
branch 637 never executed
branch 638 never executed
branch 639 never executed
branch 640 never executed
branch 641 never executed
branch 642 never executed
branch 643 never executed
branch 644 never executed
branch 645 never executed
branch 646 never executed
branch 647 never executed
branch 648 never executed
branch 649 never executed
branch 650 never executed
branch 651 never executed
branch 652 never executed
branch 653 never executed
branch 654 never executed
branch 655 never executed
branch 656 never executed
branch 657 never executed
branch 658 never executed
branch 659 never executed
branch 660 never executed
branch 661 never executed
branch 662 never executed
branch 663 never executed
branch 664 never executed
branch 665 never executed
branch 666 never executed
branch 667 never executed
branch 668 never executed
branch 669 never executed
branch 670 never executed
branch 671 never executed
branch 672 never executed
branch 673 never executed
branch 674 never executed
branch 675 never executed
branch 676 never executed
branch 677 never executed
branch 678 never executed
branch 679 never executed
branch 680 never executed
branch 681 never executed
branch 682 never executed
branch 683 never executed
branch 684 never executed
branch 685 never executed
branch 686 never executed
branch 687 never executed
branch 688 never executed
branch 689 never executed
branch 690 never executed
branch 691 never executed
branch 692 never executed
branch 693 never executed
branch 694 never executed
branch 695 never executed
branch 696 never executed
branch 697 never executed
branch 698 never executed
branch 699 never executed
branch 700 never executed
branch 701 never executed
branch 702 never executed
branch 703 never executed
branch 704 never executed
branch 705 never executed
branch 706 never executed
branch 707 never executed
branch 708 never executed
branch 709 never executed
branch 710 never executed
branch 711 never executed
branch 712 never executed
branch 713 never executed
branch 714 never executed
branch 715 never executed
branch 716 never executed
branch 717 never executed
branch 718 never executed
branch 719 never executed
branch 720 never executed
branch 721 never executed
branch 722 never executed
branch 723 never executed
branch 724 never executed
branch 725 never executed
branch 726 never executed
branch 727 never executed
branch 728 never executed
branch 729 never executed
branch 730 never executed
branch 731 never executed
branch 732 never executed
branch 733 never executed
branch 734 never executed
branch 735 never executed
branch 736 never executed
branch 737 never executed
branch 738 never executed
branch 739 never executed
branch 740 never executed
branch 741 never executed
branch 742 never executed
branch 743 never executed
branch 744 never executed
branch 745 never executed
branch 746 never executed
branch 747 never executed
branch 748 never executed
branch 749 never executed
branch 750 never executed
branch 751 never executed
branch 752 never executed
branch 753 never executed
branch 754 never executed
branch 755 never executed
branch 756 never executed
branch 757 never executed
branch 758 never executed
branch 759 never executed
branch 760 never executed
branch 761 never executed
branch 762 never executed
branch 763 never executed
branch 764 never executed
branch 765 never executed
branch 766 never executed
branch 767 never executed
branch 768 never executed
branch 769 never executed
branch 770 never executed
branch 771 never executed
branch 772 never executed
branch 773 never executed
branch 774 never executed
branch 775 never executed
branch 776 never executed
branch 777 never executed
branch 778 never executed
branch 779 never executed
branch 780 never executed
branch 781 never executed
branch 782 never executed
branch 783 never executed
branch 784 never executed
branch 785 never executed
branch 786 never executed
branch 787 never executed
branch 788 never executed
branch 789 never executed
branch 790 never executed
branch 791 never executed
branch 792 never executed
branch 793 never executed
branch 794 never executed
branch 795 never executed
branch 796 never executed
branch 797 never executed
branch 798 never executed
branch 799 never executed
branch 800 never executed
branch 801 never executed
branch 802 never executed
branch 803 never executed
branch 804 never executed
branch 805 never executed
branch 806 never executed
branch 807 never executed
branch 808 never executed
branch 809 never executed
branch 810 never executed
branch 811 never executed
branch 812 never executed
branch 813 never executed
branch 814 never executed
branch 815 never executed
branch 816 never executed
branch 817 never executed
branch 818 never executed
branch 819 never executed
        -:   56:  }
        -:   57:
        -:   58:  /// Returns true if this operation has a registered operation description,
        -:   59:  /// otherwise false.
        -:   60:  bool isRegistered() { return getName().isRegistered(); }
        -:   61:
        -:   62:  /// Remove this operation from its parent block and delete it.
        -:   63:  void erase();
        -:   64:
        -:   65:  /// Remove the operation from its parent block, but don't delete it.
        -:   66:  void remove();
        -:   67:
        -:   68:  /// Class encompassing various options related to cloning an operation. Users
        -:   69:  /// of this class should pass it to Operation's 'clone' methods.
        -:   70:  /// Current options include:
        -:   71:  /// * Whether cloning should recursively traverse into the regions of the
        -:   72:  ///   operation or not.
        -:   73:  /// * Whether cloning should also clone the operands of the operation.
        -:   74:  class CloneOptions {
        -:   75:  public:
        -:   76:    /// Default constructs an option with all flags set to false. That means all
        -:   77:    /// parts of an operation that may optionally not be cloned, are not cloned.
        -:   78:    CloneOptions();
        -:   79:
        -:   80:    /// Constructs an instance with the clone regions and clone operands flags
        -:   81:    /// set accordingly.
        -:   82:    CloneOptions(bool cloneRegions, bool cloneOperands);
        -:   83:
        -:   84:    /// Returns an instance with all flags set to true. This is the default
        -:   85:    /// when using the clone method and clones all parts of the operation.
        -:   86:    static CloneOptions all();
        -:   87:
        -:   88:    /// Configures whether cloning should traverse into any of the regions of
        -:   89:    /// the operation. If set to true, the operation's regions are recursively
        -:   90:    /// cloned. If set to false, cloned operations will have the same number of
        -:   91:    /// regions, but they will be empty.
        -:   92:    /// Cloning of nested operations in the operation's regions are currently
        -:   93:    /// unaffected by other flags.
        -:   94:    CloneOptions &cloneRegions(bool enable = true);
        -:   95:
        -:   96:    /// Returns whether regions of the operation should be cloned as well.
        -:   97:    bool shouldCloneRegions() const { return cloneRegionsFlag; }
        -:   98:
        -:   99:    /// Configures whether operation' operands should be cloned. Otherwise the
        -:  100:    /// resulting clones will simply have zero operands.
        -:  101:    CloneOptions &cloneOperands(bool enable = true);
        -:  102:
        -:  103:    /// Returns whether operands should be cloned as well.
        -:  104:    bool shouldCloneOperands() const { return cloneOperandsFlag; }
        -:  105:
        -:  106:  private:
        -:  107:    /// Whether regions should be cloned.
        -:  108:    bool cloneRegionsFlag : 1;
        -:  109:    /// Whether operands should be cloned.
        -:  110:    bool cloneOperandsFlag : 1;
        -:  111:  };
        -:  112:
        -:  113:  /// Create a deep copy of this operation, remapping any operands that use
        -:  114:  /// values outside of the operation using the map that is provided (leaving
        -:  115:  /// them alone if no entry is present).  Replaces references to cloned
        -:  116:  /// sub-operations to the corresponding operation that is copied, and adds
        -:  117:  /// those mappings to the map.
        -:  118:  /// Optionally, one may configure what parts of the operation to clone using
        -:  119:  /// the options parameter.
        -:  120:  ///
        -:  121:  /// Calling this method from multiple threads is generally safe if through the
        -:  122:  /// process of cloning no new uses of 'Value's from outside the operation are
        -:  123:  /// created. Cloning an isolated-from-above operation with no operands, such
        -:  124:  /// as top level function operations, is therefore always safe. Using the
        -:  125:  /// mapper, it is possible to avoid adding uses to outside operands by
        -:  126:  /// remapping them to 'Value's owned by the caller thread.
        -:  127:  Operation *clone(BlockAndValueMapping &mapper,
        -:  128:                   CloneOptions options = CloneOptions::all());
        -:  129:  Operation *clone(CloneOptions options = CloneOptions::all());
        -:  130:
        -:  131:  /// Create a partial copy of this operation without traversing into attached
        -:  132:  /// regions. The new operation will have the same number of regions as the
        -:  133:  /// original one, but they will be left empty.
        -:  134:  /// Operands are remapped using `mapper` (if present), and `mapper` is updated
        -:  135:  /// to contain the results.
        -:  136:  Operation *cloneWithoutRegions(BlockAndValueMapping &mapper);
        -:  137:
        -:  138:  /// Create a partial copy of this operation without traversing into attached
        -:  139:  /// regions. The new operation will have the same number of regions as the
        -:  140:  /// original one, but they will be left empty.
        -:  141:  Operation *cloneWithoutRegions();
        -:  142:
        -:  143:  /// Returns the operation block that contains this operation.
        -:  144:  Block *getBlock() { return block; }
        -:  145:
        -:  146:  /// Return the context this operation is associated with.
    #####:  147:  MLIRContext *getContext() { return location->getContext(); }
call    0 never executed
        -:  148:
        -:  149:  /// Return the dialect this operation is associated with, or nullptr if the
        -:  150:  /// associated dialect is not loaded.
        -:  151:  Dialect *getDialect() { return getName().getDialect(); }
        -:  152:
        -:  153:  /// The source location the operation was defined or derived from.
    #####:  154:  Location getLoc() { return location; }
call    0 never executed
        -:  155:
        -:  156:  /// Set the source location the operation was defined or derived from.
        -:  157:  void setLoc(Location loc) { location = loc; }
        -:  158:
        -:  159:  /// Returns the region to which the instruction belongs. Returns nullptr if
        -:  160:  /// the instruction is unlinked.
        -:  161:  Region *getParentRegion() { return block ? block->getParent() : nullptr; }
        -:  162:
        -:  163:  /// Returns the closest surrounding operation that contains this operation
        -:  164:  /// or nullptr if this is a top-level operation.
        -:  165:  Operation *getParentOp() { return block ? block->getParentOp() : nullptr; }
        -:  166:
        -:  167:  /// Return the closest surrounding parent operation that is of type 'OpTy'.
        -:  168:  template <typename OpTy>
        -:  169:  OpTy getParentOfType() {
        -:  170:    auto *op = this;
        -:  171:    while ((op = op->getParentOp()))
        -:  172:      if (auto parentOp = dyn_cast<OpTy>(op))
        -:  173:        return parentOp;
        -:  174:    return OpTy();
        -:  175:  }
        -:  176:
        -:  177:  /// Returns the closest surrounding parent operation with trait `Trait`.
        -:  178:  template <template <typename T> class Trait>
        -:  179:  Operation *getParentWithTrait() {
        -:  180:    Operation *op = this;
        -:  181:    while ((op = op->getParentOp()))
        -:  182:      if (op->hasTrait<Trait>())
        -:  183:        return op;
        -:  184:    return nullptr;
        -:  185:  }
        -:  186:
        -:  187:  /// Return true if this operation is a proper ancestor of the `other`
        -:  188:  /// operation.
        -:  189:  bool isProperAncestor(Operation *other);
        -:  190:
        -:  191:  /// Return true if this operation is an ancestor of the `other` operation. An
        -:  192:  /// operation is considered as its own ancestor, use `isProperAncestor` to
        -:  193:  /// avoid this.
        -:  194:  bool isAncestor(Operation *other) {
        -:  195:    return this == other || isProperAncestor(other);
        -:  196:  }
        -:  197:
        -:  198:  /// Replace any uses of 'from' with 'to' within this operation.
        -:  199:  void replaceUsesOfWith(Value from, Value to);
        -:  200:
        -:  201:  /// Replace all uses of results of this operation with the provided 'values'.
        -:  202:  template <typename ValuesT>
        -:  203:  void replaceAllUsesWith(ValuesT &&values) {
        -:  204:    getResults().replaceAllUsesWith(std::forward<ValuesT>(values));
        -:  205:  }
        -:  206:
        -:  207:  /// Destroys this operation and its subclass data.
        -:  208:  void destroy();
        -:  209:
        -:  210:  /// This drops all operand uses from this operation, which is an essential
        -:  211:  /// step in breaking cyclic dependences between references when they are to
        -:  212:  /// be deleted.
        -:  213:  void dropAllReferences();
        -:  214:
        -:  215:  /// Drop uses of all values defined by this operation or its nested regions.
        -:  216:  void dropAllDefinedValueUses();
        -:  217:
        -:  218:  /// Unlink this operation from its current block and insert it right before
        -:  219:  /// `existingOp` which may be in the same or another block in the same
        -:  220:  /// function.
        -:  221:  void moveBefore(Operation *existingOp);
        -:  222:
        -:  223:  /// Unlink this operation from its current block and insert it right before
        -:  224:  /// `iterator` in the specified block.
        -:  225:  void moveBefore(Block *block, llvm::iplist<Operation>::iterator iterator);
        -:  226:
        -:  227:  /// Unlink this operation from its current block and insert it right after
        -:  228:  /// `existingOp` which may be in the same or another block in the same
        -:  229:  /// function.
        -:  230:  void moveAfter(Operation *existingOp);
        -:  231:
        -:  232:  /// Unlink this operation from its current block and insert it right after
        -:  233:  /// `iterator` in the specified block.
        -:  234:  void moveAfter(Block *block, llvm::iplist<Operation>::iterator iterator);
        -:  235:
        -:  236:  /// Given an operation 'other' that is within the same parent block, return
        -:  237:  /// whether the current operation is before 'other' in the operation list
        -:  238:  /// of the parent block.
        -:  239:  /// Note: This function has an average complexity of O(1), but worst case may
        -:  240:  /// take O(N) where N is the number of operations within the parent block.
        -:  241:  bool isBeforeInBlock(Operation *other);
        -:  242:
        -:  243:  void print(raw_ostream &os, const OpPrintingFlags &flags = llvm::None);
        -:  244:  void print(raw_ostream &os, AsmState &state);
        -:  245:  void dump();
        -:  246:
        -:  247:  //===--------------------------------------------------------------------===//
        -:  248:  // Operands
        -:  249:  //===--------------------------------------------------------------------===//
        -:  250:
        -:  251:  /// Replace the current operands of this operation with the ones provided in
        -:  252:  /// 'operands'.
        -:  253:  void setOperands(ValueRange operands);
        -:  254:
        -:  255:  /// Replace the operands beginning at 'start' and ending at 'start' + 'length'
        -:  256:  /// with the ones provided in 'operands'. 'operands' may be smaller or larger
        -:  257:  /// than the range pointed to by 'start'+'length'.
        -:  258:  void setOperands(unsigned start, unsigned length, ValueRange operands);
        -:  259:
        -:  260:  /// Insert the given operands into the operand list at the given 'index'.
        -:  261:  void insertOperands(unsigned index, ValueRange operands);
        -:  262:
    #####:  263:  unsigned getNumOperands() {
    #####:  264:    return LLVM_LIKELY(hasOperandStorage) ? getOperandStorage().size() : 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  265:  }
        -:  266:
    #####:  267:  Value getOperand(unsigned idx) { return getOpOperand(idx).get(); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
call   166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
call   170 never executed
call   171 never executed
call   172 never executed
call   173 never executed
call   174 never executed
call   175 never executed
call   176 never executed
call   177 never executed
call   178 never executed
call   179 never executed
call   180 never executed
call   181 never executed
call   182 never executed
call   183 never executed
call   184 never executed
call   185 never executed
call   186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 never executed
call   196 never executed
call   197 never executed
        -:  268:  void setOperand(unsigned idx, Value value) {
        -:  269:    return getOpOperand(idx).set(value);
        -:  270:  }
        -:  271:
        -:  272:  /// Erase the operand at position `idx`.
        -:  273:  void eraseOperand(unsigned idx) { eraseOperands(idx); }
        -:  274:
        -:  275:  /// Erase the operands starting at position `idx` and ending at position
        -:  276:  /// 'idx'+'length'.
        -:  277:  void eraseOperands(unsigned idx, unsigned length = 1) {
        -:  278:    getOperandStorage().eraseOperands(idx, length);
        -:  279:  }
        -:  280:
        -:  281:  /// Erases the operands that have their corresponding bit set in
        -:  282:  /// `eraseIndices` and removes them from the operand list.
        -:  283:  void eraseOperands(const BitVector &eraseIndices) {
        -:  284:    getOperandStorage().eraseOperands(eraseIndices);
        -:  285:  }
        -:  286:
        -:  287:  // Support operand iteration.
        -:  288:  using operand_range = OperandRange;
        -:  289:  using operand_iterator = operand_range::iterator;
        -:  290:
        -:  291:  operand_iterator operand_begin() { return getOperands().begin(); }
        -:  292:  operand_iterator operand_end() { return getOperands().end(); }
        -:  293:
        -:  294:  /// Returns an iterator on the underlying Value's.
    #####:  295:  operand_range getOperands() {
    #####:  296:    MutableArrayRef<OpOperand> operands = getOpOperands();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
    #####:  297:    return OperandRange(operands.data(), operands.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
        -:  298:  }
        -:  299:
function _ZN4mlir9Operation13getOpOperandsEv called 0 returned 0% blocks executed 0%
    #####:  300:  MutableArrayRef<OpOperand> getOpOperands() {
    #####:  301:    return LLVM_LIKELY(hasOperandStorage) ? getOperandStorage().getOperands()
    #####:  302:                                          : MutableArrayRef<OpOperand>();
branch  0 never executed
branch  1 never executed
        -:  303:  }
        -:  304:
function _ZN4mlir9Operation12getOpOperandEj called 0 returned 0% blocks executed 0%
    #####:  305:  OpOperand &getOpOperand(unsigned idx) {
    #####:  306:    return getOperandStorage().getOperands()[idx];
branch  0 never executed
branch  1 never executed
        -:  307:  }
        -:  308:
        -:  309:  // Support operand type iteration.
        -:  310:  using operand_type_iterator = operand_range::type_iterator;
        -:  311:  using operand_type_range = operand_range::type_range;
        -:  312:  operand_type_iterator operand_type_begin() { return operand_begin(); }
        -:  313:  operand_type_iterator operand_type_end() { return operand_end(); }
        -:  314:  operand_type_range getOperandTypes() { return getOperands().getTypes(); }
        -:  315:
        -:  316:  //===--------------------------------------------------------------------===//
        -:  317:  // Results
        -:  318:  //===--------------------------------------------------------------------===//
        -:  319:
        -:  320:  /// Return the number of results held by this operation.
    #####:  321:  unsigned getNumResults() { return numResults; }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -:  322:
        -:  323:  /// Get the 'idx'th result of this operation.
    #####:  324:  OpResult getResult(unsigned idx) { return OpResult(getOpResultImpl(idx)); }
        -:  325:
        -:  326:  /// Support result iteration.
        -:  327:  using result_range = ResultRange;
        -:  328:  using result_iterator = result_range::iterator;
        -:  329:
        -:  330:  result_iterator result_begin() { return getResults().begin(); }
        -:  331:  result_iterator result_end() { return getResults().end(); }
    #####:  332:  result_range getResults() {
    #####:  333:    return numResults == 0 ? result_range(nullptr, 0)
    #####:  334:                           : result_range(getInlineOpResult(0), numResults);
        -:  335:  }
        -:  336:
        -:  337:  result_range getOpResults() { return getResults(); }
        -:  338:  OpResult getOpResult(unsigned idx) { return getResult(idx); }
        -:  339:
        -:  340:  /// Support result type iteration.
        -:  341:  using result_type_iterator = result_range::type_iterator;
        -:  342:  using result_type_range = result_range::type_range;
        -:  343:  result_type_iterator result_type_begin() { return getResultTypes().begin(); }
        -:  344:  result_type_iterator result_type_end() { return getResultTypes().end(); }
    #####:  345:  result_type_range getResultTypes() { return getResults().getTypes(); }
call    0 never executed
        -:  346:
        -:  347:  //===--------------------------------------------------------------------===//
        -:  348:  // Attributes
        -:  349:  //===--------------------------------------------------------------------===//
        -:  350:
        -:  351:  // Operations may optionally carry a list of attributes that associate
        -:  352:  // constants to names.  Attributes may be dynamically added and removed over
        -:  353:  // the lifetime of an operation.
        -:  354:
        -:  355:  /// Return all of the attributes on this operation.
        -:  356:  ArrayRef<NamedAttribute> getAttrs() { return attrs.getValue(); }
        -:  357:
        -:  358:  /// Return all of the attributes on this operation as a DictionaryAttr.
        -:  359:  DictionaryAttr getAttrDictionary() { return attrs; }
        -:  360:
        -:  361:  /// Set the attribute dictionary on this operation.
        -:  362:  void setAttrs(DictionaryAttr newAttrs) {
        -:  363:    assert(newAttrs && "expected valid attribute dictionary");
        -:  364:    attrs = newAttrs;
        -:  365:  }
        -:  366:  void setAttrs(ArrayRef<NamedAttribute> newAttrs) {
        -:  367:    setAttrs(DictionaryAttr::get(getContext(), newAttrs));
        -:  368:  }
        -:  369:
        -:  370:  /// Return the specified attribute if present, null otherwise.
        -:  371:  Attribute getAttr(StringAttr name) { return attrs.get(name); }
    #####:  372:  Attribute getAttr(StringRef name) { return attrs.get(name); }
call    0 never executed
        -:  373:
        -:  374:  template <typename AttrClass>
        -:  375:  AttrClass getAttrOfType(StringAttr name) {
        -:  376:    return getAttr(name).dyn_cast_or_null<AttrClass>();
        -:  377:  }
        -:  378:  template <typename AttrClass>
function _ZN4mlir9Operation13getAttrOfTypeINS_17FlatSymbolRefAttrEEET_N4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  379:  AttrClass getAttrOfType(StringRef name) {
call    0 never executed
    #####:  380:    return getAttr(name).dyn_cast_or_null<AttrClass>();
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  /// Return true if the operation has an attribute with the provided name,
        -:  384:  /// false otherwise.
        -:  385:  bool hasAttr(StringAttr name) { return attrs.contains(name); }
        -:  386:  bool hasAttr(StringRef name) { return attrs.contains(name); }
        -:  387:  template <typename AttrClass, typename NameT>
        -:  388:  bool hasAttrOfType(NameT &&name) {
        -:  389:    return static_cast<bool>(
        -:  390:        getAttrOfType<AttrClass>(std::forward<NameT>(name)));
        -:  391:  }
        -:  392:
        -:  393:  /// If the an attribute exists with the specified name, change it to the new
        -:  394:  /// value. Otherwise, add a new attribute with the specified name/value.
        -:  395:  void setAttr(StringAttr name, Attribute value) {
        -:  396:    NamedAttrList attributes(attrs);
        -:  397:    if (attributes.set(name, value) != value)
        -:  398:      attrs = attributes.getDictionary(getContext());
        -:  399:  }
        -:  400:  void setAttr(StringRef name, Attribute value) {
        -:  401:    setAttr(StringAttr::get(getContext(), name), value);
        -:  402:  }
        -:  403:
        -:  404:  /// Remove the attribute with the specified name if it exists. Return the
        -:  405:  /// attribute that was erased, or nullptr if there was no attribute with such
        -:  406:  /// name.
        -:  407:  Attribute removeAttr(StringAttr name) {
        -:  408:    NamedAttrList attributes(attrs);
        -:  409:    Attribute removedAttr = attributes.erase(name);
        -:  410:    if (removedAttr)
        -:  411:      attrs = attributes.getDictionary(getContext());
        -:  412:    return removedAttr;
        -:  413:  }
        -:  414:  Attribute removeAttr(StringRef name) {
        -:  415:    return removeAttr(StringAttr::get(getContext(), name));
        -:  416:  }
        -:  417:
        -:  418:  /// A utility iterator that filters out non-dialect attributes.
        -:  419:  class dialect_attr_iterator
        -:  420:      : public llvm::filter_iterator<ArrayRef<NamedAttribute>::iterator,
        -:  421:                                     bool (*)(NamedAttribute)> {
        -:  422:    static bool filter(NamedAttribute attr) {
        -:  423:      // Dialect attributes are prefixed by the dialect name, like operations.
        -:  424:      return attr.getName().strref().count('.');
        -:  425:    }
        -:  426:
        -:  427:    explicit dialect_attr_iterator(ArrayRef<NamedAttribute>::iterator it,
        -:  428:                                   ArrayRef<NamedAttribute>::iterator end)
        -:  429:        : llvm::filter_iterator<ArrayRef<NamedAttribute>::iterator,
        -:  430:                                bool (*)(NamedAttribute)>(it, end, &filter) {}
        -:  431:
        -:  432:    // Allow access to the constructor.
        -:  433:    friend Operation;
        -:  434:  };
        -:  435:  using dialect_attr_range = iterator_range<dialect_attr_iterator>;
        -:  436:
        -:  437:  /// Return a range corresponding to the dialect attributes for this operation.
        -:  438:  dialect_attr_range getDialectAttrs() {
        -:  439:    auto attrs = getAttrs();
        -:  440:    return {dialect_attr_iterator(attrs.begin(), attrs.end()),
        -:  441:            dialect_attr_iterator(attrs.end(), attrs.end())};
        -:  442:  }
        -:  443:  dialect_attr_iterator dialect_attr_begin() {
        -:  444:    auto attrs = getAttrs();
        -:  445:    return dialect_attr_iterator(attrs.begin(), attrs.end());
        -:  446:  }
        -:  447:  dialect_attr_iterator dialect_attr_end() {
        -:  448:    auto attrs = getAttrs();
        -:  449:    return dialect_attr_iterator(attrs.end(), attrs.end());
        -:  450:  }
        -:  451:
        -:  452:  /// Set the dialect attributes for this operation, and preserve all dependent.
        -:  453:  template <typename DialectAttrT>
        -:  454:  void setDialectAttrs(DialectAttrT &&dialectAttrs) {
        -:  455:    NamedAttrList attrs;
        -:  456:    attrs.append(std::begin(dialectAttrs), std::end(dialectAttrs));
        -:  457:    for (auto attr : getAttrs())
        -:  458:      if (!attr.getName().strref().contains('.'))
        -:  459:        attrs.push_back(attr);
        -:  460:    setAttrs(attrs.getDictionary(getContext()));
        -:  461:  }
        -:  462:
        -:  463:  /// Sets default attributes on unset attributes.
        -:  464:  void populateDefaultAttrs() {
        -:  465:    if (auto registered = getRegisteredInfo()) {
        -:  466:      NamedAttrList attrs(getAttrDictionary());
        -:  467:      registered->populateDefaultAttrs(attrs);
        -:  468:      setAttrs(attrs.getDictionary(getContext()));
        -:  469:    }
        -:  470:  }
        -:  471:
        -:  472:  //===--------------------------------------------------------------------===//
        -:  473:  // Blocks
        -:  474:  //===--------------------------------------------------------------------===//
        -:  475:
        -:  476:  /// Returns the number of regions held by this operation.
        -:  477:  unsigned getNumRegions() { return numRegions; }
        -:  478:
        -:  479:  /// Returns the regions held by this operation.
        -:  480:  MutableArrayRef<Region> getRegions() {
        -:  481:    auto *regions = getTrailingObjects<Region>();
        -:  482:    return {regions, numRegions};
        -:  483:  }
        -:  484:
        -:  485:  /// Returns the region held by this operation at position 'index'.
        -:  486:  Region &getRegion(unsigned index) {
        -:  487:    assert(index < numRegions && "invalid region index");
        -:  488:    return getRegions()[index];
        -:  489:  }
        -:  490:
        -:  491:  //===--------------------------------------------------------------------===//
        -:  492:  // Successors
        -:  493:  //===--------------------------------------------------------------------===//
        -:  494:
    #####:  495:  MutableArrayRef<BlockOperand> getBlockOperands() {
    #####:  496:    return {getTrailingObjects<BlockOperand>(), numSuccs};
branch  0 never executed
branch  1 never executed
        -:  497:  }
        -:  498:
        -:  499:  // Successor iteration.
        -:  500:  using succ_iterator = SuccessorRange::iterator;
        -:  501:  succ_iterator successor_begin() { return getSuccessors().begin(); }
        -:  502:  succ_iterator successor_end() { return getSuccessors().end(); }
        -:  503:  SuccessorRange getSuccessors() { return SuccessorRange(this); }
        -:  504:
        -:  505:  bool hasSuccessors() { return numSuccs != 0; }
    #####:  506:  unsigned getNumSuccessors() { return numSuccs; }
        -:  507:
function _ZN4mlir9Operation12getSuccessorEj called 0 returned 0% blocks executed 0%
    #####:  508:  Block *getSuccessor(unsigned index) {
    #####:  509:    assert(index < getNumSuccessors());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  510:    return getBlockOperands()[index].get();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  511:  }
        -:  512:  void setSuccessor(Block *block, unsigned index);
        -:  513:
        -:  514:  //===--------------------------------------------------------------------===//
        -:  515:  // Accessors for various properties of operations
        -:  516:  //===--------------------------------------------------------------------===//
        -:  517:
        -:  518:  /// Attempt to fold this operation with the specified constant operand values
        -:  519:  /// - the elements in "operands" will correspond directly to the operands of
        -:  520:  /// the operation, but may be null if non-constant. If folding is successful,
        -:  521:  /// this fills in the `results` vector. If not, `results` is unspecified.
        -:  522:  LogicalResult fold(ArrayRef<Attribute> operands,
        -:  523:                     SmallVectorImpl<OpFoldResult> &results);
        -:  524:
        -:  525:  /// Returns true if the operation was registered with a particular trait, e.g.
        -:  526:  /// hasTrait<OperandsAreSignlessIntegerLike>().
        -:  527:  template <template <typename T> class Trait>
        -:  528:  bool hasTrait() {
        -:  529:    return name.hasTrait<Trait>();
        -:  530:  }
        -:  531:
        -:  532:  /// Returns true if the operation *might* have the provided trait. This
        -:  533:  /// means that either the operation is unregistered, or it was registered with
        -:  534:  /// the provide trait.
        -:  535:  template <template <typename T> class Trait>
        -:  536:  bool mightHaveTrait() {
        -:  537:    return name.mightHaveTrait<Trait>();
        -:  538:  }
        -:  539:
        -:  540:  //===--------------------------------------------------------------------===//
        -:  541:  // Operation Walkers
        -:  542:  //===--------------------------------------------------------------------===//
        -:  543:
        -:  544:  /// Walk the operation by calling the callback for each nested operation
        -:  545:  /// (including this one), block or region, depending on the callback provided.
        -:  546:  /// Regions, blocks and operations at the same nesting level are visited in
        -:  547:  /// lexicographical order. The walk order for enclosing regions, blocks and
        -:  548:  /// operations with respect to their nested ones is specified by 'Order'
        -:  549:  /// (post-order by default). A callback on a block or operation is allowed to
        -:  550:  /// erase that block or operation if either:
        -:  551:  ///   * the walk is in post-order, or
        -:  552:  ///   * the walk is in pre-order and the walk is skipped after the erasure.
        -:  553:  ///
        -:  554:  /// The callback method can take any of the following forms:
        -:  555:  ///   void(Operation*) : Walk all operations opaquely.
        -:  556:  ///     * op->walk([](Operation *nestedOp) { ...});
        -:  557:  ///   void(OpT) : Walk all operations of the given derived type.
        -:  558:  ///     * op->walk([](ReturnOp returnOp) { ...});
        -:  559:  ///   WalkResult(Operation*|OpT) : Walk operations, but allow for
        -:  560:  ///                                interruption/skipping.
        -:  561:  ///     * op->walk([](... op) {
        -:  562:  ///         // Skip the walk of this op based on some invariant.
        -:  563:  ///         if (some_invariant)
        -:  564:  ///           return WalkResult::skip();
        -:  565:  ///         // Interrupt, i.e cancel, the walk based on some invariant.
        -:  566:  ///         if (another_invariant)
        -:  567:  ///           return WalkResult::interrupt();
        -:  568:  ///         return WalkResult::advance();
        -:  569:  ///       });
        -:  570:  template <WalkOrder Order = WalkOrder::PostOrder, typename FnT,
        -:  571:            typename RetT = detail::walkResultType<FnT>>
        -:  572:  std::enable_if_t<llvm::function_traits<std::decay_t<FnT>>::num_args == 1,
        -:  573:                   RetT>
        -:  574:  walk(FnT &&callback) {
        -:  575:    return detail::walk<Order>(this, std::forward<FnT>(callback));
        -:  576:  }
        -:  577:
        -:  578:  /// Generic walker with a stage aware callback. Walk the operation by calling
        -:  579:  /// the callback for each nested operation (including this one) N+1 times,
        -:  580:  /// where N is the number of regions attached to that operation.
        -:  581:  ///
        -:  582:  /// The callback method can take any of the following forms:
        -:  583:  ///   void(Operation *, const WalkStage &) : Walk all operation opaquely
        -:  584:  ///     * op->walk([](Operation *nestedOp, const WalkStage &stage) { ...});
        -:  585:  ///   void(OpT, const WalkStage &) : Walk all operations of the given derived
        -:  586:  ///                                  type.
        -:  587:  ///     * op->walk([](ReturnOp returnOp, const WalkStage &stage) { ...});
        -:  588:  ///   WalkResult(Operation*|OpT, const WalkStage &stage) : Walk operations,
        -:  589:  ///          but allow for interruption/skipping.
        -:  590:  ///     * op->walk([](... op, const WalkStage &stage) {
        -:  591:  ///         // Skip the walk of this op based on some invariant.
        -:  592:  ///         if (some_invariant)
        -:  593:  ///           return WalkResult::skip();
        -:  594:  ///         // Interrupt, i.e cancel, the walk based on some invariant.
        -:  595:  ///         if (another_invariant)
        -:  596:  ///           return WalkResult::interrupt();
        -:  597:  ///         return WalkResult::advance();
        -:  598:  ///       });
        -:  599:  template <typename FnT, typename RetT = detail::walkResultType<FnT>>
        -:  600:  std::enable_if_t<llvm::function_traits<std::decay_t<FnT>>::num_args == 2,
        -:  601:                   RetT>
        -:  602:  walk(FnT &&callback) {
        -:  603:    return detail::walk(this, std::forward<FnT>(callback));
        -:  604:  }
        -:  605:
        -:  606:  //===--------------------------------------------------------------------===//
        -:  607:  // Uses
        -:  608:  //===--------------------------------------------------------------------===//
        -:  609:
        -:  610:  /// Drop all uses of results of this operation.
        -:  611:  void dropAllUses() {
        -:  612:    for (OpResult result : getOpResults())
        -:  613:      result.dropAllUses();
        -:  614:  }
        -:  615:
        -:  616:  using use_iterator = result_range::use_iterator;
        -:  617:  using use_range = result_range::use_range;
        -:  618:
        -:  619:  use_iterator use_begin() { return getResults().use_begin(); }
        -:  620:  use_iterator use_end() { return getResults().use_end(); }
        -:  621:
        -:  622:  /// Returns a range of all uses, which is useful for iterating over all uses.
        -:  623:  use_range getUses() { return getResults().getUses(); }
        -:  624:
        -:  625:  /// Returns true if this operation has exactly one use.
        -:  626:  bool hasOneUse() { return llvm::hasSingleElement(getUses()); }
        -:  627:
        -:  628:  /// Returns true if this operation has no uses.
        -:  629:  bool use_empty() { return getResults().use_empty(); }
        -:  630:
        -:  631:  /// Returns true if the results of this operation are used outside of the
        -:  632:  /// given block.
        -:  633:  bool isUsedOutsideOfBlock(Block *block) {
        -:  634:    return llvm::any_of(getOpResults(), [block](OpResult result) {
        -:  635:      return result.isUsedOutsideOfBlock(block);
        -:  636:    });
        -:  637:  }
        -:  638:
        -:  639:  //===--------------------------------------------------------------------===//
        -:  640:  // Users
        -:  641:  //===--------------------------------------------------------------------===//
        -:  642:
        -:  643:  using user_iterator = ValueUserIterator<use_iterator, OpOperand>;
        -:  644:  using user_range = iterator_range<user_iterator>;
        -:  645:
        -:  646:  user_iterator user_begin() { return user_iterator(use_begin()); }
        -:  647:  user_iterator user_end() { return user_iterator(use_end()); }
        -:  648:
        -:  649:  /// Returns a range of all users.
        -:  650:  user_range getUsers() { return {user_begin(), user_end()}; }
        -:  651:
        -:  652:  //===--------------------------------------------------------------------===//
        -:  653:  // Other
        -:  654:  //===--------------------------------------------------------------------===//
        -:  655:
        -:  656:  /// Emit an error with the op name prefixed, like "'dim' op " which is
        -:  657:  /// convenient for verifiers.
        -:  658:  InFlightDiagnostic emitOpError(const Twine &message = {});
        -:  659:
        -:  660:  /// Emit an error about fatal conditions with this operation, reporting up to
        -:  661:  /// any diagnostic handlers that may be listening.
        -:  662:  InFlightDiagnostic emitError(const Twine &message = {});
        -:  663:
        -:  664:  /// Emit a warning about this operation, reporting up to any diagnostic
        -:  665:  /// handlers that may be listening.
        -:  666:  InFlightDiagnostic emitWarning(const Twine &message = {});
        -:  667:
        -:  668:  /// Emit a remark about this operation, reporting up to any diagnostic
        -:  669:  /// handlers that may be listening.
        -:  670:  InFlightDiagnostic emitRemark(const Twine &message = {});
        -:  671:
        -:  672:private:
        -:  673:  //===--------------------------------------------------------------------===//
        -:  674:  // Ordering
        -:  675:  //===--------------------------------------------------------------------===//
        -:  676:
        -:  677:  /// This value represents an invalid index ordering for an operation within a
        -:  678:  /// block.
        -:  679:  static constexpr unsigned kInvalidOrderIdx = -1;
        -:  680:
        -:  681:  /// This value represents the stride to use when computing a new order for an
        -:  682:  /// operation.
        -:  683:  static constexpr unsigned kOrderStride = 5;
        -:  684:
        -:  685:  /// Update the order index of this operation of this operation if necessary,
        -:  686:  /// potentially recomputing the order of the parent block.
        -:  687:  void updateOrderIfNecessary();
        -:  688:
        -:  689:  /// Returns true if this operation has a valid order.
        -:  690:  bool hasValidOrder() { return orderIndex != kInvalidOrderIdx; }
        -:  691:
        -:  692:private:
        -:  693:  Operation(Location location, OperationName name, unsigned numResults,
        -:  694:            unsigned numSuccessors, unsigned numRegions,
        -:  695:            DictionaryAttr attributes, bool hasOperandStorage);
        -:  696:
        -:  697:  // Operations are deleted through the destroy() member because they are
        -:  698:  // allocated with malloc.
        -:  699:  ~Operation();
        -:  700:
        -:  701:  /// Returns the additional size necessary for allocating the given objects
        -:  702:  /// before an Operation in-memory.
        -:  703:  static size_t prefixAllocSize(unsigned numOutOfLineResults,
        -:  704:                                unsigned numInlineResults) {
        -:  705:    return sizeof(detail::OutOfLineOpResult) * numOutOfLineResults +
        -:  706:           sizeof(detail::InlineOpResult) * numInlineResults;
        -:  707:  }
        -:  708:  /// Returns the additional size allocated before this Operation in-memory.
        -:  709:  size_t prefixAllocSize() {
        -:  710:    unsigned numResults = getNumResults();
        -:  711:    unsigned numOutOfLineResults = OpResult::getNumTrailing(numResults);
        -:  712:    unsigned numInlineResults = OpResult::getNumInline(numResults);
        -:  713:    return prefixAllocSize(numOutOfLineResults, numInlineResults);
        -:  714:  }
        -:  715:
        -:  716:  /// Returns the operand storage object.
    #####:  717:  detail::OperandStorage &getOperandStorage() {
    #####:  718:    assert(hasOperandStorage && "expected operation to have operand storage");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####:  719:    return *getTrailingObjects<detail::OperandStorage>();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  720:  }
        -:  721:
        -:  722:  /// Returns a pointer to the use list for the given out-of-line result.
        -:  723:  detail::OutOfLineOpResult *getOutOfLineOpResult(unsigned resultNumber) {
        -:  724:    // Out-of-line results are stored in reverse order after (before in memory)
        -:  725:    // the inline results.
        -:  726:    return reinterpret_cast<detail::OutOfLineOpResult *>(getInlineOpResult(
        -:  727:               detail::OpResultImpl::getMaxInlineResults() - 1)) -
        -:  728:           ++resultNumber;
        -:  729:  }
        -:  730:
        -:  731:  /// Returns a pointer to the use list for the given inline result.
    #####:  732:  detail::InlineOpResult *getInlineOpResult(unsigned resultNumber) {
        -:  733:    // Inline results are stored in reverse order before the operation in
        -:  734:    // memory.
    #####:  735:    return reinterpret_cast<detail::InlineOpResult *>(this) - ++resultNumber;
call    0 never executed
        -:  736:  }
        -:  737:
        -:  738:  /// Returns a pointer to the use list for the given result, which may be
        -:  739:  /// either inline or out-of-line.
    #####:  740:  detail::OpResultImpl *getOpResultImpl(unsigned resultNumber) {
    #####:  741:    unsigned maxInlineResults = detail::OpResultImpl::getMaxInlineResults();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
    #####:  742:    if (resultNumber < maxInlineResults)
    #####:  743:      return getInlineOpResult(resultNumber);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
        -:  744:    return getOutOfLineOpResult(resultNumber - maxInlineResults);
        -:  745:  }
        -:  746:
        -:  747:  /// Provide a 'getParent' method for ilist_node_with_parent methods.
        -:  748:  /// We mark it as a const function because ilist_node_with_parent specifically
        -:  749:  /// requires a 'getParent() const' method. Once ilist_node removes this
        -:  750:  /// constraint, we should drop the const to fit the rest of the MLIR const
        -:  751:  /// model.
        -:  752:  Block *getParent() const { return block; }
        -:  753:
        -:  754:  /// The operation block that contains this operation.
        -:  755:  Block *block = nullptr;
        -:  756:
        -:  757:  /// This holds information about the source location the operation was defined
        -:  758:  /// or derived from.
        -:  759:  Location location;
        -:  760:
        -:  761:  /// Relative order of this operation in its parent block. Used for
        -:  762:  /// O(1) local dominance checks between operations.
        -:  763:  mutable unsigned orderIndex = 0;
        -:  764:
        -:  765:  const unsigned numResults;
        -:  766:  const unsigned numSuccs;
        -:  767:  const unsigned numRegions : 31;
        -:  768:
        -:  769:  /// This bit signals whether this operation has an operand storage or not. The
        -:  770:  /// operand storage may be elided for operations that are known to never have
        -:  771:  /// operands.
        -:  772:  bool hasOperandStorage : 1;
        -:  773:
        -:  774:  /// This holds the name of the operation.
        -:  775:  OperationName name;
        -:  776:
        -:  777:  /// This holds general named attributes for the operation.
        -:  778:  DictionaryAttr attrs;
        -:  779:
        -:  780:  // allow ilist_traits access to 'block' field.
        -:  781:  friend struct llvm::ilist_traits<Operation>;
        -:  782:
        -:  783:  // allow block to access the 'orderIndex' field.
        -:  784:  friend class Block;
        -:  785:
        -:  786:  // allow value to access the 'ResultStorage' methods.
        -:  787:  friend class Value;
        -:  788:
        -:  789:  // allow ilist_node_with_parent to access the 'getParent' method.
        -:  790:  friend class llvm::ilist_node_with_parent<Operation, Block>;
        -:  791:
        -:  792:  // This stuff is used by the TrailingObjects template.
        -:  793:  friend llvm::TrailingObjects<Operation, detail::OperandStorage, BlockOperand,
        -:  794:                               Region, OpOperand>;
    #####:  795:  size_t numTrailingObjects(OverloadToken<detail::OperandStorage>) const {
    #####:  796:    return hasOperandStorage ? 1 : 0;
branch  0 never executed
branch  1 never executed
        -:  797:  }
        -:  798:  size_t numTrailingObjects(OverloadToken<BlockOperand>) const {
        -:  799:    return numSuccs;
        -:  800:  }
        -:  801:  size_t numTrailingObjects(OverloadToken<Region>) const { return numRegions; }
        -:  802:};
        -:  803:
        -:  804:inline raw_ostream &operator<<(raw_ostream &os, const Operation &op) {
        -:  805:  const_cast<Operation &>(op).print(os, OpPrintingFlags().useLocalScope());
        -:  806:  return os;
        -:  807:}
        -:  808:
        -:  809:} // namespace mlir
        -:  810:
        -:  811:namespace llvm {
        -:  812:/// Cast from an (const) Operation * to a derived operation type.
        -:  813:template <typename T>
        -:  814:struct CastInfo<T, ::mlir::Operation *>
        -:  815:    : public ValueFromPointerCast<T, ::mlir::Operation,
        -:  816:                                  CastInfo<T, ::mlir::Operation *>> {
        -:  817:  static bool isPossible(::mlir::Operation *op) { return T::classof(op); }
        -:  818:};
        -:  819:template <typename T>
        -:  820:struct CastInfo<T, const ::mlir::Operation *>
        -:  821:    : public ConstStrippingForwardingCast<T, const ::mlir::Operation *,
        -:  822:                                          CastInfo<T, ::mlir::Operation *>> {};
        -:  823:
        -:  824:/// Cast from an (const) Operation & to a derived operation type.
        -:  825:template <typename T>
        -:  826:struct CastInfo<T, ::mlir::Operation>
        -:  827:    : public NullableValueCastFailed<T>,
        -:  828:      public DefaultDoCastIfPossible<T, ::mlir::Operation &,
        -:  829:                                     CastInfo<T, ::mlir::Operation>> {
        -:  830:  // Provide isPossible here because here we have the const-stripping from
        -:  831:  // ConstStrippingCast.
    #####:  832:  static bool isPossible(::mlir::Operation &val) { return T::classof(&val); }
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
call   166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
call   170 never executed
call   171 never executed
call   172 never executed
call   173 never executed
call   174 never executed
call   175 never executed
call   176 never executed
call   177 never executed
call   178 never executed
call   179 never executed
call   180 never executed
call   181 never executed
call   182 never executed
call   183 never executed
call   184 never executed
call   185 never executed
call   186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 never executed
call   196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 never executed
call   201 never executed
call   202 never executed
call   203 never executed
call   204 never executed
call   205 never executed
call   206 never executed
call   207 never executed
    #####:  833:  static T doCast(::mlir::Operation &val) { return T(&val); }
call    0 never executed
        -:  834:};
        -:  835:template <typename T>
        -:  836:struct CastInfo<T, const ::mlir::Operation>
        -:  837:    : public ConstStrippingForwardingCast<T, const ::mlir::Operation,
        -:  838:                                          CastInfo<T, ::mlir::Operation>> {};
        -:  839:
        -:  840:/// Cast (const) Operation * to itself. This is helpful to avoid SFINAE in
        -:  841:/// templated implementations that should work on both base and derived
        -:  842:/// operation types.
        -:  843:template <>
        -:  844:struct CastInfo<::mlir::Operation *, ::mlir::Operation *>
        -:  845:    : public NullableValueCastFailed<::mlir::Operation *>,
        -:  846:      public DefaultDoCastIfPossible<
        -:  847:          ::mlir::Operation *, ::mlir::Operation *,
        -:  848:          CastInfo<::mlir::Operation *, ::mlir::Operation *>> {
        -:  849:  static bool isPossible(::mlir::Operation *op) { return true; }
        -:  850:  static ::mlir::Operation *doCast(::mlir::Operation *op) { return op; }
        -:  851:};
        -:  852:template <>
        -:  853:struct CastInfo<const ::mlir::Operation *, const ::mlir::Operation *>
        -:  854:    : public ConstStrippingForwardingCast<
        -:  855:          const ::mlir::Operation *, const ::mlir::Operation *,
        -:  856:          CastInfo<::mlir::Operation *, ::mlir::Operation *>> {};
        -:  857:} // namespace llvm
        -:  858:
        -:  859:#endif // MLIR_IR_OPERATION_H
