        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/lib/Dialect/Tensor/Transforms/SplitPaddingPatterns.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tensor/Transforms/CMakeFiles/obj.MLIRTensorTransforms.dir/SplitPaddingPatterns.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tensor/Transforms/CMakeFiles/obj.MLIRTensorTransforms.dir/SplitPaddingPatterns.cpp.gcda
        -:    0:Runs:325587
        -:    1://===- SplitPaddingPatterns.cpp - Splitting tensor.pad Op -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to wrap a tensor.pad op with an scf.if op
        -:   10:/// to separate the cases where we don't need padding (all pad sizes are
        -:   11:/// actually zeros) and where we indeed need padding.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   18:#include "mlir/Dialect/Tensor/Transforms/Transforms.h"
        -:   19:#include "mlir/Dialect/Utils/StaticValueUtils.h"
        -:   20:#include "mlir/IR/PatternMatch.h"
        -:   21:#include "llvm/Support/Debug.h"
        -:   22:
        -:   23:#define DEBUG_TYPE "mlir-tensor-split-padding"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:/// Returns true if the the given `attrOrValue` is a constant zero.
function _ZL6isZeroN4mlir12OpFoldResultE called 0 returned 0% blocks executed 0%
    #####:   28:static bool isZero(OpFoldResult attrOrValue) {
    #####:   29:  if (Optional<int64_t> val = getConstantIntValue(attrOrValue))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   30:    return *val == 0;
branch  0 never executed
branch  1 never executed
    #####:   31:  return false;
        -:   32:}
        -:   33:
        -:   34:/// Gets the given `attrOrValue` as a Value by creating constant ops for
        -:   35:/// attributes.
function _ZL10getAsValueN4mlir12OpFoldResultERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   36:static Value getAsValue(OpFoldResult attrOrValue, OpBuilder &builder,
        -:   37:                        Location loc) {
    #####:   38:  if (Value val = attrOrValue.dyn_cast<Value>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   39:    return val;
    #####:   40:  auto attr = attrOrValue.get<Attribute>().cast<IntegerAttr>();
call    0 never executed
call    1 never executed
    #####:   41:  return builder.create<arith::ConstantIndexOp>(loc, attr.getInt());
call    0 never executed
call    1 never executed
        -:   42:}
        -:   43:
        -:   44:namespace {
        -:   45:
        -:   46:struct SplitPadding final : public OpRewritePattern<tensor::PadOp> {
        -:   47:  using OpRewritePattern::OpRewritePattern;
        -:   48:
function _ZNK12_GLOBAL__N_112SplitPadding15matchAndRewriteEN4mlir6tensor5PadOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   49:  LogicalResult matchAndRewrite(tensor::PadOp padOp,
        -:   50:                                PatternRewriter &rewriter) const override {
        -:   51:    // Avoid infinitely applying this pattern.
    #####:   52:    if (padOp->getParentOfType<scf::IfOp>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:      return failure();
        -:   54:
        -:   55:    // If all padding sizes are zero, we don't need to do anything.
    #####:   56:    SmallVector<OpFoldResult> lowPads = padOp.getMixedLowPad();
call    0 never executed
    #####:   57:    SmallVector<OpFoldResult> highPads = padOp.getMixedHighPad();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:    if (llvm::all_of(lowPads, isZero) && llvm::all_of(highPads, isZero))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   59:      return failure();
        -:   60:
        -:   61:    // Build the condition for the scf.if op: all pad sizes are zero.
    #####:   62:    Location loc = padOp.getLoc();
call    0 never executed
    #####:   63:    Value cstZero = rewriter.create<arith::ConstantIndexOp>(loc, 0);
call    0 never executed
    #####:   64:    SmallVector<Value> eqZeroCmpVals;
branch  0 never executed
branch  1 never executed
    #####:   65:    for (OpFoldResult pad : llvm::concat<OpFoldResult>(lowPads, highPads)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   66:      if (!isZero(pad))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:        eqZeroCmpVals.push_back(rewriter.create<arith::CmpIOp>(
call    0 never executed
    #####:   68:            loc, arith::CmpIPredicate::eq, getAsValue(pad, rewriter, loc),
call    0 never executed
    #####:   69:            cstZero));
call    0 never executed
call    1 never executed
        -:   70:    }
    #####:   71:    Value ifCond = eqZeroCmpVals.front();
branch  0 never executed
branch  1 never executed
    #####:   72:    for (Value cmp : llvm::makeArrayRef(eqZeroCmpVals).drop_front())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:      ifCond = rewriter.create<arith::AndIOp>(loc, ifCond, cmp);
call    0 never executed
        -:   74:
        -:   75:    // Build the scf.if op itself. For the "then" branch, we can elide the
        -:   76:    // padding. For the "else" branch, we retain the clone op.
    #####:   77:    auto thenBuilder = [&padOp](OpBuilder &builder, Location loc) {
    #####:   78:      builder.create<scf::YieldOp>(loc, padOp.getSource());
call    0 never executed
call    1 never executed
    #####:   79:    };
function _ZZNK12_GLOBAL__N_112SplitPadding15matchAndRewriteEN4mlir6tensor5PadOpERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationEE0_clES7_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   80:    auto elseBuilder = [&padOp](OpBuilder &builder, Location loc) {
    #####:   81:      Operation *newOp = builder.clone(*padOp);
call    0 never executed
    #####:   82:      builder.create<scf::YieldOp>(loc, newOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   83:    };
    #####:   84:    rewriter.replaceOpWithNewOp<scf::IfOp>(padOp, padOp.getType(), ifCond,
    #####:   85:                                           thenBuilder, elseBuilder);
call    0 never executed
call    1 never executed
    #####:   86:    return success();
branch  0 never executed
branch  1 never executed
        -:   87:  }
        -:   88:};
        -:   89:
        -:   90:} // namespace
        -:   91:
function _ZN4mlir6tensor28populateSplitPaddingPatternsERNS_17RewritePatternSetENS_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:   92:void tensor::populateSplitPaddingPatterns(RewritePatternSet &patterns,
        -:   93:                                          PatternBenefit baseBenefit) {
    #####:   94:  patterns.add<SplitPadding>(patterns.getContext(), baseBenefit);
call    0 never executed
    #####:   95:}
