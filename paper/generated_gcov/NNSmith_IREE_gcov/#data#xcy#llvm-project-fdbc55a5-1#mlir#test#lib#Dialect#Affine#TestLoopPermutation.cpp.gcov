        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-1/mlir/test/lib/Dialect/Affine/TestLoopPermutation.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestLoopPermutation.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestLoopPermutation.cpp.gcda
        -:    0:Runs:325560
        -:    1://===- TestLoopPermutation.cpp - Test affine loop permutation -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to test the affine for op permutation utility.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:
        -:   18:#define PASS_NAME "test-loop-permutation"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:namespace {
        -:   23:
        -:   24:/// This pass applies the permutation on the first maximal perfect nest.
        -:   25:struct TestLoopPermutation
        -:   26:    : public PassWrapper<TestLoopPermutation, OperationPass<>> {
function _ZN12_GLOBAL__N_119TestLoopPermutation13resolveTypeIDEv called 326617 returned 100% blocks executed 100%
   326617:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLoopPermutation)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:
function _ZNK12_GLOBAL__N_119TestLoopPermutation11getArgumentEv called 325601 returned 100% blocks executed 100%
   325601:   29:  StringRef getArgument() const final { return PASS_NAME; }
function _ZNK12_GLOBAL__N_119TestLoopPermutation14getDescriptionEv called 325560 returned 100% blocks executed 100%
   325560:   30:  StringRef getDescription() const final {
   325560:   31:    return "Tests affine loop permutation utility";
        -:   32:  }
function _ZN12_GLOBAL__N_119TestLoopPermutationC2Ev called 326617 returned 100% blocks executed 100%
   326617:   33:  TestLoopPermutation() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_119TestLoopPermutationC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   34:  TestLoopPermutation(const TestLoopPermutation &pass) : PassWrapper(pass){};
call    0 never executed
call    1 never executed
        -:   35:
        -:   36:  void runOnOperation() override;
        -:   37:
        -:   38:private:
        -:   39:  /// Permutation specifying loop i is mapped to permList[i] in
        -:   40:  /// transformed nest (with i going from outermost to innermost).
        -:   41:  ListOption<unsigned> permList{*this, "permutation-map",
        -:   42:                                llvm::cl::desc("Specify the loop permutation"),
        -:   43:                                llvm::cl::OneOrMore};
        -:   44:};
        -:   45:
        -:   46:} // namespace
        -:   47:
function _ZN12_GLOBAL__N_119TestLoopPermutation14runOnOperationEv called 857 returned 100% blocks executed 42%
      857:   48:void TestLoopPermutation::runOnOperation() {
        -:   49:
      857:   50:  SmallVector<unsigned, 4> permMap(permList.begin(), permList.end());
call    0 returned 100%
        -:   51:
     1714:   52:  SmallVector<AffineForOp, 2> forOps;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     857*:   53:  getOperation()->walk([&](AffineForOp forOp) { forOps.push_back(forOp); });
call    0 never executed
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
        -:   54:
     857*:   55:  for (auto forOp : forOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   56:    SmallVector<AffineForOp, 6> nest;
call    0 never executed
        -:   57:    // Get the maximal perfect nest.
    #####:   58:    getPerfectlyNestedLoops(nest, forOp);
call    0 never executed
        -:   59:    // Permute if the nest's size is consistent with the specified
        -:   60:    // permutation.
    #####:   61:    if (nest.size() >= 2 && nest.size() == permMap.size()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   62:      permuteLoops(nest, permMap);
call    0 never executed
        -:   63:    }
        -:   64:  }
      857:   65:}
        -:   66:
        -:   67:namespace mlir {
function _ZN4mlir31registerTestLoopPermutationPassEv called 325560 returned 100% blocks executed 100%
   325560:   68:void registerTestLoopPermutationPass() {
   325560:   69:  PassRegistration<TestLoopPermutation>();
call    0 returned 100%
   325560:   70:}
        -:   71:} // namespace mlir
