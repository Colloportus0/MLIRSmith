        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Analysis/DataFlow/TestDeadCodeAnalysis.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/DataFlow/TestDeadCodeAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/DataFlow/TestDeadCodeAnalysis.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestDeadCodeAnalysis.cpp - Test dead code analysis -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   11:#include "mlir/IR/Matchers.h"
        -:   12:#include "mlir/Pass/Pass.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::dataflow;
        -:   16:
        -:   17:/// Print the liveness of every block, control-flow edge, and the predecessors
        -:   18:/// of all regions, callables, and calls.
      512:   19:static void printAnalysisResults(DataFlowSolver &solver, Operation *op,
        -:   20:                                 raw_ostream &os) {
function _ZZL20printAnalysisResultsRN4mlir14DataFlowSolverEPNS_9OperationERN4llvm11raw_ostreamEENKUlS3_E_clES3_.isra.0 called 407733 returned 100% blocks executed 7%
   408757:   21:  op->walk([&](Operation *op) {
   407733:   22:    auto tag = op->getAttrOfType<StringAttr>("tag");
call    0 returned 100%
   407733:   23:    if (!tag)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   407733:   24:      return;
    #####:   25:    os << tag.getValue() << ":\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   26:    for (Region &region : op->getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   27:      os << " region #" << region.getRegionNumber() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   28:      for (Block &block : region) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   29:        os << "  ";
call    0 never executed
    #####:   30:        block.printAsOperand(os);
call    0 never executed
    #####:   31:        os << " = ";
call    0 never executed
    #####:   32:        auto *live = solver.lookupState<Executable>(&block);
call    0 never executed
    #####:   33:        if (live)
branch  0 never executed
branch  1 never executed
    #####:   34:          os << *live;
call    0 never executed
        -:   35:        else
    #####:   36:          os << "dead";
call    0 never executed
    #####:   37:        os << "\n";
call    0 never executed
    #####:   38:        for (Block *pred : block.getPredecessors()) {
branch  0 never executed
branch  1 never executed
    #####:   39:          os << "   from ";
call    0 never executed
    #####:   40:          pred->printAsOperand(os);
call    0 never executed
    #####:   41:          os << " = ";
call    0 never executed
    #####:   42:          auto *live = solver.lookupState<Executable>(
call    0 never executed
    #####:   43:              solver.getProgramPoint<CFGEdge>(pred, &block));
call    0 never executed
    #####:   44:          if (live)
branch  0 never executed
branch  1 never executed
    #####:   45:            os << *live;
call    0 never executed
        -:   46:          else
    #####:   47:            os << "dead";
call    0 never executed
    #####:   48:          os << "\n";
call    0 never executed
        -:   49:        }
        -:   50:      }
    #####:   51:      if (!region.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   52:        auto *preds = solver.lookupState<PredecessorState>(&region.front());
call    0 never executed
call    1 never executed
    #####:   53:        if (preds)
branch  0 never executed
branch  1 never executed
    #####:   54:          os << "region_preds: " << *preds << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:   55:      }
        -:   56:    }
    #####:   57:    auto *preds = solver.lookupState<PredecessorState>(op);
call    0 never executed
    #####:   58:    if (preds)
branch  0 never executed
branch  1 never executed
    #####:   59:      os << "op_preds: " << *preds << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:   60:  });
        -:   61:}
        -:   62:
        -:   63:namespace {
        -:   64:/// This is a simple analysis that implements a transfer function for constant
        -:   65:/// operations.
        -:   66:struct ConstantAnalysis : public DataFlowAnalysis {
      512:   67:  using DataFlowAnalysis::DataFlowAnalysis;
call    0 returned 100%
call    1 returned 100%
        -:   68:
function _ZN12_GLOBAL__N_116ConstantAnalysis10initializeEPN4mlir9OperationE called 512 returned 100% blocks executed 100%
      512:   69:  LogicalResult initialize(Operation *top) override {
function _ZZN12_GLOBAL__N_116ConstantAnalysis10initializeEPN4mlir9OperationEENKUlS3_E_clES3_.isra.0 called 407733 returned 100% blocks executed 86%
   407733:   70:    WalkResult result = top->walk([&](Operation *op) {
   407733:   71:      if (failed(visit(op)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   72:        return WalkResult::interrupt();
   407733:   73:      return WalkResult::advance();
      512:   74:    });
call    0 returned 100%
      512:   75:    return success(!result.wasInterrupted());
        -:   76:  }
        -:   77:
function _ZN12_GLOBAL__N_116ConstantAnalysis5visitEN4mlir12ProgramPointE called 407733 returned 100% blocks executed 96%
   407733:   78:  LogicalResult visit(ProgramPoint point) override {
   407733:   79:    Operation *op = point.get<Operation *>();
call    0 returned 100%
   407733:   80:    Attribute value;
   407733:   81:    if (matchPattern(op, m_Constant(&value))) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
    82441:   82:      auto *constant = getOrCreate<Lattice<ConstantValue>>(op->getResult(0));
call    0 returned 100%
    82441:   83:      propagateIfChanged(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
    82441:   84:          constant, constant->join(ConstantValue(value, op->getDialect())));
call    0 returned 100%
    82441:   85:      return success();
        -:   86:    }
   573472:   87:    setAllToUnknownConstants(op->getResults());
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
call    2 returned 100%
call    3 returned 100%
   368536:   88:    for (Region &region : op->getRegions())
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
    13864:   89:      setAllToUnknownConstants(region.getArguments());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   325292:   90:    return success();
        -:   91:  }
        -:   92:
        -:   93:  /// Set all given values as not constants.
function _ZN12_GLOBAL__N_116ConstantAnalysis24setAllToUnknownConstantsEN4mlir10ValueRangeE called 339156 returned 100% blocks executed 100%
   339156:   94:  void setAllToUnknownConstants(ValueRange values) {
   862088:   95:    for (Value value : values) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
   261466:   96:      auto *constant = getOrCreate<Lattice<ConstantValue>>(value);
call    0 returned 100%
   261466:   97:      propagateIfChanged(constant,
call    0 returned 100%
call    1 returned 100%
   261466:   98:                         constant->join(ConstantValue::getUnknownConstant()));
        -:   99:    }
   339156:  100:  }
        -:  101:};
        -:  102:
        -:  103:/// This is a simple pass that runs dead code analysis with a constant value
        -:  104:/// provider that only understands constant operations.
  129238*:  105:struct TestDeadCodeAnalysisPass
call    0 never executed
call    1 returned 100%
        -:  106:    : public PassWrapper<TestDeadCodeAnalysisPass, OperationPass<>> {
function _ZN12_GLOBAL__N_124TestDeadCodeAnalysisPass13resolveTypeIDEv called 129238 returned 100% blocks executed 100%
   129238:  107:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestDeadCodeAnalysisPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  108:
function _ZNK12_GLOBAL__N_124TestDeadCodeAnalysisPass11getArgumentEv called 128660 returned 100% blocks executed 100%
   128660:  109:  StringRef getArgument() const override { return "test-dead-code-analysis"; }
        -:  110:
function _ZN12_GLOBAL__N_124TestDeadCodeAnalysisPass14runOnOperationEv called 512 returned 100% blocks executed 73%
      512:  111:  void runOnOperation() override {
      512:  112:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  113:
      512:  114:    DataFlowSolver solver;
call    0 returned 100%
      512:  115:    solver.load<DeadCodeAnalysis>();
call    0 returned 100%
      512:  116:    solver.load<ConstantAnalysis>();
call    0 returned 100%
      512:  117:    if (failed(solver.initializeAndRun(op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  118:      return signalPassFailure();
call    0 never executed
call    1 never executed
      512:  119:    printAnalysisResults(solver, op, llvm::errs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  120:  }
        -:  121:};
        -:  122:} // end anonymous namespace
        -:  123:
        -:  124:namespace mlir {
        -:  125:namespace test {
function _ZN4mlir4test32registerTestDeadCodeAnalysisPassEv called 128636 returned 100% blocks executed 100%
   128636:  126:void registerTestDeadCodeAnalysisPass() {
   128636:  127:  PassRegistration<TestDeadCodeAnalysisPass>();
call    0 returned 100%
   128636:  128:}
        -:  129:} // end namespace test
        -:  130:} // end namespace mlir
