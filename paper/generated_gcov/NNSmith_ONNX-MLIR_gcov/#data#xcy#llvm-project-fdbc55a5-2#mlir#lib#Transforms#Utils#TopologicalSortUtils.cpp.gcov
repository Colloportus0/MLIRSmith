        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/Utils/TopologicalSortUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/TopologicalSortUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/TopologicalSortUtils.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- TopologicalSortUtils.h - Topological sort utilities ------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Transforms/TopologicalSortUtils.h"
        -:   10:#include "mlir/IR/OpDefinition.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14:/// Return `true` if the given operation is ready to be scheduled.
function _ZL9isOpReadyPN4mlir9OperationERN4llvm8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEENS2_12function_refIFbNS_5ValueES1_EEE called 12955 returned 100% blocks executed 100%
    12955:   15:static bool isOpReady(Operation *op, DenseSet<Operation *> &unscheduledOps,
        -:   16:                      function_ref<bool(Value, Operation *)> isOperandReady) {
        -:   17:  // An operation is ready to be scheduled if all its operands are ready. An
        -:   18:  // operation is ready if:
function _ZZL9isOpReadyPN4mlir9OperationERN4llvm8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEENS2_12function_refIFbNS_5ValueES1_EEEENKUlS9_E_clES9_ called 456346 returned 100% blocks executed 83%
   469301:   19:  const auto isReady = [&](Value value) {
        -:   20:    // - the user-provided callback marks it as ready,
  456346*:   21:    if (isOperandReady && isOperandReady(value, op))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   22:      return true;
   456346:   23:    Operation *parent = value.getDefiningOp();
call    0 returned 100%
        -:   24:    // - it is a block argument,
   456346:   25:    if (!parent)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   26:      return true;
        -:   27:    // - or it is not defined by an unscheduled op (and also not nested within
        -:   28:    //   an unscheduled op).
   789380:   29:    do {
        -:   30:      // Stop traversal when op under examination is reached.
   789380:   31:      if (parent == op)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   32:        return true;
   394690:   33:      if (unscheduledOps.contains(parent))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   34:        return false;
   789380:   35:    } while ((parent = parent->getParentOp()));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
        -:   36:    // No unscheduled op found.
        -:   37:    return true;
    12955:   38:  };
        -:   39:
        -:   40:  // An operation is recursively ready to be scheduled of it and its nested
        -:   41:  // operations are ready.
function _ZZL9isOpReadyPN4mlir9OperationERN4llvm8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEENS2_12function_refIFbNS_5ValueES1_EEEENKUlS1_E0_clES1_.isra.0 called 387034 returned 100% blocks executed 86%
   387034:   42:  WalkResult readyToSchedule = op->walk([&](Operation *nestedOp) {
   387034:   43:    return llvm::all_of(nestedOp->getOperands(),
call    0 returned 100%
   387034:   44:                        [&](Value operand) { return isReady(operand); })
call    0 returned 100%
        -:   45:               ? WalkResult::advance()
   387034:   46:               : WalkResult::interrupt();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    12955:   47:  });
call    0 returned 100%
    12955:   48:  return !readyToSchedule.wasInterrupted();
        -:   49:}
        -:   50:
function _ZN4mlir17sortTopologicallyEPNS_5BlockEN4llvm14iterator_rangeINS2_14ilist_iteratorINS2_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEEEENS2_12function_refIFbNS_5ValueEPS7_EEE called 499 returned 100% blocks executed 81%
      499:   51:bool mlir::sortTopologically(
        -:   52:    Block *block, llvm::iterator_range<Block::iterator> ops,
        -:   53:    function_ref<bool(Value, Operation *)> isOperandReady) {
      499:   54:  if (ops.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   55:    return true;
        -:   56:
        -:   57:  // The set of operations that have not yet been scheduled.
      499:   58:  DenseSet<Operation *> unscheduledOps;
call    0 returned 100%
        -:   59:  // Mark all operations as unscheduled.
    13454:   60:  for (Operation &op : ops)
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
    12955:   61:    unscheduledOps.insert(&op);
call    0 returned 100%
        -:   62:
        -:   63:  Block::iterator nextScheduledOp = ops.begin();
      998:   64:  Block::iterator end = ops.end();
        -:   65:
        -:   66:  bool allOpsScheduled = true;
      998:   67:  while (!unscheduledOps.empty()) {
      499:   68:    bool scheduledAtLeastOnce = false;
        -:   69:
        -:   70:    // Loop over the ops that are not sorted yet, try to find the ones "ready",
        -:   71:    // i.e. the ones for which there aren't any operand produced by an op in the
        -:   72:    // set, and "schedule" it (move it before the `nextScheduledOp`).
      499:   73:    for (Operation &op :
    13454:   74:         llvm::make_early_inc_range(llvm::make_range(nextScheduledOp, end))) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
call    4 returned 100%
   12955*:   75:      if (!isOpReady(&op, unscheduledOps, isOperandReady))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   76:        continue;
        -:   77:
        -:   78:      // Schedule the operation by moving it to the start.
    12955:   79:      unscheduledOps.erase(&op);
call    0 returned 100%
    12955:   80:      op.moveBefore(block, nextScheduledOp);
call    0 returned 100%
    12955:   81:      scheduledAtLeastOnce = true;
        -:   82:      // Move the iterator forward if we schedule the operation at the front.
    12955:   83:      if (&op == &*nextScheduledOp)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    12955:   84:        ++nextScheduledOp;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   85:    }
        -:   86:    // If no operations were scheduled, give up and advance the iterator.
      499:   87:    if (!scheduledAtLeastOnce) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
    #####:   88:      allOpsScheduled = false;
    #####:   89:      unscheduledOps.erase(&*nextScheduledOp);
call    0 never executed
call    1 never executed
     998*:   90:      ++nextScheduledOp;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   91:    }
        -:   92:  }
        -:   93:
      499:   94:  return allOpsScheduled;
call    0 returned 100%
        -:   95:}
        -:   96:
function _ZN4mlir17sortTopologicallyEPNS_5BlockEN4llvm12function_refIFbNS_5ValueEPNS_9OperationEEEE called 501 returned 100% blocks executed 64%
      501:   97:bool mlir::sortTopologically(
        -:   98:    Block *block, function_ref<bool(Value, Operation *)> isOperandReady) {
      501:   99:  if (block->empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:  100:    return true;
      499:  101:  if (block->back().hasTrait<OpTrait::IsTerminator>())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  102:    return sortTopologically(block, block->without_terminator(),
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  103:                             isOperandReady);
      499:  104:  return sortTopologically(block, *block, isOperandReady);
call    0 returned 100%
        -:  105:}
        -:  106:
function _ZN4mlir25computeTopologicalSortingEN4llvm15MutableArrayRefIPNS_9OperationEEENS0_12function_refIFbNS_5ValueES3_EEE called 0 returned 0% blocks executed 0%
    #####:  107:bool mlir::computeTopologicalSorting(
        -:  108:    MutableArrayRef<Operation *> ops,
        -:  109:    function_ref<bool(Value, Operation *)> isOperandReady) {
    #####:  110:  if (ops.empty())
branch  0 never executed
branch  1 never executed
        -:  111:    return true;
        -:  112:
        -:  113:  // The set of operations that have not yet been scheduled.
    #####:  114:  DenseSet<Operation *> unscheduledOps;
call    0 never executed
        -:  115:
        -:  116:  // Mark all operations as unscheduled.
    #####:  117:  for (Operation *op : ops)
branch  0 never executed
branch  1 never executed
    #####:  118:    unscheduledOps.insert(op);
call    0 never executed
        -:  119:
    #####:  120:  unsigned nextScheduledOp = 0;
        -:  121:
    #####:  122:  bool allOpsScheduled = true;
    #####:  123:  while (!unscheduledOps.empty()) {
        -:  124:    bool scheduledAtLeastOnce = false;
        -:  125:
        -:  126:    // Loop over the ops that are not sorted yet, try to find the ones "ready",
        -:  127:    // i.e. the ones for which there aren't any operand produced by an op in the
        -:  128:    // set, and "schedule" it (swap it with the op at `nextScheduledOp`).
    #####:  129:    for (unsigned i = nextScheduledOp; i < ops.size(); ++i) {
branch  0 never executed
branch  1 never executed
    #####:  130:      if (!isOpReady(ops[i], unscheduledOps, isOperandReady))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  131:        continue;
        -:  132:
        -:  133:      // Schedule the operation by moving it to the start.
    #####:  134:      unscheduledOps.erase(ops[i]);
call    0 never executed
    #####:  135:      std::swap(ops[i], ops[nextScheduledOp]);
branch  0 never executed
branch  1 never executed
    #####:  136:      scheduledAtLeastOnce = true;
    #####:  137:      ++nextScheduledOp;
        -:  138:    }
        -:  139:
        -:  140:    // If no operations were scheduled, just schedule the first op and continue.
    #####:  141:    if (!scheduledAtLeastOnce) {
branch  0 never executed
branch  1 never executed
    #####:  142:      allOpsScheduled = false;
    #####:  143:      unscheduledOps.erase(ops[nextScheduledOp++]);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  144:    }
        -:  145:  }
        -:  146:
    #####:  147:  return allOpsScheduled;
call    0 never executed
        -:  148:}
