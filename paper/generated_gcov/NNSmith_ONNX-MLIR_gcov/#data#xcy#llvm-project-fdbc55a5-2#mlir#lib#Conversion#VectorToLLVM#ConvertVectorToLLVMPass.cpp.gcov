        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVMPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/VectorToLLVM/CMakeFiles/obj.MLIRVectorToLLVM.dir/ConvertVectorToLLVMPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/VectorToLLVM/CMakeFiles/obj.MLIRVectorToLLVM.dir/ConvertVectorToLLVMPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- VectorToLLVM.cpp - Conversion from Vector to the LLVM dialect ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/VectorToLLVM/ConvertVectorToLLVM.h"
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   12:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   13:#include "mlir/Dialect/AMX/AMXDialect.h"
        -:   14:#include "mlir/Dialect/AMX/Transforms.h"
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/ArmNeon/ArmNeonDialect.h"
        -:   17:#include "mlir/Dialect/ArmSVE/ArmSVEDialect.h"
        -:   18:#include "mlir/Dialect/ArmSVE/Transforms.h"
        -:   19:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   20:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   21:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   22:#include "mlir/Dialect/Vector/Transforms/VectorRewritePatterns.h"
        -:   23:#include "mlir/Dialect/X86Vector/Transforms.h"
        -:   24:#include "mlir/Dialect/X86Vector/X86VectorDialect.h"
        -:   25:#include "mlir/Pass/Pass.h"
        -:   26:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   27:
        -:   28:namespace mlir {
        -:   29:#define GEN_PASS_DEF_CONVERTVECTORTOLLVM
        -:   30:#include "mlir/Conversion/Passes.h.inc"
        -:   31:} // namespace mlir
        -:   32:
        -:   33:using namespace mlir;
        -:   34:using namespace mlir::vector;
        -:   35:
        -:   36:namespace {
    #####:   37:struct LowerVectorToLLVMPass
call    0 never executed
        -:   38:    : public impl::ConvertVectorToLLVMBase<LowerVectorToLLVMPass> {
function _ZN12_GLOBAL__N_121LowerVectorToLLVMPassC2ERKN4mlir24LowerVectorToLLVMOptionsE called 129885 returned 100% blocks executed 70%
   129885:   39:  LowerVectorToLLVMPass(const LowerVectorToLLVMOptions &options) {
call    0 returned 100%
   129885:   40:    this->reassociateFPReductions = options.reassociateFPReductions;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129885:   41:    this->force32BitVectorIndices = options.force32BitVectorIndices;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129885:   42:    this->armNeon = options.armNeon;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129885:   43:    this->armSVE = options.armSVE;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129885:   44:    this->amx = options.amx;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129885:   45:    this->x86Vector = options.x86Vector;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129885:   46:  }
        -:   47:  // Override explicitly to allow conditional dialect dependence.
function _ZNK12_GLOBAL__N_121LowerVectorToLLVMPass20getDependentDialectsERN4mlir15DialectRegistryE called 1249 returned 100% blocks executed 67%
     1249:   48:  void getDependentDialects(DialectRegistry &registry) const override {
     1249:   49:    registry.insert<LLVM::LLVMDialect>();
call    0 returned 100%
     1249:   50:    registry.insert<arith::ArithDialect>();
call    0 returned 100%
     1249:   51:    registry.insert<memref::MemRefDialect>();
call    0 returned 100%
     1249:   52:    if (armNeon)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:      registry.insert<arm_neon::ArmNeonDialect>();
call    0 never executed
     1249:   54:    if (armSVE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   55:      registry.insert<arm_sve::ArmSVEDialect>();
call    0 never executed
     1249:   56:    if (amx)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   57:      registry.insert<amx::AMXDialect>();
call    0 never executed
     1249:   58:    if (x86Vector)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   59:      registry.insert<x86vector::X86VectorDialect>();
call    0 never executed
     1249:   60:  }
        -:   61:  void runOnOperation() override;
        -:   62:};
        -:   63:} // namespace
        -:   64:
function _ZN12_GLOBAL__N_121LowerVectorToLLVMPass14runOnOperationEv called 1034 returned 100% blocks executed 86%
     1034:   65:void LowerVectorToLLVMPass::runOnOperation() {
        -:   66:  // Perform progressive lowering of operations on slices and
        -:   67:  // all contraction operations. Also applies folding and DCE.
     1034:   68:  {
     1034:   69:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     1034:   70:    populateVectorToVectorCanonicalizationPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1034:   71:    populateVectorBroadcastLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1034:   72:    populateVectorContractLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1034:   73:    populateVectorMaskOpLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1034:   74:    populateVectorShapeCastLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1034:   75:    populateVectorTransposeLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
        -:   76:    // Vector transfer ops with rank > 1 should be lowered with VectorToSCF.
     1034:   77:    populateVectorTransferLoweringPatterns(patterns, /*maxTransferRank=*/1);
call    0 returned 100%
call    1 returned 100%
     1034:   78:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   79:  }
        -:   80:
        -:   81:  // Convert to the LLVM IR dialect.
     1034:   82:  LLVMTypeConverter converter(&getContext());
call    0 returned 100%
call    1 returned 100%
     2068:   83:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1034:   84:  populateVectorMaskMaterializationPatterns(patterns, force32BitVectorIndices);
call    0 returned 100%
call    1 returned 100%
     1034:   85:  populateVectorTransferLoweringPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
     1034:   86:  populateVectorToLLVMMatrixConversionPatterns(converter, patterns);
call    0 returned 100%
     1034:   87:  populateVectorToLLVMConversionPatterns(
     1034:   88:      converter, patterns, reassociateFPReductions, force32BitVectorIndices);
call    0 returned 100%
     1034:   89:  populateVectorToLLVMMatrixConversionPatterns(converter, patterns);
call    0 returned 100%
        -:   90:
        -:   91:  // Architecture specific augmentations.
     2068:   92:  LLVMConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1034:   93:  target.addLegalDialect<arith::ArithDialect>();
call    0 returned 100%
     1034:   94:  target.addLegalDialect<memref::MemRefDialect>();
call    0 returned 100%
     1034:   95:  target.addLegalOp<UnrealizedConversionCastOp>();
call    0 returned 100%
     1034:   96:  if (armNeon) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   97:    // TODO: we may or may not want to include in-dialect lowering to
        -:   98:    // LLVM-compatible operations here. So far, all operations in the dialect
        -:   99:    // can be translated to LLVM IR so there is no conversion necessary.
    #####:  100:    target.addLegalDialect<arm_neon::ArmNeonDialect>();
call    0 never executed
        -:  101:  }
     1034:  102:  if (armSVE) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  103:    configureArmSVELegalizeForExportTarget(target);
call    0 never executed
    #####:  104:    populateArmSVELegalizeForLLVMExportPatterns(converter, patterns);
call    0 never executed
        -:  105:  }
     1034:  106:  if (amx) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  107:    configureAMXLegalizeForExportTarget(target);
call    0 never executed
    #####:  108:    populateAMXLegalizeForLLVMExportPatterns(converter, patterns);
call    0 never executed
        -:  109:  }
     1034:  110:  if (x86Vector) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  111:    configureX86VectorLegalizeForExportTarget(target);
call    0 never executed
    #####:  112:    populateX86VectorLegalizeForLLVMExportPatterns(converter, patterns);
call    0 never executed
        -:  113:  }
        -:  114:
     3102:  115:  if (failed(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2068:  116:          applyPartialConversion(getOperation(), target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    #####:  117:    signalPassFailure();
call    0 never executed
     1034:  118:}
        -:  119:
        -:  120:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir29createConvertVectorToLLVMPassERKNS_24LowerVectorToLLVMOptionsE called 129885 returned 100% blocks executed 100%
   129885:  121:mlir::createConvertVectorToLLVMPass(const LowerVectorToLLVMOptions &options) {
   129885:  122:  return std::make_unique<LowerVectorToLLVMPass>(options);
call    0 returned 100%
        -:  123:}
