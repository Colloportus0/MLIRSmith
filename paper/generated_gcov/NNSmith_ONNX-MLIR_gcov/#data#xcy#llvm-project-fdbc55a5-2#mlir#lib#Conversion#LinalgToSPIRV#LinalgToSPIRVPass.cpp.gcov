        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/LinalgToSPIRV/LinalgToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/LinalgToSPIRV/CMakeFiles/obj.MLIRLinalgToSPIRV.dir/LinalgToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/LinalgToSPIRV/CMakeFiles/obj.MLIRLinalgToSPIRV.dir/LinalgToSPIRVPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- LinalgToSPIRVPass.cpp - Linalg to SPIR-V Passes --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/LinalgToSPIRV/LinalgToSPIRVPass.h"
        -:   10:
        -:   11:#include "mlir/Conversion/LinalgToSPIRV/LinalgToSPIRV.h"
        -:   12:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   13:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   14:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:#define GEN_PASS_DEF_CONVERTLINALGTOSPIRV
        -:   19:#include "mlir/Conversion/Passes.h.inc"
        -:   20:} // namespace mlir
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:namespace {
        -:   25:/// A pass converting MLIR Linalg ops into SPIR-V ops.
  128636*:   26:class LinalgToSPIRVPass
call    0 never executed
call    1 returned 100%
        -:   27:    : public impl::ConvertLinalgToSPIRVBase<LinalgToSPIRVPass> {
        -:   28:  void runOnOperation() override;
        -:   29:};
        -:   30:} // namespace
        -:   31:
function _ZN12_GLOBAL__N_117LinalgToSPIRVPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   32:void LinalgToSPIRVPass::runOnOperation() {
    #####:   33:  MLIRContext *context = &getContext();
call    0 never executed
    #####:   34:  ModuleOp module = getOperation();
call    0 never executed
        -:   35:
    #####:   36:  auto targetAttr = spirv::lookupTargetEnvOrDefault(module);
call    0 never executed
    #####:   37:  std::unique_ptr<ConversionTarget> target =
    #####:   38:      SPIRVConversionTarget::get(targetAttr);
call    0 never executed
call    1 never executed
        -:   39:
    #####:   40:  SPIRVTypeConverter typeConverter(targetAttr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   41:  RewritePatternSet patterns(context);
call    0 never executed
call    1 never executed
    #####:   42:  populateLinalgToSPIRVPatterns(typeConverter, patterns);
call    0 never executed
    #####:   43:  populateBuiltinFuncToSPIRVPatterns(typeConverter, patterns);
call    0 never executed
        -:   44:
        -:   45:  // Allow builtin ops.
    #####:   46:  target->addLegalOp<ModuleOp>();
call    0 never executed
function _ZZN12_GLOBAL__N_117LinalgToSPIRVPass14runOnOperationEvENKUlN4mlir4func6FuncOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   47:  target->addDynamicallyLegalOp<func::FuncOp>([&](func::FuncOp op) {
call    0 never executed
    #####:   48:    return typeConverter.isSignatureLegal(op.getFunctionType()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   49:           typeConverter.isLegal(&op.getBody());
call    0 never executed
call    1 never executed
        -:   50:  });
        -:   51:
    #####:   52:  if (failed(applyFullConversion(module, *target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   53:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   54:}
        -:   55:
function _ZN4mlir23createLinalgToSPIRVPassEv called 128636 returned 100% blocks executed 100%
   128636:   56:std::unique_ptr<OperationPass<ModuleOp>> mlir::createLinalgToSPIRVPass() {
   128636:   57:  return std::make_unique<LinalgToSPIRVPass>();
call    0 returned 100%
        -:   58:}
