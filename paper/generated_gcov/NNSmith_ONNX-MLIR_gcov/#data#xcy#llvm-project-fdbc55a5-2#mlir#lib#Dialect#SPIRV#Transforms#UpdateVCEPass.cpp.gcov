        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SPIRV/Transforms/UpdateVCEPass.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/UpdateVCEPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/UpdateVCEPass.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- DeduceVersionExtensionCapabilityPass.cpp ---------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to deduce minimal version/extension/capability
        -:   10:// requirements for a spirv::ModuleOp.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/SPIRV/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/TargetAndABI.h"
        -:   20:#include "mlir/IR/Builders.h"
        -:   21:#include "mlir/IR/Visitors.h"
        -:   22:#include "llvm/ADT/SetVector.h"
        -:   23:#include "llvm/ADT/SmallSet.h"
        -:   24:#include "llvm/ADT/StringExtras.h"
        -:   25:
        -:   26:namespace mlir {
        -:   27:namespace spirv {
        -:   28:#define GEN_PASS_DEF_SPIRVUPDATEVCE
        -:   29:#include "mlir/Dialect/SPIRV/Transforms/Passes.h.inc"
        -:   30:} // namespace spirv
        -:   31:} // namespace mlir
        -:   32:
        -:   33:using namespace mlir;
        -:   34:
        -:   35:namespace {
        -:   36:/// Pass to deduce minimal version/extension/capability requirements for a
        -:   37:/// spirv::ModuleOp.
   166096:   38:class UpdateVCEPass final
call    0 returned 100%
call    1 returned 100%
        -:   39:    : public spirv::impl::SPIRVUpdateVCEBase<UpdateVCEPass> {
        -:   40:  void runOnOperation() override;
        -:   41:};
        -:   42:} // namespace
        -:   43:
        -:   44:/// Checks that `candidates` extension requirements are possible to be satisfied
        -:   45:/// with the given `targetEnv` and updates `deducedExtensions` if so. Emits
        -:   46:/// errors attaching to the given `op` on failures.
        -:   47:///
        -:   48:///  `candidates` is a vector of vector for extension requirements following
        -:   49:/// ((Extension::A OR Extension::B) AND (Extension::C OR Extension::D))
        -:   50:/// convention.
function _ZL35checkAndUpdateExtensionRequirementsPN4mlir9OperationERKNS_5spirv9TargetEnvERKN4llvm15SmallVectorImplINS6_8ArrayRefINS2_9ExtensionEEEEERNS6_9SetVectorIS9_St6vectorIS9_SaIS9_EENS6_8DenseSetIS9_NS6_12DenseMapInfoIS9_vEEEEEE called 0 returned 0% blocks executed 0%
    #####:   51:static LogicalResult checkAndUpdateExtensionRequirements(
        -:   52:    Operation *op, const spirv::TargetEnv &targetEnv,
        -:   53:    const spirv::SPIRVType::ExtensionArrayRefVector &candidates,
        -:   54:    SetVector<spirv::Extension> &deducedExtensions) {
    #####:   55:  for (const auto &ors : candidates) {
branch  0 never executed
branch  1 never executed
    #####:   56:    if (Optional<spirv::Extension> chosen = targetEnv.allows(ors)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:      deducedExtensions.insert(*chosen);
call    0 never executed
        -:   58:    } else {
    #####:   59:      SmallVector<StringRef, 4> extStrings;
    #####:   60:      for (spirv::Extension ext : ors)
branch  0 never executed
branch  1 never executed
    #####:   61:        extStrings.push_back(spirv::stringifyExtension(ext));
call    0 never executed
call    1 never executed
        -:   62:
    #####:   63:      return op->emitError("'")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   64:             << op->getName() << "' requires at least one extension in ["
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   65:             << llvm::join(extStrings, ", ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   66:             << "] but none allowed in target environment";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   67:    }
        -:   68:  }
    #####:   69:  return success();
        -:   70:}
        -:   71:
        -:   72:/// Checks that `candidates`capability requirements are possible to be satisfied
        -:   73:/// with the given `targetEnv` and updates `deducedCapabilities` if so. Emits
        -:   74:/// errors attaching to the given `op` on failures.
        -:   75:///
        -:   76:///  `candidates` is a vector of vector for capability requirements following
        -:   77:/// ((Capability::A OR Capability::B) AND (Capability::C OR Capability::D))
        -:   78:/// convention.
function _ZL36checkAndUpdateCapabilityRequirementsPN4mlir9OperationERKNS_5spirv9TargetEnvERKN4llvm15SmallVectorImplINS6_8ArrayRefINS2_10CapabilityEEEEERNS6_9SetVectorIS9_St6vectorIS9_SaIS9_EENS6_8DenseSetIS9_NS6_12DenseMapInfoIS9_vEEEEEE called 0 returned 0% blocks executed 0%
    #####:   79:static LogicalResult checkAndUpdateCapabilityRequirements(
        -:   80:    Operation *op, const spirv::TargetEnv &targetEnv,
        -:   81:    const spirv::SPIRVType::CapabilityArrayRefVector &candidates,
        -:   82:    SetVector<spirv::Capability> &deducedCapabilities) {
    #####:   83:  for (const auto &ors : candidates) {
branch  0 never executed
branch  1 never executed
    #####:   84:    if (Optional<spirv::Capability> chosen = targetEnv.allows(ors)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:      deducedCapabilities.insert(*chosen);
call    0 never executed
        -:   86:    } else {
    #####:   87:      SmallVector<StringRef, 4> capStrings;
    #####:   88:      for (spirv::Capability cap : ors)
branch  0 never executed
branch  1 never executed
    #####:   89:        capStrings.push_back(spirv::stringifyCapability(cap));
call    0 never executed
call    1 never executed
        -:   90:
    #####:   91:      return op->emitError("'")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   92:             << op->getName() << "' requires at least one capability in ["
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   93:             << llvm::join(capStrings, ", ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   94:             << "] but none allowed in target environment";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   95:    }
        -:   96:  }
    #####:   97:  return success();
        -:   98:}
        -:   99:
function _ZN12_GLOBAL__N_113UpdateVCEPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  100:void UpdateVCEPass::runOnOperation() {
    #####:  101:  spirv::ModuleOp module = getOperation();
call    0 never executed
        -:  102:
    #####:  103:  spirv::TargetEnvAttr targetAttr = spirv::lookupTargetEnv(module);
call    0 never executed
    #####:  104:  if (!targetAttr) {
branch  0 never executed
branch  1 never executed
    #####:  105:    module.emitError("missing 'spirv.target_env' attribute");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  106:    return signalPassFailure();
call    0 never executed
        -:  107:  }
        -:  108:
    #####:  109:  spirv::TargetEnv targetEnv(targetAttr);
call    0 never executed
    #####:  110:  spirv::Version allowedVersion = targetAttr.getVersion();
call    0 never executed
        -:  111:
    #####:  112:  spirv::Version deducedVersion = spirv::Version::V_1_0;
    #####:  113:  SetVector<spirv::Extension> deducedExtensions;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  114:  SetVector<spirv::Capability> deducedCapabilities;
call    0 never executed
call    1 never executed
        -:  115:
        -:  116:  // Walk each SPIR-V op to deduce the minimal version/extension/capability
        -:  117:  // requirements.
function _ZZN12_GLOBAL__N_113UpdateVCEPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_ called 0 returned 0% blocks executed 0%
    #####:  118:  WalkResult walkResult = module.walk([&](Operation *op) -> WalkResult {
        -:  119:    // Op min version requirements
    #####:  120:    if (auto minVersionIfx = dyn_cast<spirv::QueryMinVersionInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:      Optional<spirv::Version> minVersion = minVersionIfx.getMinVersion();
call    0 never executed
    #####:  122:      if (minVersion) {
branch  0 never executed
branch  1 never executed
    #####:  123:        deducedVersion = std::max(deducedVersion, *minVersion);
branch  0 never executed
branch  1 never executed
    #####:  124:        if (deducedVersion > allowedVersion) {
branch  0 never executed
branch  1 never executed
    #####:  125:          return op->emitError("'")
call    0 never executed
call    1 never executed
    #####:  126:                 << op->getName() << "' requires min version "
call    0 never executed
call    1 never executed
    #####:  127:                 << spirv::stringifyVersion(deducedVersion)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  128:                 << " but target environment allows up to "
    #####:  129:                 << spirv::stringifyVersion(allowedVersion);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  130:        }
        -:  131:      }
        -:  132:    }
        -:  133:
        -:  134:    // Op extension requirements
    #####:  135:    if (auto extensions = dyn_cast<spirv::QueryExtensionInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  136:      if (failed(checkAndUpdateExtensionRequirements(
branch  0 never executed
branch  1 never executed
    #####:  137:              op, targetEnv, extensions.getExtensions(), deducedExtensions)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  138:        return WalkResult::interrupt();
        -:  139:
        -:  140:    // Op capability requirements
    #####:  141:    if (auto capabilities = dyn_cast<spirv::QueryCapabilityInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  142:      if (failed(checkAndUpdateCapabilityRequirements(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:              op, targetEnv, capabilities.getCapabilities(),
branch  0 never executed
branch  1 never executed
    #####:  144:              deducedCapabilities)))
call    0 never executed
    #####:  145:        return WalkResult::interrupt();
        -:  146:
    #####:  147:    SmallVector<Type, 4> valueTypes;
call    0 never executed
    #####:  148:    valueTypes.append(op->operand_type_begin(), op->operand_type_end());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  149:    valueTypes.append(op->result_type_begin(), op->result_type_end());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  150:
        -:  151:    // Special treatment for global variables, whose type requirements are
        -:  152:    // conveyed by type attributes.
    #####:  153:    if (auto globalVar = dyn_cast<spirv::GlobalVariableOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  154:      valueTypes.push_back(globalVar.getType());
call    0 never executed
call    1 never executed
        -:  155:
        -:  156:    // Requirements from values' types
    #####:  157:    SmallVector<ArrayRef<spirv::Extension>, 4> typeExtensions;
branch  0 never executed
branch  1 never executed
    #####:  158:    SmallVector<ArrayRef<spirv::Capability>, 8> typeCapabilities;
branch  0 never executed
branch  1 never executed
    #####:  159:    for (Type valueType : valueTypes) {
branch  0 never executed
branch  1 never executed
    #####:  160:      typeExtensions.clear();
call    0 never executed
    #####:  161:      valueType.cast<spirv::SPIRVType>().getExtensions(typeExtensions);
call    0 never executed
call    1 never executed
    #####:  162:      if (failed(checkAndUpdateExtensionRequirements(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  163:              op, targetEnv, typeExtensions, deducedExtensions)))
    #####:  164:        return WalkResult::interrupt();
        -:  165:
    #####:  166:      typeCapabilities.clear();
call    0 never executed
    #####:  167:      valueType.cast<spirv::SPIRVType>().getCapabilities(typeCapabilities);
call    0 never executed
call    1 never executed
    #####:  168:      if (failed(checkAndUpdateCapabilityRequirements(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  169:              op, targetEnv, typeCapabilities, deducedCapabilities)))
    #####:  170:        return WalkResult::interrupt();
        -:  171:    }
        -:  172:
    #####:  173:    return WalkResult::advance();
    #####:  174:  });
call    0 never executed
        -:  175:
    #####:  176:  if (walkResult.wasInterrupted())
branch  0 never executed
branch  1 never executed
    #####:  177:    return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  178:
        -:  179:  // TODO: verify that the deduced version is consistent with
        -:  180:  // SPIR-V ops' maximal version requirements.
        -:  181:
    #####:  182:  auto triple = spirv::VerCapExtAttr::get(
        -:  183:      deducedVersion, deducedCapabilities.getArrayRef(),
    #####:  184:      deducedExtensions.getArrayRef(), &getContext());
call    0 never executed
call    1 never executed
    #####:  185:  module->setAttr(spirv::ModuleOp::getVCETripleAttrName(), triple);
call    0 never executed
        -:  186:}
        -:  187:
        -:  188:std::unique_ptr<OperationPass<spirv::ModuleOp>>
function _ZN4mlir5spirv42createUpdateVersionCapabilityExtensionPassEv called 129232 returned 100% blocks executed 100%
   129232:  189:mlir::spirv::createUpdateVersionCapabilityExtensionPass() {
   129232:  190:  return std::make_unique<UpdateVCEPass>();
call    0 returned 100%
        -:  191:}
