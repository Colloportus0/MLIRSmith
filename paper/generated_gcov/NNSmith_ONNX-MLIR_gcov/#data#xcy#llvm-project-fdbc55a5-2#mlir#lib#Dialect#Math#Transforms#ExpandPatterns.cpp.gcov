        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Math/Transforms/ExpandPatterns.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Math/Transforms/CMakeFiles/obj.MLIRMathTransforms.dir/ExpandPatterns.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Math/Transforms/CMakeFiles/obj.MLIRMathTransforms.dir/ExpandPatterns.cpp.gcda
        -:    0:Runs:128649
        -:    1://===- ExpandTanh.cpp - Code to perform expanding tanh op -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements expansion of tanh op.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Math/IR/Math.h"
        -:   15:#include "mlir/Dialect/Math/Transforms/Passes.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/Transforms/DialectConversion.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:/// Expands tanh op into
        -:   23:///   1) 1-exp^{-2x} / 1+exp^{-2x}, if x => 0
        -:   24:///   2) exp^{2x}-1 / exp^{2x}+1  , if x < 0
function _ZL13convertTanhOpN4mlir4math6TanhOpERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   25:static LogicalResult convertTanhOp(math::TanhOp op, PatternRewriter &rewriter) {
    #####:   26:  auto floatType = op.getOperand().getType();
call    0 never executed
call    1 never executed
    #####:   27:  Location loc = op.getLoc();
call    0 never executed
    #####:   28:  auto floatOne = rewriter.getFloatAttr(floatType, 1.0);
call    0 never executed
    #####:   29:  auto floatTwo = rewriter.getFloatAttr(floatType, 2.0);
call    0 never executed
    #####:   30:  Value one = rewriter.create<arith::ConstantOp>(loc, floatOne);
call    0 never executed
call    1 never executed
    #####:   31:  Value two = rewriter.create<arith::ConstantOp>(loc, floatTwo);
call    0 never executed
call    1 never executed
    #####:   32:  Value doubledX = rewriter.create<arith::MulFOp>(loc, op.getOperand(), two);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   33:
        -:   34:  // Case 1: tanh(x) = 1-exp^{-2x} / 1+exp^{-2x}
    #####:   35:  Value negDoubledX = rewriter.create<arith::NegFOp>(loc, doubledX);
call    0 never executed
call    1 never executed
    #####:   36:  Value exp2x = rewriter.create<math::ExpOp>(loc, negDoubledX);
call    0 never executed
call    1 never executed
    #####:   37:  Value dividend = rewriter.create<arith::SubFOp>(loc, one, exp2x);
call    0 never executed
call    1 never executed
    #####:   38:  Value divisor = rewriter.create<arith::AddFOp>(loc, one, exp2x);
call    0 never executed
call    1 never executed
    #####:   39:  Value positiveRes = rewriter.create<arith::DivFOp>(loc, dividend, divisor);
call    0 never executed
call    1 never executed
        -:   40:
        -:   41:  // Case 2: tanh(x) = exp^{2x}-1 / exp^{2x}+1
    #####:   42:  exp2x = rewriter.create<math::ExpOp>(loc, doubledX);
call    0 never executed
call    1 never executed
    #####:   43:  dividend = rewriter.create<arith::SubFOp>(loc, exp2x, one);
call    0 never executed
call    1 never executed
    #####:   44:  divisor = rewriter.create<arith::AddFOp>(loc, exp2x, one);
call    0 never executed
call    1 never executed
    #####:   45:  Value negativeRes = rewriter.create<arith::DivFOp>(loc, dividend, divisor);
call    0 never executed
call    1 never executed
        -:   46:
        -:   47:  // tanh(x) = x >= 0 ? positiveRes : negativeRes
    #####:   48:  auto floatZero = rewriter.getFloatAttr(floatType, 0.0);
call    0 never executed
    #####:   49:  Value zero = rewriter.create<arith::ConstantOp>(loc, floatZero);
call    0 never executed
call    1 never executed
    #####:   50:  Value cmpRes = rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::OGE,
    #####:   51:                                                op.getOperand(), zero);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   52:  rewriter.replaceOpWithNewOp<arith::SelectOp>(op, cmpRes, positiveRes,
    #####:   53:                                               negativeRes);
call    0 never executed
    #####:   54:  return success();
        -:   55:}
        -:   56:
function _ZL13convertCtlzOpN4mlir4math19CountLeadingZerosOpERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   57:static LogicalResult convertCtlzOp(math::CountLeadingZerosOp op,
        -:   58:                                   PatternRewriter &rewriter) {
    #####:   59:  auto operand = op.getOperand();
call    0 never executed
    #####:   60:  auto elementTy = operand.getType();
call    0 never executed
    #####:   61:  auto resultTy = op.getType();
call    0 never executed
    #####:   62:  Location loc = op.getLoc();
call    0 never executed
        -:   63:
    #####:   64:  int bitWidth = elementTy.getIntOrFloatBitWidth();
call    0 never executed
    #####:   65:  auto zero =
    #####:   66:      rewriter.create<arith::ConstantOp>(loc, IntegerAttr::get(elementTy, 0));
call    0 never executed
call    1 never executed
    #####:   67:  auto leadingZeros = rewriter.create<arith::ConstantOp>(
    #####:   68:      loc, IntegerAttr::get(elementTy, bitWidth));
call    0 never executed
call    1 never executed
        -:   69:
    #####:   70:  SmallVector<Value> operands = {operand, leadingZeros, zero};
call    0 never executed
    #####:   71:  SmallVector<Type> types = {elementTy, elementTy, elementTy};
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:  SmallVector<Location> locations = {loc, loc, loc};
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   73:
    #####:   74:  auto whileOp = rewriter.create<scf::WhileOp>(loc, types, operands);
call    0 never executed
    #####:   75:  Block *before =
    #####:   76:      rewriter.createBlock(&whileOp.getBefore(), {}, types, locations);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   77:  Block *after =
    #####:   78:      rewriter.createBlock(&whileOp.getAfter(), {}, types, locations);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   79:
        -:   80:  // The conditional block of the while loop.
    #####:   81:  {
    #####:   82:    rewriter.setInsertionPointToStart(&whileOp.getBefore().front());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   83:    Value input = before->getArgument(0);
call    0 never executed
    #####:   84:    Value zero = before->getArgument(2);
        -:   85:
    #####:   86:    Value inputNotZero = rewriter.create<arith::CmpIOp>(
    #####:   87:        loc, arith::CmpIPredicate::ne, input, zero);
call    0 never executed
call    1 never executed
    #####:   88:    rewriter.create<scf::ConditionOp>(loc, inputNotZero,
    #####:   89:                                      before->getArguments());
call    0 never executed
        -:   90:  }
        -:   91:
        -:   92:  // The body of the while loop: shift right until reaching a value of 0.
    #####:   93:  {
    #####:   94:    rewriter.setInsertionPointToStart(&whileOp.getAfter().front());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   95:    Value input = after->getArgument(0);
call    0 never executed
    #####:   96:    Value leadingZeros = after->getArgument(1);
        -:   97:
    #####:   98:    auto one =
    #####:   99:        rewriter.create<arith::ConstantOp>(loc, IntegerAttr::get(elementTy, 1));
call    0 never executed
call    1 never executed
    #####:  100:    auto shifted = rewriter.create<arith::ShRUIOp>(loc, resultTy, input, one);
call    0 never executed
    #####:  101:    auto leadingZerosMinusOne =
    #####:  102:        rewriter.create<arith::SubIOp>(loc, resultTy, leadingZeros, one);
call    0 never executed
        -:  103:
    #####:  104:    rewriter.create<scf::YieldOp>(
        -:  105:        loc,
    #####:  106:        ValueRange({shifted, leadingZerosMinusOne, after->getArgument(2)}));
call    0 never executed
call    1 never executed
        -:  107:  }
        -:  108:
    #####:  109:  rewriter.setInsertionPointAfter(whileOp);
call    0 never executed
    #####:  110:  rewriter.replaceOp(op, whileOp->getResult(1));
call    0 never executed
call    1 never executed
    #####:  111:  return success();
branch  0 never executed
branch  1 never executed
        -:  112:}
        -:  113:
function _ZN4mlir25populateExpandCtlzPatternERNS_17RewritePatternSetE called 533 returned 100% blocks executed 100%
      533:  114:void mlir::populateExpandCtlzPattern(RewritePatternSet &patterns) {
      533:  115:  patterns.add(convertCtlzOp);
call    0 returned 100%
      533:  116:}
        -:  117:
function _ZN4mlir25populateExpandTanhPatternERNS_17RewritePatternSetE called 533 returned 100% blocks executed 100%
      533:  118:void mlir::populateExpandTanhPattern(RewritePatternSet &patterns) {
      533:  119:  patterns.add(convertTanhOp);
call    0 returned 100%
      533:  120:}
