        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/GPU/TestGpuMemoryPromotion.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/GPU/CMakeFiles/MLIRGPUTestPasses.dir/TestGpuMemoryPromotion.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/GPU/CMakeFiles/MLIRGPUTestPasses.dir/TestGpuMemoryPromotion.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestGPUMemoryPromotionPass.cpp - Test pass for GPU promotion -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the pass testing the utilities for moving data across
        -:   10:// different levels of the GPU memory hierarchy.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   16:#include "mlir/Dialect/GPU/Transforms/MemoryPromotion.h"
        -:   17:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   18:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   20:#include "mlir/IR/Attributes.h"
        -:   21:#include "mlir/Pass/Pass.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:/// Simple pass for testing the promotion to workgroup memory in GPU functions.
        -:   27:/// Promotes all arguments with "gpu.test_promote_workgroup" attribute. This
        -:   28:/// does not check whether the promotion is legal (e.g., amount of memory used)
        -:   29:/// or beneficial (e.g., makes previously uncoalesced loads coalesced).
   164783:   30:struct TestGpuMemoryPromotionPass
call    0 returned 100%
call    1 returned 100%
        -:   31:    : public PassWrapper<TestGpuMemoryPromotionPass,
        -:   32:                         OperationPass<gpu::GPUFuncOp>> {
function _ZN12_GLOBAL__N_126TestGpuMemoryPromotionPass13resolveTypeIDEv called 129215 returned 100% blocks executed 100%
   129215:   33:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGpuMemoryPromotionPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   34:
function _ZNK12_GLOBAL__N_126TestGpuMemoryPromotionPass20getDependentDialectsERN4mlir15DialectRegistryE called 579 returned 100% blocks executed 100%
      579:   35:  void getDependentDialects(DialectRegistry &registry) const override {
      579:   36:    registry.insert<AffineDialect, memref::MemRefDialect, scf::SCFDialect>();
call    0 returned 100%
      579:   37:  }
function _ZNK12_GLOBAL__N_126TestGpuMemoryPromotionPass11getArgumentEv called 128644 returned 100% blocks executed 100%
   128644:   38:  StringRef getArgument() const final { return "test-gpu-memory-promotion"; }
function _ZNK12_GLOBAL__N_126TestGpuMemoryPromotionPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   39:  StringRef getDescription() const final {
   128636:   40:    return "Promotes the annotated arguments of gpu.func to workgroup memory.";
        -:   41:  }
        -:   42:
function _ZN12_GLOBAL__N_126TestGpuMemoryPromotionPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   43:  void runOnOperation() override {
    #####:   44:    gpu::GPUFuncOp op = getOperation();
call    0 never executed
    #####:   45:    for (unsigned i = 0, e = op.getNumArguments(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:      if (op.getArgAttrOfType<UnitAttr>(i, "gpu.test_promote_workgroup"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   47:        promoteToWorkgroupMemory(op, i);
call    0 never executed
        -:   48:    }
    #####:   49:  }
        -:   50:};
        -:   51:} // namespace
        -:   52:
        -:   53:namespace mlir {
function _ZN4mlir34registerTestGpuMemoryPromotionPassEv called 128636 returned 100% blocks executed 100%
   128636:   54:void registerTestGpuMemoryPromotionPass() {
   128636:   55:  PassRegistration<TestGpuMemoryPromotionPass>();
call    0 returned 100%
   128636:   56:}
        -:   57:} // namespace mlir
