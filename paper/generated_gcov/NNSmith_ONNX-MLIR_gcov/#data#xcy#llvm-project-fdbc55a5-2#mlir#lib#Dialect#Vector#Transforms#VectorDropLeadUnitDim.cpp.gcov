        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Vector/Transforms/VectorDropLeadUnitDim.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/VectorDropLeadUnitDim.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/VectorDropLeadUnitDim.cpp.gcda
        -:    0:Runs:128654
        -:    1://===- VectorDropLeadUnitDim.cpp - Conversion within the Vector dialect ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Utils/StructuredOpsUtils.h"
        -:   10:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   11:#include "mlir/Dialect/Vector/Transforms/VectorRewritePatterns.h"
        -:   12:#include "mlir/Dialect/Vector/Utils/VectorUtils.h"
        -:   13:#include "mlir/IR/Builders.h"
        -:   14:#include "mlir/IR/ImplicitLocOpBuilder.h"
        -:   15:#include "mlir/IR/TypeUtilities.h"
        -:   16:
        -:   17:#define DEBUG_TYPE "vector-drop-unit-dim"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:using namespace mlir::vector;
        -:   21:
        -:   22:// Trims leading one dimensions from `oldType` and returns the result type.
        -:   23:// Returns `vector<1xT>` if `oldType` only has one element.
function _ZL18trimLeadingOneDimsN4mlir10VectorTypeE called 0 returned 0% blocks executed 0%
    #####:   24:static VectorType trimLeadingOneDims(VectorType oldType) {
    #####:   25:  ArrayRef<int64_t> oldShape = oldType.getShape();
call    0 never executed
    #####:   26:  ArrayRef<int64_t> newShape =
    #####:   27:      oldShape.drop_while([](int64_t dim) { return dim == 1; });
call    0 never executed
        -:   28:  // Make sure we have at least 1 dimension per vector type requirements.
    #####:   29:  if (newShape.empty())
branch  0 never executed
branch  1 never executed
    #####:   30:    newShape = oldShape.take_back();
branch  0 never executed
branch  1 never executed
    #####:   31:  return VectorType::get(newShape, oldType.getElementType());
call    0 never executed
call    1 never executed
        -:   32:}
        -:   33:
        -:   34:/// Return a smallVector of size `rank` containing all zeros.
    #####:   35:static SmallVector<int64_t> splatZero(int64_t rank) {
    #####:   36:  return SmallVector<int64_t>(rank, 0);
        -:   37:}
        -:   38:namespace {
        -:   39:
        -:   40:// Casts away leading one dimensions in vector.extract_strided_slice's vector
        -:   41:// input by inserting vector.broadcast.
        -:   42:struct CastAwayExtractStridedSliceLeadingOneDim
        -:   43:    : public OpRewritePattern<vector::ExtractStridedSliceOp> {
        -:   44:  using OpRewritePattern::OpRewritePattern;
        -:   45:
function _ZNK12_GLOBAL__N_140CastAwayExtractStridedSliceLeadingOneDim15matchAndRewriteEN4mlir6vector21ExtractStridedSliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   46:  LogicalResult matchAndRewrite(vector::ExtractStridedSliceOp extractOp,
        -:   47:                                PatternRewriter &rewriter) const override {
        -:   48:    // vector.extract_strided_slice requires the input and output vector to have
        -:   49:    // the same rank. Here we drop leading one dimensions from the input vector
        -:   50:    // type to make sure we don't cause mismatch.
    #####:   51:    VectorType oldSrcType = extractOp.getVectorType();
call    0 never executed
    #####:   52:    VectorType newSrcType = trimLeadingOneDims(oldSrcType);
call    0 never executed
        -:   53:
    #####:   54:    if (newSrcType.getRank() == oldSrcType.getRank())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:      return failure();
        -:   56:
    #####:   57:    int64_t dropCount = oldSrcType.getRank() - newSrcType.getRank();
call    0 never executed
call    1 never executed
        -:   58:
    #####:   59:    VectorType oldDstType = extractOp.getType();
call    0 never executed
    #####:   60:    VectorType newDstType =
    #####:   61:        VectorType::get(oldDstType.getShape().drop_front(dropCount),
call    0 never executed
    #####:   62:                        oldDstType.getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:
    #####:   64:    Location loc = extractOp.getLoc();
call    0 never executed
        -:   65:
    #####:   66:    Value newSrcVector = rewriter.create<vector::ExtractOp>(
branch  0 never executed
branch  1 never executed
    #####:   67:        loc, extractOp.getVector(), splatZero(dropCount));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   68:
        -:   69:    // The offsets/sizes/strides attribute can have a less number of elements
        -:   70:    // than the input vector's rank: it is meant for the leading dimensions.
    #####:   71:    auto newOffsets = rewriter.getArrayAttr(
    #####:   72:        extractOp.getOffsets().getValue().drop_front(dropCount));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   73:    auto newSizes = rewriter.getArrayAttr(
    #####:   74:        extractOp.getSizes().getValue().drop_front(dropCount));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   75:    auto newStrides = rewriter.getArrayAttr(
    #####:   76:        extractOp.getStrides().getValue().drop_front(dropCount));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   77:
    #####:   78:    auto newExtractOp = rewriter.create<vector::ExtractStridedSliceOp>(
    #####:   79:        loc, newDstType, newSrcVector, newOffsets, newSizes, newStrides);
call    0 never executed
        -:   80:
    #####:   81:    rewriter.replaceOpWithNewOp<vector::BroadcastOp>(extractOp, oldDstType,
    #####:   82:                                                     newExtractOp);
call    0 never executed
        -:   83:
    #####:   84:    return success();
        -:   85:  }
        -:   86:};
        -:   87:
        -:   88:// Casts away leading one dimensions in vector.insert_strided_slice's vector
        -:   89:// inputs by inserting vector.broadcast.
        -:   90:struct CastAwayInsertStridedSliceLeadingOneDim
        -:   91:    : public OpRewritePattern<vector::InsertStridedSliceOp> {
        -:   92:  using OpRewritePattern::OpRewritePattern;
        -:   93:
function _ZNK12_GLOBAL__N_139CastAwayInsertStridedSliceLeadingOneDim15matchAndRewriteEN4mlir6vector20InsertStridedSliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   94:  LogicalResult matchAndRewrite(vector::InsertStridedSliceOp insertOp,
        -:   95:                                PatternRewriter &rewriter) const override {
    #####:   96:    VectorType oldSrcType = insertOp.getSourceVectorType();
call    0 never executed
    #####:   97:    VectorType newSrcType = trimLeadingOneDims(oldSrcType);
call    0 never executed
    #####:   98:    VectorType oldDstType = insertOp.getDestVectorType();
call    0 never executed
    #####:   99:    VectorType newDstType = trimLeadingOneDims(oldDstType);
call    0 never executed
        -:  100:
    #####:  101:    int64_t srcDropCount = oldSrcType.getRank() - newSrcType.getRank();
call    0 never executed
call    1 never executed
    #####:  102:    int64_t dstDropCount = oldDstType.getRank() - newDstType.getRank();
call    0 never executed
call    1 never executed
    #####:  103:    if (srcDropCount == 0 && dstDropCount == 0)
branch  0 never executed
branch  1 never executed
    #####:  104:      return failure();
        -:  105:
        -:  106:    // Trim leading one dimensions from both operands.
    #####:  107:    Location loc = insertOp.getLoc();
call    0 never executed
        -:  108:
    #####:  109:    Value newSrcVector = rewriter.create<vector::ExtractOp>(
branch  0 never executed
branch  1 never executed
    #####:  110:        loc, insertOp.getSource(), splatZero(srcDropCount));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  111:    Value newDstVector = rewriter.create<vector::ExtractOp>(
branch  0 never executed
branch  1 never executed
    #####:  112:        loc, insertOp.getDest(), splatZero(dstDropCount));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  113:
    #####:  114:    auto newOffsets = rewriter.getArrayAttr(
    #####:  115:        insertOp.getOffsets().getValue().take_back(newDstType.getRank()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  116:    auto newStrides = rewriter.getArrayAttr(
    #####:  117:        insertOp.getStrides().getValue().take_back(newSrcType.getRank()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  118:
    #####:  119:    auto newInsertOp = rewriter.create<vector::InsertStridedSliceOp>(
    #####:  120:        loc, newDstType, newSrcVector, newDstVector, newOffsets, newStrides);
call    0 never executed
        -:  121:
    #####:  122:    rewriter.replaceOpWithNewOp<vector::BroadcastOp>(insertOp, oldDstType,
    #####:  123:                                                     newInsertOp);
call    0 never executed
        -:  124:
    #####:  125:    return success();
        -:  126:  }
        -:  127:};
        -:  128:
        -:  129:// Casts away leading one dimensions in vector.insert's vector inputs by
        -:  130:// inserting vector.broadcast.
        -:  131:struct CastAwayInsertLeadingOneDim : public OpRewritePattern<vector::InsertOp> {
        -:  132:  using OpRewritePattern::OpRewritePattern;
        -:  133:
function _ZNK12_GLOBAL__N_127CastAwayInsertLeadingOneDim15matchAndRewriteEN4mlir6vector8InsertOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  134:  LogicalResult matchAndRewrite(vector::InsertOp insertOp,
        -:  135:                                PatternRewriter &rewriter) const override {
    #####:  136:    Type oldSrcType = insertOp.getSourceType();
call    0 never executed
    #####:  137:    Type newSrcType = oldSrcType;
    #####:  138:    int64_t oldSrcRank = 0, newSrcRank = 0;
    #####:  139:    if (auto type = oldSrcType.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:      newSrcType = trimLeadingOneDims(type);
call    0 never executed
    #####:  141:      oldSrcRank = type.getRank();
call    0 never executed
    #####:  142:      newSrcRank = newSrcType.cast<VectorType>().getRank();
call    0 never executed
call    1 never executed
        -:  143:    }
        -:  144:
    #####:  145:    VectorType oldDstType = insertOp.getDestVectorType();
call    0 never executed
    #####:  146:    VectorType newDstType = trimLeadingOneDims(oldDstType);
call    0 never executed
        -:  147:
    #####:  148:    int64_t srcDropCount = oldSrcRank - newSrcRank;
    #####:  149:    int64_t dstDropCount = oldDstType.getRank() - newDstType.getRank();
call    0 never executed
call    1 never executed
    #####:  150:    if (srcDropCount == 0 && dstDropCount == 0)
branch  0 never executed
branch  1 never executed
    #####:  151:      return failure();
        -:  152:
        -:  153:    // Trim leading one dimensions from both operands.
    #####:  154:    Location loc = insertOp.getLoc();
call    0 never executed
        -:  155:
    #####:  156:    Value newSrcVector = insertOp.getSource();
call    0 never executed
    #####:  157:    if (oldSrcRank != 0) {
branch  0 never executed
branch  1 never executed
    #####:  158:      newSrcVector = rewriter.create<vector::ExtractOp>(
branch  0 never executed
branch  1 never executed
    #####:  159:          loc, insertOp.getSource(), splatZero(srcDropCount));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  160:    }
    #####:  161:    Value newDstVector = rewriter.create<vector::ExtractOp>(
branch  0 never executed
branch  1 never executed
    #####:  162:        loc, insertOp.getDest(), splatZero(dstDropCount));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  163:
    #####:  164:    unsigned oldPosRank = insertOp.getPosition().getValue().size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  165:    unsigned newPosRank = newDstType.getRank() - newSrcRank;
call    0 never executed
    #####:  166:    SmallVector<Attribute> newPositions = llvm::to_vector(
    #####:  167:        insertOp.getPosition().getValue().take_back(newPosRank));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  168:    if (newPosRank > oldPosRank) {
branch  0 never executed
branch  1 never executed
    #####:  169:      auto zeroAttr = rewriter.getZeroAttr(rewriter.getI64Type());
call    0 never executed
call    1 never executed
    #####:  170:      newPositions.resize(newPosRank, zeroAttr);
call    0 never executed
        -:  171:    }
        -:  172:
    #####:  173:    auto newInsertOp = rewriter.create<vector::InsertOp>(
        -:  174:        loc, newDstType, newSrcVector, newDstVector,
    #####:  175:        rewriter.getArrayAttr(newPositions));
call    0 never executed
call    1 never executed
        -:  176:
    #####:  177:    rewriter.replaceOpWithNewOp<vector::BroadcastOp>(insertOp, oldDstType,
    #####:  178:                                                     newInsertOp);
call    0 never executed
        -:  179:
    #####:  180:    return success();
branch  0 never executed
branch  1 never executed
        -:  181:  }
        -:  182:};
        -:  183:
        -:  184:// Turns vector.transfer_read on vector with leading 1 dimensions into
        -:  185:// vector.shape_cast followed by vector.transfer_read on vector without leading
        -:  186:// 1 dimensions.
        -:  187:struct CastAwayTransferReadLeadingOneDim
        -:  188:    : public OpRewritePattern<vector::TransferReadOp> {
        -:  189:  using OpRewritePattern::OpRewritePattern;
        -:  190:
function _ZNK12_GLOBAL__N_133CastAwayTransferReadLeadingOneDim15matchAndRewriteEN4mlir6vector14TransferReadOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  191:  LogicalResult matchAndRewrite(vector::TransferReadOp read,
        -:  192:                                PatternRewriter &rewriter) const override {
        -:  193:    // TODO: support 0-d corner case.
    #####:  194:    if (read.getTransferRank() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:      return failure();
        -:  196:
    #####:  197:    if (read.getMask())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:      return failure();
        -:  199:
    #####:  200:    auto shapedType = read.getSource().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  201:    if (shapedType.getElementType() != read.getVectorType().getElementType())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  202:      return failure();
        -:  203:
    #####:  204:    VectorType oldType = read.getVectorType();
call    0 never executed
    #####:  205:    VectorType newType = trimLeadingOneDims(oldType);
call    0 never executed
        -:  206:
    #####:  207:    if (newType == oldType)
branch  0 never executed
branch  1 never executed
    #####:  208:      return failure();
        -:  209:
    #####:  210:    AffineMap oldMap = read.getPermutationMap();
call    0 never executed
    #####:  211:    ArrayRef<AffineExpr> newResults =
    #####:  212:        oldMap.getResults().take_back(newType.getRank());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  213:    AffineMap newMap =
        -:  214:        AffineMap::get(oldMap.getNumDims(), oldMap.getNumSymbols(), newResults,
    #####:  215:                       rewriter.getContext());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  216:
    #####:  217:    ArrayAttr inBoundsAttr;
    #####:  218:    if (read.getInBounds())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:      inBoundsAttr = rewriter.getArrayAttr(
    #####:  220:          read.getInBoundsAttr().getValue().take_back(newType.getRank()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  221:
    #####:  222:    auto newRead = rewriter.create<vector::TransferReadOp>(
    #####:  223:        read.getLoc(), newType, read.getSource(), read.getIndices(),
call    0 never executed
call    1 never executed
    #####:  224:        AffineMapAttr::get(newMap), read.getPadding(), /*mask=*/Value(),
call    0 never executed
call    1 never executed
    #####:  225:        inBoundsAttr);
call    0 never executed
call    1 never executed
    #####:  226:    rewriter.replaceOpWithNewOp<vector::BroadcastOp>(read, oldType, newRead);
call    0 never executed
        -:  227:
    #####:  228:    return success();
        -:  229:  }
        -:  230:};
        -:  231:
        -:  232:// Turns vector.transfer_write on vector with leading 1 dimensions into
        -:  233:// vector.shape_cast followed by vector.transfer_write on vector without leading
        -:  234:// 1 dimensions.
        -:  235:struct CastAwayTransferWriteLeadingOneDim
        -:  236:    : public OpRewritePattern<vector::TransferWriteOp> {
        -:  237:  using OpRewritePattern::OpRewritePattern;
        -:  238:
function _ZNK12_GLOBAL__N_134CastAwayTransferWriteLeadingOneDim15matchAndRewriteEN4mlir6vector15TransferWriteOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  239:  LogicalResult matchAndRewrite(vector::TransferWriteOp write,
        -:  240:                                PatternRewriter &rewriter) const override {
        -:  241:    // TODO: support 0-d corner case.
    #####:  242:    if (write.getTransferRank() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:      return failure();
        -:  244:
    #####:  245:    if (write.getMask())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  246:      return failure();
        -:  247:
    #####:  248:    auto shapedType = write.getSource().getType().dyn_cast<ShapedType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  249:    if (shapedType.getElementType() != write.getVectorType().getElementType())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  250:      return failure();
        -:  251:
    #####:  252:    VectorType oldType = write.getVectorType();
call    0 never executed
    #####:  253:    VectorType newType = trimLeadingOneDims(oldType);
call    0 never executed
    #####:  254:    if (newType == oldType)
branch  0 never executed
branch  1 never executed
    #####:  255:      return failure();
    #####:  256:    int64_t dropDim = oldType.getRank() - newType.getRank();
call    0 never executed
call    1 never executed
        -:  257:
    #####:  258:    AffineMap oldMap = write.getPermutationMap();
call    0 never executed
    #####:  259:    ArrayRef<AffineExpr> newResults =
    #####:  260:        oldMap.getResults().take_back(newType.getRank());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  261:    AffineMap newMap =
        -:  262:        AffineMap::get(oldMap.getNumDims(), oldMap.getNumSymbols(), newResults,
    #####:  263:                       rewriter.getContext());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  264:
    #####:  265:    ArrayAttr inBoundsAttr;
    #####:  266:    if (write.getInBounds())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  267:      inBoundsAttr = rewriter.getArrayAttr(
    #####:  268:          write.getInBoundsAttr().getValue().take_back(newType.getRank()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  269:
    #####:  270:    auto newVector = rewriter.create<vector::ExtractOp>(
    #####:  271:        write.getLoc(), write.getVector(), splatZero(dropDim));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  272:    rewriter.replaceOpWithNewOp<vector::TransferWriteOp>(
    #####:  273:        write, newVector, write.getSource(), write.getIndices(),
call    0 never executed
call    1 never executed
    #####:  274:        AffineMapAttr::get(newMap), inBoundsAttr);
call    0 never executed
call    1 never executed
        -:  275:
    #####:  276:    return success();
        -:  277:  }
        -:  278:};
        -:  279:
        -:  280:/// Turns vector.contract on vector with leading 1 dimensions into
        -:  281:/// vector.extract followed by vector.contract on vector without leading
        -:  282:/// 1 dimensions. Also performs tranpose of lhs and rhs operands if required
        -:  283:/// prior to extract.
        -:  284:struct CastAwayContractionLeadingOneDim
        -:  285:    : public OpRewritePattern<vector::ContractionOp> {
        -:  286:  using OpRewritePattern::OpRewritePattern;
        -:  287:
function _ZNK12_GLOBAL__N_132CastAwayContractionLeadingOneDim15matchAndRewriteEN4mlir6vector13ContractionOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  288:  LogicalResult matchAndRewrite(vector::ContractionOp contractOp,
        -:  289:                                PatternRewriter &rewriter) const override {
    #####:  290:    VectorType oldAccType = contractOp.getAccType().dyn_cast<VectorType>();
call    0 never executed
call    1 never executed
    #####:  291:    if (oldAccType == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  292:      return failure();
    #####:  293:    if (oldAccType.getRank() < 2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  294:      return failure();
        -:  295:    // TODO: implement masks.
    #####:  296:    if (!contractOp.getMasks().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  297:      return failure();
    #####:  298:    if (oldAccType.getShape()[0] != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  299:      return failure();
        -:  300:    // currently we support only dropping one dim but the pattern can be applied
        -:  301:    // greedily to drop more.
    #####:  302:    int64_t dropDim = 1;
        -:  303:
    #####:  304:    auto oldIndexingMaps = contractOp.getIndexingMapsArray();
call    0 never executed
    #####:  305:    SmallVector<AffineMap> newIndexingMaps;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  306:
    #####:  307:    auto oldIteratorTypes = contractOp.getIteratorTypes();
call    0 never executed
    #####:  308:    SmallVector<Attribute> newIteratorTypes;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  309:
    #####:  310:    int64_t dimToDrop = oldIndexingMaps[2].getDimPosition(0);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  311:
    #####:  312:    if (!isParallelIterator(oldIteratorTypes[dimToDrop]))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  313:      // only parallel type iterators can be dropped.
    #####:  314:      return failure();
        -:  315:
    #####:  316:    for (const auto &it : llvm::enumerate(oldIteratorTypes)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  317:      int64_t currDim = it.index();
branch  0 never executed
branch  1 never executed
    #####:  318:      if (currDim == dimToDrop)
branch  0 never executed
branch  1 never executed
    #####:  319:        continue;
    #####:  320:      newIteratorTypes.push_back(it.value());
call    0 never executed
        -:  321:    }
        -:  322:
    #####:  323:    SmallVector<Value> operands = {contractOp.getLhs(), contractOp.getRhs(),
call    0 never executed
    #####:  324:                                   contractOp.getAcc()};
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  325:    SmallVector<Value> newOperands;
branch  0 never executed
branch  1 never executed
        -:  326:
    #####:  327:    for (const auto &it : llvm::enumerate(oldIndexingMaps)) {
branch  0 never executed
branch  1 never executed
        -:  328:      // Check if the dim to be dropped exists as a leading dim in the operand
        -:  329:      // if it does then we use vector.extract to drop it.
    #####:  330:      bool validExtract = false;
    #####:  331:      SmallVector<AffineExpr> results;
call    0 never executed
call    1 never executed
    #####:  332:      auto map = it.value();
call    0 never executed
    #####:  333:      int64_t orginalZeroDim = it.value().getDimPosition(0);
call    0 never executed
    #####:  334:      if (orginalZeroDim != dimToDrop) {
branch  0 never executed
branch  1 never executed
        -:  335:        // There are two reasons to be in this path, 1. We need to
        -:  336:        // tranpose the operand to make the dim to be dropped
        -:  337:        // leading. 2. The dim to be dropped does not exist and in
        -:  338:        // that case we dont want to add a unit tranpose but we must
        -:  339:        // check all the indices to make sure this is the case.
    #####:  340:        bool tranposeNeeded = false;
    #####:  341:        SmallVector<int64_t> perm;
call    0 never executed
    #####:  342:        SmallVector<AffineExpr> transposeResults;
branch  0 never executed
branch  1 never executed
        -:  343:
    #####:  344:        for (int64_t i = 0, e = map.getNumResults(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  345:          int64_t currDim = map.getDimPosition(i);
call    0 never executed
    #####:  346:          if (currDim == dimToDrop) {
branch  0 never executed
branch  1 never executed
    #####:  347:            tranposeNeeded = true;
    #####:  348:            perm.insert(perm.begin(), i);
call    0 never executed
    #####:  349:            auto targetExpr = rewriter.getAffineDimExpr(currDim);
call    0 never executed
    #####:  350:            transposeResults.insert(transposeResults.begin(), targetExpr);
call    0 never executed
        -:  351:          } else {
    #####:  352:            perm.push_back(i);
call    0 never executed
    #####:  353:            auto targetExpr = rewriter.getAffineDimExpr(currDim);
call    0 never executed
    #####:  354:            transposeResults.push_back(targetExpr);
call    0 never executed
        -:  355:          }
        -:  356:        }
        -:  357:        // Do the tranpose now if needed so that we can drop the
        -:  358:        // correct dim using extract later.
    #####:  359:        if (tranposeNeeded) {
branch  0 never executed
branch  1 never executed
    #####:  360:          map = AffineMap::get(map.getNumDims(), 0, transposeResults,
call    0 never executed
    #####:  361:                               contractOp.getContext());
call    0 never executed
call    1 never executed
    #####:  362:          operands[it.index()] = rewriter.create<vector::TransposeOp>(
branch  0 never executed
branch  1 never executed
    #####:  363:              contractOp.getLoc(), operands[it.index()], perm);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  364:        }
        -:  365:      }
        -:  366:      // We have taken care to have the dim to be dropped be
        -:  367:      // the leading dim. If its still not leading that means it
        -:  368:      // does not exist in this operand and hence we do not need
        -:  369:      // an extract.
    #####:  370:      if (map.getDimPosition(0) == dimToDrop)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  371:        validExtract = true;
        -:  372:
    #####:  373:      for (int64_t i = 0, e = map.getNumResults(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  374:        int64_t currDim = map.getDimPosition(i);
call    0 never executed
    #####:  375:        if (currDim == dimToDrop)
branch  0 never executed
branch  1 never executed
        -:  376:          // This is the dim we are dropping.
    #####:  377:          continue;
    #####:  378:        auto targetExpr = rewriter.getAffineDimExpr(
    #####:  379:            currDim < dimToDrop ? currDim : currDim - 1);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  380:        results.push_back(targetExpr);
call    0 never executed
        -:  381:      }
    #####:  382:      newIndexingMaps.push_back(AffineMap::get(map.getNumDims() - 1, 0, results,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  383:                                               contractOp.getContext()));
        -:  384:      // Extract if its a valid extraction, otherwise use the operand
        -:  385:      // without extraction.
    #####:  386:      newOperands.push_back(validExtract
branch  0 never executed
branch  1 never executed
    #####:  387:                                ? rewriter.create<vector::ExtractOp>(
    #####:  388:                                      contractOp.getLoc(), operands[it.index()],
    #####:  389:                                      splatZero(dropDim))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  390:                                : operands[it.index()]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  391:    }
    #####:  392:    auto newContractOp = rewriter.create<vector::ContractionOp>(
    #####:  393:        contractOp.getLoc(), newOperands[0], newOperands[1], newOperands[2],
call    0 never executed
    #####:  394:        rewriter.getAffineMapArrayAttr(newIndexingMaps),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  395:        rewriter.getArrayAttr(newIteratorTypes), contractOp.getKind());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  396:    rewriter.replaceOpWithNewOp<vector::BroadcastOp>(
    #####:  397:        contractOp, contractOp->getResultTypes()[0], newContractOp);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  398:    return success();
branch  0 never executed
branch  1 never executed
        -:  399:  }
        -:  400:};
        -:  401:
        -:  402:class CastAwayElementwiseLeadingOneDim : public RewritePattern {
        -:  403:public:
        -:  404:  CastAwayElementwiseLeadingOneDim(MLIRContext *context,
        -:  405:                                   PatternBenefit benefit = 1)
        -:  406:      : RewritePattern(MatchAnyOpTypeTag(), benefit, context) {}
        -:  407:
function _ZNK12_GLOBAL__N_132CastAwayElementwiseLeadingOneDim15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  408:  LogicalResult matchAndRewrite(Operation *op,
        -:  409:                                PatternRewriter &rewriter) const override {
    #####:  410:    if (!OpTrait::hasElementwiseMappableTraits(op) || op->getNumResults() != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  411:      return failure();
    #####:  412:    auto vecType = op->getResultTypes()[0].dyn_cast<VectorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  413:    if (!vecType)
branch  0 never executed
branch  1 never executed
    #####:  414:      return failure();
    #####:  415:    VectorType newVecType = trimLeadingOneDims(vecType);
call    0 never executed
    #####:  416:    if (newVecType == vecType)
branch  0 never executed
branch  1 never executed
    #####:  417:      return failure();
    #####:  418:    int64_t dropDim = vecType.getRank() - newVecType.getRank();
call    0 never executed
call    1 never executed
    #####:  419:    SmallVector<Value, 4> newOperands;
call    0 never executed
    #####:  420:    for (Value operand : op->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  421:      if (auto opVecType = operand.getType().dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  422:        newOperands.push_back(rewriter.create<vector::ExtractOp>(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  423:            op->getLoc(), operand, splatZero(dropDim)));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  424:      } else {
    #####:  425:        newOperands.push_back(operand);
call    0 never executed
        -:  426:      }
        -:  427:    }
    #####:  428:    Operation *newOp =
    #####:  429:        rewriter.create(op->getLoc(), op->getName().getIdentifier(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  430:                        newOperands, newVecType, op->getAttrs());
    #####:  431:    rewriter.replaceOpWithNewOp<vector::BroadcastOp>(op, vecType,
    #####:  432:                                                     newOp->getResult(0));
call    0 never executed
    #####:  433:    return success();
branch  0 never executed
branch  1 never executed
        -:  434:  }
        -:  435:};
        -:  436:
        -:  437:} // namespace
        -:  438:
function _ZN4mlir6vector43populateCastAwayVectorLeadingOneDimPatternsERNS_17RewritePatternSetENS_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  439:void mlir::vector::populateCastAwayVectorLeadingOneDimPatterns(
        -:  440:    RewritePatternSet &patterns, PatternBenefit benefit) {
    #####:  441:  patterns
        -:  442:      .add<CastAwayExtractStridedSliceLeadingOneDim,
        -:  443:           CastAwayInsertStridedSliceLeadingOneDim, CastAwayInsertLeadingOneDim,
        -:  444:           CastAwayTransferReadLeadingOneDim,
        -:  445:           CastAwayTransferWriteLeadingOneDim, CastAwayElementwiseLeadingOneDim,
    #####:  446:           CastAwayContractionLeadingOneDim>(patterns.getContext(), benefit);
call    0 never executed
    #####:  447:  populateShapeCastFoldingPatterns(patterns, benefit);
call    0 never executed
    #####:  448:}
