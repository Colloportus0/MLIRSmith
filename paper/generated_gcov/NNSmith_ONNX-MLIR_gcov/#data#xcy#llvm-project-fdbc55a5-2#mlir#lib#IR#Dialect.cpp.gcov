        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/Dialect.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Dialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Dialect.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- Dialect.cpp - Dialect implementation -------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Dialect.h"
        -:   10:#include "mlir/IR/BuiltinDialect.h"
        -:   11:#include "mlir/IR/Diagnostics.h"
        -:   12:#include "mlir/IR/DialectImplementation.h"
        -:   13:#include "mlir/IR/DialectInterface.h"
        -:   14:#include "mlir/IR/ExtensibleDialect.h"
        -:   15:#include "mlir/IR/MLIRContext.h"
        -:   16:#include "mlir/IR/Operation.h"
        -:   17:#include "llvm/ADT/MapVector.h"
        -:   18:#include "llvm/ADT/Twine.h"
        -:   19:#include "llvm/Support/Debug.h"
        -:   20:#include "llvm/Support/ManagedStatic.h"
        -:   21:#include "llvm/Support/Regex.h"
        -:   22:
        -:   23:#define DEBUG_TYPE "dialect"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace detail;
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Dialect
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
function _ZN4mlir7DialectC2EN4llvm9StringRefEPNS_11MLIRContextENS_6TypeIDE called 566172 returned 100% blocks executed 80%
   566172:   32:Dialect::Dialect(StringRef name, MLIRContext *context, TypeID id)
   566172:   33:    : name(name), dialectID(id), context(context) {
call    0 returned 100%
  566172*:   34:  assert(isValidNamespace(name) && "invalid dialect namespace");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
   566172:   35:}
        -:   36:
        -:   37:Dialect::~Dialect() = default;
        -:   38:
        -:   39:/// Verify an attribute from this dialect on the argument at 'argIndex' for
        -:   40:/// the region at 'regionIndex' on the given operation. Returns failure if
        -:   41:/// the verification failed, success otherwise. This hook may optionally be
        -:   42:/// invoked from any operation containing a region.
function _ZN4mlir7Dialect24verifyRegionArgAttributeEPNS_9OperationEjjNS_14NamedAttributeE called 0 returned 0% blocks executed 0%
    #####:   43:LogicalResult Dialect::verifyRegionArgAttribute(Operation *, unsigned, unsigned,
        -:   44:                                                NamedAttribute) {
    #####:   45:  return success();
        -:   46:}
        -:   47:
        -:   48:/// Verify an attribute from this dialect on the result at 'resultIndex' for
        -:   49:/// the region at 'regionIndex' on the given operation. Returns failure if
        -:   50:/// the verification failed, success otherwise. This hook may optionally be
        -:   51:/// invoked from any operation containing a region.
function _ZN4mlir7Dialect27verifyRegionResultAttributeEPNS_9OperationEjjNS_14NamedAttributeE called 0 returned 0% blocks executed 0%
    #####:   52:LogicalResult Dialect::verifyRegionResultAttribute(Operation *, unsigned,
        -:   53:                                                   unsigned, NamedAttribute) {
    #####:   54:  return success();
        -:   55:}
        -:   56:
        -:   57:/// Parse an attribute registered to this dialect.
function _ZNK4mlir7Dialect14parseAttributeERNS_16DialectAsmParserENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   58:Attribute Dialect::parseAttribute(DialectAsmParser &parser, Type type) const {
    #####:   59:  parser.emitError(parser.getNameLoc())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   60:      << "dialect '" << getNamespace()
call    0 never executed
call    1 never executed
    #####:   61:      << "' provides no attribute parsing hook";
call    0 never executed
    #####:   62:  return Attribute();
        -:   63:}
        -:   64:
        -:   65:/// Parse a type registered to this dialect.
function _ZNK4mlir7Dialect9parseTypeERNS_16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:   66:Type Dialect::parseType(DialectAsmParser &parser) const {
        -:   67:  // If this dialect allows unknown types, then represent this with OpaqueType.
    #####:   68:  if (allowsUnknownTypes()) {
branch  0 never executed
branch  1 never executed
    #####:   69:    StringAttr ns = StringAttr::get(getContext(), getNamespace());
call    0 never executed
call    1 never executed
    #####:   70:    return OpaqueType::get(ns, parser.getFullSymbolSpec());
call    0 never executed
call    1 never executed
        -:   71:  }
        -:   72:
    #####:   73:  parser.emitError(parser.getNameLoc())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   74:      << "dialect '" << getNamespace() << "' provides no type parsing hook";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   75:  return Type();
        -:   76:}
        -:   77:
        -:   78:Optional<Dialect::ParseOpHook>
function _ZNK4mlir7Dialect21getParseOperationHookEN4llvm9StringRefE called 4825 returned 100% blocks executed 100%
     4825:   79:Dialect::getParseOperationHook(StringRef opName) const {
     4825:   80:  return None;
        -:   81:}
        -:   82:
        -:   83:llvm::unique_function<void(Operation *, OpAsmPrinter &printer)>
function _ZNK4mlir7Dialect19getOperationPrinterEPNS_9OperationE called 43033 returned 100% blocks executed 60%
    43033:   84:Dialect::getOperationPrinter(Operation *op) const {
   43033*:   85:  assert(op->getDialect() == this &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   86:         "Dialect hook invoked on non-dialect owned operation");
    43033:   87:  return nullptr;
        -:   88:}
        -:   89:
        -:   90:/// Utility function that returns if the given string is a valid dialect
        -:   91:/// namespace
function _ZN4mlir7Dialect16isValidNamespaceEN4llvm9StringRefE called 566172 returned 100% blocks executed 100%
   566172:   92:bool Dialect::isValidNamespace(StringRef str) {
  1132344:   93:  llvm::Regex dialectNameRegex("^[a-zA-Z_][a-zA-Z_0-9\\$]*$");
call    0 returned 100%
call    1 returned 100%
   566172:   94:  return dialectNameRegex.match(str);
call    0 returned 100%
        -:   95:}
        -:   96:
        -:   97:/// Register a set of dialect interfaces with this dialect instance.
function _ZN4mlir7Dialect12addInterfaceESt10unique_ptrINS_16DialectInterfaceESt14default_deleteIS2_EE called 950170 returned 100% blocks executed 33%
   950170:   98:void Dialect::addInterface(std::unique_ptr<DialectInterface> interface) {
  1900340:   99:  auto it = registeredInterfaces.try_emplace(interface->getID(),
   950170:  100:                                             std::move(interface));
call    0 returned 100%
   950170:  101:  (void)it;
  950170*:  102:  LLVM_DEBUG({
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  103:    if (!it.second) {
        -:  104:      llvm::dbgs() << "[" DEBUG_TYPE
        -:  105:                      "] repeated interface registration for dialect "
        -:  106:                   << getNamespace();
        -:  107:    }
        -:  108:  });
   950170:  109:}
        -:  110:
        -:  111://===----------------------------------------------------------------------===//
        -:  112:// Dialect Interface
        -:  113://===----------------------------------------------------------------------===//
        -:  114:
        -:  115:DialectInterface::~DialectInterface() = default;
        -:  116:
function _ZNK4mlir16DialectInterface10getContextEv called 0 returned 0% blocks executed 0%
    #####:  117:MLIRContext *DialectInterface::getContext() const {
    #####:  118:  return dialect->getContext();
        -:  119:}
        -:  120:
function _ZN4mlir6detail30DialectInterfaceCollectionBaseC2EPNS_11MLIRContextENS_6TypeIDE called 3733422 returned 100% blocks executed 100%
  3733422:  121:DialectInterfaceCollectionBase::DialectInterfaceCollectionBase(
  3733422:  122:    MLIRContext *ctx, TypeID interfaceKind) {
call    0 returned 100%
call    1 returned 100%
 26371954:  123:  for (auto *dialect : ctx->getLoadedDialects()) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
call    3 returned 100%
 22638532:  124:    if (auto *interface = dialect->getRegisteredInterface(interfaceKind)) {
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
  7542613:  125:      interfaces.insert(interface);
call    0 returned 100%
  7542613:  126:      orderedInterfaces.push_back(interface);
call    0 returned 100%
        -:  127:    }
        -:  128:  }
  3733422:  129:}
        -:  130:
        -:  131:DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase() = default;
        -:  132:
        -:  133:/// Get the interface for the dialect of given operation, or null if one
        -:  134:/// is not registered.
        -:  135:const DialectInterface *
function _ZNK4mlir6detail30DialectInterfaceCollectionBase15getInterfaceForEPNS_9OperationE called 519 returned 100% blocks executed 75%
      519:  136:DialectInterfaceCollectionBase::getInterfaceFor(Operation *op) const {
      519:  137:  return getInterfaceFor(op->getDialect());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  138:}
        -:  139:
        -:  140://===----------------------------------------------------------------------===//
        -:  141:// DialectExtension
        -:  142://===----------------------------------------------------------------------===//
        -:  143:
        -:  144:DialectExtensionBase::~DialectExtensionBase() = default;
        -:  145:
        -:  146://===----------------------------------------------------------------------===//
        -:  147:// DialectRegistry
        -:  148://===----------------------------------------------------------------------===//
        -:  149:
function _ZN4mlir15DialectRegistryC2Ev called 539097 returned 100% blocks executed 100%
   539097:  150:DialectRegistry::DialectRegistry() { insert<BuiltinDialect>(); }
call    0 returned 100%
        -:  151:
        -:  152:DialectAllocatorFunctionRef
function _ZNK4mlir15DialectRegistry19getDialectAllocatorEN4llvm9StringRefE called 220987 returned 100% blocks executed 64%
   220987:  153:DialectRegistry::getDialectAllocator(StringRef name) const {
   441974:  154:  auto it = registry.find(name.str());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
   220987:  155:  if (it == registry.end())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  156:    return nullptr;
   220987:  157:  return it->second.second;
        -:  158:}
        -:  159:
function _ZN4mlir15DialectRegistry6insertENS_6TypeIDEN4llvm9StringRefERKSt8functionIFPNS_7DialectEPNS_11MLIRContextEEE called 10050502 returned 100% blocks executed 68%
 10050502:  160:void DialectRegistry::insert(TypeID typeID, StringRef name,
        -:  161:                             const DialectAllocatorFunction &ctor) {
 10050502:  162:  auto inserted = registry.insert(
 30151506:  163:      std::make_pair(std::string(name), std::make_pair(typeID, ctor)));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
 10050502:  164:  if (!inserted.second && inserted.first->second.first != typeID) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  165:    llvm::report_fatal_error(
call    0 never executed
        -:  166:        "Trying to register different dialects for the same namespace: " +
    #####:  167:        name);
call    0 never executed
        -:  168:  }
 10050502:  169:}
        -:  170:
function _ZN4mlir15DialectRegistry13insertDynamicEN4llvm9StringRefERKSt8functionIFvPNS_11MLIRContextEPNS_14DynamicDialectEEE called 128638 returned 100% blocks executed 93%
   128638:  171:void DialectRegistry::insertDynamic(
        -:  172:    StringRef name, const DynamicDialectPopulationFunction &ctor) {
        -:  173:  // This TypeID marks dynamic dialects. We cannot give a TypeID for the
        -:  174:  // dialect yet, since the TypeID of a dynamic dialect is defined at its
        -:  175:  // construction.
   128638:  176:  TypeID typeID = TypeID::get<void>();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  177:
        -:  178:  // Create the dialect, and then call ctor, which allocates its components.
function _ZZN4mlir15DialectRegistry13insertDynamicEN4llvm9StringRefERKSt8functionIFvPNS_11MLIRContextEPNS_14DynamicDialectEEEENKUlS5_E_clES5_ called 0 returned 0% blocks executed 0%
  128638*:  179:  auto constructor = [nameStr = name.str(), ctor](MLIRContext *ctx) {
    #####:  180:    auto *dynDialect = ctx->getOrLoadDynamicDialect(
call    0 never executed
function _ZZZN4mlir15DialectRegistry13insertDynamicEN4llvm9StringRefERKSt8functionIFvPNS_11MLIRContextEPNS_14DynamicDialectEEEENKUlS5_E_clES5_ENKUlS7_E_clES7_ called 0 returned 0% blocks executed 0%
    #####:  181:        nameStr, [ctx, ctor](DynamicDialect *dialect) { ctor(ctx, dialect); });
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  182:    assert(dynDialect && "Dynamic dialect creation unexpectedly failed");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  183:    return dynDialect;
   257276:  184:  };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  185:
   257276:  186:  insert(typeID, name, constructor);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
   128638:  187:}
        -:  188:
function _ZNK4mlir15DialectRegistry15applyExtensionsEPNS_7DialectE called 566172 returned 100% blocks executed 100%
   566172:  189:void DialectRegistry::applyExtensions(Dialect *dialect) const {
   566172:  190:  MLIRContext *ctx = dialect->getContext();
   566172:  191:  StringRef dialectName = dialect->getNamespace();
        -:  192:
        -:  193:  // Functor used to try to apply the given extension.
function _ZZNK4mlir15DialectRegistry15applyExtensionsEPNS_7DialectEENKUlRKNS_20DialectExtensionBaseEE_clES5_ called 7915796 returned 100% blocks executed 31%
  8481968:  194:  auto applyExtension = [&](const DialectExtensionBase &extension) {
  7915796:  195:    ArrayRef<StringRef> dialectNames = extension.getRequiredDialects();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  196:
        -:  197:    // Handle the simple case of a single dialect name. In this case, the
        -:  198:    // required dialect should be the current dialect.
  7915796:  199:    if (dialectNames.size() == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 7915796*:  200:      if (dialectNames.front() == dialectName)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
  178522*:  201:        extension.apply(ctx, dialect);
call    0 returned 100%
call    1 never executed
  7915796:  202:      return;
        -:  203:    }
        -:  204:
        -:  205:    // Otherwise, check to see if this extension requires this dialect.
    #####:  206:    const StringRef *nameIt = llvm::find(dialectNames, dialectName);
branch  0 never executed
branch  1 never executed
    #####:  207:    if (nameIt == dialectNames.end())
branch  0 never executed
branch  1 never executed
        -:  208:      return;
        -:  209:
        -:  210:    // If it does, ensure that all of the other required dialects have been
        -:  211:    // loaded.
    #####:  212:    SmallVector<Dialect *> requiredDialects;
branch  0 never executed
branch  1 never executed
    #####:  213:    requiredDialects.reserve(dialectNames.size());
branch  0 never executed
branch  1 never executed
    #####:  214:    for (auto it = dialectNames.begin(), e = dialectNames.end(); it != e;
branch  0 never executed
branch  1 never executed
        -:  215:         ++it) {
        -:  216:      // The current dialect is known to be loaded.
    #####:  217:      if (it == nameIt) {
branch  0 never executed
branch  1 never executed
    #####:  218:        requiredDialects.push_back(dialect);
call    0 never executed
    #####:  219:        continue;
        -:  220:      }
        -:  221:      // Otherwise, check if it is loaded.
    #####:  222:      Dialect *loadedDialect = ctx->getLoadedDialect(*it);
call    0 never executed
    #####:  223:      if (!loadedDialect)
branch  0 never executed
branch  1 never executed
 7915796*:  224:        return;
branch  0 never executed
branch  1 never executed
    #####:  225:      requiredDialects.push_back(loadedDialect);
call    0 never executed
        -:  226:    }
    #####:  227:    extension.apply(ctx, requiredDialects);
call    0 never executed
branch  1 never executed
branch  2 never executed
   566172:  228:  };
        -:  229:
  8481968:  230:  for (const auto &extension : extensions)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
  7915796:  231:    applyExtension(*extension);
call    0 returned 100%
   566172:  232:}
        -:  233:
function _ZNK4mlir15DialectRegistry15applyExtensionsEPNS_11MLIRContextE called 4562 returned 100% blocks executed 100%
     4562:  234:void DialectRegistry::applyExtensions(MLIRContext *ctx) const {
        -:  235:  // Functor used to try to apply the given extension.
function _ZZNK4mlir15DialectRegistry15applyExtensionsEPNS_11MLIRContextEENKUlRKNS_20DialectExtensionBaseEE_clES5_.isra.0 called 5393 returned 100% blocks executed 47%
     9955:  236:  auto applyExtension = [&](const DialectExtensionBase &extension) {
     5393:  237:    ArrayRef<StringRef> dialectNames = extension.getRequiredDialects();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:
        -:  239:    // Check to see if all of the dialects for this extension are loaded.
    5393*:  240:    SmallVector<Dialect *> requiredDialects;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     5393:  241:    requiredDialects.reserve(dialectNames.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    5393*:  242:    for (StringRef dialectName : dialectNames) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    5393*:  243:      Dialect *loadedDialect = ctx->getLoadedDialect(dialectName);
call    0 returned 100%
call    1 never executed
     5393:  244:      if (!loadedDialect)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5393:  245:        return;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  246:      requiredDialects.push_back(loadedDialect);
call    0 never executed
        -:  247:    }
    #####:  248:    extension.apply(ctx, requiredDialects);
call    0 never executed
branch  1 never executed
branch  2 never executed
     4562:  249:  };
        -:  250:
     9955:  251:  for (const auto &extension : extensions)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
call    2 returned 100%
     5393:  252:    applyExtension(*extension);
call    0 returned 100%
     4562:  253:}
        -:  254:
function _ZNK4mlir15DialectRegistry10isSubsetOfERKS0_ called 99380 returned 100% blocks executed 100%
    99380:  255:bool DialectRegistry::isSubsetOf(const DialectRegistry &rhs) const {
        -:  256:  // Treat any extensions conservatively.
    99380:  257:  if (!extensions.empty())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  258:    return false;
        -:  259:  // Check that the current dialects fully overlap with the dialects in 'rhs'.
   189636:  260:  return llvm::all_of(
    94818:  261:      registry, [&](const auto &it) { return rhs.registry.count(it.first); });
call    0 returned 100%
        -:  262:}
