        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/SCFToSPIRV/SCFToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/SCFToSPIRV/CMakeFiles/obj.MLIRSCFToSPIRV.dir/SCFToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/SCFToSPIRV/CMakeFiles/obj.MLIRSCFToSPIRV.dir/SCFToSPIRVPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- SCFToSPIRVPass.cpp - SCF to SPIR-V Passes --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert SCF dialect into SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/SCFToSPIRV/SCFToSPIRVPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/ArithToSPIRV/ArithToSPIRV.h"
        -:   16:#include "mlir/Conversion/FuncToSPIRV/FuncToSPIRV.h"
        -:   17:#include "mlir/Conversion/MemRefToSPIRV/MemRefToSPIRV.h"
        -:   18:#include "mlir/Conversion/SCFToSPIRV/SCFToSPIRV.h"
        -:   19:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   20:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   21:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:#define GEN_PASS_DEF_SCFTOSPIRV
        -:   25:#include "mlir/Conversion/Passes.h.inc"
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:
        -:   30:namespace {
  129242*:   31:struct SCFToSPIRVPass : public impl::SCFToSPIRVBase<SCFToSPIRVPass> {
call    0 never executed
call    1 returned 100%
        -:   32:  void runOnOperation() override;
        -:   33:};
        -:   34:} // namespace
        -:   35:
function _ZN12_GLOBAL__N_114SCFToSPIRVPass14runOnOperationEv called 511 returned 100% blocks executed 71%
      511:   36:void SCFToSPIRVPass::runOnOperation() {
      511:   37:  MLIRContext *context = &getContext();
call    0 returned 100%
      511:   38:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   39:
      511:   40:  auto targetAttr = spirv::lookupTargetEnvOrDefault(op);
call    0 returned 100%
      511:   41:  std::unique_ptr<ConversionTarget> target =
     1022:   42:      SPIRVConversionTarget::get(targetAttr);
call    0 returned 100%
call    1 returned 100%
        -:   43:
     1022:   44:  SPIRVTypeConverter typeConverter(targetAttr);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      511:   45:  ScfToSPIRVContext scfContext;
call    0 returned 100%
     1022:   46:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      511:   47:  populateSCFToSPIRVPatterns(typeConverter, scfContext, patterns);
call    0 returned 100%
        -:   48:
        -:   49:  // TODO: Change SPIR-V conversion to be progressive and remove the following
        -:   50:  // patterns.
      511:   51:  mlir::arith::populateArithToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
      511:   52:  populateFuncToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
      511:   53:  populateMemRefToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
      511:   54:  populateBuiltinFuncToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
        -:   55:
      511:   56:  if (failed(applyPartialConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   57:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   58:}
        -:   59:
function _ZN4mlir27createConvertSCFToSPIRVPassEv called 129242 returned 100% blocks executed 100%
   129242:   60:std::unique_ptr<OperationPass<>> mlir::createConvertSCFToSPIRVPass() {
   129242:   61:  return std::make_unique<SCFToSPIRVPass>();
call    0 returned 100%
        -:   62:}
