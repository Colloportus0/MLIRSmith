        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Target/LLVMIR/TypeToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/TypeToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/TypeToLLVM.cpp.gcda
        -:    0:Runs:128646
        -:    1://===- TypeToLLVM.cpp - type translation from MLIR to LLVM IR -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Target/LLVMIR/TypeToLLVM.h"
        -:   10:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   11:#include "mlir/IR/BuiltinTypes.h"
        -:   12:#include "mlir/IR/MLIRContext.h"
        -:   13:
        -:   14:#include "llvm/ADT/TypeSwitch.h"
        -:   15:#include "llvm/IR/DataLayout.h"
        -:   16:#include "llvm/IR/DerivedTypes.h"
        -:   17:#include "llvm/IR/Type.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace LLVM {
        -:   23:namespace detail {
        -:   24:/// Support for translating MLIR LLVM dialect types to LLVM IR.
        -:   25:class TypeToLLVMIRTranslatorImpl {
        -:   26:public:
        -:   27:  /// Constructs a class creating types in the given LLVM context.
    #####:   28:  TypeToLLVMIRTranslatorImpl(llvm::LLVMContext &context) : context(context) {}
        -:   29:
        -:   30:  /// Translates a single type.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl13translateTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   31:  llvm::Type *translateType(Type type) {
        -:   32:    // If the conversion is already known, just return it.
    #####:   33:    if (knownTranslations.count(type))
call    0 never executed
    #####:   34:      return knownTranslations.lookup(type);
call    0 never executed
        -:   35:
        -:   36:    // Dispatch to an appropriate function.
    #####:   37:    llvm::Type *translated =
call    0 never executed
    #####:   38:        llvm::TypeSwitch<Type, llvm::Type *>(type)
    #####:   39:            .Case([this](LLVM::LLVMVoidType) {
    #####:   40:              return llvm::Type::getVoidTy(context);
call    0 never executed
    #####:   41:            })
call    0 never executed
        -:   42:            .Case(
    #####:   43:                [this](Float16Type) { return llvm::Type::getHalfTy(context); })
call    0 never executed
call    1 never executed
    #####:   44:            .Case([this](BFloat16Type) {
    #####:   45:              return llvm::Type::getBFloatTy(context);
call    0 never executed
    #####:   46:            })
call    0 never executed
        -:   47:            .Case(
    #####:   48:                [this](Float32Type) { return llvm::Type::getFloatTy(context); })
call    0 never executed
call    1 never executed
    #####:   49:            .Case([this](Float64Type) {
    #####:   50:              return llvm::Type::getDoubleTy(context);
call    0 never executed
    #####:   51:            })
call    0 never executed
    #####:   52:            .Case([this](Float80Type) {
    #####:   53:              return llvm::Type::getX86_FP80Ty(context);
call    0 never executed
    #####:   54:            })
call    0 never executed
    #####:   55:            .Case([this](Float128Type) {
    #####:   56:              return llvm::Type::getFP128Ty(context);
call    0 never executed
    #####:   57:            })
call    0 never executed
    #####:   58:            .Case([this](LLVM::LLVMPPCFP128Type) {
    #####:   59:              return llvm::Type::getPPC_FP128Ty(context);
call    0 never executed
    #####:   60:            })
call    0 never executed
    #####:   61:            .Case([this](LLVM::LLVMX86MMXType) {
    #####:   62:              return llvm::Type::getX86_MMXTy(context);
call    0 never executed
    #####:   63:            })
call    0 never executed
    #####:   64:            .Case([this](LLVM::LLVMTokenType) {
    #####:   65:              return llvm::Type::getTokenTy(context);
call    0 never executed
    #####:   66:            })
call    0 never executed
    #####:   67:            .Case([this](LLVM::LLVMLabelType) {
    #####:   68:              return llvm::Type::getLabelTy(context);
call    0 never executed
    #####:   69:            })
call    0 never executed
    #####:   70:            .Case([this](LLVM::LLVMMetadataType) {
    #####:   71:              return llvm::Type::getMetadataTy(context);
call    0 never executed
    #####:   72:            })
call    0 never executed
        -:   73:            .Case<LLVM::LLVMArrayType, IntegerType, LLVM::LLVMFunctionType,
        -:   74:                  LLVM::LLVMPointerType, LLVM::LLVMStructType,
        -:   75:                  LLVM::LLVMFixedVectorType, LLVM::LLVMScalableVectorType,
        -:   76:                  VectorType>(
function _ZZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl13translateTypeENS_4TypeEENKUlT_E11_clINS_11IntegerTypeEEEDaS4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   77:                [this](auto type) { return this->translate(type); })
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
function _ZZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl13translateTypeENS_4TypeEENKUlS3_E12_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   78:            .Default([](Type t) -> llvm::Type * {
branch  0 never executed
branch  1 never executed
    #####:   79:              llvm_unreachable("unknown LLVM dialect type");
    #####:   80:            });
        -:   81:
        -:   82:    // Cache the result of the conversion and return.
    #####:   83:    knownTranslations.try_emplace(type, translated);
call    0 never executed
    #####:   84:    return translated;
        -:   85:  }
        -:   86:
        -:   87:private:
        -:   88:  /// Translates the given array type.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS0_13LLVMArrayTypeE called 0 returned 0% blocks executed 0%
    #####:   89:  llvm::Type *translate(LLVM::LLVMArrayType type) {
    #####:   90:    return llvm::ArrayType::get(translateType(type.getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   91:                                type.getNumElements());
call    0 never executed
        -:   92:  }
        -:   93:
        -:   94:  /// Translates the given function type.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS0_16LLVMFunctionTypeE called 0 returned 0% blocks executed 0%
    #####:   95:  llvm::Type *translate(LLVM::LLVMFunctionType type) {
    #####:   96:    SmallVector<llvm::Type *, 8> paramTypes;
call    0 never executed
    #####:   97:    translateTypes(type.getParams(), paramTypes);
call    0 never executed
call    1 never executed
    #####:   98:    return llvm::FunctionType::get(translateType(type.getReturnType()),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   99:                                   paramTypes, type.isVarArg());
call    0 never executed
        -:  100:  }
        -:  101:
        -:  102:  /// Translates the given integer type.
    #####:  103:  llvm::Type *translate(IntegerType type) {
    #####:  104:    return llvm::IntegerType::get(context, type.getWidth());
call    0 never executed
call    1 never executed
        -:  105:  }
        -:  106:
        -:  107:  /// Translates the given pointer type.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS0_15LLVMPointerTypeE called 0 returned 0% blocks executed 0%
    #####:  108:  llvm::Type *translate(LLVM::LLVMPointerType type) {
    #####:  109:    if (type.isOpaque())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:      return llvm::PointerType::get(context, type.getAddressSpace());
call    0 never executed
call    1 never executed
    #####:  111:    return llvm::PointerType::get(translateType(type.getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  112:                                  type.getAddressSpace());
        -:  113:  }
        -:  114:
        -:  115:  /// Translates the given structure type, supports both identified and literal
        -:  116:  /// structs. This will _create_ a new identified structure every time, use
        -:  117:  /// `convertType` if a structure with the same name must be looked up instead.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS0_14LLVMStructTypeE called 0 returned 0% blocks executed 0%
    #####:  118:  llvm::Type *translate(LLVM::LLVMStructType type) {
    #####:  119:    SmallVector<llvm::Type *, 8> subtypes;
call    0 never executed
    #####:  120:    if (!type.isIdentified()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:      translateTypes(type.getBody(), subtypes);
call    0 never executed
call    1 never executed
    #####:  122:      return llvm::StructType::get(context, subtypes, type.isPacked());
call    0 never executed
call    1 never executed
        -:  123:    }
        -:  124:
    #####:  125:    llvm::StructType *structType =
    #####:  126:        llvm::StructType::create(context, type.getName());
call    0 never executed
call    1 never executed
        -:  127:    // Mark the type we just created as known so that recursive calls can pick
        -:  128:    // it up and use directly.
    #####:  129:    knownTranslations.try_emplace(type, structType);
call    0 never executed
    #####:  130:    if (type.isOpaque())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  131:      return structType;
        -:  132:
    #####:  133:    translateTypes(type.getBody(), subtypes);
call    0 never executed
call    1 never executed
    #####:  134:    structType->setBody(subtypes, type.isPacked());
call    0 never executed
call    1 never executed
    #####:  135:    return structType;
        -:  136:  }
        -:  137:
        -:  138:  /// Translates the given built-in vector type compatible with LLVM.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS_10VectorTypeE called 0 returned 0% blocks executed 0%
    #####:  139:  llvm::Type *translate(VectorType type) {
    #####:  140:    assert(LLVM::isCompatibleVectorType(type) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  141:           "expected compatible with LLVM vector type");
    #####:  142:    if (type.isScalable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:      return llvm::ScalableVectorType::get(translateType(type.getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  144:                                           type.getNumElements());
call    0 never executed
    #####:  145:    return llvm::FixedVectorType::get(translateType(type.getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  146:                                      type.getNumElements());
call    0 never executed
        -:  147:  }
        -:  148:
        -:  149:  /// Translates the given fixed-vector type.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS0_19LLVMFixedVectorTypeE called 0 returned 0% blocks executed 0%
    #####:  150:  llvm::Type *translate(LLVM::LLVMFixedVectorType type) {
    #####:  151:    return llvm::FixedVectorType::get(translateType(type.getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  152:                                      type.getNumElements());
        -:  153:  }
        -:  154:
        -:  155:  /// Translates the given scalable-vector type.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl9translateENS0_22LLVMScalableVectorTypeE called 0 returned 0% blocks executed 0%
    #####:  156:  llvm::Type *translate(LLVM::LLVMScalableVectorType type) {
    #####:  157:    return llvm::ScalableVectorType::get(translateType(type.getElementType()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  158:                                         type.getMinNumElements());
        -:  159:  }
        -:  160:
        -:  161:  /// Translates a list of types.
function _ZN4mlir4LLVM6detail26TypeToLLVMIRTranslatorImpl14translateTypesEN4llvm8ArrayRefINS_4TypeEEERNS3_15SmallVectorImplIPNS3_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  162:  void translateTypes(ArrayRef<Type> types,
        -:  163:                      SmallVectorImpl<llvm::Type *> &result) {
    #####:  164:    result.reserve(result.size() + types.size());
branch  0 never executed
branch  1 never executed
    #####:  165:    for (auto type : types)
branch  0 never executed
branch  1 never executed
    #####:  166:      result.push_back(translateType(type));
call    0 never executed
call    1 never executed
    #####:  167:  }
        -:  168:
        -:  169:  /// Reference to the context in which the LLVM IR types are created.
        -:  170:  llvm::LLVMContext &context;
        -:  171:
        -:  172:  /// Map of known translation. This serves a double purpose: caches translation
        -:  173:  /// results to avoid repeated recursive calls and makes sure identified
        -:  174:  /// structs with the same name (that is, equal) are resolved to an existing
        -:  175:  /// type instead of creating a new type.
        -:  176:  llvm::DenseMap<Type, llvm::Type *> knownTranslations;
        -:  177:};
        -:  178:} // namespace detail
        -:  179:} // namespace LLVM
        -:  180:} // namespace mlir
        -:  181:
function _ZN4mlir4LLVM22TypeToLLVMIRTranslatorC2ERN4llvm11LLVMContextE called 0 returned 0% blocks executed 0%
    #####:  182:LLVM::TypeToLLVMIRTranslator::TypeToLLVMIRTranslator(llvm::LLVMContext &context)
    #####:  183:    : impl(new detail::TypeToLLVMIRTranslatorImpl(context)) {}
call    0 never executed
call    1 never executed
        -:  184:
        -:  185:LLVM::TypeToLLVMIRTranslator::~TypeToLLVMIRTranslator() = default;
        -:  186:
function _ZN4mlir4LLVM22TypeToLLVMIRTranslator13translateTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  187:llvm::Type *LLVM::TypeToLLVMIRTranslator::translateType(Type type) {
    #####:  188:  return impl->translateType(type);
call    0 never executed
        -:  189:}
        -:  190:
function _ZN4mlir4LLVM22TypeToLLVMIRTranslator21getPreferredAlignmentENS_4TypeERKN4llvm10DataLayoutE called 0 returned 0% blocks executed 0%
    #####:  191:unsigned LLVM::TypeToLLVMIRTranslator::getPreferredAlignment(
        -:  192:    Type type, const llvm::DataLayout &layout) {
    #####:  193:  return layout.getPrefTypeAlignment(translateType(type));
call    0 never executed
call    1 never executed
        -:  194:}
