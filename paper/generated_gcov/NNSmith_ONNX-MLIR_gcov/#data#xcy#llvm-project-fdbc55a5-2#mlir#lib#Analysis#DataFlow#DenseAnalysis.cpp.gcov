        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/DataFlow/DenseAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DenseAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DenseAnalysis.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- DenseAnalysis.cpp - Dense data-flow analysis -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/DenseAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   11:#include "mlir/Interfaces/CallInterfaces.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::dataflow;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// AbstractDenseDataFlowAnalysis
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis10initializeEPNS_9OperationE called 389314 returned 100% blocks executed 90%
   389314:   21:LogicalResult AbstractDenseDataFlowAnalysis::initialize(Operation *top) {
        -:   22:  // Visit every operation and block.
   389314:   23:  visitOperation(top);
call    0 returned 100%
   509730:   24:  for (Region &region : top->getRegions()) {
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
    55852:   25:    for (Block &block : region) {
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    42464:   26:      visitBlock(&block);
call    0 returned 100%
   431283:   27:      for (Operation &op : block)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
call    2 returned 100%
   388819:   28:        if (failed(initialize(&op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   29:          return failure();
        -:   30:    }
        -:   31:  }
   389314:   32:  return success();
        -:   33:}
        -:   34:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis5visitENS_12ProgramPointE called 700521 returned 100% blocks executed 89%
   700521:   35:LogicalResult AbstractDenseDataFlowAnalysis::visit(ProgramPoint point) {
   700521:   36:  if (auto *op = point.dyn_cast<Operation *>())
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
   589897:   37:    visitOperation(op);
call    0 returned 100%
   110624:   38:  else if (auto *block = point.dyn_cast<Block *>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   110624:   39:    visitBlock(block);
call    0 returned 100%
        -:   40:  else
    #####:   41:    return failure();
   700521:   42:  return success();
        -:   43:}
        -:   44:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis14visitOperationEPNS_9OperationE called 979211 returned 100% blocks executed 78%
   979211:   45:void AbstractDenseDataFlowAnalysis::visitOperation(Operation *op) {
        -:   46:  // If the containing block is not executable, bail out.
  1958422:   47:  if (!getOrCreateFor<Executable>(op, op->getBlock())->isLive())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
        -:   48:    return;
        -:   49:
        -:   50:  // Get the dense lattice to update.
   751865:   51:  AbstractDenseLattice *after = getLattice(op);
call    0 returned 100%
call    1 returned 100%
        -:   52:
        -:   53:  // If this op implements region control-flow, then control-flow dictates its
        -:   54:  // transfer function.
   751865:   55:  if (auto branch = dyn_cast<RegionBranchOpInterface>(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   56:    return visitRegionBranchOperation(op, branch, after);
call    0 never executed
call    1 never executed
        -:   57:
        -:   58:  // If this is a call operation, then join its lattices across known return
        -:   59:  // sites.
   751865:   60:  if (auto call = dyn_cast<CallOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
    15067:   61:    const auto *predecessors = getOrCreateFor<PredecessorState>(op, call);
call    0 returned 100%
call    1 returned 100%
        -:   62:    // If not all return sites are known, then conservatively assume we can't
        -:   63:    // reason about the data-flow.
    15067:   64:    if (!predecessors->allPredecessorsKnown())
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    15067:   65:      return setToEntryState(after);
call    0 returned 100%
   14614*:   66:    for (Operation *predecessor : predecessors->getKnownPredecessors())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   67:      join(after, *getLatticeFor(op, predecessor));
call    0 never executed
call    1 never executed
        -:   68:    return;
        -:   69:  }
        -:   70:
        -:   71:  // Get the dense state before the execution of the op.
   736798:   72:  const AbstractDenseLattice *before;
  1383313:   73:  if (Operation *prev = op->getPrevNode())
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 100%
branch  3 taken 0%
   646515:   74:    before = getLatticeFor(op, prev);
call    0 returned 100%
call    1 returned 100%
        -:   75:  else
    90283:   76:    before = getLatticeFor(op, op->getBlock());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   77:
        -:   78:  // Invoke the operation transfer function.
   736798:   79:  visitOperationImpl(op, *before, after);
call    0 returned 100%
        -:   80:}
        -:   81:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis10visitBlockEPNS_5BlockE called 153088 returned 100% blocks executed 69%
   153088:   82:void AbstractDenseDataFlowAnalysis::visitBlock(Block *block) {
        -:   83:  // If the block is not executable, bail out.
   306176:   84:  if (!getOrCreateFor<Executable>(block, block)->isLive())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        -:   85:    return;
        -:   86:
        -:   87:  // Get the dense lattice to update.
   114574:   88:  AbstractDenseLattice *after = getLattice(block);
call    0 returned 100%
call    1 returned 100%
        -:   89:
        -:   90:  // The dense lattices of entry blocks are set by region control-flow or the
        -:   91:  // callgraph.
   114574:   92:  if (block->isEntryBlock()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        -:   93:    // Check if this block is the entry block of a callable region.
     3950:   94:    auto callable = dyn_cast<CallableOpInterface>(block->getParentOp());
call    0 returned 100%
call    1 returned 100%
     3950:   95:    if (callable && callable.getCallableRegion() == block->getParent()) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
     2952:   96:      const auto *callsites = getOrCreateFor<PredecessorState>(block, callable);
call    0 returned 100%
call    1 returned 100%
        -:   97:      // If not all callsites are known, conservatively mark all lattices as
        -:   98:      // having reached their pessimistic fixpoints.
     5904:   99:      if (!callsites->allPredecessorsKnown())
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
     2952:  100:        return setToEntryState(after);
call    0 returned 100%
    #####:  101:      for (Operation *callsite : callsites->getKnownPredecessors()) {
branch  0 never executed
branch  1 never executed
        -:  102:        // Get the dense lattice before the callsite.
    #####:  103:        if (Operation *prev = callsite->getPrevNode())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  104:          join(after, *getLatticeFor(block, prev));
call    0 never executed
call    1 never executed
        -:  105:        else
    #####:  106:          join(after, *getLatticeFor(block, callsite->getBlock()));
call    0 never executed
call    1 never executed
        -:  107:      }
        -:  108:      return;
        -:  109:    }
        -:  110:
        -:  111:    // Check if we can reason about the control-flow.
      998:  112:    if (auto branch = dyn_cast<RegionBranchOpInterface>(block->getParentOp()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
    #####:  113:      return visitRegionBranchOperation(block, branch, after);
call    0 never executed
call    1 never executed
        -:  114:
        -:  115:    // Otherwise, we can't reason about the data-flow.
      998:  116:    return setToEntryState(after);
call    0 returned 100%
        -:  117:  }
        -:  118:
        -:  119:  // Join the state with the state after the block's predecessors.
   275050:  120:  for (Block::pred_iterator it = block->pred_begin(), e = block->pred_end();
   275050:  121:       it != e; ++it) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  122:    // Skip control edges that aren't executable.
   164426:  123:    Block *predecessor = *it;
call    0 returned 100%
   164426:  124:    if (!getOrCreateFor<Executable>(
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  125:             block, getProgramPoint<CFGEdge>(predecessor, block))
   328852:  126:             ->isLive())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
    11208:  127:      continue;
        -:  128:
        -:  129:    // Merge in the state from the predecessor's terminator.
   153218:  130:    join(after, *getLatticeFor(block, predecessor->getTerminator()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  131:  }
        -:  132:}
        -:  133:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis26visitRegionBranchOperationENS_12ProgramPointENS_23RegionBranchOpInterfaceEPNS0_20AbstractDenseLatticeE called 0 returned 0% blocks executed 0%
    #####:  134:void AbstractDenseDataFlowAnalysis::visitRegionBranchOperation(
        -:  135:    ProgramPoint point, RegionBranchOpInterface branch,
        -:  136:    AbstractDenseLattice *after) {
        -:  137:  // Get the terminator predecessors.
    #####:  138:  const auto *predecessors = getOrCreateFor<PredecessorState>(point, point);
call    0 never executed
    #####:  139:  assert(predecessors->allPredecessorsKnown() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  140:         "unexpected unresolved region successors");
        -:  141:
    #####:  142:  for (Operation *op : predecessors->getKnownPredecessors()) {
branch  0 never executed
branch  1 never executed
    #####:  143:    const AbstractDenseLattice *before;
        -:  144:    // If the predecessor is the parent, get the state before the parent.
    #####:  145:    if (op == branch) {
branch  0 never executed
branch  1 never executed
    #####:  146:      if (Operation *prev = op->getPrevNode())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  147:        before = getLatticeFor(point, prev);
call    0 never executed
        -:  148:      else
    #####:  149:        before = getLatticeFor(point, op->getBlock());
call    0 never executed
        -:  150:
        -:  151:      // Otherwise, get the state after the terminator.
        -:  152:    } else {
    #####:  153:      before = getLatticeFor(point, op);
call    0 never executed
        -:  154:    }
    #####:  155:    join(after, *before);
call    0 never executed
        -:  156:  }
    #####:  157:}
        -:  158:
        -:  159:const AbstractDenseLattice *
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis13getLatticeForENS_12ProgramPointES2_ called 0 returned 0% blocks executed 0%
  890016*:  160:AbstractDenseDataFlowAnalysis::getLatticeFor(ProgramPoint dependent,
        -:  161:                                             ProgramPoint point) {
  890016*:  162:  AbstractDenseLattice *state = getLattice(point);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 returned 100%
call    9 returned 100%
  890016*:  163:  addDependency(state, dependent);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 returned 100%
call    9 returned 100%
  890016*:  164:  return state;
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 never executed
        -:  165:}
