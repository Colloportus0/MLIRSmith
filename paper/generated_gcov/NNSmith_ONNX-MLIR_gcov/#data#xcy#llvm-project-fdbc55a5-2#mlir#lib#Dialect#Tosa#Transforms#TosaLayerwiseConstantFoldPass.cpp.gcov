        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Tosa/Transforms/TosaLayerwiseConstantFoldPass.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaLayerwiseConstantFoldPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaLayerwiseConstantFoldPass.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- TosaLayerwiseConstantFoldPass.cpp ----------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements constant folding transformations on TOSA operations
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   16:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   19:
        -:   20:namespace mlir {
        -:   21:namespace tosa {
        -:   22:#define GEN_PASS_DEF_TOSALAYERWISECONSTANTFOLDPASS
        -:   23:#include "mlir/Dialect/Tosa/Transforms/Passes.h.inc"
        -:   24:} // namespace tosa
        -:   25:} // namespace mlir
        -:   26:
        -:   27:using namespace mlir;
        -:   28:using namespace mlir::tosa;
        -:   29:
        -:   30:namespace {
        -:   31:
        -:   32:template <typename... Args>
function _ZN12_GLOBAL__N_123addOpsCanonicalizationsIJN4mlir4tosa5AbsOpENS2_5AddOpENS2_12ApplyScaleOpENS2_8ArgMaxOpENS2_22ArithmeticRightShiftOpENS2_11AvgPool2dOpENS2_12BitwiseAndOpENS2_12BitwiseNotOpENS2_11BitwiseOrOpENS2_12BitwiseXorOpENS2_6CastOpENS2_6CeilOpENS2_7ClampOpENS2_5ClzOpENS2_8ConcatOpENS2_7ConstOpENS2_8Conv2DOpENS2_8Conv3DOpENS2_8CustomOpENS2_17DepthwiseConv2DOpENS2_5DivOpENS2_7EqualOpENS2_5ExpOpENS2_7FloorOpENS2_16FullyConnectedOpENS2_8GatherOpENS2_14GreaterEqualOpENS2_9GreaterOpENS2_10IdentityOpENS2_4IfOpENS2_5LogOpENS2_12LogicalAndOpENS2_18LogicalLeftShiftOpENS2_12LogicalNotOpENS2_11LogicalOrOpENS2_19LogicalRightShiftOpENS2_12LogicalXorOpENS2_8MatMulOpENS2_11MaxPool2dOpENS2_9MaximumOpENS2_9MinimumOpENS2_5MulOpENS2_8NegateOpENS2_5PadOpENS2_5PowOpENS2_12ReciprocalOpENS2_11ReduceAllOpENS2_11ReduceAnyOpENS2_11ReduceMaxOpENS2_11ReduceMinOpENS2_12ReduceProdOpENS2_11ReduceSumOpENS2_9RescaleOpENS2_9ReshapeOpENS2_8ResizeOpENS2_9ReverseOpENS2_7RsqrtOpENS2_9ScatterOpENS2_8SelectOpENS2_9SigmoidOpENS2_7SliceOpENS2_5SubOpENS2_7TableOpENS2_6TanhOpENS2_6TileOpENS2_17TransposeConv2DOpENS2_11TransposeOpENS2_7WhileOpENS2_7YieldOpEEEEvPNS1_11MLIRContextERNS1_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:   33:void addOpsCanonicalizations(MLIRContext *ctx, RewritePatternSet &patterns) {
    #####:   34:  (Args::getCanonicalizationPatterns(patterns, ctx), ...);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   35:}
        -:   36:
    #####:   37:void populateTosaOpsCanonicalizationPatterns(MLIRContext *ctx,
        -:   38:                                             RewritePatternSet &patterns) {
    #####:   39:  addOpsCanonicalizations<
        -:   40:#define GET_OP_LIST
        -:   41:#include "mlir/Dialect/Tosa/IR/TosaOps.cpp.inc"
    #####:   42:      >(ctx, patterns);
        -:   43:}
        -:   44:
   166257:   45:struct TosaLayerwiseConstantFoldPass
call    0 returned 100%
call    1 returned 100%
        -:   46:    : public tosa::impl::TosaLayerwiseConstantFoldPassBase<
        -:   47:          TosaLayerwiseConstantFoldPass> {
function _ZN12_GLOBAL__N_129TosaLayerwiseConstantFoldPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   48:  void runOnOperation() override {
    #####:   49:    auto *ctx = &getContext();
call    0 never executed
    #####:   50:    RewritePatternSet patterns(ctx);
call    0 never executed
    #####:   51:    auto func = getOperation();
call    0 never executed
        -:   52:
    #####:   53:    mlir::tosa::populateTosaFoldConstantTransposePatterns(ctx, patterns);
call    0 never executed
    #####:   54:    populateTosaOpsCanonicalizationPatterns(ctx, patterns);
call    0 never executed
        -:   55:
    #####:   56:    if (applyPatternsAndFoldGreedily(func, std::move(patterns)).failed())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   57:      signalPassFailure();
call    0 never executed
    #####:   58:  }
        -:   59:};
        -:   60:
        -:   61:} // namespace
        -:   62:
function _ZN4mlir4tosa35createTosaLayerwiseConstantFoldPassEv called 129249 returned 100% blocks executed 100%
   129249:   63:std::unique_ptr<Pass> mlir::tosa::createTosaLayerwiseConstantFoldPass() {
   129249:   64:  return std::make_unique<TosaLayerwiseConstantFoldPass>();
call    0 returned 100%
        -:   65:}
