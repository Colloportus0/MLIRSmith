        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/TosaToSCF/TosaToSCFPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TosaToSCF/CMakeFiles/obj.MLIRTosaToSCF.dir/TosaToSCFPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TosaToSCF/CMakeFiles/obj.MLIRTosaToSCF.dir/TosaToSCFPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TosaToSCFPass.cpp - Lowering Tosa to SCF Dialect -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This transformation pass legalizes Tosa operations to the SCF dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TosaToSCF/TosaToSCF.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   18:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   19:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   20:#include "mlir/IR/PatternMatch.h"
        -:   21:#include "mlir/Pass/PassManager.h"
        -:   22:#include "mlir/Transforms/DialectConversion.h"
        -:   23:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   24:
        -:   25:namespace mlir {
        -:   26:#define GEN_PASS_DEF_TOSATOSCF
        -:   27:#include "mlir/Conversion/Passes.h.inc"
        -:   28:} // namespace mlir
        -:   29:
        -:   30:using namespace mlir;
        -:   31:using namespace tosa;
        -:   32:
        -:   33:namespace {
  129235*:   34:struct TosaToSCF : public impl::TosaToSCFBase<TosaToSCF> {
call    0 never executed
call    1 returned 100%
        -:   35:public:
function _ZN12_GLOBAL__N_19TosaToSCF14runOnOperationEv called 521 returned 100% blocks executed 90%
      521:   36:  void runOnOperation() override {
      521:   37:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     1042:   38:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      521:   39:    target.addLegalDialect<tensor::TensorDialect, scf::SCFDialect>();
call    0 returned 100%
      521:   40:    target.addIllegalOp<tosa::IfOp, tosa::WhileOp>();
call    0 returned 100%
      521:   41:    target.markUnknownOpDynamicallyLegal([](Operation *) { return true; });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   42:
      521:   43:    auto *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      521:   44:    mlir::tosa::populateTosaToSCFConversionPatterns(&patterns);
call    0 returned 100%
      521:   45:    if (failed(applyPartialConversion(op, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   46:      signalPassFailure();
call    0 never executed
      521:   47:  }
        -:   48:};
        -:   49:} // namespace
        -:   50:
function _ZN4mlir4tosa15createTosaToSCFEv called 129235 returned 100% blocks executed 100%
  129235*:   51:std::unique_ptr<Pass> mlir::tosa::createTosaToSCF() {
  129235*:   52:  return std::make_unique<TosaToSCF>();
call    0 never executed
call    1 returned 100%
        -:   53:}
        -:   54:
function _ZN4mlir4tosa18addTosaToSCFPassesERNS_13OpPassManagerE called 0 returned 0% blocks executed 0%
    #####:   55:void mlir::tosa::addTosaToSCFPasses(OpPassManager &pm) {
    #####:   56:  pm.addNestedPass<func::FuncOp>(createTosaToSCF());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   57:}
