        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Rewrite/TestPDLByteCode.cpp
        -:    0:Graph:../tools/mlir/test/lib/Rewrite/CMakeFiles/MLIRTestRewrite.dir/TestPDLByteCode.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Rewrite/CMakeFiles/MLIRTestRewrite.dir/TestPDLByteCode.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestPDLByteCode.cpp - Test rewriter bytecode functionality ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:#include "mlir/Pass/PassManager.h"
        -:   12:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:
        -:   16:/// Custom constraint invoked from PDL.
function _ZL28customSingleEntityConstraintRN4mlir15PatternRewriterEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   17:static LogicalResult customSingleEntityConstraint(PatternRewriter &rewriter,
        -:   18:                                                  Operation *rootOp) {
    #####:   19:  return success(rootOp->getName().getStringRef() == "test.op");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   20:}
function _ZL27customMultiEntityConstraintRN4mlir15PatternRewriterEPNS_9OperationES3_ called 0 returned 0% blocks executed 0%
    #####:   21:static LogicalResult customMultiEntityConstraint(PatternRewriter &rewriter,
        -:   22:                                                 Operation *root,
        -:   23:                                                 Operation *rootCopy) {
    #####:   24:  return customSingleEntityConstraint(rewriter, rootCopy);
call    0 never executed
        -:   25:}
function _ZL35customMultiEntityVariadicConstraintRN4mlir15PatternRewriterENS_10ValueRangeENS_9TypeRangeE called 0 returned 0% blocks executed 0%
    #####:   26:static LogicalResult customMultiEntityVariadicConstraint(
        -:   27:    PatternRewriter &rewriter, ValueRange operandValues, TypeRange typeValues) {
    #####:   28:  if (operandValues.size() != 2 || typeValues.size() != 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   29:    return failure();
    #####:   30:  return success();
        -:   31:}
        -:   32:
        -:   33:// Custom creator invoked from PDL.
function _ZL12customCreateRN4mlir15PatternRewriterEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   34:static Operation *customCreate(PatternRewriter &rewriter, Operation *op) {
    #####:   35:  return rewriter.create(OperationState(op->getLoc(), "test.success"));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   36:}
function _ZL26customVariadicResultCreateRN4mlir15PatternRewriterEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   37:static auto customVariadicResultCreate(PatternRewriter &rewriter,
        -:   38:                                       Operation *root) {
    #####:   39:  return std::make_pair(root->getOperands(), root->getOperands().getTypes());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   40:}
function _ZL16customCreateTypeRN4mlir15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   41:static Type customCreateType(PatternRewriter &rewriter) {
    #####:   42:  return rewriter.getF32Type();
call    0 never executed
        -:   43:}
function _ZL19customCreateStrAttrRN4mlir15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   44:static std::string customCreateStrAttr(PatternRewriter &rewriter) {
    #####:   45:  return "test.str";
call    0 never executed
        -:   46:}
        -:   47:
        -:   48:/// Custom rewriter invoked from PDL.
function _ZL14customRewriterRN4mlir15PatternRewriterEPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   49:static void customRewriter(PatternRewriter &rewriter, Operation *root,
        -:   50:                           Value input) {
    #####:   51:  rewriter.create(root->getLoc(), rewriter.getStringAttr("test.success"),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   52:                  input);
    #####:   53:  rewriter.eraseOp(root);
call    0 never executed
    #####:   54:}
        -:   55:
        -:   56:namespace {
  129246*:   57:struct TestPDLByteCodePass
call    0 never executed
call    1 returned 100%
        -:   58:    : public PassWrapper<TestPDLByteCodePass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_119TestPDLByteCodePass13resolveTypeIDEv called 129246 returned 100% blocks executed 100%
   129246:   59:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestPDLByteCodePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   60:
function _ZNK12_GLOBAL__N_119TestPDLByteCodePass11getArgumentEv called 128665 returned 100% blocks executed 100%
   128665:   61:  StringRef getArgument() const final { return "test-pdl-bytecode-pass"; }
function _ZNK12_GLOBAL__N_119TestPDLByteCodePass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   62:  StringRef getDescription() const final {
   128637:   63:    return "Test PDL ByteCode functionality";
        -:   64:  }
function _ZNK12_GLOBAL__N_119TestPDLByteCodePass20getDependentDialectsERN4mlir15DialectRegistryE called 609 returned 100% blocks executed 100%
      609:   65:  void getDependentDialects(DialectRegistry &registry) const override {
        -:   66:    // Mark the pdl_interp dialect as a dependent. This is needed, because we
        -:   67:    // create ops from that dialect as a part of the PDL-to-PDLInterp lowering.
      609:   68:    registry.insert<pdl_interp::PDLInterpDialect>();
call    0 returned 100%
      609:   69:  }
function _ZN12_GLOBAL__N_119TestPDLByteCodePass14runOnOperationEv called 523 returned 100% blocks executed 36%
      523:   70:  void runOnOperation() final {
      523:   71:    ModuleOp module = getOperation();
call    0 returned 100%
        -:   72:
        -:   73:    // The test cases are encompassed via two modules, one containing the
        -:   74:    // patterns and one containing the operations to rewrite.
      523:   75:    ModuleOp patternModule = module.lookupSymbol<ModuleOp>(
      523:   76:        StringAttr::get(module->getContext(), "patterns"));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      523:   77:    ModuleOp irModule = module.lookupSymbol<ModuleOp>(
      523:   78:        StringAttr::get(module->getContext(), "ir"));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
     523*:   79:    if (!patternModule || !irModule)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      523:   80:      return;
        -:   81:
    #####:   82:    RewritePatternSet patternList(module->getContext());
call    0 never executed
call    1 never executed
        -:   83:
        -:   84:    // Register ahead of time to test when functions are registered without a
        -:   85:    // pattern.
    #####:   86:    patternList.getPDLPatterns().registerConstraintFunction(
call    0 never executed
        -:   87:        "multi_entity_constraint", customMultiEntityConstraint);
    #####:   88:    patternList.getPDLPatterns().registerConstraintFunction(
call    0 never executed
        -:   89:        "single_entity_constraint", customSingleEntityConstraint);
        -:   90:
        -:   91:    // Process the pattern module.
    #####:   92:    patternModule.getOperation()->remove();
call    0 never executed
    #####:   93:    PDLPatternModule pdlPattern(patternModule);
call    0 never executed
call    1 never executed
        -:   94:
        -:   95:    // Note: This constraint was already registered, but we re-register here to
        -:   96:    // ensure that duplication registration is allowed (the duplicate mapping
        -:   97:    // will be ignored). This tests that we support separating the registration
        -:   98:    // of library functions from the construction of patterns, and also that we
        -:   99:    // allow multiple patterns to depend on the same library functions (without
        -:  100:    // asserting/crashing).
    #####:  101:    pdlPattern.registerConstraintFunction("multi_entity_constraint",
call    0 never executed
        -:  102:                                          customMultiEntityConstraint);
    #####:  103:    pdlPattern.registerConstraintFunction("multi_entity_var_constraint",
call    0 never executed
        -:  104:                                          customMultiEntityVariadicConstraint);
    #####:  105:    pdlPattern.registerRewriteFunction("creator", customCreate);
call    0 never executed
    #####:  106:    pdlPattern.registerRewriteFunction("var_creator",
call    0 never executed
        -:  107:                                       customVariadicResultCreate);
    #####:  108:    pdlPattern.registerRewriteFunction("type_creator", customCreateType);
call    0 never executed
    #####:  109:    pdlPattern.registerRewriteFunction("str_creator", customCreateStrAttr);
call    0 never executed
    #####:  110:    pdlPattern.registerRewriteFunction("rewriter", customRewriter);
call    0 never executed
    #####:  111:    patternList.add(std::move(pdlPattern));
call    0 never executed
        -:  112:
        -:  113:    // Invoke the pattern driver with the provided patterns.
    #####:  114:    (void)applyPatternsAndFoldGreedily(irModule.getBodyRegion(),
    #####:  115:                                       std::move(patternList));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  116:  }
        -:  117:};
        -:  118:} // namespace
        -:  119:
        -:  120:namespace mlir {
        -:  121:namespace test {
function _ZN4mlir4test27registerTestPDLByteCodePassEv called 128637 returned 100% blocks executed 100%
   128637:  122:void registerTestPDLByteCodePass() { PassRegistration<TestPDLByteCodePass>(); }
call    0 returned 100%
        -:  123:} // namespace test
        -:  124:} // namespace mlir
