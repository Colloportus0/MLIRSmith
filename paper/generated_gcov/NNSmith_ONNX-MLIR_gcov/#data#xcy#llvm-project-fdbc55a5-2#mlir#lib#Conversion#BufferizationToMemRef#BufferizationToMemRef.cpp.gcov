        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/BufferizationToMemRef/BufferizationToMemRef.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/BufferizationToMemRef/CMakeFiles/obj.MLIRBufferizationToMemRef.dir/BufferizationToMemRef.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/BufferizationToMemRef/CMakeFiles/obj.MLIRBufferizationToMemRef.dir/BufferizationToMemRef.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- BufferizationToMemRef.cpp - Bufferization to MemRef conversion -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to convert Bufferization dialect to MemRef
        -:   10:// dialect.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/BufferizationToMemRef/BufferizationToMemRef.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   17:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   18:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   19:#include "mlir/IR/BuiltinTypes.h"
        -:   20:#include "mlir/Pass/Pass.h"
        -:   21:#include "mlir/Support/LogicalResult.h"
        -:   22:#include "mlir/Transforms/DialectConversion.h"
        -:   23:
        -:   24:namespace mlir {
        -:   25:#define GEN_PASS_DEF_CONVERTBUFFERIZATIONTOMEMREF
        -:   26:#include "mlir/Conversion/Passes.h.inc"
        -:   27:} // namespace mlir
        -:   28:
        -:   29:using namespace mlir;
        -:   30:
        -:   31:namespace {
        -:   32:/// The CloneOpConversion transforms all bufferization clone operations into
        -:   33:/// memref alloc and memref copy operations. In the dynamic-shape case, it also
        -:   34:/// emits additional dim and constant operations to determine the shape. This
        -:   35:/// conversion does not resolve memory leaks if it is used alone.
        -:   36:struct CloneOpConversion : public OpConversionPattern<bufferization::CloneOp> {
        -:   37:  using OpConversionPattern<bufferization::CloneOp>::OpConversionPattern;
        -:   38:
        -:   39:  LogicalResult
function _ZNK12_GLOBAL__N_117CloneOpConversion15matchAndRewriteEN4mlir13bufferization7CloneOpENS2_14CloneOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   40:  matchAndRewrite(bufferization::CloneOp op, OpAdaptor adaptor,
        -:   41:                  ConversionPatternRewriter &rewriter) const override {
        -:   42:    // Check for unranked memref types which are currently not supported.
    #####:   43:    Type type = op.getType();
call    0 never executed
    #####:   44:    if (type.isa<UnrankedMemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:      return rewriter.notifyMatchFailure(
    #####:   46:          op, "UnrankedMemRefType is not supported.");
call    0 never executed
        -:   47:    }
    #####:   48:    MemRefType memrefType = type.cast<MemRefType>();
call    0 never executed
    #####:   49:    MemRefLayoutAttrInterface layout;
call    0 never executed
    #####:   50:    auto allocType =
        -:   51:        MemRefType::get(memrefType.getShape(), memrefType.getElementType(),
    #####:   52:                        layout, memrefType.getMemorySpace());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   53:    // Since this implementation always allocates, certain result types of the
        -:   54:    // clone op cannot be lowered.
    #####:   55:    if (!memref::CastOp::areCastCompatible({allocType}, {memrefType}))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   56:      return failure();
        -:   57:
        -:   58:    // Transform a clone operation into alloc + copy operation and pay
        -:   59:    // attention to the shape dimensions.
    #####:   60:    Location loc = op->getLoc();
    #####:   61:    SmallVector<Value, 4> dynamicOperands;
    #####:   62:    for (int i = 0; i < memrefType.getRank(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:      if (!memrefType.isDynamicDim(i))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:        continue;
    #####:   65:      Value size = rewriter.createOrFold<arith::ConstantIndexOp>(loc, i);
call    0 never executed
    #####:   66:      Value dim =
    #####:   67:          rewriter.createOrFold<memref::DimOp>(loc, op.getInput(), size);
call    0 never executed
call    1 never executed
    #####:   68:      dynamicOperands.push_back(dim);
call    0 never executed
        -:   69:    }
        -:   70:
        -:   71:    // Allocate a memref with identity layout.
    #####:   72:    Value alloc = rewriter.create<memref::AllocOp>(op->getLoc(), allocType,
    #####:   73:                                                   dynamicOperands);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:    // Cast the allocation to the specified type if needed.
    #####:   75:    if (memrefType != allocType)
branch  0 never executed
branch  1 never executed
    #####:   76:      alloc = rewriter.create<memref::CastOp>(op->getLoc(), memrefType, alloc);
call    0 never executed
    #####:   77:    rewriter.replaceOp(op, alloc);
call    0 never executed
call    1 never executed
    #####:   78:    rewriter.create<memref::CopyOp>(loc, op.getInput(), alloc);
call    0 never executed
call    1 never executed
    #####:   79:    return success();
branch  0 never executed
branch  1 never executed
        -:   80:  }
        -:   81:};
        -:   82:} // namespace
        -:   83:
function _ZN4mlir47populateBufferizationToMemRefConversionPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     543*:   84:void mlir::populateBufferizationToMemRefConversionPatterns(
        -:   85:    RewritePatternSet &patterns) {
    #####:   86:  patterns.add<CloneOpConversion>(patterns.getContext());
call    0 never executed
    #####:   87:}
        -:   88:
        -:   89:namespace {
    #####:   90:struct BufferizationToMemRefPass
call    0 never executed
        -:   91:    : public impl::ConvertBufferizationToMemRefBase<BufferizationToMemRefPass> {
   129269:   92:  BufferizationToMemRefPass() = default;
call    0 returned 100%
        -:   93:
function _ZN12_GLOBAL__N_125BufferizationToMemRefPass14runOnOperationEv called 543 returned 100% blocks executed 89%
      543:   94:  void runOnOperation() override {
      543:   95:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      543:   96:    populateBufferizationToMemRefConversionPatterns(patterns);
call    0 returned 100%
        -:   97:
     1086:   98:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      543:   99:    target.addLegalDialect<memref::MemRefDialect>();
call    0 returned 100%
      543:  100:    target.addLegalOp<arith::ConstantOp>();
call    0 returned 100%
      543:  101:    target.addIllegalDialect<bufferization::BufferizationDialect>();
call    0 returned 100%
        -:  102:
      543:  103:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      543:  104:                                      std::move(patterns))))
call    0 returned 100%
    #####:  105:      signalPassFailure();
call    0 never executed
      543:  106:  }
        -:  107:};
        -:  108:} // namespace
        -:  109:
function _ZN4mlir31createBufferizationToMemRefPassEv called 129269 returned 100% blocks executed 100%
   129269:  110:std::unique_ptr<Pass> mlir::createBufferizationToMemRefPass() {
   129269:  111:  return std::make_unique<BufferizationToMemRefPass>();
call    0 returned 100%
        -:  112:}
