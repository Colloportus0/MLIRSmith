        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SCF/Transforms/ForToWhile.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ForToWhile.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ForToWhile.cpp.gcda
        -:    0:Runs:128629
        -:    1://===- ForToWhile.cpp - scf.for to scf.while loop conversion --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Transforms SCF.ForOp's into SCF.WhileOp's.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   18:#include "mlir/IR/PatternMatch.h"
        -:   19:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_SCFFORTOWHILELOOP
        -:   23:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace llvm;
        -:   27:using namespace mlir;
        -:   28:using scf::ForOp;
        -:   29:using scf::WhileOp;
        -:   30:
        -:   31:namespace {
        -:   32:
        -:   33:struct ForLoopLoweringPattern : public OpRewritePattern<ForOp> {
        -:   34:  using OpRewritePattern<ForOp>::OpRewritePattern;
        -:   35:
function _ZNK12_GLOBAL__N_122ForLoopLoweringPattern15matchAndRewriteEN4mlir3scf5ForOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   36:  LogicalResult matchAndRewrite(ForOp forOp,
        -:   37:                                PatternRewriter &rewriter) const override {
        -:   38:    // Generate type signature for the loop-carried values. The induction
        -:   39:    // variable is placed first, followed by the forOp.iterArgs.
    #####:   40:    SmallVector<Type> lcvTypes;
call    0 never executed
    #####:   41:    SmallVector<Location> lcvLocs;
branch  0 never executed
branch  1 never executed
    #####:   42:    lcvTypes.push_back(forOp.getInductionVar().getType());
call    0 never executed
call    1 never executed
    #####:   43:    lcvLocs.push_back(forOp.getInductionVar().getLoc());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:    for (Value value : forOp.getInitArgs()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   45:      lcvTypes.push_back(value.getType());
call    0 never executed
    #####:   46:      lcvLocs.push_back(value.getLoc());
call    0 never executed
call    1 never executed
        -:   47:    }
        -:   48:
        -:   49:    // Build scf.WhileOp
    #####:   50:    SmallVector<Value> initArgs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:    initArgs.push_back(forOp.getLowerBound());
call    0 never executed
call    1 never executed
    #####:   52:    llvm::append_range(initArgs, forOp.getInitArgs());
call    0 never executed
call    1 never executed
    #####:   53:    auto whileOp = rewriter.create<WhileOp>(forOp.getLoc(), lcvTypes, initArgs,
    #####:   54:                                            forOp->getAttrs());
call    0 never executed
call    1 never executed
        -:   55:
        -:   56:    // 'before' region contains the loop condition and forwarding of iteration
        -:   57:    // arguments to the 'after' region.
    #####:   58:    auto *beforeBlock = rewriter.createBlock(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   59:        &whileOp.getBefore(), whileOp.getBefore().begin(), lcvTypes, lcvLocs);
call    0 never executed
call    1 never executed
    #####:   60:    rewriter.setInsertionPointToStart(&whileOp.getBefore().front());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   61:    auto cmpOp = rewriter.create<arith::CmpIOp>(
    #####:   62:        whileOp.getLoc(), arith::CmpIPredicate::slt,
call    0 never executed
    #####:   63:        beforeBlock->getArgument(0), forOp.getUpperBound());
call    0 never executed
call    1 never executed
    #####:   64:    rewriter.create<scf::ConditionOp>(whileOp.getLoc(), cmpOp.getResult(),
    #####:   65:                                      beforeBlock->getArguments());
call    0 never executed
call    1 never executed
        -:   66:
        -:   67:    // Inline for-loop body into an executeRegion operation in the "after"
        -:   68:    // region. The return type of the execRegionOp does not contain the
        -:   69:    // iv - yields in the source for-loop contain only iterArgs.
    #####:   70:    auto *afterBlock = rewriter.createBlock(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   71:        &whileOp.getAfter(), whileOp.getAfter().begin(), lcvTypes, lcvLocs);
call    0 never executed
call    1 never executed
        -:   72:
        -:   73:    // Add induction variable incrementation
    #####:   74:    rewriter.setInsertionPointToEnd(afterBlock);
call    0 never executed
    #####:   75:    auto ivIncOp = rewriter.create<arith::AddIOp>(
    #####:   76:        whileOp.getLoc(), afterBlock->getArgument(0), forOp.getStep());
call    0 never executed
call    1 never executed
        -:   77:
        -:   78:    // Rewrite uses of the for-loop block arguments to the new while-loop
        -:   79:    // "after" arguments
    #####:   80:    for (const auto &barg : enumerate(forOp.getBody(0)->getArguments()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:      barg.value().replaceAllUsesWith(afterBlock->getArgument(barg.index()));
call    0 never executed
call    1 never executed
        -:   82:
        -:   83:    // Inline for-loop body operations into 'after' region.
    #####:   84:    for (auto &arg : llvm::make_early_inc_range(*forOp.getBody()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:   85:      arg.moveBefore(afterBlock, afterBlock->end());
call    0 never executed
        -:   86:
        -:   87:    // Add incremented IV to yield operations
    #####:   88:    for (auto yieldOp : afterBlock->getOps<scf::YieldOp>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   89:      SmallVector<Value> yieldOperands = yieldOp.getOperands();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   90:      yieldOperands.insert(yieldOperands.begin(), ivIncOp.getResult());
call    0 never executed
call    1 never executed
    #####:   91:      yieldOp->setOperands(yieldOperands);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   92:    }
        -:   93:
        -:   94:    // We cannot do a direct replacement of the forOp since the while op returns
        -:   95:    // an extra value (the induction variable escapes the loop through being
        -:   96:    // carried in the set of iterargs). Instead, rewrite uses of the forOp
        -:   97:    // results.
    #####:   98:    for (const auto &arg : llvm::enumerate(forOp.getResults()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   99:      arg.value().replaceAllUsesWith(whileOp.getResult(arg.index() + 1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  100:
    #####:  101:    rewriter.eraseOp(forOp);
call    0 never executed
    #####:  102:    return success();
branch  0 never executed
branch  1 never executed
        -:  103:  }
        -:  104:};
        -:  105:
  129229*:  106:struct ForToWhileLoop : public impl::SCFForToWhileLoopBase<ForToWhileLoop> {
call    0 never executed
call    1 returned 100%
function _ZN12_GLOBAL__N_114ForToWhileLoop14runOnOperationEv called 499 returned 100% blocks executed 90%
      499:  107:  void runOnOperation() override {
      499:  108:    auto *parentOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      499:  109:    MLIRContext *ctx = parentOp->getContext();
call    0 returned 100%
      499:  110:    RewritePatternSet patterns(ctx);
call    0 returned 100%
      499:  111:    patterns.add<ForLoopLoweringPattern>(ctx);
call    0 returned 100%
      499:  112:    (void)applyPatternsAndFoldGreedily(parentOp, std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      499:  113:  }
        -:  114:};
        -:  115:} // namespace
        -:  116:
function _ZN4mlir24createForToWhileLoopPassEv called 129229 returned 100% blocks executed 100%
   129229:  117:std::unique_ptr<Pass> mlir::createForToWhileLoopPass() {
   129229:  118:  return std::make_unique<ForToWhileLoop>();
call    0 returned 100%
        -:  119:}
