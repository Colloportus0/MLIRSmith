        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Tosa/IR/TosaCanonicalizations.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tosa/CMakeFiles/obj.MLIRTosaDialect.dir/IR/TosaCanonicalizations.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tosa/CMakeFiles/obj.MLIRTosaDialect.dir/IR/TosaCanonicalizations.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- TosaCanonicalizations.cpp - Canonicalization patterns & folders ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// \file
        -:   10:// TOSA canonicalization patterns and folders.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Quant/QuantOps.h"
        -:   15:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   16:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   17:#include "mlir/Dialect/Tosa/Utils/CoversionUtils.h"
        -:   18:#include "mlir/Dialect/Tosa/Utils/QuantUtils.h"
        -:   19:#include "mlir/Dialect/Tosa/Utils/ShapeUtils.h"
        -:   20:#include "mlir/IR/BuiltinTypes.h"
        -:   21:#include "mlir/IR/DialectImplementation.h"
        -:   22:#include "mlir/IR/Matchers.h"
        -:   23:#include "mlir/IR/PatternMatch.h"
        -:   24:#include "mlir/Transforms/FoldUtils.h"
        -:   25:#include "mlir/Transforms/InliningUtils.h"
        -:   26:#include "mlir/Transforms/RegionUtils.h"
        -:   27:#include "llvm/ADT/APFloat.h"
        -:   28:#include "llvm/ADT/DenseMap.h"
        -:   29:#include "llvm/ADT/TypeSwitch.h"
        -:   30:
        -:   31:#include <functional>
        -:   32:
        -:   33:using namespace mlir;
        -:   34:using namespace mlir::tosa;
        -:   35:
        -:   36://===----------------------------------------------------------------------===//
        -:   37:// Operator Canonicalizers.
        -:   38://===----------------------------------------------------------------------===//
        -:   39:
        -:   40:struct ConcatOptimization : public OpRewritePattern<tosa::ConcatOp> {
        -:   41:  using OpRewritePattern<tosa::ConcatOp>::OpRewritePattern;
        -:   42:
function _ZNK18ConcatOptimization15matchAndRewriteEN4mlir4tosa8ConcatOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   43:  LogicalResult matchAndRewrite(tosa::ConcatOp op,
        -:   44:                                PatternRewriter &rewriter) const override {
    #####:   45:    if (op.getInput1().size() != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:      return failure();
    #####:   47:    if (op.getInput1().front().getType() != op.getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   48:      rewriter
    #####:   49:          .replaceOpWithNewOp<tensor::CastOp>(op, op.getType(),
    #####:   50:                                              op.getInput1().front())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   51:          .getResult();
    #####:   52:      return success();
        -:   53:    }
        -:   54:
    #####:   55:    rewriter.replaceOp(op, op.getInput1().front());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   56:    return success();
        -:   57:  }
        -:   58:};
        -:   59:
function _ZN4mlir4tosa8ConcatOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:   60:void ConcatOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:   61:                                           MLIRContext *context) {
       24:   62:  results.add<ConcatOptimization>(context);
call    0 returned 100%
       24:   63:}
        -:   64:
        -:   65:struct ReshapeReshapeOptimization : public OpRewritePattern<tosa::ReshapeOp> {
        -:   66:  using OpRewritePattern<tosa::ReshapeOp>::OpRewritePattern;
        -:   67:
function _ZNK26ReshapeReshapeOptimization15matchAndRewriteEN4mlir4tosa9ReshapeOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   68:  LogicalResult matchAndRewrite(tosa::ReshapeOp op,
        -:   69:                                PatternRewriter &rewriter) const override {
    #####:   70:    Value input = op.getInput1();
call    0 never executed
    #####:   71:    Operation *definingOp = input.getDefiningOp();
call    0 never executed
    #####:   72:    if (!definingOp)
branch  0 never executed
branch  1 never executed
    #####:   73:      return failure();
        -:   74:
    #####:   75:    if (tosa::ReshapeOp reshapeOp = dyn_cast<tosa::ReshapeOp>(definingOp)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:      rewriter.replaceOpWithNewOp<tosa::ReshapeOp>(
    #####:   77:          op, op.getType(), reshapeOp.getInput1(), op.getNewShape());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   78:      return success();
        -:   79:    }
        -:   80:
    #####:   81:    return failure();
        -:   82:  }
        -:   83:};
        -:   84:
        -:   85:struct ReshapeConstOptimization : public OpRewritePattern<tosa::ReshapeOp> {
        -:   86:  using OpRewritePattern<tosa::ReshapeOp>::OpRewritePattern;
        -:   87:
function _ZNK24ReshapeConstOptimization15matchAndRewriteEN4mlir4tosa9ReshapeOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   88:  LogicalResult matchAndRewrite(tosa::ReshapeOp op,
        -:   89:                                PatternRewriter &rewriter) const override {
    #####:   90:    Value input = op.getInput1();
call    0 never executed
    #####:   91:    ArrayAttr newShape = op.getNewShape();
call    0 never executed
        -:   92:
        -:   93:    // Check if input is constant
    #####:   94:    DenseElementsAttr inputAttr;
    #####:   95:    if (!matchPattern(input, m_Constant(&inputAttr)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:      return failure();
        -:   97:
        -:   98:    // Check if has >1 consumer and is not splat
    #####:   99:    if (!input.hasOneUse() && !inputAttr.isSplat())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  100:      return failure();
        -:  101:
        -:  102:    // Grab the new shape
    #####:  103:    SmallVector<int64_t> newShapeValues = llvm::to_vector<6>(
function _ZZNK24ReshapeConstOptimization15matchAndRewriteEN4mlir4tosa9ReshapeOpERNS0_15PatternRewriterEENKUlRKNS0_9AttributeEE_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  104:        llvm::map_range(newShape.getValue(), [](const Attribute &val) {
call    0 never executed
    #####:  105:          return val.cast<IntegerAttr>().getValue().getSExtValue();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  106:        }));
call    0 never executed
        -:  107:
        -:  108:    // Build new const op with correct output shape
    #####:  109:    ShapedType inputShape = input.getType().cast<ShapedType>();
call    0 never executed
    #####:  110:    DenseElementsAttr outputAttr =
call    0 never executed
    #####:  111:        inputAttr.reshape(inputShape.clone(newShapeValues));
call    0 never executed
call    1 never executed
    #####:  112:    rewriter.replaceOpWithNewOp<tosa::ConstOp>(op, outputAttr.getType(),
    #####:  113:                                               outputAttr);
call    0 never executed
call    1 never executed
    #####:  114:    return success();
branch  0 never executed
branch  1 never executed
        -:  115:  }
        -:  116:};
        -:  117:
function _ZN4mlir4tosa9ReshapeOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  118:void ReshapeOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  119:                                            MLIRContext *context) {
       24:  120:  results.add<ReshapeReshapeOptimization>(context);
call    0 returned 100%
       24:  121:  results.add<ReshapeConstOptimization>(context);
call    0 returned 100%
       24:  122:}
        -:  123:
function _ZN4mlir4tosa8SelectOp12canonicalizeES1_RNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  124:LogicalResult SelectOp::canonicalize(SelectOp op, PatternRewriter &rewriter) {
    #####:  125:  auto notOp = op.getPred().getDefiningOp<tosa::LogicalNotOp>();
call    0 never executed
call    1 never executed
    #####:  126:  if (!notOp)
branch  0 never executed
branch  1 never executed
    #####:  127:    return failure();
function _ZZN4mlir4tosa8SelectOp12canonicalizeES1_RNS_15PatternRewriterEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  128:  rewriter.updateRootInPlace(op, [&]() {
call    0 never executed
    #####:  129:    op.getOperation()->setOperands(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  130:        {notOp.getInput1(), op.getOnFalse(), op.getOnTrue()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  131:  });
    #####:  132:  return success();
        -:  133:}
        -:  134:
        -:  135:struct NoOpOptimization : public OpRewritePattern<tosa::TransposeOp> {
        -:  136:  using OpRewritePattern::OpRewritePattern;
        -:  137:
function _ZNK16NoOpOptimization15matchAndRewriteEN4mlir4tosa11TransposeOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  138:  LogicalResult matchAndRewrite(tosa::TransposeOp op,
        -:  139:                                PatternRewriter &rewriter) const override {
    #####:  140:    auto perm = op.getPerms();
call    0 never executed
        -:  141:
    #####:  142:    DenseIntElementsAttr permAttr;
    #####:  143:    if (!matchPattern(perm, m_Constant(&permAttr))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:      return failure();
        -:  145:    }
        -:  146:
    #####:  147:    SmallVector<int64_t> permValues = llvm::to_vector<6>(
    #####:  148:        llvm::map_range(permAttr.getValues<APInt>(),
call    0 never executed
call    1 never executed
    #####:  149:                        [](const APInt &val) { return val.getSExtValue(); }));
call    0 never executed
call    1 never executed
        -:  150:
    #####:  151:    for (int i = 0, s = permValues.size(); i < s; i++) {
branch  0 never executed
branch  1 never executed
    #####:  152:      if (i != permValues[i]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  153:        return failure();
        -:  154:      }
        -:  155:    }
        -:  156:
    #####:  157:    rewriter.replaceOp(op, op.getInput1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  158:    return success();
branch  0 never executed
branch  1 never executed
        -:  159:  }
        -:  160:};
        -:  161:
function _ZN4mlir4tosa11TransposeOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  162:void TransposeOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  163:                                              MLIRContext *context) {
       24:  164:  results.add<NoOpOptimization>(context);
call    0 returned 100%
       24:  165:}
        -:  166:
        -:  167:struct AddZeroOptimization : public OpRewritePattern<tosa::AddOp> {
        -:  168:  using OpRewritePattern::OpRewritePattern;
        -:  169:
function _ZNK19AddZeroOptimization15matchAndRewriteEN4mlir4tosa5AddOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  170:  LogicalResult matchAndRewrite(tosa::AddOp op,
        -:  171:                                PatternRewriter &rewriter) const override {
    #####:  172:    auto input1 = op.getInput1();
call    0 never executed
    #####:  173:    auto input2 = op.getInput2();
call    0 never executed
        -:  174:
    #####:  175:    DenseElementsAttr input1Attr;
    #####:  176:    if (matchPattern(input1, m_Constant(&input1Attr)) && input1Attr.isSplat() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  177:        input2.getType() == op.getType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  178:      if (input1Attr.getType().getElementType().isa<IntegerType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  179:          input1Attr.getSplatValue<APInt>().isZero()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  180:        rewriter.replaceOp(op, op.getInput2());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  181:        return success();
        -:  182:      }
        -:  183:    }
        -:  184:
    #####:  185:    DenseElementsAttr input2Attr;
    #####:  186:    if (matchPattern(input2, m_Constant(&input2Attr)) && input2Attr.isSplat() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  187:        input1.getType() == op.getType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  188:      if (input2Attr.getType().getElementType().isa<IntegerType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  189:          input2Attr.getSplatValue<APInt>().isZero()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  190:        rewriter.replaceOp(op, op.getInput1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  191:        return success();
        -:  192:      }
        -:  193:    }
        -:  194:
    #####:  195:    return failure();
        -:  196:  }
        -:  197:};
        -:  198:
function _ZN4mlir4tosa5AddOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  199:void AddOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  200:                                        MLIRContext *context) {
       24:  201:  results.add<AddZeroOptimization>(context);
call    0 returned 100%
       24:  202:}
        -:  203:
        -:  204:struct MulOneOptimization : public OpRewritePattern<tosa::MulOp> {
        -:  205:  using OpRewritePattern::OpRewritePattern;
        -:  206:
function _ZNK18MulOneOptimization15matchAndRewriteEN4mlir4tosa5MulOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  207:  LogicalResult matchAndRewrite(tosa::MulOp op,
        -:  208:                                PatternRewriter &rewriter) const override {
    #####:  209:    auto input1 = op.getInput1();
call    0 never executed
    #####:  210:    auto input2 = op.getInput2();
call    0 never executed
        -:  211:
    #####:  212:    DenseElementsAttr input1Attr;
    #####:  213:    if (matchPattern(input1, m_Constant(&input1Attr)) && input1Attr.isSplat() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  214:        input2.getType() == op.getType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  215:      if (input1Attr.getType().getElementType().isa<FloatType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  216:          input1Attr.getSplatValue<APFloat>().isExactlyValue(1)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  217:        rewriter.replaceOp(op, op.getInput2());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  218:        return success();
        -:  219:      }
        -:  220:
    #####:  221:      if (input1Attr.getType().getElementType().isa<IntegerType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  222:          matchPattern(input1, m_One())) {
call    0 never executed
    #####:  223:        rewriter.replaceOp(op, op.getInput2());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  224:        return success();
        -:  225:      }
        -:  226:    }
        -:  227:
    #####:  228:    DenseElementsAttr input2Attr;
    #####:  229:    if (matchPattern(input2, m_Constant(&input2Attr)) && input2Attr.isSplat() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  230:        input1.getType() == op.getType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      if (input2Attr.getType().getElementType().isa<FloatType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  232:          input2Attr.getSplatValue<APFloat>().isExactlyValue(1)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  233:        rewriter.replaceOp(op, op.getInput1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  234:        return success();
        -:  235:      }
        -:  236:
    #####:  237:      if (input2Attr.getType().getElementType().isa<IntegerType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  238:          matchPattern(input2, m_One())) {
call    0 never executed
    #####:  239:        rewriter.replaceOp(op, op.getInput1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  240:        return success();
        -:  241:      }
        -:  242:    }
        -:  243:
    #####:  244:    return failure();
        -:  245:  }
        -:  246:};
        -:  247:
function _ZN4mlir4tosa5MulOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  248:void MulOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  249:                                        MLIRContext *context) {
       24:  250:  results.add<MulOneOptimization>(context);
call    0 returned 100%
       24:  251:}
        -:  252:
        -:  253:struct MaterializePadValue : public OpRewritePattern<tosa::PadOp> {
        -:  254:  using OpRewritePattern::OpRewritePattern;
        -:  255:
function _ZNK19MaterializePadValue15matchAndRewriteEN4mlir4tosa5PadOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  256:  LogicalResult matchAndRewrite(tosa::PadOp op,
        -:  257:                                PatternRewriter &rewriter) const override {
    #####:  258:    if (op.getPadConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  259:      return failure();
        -:  260:
    #####:  261:    auto input = op.getInput1();
call    0 never executed
    #####:  262:    auto padding = op.getPadding();
call    0 never executed
        -:  263:
    #####:  264:    ShapedType inputTy = input.getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####:  265:    Type elementTy = inputTy.getElementType();
call    0 never executed
        -:  266:
    #####:  267:    Attribute constantAttr;
    #####:  268:    if (elementTy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  269:      constantAttr = rewriter.getFloatAttr(elementTy, 0.0);
call    0 never executed
    #####:  270:    } else if (elementTy.isa<IntegerType>() && !op.getQuantizationInfo()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  271:      constantAttr = rewriter.getIntegerAttr(elementTy, 0);
call    0 never executed
    #####:  272:    } else if (elementTy.isa<IntegerType>() && op.getQuantizationInfo()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  273:      auto value = op.getQuantizationInfo()->getInputZp();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  274:      constantAttr = rewriter.getIntegerAttr(elementTy, value);
call    0 never executed
        -:  275:    }
        -:  276:
    #####:  277:    if (!constantAttr) {
branch  0 never executed
branch  1 never executed
    #####:  278:      return rewriter.notifyMatchFailure(
        -:  279:          op,
    #####:  280:          "tosa.pad to linalg lowering encountered an unknown element type");
call    0 never executed
        -:  281:    }
        -:  282:
    #####:  283:    auto denseAttr = DenseElementsAttr::get(
call    0 never executed
    #####:  284:        RankedTensorType::get({}, elementTy), constantAttr);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  285:    auto constantVal = rewriter.create<tosa::ConstOp>(
    #####:  286:        op.getLoc(), denseAttr.getType(), denseAttr);
call    0 never executed
call    1 never executed
        -:  287:
    #####:  288:    rewriter.replaceOpWithNewOp<tosa::PadOp>(
    #####:  289:        op, op.getType(), ValueRange{input, padding, constantVal},
call    0 never executed
    #####:  290:        op->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  291:    return success();
        -:  292:  }
        -:  293:};
        -:  294:
function _ZN4mlir4tosa5PadOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  295:void PadOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  296:                                        MLIRContext *context) {
       24:  297:  results.add<MaterializePadValue>(context);
call    0 returned 100%
       24:  298:}
        -:  299:
        -:  300:struct MaxPool2dIsNoOp : public OpRewritePattern<tosa::MaxPool2dOp> {
        -:  301:  using OpRewritePattern::OpRewritePattern;
        -:  302:
function _ZNK15MaxPool2dIsNoOp15matchAndRewriteEN4mlir4tosa11MaxPool2dOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  303:  LogicalResult matchAndRewrite(tosa::MaxPool2dOp op,
        -:  304:                                PatternRewriter &rewriter) const override {
    #####:  305:    Value input = op.getInput();
call    0 never executed
    #####:  306:    Value output = op.getOutput();
call    0 never executed
    #####:  307:    ShapedType inputType = input.getType().cast<ShapedType>();
call    0 never executed
    #####:  308:    ShapedType outputType = output.getType().cast<ShapedType>();
call    0 never executed
        -:  309:
    #####:  310:    if (!inputType.hasStaticShape() || !outputType.hasStaticShape()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  311:      return failure();
        -:  312:    }
        -:  313:
        -:  314:    // If the output and input shapes are 1x1, then this is a no op.
    #####:  315:    ArrayRef<int64_t> outputShape = outputType.getShape();
call    0 never executed
    #####:  316:    if (outputShape[1] != 1 || outputShape[2] != 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  317:      return failure();
        -:  318:    }
        -:  319:
    #####:  320:    ArrayRef<int64_t> inputShape = inputType.getShape();
call    0 never executed
    #####:  321:    if (inputShape[1] != 1 || inputShape[2] != 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  322:      return failure();
        -:  323:    }
        -:  324:
    #####:  325:    rewriter.replaceOp(op, input);
call    0 never executed
call    1 never executed
    #####:  326:    return success();
        -:  327:  }
        -:  328:};
        -:  329:
function _ZN4mlir4tosa11MaxPool2dOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  330:void MaxPool2dOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  331:                                              MLIRContext *context) {
       24:  332:  results.add<MaxPool2dIsNoOp>(context);
call    0 returned 100%
       24:  333:}
        -:  334:
        -:  335:struct ClampIsNoOp : public OpRewritePattern<tosa::ClampOp> {
        -:  336:  using OpRewritePattern::OpRewritePattern;
        -:  337:
function _ZNK11ClampIsNoOp15matchAndRewriteEN4mlir4tosa7ClampOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  338:  LogicalResult matchAndRewrite(tosa::ClampOp op,
        -:  339:                                PatternRewriter &rewriter) const override {
    #####:  340:    Value input = op.getInput();
call    0 never executed
    #####:  341:    auto inputType =
    #####:  342:        op.getInput().getType().template dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  343:    auto inputElementType = inputType.getElementType();
call    0 never executed
        -:  344:
    #####:  345:    if (!inputType.hasStaticShape()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  346:      return failure();
        -:  347:    }
        -:  348:
    #####:  349:    if (inputElementType.isF32()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  350:      auto minClamp = op.getMinFp();
call    0 never executed
    #####:  351:      auto maxClamp = op.getMaxFp();
call    0 never executed
call    1 never executed
    #####:  352:      bool isMin = (minClamp.isLargest() || minClamp.isInfinity()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  353:                   minClamp.isNegative();
branch  0 never executed
branch  1 never executed
    #####:  354:      bool isMax = (maxClamp.isLargest() || maxClamp.isInfinity()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  355:                   !maxClamp.isNegative();
branch  0 never executed
branch  1 never executed
        -:  356:
    #####:  357:      if (isMin && isMax) {
branch  0 never executed
branch  1 never executed
    #####:  358:        rewriter.replaceOp(op, input);
call    0 never executed
call    1 never executed
    #####:  359:        return success();
        -:  360:      }
    #####:  361:      return failure();
call    0 never executed
        -:  362:    }
        -:  363:
    #####:  364:    if (inputElementType.isUnsignedInteger()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:      int64_t minClamp = op.getMinInt();
call    0 never executed
    #####:  366:      int64_t maxClamp = op.getMaxInt();
call    0 never executed
        -:  367:
    #####:  368:      int64_t intMin =
    #####:  369:          APInt::getMinValue(inputElementType.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  370:              .getZExtValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  371:      int64_t intMax =
    #####:  372:          APInt::getMaxValue(inputElementType.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  373:              .getZExtValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  374:
    #####:  375:      if (minClamp <= intMin && maxClamp >= intMax) {
branch  0 never executed
branch  1 never executed
    #####:  376:        rewriter.replaceOp(op, input);
call    0 never executed
call    1 never executed
    #####:  377:        return success();
        -:  378:      }
    #####:  379:      return failure();
        -:  380:    }
        -:  381:
    #####:  382:    if (inputElementType.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  383:      int64_t minClamp = op.getMinInt();
call    0 never executed
    #####:  384:      int64_t maxClamp = op.getMaxInt();
call    0 never executed
        -:  385:
    #####:  386:      int64_t intMin =
    #####:  387:          APInt::getSignedMinValue(inputElementType.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  388:              .getSExtValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  389:      int64_t intMax =
    #####:  390:          APInt::getSignedMaxValue(inputElementType.getIntOrFloatBitWidth())
call    0 never executed
call    1 never executed
    #####:  391:              .getSExtValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  392:
    #####:  393:      if (minClamp <= intMin && maxClamp >= intMax) {
branch  0 never executed
branch  1 never executed
    #####:  394:        rewriter.replaceOp(op, input);
call    0 never executed
call    1 never executed
    #####:  395:        return success();
        -:  396:      }
    #####:  397:      return failure();
        -:  398:    }
        -:  399:
    #####:  400:    return failure();
        -:  401:  }
        -:  402:};
        -:  403:
        -:  404:struct ClampClampOptimization : public OpRewritePattern<tosa::ClampOp> {
        -:  405:  using OpRewritePattern<tosa::ClampOp>::OpRewritePattern;
        -:  406:
function _ZNK22ClampClampOptimization15matchAndRewriteEN4mlir4tosa7ClampOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  407:  LogicalResult matchAndRewrite(tosa::ClampOp op,
        -:  408:                                PatternRewriter &rewriter) const override {
    #####:  409:    Value input = op.getInput();
call    0 never executed
        -:  410:
    #####:  411:    Operation *definingOp = input.getDefiningOp();
call    0 never executed
    #####:  412:    if (!definingOp)
branch  0 never executed
branch  1 never executed
    #####:  413:      return failure();
        -:  414:
    #####:  415:    if (tosa::ClampOp clampOp = dyn_cast<tosa::ClampOp>(definingOp)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  416:      auto minFp = std::max(op.getMinFp(), clampOp.getMinFp()).convertToFloat();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  417:      auto maxFp = std::min(op.getMaxFp(), clampOp.getMaxFp()).convertToFloat();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  418:
    #####:  419:      auto minInt = std::max(op.getMinInt(), clampOp.getMinInt());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  420:      auto maxInt = std::min(op.getMaxInt(), clampOp.getMaxInt());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  421:
    #####:  422:      rewriter.replaceOpWithNewOp<tosa::ClampOp>(
    #####:  423:          op, op.getType(), clampOp.getInput(),
call    0 never executed
call    1 never executed
    #####:  424:          rewriter.getI64IntegerAttr(minInt),
call    0 never executed
    #####:  425:          rewriter.getI64IntegerAttr(maxInt), rewriter.getF32FloatAttr(minFp),
call    0 never executed
call    1 never executed
    #####:  426:          rewriter.getF32FloatAttr(maxFp));
call    0 never executed
call    1 never executed
    #####:  427:      return success();
        -:  428:    }
        -:  429:
    #####:  430:    return failure();
        -:  431:  }
        -:  432:};
        -:  433:
function _ZN4mlir4tosa7ClampOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 24 returned 100% blocks executed 100%
       24:  434:void ClampOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  435:                                          MLIRContext *context) {
       24:  436:  results.add<ClampIsNoOp>(context);
call    0 returned 100%
       24:  437:  results.add<ClampClampOptimization>(context);
call    0 returned 100%
       24:  438:}
        -:  439:
        -:  440://===----------------------------------------------------------------------===//
        -:  441:// Operator Folders.
        -:  442://===----------------------------------------------------------------------===//
        -:  443:
        -:  444:template <typename IntFolder, typename FloatFolder>
    #####:  445:DenseElementsAttr binaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  446:                               RankedTensorType returnTy) {
    #####:  447:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
    #####:  448:    auto lETy = lhs.getType().cast<ShapedType>().getElementType();
    #####:  449:    auto rETy = rhs.getType().cast<ShapedType>().getElementType();
    #####:  450:    if (lETy != rETy)
    #####:  451:      return {};
        -:  452:
    #####:  453:    if (lETy.isa<IntegerType>()) {
    #####:  454:      APInt l = lhs.getSplatValue<APInt>();
    #####:  455:      APInt r = rhs.getSplatValue<APInt>();
    #####:  456:      auto result = IntFolder()(l, r);
    #####:  457:      return DenseElementsAttr::get(returnTy, result);
        -:  458:    }
        -:  459:
    #####:  460:    if (lETy.isa<FloatType>()) {
    #####:  461:      APFloat l = lhs.getSplatValue<APFloat>();
    #####:  462:      APFloat r = rhs.getSplatValue<APFloat>();
    #####:  463:      auto result = FloatFolder()(l, r);
    #####:  464:      return DenseElementsAttr::get(returnTy, result);
        -:  465:    }
        -:  466:  }
        -:  467:
    #####:  468:  return {};
        -:  469:}
------------------
_Z12binaryFolderIN12_GLOBAL__N_114ComparisonFoldISt8equal_toIN4llvm5APIntEEEENS1_IS2_INS3_7APFloatEEEEEN4mlir17DenseElementsAttrESB_SB_NSA_16RankedTensorTypeE:
function _Z12binaryFolderIN12_GLOBAL__N_114ComparisonFoldISt8equal_toIN4llvm5APIntEEEENS1_IS2_INS3_7APFloatEEEEEN4mlir17DenseElementsAttrESB_SB_NSA_16RankedTensorTypeE called 0 returned 0% blocks executed 0%
    #####:  445:DenseElementsAttr binaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  446:                               RankedTensorType returnTy) {
    #####:  447:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  448:    auto lETy = lhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    auto rETy = rhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  450:    if (lETy != rETy)
branch  0 never executed
branch  1 never executed
    #####:  451:      return {};
        -:  452:
    #####:  453:    if (lETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
    #####:  454:      APInt l = lhs.getSplatValue<APInt>();
call    0 never executed
    #####:  455:      APInt r = rhs.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  456:      auto result = IntFolder()(l, r);
branch  0 never executed
branch  1 never executed
    #####:  457:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  458:    }
        -:  459:
    #####:  460:    if (lETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
    #####:  461:      APFloat l = lhs.getSplatValue<APFloat>();
call    0 never executed
    #####:  462:      APFloat r = rhs.getSplatValue<APFloat>();
call    0 never executed
call    1 never executed
    #####:  463:      auto result = FloatFolder()(l, r);
call    0 never executed
    #####:  464:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  465:    }
        -:  466:  }
        -:  467:
    #####:  468:  return {};
        -:  469:}
------------------
_Z12binaryFolderIN12_GLOBAL__N_121APIntFoldGreaterEqualENS0_14ComparisonFoldISt13greater_equalIN4llvm7APFloatEEEEEN4mlir17DenseElementsAttrES9_S9_NS8_16RankedTensorTypeE:
function _Z12binaryFolderIN12_GLOBAL__N_121APIntFoldGreaterEqualENS0_14ComparisonFoldISt13greater_equalIN4llvm7APFloatEEEEEN4mlir17DenseElementsAttrES9_S9_NS8_16RankedTensorTypeE called 0 returned 0% blocks executed 0%
    #####:  445:DenseElementsAttr binaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  446:                               RankedTensorType returnTy) {
    #####:  447:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  448:    auto lETy = lhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    auto rETy = rhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  450:    if (lETy != rETy)
branch  0 never executed
branch  1 never executed
    #####:  451:      return {};
        -:  452:
    #####:  453:    if (lETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
    #####:  454:      APInt l = lhs.getSplatValue<APInt>();
call    0 never executed
    #####:  455:      APInt r = rhs.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  456:      auto result = IntFolder()(l, r);
branch  0 never executed
branch  1 never executed
    #####:  457:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  458:    }
        -:  459:
    #####:  460:    if (lETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
    #####:  461:      APFloat l = lhs.getSplatValue<APFloat>();
call    0 never executed
    #####:  462:      APFloat r = rhs.getSplatValue<APFloat>();
call    0 never executed
call    1 never executed
    #####:  463:      auto result = FloatFolder()(l, r);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  464:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  465:    }
        -:  466:  }
        -:  467:
    #####:  468:  return {};
        -:  469:}
------------------
_Z12binaryFolderIN12_GLOBAL__N_116APIntFoldGreaterENS0_14ComparisonFoldISt7greaterIN4llvm7APFloatEEEEEN4mlir17DenseElementsAttrES9_S9_NS8_16RankedTensorTypeE:
function _Z12binaryFolderIN12_GLOBAL__N_116APIntFoldGreaterENS0_14ComparisonFoldISt7greaterIN4llvm7APFloatEEEEEN4mlir17DenseElementsAttrES9_S9_NS8_16RankedTensorTypeE called 0 returned 0% blocks executed 0%
    #####:  445:DenseElementsAttr binaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  446:                               RankedTensorType returnTy) {
    #####:  447:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  448:    auto lETy = lhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    auto rETy = rhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  450:    if (lETy != rETy)
branch  0 never executed
branch  1 never executed
    #####:  451:      return {};
        -:  452:
    #####:  453:    if (lETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
    #####:  454:      APInt l = lhs.getSplatValue<APInt>();
call    0 never executed
    #####:  455:      APInt r = rhs.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  456:      auto result = IntFolder()(l, r);
branch  0 never executed
branch  1 never executed
    #####:  457:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  458:    }
        -:  459:
    #####:  460:    if (lETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
    #####:  461:      APFloat l = lhs.getSplatValue<APFloat>();
call    0 never executed
    #####:  462:      APFloat r = rhs.getSplatValue<APFloat>();
call    0 never executed
call    1 never executed
    #####:  463:      auto result = FloatFolder()(l, r);
call    0 never executed
    #####:  464:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  465:    }
        -:  466:  }
        -:  467:
    #####:  468:  return {};
        -:  469:}
------------------
_Z12binaryFolderISt5minusIN4llvm5APIntEES0_INS1_7APFloatEEEN4mlir17DenseElementsAttrES7_S7_NS6_16RankedTensorTypeE:
function _Z12binaryFolderISt5minusIN4llvm5APIntEES0_INS1_7APFloatEEEN4mlir17DenseElementsAttrES7_S7_NS6_16RankedTensorTypeE called 0 returned 0% blocks executed 0%
    #####:  445:DenseElementsAttr binaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  446:                               RankedTensorType returnTy) {
    #####:  447:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  448:    auto lETy = lhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    auto rETy = rhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  450:    if (lETy != rETy)
branch  0 never executed
branch  1 never executed
    #####:  451:      return {};
        -:  452:
    #####:  453:    if (lETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
    #####:  454:      APInt l = lhs.getSplatValue<APInt>();
call    0 never executed
    #####:  455:      APInt r = rhs.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  456:      auto result = IntFolder()(l, r);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  457:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  458:    }
        -:  459:
    #####:  460:    if (lETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
    #####:  461:      APFloat l = lhs.getSplatValue<APFloat>();
call    0 never executed
    #####:  462:      APFloat r = rhs.getSplatValue<APFloat>();
call    0 never executed
call    1 never executed
    #####:  463:      auto result = FloatFolder()(l, r);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  464:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  465:    }
        -:  466:  }
        -:  467:
    #####:  468:  return {};
        -:  469:}
------------------
_Z12binaryFolderISt4plusIN4llvm5APIntEES0_INS1_7APFloatEEEN4mlir17DenseElementsAttrES7_S7_NS6_16RankedTensorTypeE:
function _Z12binaryFolderISt4plusIN4llvm5APIntEES0_INS1_7APFloatEEEN4mlir17DenseElementsAttrES7_S7_NS6_16RankedTensorTypeE called 0 returned 0% blocks executed 0%
    #####:  445:DenseElementsAttr binaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  446:                               RankedTensorType returnTy) {
    #####:  447:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  448:    auto lETy = lhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    auto rETy = rhs.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  450:    if (lETy != rETy)
branch  0 never executed
branch  1 never executed
    #####:  451:      return {};
        -:  452:
    #####:  453:    if (lETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
    #####:  454:      APInt l = lhs.getSplatValue<APInt>();
call    0 never executed
    #####:  455:      APInt r = rhs.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  456:      auto result = IntFolder()(l, r);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  457:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  458:    }
        -:  459:
    #####:  460:    if (lETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
    #####:  461:      APFloat l = lhs.getSplatValue<APFloat>();
call    0 never executed
    #####:  462:      APFloat r = rhs.getSplatValue<APFloat>();
call    0 never executed
call    1 never executed
    #####:  463:      auto result = FloatFolder()(l, r);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  464:      return DenseElementsAttr::get(returnTy, result);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  465:    }
        -:  466:  }
        -:  467:
    #####:  468:  return {};
        -:  469:}
------------------
        -:  470:
function _ZN4mlir4tosa5AddOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  471:OpFoldResult AddOp::fold(ArrayRef<Attribute> operands) {
    #####:  472:  auto lhsTy = getInput1().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  473:  auto rhsTy = getInput2().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  474:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  475:  if (!lhsTy || !rhsTy || !resultTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  476:    return {};
    #####:  477:  if (lhsTy != rhsTy)
branch  0 never executed
branch  1 never executed
    #####:  478:    return {};
        -:  479:
    #####:  480:  auto resultETy = resultTy.getElementType();
call    0 never executed
    #####:  481:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  482:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  483:
    #####:  484:  if (lhsAttr && lhsAttr.isSplat() && resultETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  485:    if (lhsAttr.getSplatValue<APFloat>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  486:      return getInput2();
call    0 never executed
call    1 never executed
        -:  487:  }
        -:  488:
    #####:  489:  if (rhsAttr && rhsAttr.isSplat() && resultETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  490:    if (rhsAttr.getSplatValue<APFloat>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  491:      return getInput1();
call    0 never executed
call    1 never executed
        -:  492:  }
        -:  493:
    #####:  494:  if (lhsAttr && lhsAttr.isSplat() && resultETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  495:    if (lhsAttr.getSplatValue<APInt>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  496:      return getInput2();
call    0 never executed
call    1 never executed
        -:  497:  }
        -:  498:
    #####:  499:  if (rhsAttr && rhsAttr.isSplat() && resultETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  500:    if (rhsAttr.getSplatValue<APInt>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  501:      return getInput1();
call    0 never executed
call    1 never executed
        -:  502:  }
        -:  503:
    #####:  504:  if (!lhsAttr || !rhsAttr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  505:    return {};
        -:  506:
    #####:  507:  return binaryFolder<std::plus<APInt>, std::plus<APFloat>>(lhsAttr, rhsAttr,
    #####:  508:                                                            lhsTy);
call    0 never executed
call    1 never executed
        -:  509:}
        -:  510:
function _ZN4mlir4tosa5DivOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  511:OpFoldResult DivOp::fold(ArrayRef<Attribute> operands) {
    #####:  512:  auto lhsTy = getInput1().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  513:  auto rhsTy = getInput2().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  514:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  515:  if (!lhsTy || !rhsTy || !resultTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  516:    return {};
    #####:  517:  if (lhsTy != rhsTy)
branch  0 never executed
branch  1 never executed
    #####:  518:    return {};
        -:  519:
    #####:  520:  auto resultETy = resultTy.getElementType();
call    0 never executed
    #####:  521:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  522:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  523:  if (lhsAttr && lhsAttr.isSplat()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  524:    if (resultETy.isa<IntegerType>() && lhsAttr.getSplatValue<APInt>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  525:      return lhsAttr;
call    0 never executed
        -:  526:  }
        -:  527:
    #####:  528:  if (rhsAttr && rhsAttr.isSplat()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  529:    if (resultETy.isa<IntegerType>() && rhsAttr.getSplatValue<APInt>().isOne())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  530:      return getInput1();
call    0 never executed
call    1 never executed
        -:  531:  }
        -:  532:
    #####:  533:  if (rhsAttr && lhsAttr && rhsAttr.isSplat() && lhsAttr.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  534:    if (resultETy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  535:      APInt l = lhsAttr.getSplatValue<APInt>();
call    0 never executed
    #####:  536:      APInt r = rhsAttr.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  537:      APInt result = l.sdiv(r);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  538:      return DenseElementsAttr::get(resultTy, result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  539:    }
        -:  540:  }
        -:  541:
    #####:  542:  return {};
        -:  543:}
        -:  544:
        -:  545:namespace {
function _ZN12_GLOBAL__N_115mulBinaryFolderEN4mlir17DenseElementsAttrES1_NS0_16RankedTensorTypeEi called 0 returned 0% blocks executed 0%
    #####:  546:DenseElementsAttr mulBinaryFolder(DenseElementsAttr lhs, DenseElementsAttr rhs,
        -:  547:                                  RankedTensorType ty, int32_t shift) {
    #####:  548:  if (rhs && lhs && rhs.isSplat() && lhs.isSplat()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  549:    if (ty.getElementType().isa<IntegerType>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  550:      APInt l = lhs.getSplatValue<APInt>();
call    0 never executed
    #####:  551:      APInt r = rhs.getSplatValue<APInt>();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  552:
    #####:  553:      if (shift == 0) {
branch  0 never executed
branch  1 never executed
    #####:  554:        return DenseElementsAttr::get(ty, l * r);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  555:      }
        -:  556:
    #####:  557:      auto bitwidth = ty.getElementType().getIntOrFloatBitWidth();
call    0 never executed
call    1 never executed
    #####:  558:      l = l.sext(bitwidth * 2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  559:      r = r.sext(bitwidth * 2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  560:      auto result = l * r;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  561:      result.lshrInPlace(shift);
call    0 never executed
    #####:  562:      result = result.trunc(bitwidth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  563:      return DenseElementsAttr::get(ty, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  564:    }
        -:  565:
    #####:  566:    if (ty.getElementType().isa<FloatType>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  567:      APFloat l = lhs.getSplatValue<APFloat>();
call    0 never executed
    #####:  568:      APFloat r = rhs.getSplatValue<APFloat>();
call    0 never executed
call    1 never executed
    #####:  569:      APFloat result = l * r;
call    0 never executed
call    1 never executed
    #####:  570:      return DenseElementsAttr::get(ty, result);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  571:    }
        -:  572:  }
        -:  573:
    #####:  574:  return {};
        -:  575:}
        -:  576:} // namespace
        -:  577:
function _ZN4mlir4tosa5MulOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  578:OpFoldResult MulOp::fold(ArrayRef<Attribute> operands) {
    #####:  579:  auto lhs = getInput1();
call    0 never executed
    #####:  580:  auto rhs = getInput2();
call    0 never executed
    #####:  581:  auto lhsTy = lhs.getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  582:  auto rhsTy = rhs.getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  583:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  584:  if (!lhsTy || !rhsTy || !resultTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  585:    return {};
    #####:  586:  if (lhsTy != rhsTy)
branch  0 never executed
branch  1 never executed
    #####:  587:    return {};
        -:  588:
    #####:  589:  auto resultETy = resultTy.getElementType();
call    0 never executed
    #####:  590:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  591:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  592:
    #####:  593:  if (lhsAttr && lhsAttr.isSplat() && resultETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  594:    auto val = lhsAttr.getSplatValue<APFloat>();
call    0 never executed
    #####:  595:    if (val.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  596:      return lhsAttr;
call    0 never executed
    #####:  597:    if (val.isExactlyValue(1.0))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  598:      return rhs;
call    0 never executed
        -:  599:  }
        -:  600:
    #####:  601:  if (rhsAttr && rhsAttr.isSplat() && resultETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  602:    auto val = rhsAttr.getSplatValue<APFloat>();
call    0 never executed
    #####:  603:    if (val.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  604:      return rhsAttr;
call    0 never executed
    #####:  605:    if (val.isExactlyValue(1.0))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  606:      return lhs;
call    0 never executed
        -:  607:  }
        -:  608:
    #####:  609:  if (lhsAttr && lhsAttr.isSplat() && resultETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  610:    auto val = lhsAttr.getSplatValue<APInt>();
call    0 never executed
    #####:  611:    if (val.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  612:      return lhsAttr;
call    0 never executed
    #####:  613:    const int64_t shift = getShift();
call    0 never executed
    #####:  614:    const int64_t shifted = 1LL << shift;
    #####:  615:    if (val.getSExtValue() == shifted)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  616:      return rhs;
call    0 never executed
        -:  617:  }
        -:  618:
    #####:  619:  if (rhsAttr && rhsAttr.isSplat() && resultETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  620:    auto val = rhsAttr.getSplatValue<APInt>();
call    0 never executed
    #####:  621:    const int64_t shift = getShift();
call    0 never executed
    #####:  622:    const int64_t shifted = 1LL << shift;
    #####:  623:    if (val.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  624:      return rhsAttr;
call    0 never executed
    #####:  625:    if (val.getSExtValue() == shifted)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  626:      return lhs;
call    0 never executed
        -:  627:  }
        -:  628:
    #####:  629:  return mulBinaryFolder(lhsAttr, rhsAttr, lhsTy, getShift());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  630:}
        -:  631:
function _ZN4mlir4tosa5SubOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  632:OpFoldResult SubOp::fold(ArrayRef<Attribute> operands) {
    #####:  633:  auto lhsTy = getInput1().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  634:  auto rhsTy = getInput2().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  635:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  636:  if (!lhsTy || !rhsTy || !resultTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  637:    return {};
    #####:  638:  if (lhsTy != rhsTy)
branch  0 never executed
branch  1 never executed
    #####:  639:    return {};
        -:  640:
    #####:  641:  auto resultETy = resultTy.getElementType();
call    0 never executed
    #####:  642:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  643:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  644:
    #####:  645:  if (rhsAttr && rhsAttr.isSplat() && resultETy.isa<FloatType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  646:    if (rhsAttr.getSplatValue<APFloat>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  647:      return getInput1();
call    0 never executed
call    1 never executed
        -:  648:  }
        -:  649:
    #####:  650:  if (rhsAttr && rhsAttr.isSplat() && resultETy.isa<IntegerType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  651:    if (rhsAttr.getSplatValue<APInt>().isZero())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  652:      return getInput1();
call    0 never executed
call    1 never executed
        -:  653:  }
        -:  654:
    #####:  655:  if (!lhsAttr || !rhsAttr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  656:    return {};
        -:  657:
    #####:  658:  return binaryFolder<std::minus<APInt>, std::minus<APFloat>>(lhsAttr, rhsAttr,
    #####:  659:                                                              lhsTy);
call    0 never executed
call    1 never executed
        -:  660:}
        -:  661:
        -:  662:namespace {
        -:  663:template <typename Cmp>
        -:  664:struct ComparisonFold {
        -:  665:  ComparisonFold() = default;
    #####:  666:  APInt operator()(const APInt &l, const APInt &r) {
    #####:  667:    return APInt(1, Cmp()(l, r));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  668:  }
        -:  669:
    #####:  670:  APInt operator()(const APFloat &l, const APFloat &r) {
    #####:  671:    return APInt(1, Cmp()(l, r));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  672:  }
        -:  673:};
        -:  674:
        -:  675:struct APIntFoldGreater {
        -:  676:  APIntFoldGreater() = default;
    #####:  677:  APInt operator()(const APInt &l, const APInt &r) {
    #####:  678:    return APInt(1, l.sgt(r));
call    0 never executed
call    1 never executed
        -:  679:  }
        -:  680:};
        -:  681:
        -:  682:struct APIntFoldGreaterEqual {
        -:  683:  APIntFoldGreaterEqual() = default;
    #####:  684:  APInt operator()(const APInt &l, const APInt &r) {
    #####:  685:    return APInt(1, l.sge(r));
call    0 never executed
call    1 never executed
        -:  686:  }
        -:  687:};
        -:  688:} // namespace
        -:  689:
function _ZN4mlir4tosa9GreaterOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  690:OpFoldResult GreaterOp::fold(ArrayRef<Attribute> operands) {
    #####:  691:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  692:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  693:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  694:
    #####:  695:  if (!lhsAttr || !rhsAttr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  696:    return {};
        -:  697:
    #####:  698:  return binaryFolder<APIntFoldGreater, ComparisonFold<std::greater<APFloat>>>(
    #####:  699:      lhsAttr, rhsAttr, resultTy);
call    0 never executed
call    1 never executed
        -:  700:}
        -:  701:
function _ZN4mlir4tosa14GreaterEqualOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  702:OpFoldResult GreaterEqualOp::fold(ArrayRef<Attribute> operands) {
    #####:  703:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  704:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  705:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  706:
    #####:  707:  if (!lhsAttr || !rhsAttr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  708:    return {};
        -:  709:
    #####:  710:  return binaryFolder<APIntFoldGreaterEqual,
    #####:  711:                      ComparisonFold<std::greater_equal<APFloat>>>(
    #####:  712:      lhsAttr, rhsAttr, resultTy);
call    0 never executed
call    1 never executed
        -:  713:}
        -:  714:
function _ZN4mlir4tosa7EqualOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  715:OpFoldResult EqualOp::fold(ArrayRef<Attribute> operands) {
    #####:  716:  auto resultTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  717:  auto lhsAttr = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  718:  auto rhsAttr = operands[1].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  719:  Value lhs = getInput1();
call    0 never executed
    #####:  720:  Value rhs = getInput2();
call    0 never executed
    #####:  721:  auto lhsTy = lhs.getType().cast<ShapedType>();
call    0 never executed
        -:  722:
        -:  723:  // If we are comparing an integer value to itself it is always true. We can
        -:  724:  // not do this with float due to float values.
    #####:  725:  if (lhsTy.getElementType().isa<IntegerType>() && resultTy.hasStaticShape() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  726:      lhs == rhs) {
branch  0 never executed
branch  1 never executed
    #####:  727:    return DenseElementsAttr::get(resultTy, true);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  728:  }
        -:  729:
    #####:  730:  if (!lhsAttr || !rhsAttr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  731:    return {};
        -:  732:
    #####:  733:  return binaryFolder<ComparisonFold<std::equal_to<APInt>>,
    #####:  734:                      ComparisonFold<std::equal_to<APFloat>>>(lhsAttr, rhsAttr,
    #####:  735:                                                              resultTy);
call    0 never executed
call    1 never executed
        -:  736:}
        -:  737:
function _ZN4mlir4tosa6CastOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  738:OpFoldResult CastOp::fold(ArrayRef<Attribute> operands) {
    #####:  739:  if (getInput().getType() == getType())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  740:    return getInput();
call    0 never executed
call    1 never executed
        -:  741:
    #####:  742:  auto operand = operands[0].dyn_cast_or_null<ElementsAttr>();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  743:  if (!operand)
branch  0 never executed
branch  1 never executed
    #####:  744:    return {};
        -:  745:
    #####:  746:  auto inTy = getInput().getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  747:  auto outTy = getType().cast<ShapedType>();
call    0 never executed
call    1 never executed
    #####:  748:  auto inETy = inTy.getElementType();
call    0 never executed
    #####:  749:  auto outETy = outTy.getElementType();
call    0 never executed
        -:  750:
    #####:  751:  if (operand.isSplat()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:    if (inETy.isa<FloatType>() && outETy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  753:      bool overflow;
    #####:  754:      auto splatVal = operand.getSplatValue<APFloat>();
call    0 never executed
    #####:  755:      auto &semantics = outETy.cast<FloatType>().getFloatSemantics();
call    0 never executed
call    1 never executed
    #####:  756:      splatVal.convert(semantics, llvm::RoundingMode::NearestTiesToEven,
call    0 never executed
        -:  757:                       &overflow);
    #####:  758:      return SplatElementsAttr::get(outTy, splatVal);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  759:    }
        -:  760:
    #####:  761:    if (inETy.isa<IntegerType>() && outETy.isa<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  762:      auto unsign = inETy.cast<IntegerType>().isUnsignedInteger();
call    0 never executed
call    1 never executed
    #####:  763:      APFloat splatVal(outETy.cast<FloatType>().getFloatSemantics());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  764:      splatVal.convertFromAPInt(operand.getSplatValue<APInt>(), !unsign,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:                                llvm::RoundingMode::NearestTiesToEven);
    #####:  766:      return SplatElementsAttr::get(outTy, splatVal);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  767:    }
        -:  768:
    #####:  769:    if (inETy.isa<FloatType>() && outETy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  770:      auto unsign = outETy.cast<IntegerType>().isUnsignedInteger();
call    0 never executed
call    1 never executed
    #####:  771:      auto intVal =
    #####:  772:          APSInt(outETy.cast<IntegerType>().getIntOrFloatBitWidth(), unsign);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  773:      auto floatVal = operand.getSplatValue<APFloat>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:      bool exact;
    #####:  775:      floatVal.convertToInteger(intVal, llvm::RoundingMode::TowardZero, &exact);
call    0 never executed
    #####:  776:      return SplatElementsAttr::get(outTy, intVal);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  777:    }
        -:  778:
    #####:  779:    if (inETy.isa<IntegerType>() && outETy.isa<IntegerType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  780:      auto unsignIn = inETy.cast<IntegerType>().isUnsignedInteger();
call    0 never executed
call    1 never executed
    #####:  781:      bool trunc =
    #####:  782:          inETy.getIntOrFloatBitWidth() > outETy.getIntOrFloatBitWidth();
call    0 never executed
call    1 never executed
    #####:  783:      auto intVal = operand.getSplatValue<APInt>();
call    0 never executed
    #####:  784:      auto bitwidth = outETy.getIntOrFloatBitWidth();
call    0 never executed
        -:  785:
    #####:  786:      if (trunc) {
branch  0 never executed
branch  1 never executed
    #####:  787:        intVal = intVal.trunc(bitwidth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  788:      } else if (unsignIn) {
branch  0 never executed
branch  1 never executed
    #####:  789:        intVal = intVal.zext(bitwidth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:      } else {
    #####:  791:        intVal = intVal.sext(bitwidth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  792:      }
        -:  793:
    #####:  794:      return SplatElementsAttr::get(outTy, intVal);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  795:    }
        -:  796:  }
        -:  797:
    #####:  798:  return {};
        -:  799:}
        -:  800:
function _ZN4mlir4tosa7ConstOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  801:OpFoldResult ConstOp::fold(ArrayRef<Attribute> operands) {
    #####:  802:  assert(operands.empty() && "constant has no operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  803:  return getValueAttr();
call    0 never executed
call    1 never executed
        -:  804:}
        -:  805:
        -:  806:#define REDUCE_FOLDER(OP)                                                      \
        -:  807:  OpFoldResult OP::fold(ArrayRef<Attribute> operands) {                        \
        -:  808:    ShapedType inputTy = getInput().getType().cast<ShapedType>();              \
        -:  809:    if (!inputTy.hasRank())                                                    \
        -:  810:      return {};                                                               \
        -:  811:    if (inputTy.getDimSize(getAxis()) == 1)                                    \
        -:  812:      return getInput();                                                       \
        -:  813:    return {};                                                                 \
        -:  814:  }
        -:  815:
function _ZN4mlir4tosa11ReduceAllOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  816:REDUCE_FOLDER(ReduceAllOp)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
function _ZN4mlir4tosa11ReduceAnyOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  817:REDUCE_FOLDER(ReduceAnyOp)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
function _ZN4mlir4tosa11ReduceMaxOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  818:REDUCE_FOLDER(ReduceMaxOp)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
function _ZN4mlir4tosa11ReduceMinOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  819:REDUCE_FOLDER(ReduceMinOp)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
function _ZN4mlir4tosa12ReduceProdOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  820:REDUCE_FOLDER(ReduceProdOp)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
function _ZN4mlir4tosa11ReduceSumOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  821:REDUCE_FOLDER(ReduceSumOp)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -:  822:#undef REDUCE_FOLDER
        -:  823:
function _ZN4mlir4tosa9ReshapeOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  824:OpFoldResult ReshapeOp::fold(ArrayRef<Attribute> operands) {
    #####:  825:  auto inputTy = getInput1().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  826:  auto outputTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
        -:  827:
    #####:  828:  if (!inputTy || !outputTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  829:    return {};
        -:  830:
    #####:  831:  if (inputTy == outputTy)
branch  0 never executed
branch  1 never executed
    #####:  832:    return getInput1();
call    0 never executed
call    1 never executed
        -:  833:
    #####:  834:  auto operand = operands[0].dyn_cast_or_null<DenseElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  835:  if (operand && outputTy.hasStaticShape() && operand.isSplat()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  836:    return SplatElementsAttr::get(outputTy, operand.getSplatValue<Attribute>());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  837:  }
        -:  838:
    #####:  839:  return {};
        -:  840:}
        -:  841:
function _ZN4mlir4tosa5PadOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  842:OpFoldResult PadOp::fold(ArrayRef<Attribute> operands) {
        -:  843:  // If the pad is all zeros we can fold this operation away.
    #####:  844:  if (operands[1]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  845:    auto densePad = operands[1].cast<DenseElementsAttr>();
call    0 never executed
    #####:  846:    if (densePad.isSplat() && densePad.getSplatValue<APInt>().isZero()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  847:      return getInput1();
call    0 never executed
call    1 never executed
        -:  848:    }
        -:  849:  }
        -:  850:
    #####:  851:  return {};
        -:  852:}
        -:  853:
        -:  854:// Fold away cases where a tosa.resize operation returns a copy
        -:  855:// of the input image.
function _ZN4mlir4tosa8ResizeOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  856:OpFoldResult ResizeOp::fold(ArrayRef<Attribute> operands) {
    #####:  857:  SmallVector<int32_t> scale, offset, border;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  858:  getValuesFromIntArrayAttribute(getScale(), scale);
call    0 never executed
call    1 never executed
    #####:  859:  getValuesFromIntArrayAttribute(getOffset(), offset);
call    0 never executed
call    1 never executed
    #####:  860:  getValuesFromIntArrayAttribute(getBorder(), border);
call    0 never executed
call    1 never executed
        -:  861:
        -:  862:  // Check unit scaling.
    #####:  863:  if (scale[0] != scale[1] || scale[2] != scale[3]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  864:    return {};
        -:  865:  }
        -:  866:
        -:  867:  // There should be no offset.
    #####:  868:  if (offset[0] != 0 || offset[1] != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  869:    return {};
        -:  870:  }
        -:  871:
        -:  872:  // There should be no border.
    #####:  873:  if (border[0] != 0 || border[1] != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  874:    return {};
        -:  875:  }
        -:  876:
    #####:  877:  auto input = getInput();
call    0 never executed
    #####:  878:  auto inputTy = input.getType().cast<RankedTensorType>();
call    0 never executed
    #####:  879:  auto resultTy = getType().cast<RankedTensorType>();
call    0 never executed
    #####:  880:  if (inputTy != resultTy)
branch  0 never executed
branch  1 never executed
    #####:  881:    return {};
        -:  882:
    #####:  883:  return input;
call    0 never executed
        -:  884:}
        -:  885:
function _ZN4mlir4tosa9ReverseOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  886:OpFoldResult ReverseOp::fold(ArrayRef<Attribute> operands) {
    #####:  887:  auto operand = getInput();
call    0 never executed
    #####:  888:  auto operandTy = operand.getType().cast<ShapedType>();
call    0 never executed
    #####:  889:  auto axis = getAxis();
call    0 never executed
    #####:  890:  auto operandAttr = operands[0].dyn_cast_or_null<SplatElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  891:  if (operandAttr)
branch  0 never executed
branch  1 never executed
    #####:  892:    return operandAttr;
call    0 never executed
        -:  893:
        -:  894:  // If the dim-length is 1, tosa.reverse is a no-op.
    #####:  895:  if (operandTy.hasRank() && operandTy.getDimSize(axis) == 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  896:    return operand;
call    0 never executed
        -:  897:
    #####:  898:  return {};
        -:  899:}
        -:  900:
function _ZN4mlir4tosa7SliceOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  901:OpFoldResult SliceOp::fold(ArrayRef<Attribute> operands) {
    #####:  902:  auto inputTy = getInput().getType().dyn_cast<RankedTensorType>();
call    0 never executed
call    1 never executed
    #####:  903:  auto outputTy = getType().dyn_cast<RankedTensorType>();
call    0 never executed
        -:  904:
    #####:  905:  if (!inputTy || !outputTy)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  906:    return {};
        -:  907:
    #####:  908:  if (inputTy == outputTy && inputTy.hasStaticShape())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  909:    return getInput();
call    0 never executed
call    1 never executed
        -:  910:
    #####:  911:  if (!operands[0])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  912:    return {};
        -:  913:
    #####:  914:  auto operand = operands[0].cast<ElementsAttr>();
call    0 never executed
    #####:  915:  if (operand.isSplat() && outputTy.hasStaticShape()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  916:    return SplatElementsAttr::get(outputTy, operand.getSplatValue<Attribute>());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  917:  }
        -:  918:
    #####:  919:  if (inputTy.hasStaticShape() && outputTy.hasStaticShape() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  920:      outputTy.getNumElements() == 1) {
call    0 never executed
    #####:  921:    llvm::SmallVector<uint64_t> indices;
call    0 never executed
    #####:  922:    for (auto val : getStart()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  923:      indices.push_back(val.cast<IntegerAttr>().getInt());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  924:    }
    #####:  925:    auto value = operand.getValues<Attribute>()[indices];
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  926:    return SplatElementsAttr::get(outputTy, value);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  927:  }
        -:  928:
    #####:  929:  return {};
        -:  930:}
        -:  931:
function _ZN4mlir4tosa8SelectOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  932:OpFoldResult tosa::SelectOp::fold(ArrayRef<Attribute> operands) {
    #####:  933:  if (getOnTrue() == getOnFalse())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  934:    return getOnTrue();
call    0 never executed
call    1 never executed
        -:  935:
    #####:  936:  auto predicate = operands[0].dyn_cast_or_null<DenseIntElementsAttr>();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  937:  if (!predicate)
branch  0 never executed
branch  1 never executed
    #####:  938:    return {};
        -:  939:
    #####:  940:  if (!predicate.isSplat())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:    return {};
    #####:  942:  return predicate.getSplatValue<APInt>().getBoolValue() ? getOnTrue()
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  943:                                                         : getOnFalse();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  944:}
        -:  945:
function _ZN4mlir4tosa6TileOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  946:OpFoldResult TileOp::fold(ArrayRef<Attribute> operands) {
    #####:  947:  bool allOnes = true;
    #####:  948:  for (Attribute val : getMultiples().getValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  949:    allOnes = allOnes && val.cast<IntegerAttr>().getValue().getSExtValue() == 1;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  950:  }
        -:  951:
    #####:  952:  if (allOnes && getInput1().getType() == getType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  953:    return getInput1();
call    0 never executed
call    1 never executed
    #####:  954:  return {};
        -:  955:}
        -:  956:
function _ZN4mlir4tosa11TransposeOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  957:OpFoldResult TransposeOp::fold(ArrayRef<Attribute> operands) {
    #####:  958:  if (!operands[1])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  959:    return {};
        -:  960:
        -:  961:  // Transposing splat values just means reshaping.
    #####:  962:  if (auto input = operands[0].dyn_cast_or_null<DenseElementsAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:    if (input.isSplat())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  964:      return input.reshape(getType().cast<ShapedType>());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  965:  }
        -:  966:
    #####:  967:  auto perms = llvm::to_vector<6>(llvm::map_range(
    #####:  968:      operands[1].cast<DenseIntElementsAttr>().getValues<APInt>(),
call    0 never executed
call    1 never executed
    #####:  969:      [](const APInt &val) { return val.getSExtValue(); }));
call    0 never executed
call    1 never executed
        -:  970:
    #####:  971:  if (llvm::equal(llvm::seq<int64_t>(0, perms.size()), perms) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  972:      getInput1().getType() == getType())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  973:    return getInput1();
call    0 never executed
call    1 never executed
    #####:  974:  return {};
        -:  975:}
