        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/SCCP.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/SCCP.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/SCCP.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- SCCP.cpp - Sparse Conditional Constant Propagation -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This transformation pass performs a sparse conditional constant propagation
        -:   10:// in MLIR. It identifies values known to be constant, propagates that
        -:   11:// information throughout the IR, and replaces them. This is done with an
        -:   12:// optimistic dataflow analysis that assumes that all values are constant until
        -:   13:// proven otherwise.
        -:   14://
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:#include "mlir/Transforms/Passes.h"
        -:   18:
        -:   19:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   20:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   21:#include "mlir/IR/Builders.h"
        -:   22:#include "mlir/IR/Dialect.h"
        -:   23:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   24:#include "mlir/Pass/Pass.h"
        -:   25:#include "mlir/Transforms/FoldUtils.h"
        -:   26:
        -:   27:namespace mlir {
        -:   28:#define GEN_PASS_DEF_SCCP
        -:   29:#include "mlir/Transforms/Passes.h.inc"
        -:   30:} // namespace mlir
        -:   31:
        -:   32:using namespace mlir;
        -:   33:using namespace mlir::dataflow;
        -:   34:
        -:   35://===----------------------------------------------------------------------===//
        -:   36:// SCCP Rewrites
        -:   37://===----------------------------------------------------------------------===//
        -:   38:
        -:   39:/// Replace the given value with a constant if the corresponding lattice
        -:   40:/// represents a constant. Returns success if the value was replaced, failure
        -:   41:/// otherwise.
function _ZL19replaceWithConstantRN4mlir14DataFlowSolverERNS_9OpBuilderERNS_15OperationFolderENS_5ValueE called 353861 returned 100% blocks executed 80%
   353861:   42:static LogicalResult replaceWithConstant(DataFlowSolver &solver,
        -:   43:                                         OpBuilder &builder,
        -:   44:                                         OperationFolder &folder, Value value) {
   353861:   45:  auto *lattice = solver.lookupState<Lattice<ConstantValue>>(value);
call    0 returned 100%
   353861:   46:  if (!lattice || lattice->getValue().isUninitialized())
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
   120336:   47:    return failure();
   233525:   48:  const ConstantValue &latticeValue = lattice->getValue();
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
   233525:   49:  if (!latticeValue.getConstantValue())
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
   154286:   50:    return failure();
        -:   51:
        -:   52:  // Attempt to materialize a constant for the given value.
    79239:   53:  Dialect *dialect = latticeValue.getConstantDialect();
call    0 returned 100%
    79239:   54:  Value constant = folder.getOrCreateConstant(builder, dialect,
        -:   55:                                              latticeValue.getConstantValue(),
    79239:   56:                                              value.getType(), value.getLoc());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
    79239:   57:  if (!constant)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    79239:   58:    return failure();
        -:   59:
    #####:   60:  value.replaceAllUsesWith(constant);
call    0 never executed
    #####:   61:  return success();
        -:   62:}
        -:   63:
        -:   64:/// Rewrite the given regions using the computing analysis. This replaces the
        -:   65:/// uses of all values that have been computed to be constant, and erases as
        -:   66:/// many newly dead operations.
function _ZL7rewriteRN4mlir14DataFlowSolverEPNS_11MLIRContextEN4llvm15MutableArrayRefINS_6RegionEEE called 524 returned 100% blocks executed 74%
      524:   67:static void rewrite(DataFlowSolver &solver, MLIRContext *context,
        -:   68:                    MutableArrayRef<Region> initialRegions) {
      524:   69:  SmallVector<Block *> worklist;
call    0 returned 100%
function _ZZL7rewriteRN4mlir14DataFlowSolverEPNS_11MLIRContextEN4llvm15MutableArrayRefINS_6RegionEEEENKUlS7_E_clES7_.isra.0 called 406103 returned 100% blocks executed 91%
   406103:   70:  auto addToWorklist = [&](MutableArrayRef<Region> regions) {
   420251:   71:    for (Region &region : regions)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    59704:   72:      for (Block &block : llvm::reverse(region))
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    45556:   73:        worklist.push_back(&block);
call    0 returned 100%
   406627:   74:  };
        -:   75:
        -:   76:  // An operation folder used to create and unique constants.
     1048:   77:  OperationFolder folder(context);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      524:   78:  OpBuilder builder(context);
call    0 returned 100%
        -:   79:
      524:   80:  addToWorklist(initialRegions);
call    0 returned 100%
    46080:   81:  while (!worklist.empty()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    45556:   82:    Block *block = worklist.pop_back_val();
call    0 returned 100%
        -:   83:
   856714:   84:    for (Operation &op : llvm::make_early_inc_range(*block)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
   405579:   85:      builder.setInsertionPoint(&op);
call    0 returned 100%
        -:   86:
        -:   87:      // Replace any result with constants.
   405579:   88:      bool replacedAll = op.getNumResults() != 0;
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
  1061577:   89:      for (Value res : op.getResults())
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
branch  2 taken 55% (fallthrough)
branch  3 taken 45%
call    4 returned 100%
   655998:   90:        replacedAll &=
   327999:   91:            succeeded(replaceWithConstant(solver, builder, folder, res));
call    0 returned 100%
        -:   92:
        -:   93:      // If all of the results of the operation were replaced, try to erase
        -:   94:      // the operation completely.
  405579*:   95:      if (replacedAll && wouldOpBeTriviallyDead(&op)) {
branch  0 taken 0%
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   96:        assert(op.use_empty() && "expected all uses to be replaced");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   97:        op.erase();
call    0 never executed
    #####:   98:        continue;
        -:   99:      }
        -:  100:
        -:  101:      // Add any the regions of this operation to the worklist.
   516096:  102:      addToWorklist(op.getRegions());
branch  0 taken 27%
branch  1 taken 73%
call    2 returned 100%
        -:  103:    }
        -:  104:
        -:  105:    // Replace any block arguments with constants.
    45556:  106:    builder.setInsertionPointToStart(block);
    71418:  107:    for (BlockArgument arg : block->getArguments())
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    25862:  108:      (void)replaceWithConstant(solver, builder, folder, arg);
call    0 returned 100%
        -:  109:  }
      524:  110:}
        -:  111:
        -:  112://===----------------------------------------------------------------------===//
        -:  113:// SCCP Pass
        -:  114://===----------------------------------------------------------------------===//
        -:  115:
        -:  116:namespace {
  129256*:  117:struct SCCP : public impl::SCCPBase<SCCP> {
call    0 never executed
call    1 returned 100%
        -:  118:  void runOnOperation() override;
        -:  119:};
        -:  120:} // namespace
        -:  121:
function _ZN12_GLOBAL__N_14SCCP14runOnOperationEv called 524 returned 100% blocks executed 76%
      524:  122:void SCCP::runOnOperation() {
      524:  123:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  124:
     1048:  125:  DataFlowSolver solver;
call    0 returned 100%
call    1 returned 100%
      524:  126:  solver.load<DeadCodeAnalysis>();
call    0 returned 100%
      524:  127:  solver.load<SparseConstantPropagation>();
call    0 returned 100%
      524:  128:  if (failed(solver.initializeAndRun(op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  129:    return signalPassFailure();
call    0 never executed
call    1 never executed
     1048:  130:  rewrite(solver, op->getContext(), op->getRegions());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        -:  131:}
        -:  132:
function _ZN4mlir14createSCCPPassEv called 129256 returned 100% blocks executed 100%
   129256:  133:std::unique_ptr<Pass> mlir::createSCCPPass() {
   129256:  134:  return std::make_unique<SCCP>();
call    0 returned 100%
        -:  135:}
