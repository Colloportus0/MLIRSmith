        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SPIRV/Utils/LayoutUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/Utils/CMakeFiles/obj.MLIRSPIRVUtils.dir/LayoutUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/Utils/CMakeFiles/obj.MLIRSPIRVUtils.dir/LayoutUtils.cpp.gcda
        -:    0:Runs:128633
        -:    1://===-- LayoutUtils.cpp - Decorate composite type with layout information -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements Utilities used to get alignment and layout information
        -:   10:// for types in SPIR-V dialect.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   15:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
        -:   20:spirv::StructType
function _ZN4mlir17VulkanLayoutUtils12decorateTypeENS_5spirv10StructTypeE called 0 returned 0% blocks executed 0%
    #####:   21:VulkanLayoutUtils::decorateType(spirv::StructType structType) {
    #####:   22:  Size size = 0;
    #####:   23:  Size alignment = 1;
    #####:   24:  return decorateType(structType, size, alignment);
call    0 never executed
        -:   25:}
        -:   26:
        -:   27:spirv::StructType
function _ZN4mlir17VulkanLayoutUtils12decorateTypeENS_5spirv10StructTypeERmS3_ called 0 returned 0% blocks executed 0%
    #####:   28:VulkanLayoutUtils::decorateType(spirv::StructType structType,
        -:   29:                                VulkanLayoutUtils::Size &size,
        -:   30:                                VulkanLayoutUtils::Size &alignment) {
    #####:   31:  if (structType.getNumElements() == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   32:    return structType;
        -:   33:  }
        -:   34:
    #####:   35:  SmallVector<Type, 4> memberTypes;
call    0 never executed
    #####:   36:  SmallVector<spirv::StructType::OffsetInfo, 4> offsetInfo;
branch  0 never executed
branch  1 never executed
    #####:   37:  SmallVector<spirv::StructType::MemberDecorationInfo, 4> memberDecorations;
branch  0 never executed
branch  1 never executed
        -:   38:
    #####:   39:  Size structMemberOffset = 0;
    #####:   40:  Size maxMemberAlignment = 1;
        -:   41:
    #####:   42:  for (uint32_t i = 0, e = structType.getNumElements(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:    Size memberSize = 0;
    #####:   44:    Size memberAlignment = 1;
        -:   45:
    #####:   46:    auto memberType =
    #####:   47:        decorateType(structType.getElementType(i), memberSize, memberAlignment);
call    0 never executed
call    1 never executed
    #####:   48:    structMemberOffset = llvm::alignTo(structMemberOffset, memberAlignment);
branch  0 never executed
branch  1 never executed
    #####:   49:    memberTypes.push_back(memberType);
call    0 never executed
    #####:   50:    offsetInfo.push_back(
call    0 never executed
        -:   51:        static_cast<spirv::StructType::OffsetInfo>(structMemberOffset));
        -:   52:    // If the member's size is the max value, it must be the last member and it
        -:   53:    // must be a runtime array.
    #####:   54:    assert(memberSize != std::numeric_limits<Size>().max() ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:   55:           (i + 1 == e &&
        -:   56:            structType.getElementType(i).isa<spirv::RuntimeArrayType>()));
        -:   57:    // According to the Vulkan spec:
        -:   58:    // "A structure has a base alignment equal to the largest base alignment of
        -:   59:    // any of its members."
    #####:   60:    structMemberOffset += memberSize;
    #####:   61:    maxMemberAlignment = std::max(maxMemberAlignment, memberAlignment);
branch  0 never executed
branch  1 never executed
        -:   62:  }
        -:   63:
        -:   64:  // According to the Vulkan spec:
        -:   65:  // "The Offset decoration of a member must not place it between the end of a
        -:   66:  // structure or an array and the next multiple of the alignment of that
        -:   67:  // structure or array."
    #####:   68:  size = llvm::alignTo(structMemberOffset, maxMemberAlignment);
branch  0 never executed
branch  1 never executed
    #####:   69:  alignment = maxMemberAlignment;
    #####:   70:  structType.getMemberDecorations(memberDecorations);
call    0 never executed
        -:   71:
    #####:   72:  if (!structType.isIdentified())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:    return spirv::StructType::get(memberTypes, offsetInfo, memberDecorations);
call    0 never executed
        -:   74:
        -:   75:  // Identified structs are uniqued by identifier so it is not possible
        -:   76:  // to create 2 structs with the same name but different decorations.
    #####:   77:  return nullptr;
        -:   78:}
        -:   79:
function _ZN4mlir17VulkanLayoutUtils12decorateTypeENS_4TypeERmS2_ called 0 returned 0% blocks executed 0%
    #####:   80:Type VulkanLayoutUtils::decorateType(Type type, VulkanLayoutUtils::Size &size,
        -:   81:                                     VulkanLayoutUtils::Size &alignment) {
    #####:   82:  if (type.isa<spirv::ScalarType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:    alignment = getScalarTypeAlignment(type);
        -:   84:    // Vulkan spec does not specify any padding for a scalar type.
    #####:   85:    size = alignment;
    #####:   86:    return type;
        -:   87:  }
    #####:   88:  if (auto structType = type.dyn_cast<spirv::StructType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:    return decorateType(structType, size, alignment);
call    0 never executed
    #####:   90:  if (auto arrayType = type.dyn_cast<spirv::ArrayType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   91:    return decorateType(arrayType, size, alignment);
call    0 never executed
    #####:   92:  if (auto vectorType = type.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   93:    return decorateType(vectorType, size, alignment);
call    0 never executed
    #####:   94:  if (auto arrayType = type.dyn_cast<spirv::RuntimeArrayType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:    size = std::numeric_limits<Size>().max();
    #####:   96:    return decorateType(arrayType, alignment);
call    0 never executed
        -:   97:  }
    #####:   98:  llvm_unreachable("unhandled SPIR-V type");
call    0 never executed
        -:   99:}
        -:  100:
function _ZN4mlir17VulkanLayoutUtils12decorateTypeENS_10VectorTypeERmS2_ called 0 returned 0% blocks executed 0%
    #####:  101:Type VulkanLayoutUtils::decorateType(VectorType vectorType,
        -:  102:                                     VulkanLayoutUtils::Size &size,
        -:  103:                                     VulkanLayoutUtils::Size &alignment) {
    #####:  104:  const auto numElements = vectorType.getNumElements();
call    0 never executed
    #####:  105:  auto elementType = vectorType.getElementType();
call    0 never executed
    #####:  106:  Size elementSize = 0;
    #####:  107:  Size elementAlignment = 1;
        -:  108:
    #####:  109:  auto memberType = decorateType(elementType, elementSize, elementAlignment);
call    0 never executed
        -:  110:  // According to the Vulkan spec:
        -:  111:  // 1. "A two-component vector has a base alignment equal to twice its scalar
        -:  112:  // alignment."
        -:  113:  // 2. "A three- or four-component vector has a base alignment equal to four
        -:  114:  // times its scalar alignment."
    #####:  115:  size = elementSize * numElements;
    #####:  116:  alignment = numElements == 2 ? elementAlignment * 2 : elementAlignment * 4;
branch  0 never executed
branch  1 never executed
    #####:  117:  return VectorType::get(numElements, memberType);
call    0 never executed
        -:  118:}
        -:  119:
function _ZN4mlir17VulkanLayoutUtils12decorateTypeENS_5spirv9ArrayTypeERmS3_ called 0 returned 0% blocks executed 0%
    #####:  120:Type VulkanLayoutUtils::decorateType(spirv::ArrayType arrayType,
        -:  121:                                     VulkanLayoutUtils::Size &size,
        -:  122:                                     VulkanLayoutUtils::Size &alignment) {
    #####:  123:  const auto numElements = arrayType.getNumElements();
call    0 never executed
    #####:  124:  auto elementType = arrayType.getElementType();
call    0 never executed
    #####:  125:  Size elementSize = 0;
    #####:  126:  Size elementAlignment = 1;
        -:  127:
    #####:  128:  auto memberType = decorateType(elementType, elementSize, elementAlignment);
call    0 never executed
        -:  129:  // According to the Vulkan spec:
        -:  130:  // "An array has a base alignment equal to the base alignment of its element
        -:  131:  // type."
    #####:  132:  size = elementSize * numElements;
    #####:  133:  alignment = elementAlignment;
    #####:  134:  return spirv::ArrayType::get(memberType, numElements, elementSize);
call    0 never executed
        -:  135:}
        -:  136:
function _ZN4mlir17VulkanLayoutUtils12decorateTypeENS_5spirv16RuntimeArrayTypeERm called 0 returned 0% blocks executed 0%
    #####:  137:Type VulkanLayoutUtils::decorateType(spirv::RuntimeArrayType arrayType,
        -:  138:                                     VulkanLayoutUtils::Size &alignment) {
    #####:  139:  auto elementType = arrayType.getElementType();
call    0 never executed
    #####:  140:  Size elementSize = 0;
        -:  141:
    #####:  142:  auto memberType = decorateType(elementType, elementSize, alignment);
call    0 never executed
    #####:  143:  return spirv::RuntimeArrayType::get(memberType, elementSize);
call    0 never executed
        -:  144:}
        -:  145:
        -:  146:VulkanLayoutUtils::Size
function _ZN4mlir17VulkanLayoutUtils22getScalarTypeAlignmentENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  147:VulkanLayoutUtils::getScalarTypeAlignment(Type scalarType) {
        -:  148:  // According to the Vulkan spec:
        -:  149:  // 1. "A scalar of size N has a scalar alignment of N."
        -:  150:  // 2. "A scalar has a base alignment equal to its scalar alignment."
        -:  151:  // 3. "A scalar, vector or matrix type has an extended alignment equal to its
        -:  152:  // base alignment."
    #####:  153:  auto bitWidth = scalarType.getIntOrFloatBitWidth();
call    0 never executed
call    1 never executed
    #####:  154:  if (bitWidth == 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  155:    return 1;
    #####:  156:  return bitWidth / 8;
        -:  157:}
        -:  158:
function _ZN4mlir17VulkanLayoutUtils11isLegalTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  159:bool VulkanLayoutUtils::isLegalType(Type type) {
    #####:  160:  auto ptrType = type.dyn_cast<spirv::PointerType>();
call    0 never executed
    #####:  161:  if (!ptrType) {
branch  0 never executed
branch  1 never executed
        -:  162:    return true;
        -:  163:  }
        -:  164:
    #####:  165:  auto storageClass = ptrType.getStorageClass();
call    0 never executed
    #####:  166:  auto structType = ptrType.getPointeeType().dyn_cast<spirv::StructType>();
call    0 never executed
call    1 never executed
    #####:  167:  if (!structType) {
branch  0 never executed
branch  1 never executed
        -:  168:    return true;
        -:  169:  }
        -:  170:
    #####:  171:  switch (storageClass) {
branch  0 never executed
branch  1 never executed
    #####:  172:  case spirv::StorageClass::Uniform:
    #####:  173:  case spirv::StorageClass::StorageBuffer:
    #####:  174:  case spirv::StorageClass::PushConstant:
    #####:  175:  case spirv::StorageClass::PhysicalStorageBuffer:
    #####:  176:    return structType.hasOffset() || !structType.getNumElements();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  177:  default:
        -:  178:    return true;
        -:  179:  }
        -:  180:}
