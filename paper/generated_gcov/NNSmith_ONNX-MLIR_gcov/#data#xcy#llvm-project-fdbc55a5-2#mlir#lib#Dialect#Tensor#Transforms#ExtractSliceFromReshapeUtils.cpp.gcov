        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Tensor/Transforms/ExtractSliceFromReshapeUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tensor/Transforms/CMakeFiles/obj.MLIRTensorTransforms.dir/ExtractSliceFromReshapeUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tensor/Transforms/CMakeFiles/obj.MLIRTensorTransforms.dir/ExtractSliceFromReshapeUtils.cpp.gcda
        -:    0:Runs:128649
        -:    1://===- ExtractSliceFromReshapeUtils.cpp - Slice reshape rewrites ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements rewrites that replace slices of reshape results with
        -:   10:// aggregated slices of the reshape source.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   16:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   17:#include "mlir/Dialect/Tensor/Transforms/TransformUtils.h"
        -:   18:#include "mlir/Dialect/Tensor/Transforms/Transforms.h"
        -:   19:#include "mlir/Dialect/Utils/ReshapeOpsUtils.h"
        -:   20:#include "mlir/Dialect/Utils/StaticValueUtils.h"
        -:   21:#include "mlir/IR/BuiltinTypes.h"
        -:   22:#include "mlir/IR/OpDefinition.h"
        -:   23:#include "llvm/ADT/STLExtras.h"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace mlir::tensor;
        -:   27:
        -:   28:/// Get the dimension size of a value of RankedTensor type at the
function _ZL15getShapeDimSizeRN4mlir9OpBuilderENS_8LocationENS_5ValueEl called 0 returned 0% blocks executed 0%
    #####:   29:static OpFoldResult getShapeDimSize(OpBuilder &b, Location loc,
        -:   30:                                    Value rankedTensor, int64_t dimIdx) {
    #####:   31:  RankedTensorType tensorType = rankedTensor.getType().cast<RankedTensorType>();
call    0 never executed
    #####:   32:  if (!tensorType.isDynamicDim(dimIdx)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   33:    return b.getIndexAttr(tensorType.getDimSize(dimIdx));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   34:  }
    #####:   35:  Value idxValue = b.create<arith::ConstantIndexOp>(loc, dimIdx);
call    0 never executed
call    1 never executed
    #####:   36:  return b.createOrFold<tensor::DimOp>(loc, rankedTensor, idxValue);
call    0 never executed
call    1 never executed
        -:   37:}
        -:   38:
        -:   39:/// Get all the dimension sizes of a value of RankedTensor type.
function _ZL16getShapeDimSizesRN4mlir9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   40:static SmallVector<OpFoldResult> getShapeDimSizes(OpBuilder &b, Location loc,
        -:   41:                                                  Value rankedTensor) {
    #####:   42:  SmallVector<OpFoldResult> dimSizes;
call    0 never executed
    #####:   43:  RankedTensorType tensorType = rankedTensor.getType().cast<RankedTensorType>();
call    0 never executed
    #####:   44:  for (unsigned i = 0; i < tensorType.getRank(); i++)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:    dimSizes.push_back(getShapeDimSize(b, loc, rankedTensor, i));
call    0 never executed
call    1 never executed
    #####:   46:  return dimSizes;
        -:   47:}
        -:   48:
        -:   49:/// A tuple that represents (dimension number, dimension value).
        -:   50:using DimAndIndex = std::tuple<unsigned, Value>;
        -:   51:
        -:   52:/// Transform `dimAndIndex` from the output index space of a (non-rank-reducing)
        -:   53:/// slice described by `sliceParams` into the input index space.
function _ZL19invertSliceIndexingRN4mlir9OpBuilderENS_8LocationEN4llvm8ArrayRefINS_5RangeEEERKSt5tupleIJjNS_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:   54:static DimAndIndex invertSliceIndexing(OpBuilder &b, Location loc,
        -:   55:                                       ArrayRef<Range> sliceParams,
        -:   56:                                       const DimAndIndex &dimAndIndex) {
    #####:   57:  AffineExpr d0, s0, s1;
    #####:   58:  bindDims(b.getContext(), d0);
call    0 never executed
    #####:   59:  bindSymbols(b.getContext(), s0, s1);
call    0 never executed
    #####:   60:  auto [dim, indexValue] = dimAndIndex;
branch  0 never executed
branch  1 never executed
    #####:   61:  assert(dim < sliceParams.size() && "slice should be non rank-reducing");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   62:  return std::make_pair(
        -:   63:      dim,
    #####:   64:      makeComposedAffineApply(
        -:   65:          b, loc, s0 + d0 * s1,
        -:   66:          {indexValue,
    #####:   67:           getValueOrCreateConstantIndexOp(b, loc, sliceParams[dim].offset),
    #####:   68:           getValueOrCreateConstantIndexOp(b, loc, sliceParams[dim].stride)}));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   69:}
        -:   70:
        -:   71:/// Transform `dimAndIndex` from the result tensor index space of a
        -:   72:/// CollapseShapeOp to the source tensor index space.
function _ZL27invertCollapseShapeIndexingRN4mlir9OpBuilderENS_8LocationEN4llvm8ArrayRefINS3_11SmallVectorIlLj2EEEEENS4_INS_12OpFoldResultEEERKSt5tupleIJjNS_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:   73:static ValueRange invertCollapseShapeIndexing(
        -:   74:    OpBuilder &b, Location loc, ArrayRef<ReassociationIndices> reassociation,
        -:   75:    ArrayRef<OpFoldResult> reshapeSourceShape, const DimAndIndex &dimAndIndex) {
    #####:   76:  const auto &[dim, indexValue] = dimAndIndex;
branch  0 never executed
branch  1 never executed
    #####:   77:  SmallVector<OpFoldResult> basis;
branch  0 never executed
branch  1 never executed
    #####:   78:  for (int64_t i : reassociation[dim])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:    basis.push_back(reshapeSourceShape[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   80:  auto delinearized =
    #####:   81:      b.create<AffineDelinearizeIndexOp>(loc, indexValue, basis);
call    0 never executed
    #####:   82:  return delinearized->getResults();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   83:}
        -:   84:
        -:   85:FailureOr<ExtractSliceFromCollapseHelper>
function _ZN4mlir6tensor30ExtractSliceFromCollapseHelper6createERNS_9OpBuilderENS0_15CollapseShapeOpENS0_14ExtractSliceOpE called 0 returned 0% blocks executed 0%
    #####:   86:tensor::ExtractSliceFromCollapseHelper::create(
        -:   87:    OpBuilder &b, tensor::CollapseShapeOp collapseOp,
        -:   88:    tensor::ExtractSliceOp extractOp) {
    #####:   89:  if (extractOp.getSource().getDefiningOp<tensor::CollapseShapeOp>() !=
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   90:      collapseOp)
    #####:   91:    return failure();
    #####:   92:  SmallVector<Range> ranges;
call    0 never executed
    #####:   93:  ranges.reserve(extractOp.getSourceType().getRank());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   94:  for (const auto &[o, s, st] :
    #####:   95:       llvm::zip(extractOp.getMixedOffsets(), extractOp.getMixedSizes(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   96:                 extractOp.getMixedStrides())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   97:    ranges.push_back({o, s, st});
call    0 never executed
        -:   98:  }
    #####:   99:  return ExtractSliceFromCollapseHelper::create(b, collapseOp, ranges);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  100:}
        -:  101:
        -:  102:FailureOr<ExtractSliceFromCollapseHelper>
function _ZN4mlir6tensor30ExtractSliceFromCollapseHelper6createERNS_9OpBuilderENS0_15CollapseShapeOpEN4llvm8ArrayRefINS_5RangeEEE called 0 returned 0% blocks executed 0%
    #####:  103:tensor::ExtractSliceFromCollapseHelper::create(OpBuilder &b,
        -:  104:                                               tensor::CollapseShapeOp op,
        -:  105:                                               ArrayRef<Range> sliceParams) {
        -:  106:  // Don't perform this pattern if the collapse op can be simplified by
        -:  107:  // a rank-reducing extract slice.
    #####:  108:  if (succeeded(mlir::getSimplifyCollapseShapeWithRankReducingSliceInfo(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  109:          op.getSrcType(), op.getReassociationIndices())))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  110:    return failure();
        -:  111:
        -:  112:  // Materialize the output shape of the collapse_shape operation. This will
        -:  113:  // create IR describing the output shape in terms of the input shape.
    #####:  114:  ReifiedRankedShapedTypeDims reifiedShapes;
call    0 never executed
    #####:  115:  ReifyRankedShapedTypeOpInterface reifyShapedTypeInterface =
    #####:  116:      dyn_cast<ReifyRankedShapedTypeOpInterface>(op.getOperation());
call    0 never executed
    #####:  117:  if (failed(reifyShapedTypeInterface.reifyResultShapes(b, reifiedShapes)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:    return failure();
    #####:  119:  SmallVector<OpFoldResult> collapseShapeOutputShape =
branch  0 never executed
branch  1 never executed
    #####:  120:      getAsOpFoldResult(reifiedShapes[0]);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:  SmallVector<ReassociationIndices> reassociationIndices =
    #####:  122:      op.getReassociationIndices();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  123:
        -:  124:  // Determine which of the CollapseShapeOp's result dimensions are sliced
        -:  125:  // and/or linearized.
    #####:  126:  llvm::SmallBitVector linearizedDimensions =
call    0 never executed
    #####:  127:      getLinearizedDimensions(reassociationIndices);
call    0 never executed
call    1 never executed
    #####:  128:  llvm::SmallBitVector slicedDimensions =
call    0 never executed
    #####:  129:      getSlicedDimensions(collapseShapeOutputShape, sliceParams);
call    0 never executed
        -:  130:
    #####:  131:  auto collapseShapeInputShape = getShapeDimSizes(b, op.getLoc(), op.getSrc());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  132:
    #####:  133:  SmallVector<Value> tileSizes;
branch  0 never executed
branch  1 never executed
    #####:  134:  for (unsigned i = 0; i < sliceParams.size(); i++) {
branch  0 never executed
branch  1 never executed
    #####:  135:    if (slicedDimensions[i] && linearizedDimensions[i])
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  136:      tileSizes.push_back(
call    0 never executed
    #####:  137:          getValueOrCreateConstantIndexOp(b, op.getLoc(), sliceParams[i].size));
call    0 never executed
        -:  138:  }
        -:  139:
    #####:  140:  return ExtractSliceFromCollapseHelper(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  141:      op, collapseShapeInputShape, collapseShapeOutputShape, sliceParams,
    #####:  142:      linearizedDimensions, slicedDimensions, tileSizes);
call    0 never executed
        -:  143:}
        -:  144:
        -:  145:std::pair<Value, SmallVector<Range>>
function _ZN4mlir6tensor30ExtractSliceFromCollapseHelper16emitLoopNestBodyERNS_9OpBuilderENS_8LocationENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  146:tensor::ExtractSliceFromCollapseHelper::emitLoopNestBody(
        -:  147:    OpBuilder &builder, Location loc, ValueRange tileInductionVars) {
        -:  148:  // Create the helper class for forming the slice parameters.
    #####:  149:  const SmallVector<ReassociationIndices> reassociationIndices =
    #####:  150:      collapseShapeOp.getReassociationIndices();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  151:  SliceFromCollapseHelper helper(reassociationIndices, collapseShapeInputShape,
    #####:  152:                                 collapseShapeOutputShape, sliceParams);
call    0 never executed
        -:  153:
        -:  154:  // Get the indices of the tiled dims (linearized by the collapse_shape
        -:  155:  // and sliced by the extract_slice) invert the index spaces
        -:  156:  // transformations.
    #####:  157:  SmallVector<ValueRange> multiIndices;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  158:  unsigned loopIdx = 0;
    #####:  159:  for (unsigned i = 0, e = linearizedDimensions.size(); i < e; i++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  160:    if (linearizedDimensions[i] && slicedDimensions[i]) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  161:      DimAndIndex tb =
        -:  162:          invertSliceIndexing(builder, loc, sliceParams,
    #####:  163:                              std::make_tuple(i, tileInductionVars[loopIdx++]));
call    0 never executed
call    1 never executed
    #####:  164:      multiIndices.push_back(invertCollapseShapeIndexing(
call    0 never executed
call    1 never executed
        -:  165:          builder, loc, reassociationIndices, collapseShapeInputShape, tb));
        -:  166:    }
        -:  167:  }
        -:  168:
    #####:  169:  SmallVector<Range> extractParams =
call    0 never executed
    #####:  170:      helper.getExtractSliceParams(builder.getContext(), multiIndices);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  171:
    #####:  172:  Value subTileResult = builder.create<tensor::ExtractSliceOp>(
    #####:  173:      loc, collapseShapeOp.getSrc(), extractParams);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  174:
    #####:  175:  SmallVector<Range> insertParams =
    #####:  176:      helper.getInsertSliceParams(builder.getContext(), tileInductionVars);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  177:
        -:  178:  // Collapse the dimensions of the source slice back down.
    #####:  179:  Value collapsedResult = builder.create<tensor::CollapseShapeOp>(
    #####:  180:      loc, subTileResult, reassociationIndices);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  181:  return std::make_pair(collapsedResult, insertParams);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  182:}
        -:  183:
        -:  184:FailureOr<Operation *>
function _ZN4mlir6tensor49simplifyCollapseShapeWithRankReducingExtractSliceENS0_15CollapseShapeOpERNS_12RewriterBaseE called 0 returned 0% blocks executed 0%
    #####:  185:tensor::simplifyCollapseShapeWithRankReducingExtractSlice(
        -:  186:    tensor::CollapseShapeOp op, RewriterBase &rewriter) {
    #####:  187:  SmallVector<ReassociationIndices> reassociationIndices =
    #####:  188:      op.getReassociationIndices();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  189:  RankedTensorType sourceType = op.getSrcType();
call    0 never executed
    #####:  190:  FailureOr<CollapseShapeRankReducingSliceSimplificationInfo> info =
call    0 never executed
        -:  191:      getSimplifyCollapseShapeWithRankReducingSliceInfo(sourceType,
    #####:  192:                                                        reassociationIndices);
call    0 never executed
call    1 never executed
    #####:  193:  if (failed(info))
branch  0 never executed
branch  1 never executed
    #####:  194:    return failure();
        -:  195:
        -:  196:  // Create the rank-reducing extract slice op.
    #####:  197:  auto zero = rewriter.getIndexAttr(0);
call    0 never executed
    #####:  198:  auto one = rewriter.getIndexAttr(1);
call    0 never executed
    #####:  199:  SmallVector<OpFoldResult> offsets(sourceType.getRank(), zero);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  200:  SmallVector<OpFoldResult> sizes =
    #####:  201:      getShapeDimSizes(rewriter, op.getLoc(), op.getSrc());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  202:  SmallVector<OpFoldResult> strides(sourceType.getRank(), one);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  203:  auto sliceOp = rewriter.create<tensor::ExtractSliceOp>(
    #####:  204:      op.getLoc(), info->sliceResultType, op.getSrc(), offsets, sizes, strides);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  205:
    #####:  206:  if (!info->newReassociationIndices.has_value()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:    rewriter.replaceOp(op, sliceOp.getResult());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  208:    return sliceOp.getOperation();
        -:  209:  }
        -:  210:
    #####:  211:  return rewriter
call    0 never executed
    #####:  212:      .replaceOpWithNewOp<tensor::CollapseShapeOp>(
    #####:  213:          op, sliceOp.getResult(), info->newReassociationIndices.value())
call    0 never executed
call    1 never executed
    #####:  214:      .getOperation();
        -:  215:}
