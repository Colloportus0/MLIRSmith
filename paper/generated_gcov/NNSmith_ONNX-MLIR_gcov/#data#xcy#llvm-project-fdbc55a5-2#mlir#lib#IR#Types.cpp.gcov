        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/Types.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Types.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Types.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- Types.cpp - MLIR Type Classes --------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinTypes.h"
        -:   10:#include "mlir/IR/Dialect.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:using namespace mlir::detail;
        -:   14:
        -:   15://===----------------------------------------------------------------------===//
        -:   16:// Type
        -:   17://===----------------------------------------------------------------------===//
        -:   18:
function _ZNK4mlir4Type10getContextEv called 654562103 returned 100% blocks executed 67%
654562103:   19:MLIRContext *Type::getContext() const { return getDialect().getContext(); }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   20:
function _ZNK4mlir4Type12isFloat8E5M2Ev called 0 returned 0% blocks executed 0%
    #####:   21:bool Type::isFloat8E5M2() const { return isa<Float8E5M2Type>(); }
call    0 never executed
function _ZNK4mlir4Type6isBF16Ev called 0 returned 0% blocks executed 0%
    #####:   22:bool Type::isBF16() const { return isa<BFloat16Type>(); }
call    0 never executed
function _ZNK4mlir4Type5isF16Ev called 4 returned 100% blocks executed 100%
        4:   23:bool Type::isF16() const { return isa<Float16Type>(); }
call    0 returned 100%
function _ZNK4mlir4Type5isF32Ev called 0 returned 0% blocks executed 0%
    #####:   24:bool Type::isF32() const { return isa<Float32Type>(); }
call    0 never executed
function _ZNK4mlir4Type5isF64Ev called 15656 returned 100% blocks executed 100%
    15656:   25:bool Type::isF64() const { return isa<Float64Type>(); }
call    0 returned 100%
function _ZNK4mlir4Type5isF80Ev called 0 returned 0% blocks executed 0%
    #####:   26:bool Type::isF80() const { return isa<Float80Type>(); }
call    0 never executed
function _ZNK4mlir4Type6isF128Ev called 0 returned 0% blocks executed 0%
    #####:   27:bool Type::isF128() const { return isa<Float128Type>(); }
call    0 never executed
        -:   28:
function _ZNK4mlir4Type7isIndexEv called 174846403 returned 100% blocks executed 100%
174949338*:   29:bool Type::isIndex() const { return isa<IndexType>(); }
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:   30:
        -:   31:/// Return true if this is an integer type with the specified width.
function _ZNK4mlir4Type9isIntegerEj called 32303915 returned 100% blocks executed 100%
 32303915:   32:bool Type::isInteger(unsigned width) const {
 32303915:   33:  if (auto intTy = dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
 32301227:   34:    return intTy.getWidth() == width;
call    0 returned 100%
     2688:   35:  return false;
        -:   36:}
        -:   37:
function _ZNK4mlir4Type17isSignlessIntegerEv called 128101427 returned 100% blocks executed 83%
128101427:   38:bool Type::isSignlessInteger() const {
128101427:   39:  if (auto intTy = dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
128100729:   40:    return intTy.isSignless();
call    0 returned 100%
    #####:   41:  return false;
        -:   42:}
        -:   43:
function _ZNK4mlir4Type17isSignlessIntegerEj called 167648444 returned 100% blocks executed 100%
167648444:   44:bool Type::isSignlessInteger(unsigned width) const {
167648444:   45:  if (auto intTy = dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
145045202:   46:    return intTy.isSignless() && intTy.getWidth() == width;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
 40996143:   47:  return false;
        -:   48:}
        -:   49:
function _ZNK4mlir4Type15isSignedIntegerEv called 25123852 returned 100% blocks executed 100%
 25123852:   50:bool Type::isSignedInteger() const {
 25123852:   51:  if (auto intTy = dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
 10115776:   52:    return intTy.isSigned();
call    0 returned 100%
 15008076:   53:  return false;
        -:   54:}
        -:   55:
function _ZNK4mlir4Type15isSignedIntegerEj called 0 returned 0% blocks executed 0%
    #####:   56:bool Type::isSignedInteger(unsigned width) const {
    #####:   57:  if (auto intTy = dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:    return intTy.isSigned() && intTy.getWidth() == width;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   59:  return false;
        -:   60:}
        -:   61:
function _ZNK4mlir4Type17isUnsignedIntegerEv called 21348541 returned 100% blocks executed 100%
 21348541:   62:bool Type::isUnsignedInteger() const {
 21348541:   63:  if (auto intTy = dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
  8348935:   64:    return intTy.isUnsigned();
call    0 returned 100%
 12999606:   65:  return false;
        -:   66:}
        -:   67:
function _ZNK4mlir4Type17isUnsignedIntegerEj called 0 returned 0% blocks executed 0%
    #####:   68:bool Type::isUnsignedInteger(unsigned width) const {
    #####:   69:  if (auto intTy = dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:    return intTy.isUnsigned() && intTy.getWidth() == width;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   71:  return false;
        -:   72:}
        -:   73:
function _ZNK4mlir4Type20isSignlessIntOrIndexEv called 0 returned 0% blocks executed 0%
    #####:   74:bool Type::isSignlessIntOrIndex() const {
    #####:   75:  return isSignlessInteger() || isa<IndexType>();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   76:}
        -:   77:
function _ZNK4mlir4Type27isSignlessIntOrIndexOrFloatEv called 0 returned 0% blocks executed 0%
    #####:   78:bool Type::isSignlessIntOrIndexOrFloat() const {
    #####:   79:  return isSignlessInteger() || isa<IndexType, FloatType>();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   80:}
        -:   81:
function _ZNK4mlir4Type20isSignlessIntOrFloatEv called 0 returned 0% blocks executed 0%
    #####:   82:bool Type::isSignlessIntOrFloat() const {
    #####:   83:  return isSignlessInteger() || isa<FloatType>();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   84:}
        -:   85:
function _ZNK4mlir4Type12isIntOrIndexEv called 4023817 returned 100% blocks executed 83%
  4126752:   86:bool Type::isIntOrIndex() const { return isa<IntegerType>() || isIndex(); }
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   87:
function _ZNK4mlir4Type12isIntOrFloatEv called 0 returned 0% blocks executed 0%
    #####:   88:bool Type::isIntOrFloat() const { return isa<IntegerType, FloatType>(); }
call    0 never executed
        -:   89:
function _ZNK4mlir4Type19isIntOrIndexOrFloatEv called 27087884 returned 100% blocks executed 50%
27087884*:   90:bool Type::isIntOrIndexOrFloat() const { return isIntOrFloat() || isIndex(); }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
        -:   91:
function _ZNK4mlir4Type21getIntOrFloatBitWidthEv called 35120242 returned 100% blocks executed 91%
 35120242:   92:unsigned Type::getIntOrFloatBitWidth() const {
35120242*:   93:  assert(isIntOrFloat() && "only integers and floats have a bitwidth");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
 35120242:   94:  if (auto intType = dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
 35111313:   95:    return intType.getWidth();
call    0 returned 100%
     8929:   96:  return cast<FloatType>().getWidth();
call    0 returned 100%
call    1 returned 100%
        -:   97:}
