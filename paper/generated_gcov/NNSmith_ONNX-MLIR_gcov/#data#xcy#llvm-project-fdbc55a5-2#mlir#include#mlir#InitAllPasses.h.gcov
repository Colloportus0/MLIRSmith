        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/InitAllPasses.h
        -:    0:Graph:../tools/mlir/tools/mlir-opt/CMakeFiles/mlir-opt.dir/mlir-opt.cpp.gcno
        -:    0:Data:../tools/mlir/tools/mlir-opt/CMakeFiles/mlir-opt.dir/mlir-opt.cpp.gcda
        -:    0:Runs:128623
        -:    1://===- LinkAllPassesAndDialects.h - MLIR Registration -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines a helper to trigger the registration of all dialects and
        -:   10:// passes to the system.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_INITALLPASSES_H_
        -:   15:#define MLIR_INITALLPASSES_H_
        -:   16:
        -:   17:#include "mlir/Conversion/Passes.h"
        -:   18:#include "mlir/Dialect/Affine/Passes.h"
        -:   19:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   20:#include "mlir/Dialect/Async/Passes.h"
        -:   21:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   22:#include "mlir/Dialect/Func/Transforms/Passes.h"
        -:   23:#include "mlir/Dialect/GPU/Transforms/Passes.h"
        -:   24:#include "mlir/Dialect/LLVMIR/Transforms/Passes.h"
        -:   25:#include "mlir/Dialect/Linalg/Passes.h"
        -:   26:#include "mlir/Dialect/MemRef/Transforms/Passes.h"
        -:   27:#include "mlir/Dialect/NVGPU/Passes.h"
        -:   28:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   29:#include "mlir/Dialect/SPIRV/Transforms/Passes.h"
        -:   30:#include "mlir/Dialect/Shape/Transforms/Passes.h"
        -:   31:#include "mlir/Dialect/SparseTensor/Pipelines/Passes.h"
        -:   32:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h"
        -:   33:#include "mlir/Dialect/Tensor/Transforms/Passes.h"
        -:   34:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   35:#include "mlir/Dialect/Transform/Transforms/Passes.h"
        -:   36:#include "mlir/Dialect/Vector/Transforms/Passes.h"
        -:   37:#include "mlir/Transforms/Passes.h"
        -:   38:
        -:   39:#include <cstdlib>
        -:   40:
        -:   41:namespace mlir {
        -:   42:
        -:   43:// This function may be called to register the MLIR passes with the
        -:   44:// global registry.
        -:   45:// If you're building a compiler, you likely don't need this: you would build a
        -:   46:// pipeline programmatically without the need to register with the global
        -:   47:// registry, since it would already be calling the creation routine of the
        -:   48:// individual passes.
        -:   49:// The global registry is interesting to interact with the command-line tools.
function _ZN4mlir17registerAllPassesEv called 128623 returned 100% blocks executed 100%
   128623:   50:inline void registerAllPasses() {
        -:   51:  // General passes
   128623:   52:  registerTransformsPasses();
call    0 returned 100%
        -:   53:
        -:   54:  // Conversion passes
   128623:   55:  registerConversionPasses();
call    0 returned 100%
        -:   56:
        -:   57:  // Dialect passes
   128623:   58:  registerAffinePasses();
call    0 returned 100%
   128623:   59:  registerAsyncPasses();
call    0 returned 100%
   128623:   60:  arith::registerArithPasses();
call    0 returned 100%
   128623:   61:  bufferization::registerBufferizationPasses();
call    0 returned 100%
   128623:   62:  func::registerFuncPasses();
call    0 returned 100%
   128623:   63:  registerGPUPasses();
call    0 returned 100%
   128623:   64:  registerGpuSerializeToCubinPass();
call    0 returned 100%
   128623:   65:  registerGpuSerializeToHsacoPass();
call    0 returned 100%
   128623:   66:  registerLinalgPasses();
call    0 returned 100%
   128623:   67:  registerNVGPUPasses();
call    0 returned 100%
   128623:   68:  registerSparseTensorPasses();
call    0 returned 100%
   128623:   69:  LLVM::registerLLVMPasses();
call    0 returned 100%
   128623:   70:  memref::registerMemRefPasses();
call    0 returned 100%
   128623:   71:  registerSCFPasses();
call    0 returned 100%
   128623:   72:  registerShapePasses();
call    0 returned 100%
   128623:   73:  spirv::registerSPIRVPasses();
call    0 returned 100%
   128623:   74:  tensor::registerTensorPasses();
call    0 returned 100%
   128623:   75:  tosa::registerTosaOptPasses();
call    0 returned 100%
   128623:   76:  transform::registerTransformPasses();
call    0 returned 100%
   128623:   77:  vector::registerVectorPasses();
call    0 returned 100%
        -:   78:
        -:   79:  // Dialect pipelines
   128623:   80:  sparse_tensor::registerSparseTensorPipelines();
call    0 returned 100%
   128623:   81:}
        -:   82:
        -:   83:} // namespace mlir
        -:   84:
        -:   85:#endif // MLIR_INITALLPASSES_H_
