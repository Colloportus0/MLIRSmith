        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/Presburger/PresburgerSpace.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PresburgerSpace.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PresburgerSpace.cpp.gcda
        -:    0:Runs:128654
        -:    1://===- PresburgerSpace.cpp - MLIR PresburgerSpace Class -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/Presburger/PresburgerSpace.h"
        -:   10:#include <algorithm>
        -:   11:#include <cassert>
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace presburger;
        -:   15:
function _ZNK4mlir10presburger15PresburgerSpace14getDomainSpaceEv called 0 returned 0% blocks executed 0%
    #####:   16:PresburgerSpace PresburgerSpace::getDomainSpace() const {
        -:   17:  // TODO: Preserve identifiers here.
    #####:   18:  return PresburgerSpace::getSetSpace(numDomain, numSymbols, numLocals);
        -:   19:}
        -:   20:
function _ZNK4mlir10presburger15PresburgerSpace13getRangeSpaceEv called 0 returned 0% blocks executed 0%
    #####:   21:PresburgerSpace PresburgerSpace::getRangeSpace() const {
    #####:   22:  return PresburgerSpace::getSetSpace(numRange, numSymbols, numLocals);
        -:   23:}
        -:   24:
function _ZNK4mlir10presburger15PresburgerSpace13getNumVarKindENS0_7VarKindE called 0 returned 0% blocks executed 0%
    #####:   25:unsigned PresburgerSpace::getNumVarKind(VarKind kind) const {
    #####:   26:  if (kind == VarKind::Domain)
branch  0 never executed
branch  1 never executed
    #####:   27:    return getNumDomainVars();
    #####:   28:  if (kind == VarKind::Range)
branch  0 never executed
branch  1 never executed
    #####:   29:    return getNumRangeVars();
    #####:   30:  if (kind == VarKind::Symbol)
branch  0 never executed
branch  1 never executed
    #####:   31:    return getNumSymbolVars();
    #####:   32:  if (kind == VarKind::Local)
branch  0 never executed
branch  1 never executed
    #####:   33:    return numLocals;
    #####:   34:  llvm_unreachable("VarKind does not exist!");
call    0 never executed
        -:   35:}
        -:   36:
function _ZNK4mlir10presburger15PresburgerSpace16getVarKindOffsetENS0_7VarKindE called 0 returned 0% blocks executed 0%
    #####:   37:unsigned PresburgerSpace::getVarKindOffset(VarKind kind) const {
    #####:   38:  if (kind == VarKind::Domain)
branch  0 never executed
branch  1 never executed
        -:   39:    return 0;
    #####:   40:  if (kind == VarKind::Range)
branch  0 never executed
branch  1 never executed
    #####:   41:    return getNumDomainVars();
    #####:   42:  if (kind == VarKind::Symbol)
branch  0 never executed
branch  1 never executed
    #####:   43:    return getNumDimVars();
    #####:   44:  if (kind == VarKind::Local)
branch  0 never executed
branch  1 never executed
    #####:   45:    return getNumDimAndSymbolVars();
    #####:   46:  llvm_unreachable("VarKind does not exist!");
call    0 never executed
        -:   47:}
        -:   48:
function _ZNK4mlir10presburger15PresburgerSpace13getVarKindEndENS0_7VarKindE called 0 returned 0% blocks executed 0%
    #####:   49:unsigned PresburgerSpace::getVarKindEnd(VarKind kind) const {
    #####:   50:  return getVarKindOffset(kind) + getNumVarKind(kind);
call    0 never executed
call    1 never executed
        -:   51:}
        -:   52:
function _ZNK4mlir10presburger15PresburgerSpace17getVarKindOverlapENS0_7VarKindEjj called 0 returned 0% blocks executed 0%
    #####:   53:unsigned PresburgerSpace::getVarKindOverlap(VarKind kind, unsigned varStart,
        -:   54:                                            unsigned varLimit) const {
    #####:   55:  unsigned varRangeStart = getVarKindOffset(kind);
call    0 never executed
    #####:   56:  unsigned varRangeEnd = getVarKindEnd(kind);
call    0 never executed
        -:   57:
        -:   58:  // Compute number of elements in intersection of the ranges [varStart,
        -:   59:  // varLimit) and [varRangeStart, varRangeEnd).
    #####:   60:  unsigned overlapStart = std::max(varStart, varRangeStart);
branch  0 never executed
branch  1 never executed
    #####:   61:  unsigned overlapEnd = std::min(varLimit, varRangeEnd);
branch  0 never executed
branch  1 never executed
        -:   62:
    #####:   63:  if (overlapStart > overlapEnd)
branch  0 never executed
branch  1 never executed
        -:   64:    return 0;
    #####:   65:  return overlapEnd - overlapStart;
        -:   66:}
        -:   67:
function _ZNK4mlir10presburger15PresburgerSpace12getVarKindAtEj called 0 returned 0% blocks executed 0%
    #####:   68:VarKind PresburgerSpace::getVarKindAt(unsigned pos) const {
    #####:   69:  assert(pos < getNumVars() && "`pos` should represent a valid var position");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   70:  if (pos < getVarKindEnd(VarKind::Domain))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   71:    return VarKind::Domain;
    #####:   72:  if (pos < getVarKindEnd(VarKind::Range))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   73:    return VarKind::Range;
    #####:   74:  if (pos < getVarKindEnd(VarKind::Symbol))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   75:    return VarKind::Symbol;
    #####:   76:  if (pos < getVarKindEnd(VarKind::Local))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   77:    return VarKind::Local;
    #####:   78:  llvm_unreachable("`pos` should represent a valid var position");
call    0 never executed
        -:   79:}
        -:   80:
function _ZN4mlir10presburger15PresburgerSpace9insertVarENS0_7VarKindEjj called 0 returned 0% blocks executed 0%
    #####:   81:unsigned PresburgerSpace::insertVar(VarKind kind, unsigned pos, unsigned num) {
    #####:   82:  assert(pos <= getNumVarKind(kind));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   83:
    #####:   84:  unsigned absolutePos = getVarKindOffset(kind) + pos;
call    0 never executed
        -:   85:
    #####:   86:  if (kind == VarKind::Domain)
branch  0 never executed
branch  1 never executed
    #####:   87:    numDomain += num;
    #####:   88:  else if (kind == VarKind::Range)
branch  0 never executed
branch  1 never executed
    #####:   89:    numRange += num;
    #####:   90:  else if (kind == VarKind::Symbol)
branch  0 never executed
branch  1 never executed
    #####:   91:    numSymbols += num;
        -:   92:  else
    #####:   93:    numLocals += num;
        -:   94:
        -:   95:  // Insert NULL identifiers if `usingIds` and variables inserted are
        -:   96:  // not locals.
    #####:   97:  if (usingIds && kind != VarKind::Local)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   98:    identifiers.insert(identifiers.begin() + absolutePos, num, nullptr);
call    0 never executed
        -:   99:
    #####:  100:  return absolutePos;
        -:  101:}
        -:  102:
function _ZN4mlir10presburger15PresburgerSpace14removeVarRangeENS0_7VarKindEjj called 0 returned 0% blocks executed 0%
    #####:  103:void PresburgerSpace::removeVarRange(VarKind kind, unsigned varStart,
        -:  104:                                     unsigned varLimit) {
    #####:  105:  assert(varLimit <= getNumVarKind(kind) && "invalid var limit");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  106:
    #####:  107:  if (varStart >= varLimit)
branch  0 never executed
branch  1 never executed
        -:  108:    return;
        -:  109:
    #####:  110:  unsigned numVarsEliminated = varLimit - varStart;
    #####:  111:  if (kind == VarKind::Domain)
branch  0 never executed
branch  1 never executed
    #####:  112:    numDomain -= numVarsEliminated;
    #####:  113:  else if (kind == VarKind::Range)
branch  0 never executed
branch  1 never executed
    #####:  114:    numRange -= numVarsEliminated;
    #####:  115:  else if (kind == VarKind::Symbol)
branch  0 never executed
branch  1 never executed
    #####:  116:    numSymbols -= numVarsEliminated;
        -:  117:  else
    #####:  118:    numLocals -= numVarsEliminated;
        -:  119:
        -:  120:  // Remove identifiers if `usingIds` and variables removed are not
        -:  121:  // locals.
    #####:  122:  if (usingIds && kind != VarKind::Local)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  123:    identifiers.erase(identifiers.begin() + getVarKindOffset(kind) + varStart,
    #####:  124:                      identifiers.begin() + getVarKindOffset(kind) + varLimit);
call    0 never executed
call    1 never executed
        -:  125:}
        -:  126:
function _ZN4mlir10presburger15PresburgerSpace7swapVarENS0_7VarKindES2_jj called 0 returned 0% blocks executed 0%
    #####:  127:void PresburgerSpace::swapVar(VarKind kindA, VarKind kindB, unsigned posA,
        -:  128:                              unsigned posB) {
        -:  129:
    #####:  130:  if (!usingIds)
branch  0 never executed
branch  1 never executed
        -:  131:    return;
        -:  132:
    #####:  133:  if (kindA == VarKind::Local && kindB == VarKind::Local)
branch  0 never executed
branch  1 never executed
        -:  134:    return;
        -:  135:
    #####:  136:  if (kindA == VarKind::Local) {
branch  0 never executed
branch  1 never executed
    #####:  137:    atId(kindB, posB) = nullptr;
call    0 never executed
    #####:  138:    return;
        -:  139:  }
        -:  140:
    #####:  141:  if (kindB == VarKind::Local) {
branch  0 never executed
branch  1 never executed
    #####:  142:    atId(kindA, posA) = nullptr;
call    0 never executed
    #####:  143:    return;
        -:  144:  }
        -:  145:
    #####:  146:  std::swap(atId(kindA, posA), atId(kindB, posB));
call    0 never executed
call    1 never executed
        -:  147:}
        -:  148:
function _ZNK4mlir10presburger15PresburgerSpace12isCompatibleERKS1_ called 0 returned 0% blocks executed 0%
    #####:  149:bool PresburgerSpace::isCompatible(const PresburgerSpace &other) const {
    #####:  150:  return getNumDomainVars() == other.getNumDomainVars() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  151:         getNumRangeVars() == other.getNumRangeVars() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  152:         getNumSymbolVars() == other.getNumSymbolVars();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  153:}
        -:  154:
function _ZNK4mlir10presburger15PresburgerSpace7isEqualERKS1_ called 0 returned 0% blocks executed 0%
    #####:  155:bool PresburgerSpace::isEqual(const PresburgerSpace &other) const {
    #####:  156:  return isCompatible(other) && getNumLocalVars() == other.getNumLocalVars();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  157:}
        -:  158:
function _ZNK4mlir10presburger15PresburgerSpace9isAlignedERKS1_ called 0 returned 0% blocks executed 0%
    #####:  159:bool PresburgerSpace::isAligned(const PresburgerSpace &other) const {
    #####:  160:  assert(isUsingIds() && other.isUsingIds() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  161:         "Both spaces should be using identifiers to check for "
        -:  162:         "alignment.");
    #####:  163:  return isCompatible(other) && identifiers == other.identifiers;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  164:}
        -:  165:
function _ZNK4mlir10presburger15PresburgerSpace9isAlignedERKS1_NS0_7VarKindE called 0 returned 0% blocks executed 0%
    #####:  166:bool PresburgerSpace::isAligned(const PresburgerSpace &other,
        -:  167:                                VarKind kind) const {
    #####:  168:  assert(isUsingIds() && other.isUsingIds() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  169:         "Both spaces should be using identifiers to check for "
        -:  170:         "alignment.");
        -:  171:
    #####:  172:  ArrayRef<void *> kindAttachments =
    #####:  173:      makeArrayRef(identifiers)
call    0 never executed
    #####:  174:          .slice(getVarKindOffset(kind), getNumVarKind(kind));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  175:  ArrayRef<void *> otherKindAttachments =
    #####:  176:      makeArrayRef(other.identifiers)
call    0 never executed
    #####:  177:          .slice(other.getVarKindOffset(kind), other.getNumVarKind(kind));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  178:  return kindAttachments == otherKindAttachments;
        -:  179:}
        -:  180:
function _ZN4mlir10presburger15PresburgerSpace22setVarSymbolSeperationEj called 0 returned 0% blocks executed 0%
    #####:  181:void PresburgerSpace::setVarSymbolSeperation(unsigned newSymbolCount) {
    #####:  182:  assert(newSymbolCount <= getNumDimAndSymbolVars() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  183:         "invalid separation position");
    #####:  184:  numRange = numRange + numSymbols - newSymbolCount;
    #####:  185:  numSymbols = newSymbolCount;
        -:  186:  // We do not need to change `identifiers` since the ordering of
        -:  187:  // `identifiers` remains same.
    #####:  188:}
        -:  189:
function _ZNK4mlir10presburger15PresburgerSpace5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  190:void PresburgerSpace::print(llvm::raw_ostream &os) const {
    #####:  191:  os << "Domain: " << getNumDomainVars() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  192:     << "Range: " << getNumRangeVars() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  193:     << "Symbols: " << getNumSymbolVars() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  194:     << "Locals: " << getNumLocalVars() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  195:
    #####:  196:  if (usingIds) {
branch  0 never executed
branch  1 never executed
        -:  197:#ifdef LLVM_ENABLE_ABI_BREAKING_CHECKS
    #####:  198:    os << "TypeID of identifiers: " << idType.getAsOpaquePointer() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  199:#endif
        -:  200:
    #####:  201:    os << "(";
call    0 never executed
    #####:  202:    for (void *identifier : identifiers)
branch  0 never executed
branch  1 never executed
    #####:  203:      os << identifier << " ";
call    0 never executed
call    1 never executed
    #####:  204:    os << ")\n";
call    0 never executed
        -:  205:  }
    #####:  206:}
        -:  207:
function _ZNK4mlir10presburger15PresburgerSpace4dumpEv called 0 returned 0% blocks executed 0%
    #####:  208:void PresburgerSpace::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
