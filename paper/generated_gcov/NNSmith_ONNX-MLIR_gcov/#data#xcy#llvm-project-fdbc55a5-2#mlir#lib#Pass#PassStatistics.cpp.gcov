        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Pass/PassStatistics.cpp
        -:    0:Graph:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassStatistics.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassStatistics.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- PassStatistics.cpp -------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "PassDetail.h"
        -:   10:#include "mlir/Pass/PassManager.h"
        -:   11:#include "llvm/ADT/StringExtras.h"
        -:   12:#include "llvm/Support/Format.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::detail;
        -:   16:
        -:   17:constexpr StringLiteral kPassStatsDescription =
        -:   18:    "... Pass statistics report ...";
        -:   19:
        -:   20:namespace {
        -:   21:/// Information pertaining to a specific statistic.
        -:   22:struct Statistic {
        -:   23:  const char *name, *desc;
        -:   24:  uint64_t value;
        -:   25:};
        -:   26:} // namespace
        -:   27:
        -:   28:/// Utility to print a pass entry in the statistics output.
function _ZL14printPassEntryRN4llvm11raw_ostreamEjNS_9StringRefENS_15MutableArrayRefIN12_GLOBAL__N_19StatisticEEE called 2642 returned 100% blocks executed 92%
     2642:   29:static void printPassEntry(raw_ostream &os, unsigned indent, StringRef pass,
        -:   30:                           MutableArrayRef<Statistic> stats = llvm::None) {
     2642:   31:  os.indent(indent) << pass << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     2642:   32:  if (stats.empty())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     2623:   33:    return;
        -:   34:
        -:   35:  // Make sure to sort the statistics by name.
       19:   36:  llvm::array_pod_sort(
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
function _ZZL14printPassEntryRN4llvm11raw_ostreamEjNS_9StringRefENS_15MutableArrayRefIN12_GLOBAL__N_19StatisticEEEENKUlPKT_PKT0_E_clIS5_S5_EEDaS9_SC_.isra.0 called 9 returned 100% blocks executed 100%
        9:   37:      stats.begin(), stats.end(), [](const auto *lhs, const auto *rhs) {
       18:   38:        return StringRef{lhs->name}.compare(StringRef{rhs->name});
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   39:      });
        -:   40:
        -:   41:  // Collect the largest name and value length from each of the statistics.
       19:   42:  size_t largestName = 0, largestValue = 0;
       47:   43:  for (auto &stat : stats) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       28:   44:    largestName = std::max(largestName, (size_t)strlen(stat.name));
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
       56:   45:    largestValue =
       47:   46:        std::max(largestValue, (size_t)llvm::utostr(stat.value).size());
call    0 returned 100%
branch  1 taken 68% (fallthrough)
branch  2 taken 32%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   47:  }
        -:   48:
        -:   49:  // Print each of the statistics.
       47:   50:  for (auto &stat : stats) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       56:   51:    os.indent(indent + 2) << llvm::format("(S) %*u %-*s - %s\n", largestValue,
call    0 returned 100%
       28:   52:                                          stat.value, largestName, stat.name,
       28:   53:                                          stat.desc);
call    0 returned 100%
        -:   54:  }
        -:   55:}
        -:   56:
        -:   57:/// Print the statistics results in a list form, where each pass is sorted by
        -:   58:/// name.
function _ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerE called 6 returned 100% blocks executed 64%
        6:   59:static void printResultsAsList(raw_ostream &os, OpPassManager &pm) {
        6:   60:  llvm::StringMap<std::vector<Statistic>> mergedStats;
call    0 returned 100%
function _ZZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEENKUlPNS2_4PassEE_clES6_.isra.0 called 54 returned 100% blocks executed 52%
       60:   61:  std::function<void(Pass *)> addStats = [&](Pass *pass) {
       54:   62:    auto *adaptor = dyn_cast<OpToOpPassAdaptor>(pass);
call    0 returned 100%
        -:   63:
        -:   64:    // If this is not an adaptor, add the stats to the list if there are any.
       54:   65:    if (!adaptor) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:   66:#if LLVM_ENABLE_STATS
       42:   67:      auto statistics = pass->getStatistics();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       42:   68:      if (statistics.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   69:        return;
        -:   70:
    #####:   71:      auto &passEntry = mergedStats[pass->getName()];
call    0 never executed
call    1 never executed
    #####:   72:      if (passEntry.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   73:        for (Pass::Statistic *it : pass->getStatistics())
branch  0 never executed
branch  1 never executed
    #####:   74:          passEntry.push_back({it->getName(), it->getDesc(), it->getValue()});
call    0 never executed
        -:   75:      } else {
    #####:   76:        for (auto &it : llvm::enumerate(pass->getStatistics()))
branch  0 never executed
branch  1 never executed
    #####:   77:          passEntry[it.index()].value += it.value()->getValue();
call    0 never executed
        -:   78:      }
        -:   79:#endif
    #####:   80:      return;
        -:   81:    }
        -:   82:
        -:   83:    // Otherwise, recursively add each of the children.
       25:   84:    for (auto &mgr : adaptor->getPassManagers())
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       29:   85:      for (Pass &pass : mgr.getPasses())
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       32:   86:        addStats(&pass);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:   87:  };
call    0 returned 100%
call    1 returned 100%
       44:   88:  for (Pass &pass : pm.getPasses())
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       76:   89:    addStats(&pass);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   90:
        -:   91:  // Sort the statistics by pass name and then by record name.
        6:   92:  auto passAndStatistics =
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:   93:      llvm::to_vector<16>(llvm::make_pointer_range(mergedStats));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6:   94:  llvm::array_pod_sort(passAndStatistics.begin(), passAndStatistics.end(),
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   95:                       [](const decltype(passAndStatistics)::value_type *lhs,
        -:   96:                          const decltype(passAndStatistics)::value_type *rhs) {
        -:   97:                         return (*lhs)->getKey().compare((*rhs)->getKey());
        -:   98:                       });
        -:   99:
        -:  100:  // Print the timing information sequentially.
       6*:  101:  for (auto &statData : passAndStatistics)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  102:    printPassEntry(os, /*indent=*/2, statData->first(), statData->second);
call    0 never executed
        6:  103:}
        -:  104:
        -:  105:/// Print the results in pipeline mode that mirrors the internal pass manager
        -:  106:/// structure.
function _ZL22printResultsAsPipelineRN4llvm11raw_ostreamERN4mlir13OpPassManagerE called 561 returned 100% blocks executed 90%
      561:  107:static void printResultsAsPipeline(raw_ostream &os, OpPassManager &pm) {
        -:  108:#if LLVM_ENABLE_STATS
function _ZZL22printResultsAsPipelineRN4llvm11raw_ostreamERN4mlir13OpPassManagerEENKUljPNS2_4PassEE_clEjS6_.isra.0 called 2578 returned 100% blocks executed 98%
     3139:  109:  std::function<void(unsigned, Pass *)> printPass = [&](unsigned indent,
        -:  110:                                                        Pass *pass) {
     2578:  111:    if (auto *adaptor = dyn_cast<OpToOpPassAdaptor>(pass)) {
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
        -:  112:      // If this adaptor has more than one internal pipeline, print an entry for
        -:  113:      // it.
      495:  114:      auto mgrs = adaptor->getPassManagers();
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
      495:  115:      if (mgrs.size() > 1) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
      559:  116:        printPassEntry(os, indent, adaptor->getAdaptorName());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
       32:  117:        indent += 2;
        -:  118:      }
        -:  119:
        -:  120:      // Print each of the children passes.
     1022:  121:      for (OpPassManager &mgr : mgrs) {
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
     1054:  122:        auto name = ("'" + mgr.getOpAnchorName() + "' Pipeline").str();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      527:  123:        printPassEntry(os, indent, name);
call    0 returned 100%
     1274:  124:        for (Pass &pass : mgr.getPasses())
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     1494:  125:          printPass(indent + 2, &pass);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  126:      }
      495:  127:      return;
        -:  128:    }
        -:  129:
        -:  130:    // Otherwise, we print the statistics for this pass.
     4166:  131:    std::vector<Statistic> stats;
     2111:  132:    for (Pass::Statistic *stat : pass->getStatistics())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       28:  133:      stats.push_back({stat->getName(), stat->getDesc(), stat->getValue()});
call    0 returned 100%
     2083:  134:    printPassEntry(os, indent, pass->getName(), stats);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
      561:  135:  };
call    0 returned 100%
     2392:  136:  for (Pass &pass : pm.getPasses())
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     3662:  137:    printPass(/*indent=*/0, &pass);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  138:#endif
      561:  139:}
        -:  140:
function _ZL15printStatisticsRN4mlir13OpPassManagerENS_15PassDisplayModeE called 567 returned 96% blocks executed 97%
      567:  141:static void printStatistics(OpPassManager &pm, PassDisplayMode displayMode) {
      567:  142:  auto os = llvm::CreateInfoOutputFile();
call    0 returned 100%
        -:  143:
        -:  144:  // Print the stats header.
      567:  145:  *os << "===" << std::string(73, '-') << "===\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  146:  // Figure out how many spaces for the description name.
      567:  147:  unsigned padding = (80 - kPassStatsDescription.size()) / 2;
      567:  148:  os->indent(padding) << kPassStatsDescription << '\n';
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      567:  149:  *os << "===" << std::string(73, '-') << "===\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  150:
        -:  151:  // Defer to a specialized printer for each display mode.
      567:  152:  switch (displayMode) {
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 0%
        6:  153:  case PassDisplayMode::List:
        6:  154:    printResultsAsList(*os, pm);
call    0 returned 100%
        6:  155:    break;
call    0 returned 100%
      561:  156:  case PassDisplayMode::Pipeline:
      561:  157:    printResultsAsPipeline(*os, pm);
call    0 returned 100%
      561:  158:    break;
call    0 returned 100%
        -:  159:  }
      567:  160:  *os << "\n";
call    0 returned 100%
     1134:  161:  os->flush();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      544:  162:}
        -:  163:
        -:  164://===----------------------------------------------------------------------===//
        -:  165:// PassStatistics
        -:  166://===----------------------------------------------------------------------===//
        -:  167:
function _ZN4mlir4Pass9StatisticC2EPS0_PKcS4_ called 776502 returned 100% blocks executed 100%
   776502:  168:Pass::Statistic::Statistic(Pass *owner, const char *name,
        -:  169:                           const char *description)
   776502:  170:    : llvm::Statistic{/*DebugType=*/"", name, description} {
call    0 returned 100%
        -:  171:#if LLVM_ENABLE_STATS
        -:  172:  // Always set the 'initialized' bit to true so that this statistic isn't
        -:  173:  // placed in the static registry.
        -:  174:  // TODO: This is sort of hack as `llvm::Statistic`s can't be setup to avoid
        -:  175:  // automatic registration with the global registry. We should either add
        -:  176:  // support for this in LLVM, or just write our own statistics classes.
   776502:  177:  Initialized = true;
call    0 returned 100%
        -:  178:#endif
        -:  179:
        -:  180:  // Register this statistic with the parent.
   776502:  181:  owner->statistics.push_back(this);
call    0 returned 100%
   776502:  182:}
        -:  183:
function _ZN4mlir4Pass9StatisticaSEj called 0 returned 0% blocks executed 0%
    #####:  184:auto Pass::Statistic::operator=(unsigned value) -> Statistic & {
    #####:  185:  llvm::Statistic::operator=(value);
call    0 never executed
call    1 never executed
    #####:  186:  return *this;
        -:  187:}
        -:  188:
        -:  189://===----------------------------------------------------------------------===//
        -:  190:// PassManager
        -:  191://===----------------------------------------------------------------------===//
        -:  192:
        -:  193:/// Merge the pass statistics of this class into 'other'.
function _ZN4mlir13OpPassManager19mergeStatisticsIntoERS0_ called 35928 returned 100% blocks executed 59%
    35928:  194:void OpPassManager::mergeStatisticsInto(OpPassManager &other) {
    35928:  195:  auto passes = getPasses(), otherPasses = other.getPasses();
call    0 returned 100%
call    1 returned 100%
        -:  196:
    86688:  197:  for (auto passPair : llvm::zip(passes, otherPasses)) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
    50760:  198:    Pass &pass = std::get<0>(passPair), &otherPass = std::get<1>(passPair);
call    0 returned 100%
        -:  199:
        -:  200:    // If this is an adaptor, then recursively merge the pass managers.
    50760:  201:    if (auto *adaptorPass = dyn_cast<OpToOpPassAdaptor>(&pass)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      720:  202:      auto *otherAdaptorPass = cast<OpToOpPassAdaptor>(&otherPass);
call    0 returned 100%
     1440:  203:      for (auto mgrs : llvm::zip(adaptorPass->getPassManagers(),
     1440:  204:                                 otherAdaptorPass->getPassManagers()))
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      720:  205:        std::get<0>(mgrs).mergeStatisticsInto(std::get<1>(mgrs));
call    0 returned 100%
      720:  206:      continue;
        -:  207:    }
        -:  208:    // Otherwise, merge the statistics for the current pass.
   50040*:  209:    assert(pass.statistics.size() == otherPass.statistics.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   50040*:  210:    for (unsigned i = 0, e = pass.statistics.size(); i != e; ++i) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  211:      assert(pass.statistics[i]->getName() ==
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  212:             StringRef(otherPass.statistics[i]->getName()));
    #####:  213:      *otherPass.statistics[i] += *pass.statistics[i];
call    0 never executed
    #####:  214:      *pass.statistics[i] = 0;
call    0 never executed
        -:  215:    }
        -:  216:  }
    35928:  217:}
        -:  218:
        -:  219:/// Prepare the statistics of passes within the given pass manager for
        -:  220:/// consumption(e.g. dumping).
function _ZL17prepareStatisticsRN4mlir13OpPassManagerE called 1107 returned 100% blocks executed 91%
     1107:  221:static void prepareStatistics(OpPassManager &pm) {
     3739:  222:  for (Pass &pass : pm.getPasses()) {
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
call    3 returned 100%
     2632:  223:    OpToOpPassAdaptor *adaptor = dyn_cast<OpToOpPassAdaptor>(&pass);
call    0 returned 100%
     2632:  224:    if (!adaptor)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
     2125:  225:      continue;
      507:  226:    MutableArrayRef<OpPassManager> nestedPms = adaptor->getPassManagers();
        -:  227:
        -:  228:    // Merge the statistics from the async pass managers into the main nested
        -:  229:    // pass managers.
    33483:  230:    for (auto &asyncPM : adaptor->getParallelPassManagers()) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
    68184:  231:      for (unsigned i = 0, e = asyncPM.size(); i != e; ++i)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
    35208:  232:        asyncPM[i].mergeStatisticsInto(nestedPms[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
        -:  233:    }
        -:  234:
        -:  235:    // Prepare the statistics of each of the nested passes.
     1047:  236:    for (OpPassManager &nestedPM : nestedPms)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
      540:  237:      prepareStatistics(nestedPM);
call    0 returned 100%
        -:  238:  }
     1107:  239:}
        -:  240:
        -:  241:/// Dump the statistics of the passes within this pass manager.
function _ZN4mlir11PassManager14dumpStatisticsEv called 567 returned 96% blocks executed 80%
      567:  242:void PassManager::dumpStatistics() {
      567:  243:  prepareStatistics(*this);
call    0 returned 100%
      567:  244:  printStatistics(*this, *passStatisticsMode);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 96%
      544:  245:}
        -:  246:
        -:  247:/// Dump the statistics for each pass after running.
function _ZN4mlir11PassManager16enableStatisticsENS_15PassDisplayModeE called 629 returned 100% blocks executed 75%
      629:  248:void PassManager::enableStatistics(PassDisplayMode displayMode) {
      629:  249:  passStatisticsMode = displayMode;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      629:  250:}
