        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/Conversion/ComplexToLLVM/ComplexToLLVM.h
        -:    0:Graph:../tools/mlir/lib/Conversion/ComplexToLLVM/CMakeFiles/obj.MLIRComplexToLLVM.dir/ComplexToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ComplexToLLVM/CMakeFiles/obj.MLIRComplexToLLVM.dir/ComplexToLLVM.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- ComplexToLLVM.h - Utils to convert from the complex dialect --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:#ifndef MLIR_CONVERSION_COMPLEXTOLLVM_COMPLEXTOLLVM_H_
        -:    9:#define MLIR_CONVERSION_COMPLEXTOLLVM_COMPLEXTOLLVM_H_
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/StructBuilder.h"
        -:   12:
        -:   13:namespace mlir {
        -:   14:class LLVMTypeConverter;
        -:   15:class Pass;
        -:   16:class RewritePatternSet;
        -:   17:
        -:   18:#define GEN_PASS_DECL_CONVERTCOMPLEXTOLLVM
        -:   19:#include "mlir/Conversion/Passes.h.inc"
        -:   20:
        -:   21:class ComplexStructBuilder : public StructBuilder {
        -:   22:public:
        -:   23:  /// Construct a helper for the given complex number value.
    #####:   24:  using StructBuilder::StructBuilder;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:   25:  /// Build IR creating an `undef` value of the complex number type.
        -:   26:  static ComplexStructBuilder undef(OpBuilder &builder, Location loc,
        -:   27:                                    Type type);
        -:   28:
        -:   29:  // Build IR extracting the real value from the complex number struct.
        -:   30:  Value real(OpBuilder &builder, Location loc);
        -:   31:  // Build IR inserting the real value into the complex number struct.
        -:   32:  void setReal(OpBuilder &builder, Location loc, Value real);
        -:   33:
        -:   34:  // Build IR extracting the imaginary value from the complex number struct.
        -:   35:  Value imaginary(OpBuilder &builder, Location loc);
        -:   36:  // Build IR inserting the imaginary value into the complex number struct.
        -:   37:  void setImaginary(OpBuilder &builder, Location loc, Value imaginary);
        -:   38:};
        -:   39:
        -:   40:/// Populate the given list with patterns that convert from Complex to LLVM.
        -:   41:void populateComplexToLLVMConversionPatterns(LLVMTypeConverter &converter,
        -:   42:                                             RewritePatternSet &patterns);
        -:   43:
        -:   44:/// Create a pass to convert Complex operations to the LLVMIR dialect.
        -:   45:std::unique_ptr<Pass> createConvertComplexToLLVMPass();
        -:   46:
        -:   47:} // namespace mlir
        -:   48:
        -:   49:#endif // MLIR_CONVERSION_COMPLEXTOLLVM_COMPLEXTOLLVM_H_
