        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/DataFlow/ConstantPropagationAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/ConstantPropagationAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/ConstantPropagationAnalysis.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- ConstantPropagationAnalysis.cpp - Constant propagation analysis ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   10:#include "mlir/IR/OpDefinition.h"
        -:   11:#include "llvm/Support/Debug.h"
        -:   12:
        -:   13:#define DEBUG_TYPE "constant-propagation"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::dataflow;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// ConstantValue
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
function _ZNK4mlir8dataflow13ConstantValue5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   22:void ConstantValue::print(raw_ostream &os) const {
    #####:   23:  if (isUninitialized()) {
branch  0 never executed
branch  1 never executed
    #####:   24:    os << "<UNINITIALIZED>";
    #####:   25:    return;
call    0 never executed
        -:   26:  }
    #####:   27:  if (getConstantValue() == nullptr) {
branch  0 never executed
branch  1 never executed
    #####:   28:    os << "<UNKNOWN>";
    #####:   29:    return;
call    0 never executed
        -:   30:  }
    #####:   31:  return getConstantValue().print(os);
call    0 never executed
        -:   32:}
        -:   33:
        -:   34://===----------------------------------------------------------------------===//
        -:   35:// SparseConstantPropagation
        -:   36://===----------------------------------------------------------------------===//
        -:   37:
function _ZN4mlir8dataflow25SparseConstantPropagation14visitOperationEPNS_9OperationEN4llvm8ArrayRefIPKNS0_7LatticeINS0_13ConstantValueEEEEENS5_IPS8_EE called 682958 returned 100% blocks executed 59%
   682958:   38:void SparseConstantPropagation::visitOperation(
        -:   39:    Operation *op, ArrayRef<const Lattice<ConstantValue> *> operands,
        -:   40:    ArrayRef<Lattice<ConstantValue> *> results) {
  682958*:   41:  LLVM_DEBUG(llvm::dbgs() << "SCP: Visiting operation: " << *op << "\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:   42:
        -:   43:  // Don't try to simulate the results of a region operation as we can't
        -:   44:  // guarantee that folding will be out-of-place. We don't allow in-place
        -:   45:  // folds as the desire here is for simulated execution, and not general
        -:   46:  // folding.
   682958:   47:  if (op->getNumRegions()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:    setAllToEntryStates(results);
call    0 never executed
    #####:   49:    return;
        -:   50:  }
        -:   51:
   843753:   52:  SmallVector<Attribute, 8> constantOperands;
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
  1185001:   53:  constantOperands.reserve(op->getNumOperands());
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  1243740:   54:  for (auto *operandLattice : operands) {
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
   754100:   55:    if (operandLattice->getValue().isUninitialized())
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
   522163:   56:      return;
   560782:   57:    constantOperands.push_back(operandLattice->getValue().getConstantValue());
call    0 returned 100%
        -:   58:  }
        -:   59:
        -:   60:  // Save the original operands and attributes just in case the operation
        -:   61:  // folds in-place. The constant passed in may not correspond to the real
        -:   62:  // runtime value, so in-place updates are not allowed.
   650435:   63:  SmallVector<Value, 8> originalOperands(op->getOperands());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   489640:   64:  DictionaryAttr originalAttrs = op->getAttrDictionary();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   65:
        -:   66:  // Simulate the result of folding this operation to a constant. If folding
        -:   67:  // fails or was an in-place fold, mark the results as overdefined.
   650435:   68:  SmallVector<OpFoldResult, 8> foldResults;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   489640:   69:  foldResults.reserve(op->getNumResults());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   489640:   70:  if (failed(op->fold(constantOperands, foldResults))) {
call    0 returned 100%
branch  1 taken 66% (fallthrough)
branch  2 taken 34%
   322719:   71:    setAllToEntryStates(results);
call    0 returned 100%
   651564:   72:    return;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   73:  }
        -:   74:
        -:   75:  // If the folding was in-place, mark the results as overdefined and reset
        -:   76:  // the operation. We don't allow in-place folds as the desire here is for
        -:   77:  // simulated execution, and not general folding.
   166921:   78:  if (foldResults.empty()) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     6126:   79:    op->setOperands(originalOperands);
call    0 returned 100%
call    1 returned 100%
     6126:   80:    op->setAttrs(originalAttrs);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     6126:   81:    setAllToEntryStates(results);
call    0 returned 100%
     6126:   82:    return;
        -:   83:  }
        -:   84:
        -:   85:  // Merge the fold results into the lattice for this operation.
  160795*:   86:  assert(foldResults.size() == op->getNumResults() && "invalid result size");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   321590:   87:  for (const auto it : llvm::zip(results, foldResults)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   160795:   88:    Lattice<ConstantValue> *lattice = std::get<0>(it);
        -:   89:
        -:   90:    // Merge in the result of the fold, either a constant or a value.
   160795:   91:    OpFoldResult foldResult = std::get<1>(it);
   160795:   92:    if (Attribute attr = foldResult.dyn_cast<Attribute>()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
  155267*:   93:      LLVM_DEBUG(llvm::dbgs() << "Folded to constant: " << attr << "\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
   155267:   94:      propagateIfChanged(lattice,
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
   310534:   95:                         lattice->join(ConstantValue(attr, op->getDialect())));
call    0 returned 100%
        -:   96:    } else {
    5528*:   97:      LLVM_DEBUG(llvm::dbgs()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:   98:                 << "Folded to value: " << foldResult.get<Value>() << "\n");
     5528:   99:      AbstractSparseDataFlowAnalysis::join(
call    0 returned 100%
     5528:  100:          lattice, *getLatticeElement(foldResult.get<Value>()));
call    0 returned 100%
call    1 returned 100%
        -:  101:    }
        -:  102:  }
        -:  103:}
        -:  104:
function _ZN4mlir8dataflow25SparseConstantPropagation15setToEntryStateEPNS0_7LatticeINS0_13ConstantValueEEE called 355345 returned 100% blocks executed 100%
   355345:  105:void SparseConstantPropagation::setToEntryState(
        -:  106:    Lattice<ConstantValue> *lattice) {
   355345:  107:  propagateIfChanged(lattice,
call    0 returned 100%
call    1 returned 100%
   355345:  108:                     lattice->join(ConstantValue::getUnknownConstant()));
   355345:  109:}
