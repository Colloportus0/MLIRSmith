        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/DataFlow/IntegerRangeAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/IntegerRangeAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/IntegerRangeAnalysis.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- IntegerRangeAnalysis.cpp - Integer range analysis --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the dataflow analysis class for integer range inference
        -:   10:// which is used in transformations over the `arith` dialect such as
        -:   11:// branch elimination or signed->unsigned rewriting
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Analysis/DataFlow/IntegerRangeAnalysis.h"
        -:   16:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   17:#include "mlir/Interfaces/InferIntRangeInterface.h"
        -:   18:#include "mlir/Interfaces/LoopLikeInterface.h"
        -:   19:#include "llvm/Support/Debug.h"
        -:   20:
        -:   21:#define DEBUG_TYPE "int-range-analysis"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::dataflow;
        -:   25:
function _ZN4mlir8dataflow17IntegerValueRange11getMaxRangeENS_5ValueE called 440020 returned 100% blocks executed 71%
   440020:   26:IntegerValueRange IntegerValueRange::getMaxRange(Value value) {
   440020:   27:  unsigned width = ConstantIntRanges::getStorageBitwidth(value.getType());
call    0 returned 100%
   440020:   28:  APInt umin = APInt::getMinValue(width);
call    0 returned 100%
   880040:   29:  APInt umax = APInt::getMaxValue(width);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   880040:   30:  APInt smin = width != 0 ? APInt::getSignedMinValue(width) : umin;
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
   880040:   31:  APInt smax = width != 0 ? APInt::getSignedMaxValue(width) : umax;
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   880040:   32:  return IntegerValueRange{ConstantIntRanges{umin, umax, smin, smax}};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:   33:}
        -:   34:
function _ZNK4mlir8dataflow24IntegerValueRangeLattice8onUpdateEPNS_14DataFlowSolverE called 463650 returned 100% blocks executed 41%
   463650:   35:void IntegerValueRangeLattice::onUpdate(DataFlowSolver *solver) const {
   463650:   36:  Lattice::onUpdate(solver);
call    0 returned 100%
        -:   37:
        -:   38:  // If the integer range can be narrowed to a constant, update the constant
        -:   39:  // value of the SSA value.
  463650*:   40:  Optional<APInt> constant = getValue().getValue().getConstantValue();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   463650:   41:  auto value = point.get<Value>();
call    0 returned 100%
   463650:   42:  auto *cv = solver->getOrCreateState<Lattice<ConstantValue>>(value);
call    0 returned 100%
   463650:   43:  if (!constant)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   463650:   44:    return solver->propagateIfChanged(
call    0 returned 100%
call    1 returned 100%
   463650:   45:        cv, cv->join(ConstantValue::getUnknownConstant()));
call    0 returned 100%
        -:   46:
    #####:   47:  Dialect *dialect;
    #####:   48:  if (auto *parent = value.getDefiningOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:    dialect = parent->getDialect();
branch  0 never executed
branch  1 never executed
        -:   50:  else
    #####:   51:    dialect = value.getParentBlock()->getParentOp()->getDialect();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   52:  solver->propagateIfChanged(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   53:      cv, cv->join(ConstantValue(IntegerAttr::get(value.getType(), *constant),
call    0 never executed
call    1 never executed
call    2 never executed
        -:   54:                                 dialect)));
        -:   55:}
        -:   56:
function _ZN4mlir8dataflow20IntegerRangeAnalysis14visitOperationEPNS_9OperationEN4llvm8ArrayRefIPKNS0_24IntegerValueRangeLatticeEEENS5_IPS6_EE called 601930 returned 100% blocks executed 67%
   601930:   57:void IntegerRangeAnalysis::visitOperation(
        -:   58:    Operation *op, ArrayRef<const IntegerValueRangeLattice *> operands,
        -:   59:    ArrayRef<IntegerValueRangeLattice *> results) {
        -:   60:  // If the lattice on any operand is unitialized, bail out.
   601930:   61:  if (llvm::any_of(operands, [](const IntegerValueRangeLattice *lattice) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -:   62:        return lattice->getValue().isUninitialized();
        -:   63:      })) {
   601930:   64:    return;
        -:   65:  }
        -:   66:
        -:   67:  // Ignore non-integer outputs - return early if the op has no scalar
        -:   68:  // integer results
   413355:   69:  bool hasIntegerResult = false;
  1240065:   70:  for (auto it : llvm::zip(results, op->getResults())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
   413355:   71:    Value value = std::get<1>(it);
call    0 returned 100%
   413355:   72:    if (value.getType().isIntOrIndex()) {
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
        -:   73:      hasIntegerResult = true;
        -:   74:    } else {
    98646:   75:      IntegerValueRangeLattice *lattice = std::get<0>(it);
call    0 returned 100%
    98646:   76:      propagateIfChanged(lattice,
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   197292:   77:                         lattice->join(IntegerValueRange::getMaxRange(value)));
call    0 returned 100%
        -:   78:    }
        -:   79:  }
   413355:   80:  if (!hasIntegerResult)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -:   81:    return;
        -:   82:
   314709:   83:  auto inferrable = dyn_cast<InferIntRangeInterface>(op);
call    0 returned 100%
   314709:   84:  if (!inferrable)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   314709:   85:    return setAllToEntryStates(results);
call    0 returned 100%
        -:   86:
    #####:   87:  LLVM_DEBUG(llvm::dbgs() << "Inferring ranges for " << *op << "\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   88:  SmallVector<ConstantIntRanges> argRanges(
function _ZZN4mlir8dataflow20IntegerRangeAnalysis14visitOperationEPNS_9OperationEN4llvm8ArrayRefIPKNS0_24IntegerValueRangeLatticeEEENS5_IPS6_EEENKUlS8_E0_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   89:      llvm::map_range(operands, [](const IntegerValueRangeLattice *val) {
    #####:   90:        return val->getValue().getValue();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   91:      }));
call    0 never executed
        -:   92:
function _ZZN4mlir8dataflow20IntegerRangeAnalysis14visitOperationEPNS_9OperationEN4llvm8ArrayRefIPKNS0_24IntegerValueRangeLatticeEEENS5_IPS6_EEENKUlNS_5ValueERKNS_17ConstantIntRangesEE1_clESC_SF_ called 0 returned 0% blocks executed 0%
    #####:   93:  auto joinCallback = [&](Value v, const ConstantIntRanges &attrs) {
    #####:   94:    auto result = v.dyn_cast<OpResult>();
call    0 never executed
    #####:   95:    if (!result)
branch  0 never executed
branch  1 never executed
    #####:   96:      return;
    #####:   97:    assert(llvm::is_contained(op->getResults(), result));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   98:
    #####:   99:    LLVM_DEBUG(llvm::dbgs() << "Inferred range " << attrs << "\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  100:    IntegerValueRangeLattice *lattice = results[result.getResultNumber()];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:    IntegerValueRange oldRange = lattice->getValue();
branch  0 never executed
branch  1 never executed
        -:  102:
    #####:  103:    ChangeResult changed = lattice->join(IntegerValueRange{attrs});
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  104:
        -:  105:    // Catch loop results with loop variant bounds and conservatively make
        -:  106:    // them [-inf, inf] so we don't circle around infinitely often (because
        -:  107:    // the dataflow analysis in MLIR doesn't attempt to work out trip counts
        -:  108:    // and often can't).
    #####:  109:    bool isYieldedResult = llvm::any_of(v.getUsers(), [](Operation *op) {
call    0 never executed
        -:  110:      return op->hasTrait<OpTrait::IsTerminator>();
        -:  111:    });
    #####:  112:    if (isYieldedResult && !oldRange.isUninitialized() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  113:        !(lattice->getValue() == oldRange)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  114:      LLVM_DEBUG(llvm::dbgs() << "Loop variant loop result detected\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  115:      changed |= lattice->join(IntegerValueRange::getMaxRange(v));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  116:    }
    #####:  117:    propagateIfChanged(lattice, changed);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:  };
        -:  119:
    #####:  120:  inferrable.inferResultRanges(argRanges, joinCallback);
call    0 never executed
call    1 never executed
        -:  121:}
        -:  122:
function _ZN4mlir8dataflow20IntegerRangeAnalysis28visitNonControlFlowArgumentsEPNS_9OperationERKNS_15RegionSuccessorEN4llvm8ArrayRefIPNS0_24IntegerValueRangeLatticeEEEj called 7 returned 100% blocks executed 13%
        7:  123:void IntegerRangeAnalysis::visitNonControlFlowArguments(
        -:  124:    Operation *op, const RegionSuccessor &successor,
        -:  125:    ArrayRef<IntegerValueRangeLattice *> argLattices, unsigned firstIndex) {
        7:  126:  if (auto inferrable = dyn_cast<InferIntRangeInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  127:    LLVM_DEBUG(llvm::dbgs() << "Inferring ranges for " << *op << "\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  128:    SmallVector<ConstantIntRanges> argRanges(
function _ZZN4mlir8dataflow20IntegerRangeAnalysis28visitNonControlFlowArgumentsEPNS_9OperationERKNS_15RegionSuccessorEN4llvm8ArrayRefIPNS0_24IntegerValueRangeLatticeEEEjENKUlNS_5ValueEE_clESC_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  129:        llvm::map_range(op->getOperands(), [&](Value value) {
call    0 never executed
call    1 never executed
    #####:  130:          return getLatticeElementFor(op, value)->getValue().getValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  131:        }));
call    0 never executed
        -:  132:
function _ZZN4mlir8dataflow20IntegerRangeAnalysis28visitNonControlFlowArgumentsEPNS_9OperationERKNS_15RegionSuccessorEN4llvm8ArrayRefIPNS0_24IntegerValueRangeLatticeEEEjENKUlNS_5ValueERKNS_17ConstantIntRangesEE0_clESC_SF_ called 0 returned 0% blocks executed 0%
    #####:  133:    auto joinCallback = [&](Value v, const ConstantIntRanges &attrs) {
    #####:  134:      auto arg = v.dyn_cast<BlockArgument>();
call    0 never executed
    #####:  135:      if (!arg)
branch  0 never executed
branch  1 never executed
    #####:  136:        return;
    #####:  137:      if (!llvm::is_contained(successor.getSuccessor()->getArguments(), arg))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  138:        return;
        -:  139:
    #####:  140:      LLVM_DEBUG(llvm::dbgs() << "Inferred range " << attrs << "\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  141:      IntegerValueRangeLattice *lattice = argLattices[arg.getArgNumber()];
branch  0 never executed
branch  1 never executed
    #####:  142:      IntegerValueRange oldRange = lattice->getValue();
branch  0 never executed
branch  1 never executed
        -:  143:
    #####:  144:      ChangeResult changed = lattice->join(IntegerValueRange{attrs});
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  145:
        -:  146:      // Catch loop results with loop variant bounds and conservatively make
        -:  147:      // them [-inf, inf] so we don't circle around infinitely often (because
        -:  148:      // the dataflow analysis in MLIR doesn't attempt to work out trip counts
        -:  149:      // and often can't).
    #####:  150:      bool isYieldedValue = llvm::any_of(v.getUsers(), [](Operation *op) {
call    0 never executed
        -:  151:        return op->hasTrait<OpTrait::IsTerminator>();
        -:  152:      });
    #####:  153:      if (isYieldedValue && !oldRange.isUninitialized() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  154:          !(lattice->getValue() == oldRange)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  155:        LLVM_DEBUG(llvm::dbgs() << "Loop variant loop result detected\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  156:        changed |= lattice->join(IntegerValueRange::getMaxRange(v));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  157:      }
    #####:  158:      propagateIfChanged(lattice, changed);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  159:    };
        -:  160:
    #####:  161:    inferrable.inferResultRanges(argRanges, joinCallback);
call    0 never executed
    #####:  162:    return;
call    0 never executed
        -:  163:  }
        -:  164:
        -:  165:  /// Given the results of getConstant{Lower,Upper}Bound() or getConstantStep()
        -:  166:  /// on a LoopLikeInterface return the lower/upper bound for that result if
        -:  167:  /// possible.
function _ZZN4mlir8dataflow20IntegerRangeAnalysis28visitNonControlFlowArgumentsEPNS_9OperationERKNS_15RegionSuccessorEN4llvm8ArrayRefIPNS0_24IntegerValueRangeLatticeEEEjENKUlNS7_8OptionalINS_12OpFoldResultEEENS_4TypeEbE1_clESE_SF_b called 0 returned 0% blocks executed 0%
       7*:  168:  auto getLoopBoundFromFold = [&](Optional<OpFoldResult> loopBound,
        -:  169:                                  Type boundType, bool getUpper) {
    #####:  170:    unsigned int width = ConstantIntRanges::getStorageBitwidth(boundType);
call    0 never executed
    #####:  171:    if (loopBound.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:  172:      if (loopBound->is<Attribute>()) {
branch  0 never executed
branch  1 never executed
    #####:  173:        if (auto bound =
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  174:                loopBound->get<Attribute>().dyn_cast_or_null<IntegerAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  175:          return bound.getValue();
call    0 never executed
    #####:  176:      } else if (auto value = loopBound->dyn_cast<Value>()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  177:        const IntegerValueRangeLattice *lattice =
    #####:  178:            getLatticeElementFor(op, value);
call    0 never executed
call    1 never executed
    #####:  179:        if (lattice != nullptr)
branch  0 never executed
branch  1 never executed
    #####:  180:          return getUpper ? lattice->getValue().getValue().smax()
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  181:                          : lattice->getValue().getValue().smin();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  182:      }
        -:  183:    }
        -:  184:    // Given the results of getConstant{Lower,Upper}Bound()
        -:  185:    // or getConstantStep() on a LoopLikeInterface return the lower/upper
        -:  186:    // bound
    #####:  187:    return getUpper ? APInt::getSignedMaxValue(width)
    #####:  188:                    : APInt::getSignedMinValue(width);
branch  0 never executed
branch  1 never executed
call    2 never executed
        7:  189:  };
        -:  190:
        -:  191:  // Infer bounds for loop arguments that have static bounds
        7:  192:  if (auto loop = dyn_cast<LoopLikeOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  193:    Optional<Value> iv = loop.getSingleInductionVar();
call    0 never executed
    #####:  194:    if (!iv) {
branch  0 never executed
branch  1 never executed
    #####:  195:      return SparseDataFlowAnalysis ::visitNonControlFlowArguments(
call    0 never executed
    #####:  196:          op, successor, argLattices, firstIndex);
        -:  197:    }
    #####:  198:    Optional<OpFoldResult> lowerBound = loop.getSingleLowerBound();
call    0 never executed
    #####:  199:    Optional<OpFoldResult> upperBound = loop.getSingleUpperBound();
call    0 never executed
    #####:  200:    Optional<OpFoldResult> step = loop.getSingleStep();
call    0 never executed
    #####:  201:    APInt min = getLoopBoundFromFold(lowerBound, iv->getType(),
call    0 never executed
    #####:  202:                                     /*getUpper=*/false);
call    0 never executed
    #####:  203:    APInt max = getLoopBoundFromFold(upperBound, iv->getType(),
call    0 never executed
    #####:  204:                                     /*getUpper=*/true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  205:    // Assume positivity for uniscoverable steps by way of getUpper = true.
    #####:  206:    APInt stepVal =
call    0 never executed
    #####:  207:        getLoopBoundFromFold(step, iv->getType(), /*getUpper=*/true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  208:
    #####:  209:    if (stepVal.isNegative()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  210:      std::swap(min, max);
call    0 never executed
        -:  211:    } else {
        -:  212:      // Correct the upper bound by subtracting 1 so that it becomes a <=
        -:  213:      // bound, because loops do not generally include their upper bound.
    #####:  214:      max -= 1;
call    0 never executed
        -:  215:    }
        -:  216:
    #####:  217:    IntegerValueRangeLattice *ivEntry = getLatticeElement(*iv);
call    0 never executed
    #####:  218:    auto ivRange = ConstantIntRanges::fromSigned(min, max);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:    propagateIfChanged(ivEntry, ivEntry->join(IntegerValueRange{ivRange}));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  220:    return;
call    0 never executed
        -:  221:  }
        -:  222:
        7:  223:  return SparseDataFlowAnalysis::visitNonControlFlowArguments(
call    0 returned 100%
        7:  224:      op, successor, argLattices, firstIndex);
        -:  225:}
