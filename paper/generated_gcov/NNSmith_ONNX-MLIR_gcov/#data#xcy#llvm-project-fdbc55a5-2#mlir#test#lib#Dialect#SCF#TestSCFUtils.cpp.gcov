        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/SCF/TestSCFUtils.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/SCF/CMakeFiles/MLIRSCFTestPasses.dir/TestSCFUtils.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/SCF/CMakeFiles/MLIRSCFTestPasses.dir/TestSCFUtils.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestSCFUtils.cpp --- Pass to test independent SCF dialect utils ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to test SCF dialect utils.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   18:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   19:#include "mlir/IR/Builders.h"
        -:   20:#include "mlir/IR/PatternMatch.h"
        -:   21:#include "mlir/Pass/Pass.h"
        -:   22:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:struct TestSCFForUtilsPass
        -:   28:    : public PassWrapper<TestSCFForUtilsPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_119TestSCFForUtilsPass13resolveTypeIDEv called 129235 returned 100% blocks executed 100%
   129235:   29:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestSCFForUtilsPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   30:
function _ZNK12_GLOBAL__N_119TestSCFForUtilsPass11getArgumentEv called 128643 returned 100% blocks executed 100%
   128643:   31:  StringRef getArgument() const final { return "test-scf-for-utils"; }
function _ZNK12_GLOBAL__N_119TestSCFForUtilsPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   32:  StringRef getDescription() const final { return "test scf.for utils"; }
function _ZN12_GLOBAL__N_119TestSCFForUtilsPassC2Ev called 129235 returned 100% blocks executed 100%
   129235:   33:  explicit TestSCFForUtilsPass() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_119TestSCFForUtilsPassC2ERKS0_ called 36216 returned 100% blocks executed 100%
    36216:   34:  TestSCFForUtilsPass(const TestSCFForUtilsPass &pass) : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
        -:   35:
        -:   36:  Option<bool> testReplaceWithNewYields{
        -:   37:      *this, "test-replace-with-new-yields",
        -:   38:      llvm::cl::desc("Test replacing a loop with a new loop that returns new "
        -:   39:                     "additional yeild values"),
        -:   40:      llvm::cl::init(false)};
        -:   41:
function _ZN12_GLOBAL__N_119TestSCFForUtilsPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   42:  void runOnOperation() override {
    #####:   43:    func::FuncOp func = getOperation();
call    0 never executed
    #####:   44:    SmallVector<scf::ForOp, 4> toErase;
branch  0 never executed
branch  1 never executed
        -:   45:
    #####:   46:    if (testReplaceWithNewYields) {
branch  0 never executed
branch  1 never executed
function _ZZN12_GLOBAL__N_119TestSCFForUtilsPass14runOnOperationEvENKUlN4mlir3scf5ForOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   47:      func.walk([&](scf::ForOp forOp) {
call    0 never executed
    #####:   48:        if (forOp.getNumResults() == 0)
branch  0 never executed
branch  1 never executed
    #####:   49:          return;
    #####:   50:        auto newInitValues = forOp.getInitArgs();
call    0 never executed
    #####:   51:        if (newInitValues.empty())
branch  0 never executed
branch  1 never executed
        -:   52:          return;
function _ZZZN12_GLOBAL__N_119TestSCFForUtilsPass14runOnOperationEvENKUlN4mlir3scf5ForOpEE_clES3_ENKUlRNS1_9OpBuilderENS1_8LocationEN4llvm8ArrayRefINS1_13BlockArgumentEEEE_clES6_S7_SB_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   53:        NewYieldValueFn fn = [&](OpBuilder &b, Location loc,
        -:   54:                                 ArrayRef<BlockArgument> newBBArgs) {
    #####:   55:          Block *block = newBBArgs.front().getOwner();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   56:          SmallVector<Value> newYieldValues;
call    0 never executed
    #####:   57:          for (auto yieldVal :
    #####:   58:               cast<scf::YieldOp>(block->getTerminator()).getResults()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   59:            newYieldValues.push_back(
call    0 never executed
    #####:   60:                b.create<arith::AddFOp>(loc, yieldVal, yieldVal));
call    0 never executed
call    1 never executed
        -:   61:          }
    #####:   62:          return newYieldValues;
    #####:   63:        };
call    0 never executed
    #####:   64:        OpBuilder b(forOp);
call    0 never executed
    #####:   65:        replaceLoopWithNewYields(b, forOp, newInitValues, fn);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   66:      });
        -:   67:    }
    #####:   68:  }
        -:   69:};
        -:   70:
    #####:   71:struct TestSCFIfUtilsPass
call    0 never executed
        -:   72:    : public PassWrapper<TestSCFIfUtilsPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_118TestSCFIfUtilsPass13resolveTypeIDEv called 129239 returned 100% blocks executed 100%
   129239:   73:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestSCFIfUtilsPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   74:
function _ZNK12_GLOBAL__N_118TestSCFIfUtilsPass11getArgumentEv called 128664 returned 100% blocks executed 100%
   128664:   75:  StringRef getArgument() const final { return "test-scf-if-utils"; }
function _ZNK12_GLOBAL__N_118TestSCFIfUtilsPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   76:  StringRef getDescription() const final { return "test scf.if utils"; }
   129239:   77:  explicit TestSCFIfUtilsPass() = default;
call    0 returned 100%
        -:   78:
function _ZN12_GLOBAL__N_118TestSCFIfUtilsPass14runOnOperationEv called 516 returned 100% blocks executed 100%
      516:   79:  void runOnOperation() override {
      516:   80:    int count = 0;
function _ZZN12_GLOBAL__N_118TestSCFIfUtilsPass14runOnOperationEvENKUlN4mlir3scf4IfOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     516*:   81:    getOperation().walk([&](scf::IfOp ifOp) {
call    0 returned 100%
    #####:   82:      auto strCount = std::to_string(count++);
call    0 never executed
    #####:   83:      func::FuncOp thenFn, elseFn;
call    0 never executed
    #####:   84:      OpBuilder b(ifOp);
call    0 never executed
    #####:   85:      IRRewriter rewriter(b);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   86:      if (failed(outlineIfOp(rewriter, ifOp, &thenFn,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   87:                             std::string("outlined_then") + strCount, &elseFn,
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   88:                             std::string("outlined_else") + strCount))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   89:        this->signalPassFailure();
call    0 never executed
    #####:   90:        return WalkResult::interrupt();
        -:   91:      }
    #####:   92:      return WalkResult::advance();
      516:   93:    });
call    0 returned 100%
      516:   94:  }
        -:   95:};
        -:   96:
        -:   97:static const StringLiteral kTestPipeliningLoopMarker =
        -:   98:    "__test_pipelining_loop__";
        -:   99:static const StringLiteral kTestPipeliningStageMarker =
        -:  100:    "__test_pipelining_stage__";
        -:  101:/// Marker to express the order in which operations should be after
        -:  102:/// pipelining.
        -:  103:static const StringLiteral kTestPipeliningOpOrderMarker =
        -:  104:    "__test_pipelining_op_order__";
        -:  105:
        -:  106:static const StringLiteral kTestPipeliningAnnotationPart =
        -:  107:    "__test_pipelining_part";
        -:  108:static const StringLiteral kTestPipeliningAnnotationIteration =
        -:  109:    "__test_pipelining_iteration";
        -:  110:
        -:  111:struct TestSCFPipeliningPass
        -:  112:    : public PassWrapper<TestSCFPipeliningPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_121TestSCFPipeliningPass13resolveTypeIDEv called 164292 returned 100% blocks executed 100%
   164292:  113:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestSCFPipeliningPass)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  114:
function _ZN12_GLOBAL__N_121TestSCFPipeliningPassC2Ev called 129228 returned 100% blocks executed 100%
   129228:  115:  TestSCFPipeliningPass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  116:  TestSCFPipeliningPass(const TestSCFPipeliningPass &) {}
function _ZNK12_GLOBAL__N_121TestSCFPipeliningPass11getArgumentEv called 128645 returned 100% blocks executed 100%
   128645:  117:  StringRef getArgument() const final { return "test-scf-pipelining"; }
function _ZNK12_GLOBAL__N_121TestSCFPipeliningPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:  118:  StringRef getDescription() const final { return "test scf.forOp pipelining"; }
        -:  119:
        -:  120:  Option<bool> annotatePipeline{
        -:  121:      *this, "annotate",
        -:  122:      llvm::cl::desc("Annote operations during loop pipelining transformation"),
        -:  123:      llvm::cl::init(false)};
        -:  124:
        -:  125:  Option<bool> noEpiloguePeeling{
        -:  126:      *this, "no-epilogue-peeling",
        -:  127:      llvm::cl::desc("Use predicates instead of peeling the epilogue."),
        -:  128:      llvm::cl::init(false)};
        -:  129:
        -:  130:  static void
function _ZN12_GLOBAL__N_121TestSCFPipeliningPass11getScheduleEN4mlir3scf5ForOpERSt6vectorISt4pairIPNS1_9OperationEjESaIS8_EE called 0 returned 0% blocks executed 0%
    #####:  131:  getSchedule(scf::ForOp forOp,
        -:  132:              std::vector<std::pair<Operation *, unsigned>> &schedule) {
    #####:  133:    if (!forOp->hasAttr(kTestPipeliningLoopMarker))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  134:      return;
        -:  135:
    #####:  136:    schedule.resize(forOp.getBody()->getOperations().size() - 1);
call    0 never executed
call    1 never executed
function _ZZN12_GLOBAL__N_121TestSCFPipeliningPass11getScheduleEN4mlir3scf5ForOpERSt6vectorISt4pairIPNS1_9OperationEjESaIS8_EEENKUlS7_E_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  137:    forOp.walk([&schedule](Operation *op) {
call    0 never executed
    #####:  138:      auto attrStage =
    #####:  139:          op->getAttrOfType<IntegerAttr>(kTestPipeliningStageMarker);
call    0 never executed
    #####:  140:      auto attrCycle =
    #####:  141:          op->getAttrOfType<IntegerAttr>(kTestPipeliningOpOrderMarker);
call    0 never executed
    #####:  142:      if (attrCycle && attrStage) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  143:        schedule[attrCycle.getInt()] =
call    0 never executed
    #####:  144:            std::make_pair(op, unsigned(attrStage.getInt()));
call    0 never executed
call    1 never executed
        -:  145:      }
    #####:  146:    });
        -:  147:  }
        -:  148:
        -:  149:  /// Helper to generate "predicated" version of `op`. For simplicity we just
        -:  150:  /// wrap the operation in a scf.ifOp operation.
function _ZN12_GLOBAL__N_121TestSCFPipeliningPass11predicateOpEPN4mlir9OperationENS1_5ValueERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  151:  static Operation *predicateOp(Operation *op, Value pred,
        -:  152:                                PatternRewriter &rewriter) {
    #####:  153:    Location loc = op->getLoc();
branch  0 never executed
branch  1 never executed
        -:  154:    auto ifOp =
    #####:  155:        rewriter.create<scf::IfOp>(loc, op->getResultTypes(), pred, true);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  156:    // True branch.
    #####:  157:    op->moveBefore(&ifOp.getThenRegion().front(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  158:                   ifOp.getThenRegion().front().begin());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  159:    rewriter.setInsertionPointAfter(op);
call    0 never executed
    #####:  160:    if (op->getNumResults() > 0)
branch  0 never executed
branch  1 never executed
    #####:  161:      rewriter.create<scf::YieldOp>(loc, op->getResults());
call    0 never executed
        -:  162:    // False branch.
    #####:  163:    rewriter.setInsertionPointToStart(&ifOp.getElseRegion().front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  164:    SmallVector<Value> elseYieldOperands;
branch  0 never executed
branch  1 never executed
    #####:  165:    elseYieldOperands.reserve(ifOp.getNumResults());
branch  0 never executed
branch  1 never executed
    #####:  166:    if (auto viewOp = dyn_cast<memref::SubViewOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  167:      // For sub-views, just clone the op.
        -:  168:      // NOTE: This is okay in the test because we use dynamic memref sizes, so
        -:  169:      // the verifier will not complain. Otherwise, we may create a logically
        -:  170:      // out-of-bounds view and a different technique should be used.
    #####:  171:      Operation *opClone = rewriter.clone(*op);
call    0 never executed
    #####:  172:      elseYieldOperands.append(opClone->result_begin(), opClone->result_end());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  173:    } else {
        -:  174:      // Default to assuming constant numeric values.
    #####:  175:      for (Type type : op->getResultTypes()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  176:        elseYieldOperands.push_back(rewriter.create<arith::ConstantOp>(
call    0 never executed
    #####:  177:            loc, rewriter.getZeroAttr(type)));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  178:      }
        -:  179:    }
    #####:  180:    if (op->getNumResults() > 0)
branch  0 never executed
branch  1 never executed
    #####:  181:      rewriter.create<scf::YieldOp>(loc, elseYieldOperands);
call    0 never executed
    #####:  182:    return ifOp.getOperation();
branch  0 never executed
branch  1 never executed
        -:  183:  }
        -:  184:
function _ZN12_GLOBAL__N_121TestSCFPipeliningPass8annotateEPN4mlir9OperationENS1_3scf16PipeliningOption13PipelinerPartEj called 0 returned 0% blocks executed 0%
    #####:  185:  static void annotate(Operation *op,
        -:  186:                       mlir::scf::PipeliningOption::PipelinerPart part,
        -:  187:                       unsigned iteration) {
    #####:  188:    OpBuilder b(op);
call    0 never executed
    #####:  189:    switch (part) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  190:    case mlir::scf::PipeliningOption::PipelinerPart::Prologue:
    #####:  191:      op->setAttr(kTestPipeliningAnnotationPart, b.getStringAttr("prologue"));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  192:      break;
    #####:  193:    case mlir::scf::PipeliningOption::PipelinerPart::Kernel:
    #####:  194:      op->setAttr(kTestPipeliningAnnotationPart, b.getStringAttr("kernel"));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  195:      break;
    #####:  196:    case mlir::scf::PipeliningOption::PipelinerPart::Epilogue:
    #####:  197:      op->setAttr(kTestPipeliningAnnotationPart, b.getStringAttr("epilogue"));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  198:      break;
        -:  199:    }
    #####:  200:    op->setAttr(kTestPipeliningAnnotationIteration,
call    0 never executed
    #####:  201:                b.getI32IntegerAttr(iteration));
call    0 never executed
    #####:  202:  }
        -:  203:
function _ZNK12_GLOBAL__N_121TestSCFPipeliningPass20getDependentDialectsERN4mlir15DialectRegistryE called 592 returned 100% blocks executed 100%
      592:  204:  void getDependentDialects(DialectRegistry &registry) const override {
      592:  205:    registry.insert<arith::ArithDialect, memref::MemRefDialect>();
call    0 returned 100%
      592:  206:  }
        -:  207:
function _ZN12_GLOBAL__N_121TestSCFPipeliningPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  208:  void runOnOperation() override {
    #####:  209:    RewritePatternSet patterns(&getContext());
call    0 never executed
call    1 never executed
    #####:  210:    mlir::scf::PipeliningOption options;
call    0 never executed
call    1 never executed
    #####:  211:    options.getScheduleFn = getSchedule;
call    0 never executed
    #####:  212:    if (annotatePipeline)
branch  0 never executed
branch  1 never executed
    #####:  213:      options.annotateFn = annotate;
call    0 never executed
    #####:  214:    if (noEpiloguePeeling) {
branch  0 never executed
branch  1 never executed
    #####:  215:      options.peelEpilogue = false;
    #####:  216:      options.predicateFn = predicateOp;
call    0 never executed
        -:  217:    }
    #####:  218:    scf::populateSCFLoopPipeliningPatterns(patterns, options);
call    0 never executed
    #####:  219:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
function _ZZN12_GLOBAL__N_121TestSCFPipeliningPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  220:    getOperation().walk([](Operation *op) {
call    0 never executed
call    1 never executed
call    2 never executed
        -:  221:      // Clean up the markers.
    #####:  222:      op->removeAttr(kTestPipeliningStageMarker);
call    0 never executed
    #####:  223:      op->removeAttr(kTestPipeliningOpOrderMarker);
call    0 never executed
    #####:  224:    });
    #####:  225:  }
        -:  226:};
        -:  227:} // namespace
        -:  228:
        -:  229:namespace mlir {
        -:  230:namespace test {
function _ZN4mlir4test24registerTestSCFUtilsPassEv called 128636 returned 100% blocks executed 100%
   128636:  231:void registerTestSCFUtilsPass() {
   128636:  232:  PassRegistration<TestSCFForUtilsPass>();
call    0 returned 100%
   128636:  233:  PassRegistration<TestSCFIfUtilsPass>();
call    0 returned 100%
   128636:  234:  PassRegistration<TestSCFPipeliningPass>();
call    0 returned 100%
   128636:  235:}
        -:  236:} // namespace test
        -:  237:} // namespace mlir
