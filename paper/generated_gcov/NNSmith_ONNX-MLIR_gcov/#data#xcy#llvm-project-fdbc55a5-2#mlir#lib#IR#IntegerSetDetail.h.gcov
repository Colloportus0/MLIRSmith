        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/IntegerSetDetail.h
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/MLIRContext.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/MLIRContext.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- IntegerSetDetail.h - MLIR IntegerSet storage details -----*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This holds implementation details of IntegerSet.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef INTEGERSETDETAIL_H_
        -:   14:#define INTEGERSETDETAIL_H_
        -:   15:
        -:   16:#include "mlir/IR/AffineExpr.h"
        -:   17:#include "mlir/Support/StorageUniquer.h"
        -:   18:#include "llvm/ADT/ArrayRef.h"
        -:   19:
        -:   20:namespace mlir {
        -:   21:namespace detail {
        -:   22:
    #####:   23:struct IntegerSetStorage : public StorageUniquer::BaseStorage {
call    0 never executed
        -:   24:  /// The hash key used for uniquing.
        -:   25:  using KeyTy =
        -:   26:      std::tuple<unsigned, unsigned, ArrayRef<AffineExpr>, ArrayRef<bool>>;
        -:   27:
        -:   28:  unsigned dimCount;
        -:   29:  unsigned symbolCount;
        -:   30:
        -:   31:  /// Array of affine constraints: a constraint is either an equality
        -:   32:  /// (affine_expr == 0) or an inequality (affine_expr >= 0).
        -:   33:  ArrayRef<AffineExpr> constraints;
        -:   34:
        -:   35:  // Bits to check whether a constraint is an equality or an inequality.
        -:   36:  ArrayRef<bool> eqFlags;
        -:   37:
function _ZNK4mlir6detail17IntegerSetStorageeqERKSt5tupleIJjjN4llvm8ArrayRefINS_10AffineExprEEENS4_IbEEEE called 0 returned 0% blocks executed 0%
    #####:   38:  bool operator==(const KeyTy &key) const {
    #####:   39:    return std::get<0>(key) == dimCount && std::get<1>(key) == symbolCount &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   40:           std::get<2>(key) == constraints && std::get<3>(key) == eqFlags;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:   41:  }
        -:   42:
        -:   43:  static IntegerSetStorage *
function _ZN4mlir6detail17IntegerSetStorage9constructERNS_14StorageUniquer16StorageAllocatorERKSt5tupleIJjjN4llvm8ArrayRefINS_10AffineExprEEENS7_IbEEEE called 0 returned 0% blocks executed 0%
    #####:   44:  construct(StorageUniquer::StorageAllocator &allocator, const KeyTy &key) {
    #####:   45:    auto *res =
call    0 never executed
    #####:   46:        new (allocator.allocate<IntegerSetStorage>()) IntegerSetStorage();
call    0 never executed
    #####:   47:    res->dimCount = std::get<0>(key);
call    0 never executed
    #####:   48:    res->symbolCount = std::get<1>(key);
    #####:   49:    res->constraints = allocator.copyInto(std::get<2>(key));
call    0 never executed
    #####:   50:    res->eqFlags = allocator.copyInto(std::get<3>(key));
call    0 never executed
    #####:   51:    return res;
        -:   52:  }
        -:   53:};
        -:   54:
        -:   55:} // namespace detail
        -:   56:} // namespace mlir
        -:   57:#endif // INTEGERSETDETAIL_H_
