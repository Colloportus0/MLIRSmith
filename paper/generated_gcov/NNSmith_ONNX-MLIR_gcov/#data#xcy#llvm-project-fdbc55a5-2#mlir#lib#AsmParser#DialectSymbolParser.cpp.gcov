        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/AsmParser/DialectSymbolParser.cpp
        -:    0:Graph:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/DialectSymbolParser.cpp.gcno
        -:    0:Data:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/DialectSymbolParser.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- DialectSymbolParser.cpp - MLIR Dialect Symbol Parser  --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the parser for the dialect symbols, such as extended
        -:   10:// attributes and types.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "AsmParserImpl.h"
        -:   15:#include "mlir/IR/BuiltinTypes.h"
        -:   16:#include "mlir/IR/Dialect.h"
        -:   17:#include "mlir/IR/DialectImplementation.h"
        -:   18:#include "llvm/Support/SourceMgr.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:using namespace mlir::detail;
        -:   22:using llvm::MemoryBuffer;
        -:   23:using llvm::SourceMgr;
        -:   24:
        -:   25:namespace {
        -:   26:/// This class provides the main implementation of the DialectAsmParser that
        -:   27:/// allows for dialects to parse attributes and types. This allows for dialect
        -:   28:/// hooking into the main MLIR parsing logic.
        -:   29:class CustomDialectAsmParser : public AsmParserImpl<DialectAsmParser> {
        -:   30:public:
54915255*:   31:  CustomDialectAsmParser(StringRef fullSpec, Parser &parser)
54915255*:   32:      : AsmParserImpl<DialectAsmParser>(parser.getToken().getLoc(), parser),
54915255*:   33:        fullSpec(fullSpec) {}
call    0 returned 100%
call    1 never executed
109830510*:   34:  ~CustomDialectAsmParser() override = default;
------------------
_ZN12_GLOBAL__N_122CustomDialectAsmParserD0Ev:
function _ZN12_GLOBAL__N_122CustomDialectAsmParserD0Ev called 0 returned 0% blocks executed 0%
    #####:   34:  ~CustomDialectAsmParser() override = default;
call    0 never executed
call    1 never executed
------------------
_ZN12_GLOBAL__N_122CustomDialectAsmParserD2Ev:
function _ZN12_GLOBAL__N_122CustomDialectAsmParserD2Ev called 0 returned 0% blocks executed 0%
    #####:   34:  ~CustomDialectAsmParser() override = default;
call    0 never executed
------------------
        -:   35:
        -:   36:  /// Returns the full specification of the symbol being parsed. This allows
        -:   37:  /// for using a separate parser if necessary.
function _ZNK12_GLOBAL__N_122CustomDialectAsmParser17getFullSymbolSpecEv called 0 returned 0% blocks executed 0%
    #####:   38:  StringRef getFullSymbolSpec() const override { return fullSpec; }
        -:   39:
        -:   40:private:
        -:   41:  /// The full symbol specification.
        -:   42:  StringRef fullSpec;
        -:   43:};
        -:   44:} // namespace
        -:   45:
        -:   46:///
        -:   47:///   pretty-dialect-sym-body ::= '<' pretty-dialect-sym-contents+ '>'
        -:   48:///   pretty-dialect-sym-contents ::= pretty-dialect-sym-body
        -:   49:///                                  | '(' pretty-dialect-sym-contents+ ')'
        -:   50:///                                  | '[' pretty-dialect-sym-contents+ ']'
        -:   51:///                                  | '{' pretty-dialect-sym-contents+ '}'
        -:   52:///                                  | '[^[<({>\])}\0]+'
        -:   53:///
function _ZN4mlir6detail6Parser22parseDialectSymbolBodyERN4llvm9StringRefERb called 54914743 returned 100% blocks executed 25%
 54914743:   54:ParseResult Parser::parseDialectSymbolBody(StringRef &body,
        -:   55:                                           bool &isCodeCompletion) {
        -:   56:  // Symbol bodies are a relatively unstructured format that contains a series
        -:   57:  // of properly nested punctuation, with anything else in the middle. Scan
        -:   58:  // ahead to find it and consume it if successful, otherwise emit an error.
 54914743:   59:  const char *curPtr = getTokenSpelling().data();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   60:
        -:   61:  // Scan over the nested punctuation, bailing out on error and consuming until
        -:   62:  // we find the end. We know that we're currently looking at the '<', so we can
        -:   63:  // go until we find the matching '>' character.
54914743*:   64:  assert(*curPtr == '<');
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
 54914743:   65:  SmallVector<char, 8> nestedPunctuation;
 54914743:   66:  const char *codeCompleteLoc = state.lex.getCodeCompleteLoc();
1540007503:   67:  do {
        -:   68:    // Handle code completions, which may appear in the middle of the symbol
        -:   69:    // body.
1540007503:   70:    if (curPtr == codeCompleteLoc) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   71:      isCodeCompletion = true;
    #####:   72:      nestedPunctuation.clear();
        -:   73:      break;
        -:   74:    }
        -:   75:
1540007503:   76:    char c = *curPtr++;
1540007503*:   77:    switch (c) {
branch  0 taken 0%
branch  1 taken 11%
branch  2 taken 0%
branch  3 taken 10%
branch  4 taken 0%
branch  5 taken 2%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 77%
    #####:   78:    case '\0':
        -:   79:      // This also handles the EOF case.
    #####:   80:      if (!nestedPunctuation.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   81:        return emitError() << "unbalanced '" << nestedPunctuation.back()
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:   82:                           << "' character in pretty dialect name";
call    0 never executed
call    1 never executed
        -:   83:      }
    #####:   84:      return emitError("unexpected nul or EOF in pretty dialect name");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
176713152:   85:    case '<':
176713152:   86:    case '[':
176713152:   87:    case '(':
176713152:   88:    case '{':
176713152:   89:      nestedPunctuation.push_back(c);
call    0 returned 100%
176713152:   90:      continue;
        -:   91:
    #####:   92:    case '-':
        -:   93:      // The sequence `->` is treated as special token.
    #####:   94:      if (*curPtr == '>')
branch  0 never executed
branch  1 never executed
    #####:   95:        ++curPtr;
    #####:   96:      continue;
        -:   97:
152963754:   98:    case '>':
152963754:   99:      if (nestedPunctuation.pop_back_val() != '<')
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  100:        return emitError("unbalanced '>' character in pretty dialect name");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  101:      break;
    #####:  102:    case ']':
    #####:  103:      if (nestedPunctuation.pop_back_val() != '[')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  104:        return emitError("unbalanced ']' character in pretty dialect name");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  105:      break;
 23749398:  106:    case ')':
 23749398:  107:      if (nestedPunctuation.pop_back_val() != '(')
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  108:        return emitError("unbalanced ')' character in pretty dialect name");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  109:      break;
    #####:  110:    case '}':
    #####:  111:      if (nestedPunctuation.pop_back_val() != '{')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:        return emitError("unbalanced '}' character in pretty dialect name");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  113:      break;
    #####:  114:    case '"': {
        -:  115:      // Dispatch to the lexer to lex past strings.
    #####:  116:      resetToken(curPtr - 1);
call    0 never executed
    #####:  117:      curPtr = state.curToken.getEndLoc().getPointer();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  118:
        -:  119:      // Handle code completions, which may appear in the middle of the symbol
        -:  120:      // body.
    #####:  121:      if (state.curToken.isCodeCompletion()) {
branch  0 never executed
branch  1 never executed
    #####:  122:        isCodeCompletion = true;
    #####:  123:        nestedPunctuation.clear();
        -:  124:        break;
        -:  125:      }
        -:  126:
        -:  127:      // Otherwise, ensure this token was actually a string.
    #####:  128:      if (state.curToken.isNot(Token::string))
branch  0 never executed
branch  1 never executed
    #####:  129:        return failure();
        -:  130:      break;
        -:  131:    }
        -:  132:
1186581199:  133:    default:
1186581199:  134:      continue;
        -:  135:    }
1540007503:  136:  } while (!nestedPunctuation.empty());
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        -:  137:
        -:  138:  // Ok, we succeeded, remember where we stopped, reset the lexer to know it is
        -:  139:  // consuming all this stuff, and return.
 54914743:  140:  resetToken(curPtr);
call    0 returned 100%
        -:  141:
 54914743:  142:  unsigned length = curPtr - body.begin();
 54914743:  143:  body = StringRef(body.data(), length);
 54914743:  144:  return success();
        -:  145:}
        -:  146:
        -:  147:/// Parse an extended dialect symbol.
        -:  148:template <typename Symbol, typename SymbolAliasMap, typename CreateFn>
54915255*:  149:static Symbol parseExtendedSymbol(Parser &p, SymbolAliasMap &aliases,
        -:  150:                                  CreateFn &&createSymbol) {
54915255*:  151:  Token tok = p.getToken();
        -:  152:
        -:  153:  // Handle code completion of the extended symbol.
54915255*:  154:  StringRef identifier = tok.getSpelling().drop_front();
54915255*:  155:  if (tok.isCodeCompletion() && identifier.empty())
    #####:  156:    return p.codeCompleteDialectSymbol(aliases);
        -:  157:
        -:  158:  // Parse the dialect namespace.
54915255*:  159:  SMLoc loc = p.getToken().getLoc();
54915255*:  160:  p.consumeToken();
        -:  161:
        -:  162:  // Check to see if this is a pretty name.
54915255*:  163:  auto [dialectName, symbolData] = identifier.split('.');
54915255*:  164:  bool isPrettyName = !symbolData.empty() || identifier.back() == '.';
        -:  165:
        -:  166:  // Check to see if the symbol has trailing data, i.e. has an immediately
        -:  167:  // following '<'.
54915255*:  168:  bool hasTrailingData =
54915255*:  169:      p.getToken().is(Token::less) &&
54914743*:  170:      identifier.bytes_end() == p.getTokenSpelling().bytes_begin();
        -:  171:
        -:  172:  // If there is no '<' token following this, and if the typename contains no
        -:  173:  // dot, then we are parsing a symbol alias.
54915255*:  174:  if (!hasTrailingData && !isPrettyName) {
        -:  175:    // Check for an alias for this type.
    #####:  176:    auto aliasIt = aliases.find(identifier);
    #####:  177:    if (aliasIt == aliases.end())
    #####:  178:      return (p.emitWrongTokenError("undefined symbol alias id '" + identifier +
        -:  179:                                    "'"),
    #####:  180:              nullptr);
    #####:  181:    return aliasIt->second;
        -:  182:  }
        -:  183:
        -:  184:  // If this isn't an alias, we are parsing a dialect-specific symbol. If the
        -:  185:  // name contains a dot, then this is the "pretty" form. If not, it is the
        -:  186:  // verbose form that looks like <...>.
54915255*:  187:  if (!isPrettyName) {
        -:  188:    // Point the symbol data to the end of the dialect name to start.
    #####:  189:    symbolData = StringRef(dialectName.end(), 0);
        -:  190:
        -:  191:    // Parse the body of the symbol.
    #####:  192:    bool isCodeCompletion = false;
    #####:  193:    if (p.parseDialectSymbolBody(symbolData, isCodeCompletion))
    #####:  194:      return nullptr;
    #####:  195:    symbolData = symbolData.drop_front();
        -:  196:
        -:  197:    // If the body contained a code completion it won't have the trailing `>`
        -:  198:    // token, so don't drop it.
    #####:  199:    if (!isCodeCompletion)
    #####:  200:      symbolData = symbolData.drop_back();
        -:  201:  } else {
54915255*:  202:    loc = SMLoc::getFromPointer(symbolData.data());
        -:  203:
        -:  204:    // If the dialect's symbol is followed immediately by a <, then lex the body
        -:  205:    // of it into prettyName.
109829998*:  206:    if (hasTrailingData && p.parseDialectSymbolBody(symbolData))
    #####:  207:      return nullptr;
        -:  208:  }
        -:  209:
54915255*:  210:  return createSymbol(dialectName, symbolData, loc);
        -:  211:}
------------------
_Z19parseExtendedSymbolIN4mlir4TypeEN4llvm9StringMapIS1_NS2_15MallocAllocatorEEEZNS0_6detail6Parser17parseExtendedTypeEvEUlNS2_9StringRefES8_NS2_5SMLocEE_ET_RS7_RT0_OT1_:
function _Z19parseExtendedSymbolIN4mlir4TypeEN4llvm9StringMapIS1_NS2_15MallocAllocatorEEEZNS0_6detail6Parser17parseExtendedTypeEvEUlNS2_9StringRefES8_NS2_5SMLocEE_ET_RS7_RT0_OT1_ called 54915255 returned 100% blocks executed 39%
 54915255:  149:static Symbol parseExtendedSymbol(Parser &p, SymbolAliasMap &aliases,
        -:  150:                                  CreateFn &&createSymbol) {
 54915255:  151:  Token tok = p.getToken();
call    0 returned 100%
        -:  152:
        -:  153:  // Handle code completion of the extended symbol.
 54915255:  154:  StringRef identifier = tok.getSpelling().drop_front();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
54915255*:  155:  if (tok.isCodeCompletion() && identifier.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  156:    return p.codeCompleteDialectSymbol(aliases);
call    0 never executed
        -:  157:
        -:  158:  // Parse the dialect namespace.
 54915255:  159:  SMLoc loc = p.getToken().getLoc();
call    0 returned 100%
 54915255:  160:  p.consumeToken();
call    0 returned 100%
call    1 returned 100%
        -:  161:
        -:  162:  // Check to see if this is a pretty name.
 54915255:  163:  auto [dialectName, symbolData] = identifier.split('.');
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
54915255*:  164:  bool isPrettyName = !symbolData.empty() || identifier.back() == '.';
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  165:
        -:  166:  // Check to see if the symbol has trailing data, i.e. has an immediately
        -:  167:  // following '<'.
 54915255:  168:  bool hasTrailingData =
 54915255:  169:      p.getToken().is(Token::less) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
 54914743:  170:      identifier.bytes_end() == p.getTokenSpelling().bytes_begin();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  171:
        -:  172:  // If there is no '<' token following this, and if the typename contains no
        -:  173:  // dot, then we are parsing a symbol alias.
 54915255:  174:  if (!hasTrailingData && !isPrettyName) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  175:    // Check for an alias for this type.
    #####:  176:    auto aliasIt = aliases.find(identifier);
call    0 never executed
    #####:  177:    if (aliasIt == aliases.end())
branch  0 never executed
branch  1 never executed
    #####:  178:      return (p.emitWrongTokenError("undefined symbol alias id '" + identifier +
call    0 never executed
call    1 never executed
call    2 never executed
        -:  179:                                    "'"),
    #####:  180:              nullptr);
call    0 never executed
call    1 never executed
    #####:  181:    return aliasIt->second;
        -:  182:  }
        -:  183:
        -:  184:  // If this isn't an alias, we are parsing a dialect-specific symbol. If the
        -:  185:  // name contains a dot, then this is the "pretty" form. If not, it is the
        -:  186:  // verbose form that looks like <...>.
 54915255:  187:  if (!isPrettyName) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  188:    // Point the symbol data to the end of the dialect name to start.
    #####:  189:    symbolData = StringRef(dialectName.end(), 0);
call    0 never executed
        -:  190:
        -:  191:    // Parse the body of the symbol.
    #####:  192:    bool isCodeCompletion = false;
    #####:  193:    if (p.parseDialectSymbolBody(symbolData, isCodeCompletion))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  194:      return nullptr;
    #####:  195:    symbolData = symbolData.drop_front();
call    0 never executed
        -:  196:
        -:  197:    // If the body contained a code completion it won't have the trailing `>`
        -:  198:    // token, so don't drop it.
    #####:  199:    if (!isCodeCompletion)
branch  0 never executed
branch  1 never executed
    #####:  200:      symbolData = symbolData.drop_back();
call    0 never executed
        -:  201:  } else {
 54915255:  202:    loc = SMLoc::getFromPointer(symbolData.data());
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:  203:
        -:  204:    // If the dialect's symbol is followed immediately by a <, then lex the body
        -:  205:    // of it into prettyName.
109829998:  206:    if (hasTrailingData && p.parseDialectSymbolBody(symbolData))
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  207:      return nullptr;
        -:  208:  }
        -:  209:
 54915255:  210:  return createSymbol(dialectName, symbolData, loc);
call    0 returned 100%
        -:  211:}
------------------
_Z19parseExtendedSymbolIN4mlir9AttributeEN4llvm9StringMapIS1_NS2_15MallocAllocatorEEEZNS0_6detail6Parser17parseExtendedAttrENS0_4TypeEEUlNS2_9StringRefES9_NS2_5SMLocEE_ET_RS7_RT0_OT1_:
function _Z19parseExtendedSymbolIN4mlir9AttributeEN4llvm9StringMapIS1_NS2_15MallocAllocatorEEEZNS0_6detail6Parser17parseExtendedAttrENS0_4TypeEEUlNS2_9StringRefES9_NS2_5SMLocEE_ET_RS7_RT0_OT1_ called 0 returned 0% blocks executed 0%
    #####:  149:static Symbol parseExtendedSymbol(Parser &p, SymbolAliasMap &aliases,
        -:  150:                                  CreateFn &&createSymbol) {
    #####:  151:  Token tok = p.getToken();
call    0 never executed
        -:  152:
        -:  153:  // Handle code completion of the extended symbol.
    #####:  154:  StringRef identifier = tok.getSpelling().drop_front();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  155:  if (tok.isCodeCompletion() && identifier.empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  156:    return p.codeCompleteDialectSymbol(aliases);
call    0 never executed
        -:  157:
        -:  158:  // Parse the dialect namespace.
    #####:  159:  SMLoc loc = p.getToken().getLoc();
call    0 never executed
    #####:  160:  p.consumeToken();
call    0 never executed
call    1 never executed
        -:  161:
        -:  162:  // Check to see if this is a pretty name.
    #####:  163:  auto [dialectName, symbolData] = identifier.split('.');
branch  0 never executed
branch  1 never executed
    #####:  164:  bool isPrettyName = !symbolData.empty() || identifier.back() == '.';
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  165:
        -:  166:  // Check to see if the symbol has trailing data, i.e. has an immediately
        -:  167:  // following '<'.
    #####:  168:  bool hasTrailingData =
    #####:  169:      p.getToken().is(Token::less) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  170:      identifier.bytes_end() == p.getTokenSpelling().bytes_begin();
branch  0 never executed
branch  1 never executed
        -:  171:
        -:  172:  // If there is no '<' token following this, and if the typename contains no
        -:  173:  // dot, then we are parsing a symbol alias.
    #####:  174:  if (!hasTrailingData && !isPrettyName) {
branch  0 never executed
branch  1 never executed
        -:  175:    // Check for an alias for this type.
    #####:  176:    auto aliasIt = aliases.find(identifier);
call    0 never executed
    #####:  177:    if (aliasIt == aliases.end())
branch  0 never executed
branch  1 never executed
    #####:  178:      return (p.emitWrongTokenError("undefined symbol alias id '" + identifier +
call    0 never executed
call    1 never executed
call    2 never executed
        -:  179:                                    "'"),
    #####:  180:              nullptr);
call    0 never executed
call    1 never executed
    #####:  181:    return aliasIt->second;
        -:  182:  }
        -:  183:
        -:  184:  // If this isn't an alias, we are parsing a dialect-specific symbol. If the
        -:  185:  // name contains a dot, then this is the "pretty" form. If not, it is the
        -:  186:  // verbose form that looks like <...>.
    #####:  187:  if (!isPrettyName) {
branch  0 never executed
branch  1 never executed
        -:  188:    // Point the symbol data to the end of the dialect name to start.
    #####:  189:    symbolData = StringRef(dialectName.end(), 0);
call    0 never executed
        -:  190:
        -:  191:    // Parse the body of the symbol.
    #####:  192:    bool isCodeCompletion = false;
    #####:  193:    if (p.parseDialectSymbolBody(symbolData, isCodeCompletion))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  194:      return nullptr;
    #####:  195:    symbolData = symbolData.drop_front();
call    0 never executed
        -:  196:
        -:  197:    // If the body contained a code completion it won't have the trailing `>`
        -:  198:    // token, so don't drop it.
    #####:  199:    if (!isCodeCompletion)
branch  0 never executed
branch  1 never executed
    #####:  200:      symbolData = symbolData.drop_back();
call    0 never executed
        -:  201:  } else {
    #####:  202:    loc = SMLoc::getFromPointer(symbolData.data());
branch  0 never executed
branch  1 never executed
        -:  203:
        -:  204:    // If the dialect's symbol is followed immediately by a <, then lex the body
        -:  205:    // of it into prettyName.
    #####:  206:    if (hasTrailingData && p.parseDialectSymbolBody(symbolData))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:      return nullptr;
        -:  208:  }
        -:  209:
    #####:  210:  return createSymbol(dialectName, symbolData, loc);
call    0 never executed
        -:  211:}
------------------
        -:  212:
        -:  213:/// Parse an extended attribute.
        -:  214:///
        -:  215:///   extended-attribute ::= (dialect-attribute | attribute-alias)
        -:  216:///   dialect-attribute  ::= `#` dialect-namespace `<` attr-data `>`
        -:  217:///                          (`:` type)?
        -:  218:///                        | `#` alias-name pretty-dialect-sym-body? (`:` type)?
        -:  219:///   attribute-alias    ::= `#` alias-name
        -:  220:///
function _ZN4mlir6detail6Parser17parseExtendedAttrENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  221:Attribute Parser::parseExtendedAttr(Type type) {
    #####:  222:  MLIRContext *ctx = getContext();
call    0 never executed
    #####:  223:  Attribute attr = parseExtendedSymbol<Attribute>(
    #####:  224:      *this, state.symbols.attributeAliasDefinitions,
function _ZZN4mlir6detail6Parser17parseExtendedAttrENS_4TypeEENKUlN4llvm9StringRefES4_NS3_5SMLocEE_clES4_S4_S5_ called 0 returned 0% blocks executed 0%
    #####:  225:      [&](StringRef dialectName, StringRef symbolData, SMLoc loc) -> Attribute {
        -:  226:        // Parse an optional trailing colon type.
    #####:  227:        Type attrType = type;
    #####:  228:        if (consumeIf(Token::colon) && !(attrType = parseType()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  229:          return Attribute();
        -:  230:
        -:  231:        // If we found a registered dialect, then ask it to parse the attribute.
    #####:  232:        if (Dialect *dialect =
    #####:  233:                builder.getContext()->getOrLoadDialect(dialectName)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  234:          // Temporarily reset the lexer to let the dialect parse the attribute.
    #####:  235:          const char *curLexerPos = getToken().getLoc().getPointer();
call    0 never executed
call    1 never executed
    #####:  236:          resetToken(symbolData.data());
call    0 never executed
        -:  237:
        -:  238:          // Parse the attribute.
    #####:  239:          CustomDialectAsmParser customParser(symbolData, *this);
call    0 never executed
    #####:  240:          Attribute attr = dialect->parseAttribute(customParser, attrType);
call    0 never executed
    #####:  241:          resetToken(curLexerPos);
call    0 never executed
    #####:  242:          return attr;
call    0 never executed
        -:  243:        }
        -:  244:
        -:  245:        // Otherwise, form a new opaque attribute.
    #####:  246:        return OpaqueAttr::getChecked(
    #####:  247:            [&] { return emitError(loc); }, StringAttr::get(ctx, dialectName),
call    0 never executed
call    1 never executed
    #####:  248:            symbolData, attrType ? attrType : NoneType::get(ctx));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  249:      });
call    0 never executed
        -:  250:
        -:  251:  // Ensure that the attribute has the same type as requested.
    #####:  252:  auto typedAttr = attr.dyn_cast_or_null<TypedAttr>();
branch  0 never executed
branch  1 never executed
    #####:  253:  if (type && typedAttr && typedAttr.getType() != type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  254:    emitError("attribute type different than expected: expected ")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  255:        << type << ", but got " << typedAttr.getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  256:    return nullptr;
        -:  257:  }
    #####:  258:  return attr;
        -:  259:}
        -:  260:
        -:  261:/// Parse an extended type.
        -:  262:///
        -:  263:///   extended-type ::= (dialect-type | type-alias)
        -:  264:///   dialect-type  ::= `!` dialect-namespace `<` `"` type-data `"` `>`
        -:  265:///   dialect-type  ::= `!` alias-name pretty-dialect-attribute-body?
        -:  266:///   type-alias    ::= `!` alias-name
        -:  267:///
function _ZN4mlir6detail6Parser17parseExtendedTypeEv called 54915255 returned 100% blocks executed 100%
 54915255:  268:Type Parser::parseExtendedType() {
 54915255:  269:  MLIRContext *ctx = getContext();
call    0 returned 100%
 54915255:  270:  return parseExtendedSymbol<Type>(
 54915255:  271:      *this, state.symbols.typeAliasDefinitions,
function _ZZN4mlir6detail6Parser17parseExtendedTypeEvENKUlN4llvm9StringRefES3_NS2_5SMLocEE_clES3_S3_S4_.isra.0 called 54915255 returned 100% blocks executed 73%
 54915255:  272:      [&](StringRef dialectName, StringRef symbolData, SMLoc loc) -> Type {
        -:  273:        // If we found a registered dialect, then ask it to parse the type.
54915255*:  274:        if (auto *dialect = ctx->getOrLoadDialect(dialectName)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  275:          // Temporarily reset the lexer to let the dialect parse the type.
54915255*:  276:          const char *curLexerPos = getToken().getLoc().getPointer();
call    0 returned 100%
call    1 returned 100%
 54915255:  277:          resetToken(symbolData.data());
call    0 returned 100%
        -:  278:
        -:  279:          // Parse the type.
109830510:  280:          CustomDialectAsmParser customParser(symbolData, *this);
call    0 returned 100%
 54915255:  281:          Type type = dialect->parseType(customParser);
call    0 returned 100%
 54915255:  282:          resetToken(curLexerPos);
call    0 returned 100%
 54915255:  283:          return type;
call    0 returned 100%
        -:  284:        }
        -:  285:
        -:  286:        // Otherwise, form a new opaque type.
    #####:  287:        return OpaqueType::getChecked([&] { return emitError(loc); },
call    0 never executed
call    1 never executed
        -:  288:                                      StringAttr::get(ctx, dialectName),
    #####:  289:                                      symbolData);
call    0 never executed
call    1 never executed
call    2 never executed
 54915255:  290:      });
call    0 returned 100%
        -:  291:}
        -:  292:
        -:  293://===----------------------------------------------------------------------===//
        -:  294:// mlir::parseAttribute/parseType
        -:  295://===----------------------------------------------------------------------===//
        -:  296:
        -:  297:/// Parses a symbol, of type 'T', and returns it if parsing was successful. If
        -:  298:/// parsing failed, nullptr is returned. The number of bytes read from the input
        -:  299:/// string is returned in 'numRead'.
        -:  300:template <typename T, typename ParserFn>
function _Z11parseSymbolIN4mlir9AttributeEZNS0_14parseAttributeEN4llvm9StringRefENS0_4TypeERmEUlRNS0_6detail6ParserEE_ET_S3_PNS0_11MLIRContextES5_OT0_ called 0 returned 0% blocks executed 0%
    #####:  301:static T parseSymbol(StringRef inputStr, MLIRContext *context, size_t &numRead,
call    0 never executed
        -:  302:                     ParserFn &&parserFn) {
    #####:  303:  SourceMgr sourceMgr;
call    0 never executed
    #####:  304:  auto memBuffer = MemoryBuffer::getMemBuffer(
call    0 never executed
call    1 never executed
        -:  305:      inputStr, /*BufferName=*/"<mlir_parser_buffer>",
        -:  306:      /*RequiresNullTerminator=*/false);
    #####:  307:  sourceMgr.AddNewSourceBuffer(std::move(memBuffer), SMLoc());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  308:  SymbolState aliasState;
branch  0 never executed
branch  1 never executed
    #####:  309:  ParserConfig config(context);
call    0 never executed
call    1 never executed
    #####:  310:  ParserState state(sourceMgr, config, aliasState, /*asmState=*/nullptr,
call    0 never executed
call    1 never executed
call    2 never executed
        -:  311:                    /*codeCompleteContext=*/nullptr);
    #####:  312:  Parser parser(state);
        -:  313:
    #####:  314:  SourceMgrDiagnosticHandler handler(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  315:      const_cast<llvm::SourceMgr &>(parser.getSourceMgr()),
call    0 never executed
        -:  316:      parser.getContext());
    #####:  317:  Token startTok = parser.getToken();
call    0 never executed
    #####:  318:  T symbol = parserFn(parser);
    #####:  319:  if (!symbol)
branch  0 never executed
branch  1 never executed
    #####:  320:    return T();
        -:  321:
        -:  322:  // Provide the number of bytes that were read.
    #####:  323:  Token endTok = parser.getToken();
call    0 never executed
    #####:  324:  numRead = static_cast<size_t>(endTok.getLoc().getPointer() -
call    0 never executed
call    1 never executed
    #####:  325:                                startTok.getLoc().getPointer());
call    0 never executed
    #####:  326:  return symbol;
        -:  327:}
        -:  328:
function _ZN4mlir14parseAttributeEN4llvm9StringRefEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  329:Attribute mlir::parseAttribute(StringRef attrStr, MLIRContext *context) {
    #####:  330:  size_t numRead = 0;
    #####:  331:  return parseAttribute(attrStr, context, numRead);
        -:  332:}
function _ZN4mlir14parseAttributeEN4llvm9StringRefENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  333:Attribute mlir::parseAttribute(StringRef attrStr, Type type) {
    #####:  334:  size_t numRead = 0;
    #####:  335:  return parseAttribute(attrStr, type, numRead);
call    0 never executed
        -:  336:}
        -:  337:
function _ZN4mlir14parseAttributeEN4llvm9StringRefEPNS_11MLIRContextERm called 0 returned 0% blocks executed 0%
    #####:  338:Attribute mlir::parseAttribute(StringRef attrStr, MLIRContext *context,
        -:  339:                               size_t &numRead) {
    #####:  340:  return parseSymbol<Attribute>(attrStr, context, numRead, [](Parser &parser) {
        -:  341:    return parser.parseAttribute();
    #####:  342:  });
call    0 never executed
call    1 never executed
        -:  343:}
function _ZN4mlir14parseAttributeEN4llvm9StringRefENS_4TypeERm called 0 returned 0% blocks executed 0%
    #####:  344:Attribute mlir::parseAttribute(StringRef attrStr, Type type, size_t &numRead) {
    #####:  345:  return parseSymbol<Attribute>(
        -:  346:      attrStr, type.getContext(), numRead,
    #####:  347:      [type](Parser &parser) { return parser.parseAttribute(type); });
call    0 never executed
call    1 never executed
call    2 never executed
        -:  348:}
        -:  349:
function _ZN4mlir9parseTypeEN4llvm9StringRefEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  350:Type mlir::parseType(StringRef typeStr, MLIRContext *context) {
    #####:  351:  size_t numRead = 0;
    #####:  352:  return parseType(typeStr, context, numRead);
        -:  353:}
        -:  354:
function _ZN4mlir9parseTypeEN4llvm9StringRefEPNS_11MLIRContextERm called 0 returned 0% blocks executed 0%
    #####:  355:Type mlir::parseType(StringRef typeStr, MLIRContext *context, size_t &numRead) {
    #####:  356:  return parseSymbol<Type>(typeStr, context, numRead,
    #####:  357:                           [](Parser &parser) { return parser.parseType(); });
call    0 never executed
call    1 never executed
        -:  358:}
