        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Arith/IR/ArithDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/IR/CMakeFiles/obj.MLIRArithDialect.dir/ArithDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/IR/CMakeFiles/obj.MLIRArithDialect.dir/ArithDialect.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- ArithDialect.cpp - MLIR Arith dialect implementation -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/DialectImplementation.h"
        -:   12:#include "mlir/Transforms/InliningUtils.h"
        -:   13:#include "llvm/ADT/TypeSwitch.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::arith;
        -:   17:
        -:   18:#include "mlir/Dialect/Arith/IR/ArithOpsDialect.cpp.inc"
        -:   19:#include "mlir/Dialect/Arith/IR/ArithOpsInterfaces.cpp.inc"
        -:   20:#define GET_ATTRDEF_CLASSES
        -:   21:#include "mlir/Dialect/Arith/IR/ArithOpsAttributes.cpp.inc"
        -:   22:
        -:   23:namespace {
        -:   24:/// This class defines the interface for handling inlining for arithmetic
        -:   25:/// dialect operations.
        -:   26:struct ArithInlinerInterface : public DialectInlinerInterface {
        -:   27:  using DialectInlinerInterface::DialectInlinerInterface;
        -:   28:
        -:   29:  /// All arithmetic dialect ops can be inlined.
function _ZNK12_GLOBAL__N_121ArithInlinerInterface15isLegalToInlineEPN4mlir9OperationEPNS1_6RegionEbRNS1_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   30:  bool isLegalToInline(Operation *, Region *, bool,
        -:   31:                       BlockAndValueMapping &) const final {
    #####:   32:    return true;
        -:   33:  }
        -:   34:};
        -:   35:} // namespace
        -:   36:
function _ZN4mlir5arith12ArithDialect10initializeEv called 39697 returned 100% blocks executed 100%
    39697:   37:void arith::ArithDialect::initialize() {
    39697:   38:  addOperations<
        -:   39:#define GET_OP_LIST
        -:   40:#include "mlir/Dialect/Arith/IR/ArithOps.cpp.inc"
    39697:   41:      >();
call    0 returned 100%
    39697:   42:  addAttributes<
        -:   43:#define GET_ATTRDEF_LIST
        -:   44:#include "mlir/Dialect/Arith/IR/ArithOpsAttributes.cpp.inc"
    39697:   45:      >();
call    0 returned 100%
    39697:   46:  addInterfaces<ArithInlinerInterface>();
call    0 returned 100%
    39697:   47:}
        -:   48:
        -:   49:/// Materialize an integer or floating point constant.
function _ZN4mlir5arith12ArithDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   50:Operation *arith::ArithDialect::materializeConstant(OpBuilder &builder,
        -:   51:                                                    Attribute value, Type type,
        -:   52:                                                    Location loc) {
    #####:   53:  return builder.create<arith::ConstantOp>(loc, value, type);
call    0 never executed
        -:   54:}
