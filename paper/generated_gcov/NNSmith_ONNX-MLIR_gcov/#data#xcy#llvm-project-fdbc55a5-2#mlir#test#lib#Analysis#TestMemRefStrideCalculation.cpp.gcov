        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Analysis/TestMemRefStrideCalculation.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMemRefStrideCalculation.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMemRefStrideCalculation.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestMemRefStrideCalculation.cpp - Pass to test strides computation--===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   10:#include "mlir/IR/BuiltinTypes.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15:namespace {
  128636*:   16:struct TestMemRefStrideCalculation
call    0 never executed
call    1 returned 100%
        -:   17:    : public PassWrapper<TestMemRefStrideCalculation,
        -:   18:                         InterfacePass<SymbolOpInterface>> {
function _ZN12_GLOBAL__N_127TestMemRefStrideCalculation13resolveTypeIDEv called 128636 returned 100% blocks executed 100%
   128636:   19:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMemRefStrideCalculation)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   20:
function _ZNK12_GLOBAL__N_127TestMemRefStrideCalculation11getArgumentEv called 128636 returned 100% blocks executed 100%
   128636:   21:  StringRef getArgument() const final {
   128636:   22:    return "test-memref-stride-calculation";
        -:   23:  }
function _ZNK12_GLOBAL__N_127TestMemRefStrideCalculation14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   24:  StringRef getDescription() const final {
   128636:   25:    return "Test operation constant folding";
        -:   26:  }
        -:   27:  void runOnOperation() override;
        -:   28:};
        -:   29:} // namespace
        -:   30:
        -:   31:/// Traverse AllocOp and compute strides of each MemRefType independently.
function _ZN12_GLOBAL__N_127TestMemRefStrideCalculation14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   32:void TestMemRefStrideCalculation::runOnOperation() {
    #####:   33:  llvm::outs() << "Testing: " << getOperation().getName() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
function _ZZN12_GLOBAL__N_127TestMemRefStrideCalculation14runOnOperationEvENKUlN4mlir6memref7AllocOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   34:  getOperation().walk([&](memref::AllocOp allocOp) {
call    0 never executed
call    1 never executed
    #####:   35:    auto memrefType = allocOp.getResult().getType().cast<MemRefType>();
call    0 never executed
    #####:   36:    int64_t offset;
    #####:   37:    SmallVector<int64_t, 4> strides;
call    0 never executed
    #####:   38:    if (failed(getStridesAndOffset(memrefType, strides, offset))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:      llvm::outs() << "MemRefType " << memrefType << " cannot be converted to "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   40:                   << "strided form\n";
call    0 never executed
    #####:   41:      return;
branch  0 never executed
branch  1 never executed
        -:   42:    }
    #####:   43:    llvm::outs() << "MemRefType offset: ";
call    0 never executed
call    1 never executed
    #####:   44:    if (offset == MemRefType::getDynamicStrideOrOffset())
branch  0 never executed
branch  1 never executed
    #####:   45:      llvm::outs() << "?";
call    0 never executed
call    1 never executed
        -:   46:    else
    #####:   47:      llvm::outs() << offset;
call    0 never executed
call    1 never executed
    #####:   48:    llvm::outs() << " strides: ";
call    0 never executed
call    1 never executed
function _ZZZN12_GLOBAL__N_127TestMemRefStrideCalculation14runOnOperationEvENKUlN4mlir6memref7AllocOpEE_clES3_ENKUllE_clEl.isra.0 called 0 returned 0% blocks executed 0%
    #####:   49:    llvm::interleaveComma(strides, llvm::outs(), [&](int64_t v) {
call    0 never executed
call    1 never executed
    #####:   50:      if (v == MemRefType::getDynamicStrideOrOffset())
branch  0 never executed
branch  1 never executed
    #####:   51:        llvm::outs() << "?";
call    0 never executed
call    1 never executed
        -:   52:      else
    #####:   53:        llvm::outs() << v;
call    0 never executed
call    1 never executed
    #####:   54:    });
    #####:   55:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   56:  });
    #####:   57:  llvm::outs().flush();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:}
        -:   59:
        -:   60:namespace mlir {
        -:   61:namespace test {
function _ZN4mlir4test35registerTestMemRefStrideCalculationEv called 128636 returned 100% blocks executed 100%
   128636:   62:void registerTestMemRefStrideCalculation() {
   128636:   63:  PassRegistration<TestMemRefStrideCalculation>();
call    0 returned 100%
   128636:   64:}
        -:   65:} // namespace test
        -:   66:} // namespace mlir
