        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Utils/IndexingUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Utils/CMakeFiles/obj.MLIRDialectUtils.dir/IndexingUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Utils/CMakeFiles/obj.MLIRDialectUtils.dir/IndexingUtils.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- IndexingUtils.cpp - Helpers related to index computations ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Utils/IndexingUtils.h"
        -:   10:
        -:   11:#include "mlir/IR/AffineExpr.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/IR/BuiltinAttributes.h"
        -:   14:
function _ZN4mlir9linearizeEN4llvm8ArrayRefIlEES2_ called 0 returned 0% blocks executed 0%
    #####:   15:int64_t mlir::linearize(ArrayRef<int64_t> offsets, ArrayRef<int64_t> basis) {
    #####:   16:  assert(offsets.size() == basis.size());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   17:  int64_t linearIndex = 0;
    #####:   18:  for (unsigned idx = 0, e = basis.size(); idx < e; ++idx)
branch  0 never executed
branch  1 never executed
    #####:   19:    linearIndex += offsets[idx] * basis[idx];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   20:  return linearIndex;
        -:   21:}
        -:   22:
function _ZN4mlir11delinearizeEN4llvm8ArrayRefIlEEl called 0 returned 0% blocks executed 0%
    #####:   23:llvm::SmallVector<int64_t, 4> mlir::delinearize(ArrayRef<int64_t> sliceStrides,
        -:   24:                                                int64_t index) {
    #####:   25:  int64_t rank = sliceStrides.size();
call    0 never executed
    #####:   26:  SmallVector<int64_t, 4> vectorOffsets(rank);
call    0 never executed
    #####:   27:  for (int64_t r = 0; r < rank; ++r) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   28:    assert(sliceStrides[r] > 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   29:    vectorOffsets[r] = index / sliceStrides[r];
branch  0 never executed
branch  1 never executed
    #####:   30:    index %= sliceStrides[r];
        -:   31:  }
    #####:   32:  return vectorOffsets;
        -:   33:}
        -:   34:
function _ZN4mlir14getI64SubArrayENS_9ArrayAttrEjj called 0 returned 0% blocks executed 0%
    #####:   35:llvm::SmallVector<int64_t, 4> mlir::getI64SubArray(ArrayAttr arrayAttr,
        -:   36:                                                   unsigned dropFront,
        -:   37:                                                   unsigned dropBack) {
    #####:   38:  assert(arrayAttr.size() > dropFront + dropBack && "Out of bounds");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   39:  auto range = arrayAttr.getAsRange<IntegerAttr>();
call    0 never executed
    #####:   40:  SmallVector<int64_t, 4> res;
call    0 never executed
    #####:   41:  res.reserve(arrayAttr.size() - dropFront - dropBack);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:  for (auto it = range.begin() + dropFront, eit = range.end() - dropBack;
    #####:   43:       it != eit; ++it)
branch  0 never executed
branch  1 never executed
    #####:   44:    res.push_back((*it).getValue().getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   45:  return res;
        -:   46:}
        -:   47:
function _ZN4mlir19getLinearAffineExprEN4llvm8ArrayRefIlEERNS_7BuilderE called 0 returned 0% blocks executed 0%
    #####:   48:mlir::AffineExpr mlir::getLinearAffineExpr(ArrayRef<int64_t> basis,
        -:   49:                                           mlir::Builder &b) {
    #####:   50:  AffineExpr resultExpr = b.getAffineDimExpr(0);
call    0 never executed
    #####:   51:  resultExpr = resultExpr * basis[0];
branch  0 never executed
branch  1 never executed
    #####:   52:  for (unsigned i = 1; i < basis.size(); i++)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:    resultExpr = resultExpr + b.getAffineDimExpr(i) * basis[i];
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   54:  return resultExpr;
        -:   55:}
        -:   56:
        -:   57:llvm::SmallVector<mlir::AffineExpr, 4>
function _ZN4mlir25getDelinearizedAffineExprEN4llvm8ArrayRefIlEERNS_7BuilderE called 0 returned 0% blocks executed 0%
    #####:   58:mlir::getDelinearizedAffineExpr(mlir::ArrayRef<int64_t> strides, Builder &b) {
    #####:   59:  AffineExpr resultExpr = b.getAffineDimExpr(0);
call    0 never executed
    #####:   60:  int64_t rank = strides.size();
call    0 never executed
    #####:   61:  SmallVector<AffineExpr, 4> vectorOffsets(rank);
call    0 never executed
    #####:   62:  vectorOffsets[0] = resultExpr.floorDiv(strides[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   63:  resultExpr = resultExpr % strides[0];
call    0 never executed
    #####:   64:  for (unsigned i = 1; i < rank; i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:    vectorOffsets[i] = resultExpr.floorDiv(strides[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   66:    resultExpr = resultExpr % strides[i];
call    0 never executed
        -:   67:  }
    #####:   68:  return vectorOffsets;
        -:   69:}
