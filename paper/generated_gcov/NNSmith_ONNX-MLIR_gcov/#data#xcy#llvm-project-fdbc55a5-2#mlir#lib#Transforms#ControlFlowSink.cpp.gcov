        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/ControlFlowSink.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/ControlFlowSink.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/ControlFlowSink.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- ControlFlowSink.cpp - Code to perform control-flow sinking ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a basic control-flow sink pass. Control-flow sinking
        -:   10:// moves operations whose only uses are in conditionally-executed blocks in to
        -:   11:// those blocks so that they aren't executed on paths where their results are
        -:   12:// not needed.
        -:   13://
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#include "mlir/Transforms/Passes.h"
        -:   17:
        -:   18:#include "mlir/IR/Dominance.h"
        -:   19:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   20:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   21:#include "mlir/Transforms/ControlFlowSinkUtils.h"
        -:   22:#include "mlir/Transforms/SideEffectUtils.h"
        -:   23:
        -:   24:namespace mlir {
        -:   25:#define GEN_PASS_DEF_CONTROLFLOWSINK
        -:   26:#include "mlir/Transforms/Passes.h.inc"
        -:   27:} // namespace mlir
        -:   28:
        -:   29:using namespace mlir;
        -:   30:
        -:   31:namespace {
        -:   32:/// A control-flow sink pass.
  129290*:   33:struct ControlFlowSink : public impl::ControlFlowSinkBase<ControlFlowSink> {
call    0 never executed
call    1 returned 100%
        -:   34:  void runOnOperation() override;
        -:   35:};
        -:   36:} // end anonymous namespace
        -:   37:
function _ZN12_GLOBAL__N_115ControlFlowSink14runOnOperationEv called 556 returned 100% blocks executed 80%
      556:   38:void ControlFlowSink::runOnOperation() {
      556:   39:  auto &domInfo = getAnalysis<DominanceInfo>();
call    0 returned 100%
function _ZZN12_GLOBAL__N_115ControlFlowSink14runOnOperationEvENKUlN4mlir23RegionBranchOpInterfaceEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
     556*:   40:  getOperation()->walk([&](RegionBranchOpInterface branch) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    #####:   41:    SmallVector<Region *> regionsToSink;
call    0 never executed
        -:   42:    // Get the regions are that known to be executed at most once.
    #####:   43:    getSinglyExecutedRegionsToSink(branch, regionsToSink);
call    0 never executed
        -:   44:    // Sink side-effect free operations.
    #####:   45:    numSunk = controlFlowSink(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:        regionsToSink, domInfo,
call    0 never executed
    #####:   47:        [](Operation *op, Region *) { return isMemoryEffectFree(op); },
call    0 never executed
function _ZZZN12_GLOBAL__N_115ControlFlowSink14runOnOperationEvENKUlN4mlir23RegionBranchOpInterfaceEE_clES2_ENKUlPNS1_9OperationEPNS1_6RegionEE0_clES5_S7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   48:        [](Operation *op, Region *region) {
        -:   49:          // Move the operation to the beginning of the region's entry block.
        -:   50:          // This guarantees the preservation of SSA dominance of all of the
        -:   51:          // operation's uses are in the region.
    #####:   52:          op->moveBefore(&region->front(), region->front().begin());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   53:        });
call    0 never executed
    #####:   54:  });
      556:   55:}
        -:   56:
function _ZN4mlir25createControlFlowSinkPassEv called 129290 returned 100% blocks executed 100%
   129290:   57:std::unique_ptr<Pass> mlir::createControlFlowSinkPass() {
   129290:   58:  return std::make_unique<ControlFlowSink>();
call    0 returned 100%
        -:   59:}
