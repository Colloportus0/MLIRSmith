        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp
        -:    0:Graph:../tools/mlir/lib/Tools/mlir-opt/CMakeFiles/obj.MLIROptLib.dir/MlirOptMain.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Tools/mlir-opt/CMakeFiles/obj.MLIROptLib.dir/MlirOptMain.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- MlirOptMain.cpp - MLIR Optimizer Driver ----------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This is a utility that runs an optimization pass and prints the result back
        -:   10:// out. It is designed to support unit testing.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Tools/mlir-opt/MlirOptMain.h"
        -:   15:#include "mlir/Bytecode/BytecodeWriter.h"
        -:   16:#include "mlir/IR/AsmState.h"
        -:   17:#include "mlir/IR/Attributes.h"
        -:   18:#include "mlir/IR/BuiltinOps.h"
        -:   19:#include "mlir/IR/Diagnostics.h"
        -:   20:#include "mlir/IR/Dialect.h"
        -:   21:#include "mlir/IR/Location.h"
        -:   22:#include "mlir/IR/MLIRContext.h"
        -:   23:#include "mlir/Parser/Parser.h"
        -:   24:#include "mlir/Pass/Pass.h"
        -:   25:#include "mlir/Pass/PassManager.h"
        -:   26:#include "mlir/Support/DebugCounter.h"
        -:   27:#include "mlir/Support/FileUtilities.h"
        -:   28:#include "mlir/Support/Timing.h"
        -:   29:#include "mlir/Support/ToolUtilities.h"
        -:   30:#include "mlir/Tools/ParseUtilities.h"
        -:   31:#include "llvm/Support/CommandLine.h"
        -:   32:#include "llvm/Support/FileUtilities.h"
        -:   33:#include "llvm/Support/InitLLVM.h"
        -:   34:#include "llvm/Support/Regex.h"
        -:   35:#include "llvm/Support/SourceMgr.h"
        -:   36:#include "llvm/Support/StringSaver.h"
        -:   37:#include "llvm/Support/ThreadPool.h"
        -:   38:#include "llvm/Support/ToolOutputFile.h"
        -:   39:
        -:   40:using namespace mlir;
        -:   41:using namespace llvm;
        -:   42:
        -:   43:/// Perform the actions on the input file indicated by the command line flags
        -:   44:/// within the specified context.
        -:   45:///
        -:   46:/// This typically parses the main source file, runs zero or more optimization
        -:   47:/// passes, then prints the output.
        -:   48:///
function _ZL14performActionsRN4llvm11raw_ostreamEbbRNS_9SourceMgrEPN4mlir11MLIRContextENS_12function_refIFNS4_13LogicalResultERNS4_11PassManagerEEEEbb called 103693 returned 100% blocks executed 93%
   103693:   49:static LogicalResult performActions(raw_ostream &os, bool verifyDiagnostics,
        -:   50:                                    bool verifyPasses, SourceMgr &sourceMgr,
        -:   51:                                    MLIRContext *context,
        -:   52:                                    PassPipelineFn passManagerSetupFn,
        -:   53:                                    bool emitBytecode, bool implicitModule) {
   103693:   54:  DefaultTimingManager tm;
call    0 returned 100%
   103693:   55:  applyDefaultTimingManagerCLOptions(tm);
call    0 returned 100%
   207363:   56:  TimingScope timing = tm.getRootScope();
call    0 returned 100%
call    1 returned 100%
        -:   57:
        -:   58:  // Disable multi-threading when parsing the input file. This removes the
        -:   59:  // unnecessary/costly context synchronization when parsing.
   103693:   60:  bool wasThreadingEnabled = context->isMultithreadingEnabled();
call    0 returned 100%
   103693:   61:  context->disableMultithreading();
call    0 returned 100%
        -:   62:
        -:   63:  // Prepare the parser config, and attach any useful/necessary resource
        -:   64:  // handlers. Unhandled external resources are treated as passthrough, i.e.
        -:   65:  // they are not processed and will be emitted directly to the output
        -:   66:  // untouched.
   103670:   67:  PassReproducerOptions reproOptions;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   207363:   68:  FallbackAsmResourceMap fallbackResourceMap;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   207363:   69:  ParserConfig config(context, /*verifyAfterParse=*/true, &fallbackResourceMap);
call    0 returned 100%
call    1 returned 100%
   103693:   70:  reproOptions.attachResourceParser(config);
call    0 returned 100%
        -:   71:
        -:   72:  // Parse the input file and reset the context threading state.
   207363:   73:  TimingScope parserTiming = timing.nest("Parser");
call    0 returned 100%
call    1 returned 100%
   103693:   74:  OwningOpRef<Operation *> op =
   207363:   75:      parseSourceFileForTool(sourceMgr, config, implicitModule);
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
   103693:   76:  context->enableMultithreading(wasThreadingEnabled);
call    0 returned 100%
   103693:   77:  if (!op)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
   103670:   78:    return failure();
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
    98868:   79:  parserTiming.stop();
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   80:
        -:   81:  // Prepare the pass manager, applying command-line and reproducer options.
    98868:   82:  PassManager pm(context, OpPassManager::Nesting::Implicit,
    98868:   83:                 op.get()->getName().getStringRef());
call    0 returned 100%
call    1 returned 100%
    98868:   84:  pm.enableVerifier(verifyPasses);
call    0 returned 100%
    98868:   85:  applyPassManagerCLOptions(pm);
call    0 returned 100%
    98868:   86:  pm.enableTiming(timing);
call    0 returned 100%
    98868:   87:  if (failed(reproOptions.apply(pm)) || failed(passManagerSetupFn(pm)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:   88:    return failure();
        -:   89:
        -:   90:  // Run the pipeline.
    98868:   91:  if (failed(pm.run(*op)))
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
     7177:   92:    return failure();
        -:   93:
        -:   94:  // Print the output.
   190513:   95:  TimingScope outputTiming = timing.nest("Output");
call    0 returned 100%
call    1 returned 100%
    91668:   96:  if (emitBytecode) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1048:   97:    BytecodeWriterConfig writerConfig(fallbackResourceMap);
call    0 returned 100%
call    1 returned 100%
      524:   98:    writeBytecodeToFile(op.get(), os, writerConfig);
call    0 returned 100%
        -:   99:  } else {
    91144:  100:    AsmState asmState(op.get(), OpPrintingFlags(), /*locationMap=*/nullptr,
call    0 returned 100%
    91144:  101:                      &fallbackResourceMap);
call    0 returned 100%
    91144:  102:    op.get()->print(os, asmState);
call    0 returned 100%
   182288:  103:    os << '\n';
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  104:  }
    91668:  105:  return success();
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  106:}
        -:  107:
        -:  108:/// Parses the memory buffer.  If successfully, run a series of passes against
        -:  109:/// it and print the result.
        -:  110:static LogicalResult
function _ZL13processBufferRN4llvm11raw_ostreamESt10unique_ptrINS_12MemoryBufferESt14default_deleteIS3_EEbbbbbbNS_12function_refIFN4mlir13LogicalResultERNS8_11PassManagerEEEERNS8_15DialectRegistryEPNS_10ThreadPoolE called 103693 returned 100% blocks executed 89%
   103693:  111:processBuffer(raw_ostream &os, std::unique_ptr<MemoryBuffer> ownedBuffer,
        -:  112:              bool verifyDiagnostics, bool verifyPasses,
        -:  113:              bool allowUnregisteredDialects, bool preloadDialectsInContext,
        -:  114:              bool emitBytecode, bool implicitModule,
        -:  115:              PassPipelineFn passManagerSetupFn, DialectRegistry &registry,
        -:  116:              llvm::ThreadPool *threadPool) {
        -:  117:  // Tell sourceMgr about this buffer, which is what the parser will pick up.
   103693:  118:  SourceMgr sourceMgr;
call    0 returned 100%
   103693:  119:  sourceMgr.AddNewSourceBuffer(std::move(ownedBuffer), SMLoc());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  120:
        -:  121:  // Create a context just for the current buffer. Disable threading on creation
        -:  122:  // since we'll inject the thread-pool separately.
   207363:  123:  MLIRContext context(registry, MLIRContext::Threading::DISABLED);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   103693:  124:  if (threadPool)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   103011:  125:    context.setThreadPool(*threadPool);
call    0 returned 100%
        -:  126:
        -:  127:  // Parse the input file.
   103693:  128:  if (preloadDialectsInContext)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  129:    context.loadAllAvailableDialects();
call    0 never executed
   103693:  130:  context.allowUnregisteredDialects(allowUnregisteredDialects);
call    0 returned 100%
   103693:  131:  if (verifyDiagnostics)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      603:  132:    context.printOpOnDiagnostic(false);
call    0 returned 100%
   103693:  133:  context.getDebugActionManager().registerActionHandler<DebugCounter>();
call    0 returned 100%
call    1 returned 100%
        -:  134:
        -:  135:  // If we are in verify diagnostics mode then we have a lot of work to do,
        -:  136:  // otherwise just perform the actions without worrying about it.
   103693:  137:  if (!verifyDiagnostics) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   206157:  138:    SourceMgrDiagnosticHandler sourceMgrHandler(sourceMgr, &context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   103090:  139:    return performActions(os, verifyDiagnostics, verifyPasses, sourceMgr,
        -:  140:                          &context, passManagerSetupFn, emitBytecode,
   103090:  141:                          implicitModule);
call    0 returned 100%
        -:  142:  }
        -:  143:
     1206:  144:  SourceMgrDiagnosticVerifierHandler sourceMgrHandler(sourceMgr, &context);
call    0 returned 100%
call    1 returned 100%
        -:  145:
        -:  146:  // Do any processing requested by command line flags.  We don't care whether
        -:  147:  // these actions succeed or fail, we only care what diagnostics they produce
        -:  148:  // and whether they match our expectations.
      603:  149:  (void)performActions(os, verifyDiagnostics, verifyPasses, sourceMgr, &context,
      603:  150:                       passManagerSetupFn, emitBytecode, implicitModule);
call    0 returned 100%
        -:  151:
        -:  152:  // Verify the diagnostic handler to make sure that each of the diagnostics
        -:  153:  // matched.
      603:  154:  return sourceMgrHandler.verify();
call    0 returned 100%
        -:  155:}
        -:  156:
function _ZN4mlir11MlirOptMainERN4llvm11raw_ostreamESt10unique_ptrINS0_12MemoryBufferESt14default_deleteIS4_EENS0_12function_refIFNS_13LogicalResultERNS_11PassManagerEEEERNS_15DialectRegistryEbbbbbbb called 103693 returned 100% blocks executed 82%
   103693:  157:LogicalResult mlir::MlirOptMain(raw_ostream &outputStream,
        -:  158:                                std::unique_ptr<MemoryBuffer> buffer,
        -:  159:                                PassPipelineFn passManagerSetupFn,
        -:  160:                                DialectRegistry &registry, bool splitInputFile,
        -:  161:                                bool verifyDiagnostics, bool verifyPasses,
        -:  162:                                bool allowUnregisteredDialects,
        -:  163:                                bool preloadDialectsInContext,
        -:  164:                                bool emitBytecode, bool implicitModule) {
        -:  165:  // The split-input-file mode is a very specific mode that slices the file
        -:  166:  // up into small pieces and checks each independently.
        -:  167:  // We use an explicit threadpool to avoid creating and joining/destroying
        -:  168:  // threads for each of the split.
   103693:  169:  ThreadPool *threadPool = nullptr;
        -:  170:
        -:  171:  // Create a temporary context for the sake of checking if
        -:  172:  // --mlir-disable-threading was passed on the command line.
        -:  173:  // We use the thread-pool this context is creating, and avoid
        -:  174:  // creating any thread when disabled.
   103693:  175:  MLIRContext threadPoolCtx;
call    0 returned 100%
   103693:  176:  if (threadPoolCtx.isMultithreadingEnabled())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
   103011:  177:    threadPool = &threadPoolCtx.getThreadPool();
call    0 returned 100%
        -:  178:
function _ZZN4mlir11MlirOptMainERN4llvm11raw_ostreamESt10unique_ptrINS0_12MemoryBufferESt14default_deleteIS4_EENS0_12function_refIFNS_13LogicalResultERNS_11PassManagerEEEERNS_15DialectRegistryEbbbbbbbENKUlS7_S2_E_clES7_S2_ called 103693 returned 100% blocks executed 60%
   207386:  179:  auto chunkFn = [&](std::unique_ptr<MemoryBuffer> chunkBuffer,
        -:  180:                     raw_ostream &os) {
   103693:  181:    return processBuffer(os, std::move(chunkBuffer), verifyDiagnostics,
   103693:  182:                         verifyPasses, allowUnregisteredDialects,
   103693:  183:                         preloadDialectsInContext, emitBytecode, implicitModule,
   103693:  184:                         passManagerSetupFn, registry, threadPool);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   103693:  185:  };
   103693:  186:  return splitAndProcessBuffer(std::move(buffer), chunkFn, outputStream,
   103693:  187:                               splitInputFile, /*insertMarkerInOutput=*/true);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
        -:  188:}
        -:  189:
function _ZN4mlir11MlirOptMainERN4llvm11raw_ostreamESt10unique_ptrINS0_12MemoryBufferESt14default_deleteIS4_EERKNS_20PassPipelineCLParserERNS_15DialectRegistryEbbbbbbbb called 103693 returned 100% blocks executed 60%
   103693:  190:LogicalResult mlir::MlirOptMain(
        -:  191:    raw_ostream &outputStream, std::unique_ptr<MemoryBuffer> buffer,
        -:  192:    const PassPipelineCLParser &passPipeline, DialectRegistry &registry,
        -:  193:    bool splitInputFile, bool verifyDiagnostics, bool verifyPasses,
        -:  194:    bool allowUnregisteredDialects, bool preloadDialectsInContext,
        -:  195:    bool emitBytecode, bool implicitModule, bool dumpPassPipeline) {
function _ZZN4mlir11MlirOptMainERN4llvm11raw_ostreamESt10unique_ptrINS0_12MemoryBufferESt14default_deleteIS4_EERKNS_20PassPipelineCLParserERNS_15DialectRegistryEbbbbbbbbENKUlRNS_11PassManagerEE_clESE_.isra.0 called 98868 returned 100% blocks executed 90%
    98868:  196:  auto passManagerSetupFn = [&](PassManager &pm) {
function _ZZZN4mlir11MlirOptMainERN4llvm11raw_ostreamESt10unique_ptrINS0_12MemoryBufferESt14default_deleteIS4_EERKNS_20PassPipelineCLParserERNS_15DialectRegistryEbbbbbbbbENKUlRNS_11PassManagerEE_clESE_ENKUlRKNS0_5TwineEE_clESI_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  197:    auto errorHandler = [&](const Twine &msg) {
    #####:  198:      emitError(UnknownLoc::get(pm.getContext())) << msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  199:      return failure();
    98868:  200:    };
    98868:  201:    if (failed(passPipeline.addToPipeline(pm, errorHandler)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  202:      return failure();
    98868:  203:    if (dumpPassPipeline) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      667:  204:      pm.dump();
call    0 returned 100%
      667:  205:      llvm::errs() << "\n";
call    0 returned 100%
call    1 returned 100%
        -:  206:    }
    98868:  207:    return success();
   103693:  208:  };
   103693:  209:  return MlirOptMain(outputStream, std::move(buffer), passManagerSetupFn,
        -:  210:                     registry, splitInputFile, verifyDiagnostics, verifyPasses,
        -:  211:                     allowUnregisteredDialects, preloadDialectsInContext,
   103693:  212:                     emitBytecode, implicitModule);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  213:}
        -:  214:
function _ZN4mlir11MlirOptMainEiPPcN4llvm9StringRefERNS_15DialectRegistryEb called 128638 returned 81% blocks executed 89%
   128638:  215:LogicalResult mlir::MlirOptMain(int argc, char **argv, llvm::StringRef toolName,
        -:  216:                                DialectRegistry &registry,
        -:  217:                                bool preloadDialectsInContext) {
   128638:  218:  static cl::opt<std::string> inputFilename(
   128638:  219:      cl::Positional, cl::desc("<input file>"), cl::init("-"));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  220:
   128638:  221:  static cl::opt<std::string> outputFilename("o", cl::desc("Output filename"),
call    0 returned 100%
   128638:  222:                                             cl::value_desc("filename"),
call    0 returned 100%
   128638:  223:                                             cl::init("-"));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  224:
   128638:  225:  static cl::opt<bool> splitInputFile(
        -:  226:      "split-input-file",
   128638:  227:      cl::desc("Split the input file into pieces and process each "
call    0 returned 100%
        -:  228:               "chunk independently"),
   128638:  229:      cl::init(false));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  230:
   128638:  231:  static cl::opt<bool> verifyDiagnostics(
        -:  232:      "verify-diagnostics",
   128638:  233:      cl::desc("Check that emitted diagnostics match "
call    0 returned 100%
        -:  234:               "expected-* lines on the corresponding line"),
   128638:  235:      cl::init(false));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  236:
   128638:  237:  static cl::opt<bool> verifyPasses(
        -:  238:      "verify-each",
   128638:  239:      cl::desc("Run the verifier after each transformation pass"),
call    0 returned 100%
   128638:  240:      cl::init(true));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  241:
   128638:  242:  static cl::opt<bool> allowUnregisteredDialects(
        -:  243:      "allow-unregistered-dialect",
   128638:  244:      cl::desc("Allow operation with no registered dialects"), cl::init(false));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  245:
   128638:  246:  static cl::opt<bool> showDialects(
   128638:  247:      "show-dialects", cl::desc("Print the list of registered dialects"),
call    0 returned 100%
   128638:  248:      cl::init(false));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  249:
   128638:  250:  static cl::opt<bool> emitBytecode(
   128638:  251:      "emit-bytecode", cl::desc("Emit bytecode when generating output"),
call    0 returned 100%
   128638:  252:      cl::init(false));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  253:
   128638:  254:  static cl::opt<bool> noImplicitModule{
        -:  255:      "no-implicit-module",
   128638:  256:      cl::desc(
call    0 returned 100%
        -:  257:          "Disable implicit addition of a top-level module op during parsing"),
   128638:  258:      cl::init(false)};
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  259:
   128638:  260:  static cl::opt<bool> dumpPassPipeline{
   128638:  261:      "dump-pass-pipeline", cl::desc("Print the pipeline that will be run"),
call    0 returned 100%
   128638:  262:      cl::init(false)};
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  263:
   232954:  264:  InitLLVM y(argc, argv);
call    0 returned 100%
call    1 returned 100%
        -:  265:
        -:  266:  // Register any command line options.
   128638:  267:  registerAsmPrinterCLOptions();
call    0 returned 100%
   128638:  268:  registerMLIRContextCLOptions();
call    0 returned 100%
   128638:  269:  registerPassManagerCLOptions();
call    0 returned 100%
   128638:  270:  registerDefaultTimingManagerCLOptions();
call    0 returned 100%
   128638:  271:  DebugCounter::registerCLOptions();
call    0 returned 100%
   128638:  272:  PassPipelineCLParser passPipeline("", "Compiler passes to run");
call    0 returned 100%
        -:  273:
        -:  274:  // Build the list of dialects as a header for the --help message.
   232954:  275:  std::string helpHeader = (toolName + "\nAvailable Dialects: ").str();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   128638:  276:  {
   128638:  277:    llvm::raw_string_ostream os(helpHeader);
call    0 returned 100%
   128638:  278:    interleaveComma(registry.getDialectNames(), os,
call    0 returned 100%
call    1 returned 100%
        -:  279:                    [&](auto name) { os << name; });
        -:  280:  }
        -:  281:  // Parse pass names in main to ensure static initialization completed.
   128638:  282:  cl::ParseCommandLineOptions(argc, argv, helpHeader);
call    0 returned 81%
        -:  283:
   104339:  284:  if (showDialects) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      646:  285:    llvm::outs() << "Available Dialects:\n";
call    0 returned 100%
call    1 returned 100%
      646:  286:    interleave(
call    0 returned 100%
call    1 returned 100%
      646:  287:        registry.getDialectNames(), llvm::outs(),
call    0 returned 100%
        -:  288:        [](auto name) { llvm::outs() << name; }, "\n");
      646:  289:    return success();
        -:  290:  }
        -:  291:
        -:  292:  // Set up the input file.
   208009:  293:  std::string errorMessage;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   103693:  294:  auto file = openInputFile(inputFilename, &errorMessage);
call    0 returned 100%
   103693:  295:  if (!file) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  296:    llvm::errs() << errorMessage << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  297:    return failure();
        -:  298:  }
        -:  299:
   207363:  300:  auto output = openOutputFile(outputFilename, &errorMessage);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   103693:  301:  if (!output) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  302:    llvm::errs() << errorMessage << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  303:    return failure();
        -:  304:  }
        -:  305:
   103693:  306:  if (failed(MlirOptMain(output->os(), std::move(file), passPipeline, registry,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
        -:  307:                         splitInputFile, verifyDiagnostics, verifyPasses,
        -:  308:                         allowUnregisteredDialects, preloadDialectsInContext,
   103693:  309:                         emitBytecode, /*implicitModule=*/!noImplicitModule,
   103693:  310:                         dumpPassPipeline)))
call    0 returned 100%
    12025:  311:    return failure();
        -:  312:
        -:  313:  // Keep the output file if the invocation of MlirOptMain was successful.
    91645:  314:  output->keep();
   103670:  315:  return success();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  316:}
