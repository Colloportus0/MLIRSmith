        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/TosaToLinalg/TosaToLinalgPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TosaToLinalg/CMakeFiles/obj.MLIRTosaToLinalg.dir/TosaToLinalgPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TosaToLinalg/CMakeFiles/obj.MLIRTosaToLinalg.dir/TosaToLinalgPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TosaToLinalgPass.cpp - Lowering Tosa to Linalg Dialect -------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This transformation pass legalizes Tosa operations to the Linalg dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TosaToLinalg/TosaToLinalg.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   17:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   18:#include "mlir/Dialect/Math/IR/Math.h"
        -:   19:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   20:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   21:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   22:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   23:#include "mlir/Dialect/Tosa/Utils/QuantUtils.h"
        -:   24:#include "mlir/IR/PatternMatch.h"
        -:   25:#include "mlir/Pass/PassManager.h"
        -:   26:#include "mlir/Transforms/DialectConversion.h"
        -:   27:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   28:#include "mlir/Transforms/Passes.h"
        -:   29:
        -:   30:namespace mlir {
        -:   31:#define GEN_PASS_DEF_TOSATOLINALG
        -:   32:#include "mlir/Conversion/Passes.h.inc"
        -:   33:} // namespace mlir
        -:   34:
        -:   35:using namespace mlir;
        -:   36:
        -:   37:namespace {
  129241*:   38:struct TosaToLinalg : public impl::TosaToLinalgBase<TosaToLinalg> {
call    0 never executed
call    1 returned 100%
        -:   39:public:
function _ZNK12_GLOBAL__N_112TosaToLinalg20getDependentDialectsERN4mlir15DialectRegistryE called 605 returned 100% blocks executed 100%
      605:   40:  void getDependentDialects(DialectRegistry &registry) const override {
      605:   41:    registry
        -:   42:        .insert<arith::ArithDialect, linalg::LinalgDialect, math::MathDialect,
      605:   43:                tensor::TensorDialect, scf::SCFDialect>();
call    0 returned 100%
      605:   44:  }
        -:   45:
function _ZN12_GLOBAL__N_112TosaToLinalg14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   46:  void runOnOperation() override {
    #####:   47:    RewritePatternSet patterns(&getContext());
call    0 never executed
call    1 never executed
    #####:   48:    ConversionTarget target(getContext());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   49:    target.addLegalDialect<linalg::LinalgDialect, tensor::TensorDialect,
    #####:   50:                           scf::SCFDialect>();
call    0 never executed
    #####:   51:    target.addIllegalDialect<tosa::TosaDialect>();
call    0 never executed
        -:   52:
        -:   53:    // Not every TOSA op can be legalized to linalg.
    #####:   54:    target.addLegalOp<tosa::ApplyScaleOp>();
call    0 never executed
    #####:   55:    target.addLegalOp<tosa::IfOp>();
call    0 never executed
    #####:   56:    target.addLegalOp<tosa::ConstOp>();
call    0 never executed
    #####:   57:    target.addLegalOp<tosa::WhileOp>();
call    0 never executed
    #####:   58:    target.addLegalOp<tosa::SliceOp>();
call    0 never executed
        -:   59:
    #####:   60:    target.markUnknownOpDynamicallyLegal([](Operation *) { return true; });
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   61:
    #####:   62:    FunctionOpInterface func = getOperation();
call    0 never executed
    #####:   63:    mlir::tosa::populateTosaToLinalgConversionPatterns(&patterns);
call    0 never executed
    #####:   64:    if (failed(applyFullConversion(func, target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   65:      signalPassFailure();
call    0 never executed
    #####:   66:  }
        -:   67:};
        -:   68:} // namespace
        -:   69:
function _ZN4mlir4tosa18createTosaToLinalgEv called 129241 returned 100% blocks executed 100%
  129241*:   70:std::unique_ptr<Pass> mlir::tosa::createTosaToLinalg() {
  129241*:   71:  return std::make_unique<TosaToLinalg>();
call    0 never executed
call    1 returned 100%
        -:   72:}
        -:   73:
function _ZN4mlir4tosa21addTosaToLinalgPassesERNS_13OpPassManagerEb called 0 returned 0% blocks executed 0%
    #####:   74:void mlir::tosa::addTosaToLinalgPasses(OpPassManager &pm,
        -:   75:                                       bool disableTosaDecompositions) {
        -:   76:  // Optional decompositions are designed to benefit linalg.
    #####:   77:  if (!disableTosaDecompositions)
branch  0 never executed
branch  1 never executed
    #####:   78:    pm.addNestedPass<func::FuncOp>(tosa::createTosaOptionalDecompositions());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:  pm.addNestedPass<func::FuncOp>(createCanonicalizerPass());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   80:
    #####:   81:  pm.addNestedPass<func::FuncOp>(tosa::createTosaMakeBroadcastablePass());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   82:  pm.addNestedPass<func::FuncOp>(tosa::createTosaToLinalgNamed());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   83:  pm.addNestedPass<func::FuncOp>(createCanonicalizerPass());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   84:  // TODO: Remove pass that operates on const tensor and enable optionality
    #####:   85:  pm.addNestedPass<func::FuncOp>(tosa::createTosaLayerwiseConstantFoldPass());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   86:  pm.addNestedPass<func::FuncOp>(tosa::createTosaMakeBroadcastablePass());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:  pm.addNestedPass<func::FuncOp>(tosa::createTosaToLinalg());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   88:}
