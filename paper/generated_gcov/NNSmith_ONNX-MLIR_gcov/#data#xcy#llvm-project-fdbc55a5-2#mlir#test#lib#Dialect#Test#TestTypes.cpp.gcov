        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/Test/TestTypes.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Test/CMakeFiles/MLIRTestDialect.dir/TestTypes.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Test/CMakeFiles/MLIRTestDialect.dir/TestTypes.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestTypes.cpp - MLIR Test Dialect Types ------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains types defined by the TestDialect for testing various
        -:   10:// features of MLIR.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "TestTypes.h"
        -:   15:#include "TestDialect.h"
        -:   16:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/IR/DialectImplementation.h"
        -:   19:#include "mlir/IR/ExtensibleDialect.h"
        -:   20:#include "mlir/IR/Types.h"
        -:   21:#include "llvm/ADT/Hashing.h"
        -:   22:#include "llvm/ADT/SetVector.h"
        -:   23:#include "llvm/ADT/TypeSwitch.h"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace test;
        -:   27:
        -:   28:// Custom parser for SignednessSemantics.
        -:   29:static ParseResult
function _ZL15parseSignednessRN4mlir9AsmParserERN4test15TestIntegerType19SignednessSemanticsE called 0 returned 0% blocks executed 0%
    #####:   30:parseSignedness(AsmParser &parser,
        -:   31:                TestIntegerType::SignednessSemantics &result) {
    #####:   32:  StringRef signStr;
    #####:   33:  auto loc = parser.getCurrentLocation();
call    0 never executed
    #####:   34:  if (parser.parseKeyword(&signStr))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:    return failure();
    #####:   36:  if (signStr.equals_insensitive("u") || signStr.equals_insensitive("unsigned"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   37:    result = TestIntegerType::SignednessSemantics::Unsigned;
    #####:   38:  else if (signStr.equals_insensitive("s") ||
branch  0 never executed
branch  1 never executed
    #####:   39:           signStr.equals_insensitive("signed"))
branch  0 never executed
branch  1 never executed
    #####:   40:    result = TestIntegerType::SignednessSemantics::Signed;
    #####:   41:  else if (signStr.equals_insensitive("n") ||
branch  0 never executed
branch  1 never executed
    #####:   42:           signStr.equals_insensitive("none"))
branch  0 never executed
branch  1 never executed
    #####:   43:    result = TestIntegerType::SignednessSemantics::Signless;
        -:   44:  else
    #####:   45:    return parser.emitError(loc, "expected signed, unsigned, or none");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   46:  return success();
        -:   47:}
        -:   48:
        -:   49:// Custom printer for SignednessSemantics.
        -:   50:static void printSignedness(AsmPrinter &printer,
        -:   51:                            const TestIntegerType::SignednessSemantics &ss) {
        -:   52:  switch (ss) {
        -:   53:  case TestIntegerType::SignednessSemantics::Unsigned:
        -:   54:    printer << "unsigned";
        -:   55:    break;
        -:   56:  case TestIntegerType::SignednessSemantics::Signed:
        -:   57:    printer << "signed";
        -:   58:    break;
        -:   59:  case TestIntegerType::SignednessSemantics::Signless:
        -:   60:    printer << "none";
        -:   61:    break;
        -:   62:  }
        -:   63:}
        -:   64:
        -:   65:// The functions don't need to be in the header file, but need to be in the mlir
        -:   66:// namespace. Declare them here, then define them immediately below. Separating
        -:   67:// the declaration and definition adheres to the LLVM coding standards.
        -:   68:namespace test {
        -:   69:// FieldInfo is used as part of a parameter, so equality comparison is
        -:   70:// compulsory.
        -:   71:static bool operator==(const FieldInfo &a, const FieldInfo &b);
        -:   72:// FieldInfo is used as part of a parameter, so a hash will be computed.
        -:   73:static llvm::hash_code hash_value(const FieldInfo &fi); // NOLINT
        -:   74:} // namespace test
        -:   75:
        -:   76:// FieldInfo is used as part of a parameter, so equality comparison is
        -:   77:// compulsory.
function _ZN4testeqERKNS_9FieldInfoES2_ called 0 returned 0% blocks executed 0%
    #####:   78:static bool test::operator==(const FieldInfo &a, const FieldInfo &b) {
    #####:   79:  return a.name == b.name && a.type == b.type;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   80:}
        -:   81:
        -:   82:// FieldInfo is used as part of a parameter, so a hash will be computed.
    #####:   83:static llvm::hash_code test::hash_value(const FieldInfo &fi) { // NOLINT
    #####:   84:  return llvm::hash_combine(fi.name, fi.type);
call    0 never executed
call    1 never executed
        -:   85:}
        -:   86:
        -:   87://===----------------------------------------------------------------------===//
        -:   88:// TestCustomType
        -:   89://===----------------------------------------------------------------------===//
        -:   90:
    #####:   91:static LogicalResult parseCustomTypeA(AsmParser &parser,
        -:   92:                                      FailureOr<int> &aResult) {
    #####:   93:  aResult.emplace();
call    0 never executed
    #####:   94:  return parser.parseInteger(*aResult);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   95:}
        -:   96:
    #####:   97:static void printCustomTypeA(AsmPrinter &printer, int a) { printer << a; }
call    0 never executed
call    1 never executed
        -:   98:
function _ZL16parseCustomTypeBRN4mlir9AsmParserEiRNS_9FailureOrIN4llvm8OptionalIiEEEE called 0 returned 0% blocks executed 0%
    #####:   99:static LogicalResult parseCustomTypeB(AsmParser &parser, int a,
        -:  100:                                      FailureOr<Optional<int>> &bResult) {
    #####:  101:  if (a < 0)
branch  0 never executed
branch  1 never executed
    #####:  102:    return success();
    #####:  103:  for (int i : llvm::seq(0, a))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  104:    if (failed(parser.parseInteger(i)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  105:      return failure();
    #####:  106:  bResult.emplace(0);
call    0 never executed
    #####:  107:  return parser.parseInteger(**bResult);
call    0 never executed
        -:  108:}
        -:  109:
        -:  110:static void printCustomTypeB(AsmPrinter &printer, int a, Optional<int> b) {
        -:  111:  if (a < 0)
        -:  112:    return;
        -:  113:  printer << ' ';
        -:  114:  for (int i : llvm::seq(0, a))
        -:  115:    printer << i << ' ';
        -:  116:  printer << *b;
        -:  117:}
        -:  118:
function _ZL14parseFooStringRN4mlir9AsmParserERNS_9FailureOrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE called 0 returned 0% blocks executed 0%
    #####:  119:static LogicalResult parseFooString(AsmParser &parser,
        -:  120:                                    FailureOr<std::string> &foo) {
    #####:  121:  std::string result;
call    0 never executed
    #####:  122:  if (parser.parseString(&result))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  123:    return failure();
    #####:  124:  foo = std::move(result);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  125:  return success();
branch  0 never executed
branch  1 never executed
        -:  126:}
        -:  127:
function _ZL14printFooStringRN4mlir10AsmPrinterEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  128:static void printFooString(AsmPrinter &printer, StringRef foo) {
    #####:  129:  printer << '"' << foo << '"';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  130:}
        -:  131:
    #####:  132:static LogicalResult parseBarString(AsmParser &parser, StringRef foo) {
    #####:  133:  return parser.parseKeyword(foo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  134:}
        -:  135:
function _ZL14printBarStringRN4mlir10AsmPrinterEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  136:static void printBarString(AsmPrinter &printer, StringRef foo) {
    #####:  137:  printer << ' ' << foo;
call    0 never executed
call    1 never executed
    #####:  138:}
        -:  139://===----------------------------------------------------------------------===//
        -:  140:// Tablegen Generated Definitions
        -:  141://===----------------------------------------------------------------------===//
        -:  142:
        -:  143:#define GET_TYPEDEF_CLASSES
        -:  144:#include "TestTypeDefs.cpp.inc"
        -:  145:
        -:  146://===----------------------------------------------------------------------===//
        -:  147:// CompoundAType
        -:  148://===----------------------------------------------------------------------===//
        -:  149:
function _ZN4test13CompoundAType5parseERN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  150:Type CompoundAType::parse(AsmParser &parser) {
    #####:  151:  int widthOfSomething;
    #####:  152:  Type oneType;
    #####:  153:  SmallVector<int, 4> arrayOfInts;
call    0 never executed
    #####:  154:  if (parser.parseLess() || parser.parseInteger(widthOfSomething) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  155:      parser.parseComma() || parser.parseType(oneType) || parser.parseComma() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  156:      parser.parseLSquare())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  157:    return Type();
        -:  158:
    #####:  159:  int i;
    #####:  160:  while (!*parser.parseOptionalInteger(i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  161:    arrayOfInts.push_back(i);
call    0 never executed
    #####:  162:    if (parser.parseOptionalComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  163:      break;
        -:  164:  }
        -:  165:
    #####:  166:  if (parser.parseRSquare() || parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  167:    return Type();
        -:  168:
    #####:  169:  return get(parser.getContext(), widthOfSomething, oneType, arrayOfInts);
call    0 never executed
call    1 never executed
        -:  170:}
function _ZNK4test13CompoundAType5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  171:void CompoundAType::print(AsmPrinter &printer) const {
    #####:  172:  printer << "<" << getWidthOfSomething() << ", " << getOneType() << ", [";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  173:  auto intArray = getArrayOfInts();
call    0 never executed
    #####:  174:  llvm::interleaveComma(intArray, printer);
call    0 never executed
    #####:  175:  printer << "]>";
call    0 never executed
    #####:  176:}
        -:  177:
        -:  178://===----------------------------------------------------------------------===//
        -:  179:// TestIntegerType
        -:  180://===----------------------------------------------------------------------===//
        -:  181:
        -:  182:// Example type validity checker.
        -:  183:LogicalResult
function _ZN4test15TestIntegerType6verifyEN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEEjNS0_19SignednessSemanticsE called 0 returned 0% blocks executed 0%
    #####:  184:TestIntegerType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:  185:                        unsigned width,
        -:  186:                        TestIntegerType::SignednessSemantics ss) {
    #####:  187:  if (width > 8)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  188:    return failure();
    #####:  189:  return success();
branch  0 never executed
branch  1 never executed
        -:  190:}
        -:  191:
function _ZN4test15TestIntegerType5parseERN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  192:Type TestIntegerType::parse(AsmParser &parser) {
    #####:  193:  SignednessSemantics signedness;
    #####:  194:  int width;
    #####:  195:  if (parser.parseLess() || parseSignedness(parser, signedness) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  196:      parser.parseComma() || parser.parseInteger(width) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  197:      parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:    return Type();
    #####:  199:  Location loc = parser.getEncodedSourceLoc(parser.getNameLoc());
call    0 never executed
call    1 never executed
    #####:  200:  return getChecked(loc, loc.getContext(), width, signedness);
call    0 never executed
call    1 never executed
        -:  201:}
        -:  202:
function _ZNK4test15TestIntegerType5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  203:void TestIntegerType::print(AsmPrinter &p) const {
    #####:  204:  p << "<";
call    0 never executed
    #####:  205:  printSignedness(p, getSignedness());
call    0 never executed
    #####:  206:  p << ", " << getWidth() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  207:}
        -:  208:
        -:  209://===----------------------------------------------------------------------===//
        -:  210:// TestStructType
        -:  211://===----------------------------------------------------------------------===//
        -:  212:
function _ZN4test10StructType5parseERN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  213:Type StructType::parse(AsmParser &p) {
    #####:  214:  SmallVector<FieldInfo, 4> parameters;
call    0 never executed
    #####:  215:  if (p.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:    return Type();
    #####:  217:  while (succeeded(p.parseOptionalLBrace())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  218:    Type type;
    #####:  219:    StringRef name;
    #####:  220:    if (p.parseKeyword(&name) || p.parseComma() || p.parseType(type) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  221:        p.parseRBrace())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  222:      return Type();
    #####:  223:    parameters.push_back(FieldInfo{name, type});
call    0 never executed
    #####:  224:    if (p.parseOptionalComma())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  225:      break;
        -:  226:  }
    #####:  227:  if (p.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  228:    return Type();
    #####:  229:  return get(p.getContext(), parameters);
call    0 never executed
call    1 never executed
        -:  230:}
        -:  231:
function _ZNK4test10StructType5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  232:void StructType::print(AsmPrinter &p) const {
    #####:  233:  p << "<";
call    0 never executed
function _ZZNK4test10StructType5printERN4mlir10AsmPrinterEENKUlRKNS_9FieldInfoEE_clES6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  234:  llvm::interleaveComma(getFields(), p, [&](const FieldInfo &field) {
call    0 never executed
    #####:  235:    p << "{" << field.name << "," << field.type << "}";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  236:  });
    #####:  237:  p << ">";
call    0 never executed
    #####:  238:}
        -:  239:
        -:  240://===----------------------------------------------------------------------===//
        -:  241:// TestType
        -:  242://===----------------------------------------------------------------------===//
        -:  243:
function _ZNK4test8TestType10printTypeCEN4mlir8LocationE called 0 returned 0% blocks executed 0%
    #####:  244:void TestType::printTypeC(Location loc) const {
    #####:  245:  emitRemark(loc) << *this << " - TestC";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  246:}
        -:  247:
        -:  248://===----------------------------------------------------------------------===//
        -:  249:// TestTypeWithLayout
        -:  250://===----------------------------------------------------------------------===//
        -:  251:
function _ZN4test22TestTypeWithLayoutType5parseERN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  252:Type TestTypeWithLayoutType::parse(AsmParser &parser) {
    #####:  253:  unsigned val;
    #####:  254:  if (parser.parseLess() || parser.parseInteger(val) || parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  255:    return Type();
    #####:  256:  return TestTypeWithLayoutType::get(parser.getContext(), val);
call    0 never executed
call    1 never executed
        -:  257:}
        -:  258:
function _ZNK4test22TestTypeWithLayoutType5printERN4mlir10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  259:void TestTypeWithLayoutType::print(AsmPrinter &printer) const {
    #####:  260:  printer << "<" << getKey() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  261:}
        -:  262:
        -:  263:unsigned
function _ZNK4test22TestTypeWithLayoutType17getTypeSizeInBitsERKN4mlir10DataLayoutEN4llvm8ArrayRefINS1_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  264:TestTypeWithLayoutType::getTypeSizeInBits(const DataLayout &dataLayout,
        -:  265:                                          DataLayoutEntryListRef params) const {
    #####:  266:  return extractKind(params, "size");
call    0 never executed
call    1 never executed
call    2 never executed
        -:  267:}
        -:  268:
        -:  269:unsigned
function _ZNK4test22TestTypeWithLayoutType15getABIAlignmentERKN4mlir10DataLayoutEN4llvm8ArrayRefINS1_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  270:TestTypeWithLayoutType::getABIAlignment(const DataLayout &dataLayout,
        -:  271:                                        DataLayoutEntryListRef params) const {
    #####:  272:  return extractKind(params, "alignment");
call    0 never executed
call    1 never executed
        -:  273:}
        -:  274:
function _ZNK4test22TestTypeWithLayoutType21getPreferredAlignmentERKN4mlir10DataLayoutEN4llvm8ArrayRefINS1_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  275:unsigned TestTypeWithLayoutType::getPreferredAlignment(
        -:  276:    const DataLayout &dataLayout, DataLayoutEntryListRef params) const {
    #####:  277:  return extractKind(params, "preferred");
call    0 never executed
call    1 never executed
        -:  278:}
        -:  279:
function _ZNK4test22TestTypeWithLayoutType13areCompatibleEN4llvm8ArrayRefIN4mlir24DataLayoutEntryInterfaceEEES5_ called 0 returned 0% blocks executed 0%
    #####:  280:bool TestTypeWithLayoutType::areCompatible(
        -:  281:    DataLayoutEntryListRef oldLayout, DataLayoutEntryListRef newLayout) const {
    #####:  282:  unsigned old = extractKind(oldLayout, "alignment");
call    0 never executed
    #####:  283:  return old == 1 || extractKind(newLayout, "alignment") <= old;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  284:}
        -:  285:
        -:  286:LogicalResult
function _ZNK4test22TestTypeWithLayoutType13verifyEntriesEN4llvm8ArrayRefIN4mlir24DataLayoutEntryInterfaceEEENS3_8LocationE called 0 returned 0% blocks executed 0%
    #####:  287:TestTypeWithLayoutType::verifyEntries(DataLayoutEntryListRef params,
        -:  288:                                      Location loc) const {
    #####:  289:  for (DataLayoutEntryInterface entry : params) {
branch  0 never executed
branch  1 never executed
        -:  290:    // This is for testing purposes only, so assert well-formedness.
    #####:  291:    assert(entry.isTypeEntry() && "unexpected identifier entry");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  292:    assert(entry.getKey().get<Type>().isa<TestTypeWithLayoutType>() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  293:           "wrong type passed in");
    #####:  294:    auto array = entry.getValue().dyn_cast<ArrayAttr>();
call    0 never executed
call    1 never executed
    #####:  295:    assert(array && array.getValue().size() == 2 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  296:           "expected array of two elements");
    #####:  297:    auto kind = array.getValue().front().dyn_cast<StringAttr>();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  298:    (void)kind;
    #####:  299:    assert(kind &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  300:           (kind.getValue() == "size" || kind.getValue() == "alignment" ||
        -:  301:            kind.getValue() == "preferred") &&
        -:  302:           "unexpected kind");
    #####:  303:    assert(array.getValue().back().isa<IntegerAttr>());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  304:  }
    #####:  305:  return success();
        -:  306:}
        -:  307:
function _ZNK4test22TestTypeWithLayoutType11extractKindEN4llvm8ArrayRefIN4mlir24DataLayoutEntryInterfaceEEENS1_9StringRefE called 0 returned 0% blocks executed 0%
    #####:  308:unsigned TestTypeWithLayoutType::extractKind(DataLayoutEntryListRef params,
        -:  309:                                             StringRef expectedKind) const {
    #####:  310:  for (DataLayoutEntryInterface entry : params) {
branch  0 never executed
branch  1 never executed
    #####:  311:    ArrayRef<Attribute> pair = entry.getValue().cast<ArrayAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  312:    StringRef kind = pair.front().cast<StringAttr>().getValue();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  313:    if (kind == expectedKind)
branch  0 never executed
branch  1 never executed
    #####:  314:      return pair.back().cast<IntegerAttr>().getValue().getZExtValue();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  315:  }
    #####:  316:  return 1;
        -:  317:}
        -:  318:
        -:  319://===----------------------------------------------------------------------===//
        -:  320:// Dynamic Types
        -:  321://===----------------------------------------------------------------------===//
        -:  322:
        -:  323:/// Define a singleton dynamic type.
        -:  324:static std::unique_ptr<DynamicTypeDefinition>
function _ZL23getSingletonDynamicTypePN4test11TestDialectE called 2919 returned 100% blocks executed 100%
     2919:  325:getSingletonDynamicType(TestDialect *testDialect) {
     2919:  326:  return DynamicTypeDefinition::get(
        -:  327:      "dynamic_singleton", testDialect,
function _ZZL23getSingletonDynamicTypePN4test11TestDialectEENKUlN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS2_8ArrayRefINS4_9AttributeEEEE_clES7_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  328:      [](function_ref<InFlightDiagnostic()> emitError,
        -:  329:         ArrayRef<Attribute> args) {
    #####:  330:        if (!args.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  331:          emitError() << "expected 0 type arguments, but had " << args.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  332:          return failure();
        -:  333:        }
    #####:  334:        return success();
     2919:  335:      });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  336:}
        -:  337:
        -:  338:/// Define a dynamic type representing a pair.
        -:  339:static std::unique_ptr<DynamicTypeDefinition>
function _ZL18getPairDynamicTypePN4test11TestDialectE called 2919 returned 100% blocks executed 100%
     2919:  340:getPairDynamicType(TestDialect *testDialect) {
     2919:  341:  return DynamicTypeDefinition::get(
        -:  342:      "dynamic_pair", testDialect,
function _ZZL18getPairDynamicTypePN4test11TestDialectEENKUlN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS2_8ArrayRefINS4_9AttributeEEEE_clES7_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  343:      [](function_ref<InFlightDiagnostic()> emitError,
        -:  344:         ArrayRef<Attribute> args) {
    #####:  345:        if (args.size() != 2) {
branch  0 never executed
branch  1 never executed
    #####:  346:          emitError() << "expected 2 type arguments, but had " << args.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  347:          return failure();
        -:  348:        }
    #####:  349:        return success();
     2919:  350:      });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  351:}
        -:  352:
        -:  353:static std::unique_ptr<DynamicTypeDefinition>
function _ZL34getCustomAssemblyFormatDynamicTypePN4test11TestDialectE called 2919 returned 100% blocks executed 100%
     2919:  354:getCustomAssemblyFormatDynamicType(TestDialect *testDialect) {
function _ZZL34getCustomAssemblyFormatDynamicTypePN4test11TestDialectEENKUlN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEEENS2_8ArrayRefINS4_9AttributeEEEE_clES7_SA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  355:  auto verifier = [](function_ref<InFlightDiagnostic()> emitError,
        -:  356:                     ArrayRef<Attribute> args) {
    #####:  357:    if (args.size() != 2) {
branch  0 never executed
branch  1 never executed
    #####:  358:      emitError() << "expected 2 type arguments, but had " << args.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  359:      return failure();
        -:  360:    }
    #####:  361:    return success();
        -:  362:  };
        -:  363:
function _ZZL34getCustomAssemblyFormatDynamicTypePN4test11TestDialectEENKUlRN4mlir9AsmParserERN4llvm15SmallVectorImplINS2_9AttributeEEEE0_clES4_S9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  364:  auto parser = [](AsmParser &parser,
        -:  365:                   llvm::SmallVectorImpl<Attribute> &parsedParams) {
    #####:  366:    Attribute leftAttr, rightAttr;
    #####:  367:    if (parser.parseLess() || parser.parseAttribute(leftAttr) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  368:        parser.parseColon() || parser.parseAttribute(rightAttr) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  369:        parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  370:      return failure();
    #####:  371:    parsedParams.push_back(leftAttr);
call    0 never executed
    #####:  372:    parsedParams.push_back(rightAttr);
call    0 never executed
    #####:  373:    return success();
        -:  374:  };
        -:  375:
function _ZZL34getCustomAssemblyFormatDynamicTypePN4test11TestDialectEENKUlRN4mlir10AsmPrinterEN4llvm8ArrayRefINS2_9AttributeEEEE1_clES4_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  376:  auto printer = [](AsmPrinter &printer, ArrayRef<Attribute> params) {
    #####:  377:    printer << "<" << params[0] << ":" << params[1] << ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  378:  };
        -:  379:
     2919:  380:  return DynamicTypeDefinition::get("dynamic_custom_assembly_format",
call    0 returned 100%
     2919:  381:                                    testDialect, std::move(verifier),
call    0 returned 100%
     2919:  382:                                    std::move(parser), std::move(printer));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:  383:}
        -:  384:
        -:  385://===----------------------------------------------------------------------===//
        -:  386:// TestDialect
        -:  387://===----------------------------------------------------------------------===//
        -:  388:
        -:  389:namespace {
        -:  390:
     2919:  391:struct PtrElementModel
call    0 returned 100%
        -:  392:    : public LLVM::PointerElementTypeInterface::ExternalModel<PtrElementModel,
        -:  393:                                                              SimpleAType> {};
        -:  394:} // namespace
        -:  395:
function _ZN4test11TestDialect13registerTypesEv called 2919 returned 100% blocks executed 80%
     2919:  396:void TestDialect::registerTypes() {
     2919:  397:  addTypes<TestRecursiveType,
        -:  398:#define GET_TYPEDEF_LIST
        -:  399:#include "TestTypeDefs.cpp.inc"
     2919:  400:           >();
call    0 returned 100%
     2919:  401:  SimpleAType::attachInterface<PtrElementModel>(*getContext());
call    0 returned 100%
        -:  402:
     2919:  403:  registerDynamicType(getSingletonDynamicType(this));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2919:  404:  registerDynamicType(getPairDynamicType(this));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2919:  405:  registerDynamicType(getCustomAssemblyFormatDynamicType(this));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2919:  406:}
        -:  407:
function _ZNK4test11TestDialect13parseTestTypeERN4mlir9AsmParserERN4llvm9SetVectorINS1_4TypeESt6vectorIS6_SaIS6_EENS4_8DenseSetIS6_NS4_12DenseMapInfoIS6_vEEEEEE called 0 returned 0% blocks executed 0%
    #####:  408:Type TestDialect::parseTestType(AsmParser &parser,
        -:  409:                                SetVector<Type> &stack) const {
    #####:  410:  StringRef typeTag;
    #####:  411:  {
    #####:  412:    Type genType;
    #####:  413:    auto parseResult = generatedTypeParser(parser, &typeTag, genType);
call    0 never executed
    #####:  414:    if (parseResult.has_value())
branch  0 never executed
branch  1 never executed
    #####:  415:      return genType;
        -:  416:  }
        -:  417:
    #####:  418:  {
    #####:  419:    Type dynType;
    #####:  420:    auto parseResult = parseOptionalDynamicType(typeTag, parser, dynType);
call    0 never executed
    #####:  421:    if (parseResult.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:  422:      if (succeeded(parseResult.value()))
branch  0 never executed
branch  1 never executed
    #####:  423:        return dynType;
    #####:  424:      return Type();
        -:  425:    }
        -:  426:  }
        -:  427:
    #####:  428:  if (typeTag != "test_rec") {
branch  0 never executed
branch  1 never executed
    #####:  429:    parser.emitError(parser.getNameLoc()) << "unknown type!";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  430:    return Type();
        -:  431:  }
        -:  432:
    #####:  433:  StringRef name;
    #####:  434:  if (parser.parseLess() || parser.parseKeyword(&name))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  435:    return Type();
    #####:  436:  auto rec = TestRecursiveType::get(parser.getContext(), name);
call    0 never executed
call    1 never executed
        -:  437:
        -:  438:  // If this type already has been parsed above in the stack, expect just the
        -:  439:  // name.
    #####:  440:  if (stack.contains(rec)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  441:    if (failed(parser.parseGreater()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  442:      return Type();
    #####:  443:    return rec;
        -:  444:  }
        -:  445:
        -:  446:  // Otherwise, parse the body and update the type.
    #####:  447:  if (failed(parser.parseComma()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  448:    return Type();
    #####:  449:  stack.insert(rec);
call    0 never executed
    #####:  450:  Type subtype = parseTestType(parser, stack);
call    0 never executed
    #####:  451:  stack.pop_back();
call    0 never executed
    #####:  452:  if (!subtype || failed(parser.parseGreater()) || failed(rec.setBody(subtype)))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  453:    return Type();
        -:  454:
    #####:  455:  return rec;
        -:  456:}
        -:  457:
function _ZNK4test11TestDialect9parseTypeERN4mlir16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  458:Type TestDialect::parseType(DialectAsmParser &parser) const {
    #####:  459:  SetVector<Type> stack;
call    0 never executed
call    1 never executed
    #####:  460:  return parseTestType(parser, stack);
call    0 never executed
        -:  461:}
        -:  462:
function _ZNK4test11TestDialect13printTestTypeEN4mlir4TypeERNS1_10AsmPrinterERN4llvm9SetVectorIS2_St6vectorIS2_SaIS2_EENS5_8DenseSetIS2_NS5_12DenseMapInfoIS2_vEEEEEE called 0 returned 0% blocks executed 0%
    #####:  463:void TestDialect::printTestType(Type type, AsmPrinter &printer,
        -:  464:                                SetVector<Type> &stack) const {
    #####:  465:  if (succeeded(generatedTypePrinter(type, printer)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  466:    return;
        -:  467:
    #####:  468:  if (succeeded(printIfDynamicType(type, printer)))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  469:    return;
        -:  470:
    #####:  471:  auto rec = type.cast<TestRecursiveType>();
call    0 never executed
    #####:  472:  printer << "test_rec<" << rec.getName();
call    0 never executed
call    1 never executed
    #####:  473:  if (!stack.contains(rec)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  474:    printer << ", ";
call    0 never executed
    #####:  475:    stack.insert(rec);
call    0 never executed
    #####:  476:    printTestType(rec.getBody(), printer, stack);
call    0 never executed
    #####:  477:    stack.pop_back();
call    0 never executed
        -:  478:  }
    #####:  479:  printer << ">";
call    0 never executed
        -:  480:}
        -:  481:
function _ZNK4test11TestDialect9printTypeEN4mlir4TypeERNS1_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  482:void TestDialect::printType(Type type, DialectAsmPrinter &printer) const {
    #####:  483:  SetVector<Type> stack;
call    0 never executed
call    1 never executed
    #####:  484:  printTestType(type, printer, stack);
call    0 never executed
    #####:  485:}
