        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/llvm/include/llvm/ADT/Triple.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/DebugTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/DebugTranslation.cpp.gcda
        -:    0:Runs:128646
        -:    1://===-- llvm/ADT/Triple.h - Target triple helper class ----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef LLVM_ADT_TRIPLE_H
        -:   10:#define LLVM_ADT_TRIPLE_H
        -:   11:
        -:   12:#include "llvm/ADT/Twine.h"
        -:   13:#include "llvm/Support/VersionTuple.h"
        -:   14:
        -:   15:// Some system headers or GCC predefined macros conflict with identifiers in
        -:   16:// this file.  Undefine them here.
        -:   17:#undef NetBSD
        -:   18:#undef mips
        -:   19:#undef sparc
        -:   20:
        -:   21:namespace llvm {
        -:   22:
        -:   23:/// Triple - Helper class for working with autoconf configuration names. For
        -:   24:/// historical reasons, we also call these 'triples' (they used to contain
        -:   25:/// exactly three fields).
        -:   26:///
        -:   27:/// Configuration names are strings in the canonical form:
        -:   28:///   ARCHITECTURE-VENDOR-OPERATING_SYSTEM
        -:   29:/// or
        -:   30:///   ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT
        -:   31:///
        -:   32:/// This class is used for clients which want to support arbitrary
        -:   33:/// configuration names, but also want to implement certain special
        -:   34:/// behavior for particular configurations. This class isolates the mapping
        -:   35:/// from the components of the configuration name to well known IDs.
        -:   36:///
        -:   37:/// At its core the Triple class is designed to be a wrapper for a triple
        -:   38:/// string; the constructor does not change or normalize the triple string.
        -:   39:/// Clients that need to handle the non-canonical triples that users often
        -:   40:/// specify should use the normalize method.
        -:   41:///
        -:   42:/// See autoconf/config.guess for a glimpse into what configuration names
        -:   43:/// look like in practice.
    #####:   44:class Triple {
branch  0 never executed
branch  1 never executed
        -:   45:public:
        -:   46:  enum ArchType {
        -:   47:    UnknownArch,
        -:   48:
        -:   49:    arm,            // ARM (little endian): arm, armv.*, xscale
        -:   50:    armeb,          // ARM (big endian): armeb
        -:   51:    aarch64,        // AArch64 (little endian): aarch64
        -:   52:    aarch64_be,     // AArch64 (big endian): aarch64_be
        -:   53:    aarch64_32,     // AArch64 (little endian) ILP32: aarch64_32
        -:   54:    arc,            // ARC: Synopsys ARC
        -:   55:    avr,            // AVR: Atmel AVR microcontroller
        -:   56:    bpfel,          // eBPF or extended BPF or 64-bit BPF (little endian)
        -:   57:    bpfeb,          // eBPF or extended BPF or 64-bit BPF (big endian)
        -:   58:    csky,           // CSKY: csky
        -:   59:    dxil,           // DXIL 32-bit DirectX bytecode
        -:   60:    hexagon,        // Hexagon: hexagon
        -:   61:    loongarch32,    // LoongArch (32-bit): loongarch32
        -:   62:    loongarch64,    // LoongArch (64-bit): loongarch64
        -:   63:    m68k,           // M68k: Motorola 680x0 family
        -:   64:    mips,           // MIPS: mips, mipsallegrex, mipsr6
        -:   65:    mipsel,         // MIPSEL: mipsel, mipsallegrexe, mipsr6el
        -:   66:    mips64,         // MIPS64: mips64, mips64r6, mipsn32, mipsn32r6
        -:   67:    mips64el,       // MIPS64EL: mips64el, mips64r6el, mipsn32el, mipsn32r6el
        -:   68:    msp430,         // MSP430: msp430
        -:   69:    ppc,            // PPC: powerpc
        -:   70:    ppcle,          // PPCLE: powerpc (little endian)
        -:   71:    ppc64,          // PPC64: powerpc64, ppu
        -:   72:    ppc64le,        // PPC64LE: powerpc64le
        -:   73:    r600,           // R600: AMD GPUs HD2XXX - HD6XXX
        -:   74:    amdgcn,         // AMDGCN: AMD GCN GPUs
        -:   75:    riscv32,        // RISC-V (32-bit): riscv32
        -:   76:    riscv64,        // RISC-V (64-bit): riscv64
        -:   77:    sparc,          // Sparc: sparc
        -:   78:    sparcv9,        // Sparcv9: Sparcv9
        -:   79:    sparcel,        // Sparc: (endianness = little). NB: 'Sparcle' is a CPU variant
        -:   80:    systemz,        // SystemZ: s390x
        -:   81:    tce,            // TCE (http://tce.cs.tut.fi/): tce
        -:   82:    tcele,          // TCE little endian (http://tce.cs.tut.fi/): tcele
        -:   83:    thumb,          // Thumb (little endian): thumb, thumbv.*
        -:   84:    thumbeb,        // Thumb (big endian): thumbeb
        -:   85:    x86,            // X86: i[3-9]86
        -:   86:    x86_64,         // X86-64: amd64, x86_64
        -:   87:    xcore,          // XCore: xcore
        -:   88:    nvptx,          // NVPTX: 32-bit
        -:   89:    nvptx64,        // NVPTX: 64-bit
        -:   90:    le32,           // le32: generic little-endian 32-bit CPU (PNaCl)
        -:   91:    le64,           // le64: generic little-endian 64-bit CPU (PNaCl)
        -:   92:    amdil,          // AMDIL
        -:   93:    amdil64,        // AMDIL with 64-bit pointers
        -:   94:    hsail,          // AMD HSAIL
        -:   95:    hsail64,        // AMD HSAIL with 64-bit pointers
        -:   96:    spir,           // SPIR: standard portable IR for OpenCL 32-bit version
        -:   97:    spir64,         // SPIR: standard portable IR for OpenCL 64-bit version
        -:   98:    spirv32,        // SPIR-V with 32-bit pointers
        -:   99:    spirv64,        // SPIR-V with 64-bit pointers
        -:  100:    kalimba,        // Kalimba: generic kalimba
        -:  101:    shave,          // SHAVE: Movidius vector VLIW processors
        -:  102:    lanai,          // Lanai: Lanai 32-bit
        -:  103:    wasm32,         // WebAssembly with 32-bit pointers
        -:  104:    wasm64,         // WebAssembly with 64-bit pointers
        -:  105:    renderscript32, // 32-bit RenderScript
        -:  106:    renderscript64, // 64-bit RenderScript
        -:  107:    ve,             // NEC SX-Aurora Vector Engine
        -:  108:    LastArchType = ve
        -:  109:  };
        -:  110:  enum SubArchType {
        -:  111:    NoSubArch,
        -:  112:
        -:  113:    ARMSubArch_v9_3a,
        -:  114:    ARMSubArch_v9_2a,
        -:  115:    ARMSubArch_v9_1a,
        -:  116:    ARMSubArch_v9,
        -:  117:    ARMSubArch_v8_8a,
        -:  118:    ARMSubArch_v8_7a,
        -:  119:    ARMSubArch_v8_6a,
        -:  120:    ARMSubArch_v8_5a,
        -:  121:    ARMSubArch_v8_4a,
        -:  122:    ARMSubArch_v8_3a,
        -:  123:    ARMSubArch_v8_2a,
        -:  124:    ARMSubArch_v8_1a,
        -:  125:    ARMSubArch_v8,
        -:  126:    ARMSubArch_v8r,
        -:  127:    ARMSubArch_v8m_baseline,
        -:  128:    ARMSubArch_v8m_mainline,
        -:  129:    ARMSubArch_v8_1m_mainline,
        -:  130:    ARMSubArch_v7,
        -:  131:    ARMSubArch_v7em,
        -:  132:    ARMSubArch_v7m,
        -:  133:    ARMSubArch_v7s,
        -:  134:    ARMSubArch_v7k,
        -:  135:    ARMSubArch_v7ve,
        -:  136:    ARMSubArch_v6,
        -:  137:    ARMSubArch_v6m,
        -:  138:    ARMSubArch_v6k,
        -:  139:    ARMSubArch_v6t2,
        -:  140:    ARMSubArch_v5,
        -:  141:    ARMSubArch_v5te,
        -:  142:    ARMSubArch_v4t,
        -:  143:
        -:  144:    AArch64SubArch_arm64e,
        -:  145:    AArch64SubArch_arm64ec,
        -:  146:
        -:  147:    KalimbaSubArch_v3,
        -:  148:    KalimbaSubArch_v4,
        -:  149:    KalimbaSubArch_v5,
        -:  150:
        -:  151:    MipsSubArch_r6,
        -:  152:
        -:  153:    PPCSubArch_spe,
        -:  154:
        -:  155:    // SPIR-V sub-arch corresponds to its version.
        -:  156:    SPIRVSubArch_v10,
        -:  157:    SPIRVSubArch_v11,
        -:  158:    SPIRVSubArch_v12,
        -:  159:    SPIRVSubArch_v13,
        -:  160:    SPIRVSubArch_v14,
        -:  161:    SPIRVSubArch_v15,
        -:  162:  };
        -:  163:  enum VendorType {
        -:  164:    UnknownVendor,
        -:  165:
        -:  166:    Apple,
        -:  167:    PC,
        -:  168:    SCEI,
        -:  169:    Freescale,
        -:  170:    IBM,
        -:  171:    ImaginationTechnologies,
        -:  172:    MipsTechnologies,
        -:  173:    NVIDIA,
        -:  174:    CSR,
        -:  175:    Myriad,
        -:  176:    AMD,
        -:  177:    Mesa,
        -:  178:    SUSE,
        -:  179:    OpenEmbedded,
        -:  180:    LastVendorType = OpenEmbedded
        -:  181:  };
        -:  182:  enum OSType {
        -:  183:    UnknownOS,
        -:  184:
        -:  185:    Ananas,
        -:  186:    CloudABI,
        -:  187:    Darwin,
        -:  188:    DragonFly,
        -:  189:    FreeBSD,
        -:  190:    Fuchsia,
        -:  191:    IOS,
        -:  192:    KFreeBSD,
        -:  193:    Linux,
        -:  194:    Lv2,        // PS3
        -:  195:    MacOSX,
        -:  196:    NetBSD,
        -:  197:    OpenBSD,
        -:  198:    Solaris,
        -:  199:    Win32,
        -:  200:    ZOS,
        -:  201:    Haiku,
        -:  202:    Minix,
        -:  203:    RTEMS,
        -:  204:    NaCl,       // Native Client
        -:  205:    AIX,
        -:  206:    CUDA,       // NVIDIA CUDA
        -:  207:    NVCL,       // NVIDIA OpenCL
        -:  208:    AMDHSA,     // AMD HSA Runtime
        -:  209:    PS4,
        -:  210:    PS5,
        -:  211:    ELFIAMCU,
        -:  212:    TvOS,       // Apple tvOS
        -:  213:    WatchOS,    // Apple watchOS
        -:  214:    DriverKit,  // Apple DriverKit
        -:  215:    Mesa3D,
        -:  216:    Contiki,
        -:  217:    AMDPAL,     // AMD PAL Runtime
        -:  218:    HermitCore, // HermitCore Unikernel/Multikernel
        -:  219:    Hurd,       // GNU/Hurd
        -:  220:    WASI,       // Experimental WebAssembly OS
        -:  221:    Emscripten,
        -:  222:    ShaderModel, // DirectX ShaderModel
        -:  223:    LastOSType = ShaderModel
        -:  224:  };
        -:  225:  enum EnvironmentType {
        -:  226:    UnknownEnvironment,
        -:  227:
        -:  228:    GNU,
        -:  229:    GNUABIN32,
        -:  230:    GNUABI64,
        -:  231:    GNUEABI,
        -:  232:    GNUEABIHF,
        -:  233:    GNUX32,
        -:  234:    GNUILP32,
        -:  235:    CODE16,
        -:  236:    EABI,
        -:  237:    EABIHF,
        -:  238:    Android,
        -:  239:    Musl,
        -:  240:    MuslEABI,
        -:  241:    MuslEABIHF,
        -:  242:    MuslX32,
        -:  243:
        -:  244:    MSVC,
        -:  245:    Itanium,
        -:  246:    Cygnus,
        -:  247:    CoreCLR,
        -:  248:    Simulator, // Simulator variants of other systems, e.g., Apple's iOS
        -:  249:    MacABI, // Mac Catalyst variant of Apple's iOS deployment target.
        -:  250:    
        -:  251:    // Shader Stages
        -:  252:    // The order of these values matters, and must be kept in sync with the
        -:  253:    // language options enum in Clang. The ordering is enforced in
        -:  254:    // static_asserts in Triple.cpp and in Clang.
        -:  255:    Pixel,
        -:  256:    Vertex,
        -:  257:    Geometry,
        -:  258:    Hull,
        -:  259:    Domain,
        -:  260:    Compute,
        -:  261:    Library,
        -:  262:    RayGeneration,
        -:  263:    Intersection,
        -:  264:    AnyHit,
        -:  265:    ClosestHit,
        -:  266:    Miss,
        -:  267:    Callable,
        -:  268:    Mesh,
        -:  269:    Amplification,
        -:  270:
        -:  271:    LastEnvironmentType = Amplification
        -:  272:  };
        -:  273:  enum ObjectFormatType {
        -:  274:    UnknownObjectFormat,
        -:  275:
        -:  276:    COFF,
        -:  277:    DXContainer,
        -:  278:    ELF,
        -:  279:    GOFF,
        -:  280:    MachO,
        -:  281:    SPIRV,
        -:  282:    Wasm,
        -:  283:    XCOFF,
        -:  284:  };
        -:  285:
        -:  286:private:
        -:  287:  std::string Data;
        -:  288:
        -:  289:  /// The parsed arch type.
        -:  290:  ArchType Arch{};
        -:  291:
        -:  292:  /// The parsed subarchitecture type.
        -:  293:  SubArchType SubArch{};
        -:  294:
        -:  295:  /// The parsed vendor type.
        -:  296:  VendorType Vendor{};
        -:  297:
        -:  298:  /// The parsed OS type.
        -:  299:  OSType OS{};
        -:  300:
        -:  301:  /// The parsed Environment type.
        -:  302:  EnvironmentType Environment{};
        -:  303:
        -:  304:  /// The object format type.
        -:  305:  ObjectFormatType ObjectFormat{};
        -:  306:
        -:  307:public:
        -:  308:  /// @name Constructors
        -:  309:  /// @{
        -:  310:
        -:  311:  /// Default constructor is the same as an empty string and leaves all
        -:  312:  /// triple fields unknown.
        -:  313:  Triple() = default;
        -:  314:
        -:  315:  explicit Triple(const Twine &Str);
        -:  316:  Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr);
        -:  317:  Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr,
        -:  318:         const Twine &EnvironmentStr);
        -:  319:
        -:  320:  bool operator==(const Triple &Other) const {
        -:  321:    return Arch == Other.Arch && SubArch == Other.SubArch &&
        -:  322:           Vendor == Other.Vendor && OS == Other.OS &&
        -:  323:           Environment == Other.Environment &&
        -:  324:           ObjectFormat == Other.ObjectFormat;
        -:  325:  }
        -:  326:
        -:  327:  bool operator!=(const Triple &Other) const {
        -:  328:    return !(*this == Other);
        -:  329:  }
        -:  330:
        -:  331:  /// @}
        -:  332:  /// @name Normalization
        -:  333:  /// @{
        -:  334:
        -:  335:  /// Turn an arbitrary machine specification into the canonical triple form (or
        -:  336:  /// something sensible that the Triple class understands if nothing better can
        -:  337:  /// reasonably be done).  In particular, it handles the common case in which
        -:  338:  /// otherwise valid components are in the wrong order.
        -:  339:  static std::string normalize(StringRef Str);
        -:  340:
        -:  341:  /// Return the normalized form of this triple's string.
        -:  342:  std::string normalize() const { return normalize(Data); }
        -:  343:
        -:  344:  /// @}
        -:  345:  /// @name Typed Component Access
        -:  346:  /// @{
        -:  347:
        -:  348:  /// Get the parsed architecture type of this triple.
        -:  349:  ArchType getArch() const { return Arch; }
        -:  350:
        -:  351:  /// get the parsed subarchitecture type for this triple.
        -:  352:  SubArchType getSubArch() const { return SubArch; }
        -:  353:
        -:  354:  /// Get the parsed vendor type of this triple.
        -:  355:  VendorType getVendor() const { return Vendor; }
        -:  356:
        -:  357:  /// Get the parsed operating system type of this triple.
    #####:  358:  OSType getOS() const { return OS; }
        -:  359:
        -:  360:  /// Does this triple have the optional environment (fourth) component?
        -:  361:  bool hasEnvironment() const {
        -:  362:    return getEnvironmentName() != "";
        -:  363:  }
        -:  364:
        -:  365:  /// Get the parsed environment type of this triple.
    #####:  366:  EnvironmentType getEnvironment() const { return Environment; }
        -:  367:
        -:  368:  /// Parse the version number from the OS name component of the
        -:  369:  /// triple, if present.
        -:  370:  ///
        -:  371:  /// For example, "fooos1.2.3" would return (1, 2, 3).
        -:  372:  VersionTuple getEnvironmentVersion() const;
        -:  373:
        -:  374:  /// Get the object format for this triple.
        -:  375:  ObjectFormatType getObjectFormat() const { return ObjectFormat; }
        -:  376:
        -:  377:  /// Parse the version number from the OS name component of the triple, if
        -:  378:  /// present.
        -:  379:  ///
        -:  380:  /// For example, "fooos1.2.3" would return (1, 2, 3).
        -:  381:  VersionTuple getOSVersion() const;
        -:  382:
        -:  383:  /// Return just the major version number, this is specialized because it is a
        -:  384:  /// common query.
        -:  385:  unsigned getOSMajorVersion() const { return getOSVersion().getMajor(); }
        -:  386:
        -:  387:  /// Parse the version number as with getOSVersion and then translate generic
        -:  388:  /// "darwin" versions to the corresponding OS X versions.  This may also be
        -:  389:  /// called with IOS triples but the OS X version number is just set to a
        -:  390:  /// constant 10.4.0 in that case.  Returns true if successful.
        -:  391:  bool getMacOSXVersion(VersionTuple &Version) const;
        -:  392:
        -:  393:  /// Parse the version number as with getOSVersion.  This should only be called
        -:  394:  /// with IOS or generic triples.
        -:  395:  VersionTuple getiOSVersion() const;
        -:  396:
        -:  397:  /// Parse the version number as with getOSVersion.  This should only be called
        -:  398:  /// with WatchOS or generic triples.
        -:  399:  VersionTuple getWatchOSVersion() const;
        -:  400:
        -:  401:  /// Parse the version number as with getOSVersion.
        -:  402:  VersionTuple getDriverKitVersion() const;
        -:  403:
        -:  404:  /// @}
        -:  405:  /// @name Direct Component Access
        -:  406:  /// @{
        -:  407:
        -:  408:  const std::string &str() const { return Data; }
        -:  409:
        -:  410:  const std::string &getTriple() const { return Data; }
        -:  411:
        -:  412:  /// Get the architecture (first) component of the triple.
        -:  413:  StringRef getArchName() const;
        -:  414:
        -:  415:  /// Get the architecture name based on Kind and SubArch.
        -:  416:  StringRef getArchName(ArchType Kind, SubArchType SubArch = NoSubArch) const;
        -:  417:
        -:  418:  /// Get the vendor (second) component of the triple.
        -:  419:  StringRef getVendorName() const;
        -:  420:
        -:  421:  /// Get the operating system (third) component of the triple.
        -:  422:  StringRef getOSName() const;
        -:  423:
        -:  424:  /// Get the optional environment (fourth) component of the triple, or "" if
        -:  425:  /// empty.
        -:  426:  StringRef getEnvironmentName() const;
        -:  427:
        -:  428:  /// Get the operating system and optional environment components as a single
        -:  429:  /// string (separated by a '-' if the environment component is present).
        -:  430:  StringRef getOSAndEnvironmentName() const;
        -:  431:
        -:  432:  /// @}
        -:  433:  /// @name Convenience Predicates
        -:  434:  /// @{
        -:  435:
        -:  436:  /// Test whether the architecture is 64-bit
        -:  437:  ///
        -:  438:  /// Note that this tests for 64-bit pointer width, and nothing else. Note
        -:  439:  /// that we intentionally expose only three predicates, 64-bit, 32-bit, and
        -:  440:  /// 16-bit. The inner details of pointer width for particular architectures
        -:  441:  /// is not summed up in the triple, and so only a coarse grained predicate
        -:  442:  /// system is provided.
        -:  443:  bool isArch64Bit() const;
        -:  444:
        -:  445:  /// Test whether the architecture is 32-bit
        -:  446:  ///
        -:  447:  /// Note that this tests for 32-bit pointer width, and nothing else.
        -:  448:  bool isArch32Bit() const;
        -:  449:
        -:  450:  /// Test whether the architecture is 16-bit
        -:  451:  ///
        -:  452:  /// Note that this tests for 16-bit pointer width, and nothing else.
        -:  453:  bool isArch16Bit() const;
        -:  454:
        -:  455:  /// Helper function for doing comparisons against version numbers included in
        -:  456:  /// the target triple.
        -:  457:  bool isOSVersionLT(unsigned Major, unsigned Minor = 0,
        -:  458:                     unsigned Micro = 0) const {
        -:  459:    if (Minor == 0) {
        -:  460:      return getOSVersion() < VersionTuple(Major);
        -:  461:    }
        -:  462:    if (Micro == 0) {
        -:  463:      return getOSVersion() < VersionTuple(Major, Minor);
        -:  464:    }
        -:  465:    return getOSVersion() < VersionTuple(Major, Minor, Micro);
        -:  466:  }
        -:  467:
        -:  468:  bool isOSVersionLT(const Triple &Other) const {
        -:  469:    return getOSVersion() < Other.getOSVersion();
        -:  470:  }
        -:  471:
        -:  472:  /// Comparison function for checking OS X version compatibility, which handles
        -:  473:  /// supporting skewed version numbering schemes used by the "darwin" triples.
        -:  474:  bool isMacOSXVersionLT(unsigned Major, unsigned Minor = 0,
        -:  475:                         unsigned Micro = 0) const;
        -:  476:
        -:  477:  /// Is this a Mac OS X triple. For legacy reasons, we support both "darwin"
        -:  478:  /// and "osx" as OS X triples.
        -:  479:  bool isMacOSX() const {
        -:  480:    return getOS() == Triple::Darwin || getOS() == Triple::MacOSX;
        -:  481:  }
        -:  482:
        -:  483:  /// Is this an iOS triple.
        -:  484:  /// Note: This identifies tvOS as a variant of iOS. If that ever
        -:  485:  /// changes, i.e., if the two operating systems diverge or their version
        -:  486:  /// numbers get out of sync, that will need to be changed.
        -:  487:  /// watchOS has completely different version numbers so it is not included.
        -:  488:  bool isiOS() const {
        -:  489:    return getOS() == Triple::IOS || isTvOS();
        -:  490:  }
        -:  491:
        -:  492:  /// Is this an Apple tvOS triple.
        -:  493:  bool isTvOS() const {
        -:  494:    return getOS() == Triple::TvOS;
        -:  495:  }
        -:  496:
        -:  497:  /// Is this an Apple watchOS triple.
        -:  498:  bool isWatchOS() const {
        -:  499:    return getOS() == Triple::WatchOS;
        -:  500:  }
        -:  501:
        -:  502:  bool isWatchABI() const {
        -:  503:    return getSubArch() == Triple::ARMSubArch_v7k;
        -:  504:  }
        -:  505:
        -:  506:  /// Is this an Apple DriverKit triple.
        -:  507:  bool isDriverKit() const { return getOS() == Triple::DriverKit; }
        -:  508:
        -:  509:  bool isOSzOS() const { return getOS() == Triple::ZOS; }
        -:  510:
        -:  511:  /// Is this a "Darwin" OS (macOS, iOS, tvOS, watchOS, or DriverKit).
        -:  512:  bool isOSDarwin() const {
        -:  513:    return isMacOSX() || isiOS() || isWatchOS() || isDriverKit();
        -:  514:  }
        -:  515:
        -:  516:  bool isSimulatorEnvironment() const {
        -:  517:    return getEnvironment() == Triple::Simulator;
        -:  518:  }
        -:  519:
        -:  520:  bool isMacCatalystEnvironment() const {
        -:  521:    return getEnvironment() == Triple::MacABI;
        -:  522:  }
        -:  523:
        -:  524:  /// Returns true for targets that run on a macOS machine.
        -:  525:  bool isTargetMachineMac() const {
        -:  526:    return isMacOSX() || (isOSDarwin() && (isSimulatorEnvironment() ||
        -:  527:                                           isMacCatalystEnvironment()));
        -:  528:  }
        -:  529:
        -:  530:  bool isOSNetBSD() const {
        -:  531:    return getOS() == Triple::NetBSD;
        -:  532:  }
        -:  533:
        -:  534:  bool isOSOpenBSD() const {
        -:  535:    return getOS() == Triple::OpenBSD;
        -:  536:  }
        -:  537:
        -:  538:  bool isOSFreeBSD() const {
        -:  539:    return getOS() == Triple::FreeBSD;
        -:  540:  }
        -:  541:
        -:  542:  bool isOSFuchsia() const {
        -:  543:    return getOS() == Triple::Fuchsia;
        -:  544:  }
        -:  545:
        -:  546:  bool isOSDragonFly() const { return getOS() == Triple::DragonFly; }
        -:  547:
        -:  548:  bool isOSSolaris() const {
        -:  549:    return getOS() == Triple::Solaris;
        -:  550:  }
        -:  551:
        -:  552:  bool isOSIAMCU() const {
        -:  553:    return getOS() == Triple::ELFIAMCU;
        -:  554:  }
        -:  555:
        -:  556:  bool isOSUnknown() const { return getOS() == Triple::UnknownOS; }
        -:  557:
        -:  558:  bool isGNUEnvironment() const {
        -:  559:    EnvironmentType Env = getEnvironment();
        -:  560:    return Env == Triple::GNU || Env == Triple::GNUABIN32 ||
        -:  561:           Env == Triple::GNUABI64 || Env == Triple::GNUEABI ||
        -:  562:           Env == Triple::GNUEABIHF || Env == Triple::GNUX32;
        -:  563:  }
        -:  564:
        -:  565:  bool isOSContiki() const {
        -:  566:    return getOS() == Triple::Contiki;
        -:  567:  }
        -:  568:
        -:  569:  /// Tests whether the OS is Haiku.
        -:  570:  bool isOSHaiku() const {
        -:  571:    return getOS() == Triple::Haiku;
        -:  572:  }
        -:  573:
        -:  574:  /// Tests whether the OS is Windows.
    #####:  575:  bool isOSWindows() const {
    #####:  576:    return getOS() == Triple::Win32;
        -:  577:  }
        -:  578:
        -:  579:  /// Checks if the environment is MSVC.
    #####:  580:  bool isKnownWindowsMSVCEnvironment() const {
    #####:  581:    return isOSWindows() && getEnvironment() == Triple::MSVC;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:  }
        -:  583:
        -:  584:  /// Checks if the environment could be MSVC.
        -:  585:  bool isWindowsMSVCEnvironment() const {
        -:  586:    return isKnownWindowsMSVCEnvironment() ||
        -:  587:           (isOSWindows() && getEnvironment() == Triple::UnknownEnvironment);
        -:  588:  }
        -:  589:
        -:  590:  // Checks if we're using the Windows Arm64EC ABI.
        -:  591:  bool isWindowsArm64EC() const {
        -:  592:    return getArch() == Triple::aarch64 &&
        -:  593:           getSubArch() == Triple::AArch64SubArch_arm64ec;
        -:  594:  }
        -:  595:
        -:  596:  bool isWindowsCoreCLREnvironment() const {
        -:  597:    return isOSWindows() && getEnvironment() == Triple::CoreCLR;
        -:  598:  }
        -:  599:
        -:  600:  bool isWindowsItaniumEnvironment() const {
        -:  601:    return isOSWindows() && getEnvironment() == Triple::Itanium;
        -:  602:  }
        -:  603:
        -:  604:  bool isWindowsCygwinEnvironment() const {
        -:  605:    return isOSWindows() && getEnvironment() == Triple::Cygnus;
        -:  606:  }
        -:  607:
        -:  608:  bool isWindowsGNUEnvironment() const {
        -:  609:    return isOSWindows() && getEnvironment() == Triple::GNU;
        -:  610:  }
        -:  611:
        -:  612:  /// Tests for either Cygwin or MinGW OS
        -:  613:  bool isOSCygMing() const {
        -:  614:    return isWindowsCygwinEnvironment() || isWindowsGNUEnvironment();
        -:  615:  }
        -:  616:
        -:  617:  /// Is this a "Windows" OS targeting a "MSVCRT.dll" environment.
        -:  618:  bool isOSMSVCRT() const {
        -:  619:    return isWindowsMSVCEnvironment() || isWindowsGNUEnvironment() ||
        -:  620:           isWindowsItaniumEnvironment();
        -:  621:  }
        -:  622:
        -:  623:  /// Tests whether the OS is NaCl (Native Client)
        -:  624:  bool isOSNaCl() const {
        -:  625:    return getOS() == Triple::NaCl;
        -:  626:  }
        -:  627:
        -:  628:  /// Tests whether the OS is Linux.
        -:  629:  bool isOSLinux() const {
        -:  630:    return getOS() == Triple::Linux;
        -:  631:  }
        -:  632:
        -:  633:  /// Tests whether the OS is kFreeBSD.
        -:  634:  bool isOSKFreeBSD() const {
        -:  635:    return getOS() == Triple::KFreeBSD;
        -:  636:  }
        -:  637:
        -:  638:  /// Tests whether the OS is Hurd.
        -:  639:  bool isOSHurd() const {
        -:  640:    return getOS() == Triple::Hurd;
        -:  641:  }
        -:  642:
        -:  643:  /// Tests whether the OS is WASI.
        -:  644:  bool isOSWASI() const {
        -:  645:    return getOS() == Triple::WASI;
        -:  646:  }
        -:  647:
        -:  648:  /// Tests whether the OS is Emscripten.
        -:  649:  bool isOSEmscripten() const {
        -:  650:    return getOS() == Triple::Emscripten;
        -:  651:  }
        -:  652:
        -:  653:  /// Tests whether the OS uses glibc.
        -:  654:  bool isOSGlibc() const {
        -:  655:    return (getOS() == Triple::Linux || getOS() == Triple::KFreeBSD ||
        -:  656:            getOS() == Triple::Hurd) &&
        -:  657:           !isAndroid();
        -:  658:  }
        -:  659:
        -:  660:  /// Tests whether the OS is AIX.
        -:  661:  bool isOSAIX() const {
        -:  662:    return getOS() == Triple::AIX;
        -:  663:  }
        -:  664:
        -:  665:  /// Tests whether the OS uses the ELF binary format.
        -:  666:  bool isOSBinFormatELF() const {
        -:  667:    return getObjectFormat() == Triple::ELF;
        -:  668:  }
        -:  669:
        -:  670:  /// Tests whether the OS uses the COFF binary format.
        -:  671:  bool isOSBinFormatCOFF() const {
        -:  672:    return getObjectFormat() == Triple::COFF;
        -:  673:  }
        -:  674:
        -:  675:  /// Tests whether the OS uses the GOFF binary format.
        -:  676:  bool isOSBinFormatGOFF() const { return getObjectFormat() == Triple::GOFF; }
        -:  677:
        -:  678:  /// Tests whether the environment is MachO.
        -:  679:  bool isOSBinFormatMachO() const {
        -:  680:    return getObjectFormat() == Triple::MachO;
        -:  681:  }
        -:  682:
        -:  683:  /// Tests whether the OS uses the Wasm binary format.
        -:  684:  bool isOSBinFormatWasm() const {
        -:  685:    return getObjectFormat() == Triple::Wasm;
        -:  686:  }
        -:  687:
        -:  688:  /// Tests whether the OS uses the XCOFF binary format.
        -:  689:  bool isOSBinFormatXCOFF() const {
        -:  690:    return getObjectFormat() == Triple::XCOFF;
        -:  691:  }
        -:  692:
        -:  693:  /// Tests whether the OS uses the DXContainer binary format.
        -:  694:  bool isOSBinFormatDXContainer() const {
        -:  695:    return getObjectFormat() == Triple::DXContainer;
        -:  696:  }
        -:  697:
        -:  698:  /// Tests whether the target is the PS4 platform.
        -:  699:  bool isPS4() const {
        -:  700:    return getArch() == Triple::x86_64 &&
        -:  701:           getVendor() == Triple::SCEI &&
        -:  702:           getOS() == Triple::PS4;
        -:  703:  }
        -:  704:
        -:  705:  /// Tests whether the target is the PS5 platform.
        -:  706:  bool isPS5() const {
        -:  707:    return getArch() == Triple::x86_64 &&
        -:  708:      getVendor() == Triple::SCEI &&
        -:  709:      getOS() == Triple::PS5;
        -:  710:  }
        -:  711:
        -:  712:  /// Tests whether the target is the PS4 or PS5 platform.
        -:  713:  bool isPS() const { return isPS4() || isPS5(); }
        -:  714:
        -:  715:  /// Tests whether the target is Android
        -:  716:  bool isAndroid() const { return getEnvironment() == Triple::Android; }
        -:  717:
        -:  718:  bool isAndroidVersionLT(unsigned Major) const {
        -:  719:    assert(isAndroid() && "Not an Android triple!");
        -:  720:
        -:  721:    VersionTuple Version = getEnvironmentVersion();
        -:  722:
        -:  723:    // 64-bit targets did not exist before API level 21 (Lollipop).
        -:  724:    if (isArch64Bit() && Version.getMajor() < 21)
        -:  725:      return VersionTuple(21) < VersionTuple(Major);
        -:  726:
        -:  727:    return Version < VersionTuple(Major);
        -:  728:  }
        -:  729:
        -:  730:  /// Tests whether the environment is musl-libc
        -:  731:  bool isMusl() const {
        -:  732:    return getEnvironment() == Triple::Musl ||
        -:  733:           getEnvironment() == Triple::MuslEABI ||
        -:  734:           getEnvironment() == Triple::MuslEABIHF ||
        -:  735:           getEnvironment() == Triple::MuslX32;
        -:  736:  }
        -:  737:
        -:  738:  /// Tests whether the target is DXIL.
        -:  739:  bool isDXIL() const {
        -:  740:    return getArch() == Triple::dxil;
        -:  741:  }
        -:  742:
        -:  743:  /// Tests whether the target is SPIR (32- or 64-bit).
        -:  744:  bool isSPIR() const {
        -:  745:    return getArch() == Triple::spir || getArch() == Triple::spir64;
        -:  746:  }
        -:  747:
        -:  748:  /// Tests whether the target is SPIR-V (32/64-bit).
        -:  749:  bool isSPIRV() const {
        -:  750:    return getArch() == Triple::spirv32 || getArch() == Triple::spirv64;
        -:  751:  }
        -:  752:
        -:  753:  /// Tests whether the target is NVPTX (32- or 64-bit).
        -:  754:  bool isNVPTX() const {
        -:  755:    return getArch() == Triple::nvptx || getArch() == Triple::nvptx64;
        -:  756:  }
        -:  757:
        -:  758:  /// Tests whether the target is AMDGCN
        -:  759:  bool isAMDGCN() const { return getArch() == Triple::amdgcn; }
        -:  760:
        -:  761:  bool isAMDGPU() const {
        -:  762:    return getArch() == Triple::r600 || getArch() == Triple::amdgcn;
        -:  763:  }
        -:  764:
        -:  765:  /// Tests whether the target is Thumb (little and big endian).
        -:  766:  bool isThumb() const {
        -:  767:    return getArch() == Triple::thumb || getArch() == Triple::thumbeb;
        -:  768:  }
        -:  769:
        -:  770:  /// Tests whether the target is ARM (little and big endian).
        -:  771:  bool isARM() const {
        -:  772:    return getArch() == Triple::arm || getArch() == Triple::armeb;
        -:  773:  }
        -:  774:
        -:  775:  /// Tests whether the target supports the EHABI exception
        -:  776:  /// handling standard.
        -:  777:  bool isTargetEHABICompatible() const {
        -:  778:    return (isARM() || isThumb()) &&
        -:  779:           (getEnvironment() == Triple::EABI ||
        -:  780:            getEnvironment() == Triple::GNUEABI ||
        -:  781:            getEnvironment() == Triple::MuslEABI ||
        -:  782:            getEnvironment() == Triple::EABIHF ||
        -:  783:            getEnvironment() == Triple::GNUEABIHF ||
        -:  784:            getEnvironment() == Triple::MuslEABIHF || isAndroid()) &&
        -:  785:           isOSBinFormatELF();
        -:  786:  }
        -:  787:
        -:  788:  /// Tests whether the target is T32.
        -:  789:  bool isArmT32() const {
        -:  790:    switch (getSubArch()) {
        -:  791:    case Triple::ARMSubArch_v8m_baseline:
        -:  792:    case Triple::ARMSubArch_v7s:
        -:  793:    case Triple::ARMSubArch_v7k:
        -:  794:    case Triple::ARMSubArch_v7ve:
        -:  795:    case Triple::ARMSubArch_v6:
        -:  796:    case Triple::ARMSubArch_v6m:
        -:  797:    case Triple::ARMSubArch_v6k:
        -:  798:    case Triple::ARMSubArch_v6t2:
        -:  799:    case Triple::ARMSubArch_v5:
        -:  800:    case Triple::ARMSubArch_v5te:
        -:  801:    case Triple::ARMSubArch_v4t:
        -:  802:      return false;
        -:  803:    default:
        -:  804:      return true;
        -:  805:    }
        -:  806:  }
        -:  807:
        -:  808:  /// Tests whether the target is an M-class.
        -:  809:  bool isArmMClass() const {
        -:  810:    switch (getSubArch()) {
        -:  811:    case Triple::ARMSubArch_v6m:
        -:  812:    case Triple::ARMSubArch_v7m:
        -:  813:    case Triple::ARMSubArch_v7em:
        -:  814:    case Triple::ARMSubArch_v8m_mainline:
        -:  815:    case Triple::ARMSubArch_v8m_baseline:
        -:  816:    case Triple::ARMSubArch_v8_1m_mainline:
        -:  817:      return true;
        -:  818:    default:
        -:  819:      return false;
        -:  820:    }
        -:  821:  }
        -:  822:
        -:  823:  /// Tests whether the target is AArch64 (little and big endian).
        -:  824:  bool isAArch64() const {
        -:  825:    return getArch() == Triple::aarch64 || getArch() == Triple::aarch64_be ||
        -:  826:           getArch() == Triple::aarch64_32;
        -:  827:  }
        -:  828:
        -:  829:  /// Tests whether the target is AArch64 and pointers are the size specified by
        -:  830:  /// \p PointerWidth.
        -:  831:  bool isAArch64(int PointerWidth) const {
        -:  832:    assert(PointerWidth == 64 || PointerWidth == 32);
        -:  833:    if (!isAArch64())
        -:  834:      return false;
        -:  835:    return getArch() == Triple::aarch64_32 ||
        -:  836:                   getEnvironment() == Triple::GNUILP32
        -:  837:               ? PointerWidth == 32
        -:  838:               : PointerWidth == 64;
        -:  839:  }
        -:  840:
        -:  841:  /// Tests whether the target is LoongArch (32- and 64-bit).
        -:  842:  bool isLoongArch() const {
        -:  843:    return getArch() == Triple::loongarch32 || getArch() == Triple::loongarch64;
        -:  844:  }
        -:  845:
        -:  846:  /// Tests whether the target is MIPS 32-bit (little and big endian).
        -:  847:  bool isMIPS32() const {
        -:  848:    return getArch() == Triple::mips || getArch() == Triple::mipsel;
        -:  849:  }
        -:  850:
        -:  851:  /// Tests whether the target is MIPS 64-bit (little and big endian).
        -:  852:  bool isMIPS64() const {
        -:  853:    return getArch() == Triple::mips64 || getArch() == Triple::mips64el;
        -:  854:  }
        -:  855:
        -:  856:  /// Tests whether the target is MIPS (little and big endian, 32- or 64-bit).
        -:  857:  bool isMIPS() const {
        -:  858:    return isMIPS32() || isMIPS64();
        -:  859:  }
        -:  860:
        -:  861:  /// Tests whether the target is PowerPC (32- or 64-bit LE or BE).
        -:  862:  bool isPPC() const {
        -:  863:    return getArch() == Triple::ppc || getArch() == Triple::ppc64 ||
        -:  864:           getArch() == Triple::ppcle || getArch() == Triple::ppc64le;
        -:  865:  }
        -:  866:
        -:  867:  /// Tests whether the target is 32-bit PowerPC (little and big endian).
        -:  868:  bool isPPC32() const {
        -:  869:    return getArch() == Triple::ppc || getArch() == Triple::ppcle;
        -:  870:  }
        -:  871:
        -:  872:  /// Tests whether the target is 64-bit PowerPC (little and big endian).
        -:  873:  bool isPPC64() const {
        -:  874:    return getArch() == Triple::ppc64 || getArch() == Triple::ppc64le;
        -:  875:  }
        -:  876:
        -:  877:  /// Tests whether the target is 32-bit RISC-V.
        -:  878:  bool isRISCV32() const { return getArch() == Triple::riscv32; }
        -:  879:
        -:  880:  /// Tests whether the target is 64-bit RISC-V.
        -:  881:  bool isRISCV64() const { return getArch() == Triple::riscv64; }
        -:  882:
        -:  883:  /// Tests whether the target is RISC-V (32- and 64-bit).
        -:  884:  bool isRISCV() const { return isRISCV32() || isRISCV64(); }
        -:  885:
        -:  886:  /// Tests whether the target is 32-bit SPARC (little and big endian).
        -:  887:  bool isSPARC32() const {
        -:  888:    return getArch() == Triple::sparc || getArch() == Triple::sparcel;
        -:  889:  }
        -:  890:
        -:  891:  /// Tests whether the target is 64-bit SPARC (big endian).
        -:  892:  bool isSPARC64() const { return getArch() == Triple::sparcv9; }
        -:  893:
        -:  894:  /// Tests whether the target is SPARC.
        -:  895:  bool isSPARC() const { return isSPARC32() || isSPARC64(); }
        -:  896:
        -:  897:  /// Tests whether the target is SystemZ.
        -:  898:  bool isSystemZ() const {
        -:  899:    return getArch() == Triple::systemz;
        -:  900:  }
        -:  901:
        -:  902:  /// Tests whether the target is x86 (32- or 64-bit).
        -:  903:  bool isX86() const {
        -:  904:    return getArch() == Triple::x86 || getArch() == Triple::x86_64;
        -:  905:  }
        -:  906:
        -:  907:  /// Tests whether the target is VE
        -:  908:  bool isVE() const {
        -:  909:    return getArch() == Triple::ve;
        -:  910:  }
        -:  911:
        -:  912:  /// Tests whether the target is wasm (32- and 64-bit).
        -:  913:  bool isWasm() const {
        -:  914:    return getArch() == Triple::wasm32 || getArch() == Triple::wasm64;
        -:  915:  }
        -:  916:
        -:  917:  // Tests whether the target is CSKY
        -:  918:  bool isCSKY() const {
        -:  919:    return getArch() == Triple::csky;
        -:  920:  }
        -:  921:
        -:  922:  /// Tests whether the target is the Apple "arm64e" AArch64 subarch.
        -:  923:  bool isArm64e() const {
        -:  924:    return getArch() == Triple::aarch64 &&
        -:  925:           getSubArch() == Triple::AArch64SubArch_arm64e;
        -:  926:  }
        -:  927:
        -:  928:  /// Tests whether the target is X32.
        -:  929:  bool isX32() const {
        -:  930:    EnvironmentType Env = getEnvironment();
        -:  931:    return Env == Triple::GNUX32 || Env == Triple::MuslX32;
        -:  932:  }
        -:  933:
        -:  934:  /// Tests whether the target supports comdat
        -:  935:  bool supportsCOMDAT() const {
        -:  936:    return !(isOSBinFormatMachO() || isOSBinFormatXCOFF() ||
        -:  937:             isOSBinFormatDXContainer());
        -:  938:  }
        -:  939:
        -:  940:  /// Tests whether the target uses emulated TLS as default.
        -:  941:  bool hasDefaultEmulatedTLS() const {
        -:  942:    return isAndroid() || isOSOpenBSD() || isWindowsCygwinEnvironment();
        -:  943:  }
        -:  944:
        -:  945:  /// Tests whether the target uses -data-sections as default.
        -:  946:  bool hasDefaultDataSections() const {
        -:  947:    return isOSBinFormatXCOFF() || isWasm();
        -:  948:  }
        -:  949:
        -:  950:  /// Tests if the environment supports dllimport/export annotations.
        -:  951:  bool hasDLLImportExport() const { return isOSWindows() || isPS(); }
        -:  952:
        -:  953:  /// @}
        -:  954:  /// @name Mutators
        -:  955:  /// @{
        -:  956:
        -:  957:  /// Set the architecture (first) component of the triple to a known type.
        -:  958:  void setArch(ArchType Kind, SubArchType SubArch = NoSubArch);
        -:  959:
        -:  960:  /// Set the vendor (second) component of the triple to a known type.
        -:  961:  void setVendor(VendorType Kind);
        -:  962:
        -:  963:  /// Set the operating system (third) component of the triple to a known type.
        -:  964:  void setOS(OSType Kind);
        -:  965:
        -:  966:  /// Set the environment (fourth) component of the triple to a known type.
        -:  967:  void setEnvironment(EnvironmentType Kind);
        -:  968:
        -:  969:  /// Set the object file format.
        -:  970:  void setObjectFormat(ObjectFormatType Kind);
        -:  971:
        -:  972:  /// Set all components to the new triple \p Str.
        -:  973:  void setTriple(const Twine &Str);
        -:  974:
        -:  975:  /// Set the architecture (first) component of the triple by name.
        -:  976:  void setArchName(StringRef Str);
        -:  977:
        -:  978:  /// Set the vendor (second) component of the triple by name.
        -:  979:  void setVendorName(StringRef Str);
        -:  980:
        -:  981:  /// Set the operating system (third) component of the triple by name.
        -:  982:  void setOSName(StringRef Str);
        -:  983:
        -:  984:  /// Set the optional environment (fourth) component of the triple by name.
        -:  985:  void setEnvironmentName(StringRef Str);
        -:  986:
        -:  987:  /// Set the operating system and optional environment components with a single
        -:  988:  /// string.
        -:  989:  void setOSAndEnvironmentName(StringRef Str);
        -:  990:
        -:  991:  /// @}
        -:  992:  /// @name Helpers to build variants of a particular triple.
        -:  993:  /// @{
        -:  994:
        -:  995:  /// Form a triple with a 32-bit variant of the current architecture.
        -:  996:  ///
        -:  997:  /// This can be used to move across "families" of architectures where useful.
        -:  998:  ///
        -:  999:  /// \returns A new triple with a 32-bit architecture or an unknown
        -: 1000:  ///          architecture if no such variant can be found.
        -: 1001:  llvm::Triple get32BitArchVariant() const;
        -: 1002:
        -: 1003:  /// Form a triple with a 64-bit variant of the current architecture.
        -: 1004:  ///
        -: 1005:  /// This can be used to move across "families" of architectures where useful.
        -: 1006:  ///
        -: 1007:  /// \returns A new triple with a 64-bit architecture or an unknown
        -: 1008:  ///          architecture if no such variant can be found.
        -: 1009:  llvm::Triple get64BitArchVariant() const;
        -: 1010:
        -: 1011:  /// Form a triple with a big endian variant of the current architecture.
        -: 1012:  ///
        -: 1013:  /// This can be used to move across "families" of architectures where useful.
        -: 1014:  ///
        -: 1015:  /// \returns A new triple with a big endian architecture or an unknown
        -: 1016:  ///          architecture if no such variant can be found.
        -: 1017:  llvm::Triple getBigEndianArchVariant() const;
        -: 1018:
        -: 1019:  /// Form a triple with a little endian variant of the current architecture.
        -: 1020:  ///
        -: 1021:  /// This can be used to move across "families" of architectures where useful.
        -: 1022:  ///
        -: 1023:  /// \returns A new triple with a little endian architecture or an unknown
        -: 1024:  ///          architecture if no such variant can be found.
        -: 1025:  llvm::Triple getLittleEndianArchVariant() const;
        -: 1026:
        -: 1027:  /// Get the (LLVM) name of the minimum ARM CPU for the arch we are targeting.
        -: 1028:  ///
        -: 1029:  /// \param Arch the architecture name (e.g., "armv7s"). If it is an empty
        -: 1030:  /// string then the triple's arch name is used.
        -: 1031:  StringRef getARMCPUForArch(StringRef Arch = StringRef()) const;
        -: 1032:
        -: 1033:  /// Tests whether the target triple is little endian.
        -: 1034:  ///
        -: 1035:  /// \returns true if the triple is little endian, false otherwise.
        -: 1036:  bool isLittleEndian() const;
        -: 1037:
        -: 1038:  /// Test whether target triples are compatible.
        -: 1039:  bool isCompatibleWith(const Triple &Other) const;
        -: 1040:
        -: 1041:  /// Merge target triples.
        -: 1042:  std::string merge(const Triple &Other) const;
        -: 1043:
        -: 1044:  /// Some platforms have different minimum supported OS versions that
        -: 1045:  /// varies by the architecture specified in the triple. This function
        -: 1046:  /// returns the minimum supported OS version for this triple if one an exists,
        -: 1047:  /// or an invalid version tuple if this triple doesn't have one.
        -: 1048:  VersionTuple getMinimumSupportedOSVersion() const;
        -: 1049:
        -: 1050:  /// @}
        -: 1051:  /// @name Static helpers for IDs.
        -: 1052:  /// @{
        -: 1053:
        -: 1054:  /// Get the canonical name for the \p Kind architecture.
        -: 1055:  static StringRef getArchTypeName(ArchType Kind);
        -: 1056:
        -: 1057:  /// Get the "prefix" canonical name for the \p Kind architecture. This is the
        -: 1058:  /// prefix used by the architecture specific builtins, and is suitable for
        -: 1059:  /// passing to \see Intrinsic::getIntrinsicForClangBuiltin().
        -: 1060:  ///
        -: 1061:  /// \return - The architecture prefix, or 0 if none is defined.
        -: 1062:  static StringRef getArchTypePrefix(ArchType Kind);
        -: 1063:
        -: 1064:  /// Get the canonical name for the \p Kind vendor.
        -: 1065:  static StringRef getVendorTypeName(VendorType Kind);
        -: 1066:
        -: 1067:  /// Get the canonical name for the \p Kind operating system.
        -: 1068:  static StringRef getOSTypeName(OSType Kind);
        -: 1069:
        -: 1070:  /// Get the canonical name for the \p Kind environment.
        -: 1071:  static StringRef getEnvironmentTypeName(EnvironmentType Kind);
        -: 1072:
        -: 1073:  /// @}
        -: 1074:  /// @name Static helpers for converting alternate architecture names.
        -: 1075:  /// @{
        -: 1076:
        -: 1077:  /// The canonical type for the given LLVM architecture name (e.g., "x86").
        -: 1078:  static ArchType getArchTypeForLLVMName(StringRef Str);
        -: 1079:
        -: 1080:  /// @}
        -: 1081:
        -: 1082:  /// Returns a canonicalized OS version number for the specified OS.
        -: 1083:  static VersionTuple getCanonicalVersionForOS(OSType OSKind,
        -: 1084:                                               const VersionTuple &Version);
        -: 1085:};
        -: 1086:
        -: 1087:} // End llvm namespace
        -: 1088:
        -: 1089:
        -: 1090:#endif
