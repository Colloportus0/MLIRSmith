        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SPIRV/Transforms/RewriteInsertsPass.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/RewriteInsertsPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/RewriteInsertsPass.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- RewriteInsertsPass.cpp - MLIR conversion pass ----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to rewrite sequential chains of
        -:   10:// `spirv::CompositeInsert` operations into `spirv::CompositeConstruct`
        -:   11:// operations.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/SPIRV/Transforms/Passes.h"
        -:   16:
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   18:#include "mlir/IR/Builders.h"
        -:   19:#include "mlir/IR/BuiltinOps.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace spirv {
        -:   23:#define GEN_PASS_DEF_SPIRVREWRITEINSERTSPASS
        -:   24:#include "mlir/Dialect/SPIRV/Transforms/Passes.h.inc"
        -:   25:} // namespace spirv
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:
        -:   30:namespace {
        -:   31:
        -:   32:/// Replaces sequential chains of `spirv::CompositeInsertOp` operation into
        -:   33:/// `spirv::CompositeConstructOp` operation if possible.
   167058:   34:class RewriteInsertsPass
call    0 returned 100%
call    1 returned 100%
        -:   35:    : public spirv::impl::SPIRVRewriteInsertsPassBase<RewriteInsertsPass> {
        -:   36:public:
        -:   37:  void runOnOperation() override;
        -:   38:
        -:   39:private:
        -:   40:  /// Collects a sequential insertion chain by the given
        -:   41:  /// `spirv::CompositeInsertOp` operation, if the given operation is the last
        -:   42:  /// in the chain.
        -:   43:  LogicalResult
        -:   44:  collectInsertionChain(spirv::CompositeInsertOp op,
        -:   45:                        SmallVectorImpl<spirv::CompositeInsertOp> &insertions);
        -:   46:};
        -:   47:
        -:   48:} // namespace
        -:   49:
function _ZN12_GLOBAL__N_118RewriteInsertsPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   50:void RewriteInsertsPass::runOnOperation() {
    #####:   51:  SmallVector<SmallVector<spirv::CompositeInsertOp, 4>, 4> workList;
call    0 never executed
call    1 never executed
function _ZZN12_GLOBAL__N_118RewriteInsertsPass14runOnOperationEvENKUlN4mlir5spirv17CompositeInsertOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   52:  getOperation().walk([this, &workList](spirv::CompositeInsertOp op) {
call    0 never executed
call    1 never executed
    #####:   53:    SmallVector<spirv::CompositeInsertOp, 4> insertions;
call    0 never executed
    #####:   54:    if (succeeded(collectInsertionChain(op, insertions)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:      workList.push_back(insertions);
call    0 never executed
    #####:   56:  });
        -:   57:
    #####:   58:  for (const auto &insertions : workList) {
branch  0 never executed
branch  1 never executed
    #####:   59:    auto lastCompositeInsertOp = insertions.back();
call    0 never executed
    #####:   60:    auto compositeType = lastCompositeInsertOp.getType();
    #####:   61:    auto location = lastCompositeInsertOp.getLoc();
        -:   62:
    #####:   63:    SmallVector<Value, 4> operands;
        -:   64:    // Collect inserted objects.
    #####:   65:    for (auto insertionOp : insertions)
branch  0 never executed
branch  1 never executed
    #####:   66:      operands.push_back(insertionOp.getObject());
call    0 never executed
call    1 never executed
        -:   67:
    #####:   68:    OpBuilder builder(lastCompositeInsertOp);
call    0 never executed
    #####:   69:    auto compositeConstructOp = builder.create<spirv::CompositeConstructOp>(
    #####:   70:        location, compositeType, operands);
call    0 never executed
        -:   71:
    #####:   72:    lastCompositeInsertOp.replaceAllUsesWith(
    #####:   73:        compositeConstructOp->getResult(0));
call    0 never executed
        -:   74:
        -:   75:    // Erase ops.
    #####:   76:    for (auto insertOp : llvm::reverse(insertions)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   77:      auto *op = insertOp.getOperation();
branch  0 never executed
branch  1 never executed
    #####:   78:      if (op->use_empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:        insertOp.erase();
call    0 never executed
        -:   80:    }
        -:   81:  }
    #####:   82:}
        -:   83:
        -:   84:LogicalResult RewriteInsertsPass::collectInsertionChain(
        -:   85:    spirv::CompositeInsertOp op,
        -:   86:    SmallVectorImpl<spirv::CompositeInsertOp> &insertions) {
        -:   87:  auto indicesArrayAttr = op.getIndices().cast<ArrayAttr>();
        -:   88:  // TODO: handle nested composite object.
        -:   89:  if (indicesArrayAttr.size() == 1) {
        -:   90:    auto numElements = op.getComposite()
        -:   91:                           .getType()
        -:   92:                           .cast<spirv::CompositeType>()
        -:   93:                           .getNumElements();
        -:   94:
        -:   95:    auto index = indicesArrayAttr[0].cast<IntegerAttr>().getInt();
        -:   96:    // Need a last index to collect a sequential chain.
        -:   97:    if (index + 1 != numElements)
        -:   98:      return failure();
        -:   99:
        -:  100:    insertions.resize(numElements);
        -:  101:    while (true) {
        -:  102:      insertions[index] = op;
        -:  103:
        -:  104:      if (index == 0)
        -:  105:        return success();
        -:  106:
        -:  107:      op = op.getComposite().getDefiningOp<spirv::CompositeInsertOp>();
        -:  108:      if (!op)
        -:  109:        return failure();
        -:  110:
        -:  111:      --index;
        -:  112:      indicesArrayAttr = op.getIndices().cast<ArrayAttr>();
        -:  113:      if ((indicesArrayAttr.size() != 1) ||
        -:  114:          (indicesArrayAttr[0].cast<IntegerAttr>().getInt() != index))
        -:  115:        return failure();
        -:  116:    }
        -:  117:  }
        -:  118:  return failure();
        -:  119:}
        -:  120:
        -:  121:std::unique_ptr<mlir::OperationPass<spirv::ModuleOp>>
function _ZN4mlir5spirv24createRewriteInsertsPassEv called 129258 returned 100% blocks executed 100%
   129258:  122:mlir::spirv::createRewriteInsertsPass() {
   129258:  123:  return std::make_unique<RewriteInsertsPass>();
call    0 returned 100%
        -:  124:}
