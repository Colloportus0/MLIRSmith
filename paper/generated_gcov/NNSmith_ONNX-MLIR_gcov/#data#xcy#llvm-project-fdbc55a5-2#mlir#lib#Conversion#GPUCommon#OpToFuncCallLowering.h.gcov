        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/GPUCommon/OpToFuncCallLowering.h
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUToROCDL/CMakeFiles/obj.MLIRGPUToROCDLTransforms.dir/LowerGpuOpsToROCDLOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUToROCDL/CMakeFiles/obj.MLIRGPUToROCDLTransforms.dir/LowerGpuOpsToROCDLOps.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- OpToFuncCallLowering.h - GPU ops lowering to custom calls *- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:#ifndef MLIR_CONVERSION_GPUCOMMON_OPTOFUNCCALLLOWERING_H_
        -:    9:#define MLIR_CONVERSION_GPUCOMMON_OPTOFUNCCALLLOWERING_H_
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   12:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   13:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   14:#include "mlir/IR/Builders.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:
        -:   18:/// Rewriting that replace SourceOp with a CallOp to `f32Func` or `f64Func`
        -:   19:/// depending on the element type that Op operates upon. The function
        -:   20:/// declaration is added in case it was not added before.
        -:   21:///
        -:   22:/// If the input values are of f16 type, the value is first casted to f32, the
        -:   23:/// function called and then the result casted back.
        -:   24:///
        -:   25:/// Example with NVVM:
        -:   26:///   %exp_f32 = math.exp %arg_f32 : f32
        -:   27:///
        -:   28:/// will be transformed into
        -:   29:///   llvm.call @__nv_expf(%arg_f32) : (f32) -> f32
        -:   30:template <typename SourceOp>
        -:   31:struct OpToFuncCallLowering : public ConvertOpToLLVMPattern<SourceOp> {
        -:   32:public:
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math7FloorOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math7FloorOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6AtanOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6AtanOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6CeilOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6CeilOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math5CosOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math5CosOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math5ExpOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math5ExpOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6TanhOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6TanhOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math5LogOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math5LogOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math7Log10OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math7Log10OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6Log2OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6Log2OpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6PowFOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6PowFOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math5SinOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math5SinOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZN4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_:
function _ZN4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEEC2ERNS_17LLVMTypeConverterEN4llvm9StringRefES7_ called 0 returned 0% blocks executed 0%
    #####:   33:  explicit OpToFuncCallLowering(LLVMTypeConverter &lowering, StringRef f32Func,
        -:   34:                                StringRef f64Func)
        -:   35:      : ConvertOpToLLVMPattern<SourceOp>(lowering), f32Func(f32Func),
    #####:   36:        f64Func(f64Func) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
        -:   37:
        -:   38:  LogicalResult
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
    #####:   57:    StringRef funcName = getFunctionName(
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
    #####:   59:    if (funcName.empty())
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
    #####:   63:    auto callOp =
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
    #####:   75:    return success();
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5LogOpEE15matchAndRewriteES2_NS1_12LogOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5LogOpEE15matchAndRewriteES2_NS1_12LogOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6TanhOpEE15matchAndRewriteES2_NS1_13TanhOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6TanhOpEE15matchAndRewriteES2_NS1_13TanhOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEE15matchAndRewriteES2_NS1_13SqrtOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEE15matchAndRewriteES2_NS1_13SqrtOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5SinOpEE15matchAndRewriteES2_NS1_12SinOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5SinOpEE15matchAndRewriteES2_NS1_12SinOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEE15matchAndRewriteES2_NS1_14RsqrtOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEE15matchAndRewriteES2_NS1_14RsqrtOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6PowFOpEE15matchAndRewriteES2_NS1_13PowFOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6PowFOpEE15matchAndRewriteES2_NS1_13PowFOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6Log2OpEE15matchAndRewriteES2_NS1_13Log2OpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6Log2OpEE15matchAndRewriteES2_NS1_13Log2OpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEE15matchAndRewriteES2_NS1_14Log1pOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEE15matchAndRewriteES2_NS1_14Log1pOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Log10OpEE15matchAndRewriteES2_NS1_14Log10OpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Log10OpEE15matchAndRewriteES2_NS1_14Log10OpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEE15matchAndRewriteES2_NS1_13AbsFOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEE15matchAndRewriteES2_NS1_13AbsFOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7FloorOpEE15matchAndRewriteES2_NS1_14FloorOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7FloorOpEE15matchAndRewriteES2_NS1_14FloorOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEE15matchAndRewriteES2_NS1_14ExpM1OpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEE15matchAndRewriteES2_NS1_14ExpM1OpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEE15matchAndRewriteES2_NS1_13Exp2OpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEE15matchAndRewriteES2_NS1_13Exp2OpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5ExpOpEE15matchAndRewriteES2_NS1_12ExpOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5ExpOpEE15matchAndRewriteES2_NS1_12ExpOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5CosOpEE15matchAndRewriteES2_NS1_12CosOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5CosOpEE15matchAndRewriteES2_NS1_12CosOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6CeilOpEE15matchAndRewriteES2_NS1_13CeilOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6CeilOpEE15matchAndRewriteES2_NS1_13CeilOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEE15matchAndRewriteES2_NS1_14Atan2OpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEE15matchAndRewriteES2_NS1_14Atan2OpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6AtanOpEE15matchAndRewriteES2_NS1_13AtanOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6AtanOpEE15matchAndRewriteES2_NS1_13AtanOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
call    0 never executed
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
        -:   41:    using LLVM::LLVMFuncOp;
        -:   42:
        -:   43:    static_assert(
        -:   44:        std::is_base_of<OpTrait::OneResult<SourceOp>, SourceOp>::value,
        -:   45:        "expected single result op");
        -:   46:
        -:   47:    static_assert(std::is_base_of<OpTrait::SameOperandsAndResultType<SourceOp>,
        -:   48:                                  SourceOp>::value,
        -:   49:                  "expected op with same operand and result types");
        -:   50:
    #####:   51:    SmallVector<Value, 1> castedOperands;
    #####:   52:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   53:      castedOperands.push_back(maybeCast(operand, rewriter));
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:    Type resultType = castedOperands.front().getType();
call    0 never executed
    #####:   56:    Type funcType = getFunctionType(resultType, castedOperands);
call    0 never executed
call    1 never executed
    #####:   57:    StringRef funcName = getFunctionName(
call    0 never executed
    #####:   58:        funcType.cast<LLVM::LLVMFunctionType>().getReturnType());
call    0 never executed
    #####:   59:    if (funcName.empty())
branch  0 never executed
branch  1 never executed
    #####:   60:      return failure();
        -:   61:
    #####:   62:    LLVMFuncOp funcOp = appendOrGetFuncOp(funcName, funcType, op);
call    0 never executed
    #####:   63:    auto callOp =
call    0 never executed
        -:   64:        rewriter.create<LLVM::CallOp>(op->getLoc(), funcOp, castedOperands);
        -:   65:
    #####:   66:    if (resultType == adaptor.getOperands().front().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:      rewriter.replaceOp(op, {callOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:      return success();
        -:   69:    }
        -:   70:
    #####:   71:    Value truncated = rewriter.create<LLVM::FPTruncOp>(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:        op->getLoc(), adaptor.getOperands().front().getType(),
call    0 never executed
call    1 never executed
        -:   73:        callOp.getResult());
    #####:   74:    rewriter.replaceOp(op, {truncated});
call    0 never executed
call    1 never executed
    #####:   75:    return success();
branch  0 never executed
branch  1 never executed
        -:   76:  }
------------------
        -:   77:
        -:   78:private:
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
    #####:   81:    if (!type.isa<Float16Type>())
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5LogOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5LogOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6TanhOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6TanhOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5SinOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5SinOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6PowFOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6PowFOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6Log2OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6Log2OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Log10OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Log10OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7FloorOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7FloorOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5ExpOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5ExpOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5CosOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5CosOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6CeilOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6CeilOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6AtanOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6AtanOpEE9maybeCastENS_5ValueERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   79:  Value maybeCast(Value operand, PatternRewriter &rewriter) const {
    #####:   80:    Type type = operand.getType();
call    0 never executed
    #####:   81:    if (!type.isa<Float16Type>())
branch  0 never executed
branch  1 never executed
    #####:   82:      return operand;
        -:   83:
    #####:   84:    return rewriter.create<LLVM::FPExtOp>(
call    0 never executed
call    1 never executed
    #####:   85:        operand.getLoc(), Float32Type::get(rewriter.getContext()), operand);
call    0 never executed
        -:   86:  }
------------------
        -:   87:
        -:   88:  Type getFunctionType(Type resultType, ValueRange operands) const {
        -:   89:    SmallVector<Type> operandTypes(operands.getTypes());
        -:   90:    return LLVM::LLVMFunctionType::get(resultType, operandTypes);
        -:   91:  }
        -:   92:
    #####:   93:  StringRef getFunctionName(Type type) const {
    #####:   94:    if (type.isa<Float32Type>())
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5LogOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5LogOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6TanhOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6TanhOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6SqrtOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5SinOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5SinOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7RsqrtOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6PowFOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6PowFOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6Log2OpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6Log2OpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Log1pOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Log10OpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Log10OpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6AbsFOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7FloorOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7FloorOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7ExpM1OpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6Exp2OpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5ExpOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5ExpOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math5CosOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math5CosOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6CeilOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6CeilOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math7Atan2OpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
_ZNK4mlir20OpToFuncCallLoweringINS_4math6AtanOpEE15getFunctionNameENS_4TypeE:
function _ZNK4mlir20OpToFuncCallLoweringINS_4math6AtanOpEE15getFunctionNameENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   93:  StringRef getFunctionName(Type type) const {
call    0 never executed
    #####:   94:    if (type.isa<Float32Type>())
branch  0 never executed
branch  1 never executed
    #####:   95:      return f32Func;
    #####:   96:    if (type.isa<Float64Type>())
branch  0 never executed
branch  1 never executed
    #####:   97:      return f64Func;
    #####:   98:    return "";
        -:   99:  }
------------------
        -:  100:
    #####:  101:  LLVM::LLVMFuncOp appendOrGetFuncOp(StringRef funcName, Type funcType,
        -:  102:                                     Operation *op) const {
        -:  103:    using LLVM::LLVMFuncOp;
        -:  104:
    #####:  105:    auto funcAttr = StringAttr::get(op->getContext(), funcName);
    #####:  106:    Operation *funcOp = SymbolTable::lookupNearestSymbolFrom(op, funcAttr);
    #####:  107:    if (funcOp)
    #####:  108:      return cast<LLVMFuncOp>(*funcOp);
        -:  109:
    #####:  110:    mlir::OpBuilder b(op->getParentOfType<LLVMFuncOp>());
    #####:  111:    return b.create<LLVMFuncOp>(op->getLoc(), funcName, funcType);
        -:  112:  }
        -:  113:
        -:  114:  const std::string f32Func;
        -:  115:  const std::string f64Func;
        -:  116:};
        -:  117:
        -:  118:} // namespace mlir
        -:  119:
        -:  120:#endif // MLIR_CONVERSION_GPUCOMMON_OPTOFUNCCALLLOWERING_H_
