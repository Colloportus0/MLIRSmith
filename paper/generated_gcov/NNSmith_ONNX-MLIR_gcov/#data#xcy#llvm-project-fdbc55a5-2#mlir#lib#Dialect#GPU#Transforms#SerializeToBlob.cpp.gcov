        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/GPU/Transforms/SerializeToBlob.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/GPU/CMakeFiles/obj.MLIRGPUTransforms.dir/Transforms/SerializeToBlob.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/GPU/CMakeFiles/obj.MLIRGPUTransforms.dir/Transforms/SerializeToBlob.cpp.gcda
        -:    0:Runs:128626
        -:    1://===- SerializeToBlob.cpp - MLIR GPU lowering pass -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a base class for a pass to serialize a gpu module
        -:   10:// into a binary blob that can be executed on a GPU. The binary blob is added
        -:   11:// as a string attribute to the gpu module.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/GPU/Transforms/Passes.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Target/LLVMIR/Dialect/LLVMIR/LLVMToLLVMIRTranslation.h"
        -:   18:#include "mlir/Target/LLVMIR/Export.h"
        -:   19:#include "llvm/IR/LegacyPassManager.h"
        -:   20:#include "llvm/MC/TargetRegistry.h"
        -:   21:#include "llvm/Support/TargetSelect.h"
        -:   22:#include "llvm/Target/TargetMachine.h"
        -:   23:
        -:   24:#include <string>
        -:   25:
        -:   26:#define DEBUG_TYPE "serialize-to-blob"
        -:   27:
        -:   28:using namespace mlir;
        -:   29:
function _ZN4mlir3gpu29getDefaultGpuBinaryAnnotationB5cxx11Ev called 129245 returned 100% blocks executed 100%
  515123*:   30:std::string gpu::getDefaultGpuBinaryAnnotation() { return "gpu.binary"; }
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   31:
function _ZN4mlir3gpu19SerializeToBlobPassC2ENS_6TypeIDE called 385878 returned 100% blocks executed 78%
   385878:   32:gpu::SerializeToBlobPass::SerializeToBlobPass(TypeID passID)
   385878:   33:    : OperationPass<gpu::GPUModuleOp>(passID) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -:   34:
function _ZN4mlir3gpu19SerializeToBlobPassC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####:   35:gpu::SerializeToBlobPass::SerializeToBlobPass(const SerializeToBlobPass &other)
    #####:   36:    : OperationPass<gpu::GPUModuleOp>(other) {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   37:
        -:   38:Optional<std::string>
function _ZN4mlir3gpu19SerializeToBlobPass14translateToISAB5cxx11ERN4llvm6ModuleERNS2_13TargetMachineE called 0 returned 0% blocks executed 0%
    #####:   39:gpu::SerializeToBlobPass::translateToISA(llvm::Module &llvmModule,
        -:   40:                                         llvm::TargetMachine &targetMachine) {
    #####:   41:  llvmModule.setDataLayout(targetMachine.createDataLayout());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   42:
    #####:   43:  if (failed(optimizeLlvm(llvmModule, targetMachine)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   44:    return llvm::None;
        -:   45:
    #####:   46:  std::string targetISA;
call    0 never executed
    #####:   47:  llvm::raw_string_ostream stream(targetISA);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   48:
    #####:   49:  { // Drop pstream after this to prevent the ISA from being stuck buffering
    #####:   50:    llvm::buffer_ostream pstream(stream);
call    0 never executed
call    1 never executed
    #####:   51:    llvm::legacy::PassManager codegenPasses;
call    0 never executed
call    1 never executed
        -:   52:
    #####:   53:    if (targetMachine.addPassesToEmitFile(codegenPasses, pstream, nullptr,
branch  0 never executed
branch  1 never executed
    #####:   54:                                          llvm::CGFT_AssemblyFile))
call    0 never executed
    #####:   55:      return llvm::None;
call    0 never executed
        -:   56:
    #####:   57:    codegenPasses.run(llvmModule);
call    0 never executed
        -:   58:  }
    #####:   59:  return stream.str();
call    0 never executed
call    1 never executed
        -:   60:}
        -:   61:
function _ZN4mlir3gpu19SerializeToBlobPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   62:void gpu::SerializeToBlobPass::runOnOperation() {
        -:   63:  // Lower the module to an LLVM IR module using a separate context to enable
        -:   64:  // multi-threaded processing.
    #####:   65:  llvm::LLVMContext llvmContext;
call    0 never executed
    #####:   66:  std::unique_ptr<llvm::Module> llvmModule = translateToLLVMIR(llvmContext);
call    0 never executed
call    1 never executed
    #####:   67:  if (!llvmModule)
branch  0 never executed
branch  1 never executed
    #####:   68:    return signalPassFailure();
call    0 never executed
call    1 never executed
        -:   69:
        -:   70:  // Lower the LLVM IR module to target ISA.
    #####:   71:  std::unique_ptr<llvm::TargetMachine> targetMachine = createTargetMachine();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:  if (!targetMachine)
branch  0 never executed
branch  1 never executed
    #####:   73:    return signalPassFailure();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:
    #####:   75:  Optional<std::string> maybeTargetISA =
call    0 never executed
    #####:   76:      translateToISA(*llvmModule, *targetMachine);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   77:
    #####:   78:  if (!maybeTargetISA.has_value())
branch  0 never executed
branch  1 never executed
    #####:   79:    return signalPassFailure();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   80:
    #####:   81:  std::string targetISA = std::move(maybeTargetISA.value());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   82:
    #####:   83:  LLVM_DEBUG({
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
        -:   84:    llvm::dbgs() << "ISA for module: " << getOperation().getNameAttr() << "\n";
        -:   85:    llvm::dbgs() << targetISA << "\n";
        -:   86:    llvm::dbgs().flush();
        -:   87:  });
        -:   88:
        -:   89:  // Serialize the target ISA.
    #####:   90:  std::unique_ptr<std::vector<char>> blob = serializeISA(targetISA);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   91:  if (!blob)
branch  0 never executed
branch  1 never executed
    #####:   92:    return signalPassFailure();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   93:
        -:   94:  // Add the blob as module attribute.
    #####:   95:  auto attr =
call    0 never executed
    #####:   96:      StringAttr::get(&getContext(), StringRef(blob->data(), blob->size()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   97:  getOperation()->setAttr(gpuBinaryAnnotation, attr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   98:}
        -:   99:
        -:  100:LogicalResult
function _ZN4mlir3gpu19SerializeToBlobPass12optimizeLlvmERN4llvm6ModuleERNS2_13TargetMachineE called 0 returned 0% blocks executed 0%
    #####:  101:gpu::SerializeToBlobPass::optimizeLlvm(llvm::Module &llvmModule,
        -:  102:                                       llvm::TargetMachine &targetMachine) {
        -:  103:  // TODO: If serializeToCubin ends up defining optimizations, factor them
        -:  104:  // into here from SerializeToHsaco
    #####:  105:  return success();
        -:  106:}
        -:  107:
function _ZNK4mlir3gpu19SerializeToBlobPass20getDependentDialectsERNS_15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:  108:void gpu::SerializeToBlobPass::getDependentDialects(
        -:  109:    DialectRegistry &registry) const {
    #####:  110:  registerLLVMDialectTranslation(registry);
call    0 never executed
    #####:  111:  OperationPass<gpu::GPUModuleOp>::getDependentDialects(registry);
    #####:  112:}
        -:  113:
        -:  114:std::unique_ptr<llvm::TargetMachine>
function _ZN4mlir3gpu19SerializeToBlobPass19createTargetMachineEv called 0 returned 0% blocks executed 0%
    #####:  115:gpu::SerializeToBlobPass::createTargetMachine() {
    #####:  116:  Location loc = getOperation().getLoc();
call    0 never executed
call    1 never executed
    #####:  117:  std::string error;
call    0 never executed
    #####:  118:  const llvm::Target *target =
    #####:  119:      llvm::TargetRegistry::lookupTarget(triple, error);
call    0 never executed
    #####:  120:  if (!target) {
branch  0 never executed
branch  1 never executed
    #####:  121:    emitError(loc, Twine("failed to lookup target: ") + error);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  122:    return {};
        -:  123:  }
    #####:  124:  llvm::TargetMachine *machine =
call    0 never executed
    #####:  125:      target->createTargetMachine(triple, chip, features, {}, {});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  126:  if (!machine) {
branch  0 never executed
branch  1 never executed
    #####:  127:    emitError(loc, "failed to create target machine");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  128:    return {};
        -:  129:  }
        -:  130:
    #####:  131:  return std::unique_ptr<llvm::TargetMachine>{machine};
branch  0 never executed
branch  1 never executed
        -:  132:}
        -:  133:
        -:  134:std::unique_ptr<llvm::Module>
function _ZN4mlir3gpu19SerializeToBlobPass17translateToLLVMIRERN4llvm11LLVMContextE called 0 returned 0% blocks executed 0%
    #####:  135:gpu::SerializeToBlobPass::translateToLLVMIR(llvm::LLVMContext &llvmContext) {
    #####:  136:  return translateModuleToLLVMIR(getOperation(), llvmContext,
call    0 never executed
    #####:  137:                                 "LLVMDialectModule");
call    0 never executed
call    1 never executed
        -:  138:}
