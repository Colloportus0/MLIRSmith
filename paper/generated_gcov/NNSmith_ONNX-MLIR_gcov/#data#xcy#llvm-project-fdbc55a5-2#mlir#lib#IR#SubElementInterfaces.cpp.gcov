        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/SubElementInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/SubElementInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/SubElementInterfaces.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- SubElementInterfaces.cpp - Attr and Type SubElement Interfaces -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/SubElementInterfaces.h"
        -:   10:
        -:   11:#include "llvm/ADT/DenseSet.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15://===----------------------------------------------------------------------===//
        -:   16:// SubElementInterface
        -:   17://===----------------------------------------------------------------------===//
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// WalkSubElements
        -:   21:
        -:   22:template <typename InterfaceT>
10110387*:   23:static void walkSubElementsImpl(InterfaceT interface,
        -:   24:                                function_ref<void(Attribute)> walkAttrsFn,
        -:   25:                                function_ref<void(Type)> walkTypesFn,
        -:   26:                                DenseSet<Attribute> &visitedAttrs,
        -:   27:                                DenseSet<Type> &visitedTypes) {
20220774*:   28:  interface.walkImmediateSubElements(
    #####:   29:      [&](Attribute attr) {
------------------
_ZZ19walkSubElementsImplIN4mlir23SubElementTypeInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS5_E_clES5_:
function _ZZ19walkSubElementsImplIN4mlir23SubElementTypeInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS5_E_clES5_ called 0 returned 0% blocks executed 0%
    #####:   29:      [&](Attribute attr) {
call    0 never executed
------------------
_ZZ19walkSubElementsImplIN4mlir23SubElementAttrInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS5_E_clES5_:
function _ZZ19walkSubElementsImplIN4mlir23SubElementAttrInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS5_E_clES5_ called 956783 returned 100% blocks executed 67%
    #####:   29:      [&](Attribute attr) {
call    0 never executed
------------------
        -:   30:        // Guard against potentially null inputs. This removes the need for the
        -:   31:        // derived attribute/type to do it.
  956783*:   32:        if (!attr)
branch  0 never executed
branch  1 never executed
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   33:          return;
        -:   34:
        -:   35:        // Avoid infinite recursion when visiting sub attributes later, if this
        -:   36:        // is a mutable attribute.
  956783*:   37:        if (LLVM_UNLIKELY(attr.hasTrait<AttributeTrait::IsMutable>())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:   38:          if (!visitedAttrs.insert(attr).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   39:            return;
        -:   40:        }
        -:   41:
        -:   42:        // Walk any sub elements first.
  956783*:   43:        if (auto interface = attr.dyn_cast<SubElementAttrInterface>())
branch  0 never executed
branch  1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   44:          walkSubElementsImpl(interface, walkAttrsFn, walkTypesFn, visitedAttrs,
        -:   45:                              visitedTypes);
        -:   46:
        -:   47:        // Walk this attribute.
  956783*:   48:        walkAttrsFn(attr);
call    0 never executed
call    1 returned 100%
        -:   49:      },
 6743795*:   50:      [&](Type type) {
------------------
_ZZ19walkSubElementsImplIN4mlir23SubElementTypeInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS8_E0_clES8_:
function _ZZ19walkSubElementsImplIN4mlir23SubElementTypeInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS8_E0_clES8_ called 14356041 returned 100% blocks executed 100%
  6743795:   50:      [&](Type type) {
call    0 returned 100%
------------------
_ZZ19walkSubElementsImplIN4mlir23SubElementAttrInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS8_E0_clES8_:
function _ZZ19walkSubElementsImplIN4mlir23SubElementAttrInterfaceEEvT_N4llvm12function_refIFvNS0_9AttributeEEEENS4_IFvNS0_4TypeEEEERNS3_8DenseSetIS5_NS3_12DenseMapInfoIS5_vEEEERNSB_IS8_NSC_IS8_vEEEEENKUlS8_E0_clES8_ called 0 returned 0% blocks executed 0%
    #####:   50:      [&](Type type) {
call    0 never executed
------------------
        -:   51:        // Guard against potentially null inputs. This removes the need for the
        -:   52:        // derived attribute/type to do it.
14356041*:   53:        if (!type)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 never executed
branch  3 never executed
        -:   54:          return;
        -:   55:
        -:   56:        // Avoid infinite recursion when visiting sub types later, if this
        -:   57:        // is a mutable type.
14356041*:   58:        if (LLVM_UNLIKELY(type.hasTrait<TypeTrait::IsMutable>())) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
call    3 never executed
branch  4 never executed
branch  5 never executed
 1038702*:   59:          if (!visitedTypes.insert(type).second)
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   60:            return;
        -:   61:        }
        -:   62:
        -:   63:        // Walk any sub elements first.
14254140*:   64:        if (auto interface = type.dyn_cast<SubElementTypeInterface>())
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
branch  2 never executed
branch  3 never executed
 6743795*:   65:          walkSubElementsImpl(interface, walkAttrsFn, walkTypesFn, visitedAttrs,
        -:   66:                              visitedTypes);
        -:   67:
        -:   68:        // Walk this type.
14254140*:   69:        walkTypesFn(type);
call    0 returned 100%
call    1 never executed
        -:   70:      });
        -:   71:}
        -:   72:
function _ZN4mlir23SubElementAttrInterface15walkSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS2_IFvNS_4TypeEEEE called 756523 returned 100% blocks executed 89%
   756523:   73:void SubElementAttrInterface::walkSubElements(
        -:   74:    function_ref<void(Attribute)> walkAttrsFn,
        -:   75:    function_ref<void(Type)> walkTypesFn) {
  756523*:   76:  assert(walkAttrsFn && walkTypesFn && "expected valid walk functions");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
   756523:   77:  DenseSet<Attribute> visitedAttrs;
call    0 returned 100%
  1513046:   78:  DenseSet<Type> visitedTypes;
call    0 returned 100%
call    1 returned 100%
   756523:   79:  walkSubElementsImpl(*this, walkAttrsFn, walkTypesFn, visitedAttrs,
call    0 returned 100%
call    1 returned 100%
        -:   80:                      visitedTypes);
   756523:   81:}
        -:   82:
function _ZN4mlir23SubElementTypeInterface15walkSubElementsEN4llvm12function_refIFvNS_9AttributeEEEENS2_IFvNS_4TypeEEEE called 2610069 returned 100% blocks executed 89%
  2610069:   83:void SubElementTypeInterface::walkSubElements(
        -:   84:    function_ref<void(Attribute)> walkAttrsFn,
        -:   85:    function_ref<void(Type)> walkTypesFn) {
 2610069*:   86:  assert(walkAttrsFn && walkTypesFn && "expected valid walk functions");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
  2610069:   87:  DenseSet<Attribute> visitedAttrs;
call    0 returned 100%
  5220138:   88:  DenseSet<Type> visitedTypes;
call    0 returned 100%
call    1 returned 100%
  2610069:   89:  walkSubElementsImpl(*this, walkAttrsFn, walkTypesFn, visitedAttrs,
call    0 returned 100%
call    1 returned 100%
        -:   90:                      visitedTypes);
  2610069:   91:}
        -:   92:
        -:   93://===----------------------------------------------------------------------===//
        -:   94:// ReplaceSubElements
        -:   95:
        -:   96:template <typename InterfaceT, typename T, typename ReplaceSubElementFnT>
    #####:   97:static void updateSubElementImpl(
        -:   98:    T element, function_ref<std::pair<T, WalkResult>(T)> walkFn,
        -:   99:    DenseMap<T, T> &visited, SmallVectorImpl<T> &newElements,
        -:  100:    FailureOr<bool> &changed, ReplaceSubElementFnT &&replaceSubElementFn) {
        -:  101:  // Bail early if we failed at any point.
    #####:  102:  if (failed(changed))
        -:  103:    return;
    #####:  104:  newElements.push_back(element);
        -:  105:
        -:  106:  // Guard against potentially null inputs. We always map null to null.
    #####:  107:  if (!element)
        -:  108:    return;
        -:  109:
        -:  110:  // Check for an existing mapping for this element, and walk it if we haven't
        -:  111:  // yet.
    #####:  112:  T *mappedElement = &visited[element];
    #####:  113:  if (!*mappedElement) {
        -:  114:    WalkResult result = WalkResult::advance();
    #####:  115:    std::tie(*mappedElement, result) = walkFn(element);
        -:  116:
        -:  117:    // Try walking this element.
    #####:  118:    if (result.wasInterrupted() || !*mappedElement) {
    #####:  119:      changed = failure();
    #####:  120:      return;
        -:  121:    }
        -:  122:
        -:  123:    // Handle replacing sub-elements if this element is also a container.
    #####:  124:    if (!result.wasSkipped()) {
    #####:  125:      if (auto interface = mappedElement->template dyn_cast<InterfaceT>()) {
        -:  126:        // Cache the size of the `visited` map since it may grow when calling
        -:  127:        // `replaceSubElementFn` and we would need to fetch again the (now
        -:  128:        // invalidated) reference to `mappedElement`.
    #####:  129:        size_t visitedSize = visited.size();
    #####:  130:        auto replacedElement = replaceSubElementFn(interface);
    #####:  131:        if (!replacedElement) {
    #####:  132:          changed = failure();
    #####:  133:          return;
        -:  134:        }
    #####:  135:        if (visitedSize != visited.size())
    #####:  136:          mappedElement = &visited[element];
    #####:  137:        *mappedElement = replacedElement;
        -:  138:      }
        -:  139:    }
        -:  140:  }
        -:  141:
        -:  142:  // Update to the mapped element.
    #####:  143:  if (*mappedElement != element) {
    #####:  144:    newElements.back() = *mappedElement;
    #####:  145:    changed = true;
        -:  146:  }
        -:  147:}
------------------
_Z20updateSubElementImplIN4mlir23SubElementTypeInterfaceENS0_4TypeERZ22replaceSubElementsImplIS1_ENT_9ValueTypeES4_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEES9_EEENS7_IFS8_IS2_SA_ES2_EEERNS6_8DenseMapIS9_S9_NS6_12DenseMapInfoIS9_vEENS6_6detail12DenseMapPairIS9_S9_EEEERNSH_IS2_S2_NSI_IS2_vEENSL_IS2_S2_EEEEEUlS4_E_EvT0_NS7_IFS8_ISV_SA_ESV_EEERNSH_ISV_SV_NSI_ISV_vEENSL_ISV_SV_EEEERNS6_15SmallVectorImplISV_EERNS0_9FailureOrIbEEOT1_:
function _Z20updateSubElementImplIN4mlir23SubElementTypeInterfaceENS0_4TypeERZ22replaceSubElementsImplIS1_ENT_9ValueTypeES4_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEES9_EEENS7_IFS8_IS2_SA_ES2_EEERNS6_8DenseMapIS9_S9_NS6_12DenseMapInfoIS9_vEENS6_6detail12DenseMapPairIS9_S9_EEEERNSH_IS2_S2_NSI_IS2_vEENSL_IS2_S2_EEEEEUlS4_E_EvT0_NS7_IFS8_ISV_SA_ESV_EEERNSH_ISV_SV_NSI_ISV_vEENSL_ISV_SV_EEEERNS6_15SmallVectorImplISV_EERNS0_9FailureOrIbEEOT1_ called 0 returned 0% blocks executed 0%
    #####:   97:static void updateSubElementImpl(
branch  0 never executed
branch  1 never executed
        -:   98:    T element, function_ref<std::pair<T, WalkResult>(T)> walkFn,
        -:   99:    DenseMap<T, T> &visited, SmallVectorImpl<T> &newElements,
        -:  100:    FailureOr<bool> &changed, ReplaceSubElementFnT &&replaceSubElementFn) {
        -:  101:  // Bail early if we failed at any point.
    #####:  102:  if (failed(changed))
branch  0 never executed
branch  1 never executed
        -:  103:    return;
    #####:  104:  newElements.push_back(element);
call    0 never executed
        -:  105:
        -:  106:  // Guard against potentially null inputs. We always map null to null.
    #####:  107:  if (!element)
branch  0 never executed
branch  1 never executed
        -:  108:    return;
        -:  109:
        -:  110:  // Check for an existing mapping for this element, and walk it if we haven't
        -:  111:  // yet.
    #####:  112:  T *mappedElement = &visited[element];
call    0 never executed
    #####:  113:  if (!*mappedElement) {
branch  0 never executed
branch  1 never executed
        -:  114:    WalkResult result = WalkResult::advance();
    #####:  115:    std::tie(*mappedElement, result) = walkFn(element);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  116:
        -:  117:    // Try walking this element.
    #####:  118:    if (result.wasInterrupted() || !*mappedElement) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  119:      changed = failure();
    #####:  120:      return;
        -:  121:    }
        -:  122:
        -:  123:    // Handle replacing sub-elements if this element is also a container.
    #####:  124:    if (!result.wasSkipped()) {
branch  0 never executed
branch  1 never executed
    #####:  125:      if (auto interface = mappedElement->template dyn_cast<InterfaceT>()) {
branch  0 never executed
branch  1 never executed
        -:  126:        // Cache the size of the `visited` map since it may grow when calling
        -:  127:        // `replaceSubElementFn` and we would need to fetch again the (now
        -:  128:        // invalidated) reference to `mappedElement`.
    #####:  129:        size_t visitedSize = visited.size();
call    0 never executed
    #####:  130:        auto replacedElement = replaceSubElementFn(interface);
    #####:  131:        if (!replacedElement) {
branch  0 never executed
branch  1 never executed
    #####:  132:          changed = failure();
    #####:  133:          return;
        -:  134:        }
    #####:  135:        if (visitedSize != visited.size())
branch  0 never executed
branch  1 never executed
    #####:  136:          mappedElement = &visited[element];
call    0 never executed
    #####:  137:        *mappedElement = replacedElement;
        -:  138:      }
        -:  139:    }
        -:  140:  }
        -:  141:
        -:  142:  // Update to the mapped element.
    #####:  143:  if (*mappedElement != element) {
branch  0 never executed
branch  1 never executed
    #####:  144:    newElements.back() = *mappedElement;
call    0 never executed
    #####:  145:    changed = true;
        -:  146:  }
        -:  147:}
------------------
_Z20updateSubElementImplIN4mlir23SubElementAttrInterfaceENS0_9AttributeERZ22replaceSubElementsImplINS0_23SubElementTypeInterfaceEENT_9ValueTypeES5_N4llvm12function_refIFSt4pairIS2_NS0_10WalkResultEES2_EEENS8_IFS9_INS0_4TypeESA_ESE_EEERNS7_8DenseMapIS2_S2_NS7_12DenseMapInfoIS2_vEENS7_6detail12DenseMapPairIS2_S2_EEEERNSI_ISE_SE_NSJ_ISE_vEENSM_ISE_SE_EEEEEUlS5_E_EvT0_NS8_IFS9_ISW_SA_ESW_EEERNSI_ISW_SW_NSJ_ISW_vEENSM_ISW_SW_EEEERNS7_15SmallVectorImplISW_EERNS0_9FailureOrIbEEOT1_:
function _Z20updateSubElementImplIN4mlir23SubElementAttrInterfaceENS0_9AttributeERZ22replaceSubElementsImplINS0_23SubElementTypeInterfaceEENT_9ValueTypeES5_N4llvm12function_refIFSt4pairIS2_NS0_10WalkResultEES2_EEENS8_IFS9_INS0_4TypeESA_ESE_EEERNS7_8DenseMapIS2_S2_NS7_12DenseMapInfoIS2_vEENS7_6detail12DenseMapPairIS2_S2_EEEERNSI_ISE_SE_NSJ_ISE_vEENSM_ISE_SE_EEEEEUlS5_E_EvT0_NS8_IFS9_ISW_SA_ESW_EEERNSI_ISW_SW_NSJ_ISW_vEENSM_ISW_SW_EEEERNS7_15SmallVectorImplISW_EERNS0_9FailureOrIbEEOT1_ called 0 returned 0% blocks executed 0%
    #####:   97:static void updateSubElementImpl(
branch  0 never executed
branch  1 never executed
        -:   98:    T element, function_ref<std::pair<T, WalkResult>(T)> walkFn,
        -:   99:    DenseMap<T, T> &visited, SmallVectorImpl<T> &newElements,
        -:  100:    FailureOr<bool> &changed, ReplaceSubElementFnT &&replaceSubElementFn) {
        -:  101:  // Bail early if we failed at any point.
    #####:  102:  if (failed(changed))
branch  0 never executed
branch  1 never executed
        -:  103:    return;
    #####:  104:  newElements.push_back(element);
call    0 never executed
        -:  105:
        -:  106:  // Guard against potentially null inputs. We always map null to null.
    #####:  107:  if (!element)
branch  0 never executed
branch  1 never executed
        -:  108:    return;
        -:  109:
        -:  110:  // Check for an existing mapping for this element, and walk it if we haven't
        -:  111:  // yet.
    #####:  112:  T *mappedElement = &visited[element];
call    0 never executed
    #####:  113:  if (!*mappedElement) {
branch  0 never executed
branch  1 never executed
        -:  114:    WalkResult result = WalkResult::advance();
    #####:  115:    std::tie(*mappedElement, result) = walkFn(element);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  116:
        -:  117:    // Try walking this element.
    #####:  118:    if (result.wasInterrupted() || !*mappedElement) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  119:      changed = failure();
    #####:  120:      return;
        -:  121:    }
        -:  122:
        -:  123:    // Handle replacing sub-elements if this element is also a container.
    #####:  124:    if (!result.wasSkipped()) {
branch  0 never executed
branch  1 never executed
    #####:  125:      if (auto interface = mappedElement->template dyn_cast<InterfaceT>()) {
branch  0 never executed
branch  1 never executed
        -:  126:        // Cache the size of the `visited` map since it may grow when calling
        -:  127:        // `replaceSubElementFn` and we would need to fetch again the (now
        -:  128:        // invalidated) reference to `mappedElement`.
    #####:  129:        size_t visitedSize = visited.size();
call    0 never executed
    #####:  130:        auto replacedElement = replaceSubElementFn(interface);
    #####:  131:        if (!replacedElement) {
branch  0 never executed
branch  1 never executed
    #####:  132:          changed = failure();
    #####:  133:          return;
        -:  134:        }
    #####:  135:        if (visitedSize != visited.size())
branch  0 never executed
branch  1 never executed
    #####:  136:          mappedElement = &visited[element];
call    0 never executed
    #####:  137:        *mappedElement = replacedElement;
        -:  138:      }
        -:  139:    }
        -:  140:  }
        -:  141:
        -:  142:  // Update to the mapped element.
    #####:  143:  if (*mappedElement != element) {
branch  0 never executed
branch  1 never executed
    #####:  144:    newElements.back() = *mappedElement;
call    0 never executed
    #####:  145:    changed = true;
        -:  146:  }
        -:  147:}
------------------
_Z20updateSubElementImplIN4mlir23SubElementTypeInterfaceENS0_4TypeERZ22replaceSubElementsImplINS0_23SubElementAttrInterfaceEENT_9ValueTypeES5_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEESA_EEENS8_IFS9_IS2_SB_ES2_EEERNS7_8DenseMapISA_SA_NS7_12DenseMapInfoISA_vEENS7_6detail12DenseMapPairISA_SA_EEEERNSI_IS2_S2_NSJ_IS2_vEENSM_IS2_S2_EEEEEUlS5_E_EvT0_NS8_IFS9_ISW_SB_ESW_EEERNSI_ISW_SW_NSJ_ISW_vEENSM_ISW_SW_EEEERNS7_15SmallVectorImplISW_EERNS0_9FailureOrIbEEOT1_:
function _Z20updateSubElementImplIN4mlir23SubElementTypeInterfaceENS0_4TypeERZ22replaceSubElementsImplINS0_23SubElementAttrInterfaceEENT_9ValueTypeES5_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEESA_EEENS8_IFS9_IS2_SB_ES2_EEERNS7_8DenseMapISA_SA_NS7_12DenseMapInfoISA_vEENS7_6detail12DenseMapPairISA_SA_EEEERNSI_IS2_S2_NSJ_IS2_vEENSM_IS2_S2_EEEEEUlS5_E_EvT0_NS8_IFS9_ISW_SB_ESW_EEERNSI_ISW_SW_NSJ_ISW_vEENSM_ISW_SW_EEEERNS7_15SmallVectorImplISW_EERNS0_9FailureOrIbEEOT1_ called 0 returned 0% blocks executed 0%
    #####:   97:static void updateSubElementImpl(
branch  0 never executed
branch  1 never executed
        -:   98:    T element, function_ref<std::pair<T, WalkResult>(T)> walkFn,
        -:   99:    DenseMap<T, T> &visited, SmallVectorImpl<T> &newElements,
        -:  100:    FailureOr<bool> &changed, ReplaceSubElementFnT &&replaceSubElementFn) {
        -:  101:  // Bail early if we failed at any point.
    #####:  102:  if (failed(changed))
branch  0 never executed
branch  1 never executed
        -:  103:    return;
    #####:  104:  newElements.push_back(element);
call    0 never executed
        -:  105:
        -:  106:  // Guard against potentially null inputs. We always map null to null.
    #####:  107:  if (!element)
branch  0 never executed
branch  1 never executed
        -:  108:    return;
        -:  109:
        -:  110:  // Check for an existing mapping for this element, and walk it if we haven't
        -:  111:  // yet.
    #####:  112:  T *mappedElement = &visited[element];
call    0 never executed
    #####:  113:  if (!*mappedElement) {
branch  0 never executed
branch  1 never executed
        -:  114:    WalkResult result = WalkResult::advance();
    #####:  115:    std::tie(*mappedElement, result) = walkFn(element);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  116:
        -:  117:    // Try walking this element.
    #####:  118:    if (result.wasInterrupted() || !*mappedElement) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  119:      changed = failure();
    #####:  120:      return;
        -:  121:    }
        -:  122:
        -:  123:    // Handle replacing sub-elements if this element is also a container.
    #####:  124:    if (!result.wasSkipped()) {
branch  0 never executed
branch  1 never executed
    #####:  125:      if (auto interface = mappedElement->template dyn_cast<InterfaceT>()) {
branch  0 never executed
branch  1 never executed
        -:  126:        // Cache the size of the `visited` map since it may grow when calling
        -:  127:        // `replaceSubElementFn` and we would need to fetch again the (now
        -:  128:        // invalidated) reference to `mappedElement`.
    #####:  129:        size_t visitedSize = visited.size();
call    0 never executed
    #####:  130:        auto replacedElement = replaceSubElementFn(interface);
    #####:  131:        if (!replacedElement) {
branch  0 never executed
branch  1 never executed
    #####:  132:          changed = failure();
    #####:  133:          return;
        -:  134:        }
    #####:  135:        if (visitedSize != visited.size())
branch  0 never executed
branch  1 never executed
    #####:  136:          mappedElement = &visited[element];
call    0 never executed
    #####:  137:        *mappedElement = replacedElement;
        -:  138:      }
        -:  139:    }
        -:  140:  }
        -:  141:
        -:  142:  // Update to the mapped element.
    #####:  143:  if (*mappedElement != element) {
branch  0 never executed
branch  1 never executed
    #####:  144:    newElements.back() = *mappedElement;
call    0 never executed
    #####:  145:    changed = true;
        -:  146:  }
        -:  147:}
------------------
_Z20updateSubElementImplIN4mlir23SubElementAttrInterfaceENS0_9AttributeERZ22replaceSubElementsImplIS1_ENT_9ValueTypeES4_N4llvm12function_refIFSt4pairIS2_NS0_10WalkResultEES2_EEENS7_IFS8_INS0_4TypeES9_ESD_EEERNS6_8DenseMapIS2_S2_NS6_12DenseMapInfoIS2_vEENS6_6detail12DenseMapPairIS2_S2_EEEERNSH_ISD_SD_NSI_ISD_vEENSL_ISD_SD_EEEEEUlS4_E_EvT0_NS7_IFS8_ISV_S9_ESV_EEERNSH_ISV_SV_NSI_ISV_vEENSL_ISV_SV_EEEERNS6_15SmallVectorImplISV_EERNS0_9FailureOrIbEEOT1_:
function _Z20updateSubElementImplIN4mlir23SubElementAttrInterfaceENS0_9AttributeERZ22replaceSubElementsImplIS1_ENT_9ValueTypeES4_N4llvm12function_refIFSt4pairIS2_NS0_10WalkResultEES2_EEENS7_IFS8_INS0_4TypeES9_ESD_EEERNS6_8DenseMapIS2_S2_NS6_12DenseMapInfoIS2_vEENS6_6detail12DenseMapPairIS2_S2_EEEERNSH_ISD_SD_NSI_ISD_vEENSL_ISD_SD_EEEEEUlS4_E_EvT0_NS7_IFS8_ISV_S9_ESV_EEERNSH_ISV_SV_NSI_ISV_vEENSL_ISV_SV_EEEERNS6_15SmallVectorImplISV_EERNS0_9FailureOrIbEEOT1_ called 0 returned 0% blocks executed 0%
    #####:   97:static void updateSubElementImpl(
branch  0 never executed
branch  1 never executed
        -:   98:    T element, function_ref<std::pair<T, WalkResult>(T)> walkFn,
        -:   99:    DenseMap<T, T> &visited, SmallVectorImpl<T> &newElements,
        -:  100:    FailureOr<bool> &changed, ReplaceSubElementFnT &&replaceSubElementFn) {
        -:  101:  // Bail early if we failed at any point.
    #####:  102:  if (failed(changed))
branch  0 never executed
branch  1 never executed
        -:  103:    return;
    #####:  104:  newElements.push_back(element);
call    0 never executed
        -:  105:
        -:  106:  // Guard against potentially null inputs. We always map null to null.
    #####:  107:  if (!element)
branch  0 never executed
branch  1 never executed
        -:  108:    return;
        -:  109:
        -:  110:  // Check for an existing mapping for this element, and walk it if we haven't
        -:  111:  // yet.
    #####:  112:  T *mappedElement = &visited[element];
call    0 never executed
    #####:  113:  if (!*mappedElement) {
branch  0 never executed
branch  1 never executed
        -:  114:    WalkResult result = WalkResult::advance();
    #####:  115:    std::tie(*mappedElement, result) = walkFn(element);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  116:
        -:  117:    // Try walking this element.
    #####:  118:    if (result.wasInterrupted() || !*mappedElement) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  119:      changed = failure();
    #####:  120:      return;
        -:  121:    }
        -:  122:
        -:  123:    // Handle replacing sub-elements if this element is also a container.
    #####:  124:    if (!result.wasSkipped()) {
branch  0 never executed
branch  1 never executed
    #####:  125:      if (auto interface = mappedElement->template dyn_cast<InterfaceT>()) {
branch  0 never executed
branch  1 never executed
        -:  126:        // Cache the size of the `visited` map since it may grow when calling
        -:  127:        // `replaceSubElementFn` and we would need to fetch again the (now
        -:  128:        // invalidated) reference to `mappedElement`.
    #####:  129:        size_t visitedSize = visited.size();
call    0 never executed
    #####:  130:        auto replacedElement = replaceSubElementFn(interface);
    #####:  131:        if (!replacedElement) {
branch  0 never executed
branch  1 never executed
    #####:  132:          changed = failure();
    #####:  133:          return;
        -:  134:        }
    #####:  135:        if (visitedSize != visited.size())
branch  0 never executed
branch  1 never executed
    #####:  136:          mappedElement = &visited[element];
call    0 never executed
    #####:  137:        *mappedElement = replacedElement;
        -:  138:      }
        -:  139:    }
        -:  140:  }
        -:  141:
        -:  142:  // Update to the mapped element.
    #####:  143:  if (*mappedElement != element) {
branch  0 never executed
branch  1 never executed
    #####:  144:    newElements.back() = *mappedElement;
call    0 never executed
    #####:  145:    changed = true;
        -:  146:  }
        -:  147:}
------------------
        -:  148:
        -:  149:template <typename InterfaceT>
        -:  150:static typename InterfaceT::ValueType
    #####:  151:replaceSubElementsImpl(InterfaceT interface,
        -:  152:                       SubElementResultReplFn<Attribute> walkAttrsFn,
        -:  153:                       SubElementResultReplFn<Type> walkTypesFn,
        -:  154:                       DenseMap<Attribute, Attribute> &visitedAttrs,
        -:  155:                       DenseMap<Type, Type> &visitedTypes) {
        -:  156:  // Walk the current sub-elements, replacing them as necessary.
    #####:  157:  SmallVector<Attribute, 16> newAttrs;
    #####:  158:  SmallVector<Type, 16> newTypes;
    #####:  159:  FailureOr<bool> changed = false;
    #####:  160:  auto replaceSubElementFn = [&](auto subInterface) {
    #####:  161:    return replaceSubElementsImpl(subInterface, walkAttrsFn, walkTypesFn,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  162:                                  visitedAttrs, visitedTypes);
        -:  163:  };
    #####:  164:  interface.walkImmediateSubElements(
    #####:  165:      [&](Attribute element) {
    #####:  166:        updateSubElementImpl<SubElementAttrInterface>(
call    0 never executed
call    1 never executed
        -:  167:            element, walkAttrsFn, visitedAttrs, newAttrs, changed,
        -:  168:            replaceSubElementFn);
        -:  169:      },
    #####:  170:      [&](Type element) {
    #####:  171:        updateSubElementImpl<SubElementTypeInterface>(
call    0 never executed
call    1 never executed
        -:  172:            element, walkTypesFn, visitedTypes, newTypes, changed,
        -:  173:            replaceSubElementFn);
        -:  174:      });
    #####:  175:  if (failed(changed))
    #####:  176:    return {};
        -:  177:
        -:  178:  // If the sub-elements didn't change, just return the original value.
    #####:  179:  if (!*changed)
    #####:  180:    return interface;
        -:  181:
        -:  182:  // Use the new elements during the replacement.
    #####:  183:  return interface.replaceImmediateSubElements(newAttrs, newTypes);
        -:  184:}
------------------
_Z22replaceSubElementsImplIN4mlir23SubElementTypeInterfaceEENT_9ValueTypeES2_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEES7_EEENS5_IFS6_INS0_4TypeES8_ESC_EEERNS4_8DenseMapIS7_S7_NS4_12DenseMapInfoIS7_vEENS4_6detail12DenseMapPairIS7_S7_EEEERNSG_ISC_SC_NSH_ISC_vEENSK_ISC_SC_EEEE:
function _Z22replaceSubElementsImplIN4mlir23SubElementTypeInterfaceEENT_9ValueTypeES2_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEES7_EEENS5_IFS6_INS0_4TypeES8_ESC_EEERNS4_8DenseMapIS7_S7_NS4_12DenseMapInfoIS7_vEENS4_6detail12DenseMapPairIS7_S7_EEEERNSG_ISC_SC_NSH_ISC_vEENSK_ISC_SC_EEEE called 0 returned 0% blocks executed 0%
    #####:  151:replaceSubElementsImpl(InterfaceT interface,
call    0 never executed
        -:  152:                       SubElementResultReplFn<Attribute> walkAttrsFn,
        -:  153:                       SubElementResultReplFn<Type> walkTypesFn,
        -:  154:                       DenseMap<Attribute, Attribute> &visitedAttrs,
        -:  155:                       DenseMap<Type, Type> &visitedTypes) {
        -:  156:  // Walk the current sub-elements, replacing them as necessary.
    #####:  157:  SmallVector<Attribute, 16> newAttrs;
    #####:  158:  SmallVector<Type, 16> newTypes;
branch  0 never executed
branch  1 never executed
    #####:  159:  FailureOr<bool> changed = false;
call    0 never executed
    #####:  160:  auto replaceSubElementFn = [&](auto subInterface) {
        -:  161:    return replaceSubElementsImpl(subInterface, walkAttrsFn, walkTypesFn,
        -:  162:                                  visitedAttrs, visitedTypes);
        -:  163:  };
    #####:  164:  interface.walkImmediateSubElements(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  165:      [&](Attribute element) {
        -:  166:        updateSubElementImpl<SubElementAttrInterface>(
        -:  167:            element, walkAttrsFn, visitedAttrs, newAttrs, changed,
        -:  168:            replaceSubElementFn);
        -:  169:      },
        -:  170:      [&](Type element) {
        -:  171:        updateSubElementImpl<SubElementTypeInterface>(
        -:  172:            element, walkTypesFn, visitedTypes, newTypes, changed,
        -:  173:            replaceSubElementFn);
        -:  174:      });
    #####:  175:  if (failed(changed))
branch  0 never executed
branch  1 never executed
    #####:  176:    return {};
        -:  177:
        -:  178:  // If the sub-elements didn't change, just return the original value.
    #####:  179:  if (!*changed)
branch  0 never executed
branch  1 never executed
    #####:  180:    return interface;
        -:  181:
        -:  182:  // Use the new elements during the replacement.
    #####:  183:  return interface.replaceImmediateSubElements(newAttrs, newTypes);
call    0 never executed
        -:  184:}
------------------
_Z22replaceSubElementsImplIN4mlir23SubElementAttrInterfaceEENT_9ValueTypeES2_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEES7_EEENS5_IFS6_INS0_4TypeES8_ESC_EEERNS4_8DenseMapIS7_S7_NS4_12DenseMapInfoIS7_vEENS4_6detail12DenseMapPairIS7_S7_EEEERNSG_ISC_SC_NSH_ISC_vEENSK_ISC_SC_EEEE:
function _Z22replaceSubElementsImplIN4mlir23SubElementAttrInterfaceEENT_9ValueTypeES2_N4llvm12function_refIFSt4pairINS0_9AttributeENS0_10WalkResultEES7_EEENS5_IFS6_INS0_4TypeES8_ESC_EEERNS4_8DenseMapIS7_S7_NS4_12DenseMapInfoIS7_vEENS4_6detail12DenseMapPairIS7_S7_EEEERNSG_ISC_SC_NSH_ISC_vEENSK_ISC_SC_EEEE called 0 returned 0% blocks executed 0%
    #####:  151:replaceSubElementsImpl(InterfaceT interface,
call    0 never executed
        -:  152:                       SubElementResultReplFn<Attribute> walkAttrsFn,
        -:  153:                       SubElementResultReplFn<Type> walkTypesFn,
        -:  154:                       DenseMap<Attribute, Attribute> &visitedAttrs,
        -:  155:                       DenseMap<Type, Type> &visitedTypes) {
        -:  156:  // Walk the current sub-elements, replacing them as necessary.
    #####:  157:  SmallVector<Attribute, 16> newAttrs;
    #####:  158:  SmallVector<Type, 16> newTypes;
branch  0 never executed
branch  1 never executed
    #####:  159:  FailureOr<bool> changed = false;
call    0 never executed
    #####:  160:  auto replaceSubElementFn = [&](auto subInterface) {
        -:  161:    return replaceSubElementsImpl(subInterface, walkAttrsFn, walkTypesFn,
        -:  162:                                  visitedAttrs, visitedTypes);
        -:  163:  };
    #####:  164:  interface.walkImmediateSubElements(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  165:      [&](Attribute element) {
        -:  166:        updateSubElementImpl<SubElementAttrInterface>(
        -:  167:            element, walkAttrsFn, visitedAttrs, newAttrs, changed,
        -:  168:            replaceSubElementFn);
        -:  169:      },
        -:  170:      [&](Type element) {
        -:  171:        updateSubElementImpl<SubElementTypeInterface>(
        -:  172:            element, walkTypesFn, visitedTypes, newTypes, changed,
        -:  173:            replaceSubElementFn);
        -:  174:      });
    #####:  175:  if (failed(changed))
branch  0 never executed
branch  1 never executed
    #####:  176:    return {};
        -:  177:
        -:  178:  // If the sub-elements didn't change, just return the original value.
    #####:  179:  if (!*changed)
branch  0 never executed
branch  1 never executed
    #####:  180:    return interface;
        -:  181:
        -:  182:  // Use the new elements during the replacement.
    #####:  183:  return interface.replaceImmediateSubElements(newAttrs, newTypes);
call    0 never executed
        -:  184:}
------------------
        -:  185:
function _ZN4mlir23SubElementAttrInterface18replaceSubElementsEN4llvm12function_refIFSt4pairINS_9AttributeENS_10WalkResultEES4_EEENS2_IFS3_INS_4TypeES5_ES9_EEE called 0 returned 0% blocks executed 0%
    #####:  186:Attribute SubElementAttrInterface::replaceSubElements(
        -:  187:    SubElementResultReplFn<Attribute> replaceAttrFn,
        -:  188:    SubElementResultReplFn<Type> replaceTypeFn) {
    #####:  189:  assert(replaceAttrFn && replaceTypeFn && "expected valid replace functions");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  190:  DenseMap<Attribute, Attribute> visitedAttrs;
call    0 never executed
    #####:  191:  DenseMap<Type, Type> visitedTypes;
call    0 never executed
call    1 never executed
    #####:  192:  return replaceSubElementsImpl(*this, replaceAttrFn, replaceTypeFn,
    #####:  193:                                visitedAttrs, visitedTypes);
call    0 never executed
call    1 never executed
        -:  194:}
        -:  195:
function _ZN4mlir23SubElementTypeInterface18replaceSubElementsEN4llvm12function_refIFSt4pairINS_9AttributeENS_10WalkResultEES4_EEENS2_IFS3_INS_4TypeES5_ES9_EEE called 0 returned 0% blocks executed 0%
    #####:  196:Type SubElementTypeInterface::replaceSubElements(
        -:  197:    SubElementResultReplFn<Attribute> replaceAttrFn,
        -:  198:    SubElementResultReplFn<Type> replaceTypeFn) {
    #####:  199:  assert(replaceAttrFn && replaceTypeFn && "expected valid replace functions");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  200:  DenseMap<Attribute, Attribute> visitedAttrs;
call    0 never executed
    #####:  201:  DenseMap<Type, Type> visitedTypes;
call    0 never executed
call    1 never executed
    #####:  202:  return replaceSubElementsImpl(*this, replaceAttrFn, replaceTypeFn,
    #####:  203:                                visitedAttrs, visitedTypes);
call    0 never executed
call    1 never executed
        -:  204:}
        -:  205:
        -:  206://===----------------------------------------------------------------------===//
        -:  207:// SubElementInterface Tablegen definitions
        -:  208://===----------------------------------------------------------------------===//
        -:  209:
        -:  210:#include "mlir/IR/SubElementAttrInterfaces.cpp.inc"
        -:  211:#include "mlir/IR/SubElementTypeInterfaces.cpp.inc"
