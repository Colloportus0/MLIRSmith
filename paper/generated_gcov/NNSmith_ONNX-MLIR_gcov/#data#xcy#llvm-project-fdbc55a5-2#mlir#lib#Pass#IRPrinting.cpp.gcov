        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Pass/IRPrinting.cpp
        -:    0:Graph:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/IRPrinting.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/IRPrinting.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- IRPrinting.cpp -----------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "PassDetail.h"
        -:   10:#include "mlir/IR/SymbolTable.h"
        -:   11:#include "mlir/Pass/PassManager.h"
        -:   12:#include "llvm/Support/Format.h"
        -:   13:#include "llvm/Support/FormatVariadic.h"
        -:   14:#include "llvm/Support/SHA1.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::detail;
        -:   18:
        -:   19:namespace {
        -:   20://===----------------------------------------------------------------------===//
        -:   21:// OperationFingerPrint
        -:   22://===----------------------------------------------------------------------===//
        -:   23:
        -:   24:/// A unique fingerprint for a specific operation, and all of it's internal
        -:   25:/// operations.
        -:   26:class OperationFingerPrint {
        -:   27:public:
function _ZN12_GLOBAL__N_120OperationFingerPrintC2EPN4mlir9OperationE called 148 returned 100% blocks executed 100%
      148:   28:  OperationFingerPrint(Operation *topOp) {
      148:   29:    llvm::SHA1 hasher;
call    0 returned 100%
        -:   30:
        -:   31:    // Hash each of the operations based upon their mutable bits:
function _ZZN12_GLOBAL__N_120OperationFingerPrintC4EPN4mlir9OperationEENKUlS3_E_clES3_.isra.0 called 111438 returned 100% blocks executed 97%
      148:   32:    topOp->walk([&](Operation *op) {
call    0 returned 100%
        -:   33:      //   - Operation pointer
   518667:   34:      addDataToHash(hasher, op);
        -:   35:      //   - Attributes
   222876:   36:      addDataToHash(hasher, op->getAttrDictionary());
        -:   37:      //   - Blocks in Regions
   115394:   38:      for (Region &region : op->getRegions()) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    16894:   39:        for (Block &block : region) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    25876:   40:          addDataToHash(hasher, &block);
    20157:   41:          for (BlockArgument arg : block.getArguments())
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    14438:   42:            addDataToHash(hasher, arg);
        -:   43:        }
        -:   44:      }
        -:   45:      //   - Location
   111438:   46:      addDataToHash(hasher, op->getLoc().getAsOpaquePointer());
call    0 returned 100%
        -:   47:      //   - Operands
   244602:   48:      for (Value operand : op->getOperands())
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
call    2 returned 100%
   266328:   49:        addDataToHash(hasher, operand);
        -:   50:      //   - Successors
   126954:   51:      for (unsigned i = 0, e = op->getNumSuccessors(); i != e; ++i)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
    15516:   52:        addDataToHash(hasher, op->getSuccessor(i));
call    0 returned 100%
   111438:   53:    });
      148:   54:    hash = hasher.result();
call    0 returned 100%
      148:   55:  }
        -:   56:
       66:   57:  bool operator==(const OperationFingerPrint &other) const {
     132*:   58:    return hash == other.hash;
        -:   59:  }
        -:   60:  bool operator!=(const OperationFingerPrint &other) const {
        -:   61:    return !(*this == other);
        -:   62:  }
        -:   63:
        -:   64:private:
        -:   65:  template <typename T>
   391713:   66:  void addDataToHash(llvm::SHA1 &hasher, const T &data) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
   391713:   67:    hasher.update(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
        -:   68:        ArrayRef<uint8_t>(reinterpret_cast<const uint8_t *>(&data), sizeof(T)));
        -:   69:  }
        -:   70:
        -:   71:  std::array<uint8_t, 20> hash;
        -:   72:};
        -:   73:
        -:   74://===----------------------------------------------------------------------===//
        -:   75:// IRPrinter
        -:   76://===----------------------------------------------------------------------===//
        -:   77:
        -:   78:class IRPrinterInstrumentation : public PassInstrumentation {
        -:   79:public:
     1882:   80:  IRPrinterInstrumentation(std::unique_ptr<PassManager::IRPrinterConfig> config)
     1882:   81:      : config(std::move(config)) {}
call    0 returned 100%
        -:   82:
        -:   83:private:
        -:   84:  /// Instrumentation hooks.
        -:   85:  void runBeforePass(Pass *pass, Operation *op) override;
        -:   86:  void runAfterPass(Pass *pass, Operation *op) override;
        -:   87:  void runAfterPassFailed(Pass *pass, Operation *op) override;
        -:   88:
        -:   89:  /// Configuration to use.
        -:   90:  std::unique_ptr<PassManager::IRPrinterConfig> config;
        -:   91:
        -:   92:  /// The following is a set of fingerprints for operations that are currently
        -:   93:  /// being operated on in a pass. This field is only used when the
        -:   94:  /// configuration asked for change detection.
        -:   95:  DenseMap<Pass *, OperationFingerPrint> beforePassFingerPrints;
        -:   96:};
        -:   97:} // namespace
        -:   98:
function _ZL7printIRPN4mlir9OperationEbRN4llvm11raw_ostreamENS_15OpPrintingFlagsE called 2967 returned 100% blocks executed 35%
     2967:   99:static void printIR(Operation *op, bool printModuleScope, raw_ostream &out,
        -:  100:                    OpPrintingFlags flags) {
        -:  101:  // Otherwise, check to see if we are not printing at module scope.
     2967:  102:  if (!printModuleScope)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2967:  103:    return op->print(out << " //----- //\n",
call    0 returned 100%
call    1 returned 100%
     5934:  104:                     op->getBlock() ? flags.useLocalScope() : flags);
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
        -:  105:
        -:  106:  // Otherwise, we are printing at module scope.
    #####:  107:  out << " ('" << op->getName() << "' operation";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  108:  if (auto symbolName =
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  109:          op->getAttrOfType<StringAttr>(SymbolTable::getSymbolAttrName()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:    out << ": @" << symbolName.getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  111:  out << ") //----- //\n";
        -:  112:
        -:  113:  // Find the top-level operation.
    #####:  114:  auto *topLevelOp = op;
call    0 never executed
    #####:  115:  while (auto *parentOp = topLevelOp->getParentOp())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  116:    topLevelOp = parentOp;
    #####:  117:  topLevelOp->print(out, flags);
call    0 never executed
        -:  118:}
        -:  119:
        -:  120:/// Instrumentation hooks.
function _ZN12_GLOBAL__N_124IRPrinterInstrumentation13runBeforePassEPN4mlir4PassEPNS1_9OperationE called 5700 returned 100% blocks executed 100%
     5700:  121:void IRPrinterInstrumentation::runBeforePass(Pass *pass, Operation *op) {
     5700:  122:  if (isa<OpToOpPassAdaptor>(pass))
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        -:  123:    return;
        -:  124:  // If the config asked to detect changes, record the current fingerprint.
     4269:  125:  if (config->shouldPrintAfterOnlyOnChange())
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       82:  126:    beforePassFingerPrints.try_emplace(pass, op);
call    0 returned 100%
        -:  127:
function _ZZN12_GLOBAL__N_124IRPrinterInstrumentation13runBeforePassEPN4mlir4PassEPNS1_9OperationEENKUlRN4llvm11raw_ostreamEE_clES8_ called 1445 returned 100% blocks executed 100%
     4269:  128:  config->printBeforeIfEnabled(pass, op, [&](raw_ostream &out) {
call    0 returned 100%
     1445:  129:    out << "// -----// IR Dump Before " << pass->getName() << " ("
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
     1445:  130:        << pass->getArgument() << ")";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1445:  131:    printIR(op, config->shouldPrintAtModuleScope(), out,
call    0 returned 100%
        -:  132:            config->getOpPrintingFlags());
     1445:  133:    out << "\n\n";
call    0 returned 100%
     4269:  134:  });
call    0 returned 100%
        -:  135:}
        -:  136:
function _ZN12_GLOBAL__N_124IRPrinterInstrumentation12runAfterPassEPN4mlir4PassEPNS1_9OperationE called 5606 returned 100% blocks executed 90%
     5606:  137:void IRPrinterInstrumentation::runAfterPass(Pass *pass, Operation *op) {
     5606:  138:  if (isa<OpToOpPassAdaptor>(pass))
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
        -:  139:    return;
        -:  140:
        -:  141:  // Check to see if we are only printing on failure.
     4175:  142:  if (config->shouldPrintAfterOnlyOnFailure())
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  143:    return;
        -:  144:
        -:  145:  // If the config asked to detect changes, compare the current fingerprint with
        -:  146:  // the previous.
     2814:  147:  if (config->shouldPrintAfterOnlyOnChange()) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       66:  148:    auto fingerPrintIt = beforePassFingerPrints.find(pass);
call    0 returned 100%
      66*:  149:    assert(fingerPrintIt != beforePassFingerPrints.end() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:  150:           "expected valid fingerprint");
        -:  151:    // If the fingerprints are the same, we don't print the IR.
      66*:  152:    if (fingerPrintIt->second == OperationFingerPrint(op)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 70% (fallthrough)
branch  5 taken 30%
       46:  153:      beforePassFingerPrints.erase(fingerPrintIt);
call    0 returned 100%
       46:  154:      return;
        -:  155:    }
       20:  156:    beforePassFingerPrints.erase(fingerPrintIt);
call    0 returned 100%
        -:  157:  }
        -:  158:
function _ZZN12_GLOBAL__N_124IRPrinterInstrumentation12runAfterPassEPN4mlir4PassEPNS1_9OperationEENKUlRN4llvm11raw_ostreamEE_clES8_ called 1466 returned 100% blocks executed 100%
     2768:  159:  config->printAfterIfEnabled(pass, op, [&](raw_ostream &out) {
call    0 returned 100%
     1466:  160:    out << "// -----// IR Dump After " << pass->getName() << " ("
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
     1466:  161:        << pass->getArgument() << ")";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1466:  162:    printIR(op, config->shouldPrintAtModuleScope(), out,
call    0 returned 100%
        -:  163:            config->getOpPrintingFlags());
     1466:  164:    out << "\n\n";
call    0 returned 100%
     2768:  165:  });
call    0 returned 100%
        -:  166:}
        -:  167:
function _ZN12_GLOBAL__N_124IRPrinterInstrumentation18runAfterPassFailedEPN4mlir4PassEPNS1_9OperationE called 94 returned 100% blocks executed 100%
       94:  168:void IRPrinterInstrumentation::runAfterPassFailed(Pass *pass, Operation *op) {
       94:  169:  if (isa<OpToOpPassAdaptor>(pass))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  170:    return;
       94:  171:  if (config->shouldPrintAfterOnlyOnChange())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  172:    beforePassFingerPrints.erase(pass);
call    0 returned 100%
        -:  173:
function _ZZN12_GLOBAL__N_124IRPrinterInstrumentation18runAfterPassFailedEPN4mlir4PassEPNS1_9OperationEENKUlRN4llvm11raw_ostreamEE_clES8_ called 56 returned 100% blocks executed 100%
       94:  174:  config->printAfterIfEnabled(pass, op, [&](raw_ostream &out) {
call    0 returned 100%
       56:  175:    out << formatv("// -----// IR Dump After {0} Failed ({1})", pass->getName(),
call    0 returned 100%
call    1 returned 100%
      112:  176:                   pass->getArgument());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       56:  177:    printIR(op, config->shouldPrintAtModuleScope(), out, OpPrintingFlags());
call    0 returned 100%
call    1 returned 100%
       56:  178:    out << "\n\n";
call    0 returned 100%
       94:  179:  });
call    0 returned 100%
        -:  180:}
        -:  181:
        -:  182://===----------------------------------------------------------------------===//
        -:  183:// IRPrinterConfig
        -:  184://===----------------------------------------------------------------------===//
        -:  185:
        -:  186:/// Initialize the configuration.
function _ZN4mlir11PassManager15IRPrinterConfigC2EbbbNS_15OpPrintingFlagsE called 0 returned 0% blocks executed 0%
    1882*:  187:PassManager::IRPrinterConfig::IRPrinterConfig(bool printModuleScope,
        -:  188:                                              bool printAfterOnlyOnChange,
        -:  189:                                              bool printAfterOnlyOnFailure,
    1882*:  190:                                              OpPrintingFlags opPrintingFlags)
        -:  191:    : printModuleScope(printModuleScope),
        -:  192:      printAfterOnlyOnChange(printAfterOnlyOnChange),
        -:  193:      printAfterOnlyOnFailure(printAfterOnlyOnFailure),
    1882*:  194:      opPrintingFlags(opPrintingFlags) {}
        -:  195:PassManager::IRPrinterConfig::~IRPrinterConfig() = default;
        -:  196:
        -:  197:/// A hook that may be overridden by a derived config that checks if the IR
        -:  198:/// of 'operation' should be dumped *before* the pass 'pass' has been
        -:  199:/// executed. If the IR should be dumped, 'printCallback' should be invoked
        -:  200:/// with the stream to dump into.
function _ZN4mlir11PassManager15IRPrinterConfig20printBeforeIfEnabledEPNS_4PassEPNS_9OperationEN4llvm12function_refIFvRNS6_11raw_ostreamEEEE called 0 returned 0% blocks executed 0%
    #####:  201:void PassManager::IRPrinterConfig::printBeforeIfEnabled(
        -:  202:    Pass *pass, Operation *operation, PrintCallbackFn printCallback) {
        -:  203:  // By default, never print.
    #####:  204:}
        -:  205:
        -:  206:/// A hook that may be overridden by a derived config that checks if the IR
        -:  207:/// of 'operation' should be dumped *after* the pass 'pass' has been
        -:  208:/// executed. If the IR should be dumped, 'printCallback' should be invoked
        -:  209:/// with the stream to dump into.
function _ZN4mlir11PassManager15IRPrinterConfig19printAfterIfEnabledEPNS_4PassEPNS_9OperationEN4llvm12function_refIFvRNS6_11raw_ostreamEEEE called 0 returned 0% blocks executed 0%
    #####:  210:void PassManager::IRPrinterConfig::printAfterIfEnabled(
        -:  211:    Pass *pass, Operation *operation, PrintCallbackFn printCallback) {
        -:  212:  // By default, never print.
    #####:  213:}
        -:  214:
        -:  215://===----------------------------------------------------------------------===//
        -:  216:// PassManager
        -:  217://===----------------------------------------------------------------------===//
        -:  218:
        -:  219:namespace {
        -:  220:/// Simple wrapper config that allows for the simpler interface defined above.
        -:  221:struct BasicIRPrinterConfig : public PassManager::IRPrinterConfig {
function _ZN12_GLOBAL__N_120BasicIRPrinterConfigC2ESt8functionIFbPN4mlir4PassEPNS2_9OperationEEES8_bbbNS2_15OpPrintingFlagsERN4llvm11raw_ostreamE called 1882 returned 100% blocks executed 75%
     1882:  222:  BasicIRPrinterConfig(
        -:  223:      std::function<bool(Pass *, Operation *)> shouldPrintBeforePass,
        -:  224:      std::function<bool(Pass *, Operation *)> shouldPrintAfterPass,
        -:  225:      bool printModuleScope, bool printAfterOnlyOnChange,
        -:  226:      bool printAfterOnlyOnFailure, OpPrintingFlags opPrintingFlags,
        -:  227:      raw_ostream &out)
     1882:  228:      : IRPrinterConfig(printModuleScope, printAfterOnlyOnChange,
        -:  229:                        printAfterOnlyOnFailure, opPrintingFlags),
     1882:  230:        shouldPrintBeforePass(std::move(shouldPrintBeforePass)),
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
     1882:  231:        shouldPrintAfterPass(std::move(shouldPrintAfterPass)), out(out) {
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
    1882*:  232:    assert((this->shouldPrintBeforePass || this->shouldPrintAfterPass) &&
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:  233:           "expected at least one valid filter function");
     1882:  234:  }
        -:  235:
function _ZN12_GLOBAL__N_120BasicIRPrinterConfig20printBeforeIfEnabledEPN4mlir4PassEPNS1_9OperationEN4llvm12function_refIFvRNS6_11raw_ostreamEEEE called 4269 returned 100% blocks executed 100%
     4269:  236:  void printBeforeIfEnabled(Pass *pass, Operation *operation,
        -:  237:                            PrintCallbackFn printCallback) final {
     4269:  238:    if (shouldPrintBeforePass && shouldPrintBeforePass(pass, operation))
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     1445:  239:      printCallback(out);
call    0 returned 100%
     4269:  240:  }
        -:  241:
function _ZN12_GLOBAL__N_120BasicIRPrinterConfig19printAfterIfEnabledEPN4mlir4PassEPNS1_9OperationEN4llvm12function_refIFvRNS6_11raw_ostreamEEEE called 2862 returned 100% blocks executed 100%
     2862:  242:  void printAfterIfEnabled(Pass *pass, Operation *operation,
        -:  243:                           PrintCallbackFn printCallback) final {
     2862:  244:    if (shouldPrintAfterPass && shouldPrintAfterPass(pass, operation))
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     1522:  245:      printCallback(out);
call    0 returned 100%
     2862:  246:  }
        -:  247:
        -:  248:  /// Filter functions for before and after pass execution.
        -:  249:  std::function<bool(Pass *, Operation *)> shouldPrintBeforePass;
        -:  250:  std::function<bool(Pass *, Operation *)> shouldPrintAfterPass;
        -:  251:
        -:  252:  /// The stream to output to.
        -:  253:  raw_ostream &out;
        -:  254:};
        -:  255:} // namespace
        -:  256:
        -:  257:/// Add an instrumentation to print the IR before and after pass execution,
        -:  258:/// using the provided configuration.
function _ZN4mlir11PassManager16enableIRPrintingESt10unique_ptrINS0_15IRPrinterConfigESt14default_deleteIS2_EE called 1882 returned 100% blocks executed 50%
     1882:  259:void PassManager::enableIRPrinting(std::unique_ptr<IRPrinterConfig> config) {
    1882*:  260:  if (config->shouldPrintAtModuleScope() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  261:      getContext()->isMultithreadingEnabled())
call    0 never executed
    #####:  262:    llvm::report_fatal_error("IR printing can't be setup on a pass-manager "
call    0 never executed
        -:  263:                             "without disabling multi-threading first.");
     1882:  264:  addInstrumentation(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1882:  265:      std::make_unique<IRPrinterInstrumentation>(std::move(config)));
call    0 returned 100%
call    1 returned 100%
     1882:  266:}
        -:  267:
        -:  268:/// Add an instrumentation to print the IR before and after pass execution.
function _ZN4mlir11PassManager16enableIRPrintingESt8functionIFbPNS_4PassEPNS_9OperationEEES7_bbbRN4llvm11raw_ostreamENS_15OpPrintingFlagsE called 1882 returned 100% blocks executed 62%
     1882:  269:void PassManager::enableIRPrinting(
        -:  270:    std::function<bool(Pass *, Operation *)> shouldPrintBeforePass,
        -:  271:    std::function<bool(Pass *, Operation *)> shouldPrintAfterPass,
        -:  272:    bool printModuleScope, bool printAfterOnlyOnChange,
        -:  273:    bool printAfterOnlyOnFailure, raw_ostream &out,
        -:  274:    OpPrintingFlags opPrintingFlags) {
     1882:  275:  enableIRPrinting(std::make_unique<BasicIRPrinterConfig>(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1882:  276:      std::move(shouldPrintBeforePass), std::move(shouldPrintAfterPass),
call    0 returned 100%
        -:  277:      printModuleScope, printAfterOnlyOnChange, printAfterOnlyOnFailure,
        -:  278:      opPrintingFlags, out));
     1882:  279:}
