        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/Presburger/SlowMPInt.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/SlowMPInt.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/SlowMPInt.cpp.gcda
        -:    0:Runs:128654
        -:    1://===- SlowMPInt.cpp - MLIR SlowMPInt Class -------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/Presburger/SlowMPInt.h"
        -:   10:#include "llvm/Support/MathExtras.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:using namespace presburger;
        -:   14:using namespace detail;
        -:   15:
function _ZN4mlir10presburger6detail9SlowMPIntC2El called 0 returned 0% blocks executed 0%
    #####:   16:SlowMPInt::SlowMPInt(int64_t val) : val(64, val, /*isSigned=*/true) {}
call    0 never executed
function _ZN4mlir10presburger6detail9SlowMPIntC2Ev called 0 returned 0% blocks executed 0%
    #####:   17:SlowMPInt::SlowMPInt() : SlowMPInt(0) {}
call    0 never executed
function _ZN4mlir10presburger6detail9SlowMPIntC2ERKN4llvm5APIntE called 0 returned 0% blocks executed 0%
    #####:   18:SlowMPInt::SlowMPInt(const llvm::APInt &val) : val(val) {}
branch  0 never executed
branch  1 never executed
function _ZN4mlir10presburger6detail9SlowMPIntaSEl called 0 returned 0% blocks executed 0%
    #####:   19:SlowMPInt &SlowMPInt::operator=(int64_t val) { return *this = SlowMPInt(val); }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
function _ZNK4mlir10presburger6detail9SlowMPIntcvlEv called 0 returned 0% blocks executed 0%
    #####:   20:SlowMPInt::operator int64_t() const { return val.getSExtValue(); }
call    0 never executed
        -:   21:
function _ZN4mlir10presburger6detail10hash_valueERKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:   22:llvm::hash_code detail::hash_value(const SlowMPInt &x) {
    #####:   23:  return hash_value(x.val);
call    0 never executed
        -:   24:}
        -:   25:
        -:   26:/// ---------------------------------------------------------------------------
        -:   27:/// Printing.
        -:   28:/// ---------------------------------------------------------------------------
function _ZNK4mlir10presburger6detail9SlowMPInt5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   29:void SlowMPInt::print(llvm::raw_ostream &os) const { os << val; }
call    0 never executed
        -:   30:
function _ZNK4mlir10presburger6detail9SlowMPInt4dumpEv called 0 returned 0% blocks executed 0%
    #####:   31:void SlowMPInt::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
        -:   32:
function _ZN4mlir10presburger6detaillsERN4llvm11raw_ostreamERKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:   33:llvm::raw_ostream &detail::operator<<(llvm::raw_ostream &os,
        -:   34:                                      const SlowMPInt &x) {
    #####:   35:  x.print(os);
call    0 never executed
    #####:   36:  return os;
        -:   37:}
        -:   38:
        -:   39:/// ---------------------------------------------------------------------------
        -:   40:/// Convenience operator overloads for int64_t.
        -:   41:/// ---------------------------------------------------------------------------
function _ZN4mlir10presburger6detailpLERNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   42:SlowMPInt &detail::operator+=(SlowMPInt &a, int64_t b) {
    #####:   43:  return a += SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   44:}
function _ZN4mlir10presburger6detailmIERNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   45:SlowMPInt &detail::operator-=(SlowMPInt &a, int64_t b) {
    #####:   46:  return a -= SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   47:}
function _ZN4mlir10presburger6detailmLERNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   48:SlowMPInt &detail::operator*=(SlowMPInt &a, int64_t b) {
    #####:   49:  return a *= SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   50:}
function _ZN4mlir10presburger6detaildVERNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   51:SlowMPInt &detail::operator/=(SlowMPInt &a, int64_t b) {
    #####:   52:  return a /= SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   53:}
function _ZN4mlir10presburger6detailrMERNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   54:SlowMPInt &detail::operator%=(SlowMPInt &a, int64_t b) {
    #####:   55:  return a %= SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   56:}
        -:   57:
function _ZN4mlir10presburger6detaileqERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   58:bool detail::operator==(const SlowMPInt &a, int64_t b) {
    #####:   59:  return a == SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   60:}
function _ZN4mlir10presburger6detailneERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   61:bool detail::operator!=(const SlowMPInt &a, int64_t b) {
    #####:   62:  return a != SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   63:}
function _ZN4mlir10presburger6detailgtERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   64:bool detail::operator>(const SlowMPInt &a, int64_t b) {
    #####:   65:  return a > SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   66:}
function _ZN4mlir10presburger6detailltERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   67:bool detail::operator<(const SlowMPInt &a, int64_t b) {
    #####:   68:  return a < SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   69:}
function _ZN4mlir10presburger6detailleERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   70:bool detail::operator<=(const SlowMPInt &a, int64_t b) {
    #####:   71:  return a <= SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   72:}
function _ZN4mlir10presburger6detailgeERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   73:bool detail::operator>=(const SlowMPInt &a, int64_t b) {
    #####:   74:  return a >= SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   75:}
function _ZN4mlir10presburger6detailplERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   76:SlowMPInt detail::operator+(const SlowMPInt &a, int64_t b) {
    #####:   77:  return a + SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   78:}
function _ZN4mlir10presburger6detailmiERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   79:SlowMPInt detail::operator-(const SlowMPInt &a, int64_t b) {
    #####:   80:  return a - SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   81:}
function _ZN4mlir10presburger6detailmlERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   82:SlowMPInt detail::operator*(const SlowMPInt &a, int64_t b) {
    #####:   83:  return a * SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   84:}
function _ZN4mlir10presburger6detaildvERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   85:SlowMPInt detail::operator/(const SlowMPInt &a, int64_t b) {
    #####:   86:  return a / SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   87:}
function _ZN4mlir10presburger6detailrmERKNS1_9SlowMPIntEl called 0 returned 0% blocks executed 0%
    #####:   88:SlowMPInt detail::operator%(const SlowMPInt &a, int64_t b) {
    #####:   89:  return a % SlowMPInt(b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   90:}
        -:   91:
function _ZN4mlir10presburger6detaileqElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:   92:bool detail::operator==(int64_t a, const SlowMPInt &b) {
    #####:   93:  return SlowMPInt(a) == b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   94:}
function _ZN4mlir10presburger6detailneElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:   95:bool detail::operator!=(int64_t a, const SlowMPInt &b) {
    #####:   96:  return SlowMPInt(a) != b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   97:}
function _ZN4mlir10presburger6detailgtElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:   98:bool detail::operator>(int64_t a, const SlowMPInt &b) {
    #####:   99:  return SlowMPInt(a) > b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  100:}
function _ZN4mlir10presburger6detailltElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  101:bool detail::operator<(int64_t a, const SlowMPInt &b) {
    #####:  102:  return SlowMPInt(a) < b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  103:}
function _ZN4mlir10presburger6detailleElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  104:bool detail::operator<=(int64_t a, const SlowMPInt &b) {
    #####:  105:  return SlowMPInt(a) <= b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  106:}
function _ZN4mlir10presburger6detailgeElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  107:bool detail::operator>=(int64_t a, const SlowMPInt &b) {
    #####:  108:  return SlowMPInt(a) >= b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  109:}
function _ZN4mlir10presburger6detailplElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  110:SlowMPInt detail::operator+(int64_t a, const SlowMPInt &b) {
    #####:  111:  return SlowMPInt(a) + b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  112:}
function _ZN4mlir10presburger6detailmiElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  113:SlowMPInt detail::operator-(int64_t a, const SlowMPInt &b) {
    #####:  114:  return SlowMPInt(a) - b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  115:}
function _ZN4mlir10presburger6detailmlElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  116:SlowMPInt detail::operator*(int64_t a, const SlowMPInt &b) {
    #####:  117:  return SlowMPInt(a) * b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  118:}
function _ZN4mlir10presburger6detaildvElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  119:SlowMPInt detail::operator/(int64_t a, const SlowMPInt &b) {
    #####:  120:  return SlowMPInt(a) / b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  121:}
function _ZN4mlir10presburger6detailrmElRKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  122:SlowMPInt detail::operator%(int64_t a, const SlowMPInt &b) {
    #####:  123:  return SlowMPInt(a) % b;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  124:}
        -:  125:
    #####:  126:static unsigned getMaxWidth(const APInt &a, const APInt &b) {
    #####:  127:  return std::max(a.getBitWidth(), b.getBitWidth());
        -:  128:}
        -:  129:
        -:  130:/// ---------------------------------------------------------------------------
        -:  131:/// Comparison operators.
        -:  132:/// ---------------------------------------------------------------------------
        -:  133:
        -:  134:// TODO: consider instead making APInt::compare available and using that.
function _ZNK4mlir10presburger6detail9SlowMPInteqERKS2_ called 0 returned 0% blocks executed 0%
    #####:  135:bool SlowMPInt::operator==(const SlowMPInt &o) const {
    #####:  136:  unsigned width = getMaxWidth(val, o.val);
branch  0 never executed
branch  1 never executed
    #####:  137:  return val.sext(width) == o.val.sext(width);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  138:}
function _ZNK4mlir10presburger6detail9SlowMPIntneERKS2_ called 0 returned 0% blocks executed 0%
    #####:  139:bool SlowMPInt::operator!=(const SlowMPInt &o) const {
    #####:  140:  unsigned width = getMaxWidth(val, o.val);
branch  0 never executed
branch  1 never executed
    #####:  141:  return val.sext(width) != o.val.sext(width);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  142:}
function _ZNK4mlir10presburger6detail9SlowMPIntgtERKS2_ called 0 returned 0% blocks executed 0%
    #####:  143:bool SlowMPInt::operator>(const SlowMPInt &o) const {
    #####:  144:  unsigned width = getMaxWidth(val, o.val);
branch  0 never executed
branch  1 never executed
    #####:  145:  return val.sext(width).sgt(o.val.sext(width));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  146:}
function _ZNK4mlir10presburger6detail9SlowMPIntltERKS2_ called 0 returned 0% blocks executed 0%
    #####:  147:bool SlowMPInt::operator<(const SlowMPInt &o) const {
    #####:  148:  unsigned width = getMaxWidth(val, o.val);
branch  0 never executed
branch  1 never executed
    #####:  149:  return val.sext(width).slt(o.val.sext(width));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  150:}
function _ZNK4mlir10presburger6detail9SlowMPIntleERKS2_ called 0 returned 0% blocks executed 0%
    #####:  151:bool SlowMPInt::operator<=(const SlowMPInt &o) const {
    #####:  152:  unsigned width = getMaxWidth(val, o.val);
branch  0 never executed
branch  1 never executed
    #####:  153:  return val.sext(width).sle(o.val.sext(width));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  154:}
function _ZNK4mlir10presburger6detail9SlowMPIntgeERKS2_ called 0 returned 0% blocks executed 0%
    #####:  155:bool SlowMPInt::operator>=(const SlowMPInt &o) const {
    #####:  156:  unsigned width = getMaxWidth(val, o.val);
branch  0 never executed
branch  1 never executed
    #####:  157:  return val.sext(width).sge(o.val.sext(width));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  158:}
        -:  159:
        -:  160:/// ---------------------------------------------------------------------------
        -:  161:/// Arithmetic operators.
        -:  162:/// ---------------------------------------------------------------------------
        -:  163:
        -:  164:/// Bring a and b to have the same width and then call op(a, b, overflow).
        -:  165:/// If the overflow bit becomes set, resize a and b to double the width and
        -:  166:/// call op(a, b, overflow), returning its result. The operation with double
        -:  167:/// widths should not also overflow.
function _Z25runOpWithExpandOnOverflowRKN4llvm5APIntES2_NS_12function_refIFS0_S2_S2_RbEEE called 0 returned 0% blocks executed 0%
    #####:  168:APInt runOpWithExpandOnOverflow(
        -:  169:    const APInt &a, const APInt &b,
        -:  170:    llvm::function_ref<APInt(const APInt &, const APInt &, bool &overflow)>
        -:  171:        op) {
    #####:  172:  bool overflow;
    #####:  173:  unsigned width = getMaxWidth(a, b);
branch  0 never executed
branch  1 never executed
    #####:  174:  APInt ret = op(a.sext(width), b.sext(width), overflow);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  175:  if (!overflow)
branch  0 never executed
branch  1 never executed
        -:  176:    return ret;
        -:  177:
    #####:  178:  width *= 2;
    #####:  179:  ret = op(a.sext(width), b.sext(width), overflow);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  180:  assert(!overflow && "double width should be sufficient to avoid overflow!");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  181:  return ret;
        -:  182:}
        -:  183:
function _ZNK4mlir10presburger6detail9SlowMPIntplERKS2_ called 0 returned 0% blocks executed 0%
    #####:  184:SlowMPInt SlowMPInt::operator+(const SlowMPInt &o) const {
    #####:  185:  return SlowMPInt(
call    0 never executed
    #####:  186:      runOpWithExpandOnOverflow(val, o.val, std::mem_fn(&APInt::sadd_ov)));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  187:}
function _ZNK4mlir10presburger6detail9SlowMPIntmiERKS2_ called 0 returned 0% blocks executed 0%
    #####:  188:SlowMPInt SlowMPInt::operator-(const SlowMPInt &o) const {
    #####:  189:  return SlowMPInt(
call    0 never executed
    #####:  190:      runOpWithExpandOnOverflow(val, o.val, std::mem_fn(&APInt::ssub_ov)));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  191:}
function _ZNK4mlir10presburger6detail9SlowMPIntmlERKS2_ called 0 returned 0% blocks executed 0%
    #####:  192:SlowMPInt SlowMPInt::operator*(const SlowMPInt &o) const {
    #####:  193:  return SlowMPInt(
call    0 never executed
    #####:  194:      runOpWithExpandOnOverflow(val, o.val, std::mem_fn(&APInt::smul_ov)));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  195:}
function _ZNK4mlir10presburger6detail9SlowMPIntdvERKS2_ called 0 returned 0% blocks executed 0%
    #####:  196:SlowMPInt SlowMPInt::operator/(const SlowMPInt &o) const {
    #####:  197:  return SlowMPInt(
call    0 never executed
    #####:  198:      runOpWithExpandOnOverflow(val, o.val, std::mem_fn(&APInt::sdiv_ov)));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  199:}
function _ZN4mlir10presburger6detail3absERKNS1_9SlowMPIntE called 0 returned 0% blocks executed 0%
    #####:  200:SlowMPInt detail::abs(const SlowMPInt &x) { return x >= 0 ? x : -x; }
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
function _ZN4mlir10presburger6detail7ceilDivERKNS1_9SlowMPIntES4_ called 0 returned 0% blocks executed 0%
    #####:  201:SlowMPInt detail::ceilDiv(const SlowMPInt &lhs, const SlowMPInt &rhs) {
    #####:  202:  if (rhs == -1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  203:    return -lhs;
call    0 never executed
    #####:  204:  unsigned width = getMaxWidth(lhs.val, rhs.val);
branch  0 never executed
branch  1 never executed
    #####:  205:  return SlowMPInt(llvm::APIntOps::RoundingSDiv(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  206:      lhs.val.sext(width), rhs.val.sext(width), APInt::Rounding::UP));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  207:}
function _ZN4mlir10presburger6detail8floorDivERKNS1_9SlowMPIntES4_ called 0 returned 0% blocks executed 0%
    #####:  208:SlowMPInt detail::floorDiv(const SlowMPInt &lhs, const SlowMPInt &rhs) {
    #####:  209:  if (rhs == -1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  210:    return -lhs;
call    0 never executed
    #####:  211:  unsigned width = getMaxWidth(lhs.val, rhs.val);
branch  0 never executed
branch  1 never executed
    #####:  212:  return SlowMPInt(llvm::APIntOps::RoundingSDiv(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  213:      lhs.val.sext(width), rhs.val.sext(width), APInt::Rounding::DOWN));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  214:}
        -:  215:// The RHS is always expected to be positive, and the result
        -:  216:/// is always non-negative.
function _ZN4mlir10presburger6detail3modERKNS1_9SlowMPIntES4_ called 0 returned 0% blocks executed 0%
    #####:  217:SlowMPInt detail::mod(const SlowMPInt &lhs, const SlowMPInt &rhs) {
    #####:  218:  assert(rhs >= 1 && "mod is only supported for positive divisors!");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  219:  return lhs % rhs < 0 ? lhs % rhs + rhs : lhs % rhs;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  220:}
        -:  221:
function _ZN4mlir10presburger6detail3gcdERKNS1_9SlowMPIntES4_ called 0 returned 0% blocks executed 0%
    #####:  222:SlowMPInt detail::gcd(const SlowMPInt &a, const SlowMPInt &b) {
    #####:  223:  assert(a >= 0 && b >= 0 && "operands must be non-negative!");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  224:  unsigned width = getMaxWidth(a.val, b.val);
branch  0 never executed
branch  1 never executed
    #####:  225:  return SlowMPInt(llvm::APIntOps::GreatestCommonDivisor(a.val.sext(width),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  226:                                                         b.val.sext(width)));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  227:}
        -:  228:
        -:  229:/// Returns the least common multiple of 'a' and 'b'.
function _ZN4mlir10presburger6detail3lcmERKNS1_9SlowMPIntES4_ called 0 returned 0% blocks executed 0%
    #####:  230:SlowMPInt detail::lcm(const SlowMPInt &a, const SlowMPInt &b) {
    #####:  231:  SlowMPInt x = abs(a);
call    0 never executed
    #####:  232:  SlowMPInt y = abs(b);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  233:  return (x * y) / gcd(x, y);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  234:}
        -:  235:
        -:  236:/// This operation cannot overflow.
function _ZNK4mlir10presburger6detail9SlowMPIntrmERKS2_ called 0 returned 0% blocks executed 0%
    #####:  237:SlowMPInt SlowMPInt::operator%(const SlowMPInt &o) const {
    #####:  238:  unsigned width = std::max(val.getBitWidth(), o.val.getBitWidth());
branch  0 never executed
branch  1 never executed
    #####:  239:  return SlowMPInt(val.sext(width).srem(o.val.sext(width)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  240:}
        -:  241:
function _ZNK4mlir10presburger6detail9SlowMPIntngEv called 0 returned 0% blocks executed 0%
    #####:  242:SlowMPInt SlowMPInt::operator-() const {
    #####:  243:  if (val.isMinSignedValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  244:    /// Overflow only occurs when the value is the minimum possible value.
    #####:  245:    APInt ret = val.sext(2 * val.getBitWidth());
call    0 never executed
    #####:  246:    return SlowMPInt(-ret);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  247:  }
    #####:  248:  return SlowMPInt(-val);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  249:}
        -:  250:
        -:  251:/// ---------------------------------------------------------------------------
        -:  252:/// Assignment operators, preincrement, predecrement.
        -:  253:/// ---------------------------------------------------------------------------
function _ZN4mlir10presburger6detail9SlowMPIntpLERKS2_ called 0 returned 0% blocks executed 0%
    #####:  254:SlowMPInt &SlowMPInt::operator+=(const SlowMPInt &o) {
    #####:  255:  *this = *this + o;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  256:  return *this;
        -:  257:}
function _ZN4mlir10presburger6detail9SlowMPIntmIERKS2_ called 0 returned 0% blocks executed 0%
    #####:  258:SlowMPInt &SlowMPInt::operator-=(const SlowMPInt &o) {
    #####:  259:  *this = *this - o;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  260:  return *this;
        -:  261:}
function _ZN4mlir10presburger6detail9SlowMPIntmLERKS2_ called 0 returned 0% blocks executed 0%
    #####:  262:SlowMPInt &SlowMPInt::operator*=(const SlowMPInt &o) {
    #####:  263:  *this = *this * o;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  264:  return *this;
        -:  265:}
function _ZN4mlir10presburger6detail9SlowMPIntdVERKS2_ called 0 returned 0% blocks executed 0%
    #####:  266:SlowMPInt &SlowMPInt::operator/=(const SlowMPInt &o) {
    #####:  267:  *this = *this / o;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  268:  return *this;
        -:  269:}
function _ZN4mlir10presburger6detail9SlowMPIntrMERKS2_ called 0 returned 0% blocks executed 0%
    #####:  270:SlowMPInt &SlowMPInt::operator%=(const SlowMPInt &o) {
    #####:  271:  *this = *this % o;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  272:  return *this;
        -:  273:}
function _ZN4mlir10presburger6detail9SlowMPIntppEv called 0 returned 0% blocks executed 0%
    #####:  274:SlowMPInt &SlowMPInt::operator++() {
    #####:  275:  *this += 1;
call    0 never executed
    #####:  276:  return *this;
        -:  277:}
        -:  278:
function _ZN4mlir10presburger6detail9SlowMPIntmmEv called 0 returned 0% blocks executed 0%
    #####:  279:SlowMPInt &SlowMPInt::operator--() {
    #####:  280:  *this -= 1;
call    0 never executed
    #####:  281:  return *this;
        -:  282:}
