        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/OpenACC/CMakeFiles/obj.MLIROpenACCDialect.dir/IR/OpenACC.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/OpenACC/CMakeFiles/obj.MLIROpenACCDialect.dir/IR/OpenACC.cpp.gcda
        -:    0:Runs:128628
        -:    1://===- OpenACC.cpp - OpenACC MLIR Operations ------------------------------===//
        -:    2://
        -:    3:// Part of the MLIR Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7:// =============================================================================
        -:    8:
        -:    9:#include "mlir/Dialect/OpenACC/OpenACC.h"
        -:   10:#include "mlir/Dialect/OpenACC/OpenACCOpsEnums.cpp.inc"
        -:   11:#include "mlir/IR/Builders.h"
        -:   12:#include "mlir/IR/BuiltinTypes.h"
        -:   13:#include "mlir/IR/DialectImplementation.h"
        -:   14:#include "mlir/IR/Matchers.h"
        -:   15:#include "mlir/IR/OpImplementation.h"
        -:   16:#include "mlir/Transforms/DialectConversion.h"
        -:   17:#include "llvm/ADT/TypeSwitch.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:using namespace acc;
        -:   21:
        -:   22:#include "mlir/Dialect/OpenACC/OpenACCOpsDialect.cpp.inc"
        -:   23:
        -:   24://===----------------------------------------------------------------------===//
        -:   25:// OpenACC operations
        -:   26://===----------------------------------------------------------------------===//
        -:   27:
function _ZN4mlir3acc14OpenACCDialect10initializeEv called 639 returned 100% blocks executed 100%
      639:   28:void OpenACCDialect::initialize() {
      639:   29:  addOperations<
        -:   30:#define GET_OP_LIST
        -:   31:#include "mlir/Dialect/OpenACC/OpenACCOps.cpp.inc"
      639:   32:      >();
call    0 returned 100%
      639:   33:  addAttributes<
        -:   34:#define GET_ATTRDEF_LIST
        -:   35:#include "mlir/Dialect/OpenACC/OpenACCOpsAttributes.cpp.inc"
      639:   36:      >();
call    0 returned 100%
      639:   37:}
        -:   38:
        -:   39:template <typename StructureOp>
    #####:   40:static ParseResult parseRegions(OpAsmParser &parser, OperationState &state,
        -:   41:                                unsigned nRegions = 1) {
        -:   42:
    #####:   43:  SmallVector<Region *, 2> regions;
    #####:   44:  for (unsigned i = 0; i < nRegions; ++i)
    #####:   45:    regions.push_back(state.addRegion());
        -:   46:
    #####:   47:  for (Region *region : regions) {
    #####:   48:    if (parser.parseRegion(*region, /*arguments=*/{}, /*argTypes=*/{}))
    #####:   49:      return failure();
        -:   50:  }
        -:   51:
    #####:   52:  return success();
        -:   53:}
------------------
_Z12parseRegionsIN4mlir3acc6LoopOpEENS0_11ParseResultERNS0_11OpAsmParserERNS0_14OperationStateEj:
function _Z12parseRegionsIN4mlir3acc6LoopOpEENS0_11ParseResultERNS0_11OpAsmParserERNS0_14OperationStateEj called 0 returned 0% blocks executed 0%
    #####:   40:static ParseResult parseRegions(OpAsmParser &parser, OperationState &state,
        -:   41:                                unsigned nRegions = 1) {
        -:   42:
    #####:   43:  SmallVector<Region *, 2> regions;
    #####:   44:  for (unsigned i = 0; i < nRegions; ++i)
branch  0 never executed
branch  1 never executed
    #####:   45:    regions.push_back(state.addRegion());
call    0 never executed
call    1 never executed
        -:   46:
    #####:   47:  for (Region *region : regions) {
branch  0 never executed
branch  1 never executed
    #####:   48:    if (parser.parseRegion(*region, /*arguments=*/{}, /*argTypes=*/{}))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:      return failure();
        -:   50:  }
        -:   51:
    #####:   52:  return success();
        -:   53:}
------------------
_Z12parseRegionsIN4mlir3acc10ParallelOpEENS0_11ParseResultERNS0_11OpAsmParserERNS0_14OperationStateEj:
function _Z12parseRegionsIN4mlir3acc10ParallelOpEENS0_11ParseResultERNS0_11OpAsmParserERNS0_14OperationStateEj called 0 returned 0% blocks executed 0%
    #####:   40:static ParseResult parseRegions(OpAsmParser &parser, OperationState &state,
        -:   41:                                unsigned nRegions = 1) {
        -:   42:
    #####:   43:  SmallVector<Region *, 2> regions;
    #####:   44:  for (unsigned i = 0; i < nRegions; ++i)
branch  0 never executed
branch  1 never executed
    #####:   45:    regions.push_back(state.addRegion());
call    0 never executed
call    1 never executed
        -:   46:
    #####:   47:  for (Region *region : regions) {
branch  0 never executed
branch  1 never executed
    #####:   48:    if (parser.parseRegion(*region, /*arguments=*/{}, /*argTypes=*/{}))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:      return failure();
        -:   50:  }
        -:   51:
    #####:   52:  return success();
        -:   53:}
------------------
        -:   54:
        -:   55:static ParseResult
function _ZL16parseOperandListRN4mlir11OpAsmParserEN4llvm9StringRefERNS2_15SmallVectorImplINS0_17UnresolvedOperandEEERNS4_INS_4TypeEEERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:   56:parseOperandList(OpAsmParser &parser, StringRef keyword,
        -:   57:                 SmallVectorImpl<OpAsmParser::UnresolvedOperand> &args,
        -:   58:                 SmallVectorImpl<Type> &argTypes, OperationState &result) {
    #####:   59:  if (failed(parser.parseOptionalKeyword(keyword)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    return success();
        -:   61:
    #####:   62:  if (failed(parser.parseLParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:    return failure();
        -:   64:
        -:   65:  // Exit early if the list is empty.
    #####:   66:  if (succeeded(parser.parseOptionalRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:    return success();
        -:   68:
function _ZZL16parseOperandListRN4mlir11OpAsmParserEN4llvm9StringRefERNS2_15SmallVectorImplINS0_17UnresolvedOperandEEERNS4_INS_4TypeEEERNS_14OperationStateEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:   69:  if (failed(parser.parseCommaSeparatedList([&]() {
branch  0 never executed
branch  1 never executed
    #####:   70:        OpAsmParser::UnresolvedOperand arg;
call    0 never executed
    #####:   71:        Type type;
        -:   72:
    #####:   73:        if (parser.parseOperand(arg, /*allowResultNumber=*/false) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   74:            parser.parseColonType(type))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   75:          return failure();
        -:   76:
    #####:   77:        args.push_back(arg);
call    0 never executed
    #####:   78:        argTypes.push_back(type);
call    0 never executed
    #####:   79:        return success();
    #####:   80:      })) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:      failed(parser.parseRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:    return failure();
        -:   83:
    #####:   84:  return parser.resolveOperands(args, argTypes, parser.getCurrentLocation(),
    #####:   85:                                result.operands);
call    0 never executed
call    1 never executed
        -:   86:}
        -:   87:
function _ZL16printOperandListN4mlir12OperandRangeEN4llvm9StringRefERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   88:static void printOperandList(Operation::operand_range operands,
        -:   89:                             StringRef listName, OpAsmPrinter &printer) {
        -:   90:
    #####:   91:  if (!operands.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   92:    printer << " " << listName << "(";
call    0 never executed
call    1 never executed
call    2 never executed
function _ZZL16printOperandListN4mlir12OperandRangeEN4llvm9StringRefERNS_12OpAsmPrinterEENKUlNS_5ValueEE_clES5_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   93:    llvm::interleaveComma(operands, printer, [&](Value op) {
call    0 never executed
    #####:   94:      printer << op << ": " << op.getType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   95:    });
    #####:   96:    printer << ")";
call    0 never executed
        -:   97:  }
    #####:   98:}
        -:   99:
function _ZL20parseOptionalOperandRN4mlir11OpAsmParserEN4llvm9StringRefERNS0_17UnresolvedOperandENS_4TypeERbRNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  100:static ParseResult parseOptionalOperand(OpAsmParser &parser, StringRef keyword,
        -:  101:                                        OpAsmParser::UnresolvedOperand &operand,
        -:  102:                                        Type type, bool &hasOptional,
        -:  103:                                        OperationState &result) {
    #####:  104:  hasOptional = false;
    #####:  105:  if (succeeded(parser.parseOptionalKeyword(keyword))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:    hasOptional = true;
    #####:  107:    if (parser.parseLParen() || parser.parseOperand(operand) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  108:        parser.resolveOperand(operand, type, result.operands) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  109:        parser.parseRParen())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:      return failure();
        -:  111:  }
    #####:  112:  return success();
        -:  113:}
        -:  114:
function _ZL19parseOperandAndTypeRN4mlir11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  115:static ParseResult parseOperandAndType(OpAsmParser &parser,
        -:  116:                                       OperationState &result) {
    #####:  117:  OpAsmParser::UnresolvedOperand operand;
call    0 never executed
    #####:  118:  Type type;
    #####:  119:  if (parser.parseOperand(operand) || parser.parseColonType(type) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  120:      parser.resolveOperand(operand, type, result.operands))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:    return failure();
    #####:  122:  return success();
        -:  123:}
        -:  124:
        -:  125:/// Parse optional operand and its type wrapped in parenthesis prefixed with
        -:  126:/// a keyword.
        -:  127:/// Example:
        -:  128:///   keyword `(` %vectorLength: i64 `)`
function _ZL27parseOptionalOperandAndTypeRN4mlir11OpAsmParserEN4llvm9StringRefERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  129:static OptionalParseResult parseOptionalOperandAndType(OpAsmParser &parser,
        -:  130:                                                       StringRef keyword,
        -:  131:                                                       OperationState &result) {
    #####:  132:  OpAsmParser::UnresolvedOperand operand;
call    0 never executed
    #####:  133:  if (succeeded(parser.parseOptionalKeyword(keyword))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  134:    return failure(parser.parseLParen() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  135:                   parseOperandAndType(parser, result) || parser.parseRParen());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  136:  }
    #####:  137:  return llvm::None;
        -:  138:}
        -:  139:
        -:  140:/// Parse optional operand and its type wrapped in parenthesis.
        -:  141:/// Example:
        -:  142:///   `(` %vectorLength: i64 `)`
function _ZL27parseOptionalOperandAndTypeRN4mlir11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  143:static OptionalParseResult parseOptionalOperandAndType(OpAsmParser &parser,
        -:  144:                                                       OperationState &result) {
    #####:  145:  if (succeeded(parser.parseOptionalLParen())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  146:    return failure(parseOperandAndType(parser, result) || parser.parseRParen());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  147:  }
    #####:  148:  return llvm::None;
        -:  149:}
        -:  150:
        -:  151:/// Parse optional operand with its type prefixed with prefixKeyword `=`.
        -:  152:/// Example:
        -:  153:///   num=%gangNum: i32
function _ZL38parserOptionalOperandAndTypeWithPrefixRN4mlir11OpAsmParserERNS_14OperationStateEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  154:static OptionalParseResult parserOptionalOperandAndTypeWithPrefix(
        -:  155:    OpAsmParser &parser, OperationState &result, StringRef prefixKeyword) {
    #####:  156:  if (succeeded(parser.parseOptionalKeyword(prefixKeyword))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  157:    if (parser.parseEqual() || parseOperandAndType(parser, result))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  158:      return failure();
    #####:  159:    return success();
        -:  160:  }
    #####:  161:  return llvm::None;
        -:  162:}
        -:  163:
function _ZL18isComputeOperationPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  164:static bool isComputeOperation(Operation *op) {
    #####:  165:  return isa<acc::ParallelOp>(op) || isa<acc::LoopOp>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  166:}
        -:  167:
        -:  168:namespace {
        -:  169:/// Pattern to remove operation without region that have constant false `ifCond`
        -:  170:/// and remove the condition from the operation if the `ifCond` is a true
        -:  171:/// constant.
        -:  172:template <typename OpTy>
        -:  173:struct RemoveConstantIfCondition : public OpRewritePattern<OpTy> {
        -:  174:  using OpRewritePattern<OpTy>::OpRewritePattern;
        -:  175:
    #####:  176:  LogicalResult matchAndRewrite(OpTy op,
        -:  177:                                PatternRewriter &rewriter) const override {
        -:  178:    // Early return if there is no condition.
    #####:  179:    Value ifCond = op.getIfCond();
    #####:  180:    if (!ifCond)
    #####:  181:      return success();
        -:  182:
    #####:  183:    IntegerAttr constAttr;
    #####:  184:    if (matchPattern(ifCond, m_Constant(&constAttr))) {
    #####:  185:      if (constAttr.getInt())
    #####:  186:        rewriter.updateRootInPlace(op,
    #####:  187:                                   [&]() { op.getIfCondMutable().erase(0); });
        -:  188:      else
    #####:  189:        rewriter.eraseOp(op);
        -:  190:    }
        -:  191:
    #####:  192:    return success();
        -:  193:  }
------------------
_ZNK12_GLOBAL__N_125RemoveConstantIfConditionIN4mlir3acc10ExitDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_125RemoveConstantIfConditionIN4mlir3acc10ExitDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  176:  LogicalResult matchAndRewrite(OpTy op,
        -:  177:                                PatternRewriter &rewriter) const override {
        -:  178:    // Early return if there is no condition.
    #####:  179:    Value ifCond = op.getIfCond();
call    0 never executed
    #####:  180:    if (!ifCond)
branch  0 never executed
branch  1 never executed
    #####:  181:      return success();
        -:  182:
    #####:  183:    IntegerAttr constAttr;
call    0 never executed
    #####:  184:    if (matchPattern(ifCond, m_Constant(&constAttr))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:      if (constAttr.getInt())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:        rewriter.updateRootInPlace(op,
call    0 never executed
        -:  187:                                   [&]() { op.getIfCondMutable().erase(0); });
        -:  188:      else
    #####:  189:        rewriter.eraseOp(op);
call    0 never executed
        -:  190:    }
        -:  191:
    #####:  192:    return success();
        -:  193:  }
------------------
_ZNK12_GLOBAL__N_125RemoveConstantIfConditionIN4mlir3acc11EnterDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_125RemoveConstantIfConditionIN4mlir3acc11EnterDataOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  176:  LogicalResult matchAndRewrite(OpTy op,
        -:  177:                                PatternRewriter &rewriter) const override {
        -:  178:    // Early return if there is no condition.
    #####:  179:    Value ifCond = op.getIfCond();
call    0 never executed
    #####:  180:    if (!ifCond)
branch  0 never executed
branch  1 never executed
    #####:  181:      return success();
        -:  182:
    #####:  183:    IntegerAttr constAttr;
call    0 never executed
    #####:  184:    if (matchPattern(ifCond, m_Constant(&constAttr))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:      if (constAttr.getInt())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:        rewriter.updateRootInPlace(op,
call    0 never executed
        -:  187:                                   [&]() { op.getIfCondMutable().erase(0); });
        -:  188:      else
    #####:  189:        rewriter.eraseOp(op);
call    0 never executed
        -:  190:    }
        -:  191:
    #####:  192:    return success();
        -:  193:  }
------------------
_ZNK12_GLOBAL__N_125RemoveConstantIfConditionIN4mlir3acc8UpdateOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_125RemoveConstantIfConditionIN4mlir3acc8UpdateOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  176:  LogicalResult matchAndRewrite(OpTy op,
        -:  177:                                PatternRewriter &rewriter) const override {
        -:  178:    // Early return if there is no condition.
    #####:  179:    Value ifCond = op.getIfCond();
call    0 never executed
    #####:  180:    if (!ifCond)
branch  0 never executed
branch  1 never executed
    #####:  181:      return success();
        -:  182:
    #####:  183:    IntegerAttr constAttr;
call    0 never executed
    #####:  184:    if (matchPattern(ifCond, m_Constant(&constAttr))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:      if (constAttr.getInt())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:        rewriter.updateRootInPlace(op,
call    0 never executed
        -:  187:                                   [&]() { op.getIfCondMutable().erase(0); });
        -:  188:      else
    #####:  189:        rewriter.eraseOp(op);
call    0 never executed
        -:  190:    }
        -:  191:
    #####:  192:    return success();
        -:  193:  }
------------------
        -:  194:};
        -:  195:} // namespace
        -:  196:
        -:  197://===----------------------------------------------------------------------===//
        -:  198:// ParallelOp
        -:  199://===----------------------------------------------------------------------===//
        -:  200:
        -:  201:/// Parse acc.parallel operation
        -:  202:/// operation := `acc.parallel` `async` `(` index `)`?
        -:  203:///                             `wait` `(` index-list `)`?
        -:  204:///                             `num_gangs` `(` value `)`?
        -:  205:///                             `num_workers` `(` value `)`?
        -:  206:///                             `vector_length` `(` value `)`?
        -:  207:///                             `if` `(` value `)`?
        -:  208:///                             `self` `(` value `)`?
        -:  209:///                             `reduction` `(` value-list `)`?
        -:  210:///                             `copy` `(` value-list `)`?
        -:  211:///                             `copyin` `(` value-list `)`?
        -:  212:///                             `copyin_readonly` `(` value-list `)`?
        -:  213:///                             `copyout` `(` value-list `)`?
        -:  214:///                             `copyout_zero` `(` value-list `)`?
        -:  215:///                             `create` `(` value-list `)`?
        -:  216:///                             `create_zero` `(` value-list `)`?
        -:  217:///                             `no_create` `(` value-list `)`?
        -:  218:///                             `present` `(` value-list `)`?
        -:  219:///                             `deviceptr` `(` value-list `)`?
        -:  220:///                             `attach` `(` value-list `)`?
        -:  221:///                             `private` `(` value-list `)`?
        -:  222:///                             `firstprivate` `(` value-list `)`?
        -:  223:///                             region attr-dict?
function _ZN4mlir3acc10ParallelOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  224:ParseResult ParallelOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  225:  Builder &builder = parser.getBuilder();
call    0 never executed
    #####:  226:  SmallVector<OpAsmParser::UnresolvedOperand, 8> privateOperands,
call    0 never executed
    #####:  227:      firstprivateOperands, copyOperands, copyinOperands,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  228:      copyinReadonlyOperands, copyoutOperands, copyoutZeroOperands,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  229:      createOperands, createZeroOperands, noCreateOperands, presentOperands,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  230:      devicePtrOperands, attachOperands, waitOperands, reductionOperands;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  231:  SmallVector<Type, 8> waitOperandTypes, reductionOperandTypes,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  232:      copyOperandTypes, copyinOperandTypes, copyinReadonlyOperandTypes,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  233:      copyoutOperandTypes, copyoutZeroOperandTypes, createOperandTypes,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  234:      createZeroOperandTypes, noCreateOperandTypes, presentOperandTypes,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  235:      deviceptrOperandTypes, attachOperandTypes, privateOperandTypes,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  236:      firstprivateOperandTypes;
branch  0 never executed
branch  1 never executed
        -:  237:
    #####:  238:  SmallVector<Type, 8> operandTypes;
branch  0 never executed
branch  1 never executed
    #####:  239:  OpAsmParser::UnresolvedOperand ifCond, selfCond;
call    0 never executed
    #####:  240:  bool hasIfCond = false, hasSelfCond = false;
    #####:  241:  OptionalParseResult async, numGangs, numWorkers, vectorLength;
    #####:  242:  Type i1Type = builder.getI1Type();
call    0 never executed
        -:  243:
        -:  244:  // getAsync()?
    #####:  245:  async = parseOptionalOperandAndType(parser, ParallelOp::getAsyncKeyword(),
call    0 never executed
    #####:  246:                                      result);
call    0 never executed
    #####:  247:  if (async.has_value() && failed(*async))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  248:    return failure();
        -:  249:
        -:  250:  // getWait()?
    #####:  251:  if (failed(parseOperandList(parser, ParallelOp::getWaitKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  252:                              waitOperands, waitOperandTypes, result)))
call    0 never executed
    #####:  253:    return failure();
        -:  254:
        -:  255:  // num_gangs(value)?
    #####:  256:  numGangs = parseOptionalOperandAndType(
call    0 never executed
    #####:  257:      parser, ParallelOp::getNumGangsKeyword(), result);
call    0 never executed
    #####:  258:  if (numGangs.has_value() && failed(*numGangs))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  259:    return failure();
        -:  260:
        -:  261:  // num_workers(value)?
    #####:  262:  numWorkers = parseOptionalOperandAndType(
call    0 never executed
    #####:  263:      parser, ParallelOp::getNumWorkersKeyword(), result);
call    0 never executed
    #####:  264:  if (numWorkers.has_value() && failed(*numWorkers))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  265:    return failure();
        -:  266:
        -:  267:  // vector_length(value)?
    #####:  268:  vectorLength = parseOptionalOperandAndType(
call    0 never executed
    #####:  269:      parser, ParallelOp::getVectorLengthKeyword(), result);
call    0 never executed
    #####:  270:  if (vectorLength.has_value() && failed(*vectorLength))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  271:    return failure();
        -:  272:
        -:  273:  // if()?
    #####:  274:  if (failed(parseOptionalOperand(parser, ParallelOp::getIfKeyword(), ifCond,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  275:                                  i1Type, hasIfCond, result)))
call    0 never executed
    #####:  276:    return failure();
        -:  277:
        -:  278:  // self()?
    #####:  279:  if (failed(parseOptionalOperand(parser, ParallelOp::getSelfKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:                                  selfCond, i1Type, hasSelfCond, result)))
call    0 never executed
    #####:  281:    return failure();
        -:  282:
        -:  283:  // reduction()?
    #####:  284:  if (failed(parseOperandList(parser, ParallelOp::getReductionKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  285:                              reductionOperands, reductionOperandTypes,
    #####:  286:                              result)))
call    0 never executed
    #####:  287:    return failure();
        -:  288:
        -:  289:  // copy()?
    #####:  290:  if (failed(parseOperandList(parser, ParallelOp::getCopyKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:                              copyOperands, copyOperandTypes, result)))
call    0 never executed
    #####:  292:    return failure();
        -:  293:
        -:  294:  // copyin()?
    #####:  295:  if (failed(parseOperandList(parser, ParallelOp::getCopyinKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  296:                              copyinOperands, copyinOperandTypes, result)))
call    0 never executed
    #####:  297:    return failure();
        -:  298:
        -:  299:  // copyin_readonly()?
    #####:  300:  if (failed(parseOperandList(parser, ParallelOp::getCopyinReadonlyKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:                              copyinReadonlyOperands,
    #####:  302:                              copyinReadonlyOperandTypes, result)))
call    0 never executed
    #####:  303:    return failure();
        -:  304:
        -:  305:  // copyout()?
    #####:  306:  if (failed(parseOperandList(parser, ParallelOp::getCopyoutKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  307:                              copyoutOperands, copyoutOperandTypes, result)))
call    0 never executed
    #####:  308:    return failure();
        -:  309:
        -:  310:  // copyout_zero()?
    #####:  311:  if (failed(parseOperandList(parser, ParallelOp::getCopyoutZeroKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  312:                              copyoutZeroOperands, copyoutZeroOperandTypes,
    #####:  313:                              result)))
call    0 never executed
    #####:  314:    return failure();
        -:  315:
        -:  316:  // create()?
    #####:  317:  if (failed(parseOperandList(parser, ParallelOp::getCreateKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:                              createOperands, createOperandTypes, result)))
call    0 never executed
    #####:  319:    return failure();
        -:  320:
        -:  321:  // create_zero()?
    #####:  322:  if (failed(parseOperandList(parser, ParallelOp::getCreateZeroKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  323:                              createZeroOperands, createZeroOperandTypes,
    #####:  324:                              result)))
call    0 never executed
    #####:  325:    return failure();
        -:  326:
        -:  327:  // no_create()?
    #####:  328:  if (failed(parseOperandList(parser, ParallelOp::getNoCreateKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  329:                              noCreateOperands, noCreateOperandTypes, result)))
call    0 never executed
    #####:  330:    return failure();
        -:  331:
        -:  332:  // present()?
    #####:  333:  if (failed(parseOperandList(parser, ParallelOp::getPresentKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:                              presentOperands, presentOperandTypes, result)))
call    0 never executed
    #####:  335:    return failure();
        -:  336:
        -:  337:  // deviceptr()?
    #####:  338:  if (failed(parseOperandList(parser, ParallelOp::getDevicePtrKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  339:                              devicePtrOperands, deviceptrOperandTypes,
    #####:  340:                              result)))
call    0 never executed
    #####:  341:    return failure();
        -:  342:
        -:  343:  // attach()?
    #####:  344:  if (failed(parseOperandList(parser, ParallelOp::getAttachKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  345:                              attachOperands, attachOperandTypes, result)))
call    0 never executed
    #####:  346:    return failure();
        -:  347:
        -:  348:  // private()?
    #####:  349:  if (failed(parseOperandList(parser, ParallelOp::getPrivateKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  350:                              privateOperands, privateOperandTypes, result)))
call    0 never executed
    #####:  351:    return failure();
        -:  352:
        -:  353:  // firstprivate()?
    #####:  354:  if (failed(parseOperandList(parser, ParallelOp::getFirstPrivateKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  355:                              firstprivateOperands, firstprivateOperandTypes,
    #####:  356:                              result)))
call    0 never executed
    #####:  357:    return failure();
        -:  358:
        -:  359:  // Parallel op region
    #####:  360:  if (failed(parseRegions<ParallelOp>(parser, result)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  361:    return failure();
        -:  362:
    #####:  363:  result.addAttribute(
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  364:      ParallelOp::getOperandSegmentSizeAttr(),
    #####:  365:      builder.getDenseI32ArrayAttr(
    #####:  366:          {static_cast<int32_t>(async.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  367:           static_cast<int32_t>(waitOperands.size()),
    #####:  368:           static_cast<int32_t>(numGangs.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  369:           static_cast<int32_t>(numWorkers.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  370:           static_cast<int32_t>(vectorLength.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  371:           static_cast<int32_t>(hasIfCond ? 1 : 0),
    #####:  372:           static_cast<int32_t>(hasSelfCond ? 1 : 0),
    #####:  373:           static_cast<int32_t>(reductionOperands.size()),
    #####:  374:           static_cast<int32_t>(copyOperands.size()),
    #####:  375:           static_cast<int32_t>(copyinOperands.size()),
    #####:  376:           static_cast<int32_t>(copyinReadonlyOperands.size()),
    #####:  377:           static_cast<int32_t>(copyoutOperands.size()),
    #####:  378:           static_cast<int32_t>(copyoutZeroOperands.size()),
    #####:  379:           static_cast<int32_t>(createOperands.size()),
    #####:  380:           static_cast<int32_t>(createZeroOperands.size()),
    #####:  381:           static_cast<int32_t>(noCreateOperands.size()),
    #####:  382:           static_cast<int32_t>(presentOperands.size()),
    #####:  383:           static_cast<int32_t>(devicePtrOperands.size()),
    #####:  384:           static_cast<int32_t>(attachOperands.size()),
    #####:  385:           static_cast<int32_t>(privateOperands.size()),
call    0 never executed
    #####:  386:           static_cast<int32_t>(firstprivateOperands.size())}));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:  387:
        -:  388:  // Additional attributes
    #####:  389:  if (failed(parser.parseOptionalAttrDictWithKeyword(result.attributes)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  390:    return failure();
        -:  391:
    #####:  392:  return success();
        -:  393:}
        -:  394:
function _ZN4mlir3acc10ParallelOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  395:void ParallelOp::print(OpAsmPrinter &printer) {
        -:  396:  // getAsync()?
    #####:  397:  if (Value async = getAsync())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  398:    printer << " " << ParallelOp::getAsyncKeyword() << "(" << async << ": "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  399:            << async.getType() << ")";
call    0 never executed
call    1 never executed
        -:  400:
        -:  401:  // getWait()?
    #####:  402:  printOperandList(getWaitOperands(), ParallelOp::getWaitKeyword(), printer);
call    0 never executed
call    1 never executed
        -:  403:
        -:  404:  // num_gangs()?
    #####:  405:  if (Value numGangs = getNumGangs())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  406:    printer << " " << ParallelOp::getNumGangsKeyword() << "(" << numGangs
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  407:            << ": " << numGangs.getType() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  408:
        -:  409:  // num_workers()?
    #####:  410:  if (Value numWorkers = getNumWorkers())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  411:    printer << " " << ParallelOp::getNumWorkersKeyword() << "(" << numWorkers
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  412:            << ": " << numWorkers.getType() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  413:
        -:  414:  // vector_length()?
    #####:  415:  if (Value vectorLength = getVectorLength())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  416:    printer << " " << ParallelOp::getVectorLengthKeyword() << "("
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  417:            << vectorLength << ": " << vectorLength.getType() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  418:
        -:  419:  // if()?
    #####:  420:  if (Value ifCond = getIfCond())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  421:    printer << " " << ParallelOp::getIfKeyword() << "(" << ifCond << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  422:
        -:  423:  // self()?
    #####:  424:  if (Value selfCond = getSelfCond())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  425:    printer << " " << ParallelOp::getSelfKeyword() << "(" << selfCond << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  426:
        -:  427:  // reduction()?
    #####:  428:  printOperandList(getReductionOperands(), ParallelOp::getReductionKeyword(),
call    0 never executed
call    1 never executed
        -:  429:                   printer);
        -:  430:
        -:  431:  // copy()?
    #####:  432:  printOperandList(getCopyOperands(), ParallelOp::getCopyKeyword(), printer);
call    0 never executed
call    1 never executed
        -:  433:
        -:  434:  // copyin()?
    #####:  435:  printOperandList(getCopyinOperands(), ParallelOp::getCopyinKeyword(),
call    0 never executed
call    1 never executed
        -:  436:                   printer);
        -:  437:
        -:  438:  // copyin_readonly()?
    #####:  439:  printOperandList(getCopyinReadonlyOperands(),
call    0 never executed
call    1 never executed
        -:  440:                   ParallelOp::getCopyinReadonlyKeyword(), printer);
        -:  441:
        -:  442:  // copyout()?
    #####:  443:  printOperandList(getCopyoutOperands(), ParallelOp::getCopyoutKeyword(),
call    0 never executed
call    1 never executed
        -:  444:                   printer);
        -:  445:
        -:  446:  // copyout_zero()?
    #####:  447:  printOperandList(getCopyoutZeroOperands(),
call    0 never executed
call    1 never executed
        -:  448:                   ParallelOp::getCopyoutZeroKeyword(), printer);
        -:  449:
        -:  450:  // create()?
    #####:  451:  printOperandList(getCreateOperands(), ParallelOp::getCreateKeyword(),
call    0 never executed
call    1 never executed
        -:  452:                   printer);
        -:  453:
        -:  454:  // create_zero()?
    #####:  455:  printOperandList(getCreateZeroOperands(), ParallelOp::getCreateZeroKeyword(),
call    0 never executed
call    1 never executed
        -:  456:                   printer);
        -:  457:
        -:  458:  // no_create()?
    #####:  459:  printOperandList(getNoCreateOperands(), ParallelOp::getNoCreateKeyword(),
call    0 never executed
call    1 never executed
        -:  460:                   printer);
        -:  461:
        -:  462:  // present()?
    #####:  463:  printOperandList(getPresentOperands(), ParallelOp::getPresentKeyword(),
call    0 never executed
call    1 never executed
        -:  464:                   printer);
        -:  465:
        -:  466:  // deviceptr()?
    #####:  467:  printOperandList(getDevicePtrOperands(), ParallelOp::getDevicePtrKeyword(),
call    0 never executed
call    1 never executed
        -:  468:                   printer);
        -:  469:
        -:  470:  // attach()?
    #####:  471:  printOperandList(getAttachOperands(), ParallelOp::getAttachKeyword(),
call    0 never executed
call    1 never executed
        -:  472:                   printer);
        -:  473:
        -:  474:  // private()?
    #####:  475:  printOperandList(getGangPrivateOperands(), ParallelOp::getPrivateKeyword(),
call    0 never executed
call    1 never executed
        -:  476:                   printer);
        -:  477:
        -:  478:  // firstprivate()?
    #####:  479:  printOperandList(getGangFirstPrivateOperands(),
call    0 never executed
call    1 never executed
        -:  480:                   ParallelOp::getFirstPrivateKeyword(), printer);
        -:  481:
    #####:  482:  printer << ' ';
call    0 never executed
    #####:  483:  printer.printRegion(getRegion(),
call    0 never executed
        -:  484:                      /*printEntryBlockArgs=*/false,
    #####:  485:                      /*printBlockTerminators=*/true);
call    0 never executed
    #####:  486:  printer.printOptionalAttrDictWithKeyword(
call    0 never executed
    #####:  487:      (*this)->getAttrs(), ParallelOp::getOperandSegmentSizeAttr());
call    0 never executed
    #####:  488:}
        -:  489:
function _ZN4mlir3acc10ParallelOp18getNumDataOperandsEv called 0 returned 0% blocks executed 0%
    #####:  490:unsigned ParallelOp::getNumDataOperands() {
    #####:  491:  return getReductionOperands().size() + getCopyOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  492:         getCopyinOperands().size() + getCopyinReadonlyOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  493:         getCopyoutOperands().size() + getCopyoutZeroOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  494:         getCreateOperands().size() + getCreateZeroOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  495:         getNoCreateOperands().size() + getPresentOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  496:         getDevicePtrOperands().size() + getAttachOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  497:         getGangPrivateOperands().size() + getGangFirstPrivateOperands().size();
call    0 never executed
        -:  498:}
        -:  499:
function _ZN4mlir3acc10ParallelOp14getDataOperandEj called 0 returned 0% blocks executed 0%
    #####:  500:Value ParallelOp::getDataOperand(unsigned i) {
    #####:  501:  unsigned numOptional = getAsync() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  502:  numOptional += getNumGangs() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  503:  numOptional += getNumWorkers() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  504:  numOptional += getVectorLength() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  505:  numOptional += getIfCond() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  506:  numOptional += getSelfCond() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  507:  return getOperand(getWaitOperands().size() + numOptional + i);
call    0 never executed
call    1 never executed
        -:  508:}
        -:  509:
        -:  510://===----------------------------------------------------------------------===//
        -:  511:// LoopOp
        -:  512://===----------------------------------------------------------------------===//
        -:  513:
        -:  514:/// Parse acc.loop operation
        -:  515:/// operation := `acc.loop`
        -:  516:///              (`gang` ( `(` (`num=` value)? (`,` `static=` value `)`)? )? )?
        -:  517:///              (`vector` ( `(` value `)` )? )? (`worker` (`(` value `)`)? )?
        -:  518:///              (`vector_length` `(` value `)`)?
        -:  519:///              (`tile` `(` value-list `)`)?
        -:  520:///              (`private` `(` value-list `)`)?
        -:  521:///              (`reduction` `(` value-list `)`)?
        -:  522:///              region attr-dict?
function _ZN4mlir3acc6LoopOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  523:ParseResult LoopOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  524:  Builder &builder = parser.getBuilder();
call    0 never executed
    #####:  525:  unsigned executionMapping = OpenACCExecMapping::NONE;
    #####:  526:  SmallVector<Type, 8> operandTypes;
call    0 never executed
    #####:  527:  SmallVector<OpAsmParser::UnresolvedOperand, 8> privateOperands,
branch  0 never executed
branch  1 never executed
    #####:  528:      reductionOperands;
branch  0 never executed
branch  1 never executed
    #####:  529:  SmallVector<OpAsmParser::UnresolvedOperand, 8> tileOperands;
branch  0 never executed
branch  1 never executed
    #####:  530:  OptionalParseResult gangNum, gangStatic, worker, vector;
        -:  531:
        -:  532:  // gang?
    #####:  533:  if (succeeded(parser.parseOptionalKeyword(LoopOp::getGangKeyword())))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  534:    executionMapping |= OpenACCExecMapping::GANG;
        -:  535:
        -:  536:  // optional gang operand
    #####:  537:  if (succeeded(parser.parseOptionalLParen())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  538:    gangNum = parserOptionalOperandAndTypeWithPrefix(
call    0 never executed
    #####:  539:        parser, result, LoopOp::getGangNumKeyword());
call    0 never executed
    #####:  540:    if (gangNum.has_value() && failed(*gangNum))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  541:      return failure();
        -:  542:    // FIXME: Comma should require subsequent operands.
    #####:  543:    (void)parser.parseOptionalComma();
call    0 never executed
    #####:  544:    gangStatic = parserOptionalOperandAndTypeWithPrefix(
call    0 never executed
    #####:  545:        parser, result, LoopOp::getGangStaticKeyword());
call    0 never executed
    #####:  546:    if (gangStatic.has_value() && failed(*gangStatic))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  547:      return failure();
        -:  548:    // FIXME: Why allow optional last commas?
    #####:  549:    (void)parser.parseOptionalComma();
call    0 never executed
    #####:  550:    if (failed(parser.parseRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  551:      return failure();
        -:  552:  }
        -:  553:
        -:  554:  // worker?
    #####:  555:  if (succeeded(parser.parseOptionalKeyword(LoopOp::getWorkerKeyword())))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  556:    executionMapping |= OpenACCExecMapping::WORKER;
        -:  557:
        -:  558:  // optional worker operand
    #####:  559:  worker = parseOptionalOperandAndType(parser, result);
call    0 never executed
    #####:  560:  if (worker.has_value() && failed(*worker))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  561:    return failure();
        -:  562:
        -:  563:  // vector?
    #####:  564:  if (succeeded(parser.parseOptionalKeyword(LoopOp::getVectorKeyword())))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  565:    executionMapping |= OpenACCExecMapping::VECTOR;
        -:  566:
        -:  567:  // optional vector operand
    #####:  568:  vector = parseOptionalOperandAndType(parser, result);
call    0 never executed
    #####:  569:  if (vector.has_value() && failed(*vector))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  570:    return failure();
        -:  571:
        -:  572:  // tile()?
    #####:  573:  if (failed(parseOperandList(parser, LoopOp::getTileKeyword(), tileOperands,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  574:                              operandTypes, result)))
call    0 never executed
    #####:  575:    return failure();
        -:  576:
        -:  577:  // private()?
    #####:  578:  if (failed(parseOperandList(parser, LoopOp::getPrivateKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  579:                              privateOperands, operandTypes, result)))
call    0 never executed
    #####:  580:    return failure();
        -:  581:
        -:  582:  // reduction()?
    #####:  583:  if (failed(parseOperandList(parser, LoopOp::getReductionKeyword(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  584:                              reductionOperands, operandTypes, result)))
call    0 never executed
    #####:  585:    return failure();
        -:  586:
    #####:  587:  if (executionMapping != acc::OpenACCExecMapping::NONE)
branch  0 never executed
branch  1 never executed
    #####:  588:    result.addAttribute(LoopOp::getExecutionMappingAttrStrName(),
call    0 never executed
    #####:  589:                        builder.getI64IntegerAttr(executionMapping));
call    0 never executed
        -:  590:
        -:  591:  // Parse optional results in case there is a reduce.
    #####:  592:  if (parser.parseOptionalArrowTypeList(result.types))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  593:    return failure();
        -:  594:
    #####:  595:  if (failed(parseRegions<LoopOp>(parser, result)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  596:    return failure();
        -:  597:
    #####:  598:  result.addAttribute(LoopOp::getOperandSegmentSizeAttr(),
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  599:                      builder.getDenseI32ArrayAttr(
    #####:  600:                          {static_cast<int32_t>(gangNum.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  601:                           static_cast<int32_t>(gangStatic.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  602:                           static_cast<int32_t>(worker.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  603:                           static_cast<int32_t>(vector.has_value() ? 1 : 0),
branch  0 never executed
branch  1 never executed
    #####:  604:                           static_cast<int32_t>(tileOperands.size()),
    #####:  605:                           static_cast<int32_t>(privateOperands.size()),
call    0 never executed
    #####:  606:                           static_cast<int32_t>(reductionOperands.size())}));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  607:
    #####:  608:  if (failed(parser.parseOptionalAttrDictWithKeyword(result.attributes)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  609:    return failure();
        -:  610:
    #####:  611:  return success();
        -:  612:}
        -:  613:
function _ZN4mlir3acc6LoopOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  614:void LoopOp::print(OpAsmPrinter &printer) {
    #####:  615:  unsigned execMapping = getExecMapping();
call    0 never executed
    #####:  616:  if (execMapping & OpenACCExecMapping::GANG) {
branch  0 never executed
branch  1 never executed
    #####:  617:    printer << " " << LoopOp::getGangKeyword();
call    0 never executed
call    1 never executed
    #####:  618:    Value gangNum = getGangNum();
call    0 never executed
    #####:  619:    Value gangStatic = getGangStatic();
call    0 never executed
        -:  620:
        -:  621:    // Print optional gang operands
    #####:  622:    if (gangNum || gangStatic) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  623:      printer << "(";
call    0 never executed
    #####:  624:      if (gangNum) {
branch  0 never executed
branch  1 never executed
    #####:  625:        printer << LoopOp::getGangNumKeyword() << "=" << gangNum << ": "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  626:                << gangNum.getType();
call    0 never executed
    #####:  627:        if (gangStatic)
branch  0 never executed
branch  1 never executed
    #####:  628:          printer << ", ";
call    0 never executed
        -:  629:      }
    #####:  630:      if (gangStatic)
branch  0 never executed
branch  1 never executed
    #####:  631:        printer << LoopOp::getGangStaticKeyword() << "=" << gangStatic << ": "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  632:                << gangStatic.getType();
call    0 never executed
    #####:  633:      printer << ")";
call    0 never executed
        -:  634:    }
        -:  635:  }
        -:  636:
    #####:  637:  if (execMapping & OpenACCExecMapping::WORKER) {
branch  0 never executed
branch  1 never executed
    #####:  638:    printer << " " << LoopOp::getWorkerKeyword();
call    0 never executed
call    1 never executed
        -:  639:
        -:  640:    // Print optional worker operand if present
    #####:  641:    if (Value workerNum = getWorkerNum())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  642:      printer << "(" << workerNum << ": " << workerNum.getType() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  643:  }
        -:  644:
    #####:  645:  if (execMapping & OpenACCExecMapping::VECTOR) {
branch  0 never executed
branch  1 never executed
    #####:  646:    printer << " " << LoopOp::getVectorKeyword();
call    0 never executed
call    1 never executed
        -:  647:
        -:  648:    // Print optional vector operand if present
    #####:  649:    if (Value vectorLength = this->getVectorLength())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  650:      printer << "(" << vectorLength << ": " << vectorLength.getType() << ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  651:  }
        -:  652:
        -:  653:  // tile()?
    #####:  654:  printOperandList(getTileOperands(), LoopOp::getTileKeyword(), printer);
call    0 never executed
call    1 never executed
        -:  655:
        -:  656:  // private()?
    #####:  657:  printOperandList(getPrivateOperands(), LoopOp::getPrivateKeyword(), printer);
call    0 never executed
call    1 never executed
        -:  658:
        -:  659:  // reduction()?
    #####:  660:  printOperandList(getReductionOperands(), LoopOp::getReductionKeyword(),
call    0 never executed
call    1 never executed
        -:  661:                   printer);
        -:  662:
    #####:  663:  if (getNumResults() > 0)
branch  0 never executed
branch  1 never executed
    #####:  664:    printer << " -> (" << getResultTypes() << ")";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  665:
    #####:  666:  printer << ' ';
call    0 never executed
    #####:  667:  printer.printRegion(getRegion(),
call    0 never executed
        -:  668:                      /*printEntryBlockArgs=*/false,
    #####:  669:                      /*printBlockTerminators=*/true);
call    0 never executed
        -:  670:
    #####:  671:  printer.printOptionalAttrDictWithKeyword(
call    0 never executed
    #####:  672:      (*this)->getAttrs(), {LoopOp::getExecutionMappingAttrStrName(),
call    0 never executed
    #####:  673:                            LoopOp::getOperandSegmentSizeAttr()});
call    0 never executed
    #####:  674:}
        -:  675:
function _ZN4mlir3acc6LoopOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  676:LogicalResult acc::LoopOp::verify() {
        -:  677:  // auto, independent and seq attribute are mutually exclusive.
    #####:  678:  if ((getAuto_() && (getIndependent() || getSeq())) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  679:      (getIndependent() && getSeq())) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  680:    return emitError("only one of " + acc::LoopOp::getAutoAttrStrName() + ", " +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  681:                     acc::LoopOp::getIndependentAttrStrName() + ", " +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  682:                     acc::LoopOp::getSeqAttrStrName() +
call    0 never executed
call    1 never executed
    #####:  683:                     " can be present at the same time");
call    0 never executed
call    1 never executed
call    2 never executed
        -:  684:  }
        -:  685:
        -:  686:  // Gang, worker and vector are incompatible with seq.
    #####:  687:  if (getSeq() && getExecMapping() != OpenACCExecMapping::NONE)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  688:    return emitError("gang, worker or vector cannot appear with the seq attr");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  689:
        -:  690:  // Check non-empty body().
    #####:  691:  if (getRegion().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:    return emitError("expected non-empty body.");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  693:
    #####:  694:  return success();
        -:  695:}
        -:  696:
        -:  697://===----------------------------------------------------------------------===//
        -:  698:// DataOp
        -:  699://===----------------------------------------------------------------------===//
        -:  700:
function _ZN4mlir3acc6DataOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  701:LogicalResult acc::DataOp::verify() {
        -:  702:  // 2.6.5. Data Construct restriction
        -:  703:  // At least one copy, copyin, copyout, create, no_create, present, deviceptr,
        -:  704:  // attach, or default clause must appear on a data construct.
    #####:  705:  if (getOperands().empty() && !getDefaultAttr())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  706:    return emitError("at least one operand or the default attribute "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  707:                     "must appear on the data operation");
call    0 never executed
    #####:  708:  return success();
        -:  709:}
        -:  710:
function _ZN4mlir3acc6DataOp18getNumDataOperandsEv called 0 returned 0% blocks executed 0%
    #####:  711:unsigned DataOp::getNumDataOperands() {
    #####:  712:  return getCopyOperands().size() + getCopyinOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  713:         getCopyinReadonlyOperands().size() + getCopyoutOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  714:         getCopyoutZeroOperands().size() + getCreateOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  715:         getCreateZeroOperands().size() + getNoCreateOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  716:         getPresentOperands().size() + getDeviceptrOperands().size() +
call    0 never executed
call    1 never executed
    #####:  717:         getAttachOperands().size();
        -:  718:}
        -:  719:
function _ZN4mlir3acc6DataOp14getDataOperandEj called 0 returned 0% blocks executed 0%
    #####:  720:Value DataOp::getDataOperand(unsigned i) {
    #####:  721:  unsigned numOptional = getIfCond() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  722:  return getOperand(numOptional + i);
call    0 never executed
        -:  723:}
        -:  724:
        -:  725://===----------------------------------------------------------------------===//
        -:  726:// ExitDataOp
        -:  727://===----------------------------------------------------------------------===//
        -:  728:
function _ZN4mlir3acc10ExitDataOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  729:LogicalResult acc::ExitDataOp::verify() {
        -:  730:  // 2.6.6. Data Exit Directive restriction
        -:  731:  // At least one copyout, delete, or detach clause must appear on an exit data
        -:  732:  // directive.
    #####:  733:  if (getCopyoutOperands().empty() && getDeleteOperands().empty() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  734:      getDetachOperands().empty())
branch  0 never executed
branch  1 never executed
    #####:  735:    return emitError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  736:        "at least one operand in copyout, delete or detach must appear on the "
    #####:  737:        "exit data operation");
call    0 never executed
        -:  738:
        -:  739:  // The async attribute represent the async clause without value. Therefore the
        -:  740:  // attribute and operand cannot appear at the same time.
    #####:  741:  if (getAsyncOperand() && getAsync())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  742:    return emitError("async attribute cannot appear with asyncOperand");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  743:
        -:  744:  // The wait attribute represent the wait clause without values. Therefore the
        -:  745:  // attribute and operands cannot appear at the same time.
    #####:  746:  if (!getWaitOperands().empty() && getWait())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  747:    return emitError("wait attribute cannot appear with waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  748:
    #####:  749:  if (getWaitDevnum() && getWaitOperands().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  750:    return emitError("wait_devnum cannot appear without waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  751:
    #####:  752:  return success();
        -:  753:}
        -:  754:
function _ZN4mlir3acc10ExitDataOp18getNumDataOperandsEv called 0 returned 0% blocks executed 0%
    #####:  755:unsigned ExitDataOp::getNumDataOperands() {
    #####:  756:  return getCopyoutOperands().size() + getDeleteOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  757:         getDetachOperands().size();
        -:  758:}
        -:  759:
function _ZN4mlir3acc10ExitDataOp14getDataOperandEj called 0 returned 0% blocks executed 0%
    #####:  760:Value ExitDataOp::getDataOperand(unsigned i) {
    #####:  761:  unsigned numOptional = getIfCond() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  762:  numOptional += getAsyncOperand() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  763:  numOptional += getWaitDevnum() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  764:  return getOperand(getWaitOperands().size() + numOptional + i);
call    0 never executed
call    1 never executed
        -:  765:}
        -:  766:
function _ZN4mlir3acc10ExitDataOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 25 returned 100% blocks executed 100%
       25:  767:void ExitDataOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  768:                                             MLIRContext *context) {
       25:  769:  results.add<RemoveConstantIfCondition<ExitDataOp>>(context);
call    0 returned 100%
       25:  770:}
        -:  771:
        -:  772://===----------------------------------------------------------------------===//
        -:  773:// EnterDataOp
        -:  774://===----------------------------------------------------------------------===//
        -:  775:
function _ZN4mlir3acc11EnterDataOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  776:LogicalResult acc::EnterDataOp::verify() {
        -:  777:  // 2.6.6. Data Enter Directive restriction
        -:  778:  // At least one copyin, create, or attach clause must appear on an enter data
        -:  779:  // directive.
    #####:  780:  if (getCopyinOperands().empty() && getCreateOperands().empty() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  781:      getCreateZeroOperands().empty() && getAttachOperands().empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  782:    return emitError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  783:        "at least one operand in copyin, create, "
    #####:  784:        "create_zero or attach must appear on the enter data operation");
call    0 never executed
        -:  785:
        -:  786:  // The async attribute represent the async clause without value. Therefore the
        -:  787:  // attribute and operand cannot appear at the same time.
    #####:  788:  if (getAsyncOperand() && getAsync())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:    return emitError("async attribute cannot appear with asyncOperand");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  790:
        -:  791:  // The wait attribute represent the wait clause without values. Therefore the
        -:  792:  // attribute and operands cannot appear at the same time.
    #####:  793:  if (!getWaitOperands().empty() && getWait())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:    return emitError("wait attribute cannot appear with waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  795:
    #####:  796:  if (getWaitDevnum() && getWaitOperands().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  797:    return emitError("wait_devnum cannot appear without waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  798:
    #####:  799:  return success();
        -:  800:}
        -:  801:
function _ZN4mlir3acc11EnterDataOp18getNumDataOperandsEv called 0 returned 0% blocks executed 0%
    #####:  802:unsigned EnterDataOp::getNumDataOperands() {
    #####:  803:  return getCopyinOperands().size() + getCreateOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  804:         getCreateZeroOperands().size() + getAttachOperands().size();
call    0 never executed
        -:  805:}
        -:  806:
function _ZN4mlir3acc11EnterDataOp14getDataOperandEj called 0 returned 0% blocks executed 0%
    #####:  807:Value EnterDataOp::getDataOperand(unsigned i) {
    #####:  808:  unsigned numOptional = getIfCond() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:  numOptional += getAsyncOperand() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  810:  numOptional += getWaitDevnum() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  811:  return getOperand(getWaitOperands().size() + numOptional + i);
call    0 never executed
call    1 never executed
        -:  812:}
        -:  813:
function _ZN4mlir3acc11EnterDataOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 25 returned 100% blocks executed 100%
       25:  814:void EnterDataOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  815:                                              MLIRContext *context) {
       25:  816:  results.add<RemoveConstantIfCondition<EnterDataOp>>(context);
call    0 returned 100%
       25:  817:}
        -:  818:
        -:  819://===----------------------------------------------------------------------===//
        -:  820:// InitOp
        -:  821://===----------------------------------------------------------------------===//
        -:  822:
function _ZN4mlir3acc6InitOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  823:LogicalResult acc::InitOp::verify() {
    #####:  824:  Operation *currOp = *this;
    #####:  825:  while ((currOp = currOp->getParentOp()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  826:    if (isComputeOperation(currOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:      return emitOpError("cannot be nested in a compute operation");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  828:  return success();
        -:  829:}
        -:  830:
        -:  831://===----------------------------------------------------------------------===//
        -:  832:// ShutdownOp
        -:  833://===----------------------------------------------------------------------===//
        -:  834:
function _ZN4mlir3acc10ShutdownOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  835:LogicalResult acc::ShutdownOp::verify() {
    #####:  836:  Operation *currOp = *this;
    #####:  837:  while ((currOp = currOp->getParentOp()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  838:    if (isComputeOperation(currOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:      return emitOpError("cannot be nested in a compute operation");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  840:  return success();
        -:  841:}
        -:  842:
        -:  843://===----------------------------------------------------------------------===//
        -:  844:// UpdateOp
        -:  845://===----------------------------------------------------------------------===//
        -:  846:
function _ZN4mlir3acc8UpdateOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  847:LogicalResult acc::UpdateOp::verify() {
        -:  848:  // At least one of host or device should have a value.
    #####:  849:  if (getHostOperands().empty() && getDeviceOperands().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  850:    return emitError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  851:        "at least one value must be present in hostOperands or deviceOperands");
call    0 never executed
        -:  852:
        -:  853:  // The async attribute represent the async clause without value. Therefore the
        -:  854:  // attribute and operand cannot appear at the same time.
    #####:  855:  if (getAsyncOperand() && getAsync())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  856:    return emitError("async attribute cannot appear with asyncOperand");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  857:
        -:  858:  // The wait attribute represent the wait clause without values. Therefore the
        -:  859:  // attribute and operands cannot appear at the same time.
    #####:  860:  if (!getWaitOperands().empty() && getWait())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:    return emitError("wait attribute cannot appear with waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  862:
    #####:  863:  if (getWaitDevnum() && getWaitOperands().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  864:    return emitError("wait_devnum cannot appear without waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  865:
    #####:  866:  return success();
        -:  867:}
        -:  868:
function _ZN4mlir3acc8UpdateOp18getNumDataOperandsEv called 0 returned 0% blocks executed 0%
    #####:  869:unsigned UpdateOp::getNumDataOperands() {
    #####:  870:  return getHostOperands().size() + getDeviceOperands().size();
call    0 never executed
call    1 never executed
        -:  871:}
        -:  872:
function _ZN4mlir3acc8UpdateOp14getDataOperandEj called 0 returned 0% blocks executed 0%
    #####:  873:Value UpdateOp::getDataOperand(unsigned i) {
    #####:  874:  unsigned numOptional = getAsyncOperand() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  875:  numOptional += getWaitDevnum() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:  numOptional += getIfCond() ? 1 : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  877:  return getOperand(getWaitOperands().size() + getDeviceTypeOperands().size() +
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  878:                    numOptional + i);
call    0 never executed
        -:  879:}
        -:  880:
function _ZN4mlir3acc8UpdateOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 25 returned 100% blocks executed 100%
       25:  881:void UpdateOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  882:                                           MLIRContext *context) {
       25:  883:  results.add<RemoveConstantIfCondition<UpdateOp>>(context);
call    0 returned 100%
       25:  884:}
        -:  885:
        -:  886://===----------------------------------------------------------------------===//
        -:  887:// WaitOp
        -:  888://===----------------------------------------------------------------------===//
        -:  889:
function _ZN4mlir3acc6WaitOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  890:LogicalResult acc::WaitOp::verify() {
        -:  891:  // The async attribute represent the async clause without value. Therefore the
        -:  892:  // attribute and operand cannot appear at the same time.
    #####:  893:  if (getAsyncOperand() && getAsync())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:    return emitError("async attribute cannot appear with asyncOperand");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  895:
    #####:  896:  if (getWaitDevnum() && getWaitOperands().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  897:    return emitError("wait_devnum cannot appear without waitOperands");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  898:
    #####:  899:  return success();
        -:  900:}
        -:  901:
        -:  902:#define GET_OP_CLASSES
        -:  903:#include "mlir/Dialect/OpenACC/OpenACCOps.cpp.inc"
        -:  904:
        -:  905:#define GET_ATTRDEF_CLASSES
        -:  906:#include "mlir/Dialect/OpenACC/OpenACCOpsAttributes.cpp.inc"
