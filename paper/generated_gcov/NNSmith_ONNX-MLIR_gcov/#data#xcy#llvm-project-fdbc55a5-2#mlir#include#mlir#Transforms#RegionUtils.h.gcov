        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/Transforms/RegionUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopCoalescing.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopCoalescing.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- RegionUtils.h - Region-related transformation utilities --*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_TRANSFORMS_REGIONUTILS_H_
        -:   10:#define MLIR_TRANSFORMS_REGIONUTILS_H_
        -:   11:
        -:   12:#include "mlir/IR/Region.h"
        -:   13:#include "mlir/IR/Value.h"
        -:   14:
        -:   15:#include "llvm/ADT/SetVector.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:class RewriterBase;
        -:   19:
        -:   20:/// Check if all values in the provided range are defined above the `limit`
        -:   21:/// region.  That is, if they are defined in a region that is a proper ancestor
        -:   22:/// of `limit`.
        -:   23:template <typename Range>
function _ZN4mlir21areValuesDefinedAboveINS_12OperandRangeEEEbT_RNS_6RegionE called 0 returned 0% blocks executed 0%
    #####:   24:bool areValuesDefinedAbove(Range values, Region &limit) {
    #####:   25:  for (Value v : values)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   26:    if (!v.getParentRegion()->isProperAncestor(&limit))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   27:      return false;
    #####:   28:  return true;
        -:   29:}
        -:   30:
        -:   31:/// Replace all uses of `orig` within the given region with `replacement`.
        -:   32:void replaceAllUsesInRegionWith(Value orig, Value replacement, Region &region);
        -:   33:
        -:   34:/// Calls `callback` for each use of a value within `region` or its descendants
        -:   35:/// that was defined at the ancestors of the `limit`.
        -:   36:void visitUsedValuesDefinedAbove(Region &region, Region &limit,
        -:   37:                                 function_ref<void(OpOperand *)> callback);
        -:   38:
        -:   39:/// Calls `callback` for each use of a value within any of the regions provided
        -:   40:/// that was defined in one of the ancestors.
        -:   41:void visitUsedValuesDefinedAbove(MutableArrayRef<Region> regions,
        -:   42:                                 function_ref<void(OpOperand *)> callback);
        -:   43:
        -:   44:/// Fill `values` with a list of values defined at the ancestors of the `limit`
        -:   45:/// region and used within `region` or its descendants.
        -:   46:void getUsedValuesDefinedAbove(Region &region, Region &limit,
        -:   47:                               SetVector<Value> &values);
        -:   48:
        -:   49:/// Fill `values` with a list of values used within any of the regions provided
        -:   50:/// but defined in one of the ancestors.
        -:   51:void getUsedValuesDefinedAbove(MutableArrayRef<Region> regions,
        -:   52:                               SetVector<Value> &values);
        -:   53:
        -:   54:/// Run a set of structural simplifications over the given regions. This
        -:   55:/// includes transformations like unreachable block elimination, dead argument
        -:   56:/// elimination, as well as some other DCE. This function returns success if any
        -:   57:/// of the regions were simplified, failure otherwise. The provided rewriter is
        -:   58:/// used to notify callers of operation and block deletion.
        -:   59:LogicalResult simplifyRegions(RewriterBase &rewriter,
        -:   60:                              MutableArrayRef<Region> regions);
        -:   61:
        -:   62:/// Erase the unreachable blocks within the provided regions. Returns success
        -:   63:/// if any blocks were erased, failure otherwise.
        -:   64:LogicalResult eraseUnreachableBlocks(RewriterBase &rewriter,
        -:   65:                                     MutableArrayRef<Region> regions);
        -:   66:
        -:   67:/// This function returns success if any operations or arguments were deleted,
        -:   68:/// failure otherwise.
        -:   69:LogicalResult runRegionDCE(RewriterBase &rewriter,
        -:   70:                           MutableArrayRef<Region> regions);
        -:   71:
        -:   72:} // namespace mlir
        -:   73:
        -:   74:#endif // MLIR_TRANSFORMS_REGIONUTILS_H_
