        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/MemRef/Transforms/ComposeSubView.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/MemRef/Transforms/CMakeFiles/obj.MLIRMemRefTransforms.dir/ComposeSubView.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/MemRef/Transforms/CMakeFiles/obj.MLIRMemRefTransforms.dir/ComposeSubView.cpp.gcda
        -:    0:Runs:128649
        -:    1://===- ComposeSubView.cpp - Combining composed subview ops ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains patterns for combining composed subview ops (i.e. subview
        -:   10:// of a subview becomes a single subview).
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/MemRef/Transforms/ComposeSubView.h"
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   17:#include "mlir/IR/BuiltinAttributes.h"
        -:   18:#include "mlir/IR/OpDefinition.h"
        -:   19:#include "mlir/IR/PatternMatch.h"
        -:   20:#include "mlir/Transforms/DialectConversion.h"
        -:   21:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:
        -:   27:// Replaces a subview of a subview with a single subview. Only supports subview
        -:   28:// ops with static sizes and static strides of 1 (both static and dynamic
        -:   29:// offsets are supported).
        -:   30:struct ComposeSubViewOpPattern : public OpRewritePattern<memref::SubViewOp> {
        -:   31:  using OpRewritePattern::OpRewritePattern;
        -:   32:
function _ZNK12_GLOBAL__N_123ComposeSubViewOpPattern15matchAndRewriteEN4mlir6memref9SubViewOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   33:  LogicalResult matchAndRewrite(memref::SubViewOp op,
        -:   34:                                PatternRewriter &rewriter) const override {
        -:   35:    // 'op' is the 'SubViewOp' we're rewriting. 'sourceOp' is the op that
        -:   36:    // produces the input of the op we're rewriting (for 'SubViewOp' the input
        -:   37:    // is called the "source" value). We can only combine them if both 'op' and
        -:   38:    // 'sourceOp' are 'SubViewOp'.
    #####:   39:    auto sourceOp = op.getSource().getDefiningOp<memref::SubViewOp>();
call    0 never executed
call    1 never executed
    #####:   40:    if (!sourceOp)
branch  0 never executed
branch  1 never executed
    #####:   41:      return failure();
        -:   42:
        -:   43:    // A 'SubViewOp' can be "rank-reducing" by eliminating dimensions of the
        -:   44:    // output memref that are statically known to be equal to 1. We do not
        -:   45:    // allow 'sourceOp' to be a rank-reducing subview because then our two
        -:   46:    // 'SubViewOp's would have different numbers of offset/size/stride
        -:   47:    // parameters (just difficult to deal with, not impossible if we end up
        -:   48:    // needing it).
    #####:   49:    if (sourceOp.getSourceType().getRank() != sourceOp.getType().getRank()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   50:      return failure();
        -:   51:    }
        -:   52:
        -:   53:    // Offsets, sizes and strides OpFoldResult for the combined 'SubViewOp'.
    #####:   54:    SmallVector<OpFoldResult> offsets, sizes, strides;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   55:
        -:   56:    // Because we only support input strides of 1, the output stride is also
        -:   57:    // always 1.
function _ZZNK12_GLOBAL__N_123ComposeSubViewOpPattern15matchAndRewriteEN4mlir6memref9SubViewOpERNS1_15PatternRewriterEENKUlRNS1_12OpFoldResultEE_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   58:    if (llvm::all_of(strides, [](OpFoldResult &valueOrAttr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:          Attribute attr = valueOrAttr.dyn_cast<Attribute>();
call    0 never executed
    #####:   60:          return attr && attr.cast<IntegerAttr>().getInt() == 1;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   61:        })) {
    #####:   62:      strides = SmallVector<OpFoldResult>(sourceOp.getMixedStrides().size(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   63:                                          rewriter.getI64IntegerAttr(1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   64:    } else {
    #####:   65:      return failure();
        -:   66:    }
        -:   67:
        -:   68:    // The rules for calculating the new offsets and sizes are:
        -:   69:    // * Multiple subview offsets for a given dimension compose additively.
        -:   70:    //   ("Offset by m" followed by "Offset by n" == "Offset by m + n")
        -:   71:    // * Multiple sizes for a given dimension compose by taking the size of the
        -:   72:    //   final subview and ignoring the rest. ("Take m values" followed by "Take
        -:   73:    //   n values" == "Take n values") This size must also be the smallest one
        -:   74:    //   by definition (a subview needs to be the same size as or smaller than
        -:   75:    //   its source along each dimension; presumably subviews that are larger
        -:   76:    //   than their sources are disallowed by validation).
    #####:   77:    for (auto it : llvm::zip(op.getMixedOffsets(), sourceOp.getMixedOffsets(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   78:                             op.getMixedSizes())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   79:      auto opOffset = std::get<0>(it);
branch  0 never executed
branch  1 never executed
    #####:   80:      auto sourceOffset = std::get<1>(it);
    #####:   81:      auto opSize = std::get<2>(it);
branch  0 never executed
branch  1 never executed
        -:   82:
        -:   83:      // We only support static sizes.
    #####:   84:      if (opSize.is<Value>()) {
branch  0 never executed
branch  1 never executed
    #####:   85:        return failure();
call    0 never executed
        -:   86:      }
        -:   87:
    #####:   88:      sizes.push_back(opSize);
call    0 never executed
    #####:   89:      Attribute opOffsetAttr = opOffset.dyn_cast<Attribute>(),
call    0 never executed
call    1 never executed
    #####:   90:                sourceOffsetAttr = sourceOffset.dyn_cast<Attribute>();
        -:   91:
    #####:   92:      if (opOffsetAttr && sourceOffsetAttr) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   93:        // If both offsets are static we can simply calculate the combined
        -:   94:        // offset statically.
    #####:   95:        offsets.push_back(rewriter.getI64IntegerAttr(
call    0 never executed
    #####:   96:            opOffsetAttr.cast<IntegerAttr>().getInt() +
call    0 never executed
call    1 never executed
    #####:   97:            sourceOffsetAttr.cast<IntegerAttr>().getInt()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   98:      } else {
        -:   99:        // When either offset is dynamic, we must emit an additional affine
        -:  100:        // transformation to add the two offsets together dynamically.
    #####:  101:        AffineExpr expr = rewriter.getAffineConstantExpr(0);
call    0 never executed
    #####:  102:        SmallVector<Value> affineApplyOperands;
    #####:  103:        for (auto valueOrAttr : {opOffset, sourceOffset}) {
branch  0 never executed
branch  1 never executed
    #####:  104:          if (auto attr = valueOrAttr.dyn_cast<Attribute>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  105:            expr = expr + attr.cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  106:          } else {
    #####:  107:            expr =
    #####:  108:                expr + rewriter.getAffineSymbolExpr(affineApplyOperands.size());
call    0 never executed
call    1 never executed
    #####:  109:            affineApplyOperands.push_back(valueOrAttr.get<Value>());
call    0 never executed
call    1 never executed
        -:  110:          }
        -:  111:        }
        -:  112:
    #####:  113:        AffineMap map = AffineMap::get(0, affineApplyOperands.size(), expr);
call    0 never executed
    #####:  114:        Value result = rewriter.create<AffineApplyOp>(op.getLoc(), map,
    #####:  115:                                                      affineApplyOperands);
call    0 never executed
call    1 never executed
    #####:  116:        offsets.push_back(result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  117:      }
        -:  118:    }
        -:  119:
        -:  120:    // This replaces 'op' but leaves 'sourceOp' alone; if it no longer has any
        -:  121:    // uses it can be removed by a (separate) dead code elimination pass.
    #####:  122:    rewriter.replaceOpWithNewOp<memref::SubViewOp>(op, sourceOp.getSource(),
    #####:  123:                                                   offsets, sizes, strides);
call    0 never executed
call    1 never executed
    #####:  124:    return success();
branch  0 never executed
branch  1 never executed
        -:  125:  }
        -:  126:};
        -:  127:
        -:  128:} // namespace
        -:  129:
function _ZN4mlir6memref30populateComposeSubViewPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 530 returned 100% blocks executed 100%
      530:  130:void mlir::memref::populateComposeSubViewPatterns(RewritePatternSet &patterns,
        -:  131:                                                  MLIRContext *context) {
      530:  132:  patterns.add<ComposeSubViewOpPattern>(context);
call    0 returned 100%
      530:  133:}
