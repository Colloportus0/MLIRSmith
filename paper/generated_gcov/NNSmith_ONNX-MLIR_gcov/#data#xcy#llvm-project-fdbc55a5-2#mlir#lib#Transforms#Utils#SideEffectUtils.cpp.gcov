        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/Utils/SideEffectUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/SideEffectUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/SideEffectUtils.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- SideEffectUtils.cpp - Side Effect Utils ------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Transforms/SideEffectUtils.h"
        -:   10:#include "mlir/IR/Operation.h"
        -:   11:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
function _ZN4mlir18isMemoryEffectFreeEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   15:bool mlir::isMemoryEffectFree(Operation *op) {
    #####:   16:  if (auto memInterface = dyn_cast<MemoryEffectOpInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   17:    // If the op has side-effects, it cannot be moved.
    #####:   18:    if (!memInterface.hasNoEffect())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   19:      return false;
        -:   20:    // If the op does not have recursive side effects, then it can be moved.
    #####:   21:    if (!op->hasTrait<OpTrait::HasRecursiveMemoryEffects>())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   22:      return true;
    #####:   23:  } else if (!op->hasTrait<OpTrait::HasRecursiveMemoryEffects>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   24:    // Otherwise, if the op does not implement the memory effect interface and
        -:   25:    // it does not have recursive side effects, then it cannot be known that the
        -:   26:    // op is moveable.
        -:   27:    return false;
        -:   28:  }
        -:   29:
        -:   30:  // Recurse into the regions and ensure that all nested ops can also be moved.
    #####:   31:  for (Region &region : op->getRegions())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   32:    for (Operation &op : region.getOps())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   33:      if (!isMemoryEffectFree(&op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   34:        return false;
        -:   35:  return true;
        -:   36:}
        -:   37:
function _ZN4mlir14isSpeculatableEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   38:bool mlir::isSpeculatable(Operation *op) {
    #####:   39:  auto conditionallySpeculatable = dyn_cast<ConditionallySpeculatable>(op);
call    0 never executed
    #####:   40:  if (!conditionallySpeculatable)
branch  0 never executed
branch  1 never executed
        -:   41:    return false;
        -:   42:
    #####:   43:  switch (conditionallySpeculatable.getSpeculatability()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   44:  case Speculation::RecursivelySpeculatable:
    #####:   45:    for (Region &region : op->getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:      for (Operation &op : region.getOps())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   47:        if (!isSpeculatable(&op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   48:          return false;
        -:   49:    }
        -:   50:    return true;
        -:   51:
        -:   52:  case Speculation::Speculatable:
        -:   53:    return true;
        -:   54:
    #####:   55:  case Speculation::NotSpeculatable:
    #####:   56:    return false;
        -:   57:  }
        -:   58:
    #####:   59:  llvm_unreachable("Unhandled enum in mlir::isSpeculatable!");
call    0 never executed
        -:   60:}
