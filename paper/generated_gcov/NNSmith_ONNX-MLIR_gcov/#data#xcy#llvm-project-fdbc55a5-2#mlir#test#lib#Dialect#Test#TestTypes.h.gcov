        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/Test/TestTypes.h
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Test/CMakeFiles/MLIRTestDialect.dir/TestTypes.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Test/CMakeFiles/MLIRTestDialect.dir/TestTypes.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestTypes.h - MLIR Test Dialect Types --------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains types defined by the TestDialect for testing various
        -:   10:// features of MLIR.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_TESTTYPES_H
        -:   15:#define MLIR_TESTTYPES_H
        -:   16:
        -:   17:#include <tuple>
        -:   18:
        -:   19:#include "TestTraits.h"
        -:   20:#include "mlir/IR/Diagnostics.h"
        -:   21:#include "mlir/IR/Dialect.h"
        -:   22:#include "mlir/IR/DialectImplementation.h"
        -:   23:#include "mlir/IR/Operation.h"
        -:   24:#include "mlir/IR/SubElementInterfaces.h"
        -:   25:#include "mlir/IR/Types.h"
        -:   26:#include "mlir/Interfaces/DataLayoutInterfaces.h"
        -:   27:
        -:   28:namespace test {
        -:   29:class TestAttrWithFormatAttr;
        -:   30:
        -:   31:/// FieldInfo represents a field in the StructType data type. It is used as a
        -:   32:/// parameter in TestTypeDefs.td.
        -:   33:struct FieldInfo {
        -:   34:  ::llvm::StringRef name;
        -:   35:  ::mlir::Type type;
        -:   36:
        -:   37:  // Custom allocation called from generated constructor code
    #####:   38:  FieldInfo allocateInto(::mlir::TypeStorageAllocator &alloc) const {
    #####:   39:    return FieldInfo{alloc.copyInto(name), type};
call    0 never executed
call    1 never executed
        -:   40:  }
        -:   41:};
        -:   42:
        -:   43:/// A custom type for a test type parameter.
        -:   44:struct CustomParam {
        -:   45:  int value;
        -:   46:
    #####:   47:  bool operator==(const CustomParam &other) const {
    #####:   48:    return other.value == value;
branch  0 never executed
branch  1 never executed
        -:   49:  }
        -:   50:};
        -:   51:
    #####:   52:inline llvm::hash_code hash_value(const test::CustomParam &param) {
    #####:   53:  return llvm::hash_value(param.value);
call    0 never executed
call    1 never executed
        -:   54:}
        -:   55:
        -:   56:} // namespace test
        -:   57:
        -:   58:namespace mlir {
        -:   59:template <>
        -:   60:struct FieldParser<test::CustomParam> {
function _ZN4mlir11FieldParserIN4test11CustomParamES2_E5parseERNS_9AsmParserE called 0 returned 0% blocks executed 0%
    #####:   61:  static FailureOr<test::CustomParam> parse(AsmParser &parser) {
    #####:   62:    auto value = FieldParser<int>::parse(parser);
call    0 never executed
    #####:   63:    if (failed(value))
branch  0 never executed
branch  1 never executed
    #####:   64:      return failure();
    #####:   65:    return test::CustomParam{*value};
        -:   66:  }
        -:   67:};
        -:   68:
    #####:   69:inline mlir::AsmPrinter &operator<<(mlir::AsmPrinter &printer,
        -:   70:                                    test::CustomParam param) {
    #####:   71:  return printer << param.value;
call    0 never executed
call    1 never executed
        -:   72:}
        -:   73:
        -:   74:/// Overload the attribute parameter parser for optional integers.
        -:   75:template <>
        -:   76:struct FieldParser<Optional<int>> {
function _ZN4mlir11FieldParserIN4llvm8OptionalIiEES3_E5parseERNS_9AsmParserE called 0 returned 0% blocks executed 0%
    #####:   77:  static FailureOr<Optional<int>> parse(AsmParser &parser) {
    #####:   78:    Optional<int> value;
    #####:   79:    value.emplace();
call    0 never executed
    #####:   80:    OptionalParseResult result = parser.parseOptionalInteger(*value);
call    0 never executed
    #####:   81:    if (result.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:   82:      if (succeeded(*result))
branch  0 never executed
branch  1 never executed
    #####:   83:        return value;
    #####:   84:      return failure();
        -:   85:    }
    #####:   86:    value.reset();
branch  0 never executed
branch  1 never executed
    #####:   87:    return value;
        -:   88:  }
        -:   89:};
        -:   90:} // namespace mlir
        -:   91:
        -:   92:#include "TestTypeInterfaces.h.inc"
        -:   93:
        -:   94:#define GET_TYPEDEF_CLASSES
        -:   95:#include "TestTypeDefs.h.inc"
        -:   96:
        -:   97:namespace test {
        -:   98:
        -:   99:/// Storage for simple named recursive types, where the type is identified by
        -:  100:/// its name and can "contain" another type, including itself.
        -:  101:struct TestRecursiveTypeStorage : public ::mlir::TypeStorage {
        -:  102:  using KeyTy = ::llvm::StringRef;
        -:  103:
        -:  104:  explicit TestRecursiveTypeStorage(::llvm::StringRef key) : name(key) {}
        -:  105:
function _ZNK4test24TestRecursiveTypeStorageeqERKN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  106:  bool operator==(const KeyTy &other) const { return name == other; }
branch  0 never executed
branch  1 never executed
        -:  107:
        -:  108:  static TestRecursiveTypeStorage *
        -:  109:  construct(::mlir::TypeStorageAllocator &allocator, const KeyTy &key) {
        -:  110:    return new (allocator.allocate<TestRecursiveTypeStorage>())
        -:  111:        TestRecursiveTypeStorage(allocator.copyInto(key));
        -:  112:  }
        -:  113:
    #####:  114:  ::mlir::LogicalResult mutate(::mlir::TypeStorageAllocator &allocator,
        -:  115:                               ::mlir::Type newBody) {
        -:  116:    // Cannot set a different body than before.
    #####:  117:    if (body && body != newBody)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      return ::mlir::failure();
        -:  119:
    #####:  120:    body = newBody;
    #####:  121:    return ::mlir::success();
        -:  122:  }
        -:  123:
        -:  124:  ::llvm::StringRef name;
        -:  125:  ::mlir::Type body;
        -:  126:};
        -:  127:
        -:  128:/// Simple recursive type identified by its name and pointing to another named
        -:  129:/// type, potentially itself. This requires the body to be mutated separately
        -:  130:/// from type creation.
        -:  131:class TestRecursiveType
        -:  132:    : public ::mlir::Type::TypeBase<TestRecursiveType, ::mlir::Type,
        -:  133:                                    TestRecursiveTypeStorage,
        -:  134:                                    ::mlir::SubElementTypeInterface::Trait,
        -:  135:                                    ::mlir::TypeTrait::IsMutable> {
        -:  136:public:
    #####:  137:  using Base::Base;
        -:  138:
    #####:  139:  static TestRecursiveType get(::mlir::MLIRContext *ctx,
        -:  140:                               ::llvm::StringRef name) {
    #####:  141:    return Base::get(ctx, name);
call    0 never executed
        -:  142:  }
        -:  143:
        -:  144:  /// Body getter and setter.
    #####:  145:  ::mlir::LogicalResult setBody(Type body) { return Base::mutate(body); }
call    0 never executed
    #####:  146:  ::mlir::Type getBody() const { return getImpl()->body; }
call    0 never executed
        -:  147:
        -:  148:  /// Name/key getter.
    #####:  149:  ::llvm::StringRef getName() { return getImpl()->name; }
call    0 never executed
        -:  150:
    #####:  151:  void walkImmediateSubElements(
        -:  152:      ::llvm::function_ref<void(::mlir::Attribute)> walkAttrsFn,
        -:  153:      ::llvm::function_ref<void(::mlir::Type)> walkTypesFn) const {
    #####:  154:    walkTypesFn(getBody());
call    0 never executed
        -:  155:  }
    #####:  156:  Type replaceImmediateSubElements(llvm::ArrayRef<mlir::Attribute> replAttrs,
        -:  157:                                   llvm::ArrayRef<mlir::Type> replTypes) const {
        -:  158:    // TODO: It's not clear how we support replacing sub-elements of mutable
        -:  159:    // types.
    #####:  160:    return nullptr;
        -:  161:  }
        -:  162:};
        -:  163:
        -:  164:} // namespace test
        -:  165:
        -:  166:#endif // MLIR_TESTTYPES_H
