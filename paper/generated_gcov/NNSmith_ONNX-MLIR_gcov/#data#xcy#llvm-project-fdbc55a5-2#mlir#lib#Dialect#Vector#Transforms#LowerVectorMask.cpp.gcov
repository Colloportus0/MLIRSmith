        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Vector/Transforms/LowerVectorMask.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/LowerVectorMask.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Vector/Transforms/CMakeFiles/obj.MLIRVectorTransforms.dir/LowerVectorMask.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- LowerVectorMask.cpp - Lower 'vector.mask' operation ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements target-independent rewrites and utilitites to lower the
        -:   10:// 'vector.mask' operation.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   16:#include "mlir/Dialect/Vector/Transforms/Passes.h"
        -:   17:#include "mlir/IR/PatternMatch.h"
        -:   18:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   19:
        -:   20:#define DEBUG_TYPE "lower-vector-mask"
        -:   21:
        -:   22:namespace mlir {
        -:   23:namespace vector {
        -:   24:#define GEN_PASS_DEF_LOWERVECTORMASKPASS
        -:   25:#include "mlir/Dialect/Vector/Transforms/Passes.h.inc"
        -:   26:} // namespace vector
        -:   27:} // namespace mlir
        -:   28:
        -:   29:using namespace mlir;
        -:   30:using namespace mlir::vector;
        -:   31:
        -:   32:namespace {
        -:   33:
        -:   34:/// The `MaskOpRewritePattern` implements a pattern that follows a two-fold
        -:   35:/// matching:
        -:   36:///   1. It matches a `vector.mask` operation.
        -:   37:///   2. It invokes `matchAndRewriteMaskableOp` on `MaskableOpInterface` nested
        -:   38:///      in the matched `vector.mask` operation.
        -:   39:///
        -:   40:/// It is required that the replacement op in the pattern replaces the
        -:   41:/// `vector.mask` operation and not the nested `MaskableOpInterface`. This
        -:   42:/// approach allows having patterns that "stop" at every `vector.mask` operation
        -:   43:/// and actually match the traits of its the nested `MaskableOpInterface`.
        -:   44:template <class SourceOp>
        -:   45:struct MaskOpRewritePattern : OpRewritePattern<MaskOp> {
        -:   46:  using OpRewritePattern<MaskOp>::OpRewritePattern;
        -:   47:
        -:   48:private:
        -:   49:  LogicalResult
    #####:   50:  matchAndRewrite(MaskOp maskOp,
        -:   51:                  PatternRewriter &rewriter) const override final {
    #####:   52:    MaskableOpInterface maskableOp = maskOp.getMaskableOp();
    #####:   53:    SourceOp sourceOp = dyn_cast<SourceOp>(maskableOp.getOperation());
    #####:   54:    if (!sourceOp)
    #####:   55:      return failure();
        -:   56:
    #####:   57:    return matchAndRewriteMaskableOp(sourceOp, maskOp, rewriter);
        -:   58:  }
------------------
_ZNK12_GLOBAL__N_120MaskOpRewritePatternIN4mlir6vector14TransferReadOpEE15matchAndRewriteENS2_6MaskOpERNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_120MaskOpRewritePatternIN4mlir6vector14TransferReadOpEE15matchAndRewriteENS2_6MaskOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   50:  matchAndRewrite(MaskOp maskOp,
        -:   51:                  PatternRewriter &rewriter) const override final {
    #####:   52:    MaskableOpInterface maskableOp = maskOp.getMaskableOp();
call    0 never executed
call    1 never executed
    #####:   53:    SourceOp sourceOp = dyn_cast<SourceOp>(maskableOp.getOperation());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    if (!sourceOp)
branch  0 never executed
branch  1 never executed
    #####:   55:      return failure();
        -:   56:
    #####:   57:    return matchAndRewriteMaskableOp(sourceOp, maskOp, rewriter);
call    0 never executed
call    1 never executed
        -:   58:  }
------------------
_ZNK12_GLOBAL__N_120MaskOpRewritePatternIN4mlir6vector15TransferWriteOpEE15matchAndRewriteENS2_6MaskOpERNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_120MaskOpRewritePatternIN4mlir6vector15TransferWriteOpEE15matchAndRewriteENS2_6MaskOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   50:  matchAndRewrite(MaskOp maskOp,
        -:   51:                  PatternRewriter &rewriter) const override final {
    #####:   52:    MaskableOpInterface maskableOp = maskOp.getMaskableOp();
call    0 never executed
call    1 never executed
    #####:   53:    SourceOp sourceOp = dyn_cast<SourceOp>(maskableOp.getOperation());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    if (!sourceOp)
branch  0 never executed
branch  1 never executed
    #####:   55:      return failure();
        -:   56:
    #####:   57:    return matchAndRewriteMaskableOp(sourceOp, maskOp, rewriter);
call    0 never executed
call    1 never executed
        -:   58:  }
------------------
        -:   59:
        -:   60:protected:
        -:   61:  virtual LogicalResult
        -:   62:  matchAndRewriteMaskableOp(SourceOp sourceOp, MaskingOpInterface maskingOp,
        -:   63:                            PatternRewriter &rewriter) const = 0;
        -:   64:};
        -:   65:
        -:   66:/// Lowers a masked `vector.transfer_read` operation.
        -:   67:struct MaskedTransferReadOpPattern
        -:   68:    : public MaskOpRewritePattern<TransferReadOp> {
        -:   69:public:
        -:   70:  using MaskOpRewritePattern<TransferReadOp>::MaskOpRewritePattern;
        -:   71:
        -:   72:  LogicalResult
function _ZNK12_GLOBAL__N_127MaskedTransferReadOpPattern25matchAndRewriteMaskableOpEN4mlir6vector14TransferReadOpENS2_18MaskingOpInterfaceERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   73:  matchAndRewriteMaskableOp(TransferReadOp readOp, MaskingOpInterface maskingOp,
        -:   74:                            PatternRewriter &rewriter) const override {
        -:   75:    // TODO: The 'vector.mask' passthru is a vector and 'vector.transfer_read'
        -:   76:    // expects a scalar. We could only lower one to the other for cases where
        -:   77:    // the passthru is a broadcast of a scalar.
    #####:   78:    if (maskingOp.hasPassthru())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:      return rewriter.notifyMatchFailure(
    #####:   80:          maskingOp, "Can't lower passthru to vector.transfer_read");
call    0 never executed
        -:   81:
        -:   82:    // Replace the `vector.mask` operation.
    #####:   83:    rewriter.replaceOpWithNewOp<TransferReadOp>(
    #####:   84:        maskingOp.getOperation(), readOp.getVectorType(), readOp.getSource(),
call    0 never executed
call    1 never executed
    #####:   85:        readOp.getIndices(), readOp.getPermutationMap(), readOp.getPadding(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   86:        maskingOp.getMask(), readOp.getInBounds().value_or(ArrayAttr()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   87:    return success();
        -:   88:  }
        -:   89:};
        -:   90:
        -:   91:/// Lowers a masked `vector.transfer_write` operation.
        -:   92:struct MaskedTransferWriteOpPattern
        -:   93:    : public MaskOpRewritePattern<TransferWriteOp> {
        -:   94:public:
        -:   95:  using MaskOpRewritePattern<TransferWriteOp>::MaskOpRewritePattern;
        -:   96:
        -:   97:  LogicalResult
function _ZNK12_GLOBAL__N_128MaskedTransferWriteOpPattern25matchAndRewriteMaskableOpEN4mlir6vector15TransferWriteOpENS2_18MaskingOpInterfaceERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   98:  matchAndRewriteMaskableOp(TransferWriteOp writeOp,
        -:   99:                            MaskingOpInterface maskingOp,
        -:  100:                            PatternRewriter &rewriter) const override {
    #####:  101:    Type resultType =
    #####:  102:        writeOp.getResult() ? writeOp.getResult().getType() : Type();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  103:
        -:  104:    // Replace the `vector.mask` operation.
    #####:  105:    rewriter.replaceOpWithNewOp<TransferWriteOp>(
    #####:  106:        maskingOp.getOperation(), resultType, writeOp.getVector(),
call    0 never executed
    #####:  107:        writeOp.getSource(), writeOp.getIndices(), writeOp.getPermutationMap(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  108:        maskingOp.getMask(), writeOp.getInBounds().value_or(ArrayAttr()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  109:    return success();
        -:  110:  }
        -:  111:};
        -:  112:
        -:  113:/// Populates instances of `MaskOpRewritePattern` to lower masked operations
        -:  114:/// with `vector.mask`. Patterns should rewrite the `vector.mask` operation and
        -:  115:/// not its nested `MaskableOpInterface`.
    #####:  116:void populateVectorMaskLoweringPatternsForSideEffectingOps(
        -:  117:    RewritePatternSet &patterns) {
    #####:  118:  patterns.add<MaskedTransferReadOpPattern, MaskedTransferWriteOpPattern>(
    #####:  119:      patterns.getContext());
        -:  120:}
        -:  121:
   167141:  122:struct LowerVectorMaskPass
call    0 returned 100%
call    1 returned 100%
        -:  123:    : public vector::impl::LowerVectorMaskPassBase<LowerVectorMaskPass> {
        -:  124:  using Base::Base;
        -:  125:
function _ZN12_GLOBAL__N_119LowerVectorMaskPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  126:  void runOnOperation() override {
    #####:  127:    Operation *op = getOperation();
call    0 never executed
call    1 never executed
    #####:  128:    MLIRContext *context = op->getContext();
call    0 never executed
        -:  129:
    #####:  130:    RewritePatternSet loweringPatterns(context);
call    0 never executed
    #####:  131:    populateVectorMaskLoweringPatternsForSideEffectingOps(loweringPatterns);
call    0 never executed
        -:  132:
    #####:  133:    if (failed(applyPatternsAndFoldGreedily(op->getRegions(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  134:                                            std::move(loweringPatterns))))
call    0 never executed
    #####:  135:      signalPassFailure();
call    0 never executed
    #####:  136:  }
        -:  137:
function _ZNK12_GLOBAL__N_119LowerVectorMaskPass20getDependentDialectsERN4mlir15DialectRegistryE called 636 returned 100% blocks executed 100%
      636:  138:  void getDependentDialects(DialectRegistry &registry) const override {
      636:  139:    registry.insert<vector::VectorDialect>();
call    0 returned 100%
      636:  140:  }
        -:  141:};
        -:  142:
        -:  143:} // namespace
        -:  144:
function _ZN4mlir6vector25createLowerVectorMaskPassEv called 129269 returned 100% blocks executed 100%
   129269:  145:std::unique_ptr<Pass> mlir::vector::createLowerVectorMaskPass() {
   129269:  146:  return std::make_unique<LowerVectorMaskPass>();
call    0 returned 100%
        -:  147:}
