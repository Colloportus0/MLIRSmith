        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Bufferization/Transforms/BufferViewFlowAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferViewFlowAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferViewFlowAnalysis.cpp.gcda
        -:    0:Runs:128624
        -:    1://======- BufferViewFlowAnalysis.cpp - Buffer alias analysis -*- C++ -*-======//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Bufferization/Transforms/BufferViewFlowAnalysis.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:#include "mlir/Interfaces/ViewLikeInterface.h"
        -:   14:#include "llvm/ADT/SetOperations.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:/// Constructs a new alias analysis using the op provided.
function _ZN4mlir22BufferViewFlowAnalysisC2EPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   19:BufferViewFlowAnalysis::BufferViewFlowAnalysis(Operation *op) { build(op); }
call    0 never executed
call    1 never executed
        -:   20:
        -:   21:/// Find all immediate and indirect dependent buffers this value could
        -:   22:/// potentially have. Note that the resulting set will also contain the value
        -:   23:/// provided as it is a dependent alias of itself.
        -:   24:BufferViewFlowAnalysis::ValueSetT
function _ZNK4mlir22BufferViewFlowAnalysis7resolveENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   25:BufferViewFlowAnalysis::resolve(Value rootValue) const {
    #####:   26:  ValueSetT result;
call    0 never executed
    #####:   27:  SmallVector<Value, 8> queue;
call    0 never executed
    #####:   28:  queue.push_back(rootValue);
call    0 never executed
    #####:   29:  while (!queue.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   30:    Value currentValue = queue.pop_back_val();
call    0 never executed
    #####:   31:    if (result.insert(currentValue).second) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   32:      auto it = dependencies.find(currentValue);
call    0 never executed
    #####:   33:      if (it != dependencies.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   34:        for (Value aliasValue : it->second)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:   35:          queue.push_back(aliasValue);
call    0 never executed
        -:   36:      }
        -:   37:    }
        -:   38:  }
    #####:   39:  return result;
branch  0 never executed
branch  1 never executed
        -:   40:}
        -:   41:
        -:   42:/// Removes the given values from all alias sets.
function _ZN4mlir22BufferViewFlowAnalysis6removeERKN4llvm15SmallPtrSetImplINS_5ValueEEE called 0 returned 0% blocks executed 0%
    #####:   43:void BufferViewFlowAnalysis::remove(const SmallPtrSetImpl<Value> &aliasValues) {
    #####:   44:  for (auto &entry : dependencies)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:   45:    llvm::set_subtract(entry.second, aliasValues);
call    0 never executed
    #####:   46:}
        -:   47:
        -:   48:/// This function constructs a mapping from values to its immediate
        -:   49:/// dependencies. It iterates over all blocks, gets their predecessors,
        -:   50:/// determines the values that will be passed to the corresponding block
        -:   51:/// arguments and inserts them into the underlying map. Furthermore, it wires
        -:   52:/// successor regions and branch-like return operations from nested regions.
function _ZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   53:void BufferViewFlowAnalysis::build(Operation *op) {
        -:   54:  // Registers all dependencies of the given values.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_10ValueRangeES3_E_clES3_S3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   55:  auto registerDependencies = [&](ValueRange values, ValueRange dependencies) {
    #####:   56:    for (auto [value, dep] : llvm::zip(values, dependencies))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   57:      this->dependencies[value].insert(dep);
call    0 never executed
call    1 never executed
    #####:   58:  };
        -:   59:
        -:   60:  // Add additional dependencies created by view changes to the alias list.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_19ViewLikeOpInterfaceEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   61:  op->walk([&](ViewLikeOpInterface viewInterface) {
call    0 never executed
    #####:   62:    dependencies[viewInterface.getViewSource()].insert(
call    0 never executed
call    1 never executed
    #####:   63:        viewInterface->getResult(0));
call    0 never executed
    #####:   64:  });
        -:   65:
        -:   66:  // Query all branch interfaces to link block argument dependencies.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_17BranchOpInterfaceEE1_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   67:  op->walk([&](BranchOpInterface branchInterface) {
call    0 never executed
    #####:   68:    Block *parentBlock = branchInterface->getBlock();
call    0 never executed
    #####:   69:    for (auto it = parentBlock->succ_begin(), e = parentBlock->succ_end();
call    0 never executed
call    1 never executed
    #####:   70:         it != e; ++it) {
branch  0 never executed
branch  1 never executed
        -:   71:      // Query the branch op interface to get the successor operands.
    #####:   72:      auto successorOperands =
    #####:   73:          branchInterface.getSuccessorOperands(it.getIndex());
call    0 never executed
        -:   74:      // Build the actual mapping of values to their immediate dependencies.
    #####:   75:      registerDependencies(successorOperands.getForwardedOperands(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   76:                           (*it)->getArguments().drop_front(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   77:                               successorOperands.getProducedOperandCount()));
call    0 never executed
call    1 never executed
        -:   78:    }
    #####:   79:  });
        -:   80:
        -:   81:  // Query the RegionBranchOpInterface to find potential successor regions.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_23RegionBranchOpInterfaceEE2_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   82:  op->walk([&](RegionBranchOpInterface regionInterface) {
call    0 never executed
        -:   83:    // Extract all entry regions and wire all initial entry successor inputs.
    #####:   84:    SmallVector<RegionSuccessor, 2> entrySuccessors;
call    0 never executed
    #####:   85:    regionInterface.getSuccessorRegions(/*index=*/llvm::None, entrySuccessors);
call    0 never executed
    #####:   86:    for (RegionSuccessor &entrySuccessor : entrySuccessors) {
branch  0 never executed
branch  1 never executed
        -:   87:      // Wire the entry region's successor arguments with the initial
        -:   88:      // successor inputs.
    #####:   89:      assert(entrySuccessor.getSuccessor() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   90:             "Invalid entry region without an attached successor region");
    #####:   91:      registerDependencies(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   92:          regionInterface.getSuccessorEntryOperands(
    #####:   93:              entrySuccessor.getSuccessor()->getRegionNumber()),
call    0 never executed
call    1 never executed
        -:   94:          entrySuccessor.getSuccessorInputs());
        -:   95:    }
        -:   96:
        -:   97:    // Wire flow between regions and from region exits.
    #####:   98:    for (Region &region : regionInterface->getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   99:      // Iterate over all successor region entries that are reachable from the
        -:  100:      // current region.
    #####:  101:      SmallVector<RegionSuccessor, 2> successorRegions;
call    0 never executed
    #####:  102:      regionInterface.getSuccessorRegions(region.getRegionNumber(),
call    0 never executed
call    1 never executed
        -:  103:                                          successorRegions);
    #####:  104:      for (RegionSuccessor &successorRegion : successorRegions) {
branch  0 never executed
branch  1 never executed
        -:  105:        // Determine the current region index (if any).
    #####:  106:        Optional<unsigned> regionIndex;
    #####:  107:        Region *regionSuccessor = successorRegion.getSuccessor();
branch  0 never executed
branch  1 never executed
    #####:  108:        if (regionSuccessor)
branch  0 never executed
branch  1 never executed
    #####:  109:          regionIndex = regionSuccessor->getRegionNumber();
call    0 never executed
        -:  110:        // Iterate over all immediate terminator operations and wire the
        -:  111:        // successor inputs with the successor operands of each terminator.
    #####:  112:        for (Block &block : region) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  113:          auto successorOperands = getRegionBranchSuccessorOperands(
    #####:  114:              block.getTerminator(), regionIndex);
call    0 never executed
call    1 never executed
    #####:  115:          if (successorOperands) {
branch  0 never executed
branch  1 never executed
    #####:  116:            registerDependencies(*successorOperands,
call    0 never executed
call    1 never executed
        -:  117:                                 successorRegion.getSuccessorInputs());
        -:  118:          }
        -:  119:        }
        -:  120:      }
        -:  121:    }
    #####:  122:  });
        -:  123:
        -:  124:  // TODO: This should be an interface.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_5arith8SelectOpEE3_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  125:  op->walk([&](arith::SelectOp selectOp) {
call    0 never executed
    #####:  126:    registerDependencies({selectOp.getOperand(1)}, {selectOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  127:    registerDependencies({selectOp.getOperand(2)}, {selectOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  128:  });
    #####:  129:}
