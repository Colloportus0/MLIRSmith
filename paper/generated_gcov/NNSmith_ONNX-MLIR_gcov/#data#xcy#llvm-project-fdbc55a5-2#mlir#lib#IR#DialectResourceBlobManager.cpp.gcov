        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/DialectResourceBlobManager.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/DialectResourceBlobManager.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/DialectResourceBlobManager.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- DialectResourceBlobManager.cpp - Dialect Blob Management -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/DialectResourceBlobManager.h"
        -:   10:#include "llvm/ADT/SmallString.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14://===----------------------------------------------------------------------===//
        -:   15:// DialectResourceBlobManager
        -:   16://===---------------------------------------------------------------------===//
        -:   17:
function _ZN4mlir26DialectResourceBlobManager6lookupEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:   18:auto DialectResourceBlobManager::lookup(StringRef name) -> BlobEntry * {
    #####:   19:  llvm::sys::SmartScopedReader<true> reader(blobMapLock);
call    0 never executed
        -:   20:
    #####:   21:  auto it = blobMap.find(name);
call    0 never executed
    #####:   22:  return it != blobMap.end() ? &it->second : nullptr;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   23:}
        -:   24:
function _ZN4mlir26DialectResourceBlobManager6updateEN4llvm9StringRefEONS_15AsmResourceBlobE called 0 returned 0% blocks executed 0%
    #####:   25:void DialectResourceBlobManager::update(StringRef name,
        -:   26:                                        AsmResourceBlob &&newBlob) {
    #####:   27:  BlobEntry *entry = lookup(name);
call    0 never executed
    #####:   28:  assert(entry && "`update` expects an existing entry for the provided name");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   29:  entry->setBlob(std::move(newBlob));
call    0 never executed
    #####:   30:}
        -:   31:
function _ZN4mlir26DialectResourceBlobManager6insertEN4llvm9StringRefENS1_8OptionalINS_15AsmResourceBlobEEE called 0 returned 0% blocks executed 0%
    #####:   32:auto DialectResourceBlobManager::insert(StringRef name,
        -:   33:                                        Optional<AsmResourceBlob> blob)
        -:   34:    -> BlobEntry & {
    #####:   35:  llvm::sys::SmartScopedWriter<true> writer(blobMapLock);
call    0 never executed
        -:   36:
        -:   37:  // Functor used to attempt insertion with a given name.
function _ZZN4mlir26DialectResourceBlobManager6insertEN4llvm9StringRefENS1_8OptionalINS_15AsmResourceBlobEEEENKUlS2_E_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   38:  auto tryInsertion = [&](StringRef name) -> BlobEntry * {
    #####:   39:    auto it = blobMap.try_emplace(name, BlobEntry());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    if (it.second) {
branch  0 never executed
branch  1 never executed
    #####:   41:      it.first->second.initialize(it.first->getKey(), std::move(blob));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   42:      return &it.first->second;
        -:   43:    }
        -:   44:    return nullptr;
    #####:   45:  };
        -:   46:
        -:   47:  // Try inserting with the name provided by the user.
    #####:   48:  if (BlobEntry *entry = tryInsertion(name))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   49:    return *entry;
        -:   50:
        -:   51:  // If an entry already exists for the user provided name, tweak the name and
        -:   52:  // re-attempt insertion until we find one that is unique.
    #####:   53:  llvm::SmallString<32> nameStorage(name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:  nameStorage.push_back('_');
    #####:   55:  size_t nameCounter = 1;
call    0 never executed
    #####:   56:  do {
    #####:   57:    Twine(nameCounter++).toVector(nameStorage);
        -:   58:
        -:   59:    // Try inserting with the new name.
    #####:   60:    if (BlobEntry *entry = tryInsertion(nameStorage))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:      return *entry;
branch  0 never executed
branch  1 never executed
    #####:   62:    nameStorage.resize(name.size() + 1);
call    0 never executed
call    1 never executed
        -:   63:  } while (true);
        -:   64:}
