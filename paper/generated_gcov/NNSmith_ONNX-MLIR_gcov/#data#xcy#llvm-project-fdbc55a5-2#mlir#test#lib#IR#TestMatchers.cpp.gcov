        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/IR/TestMatchers.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestMatchers.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestMatchers.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestMatchers.cpp - Pass to test matchers ---------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/IR/BuiltinOps.h"
        -:   11:#include "mlir/IR/FunctionInterfaces.h"
        -:   12:#include "mlir/IR/Matchers.h"
        -:   13:#include "mlir/Pass/Pass.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
        -:   17:namespace {
        -:   18:/// This is a test pass for verifying matchers.
  129230*:   19:struct TestMatchers
call    0 never executed
call    1 returned 100%
        -:   20:    : public PassWrapper<TestMatchers, InterfacePass<FunctionOpInterface>> {
function _ZN12_GLOBAL__N_112TestMatchers13resolveTypeIDEv called 129230 returned 100% blocks executed 100%
   129230:   21:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMatchers)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   22:
        -:   23:  void runOnOperation() override;
function _ZNK12_GLOBAL__N_112TestMatchers11getArgumentEv called 128643 returned 100% blocks executed 100%
   128643:   24:  StringRef getArgument() const final { return "test-matchers"; }
function _ZNK12_GLOBAL__N_112TestMatchers14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   25:  StringRef getDescription() const final {
   128637:   26:    return "Test C++ pattern matchers.";
        -:   27:  }
        -:   28:};
        -:   29:} // namespace
        -:   30:
        -:   31:// This could be done better but is not worth the variadic template trouble.
        -:   32:template <typename Matcher>
    #####:   33:static unsigned countMatches(FunctionOpInterface f, Matcher &matcher) {
    #####:   34:  unsigned count = 0;
    #####:   35:  f.walk([&count, &matcher](Operation *op) {
    #####:   36:    if (matcher.match(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
    #####:   37:      ++count;
        -:   38:  });
    #####:   39:  return count;
        -:   40:}
        -:   41:
        -:   42:using mlir::matchers::m_Any;
        -:   43:using mlir::matchers::m_Val;
function _ZL5test1N4mlir19FunctionOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:   44:static void test1(FunctionOpInterface f) {
    #####:   45:  assert(f.getNumArguments() == 3 && "matcher test funcs must have 3 args");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   46:
    #####:   47:  auto a = m_Val(f.getArgument(0));
call    0 never executed
    #####:   48:  auto b = m_Val(f.getArgument(1));
call    0 never executed
    #####:   49:  auto c = m_Val(f.getArgument(2));
call    0 never executed
        -:   50:
    #####:   51:  auto p0 = m_Op<arith::AddFOp>(); // using 0-arity matcher
call    0 never executed
    #####:   52:  llvm::outs() << "Pattern add(*) matched " << countMatches(f, p0)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   53:               << " times\n";
call    0 never executed
        -:   54:
    #####:   55:  auto p1 = m_Op<arith::MulFOp>(); // using 0-arity matcher
call    0 never executed
    #####:   56:  llvm::outs() << "Pattern mul(*) matched " << countMatches(f, p1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   57:               << " times\n";
call    0 never executed
        -:   58:
    #####:   59:  auto p2 = m_Op<arith::AddFOp>(m_Op<arith::AddFOp>(), m_Any());
call    0 never executed
    #####:   60:  llvm::outs() << "Pattern add(add(*), *) matched " << countMatches(f, p2)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   61:               << " times\n";
call    0 never executed
        -:   62:
    #####:   63:  auto p3 = m_Op<arith::AddFOp>(m_Any(), m_Op<arith::AddFOp>());
call    0 never executed
    #####:   64:  llvm::outs() << "Pattern add(*, add(*)) matched " << countMatches(f, p3)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   65:               << " times\n";
call    0 never executed
        -:   66:
    #####:   67:  auto p4 = m_Op<arith::MulFOp>(m_Op<arith::AddFOp>(), m_Any());
call    0 never executed
    #####:   68:  llvm::outs() << "Pattern mul(add(*), *) matched " << countMatches(f, p4)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   69:               << " times\n";
call    0 never executed
        -:   70:
    #####:   71:  auto p5 = m_Op<arith::MulFOp>(m_Any(), m_Op<arith::AddFOp>());
call    0 never executed
    #####:   72:  llvm::outs() << "Pattern mul(*, add(*)) matched " << countMatches(f, p5)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   73:               << " times\n";
call    0 never executed
        -:   74:
    #####:   75:  auto p6 = m_Op<arith::MulFOp>(m_Op<arith::MulFOp>(), m_Any());
call    0 never executed
    #####:   76:  llvm::outs() << "Pattern mul(mul(*), *) matched " << countMatches(f, p6)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   77:               << " times\n";
call    0 never executed
        -:   78:
    #####:   79:  auto p7 = m_Op<arith::MulFOp>(m_Op<arith::MulFOp>(), m_Op<arith::MulFOp>());
call    0 never executed
    #####:   80:  llvm::outs() << "Pattern mul(mul(*), mul(*)) matched " << countMatches(f, p7)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   81:               << " times\n";
call    0 never executed
        -:   82:
    #####:   83:  auto mulOfMulmul =
call    0 never executed
    #####:   84:      m_Op<arith::MulFOp>(m_Op<arith::MulFOp>(), m_Op<arith::MulFOp>());
call    0 never executed
    #####:   85:  auto p8 = m_Op<arith::MulFOp>(mulOfMulmul, mulOfMulmul);
call    0 never executed
    #####:   86:  llvm::outs()
call    0 never executed
    #####:   87:      << "Pattern mul(mul(mul(*), mul(*)), mul(mul(*), mul(*))) matched "
call    0 never executed
    #####:   88:      << countMatches(f, p8) << " times\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:   89:
        -:   90:  // clang-format off
    #####:   91:  auto mulOfMuladd = m_Op<arith::MulFOp>(m_Op<arith::MulFOp>(), m_Op<arith::AddFOp>());
call    0 never executed
    #####:   92:  auto mulOfAnyadd = m_Op<arith::MulFOp>(m_Any(), m_Op<arith::AddFOp>());
call    0 never executed
    #####:   93:  auto p9 = m_Op<arith::MulFOp>(m_Op<arith::MulFOp>(
        -:   94:                     mulOfMuladd, m_Op<arith::MulFOp>()),
    #####:   95:                   m_Op<arith::MulFOp>(mulOfAnyadd, mulOfAnyadd));
call    0 never executed
        -:   96:  // clang-format on
    #####:   97:  llvm::outs() << "Pattern mul(mul(mul(mul(*), add(*)), mul(*)), mul(mul(*, "
call    0 never executed
    #####:   98:                  "add(*)), mul(*, add(*)))) matched "
call    0 never executed
    #####:   99:               << countMatches(f, p9) << " times\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  100:
    #####:  101:  auto p10 = m_Op<arith::AddFOp>(a, b);
call    0 never executed
    #####:  102:  llvm::outs() << "Pattern add(a, b) matched " << countMatches(f, p10)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  103:               << " times\n";
call    0 never executed
        -:  104:
    #####:  105:  auto p11 = m_Op<arith::AddFOp>(a, c);
call    0 never executed
    #####:  106:  llvm::outs() << "Pattern add(a, c) matched " << countMatches(f, p11)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  107:               << " times\n";
call    0 never executed
        -:  108:
    #####:  109:  auto p12 = m_Op<arith::AddFOp>(b, a);
call    0 never executed
    #####:  110:  llvm::outs() << "Pattern add(b, a) matched " << countMatches(f, p12)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  111:               << " times\n";
call    0 never executed
        -:  112:
    #####:  113:  auto p13 = m_Op<arith::AddFOp>(c, a);
call    0 never executed
    #####:  114:  llvm::outs() << "Pattern add(c, a) matched " << countMatches(f, p13)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  115:               << " times\n";
call    0 never executed
        -:  116:
    #####:  117:  auto p14 = m_Op<arith::MulFOp>(a, m_Op<arith::AddFOp>(c, b));
call    0 never executed
    #####:  118:  llvm::outs() << "Pattern mul(a, add(c, b)) matched " << countMatches(f, p14)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  119:               << " times\n";
call    0 never executed
        -:  120:
    #####:  121:  auto p15 = m_Op<arith::MulFOp>(a, m_Op<arith::AddFOp>(b, c));
call    0 never executed
    #####:  122:  llvm::outs() << "Pattern mul(a, add(b, c)) matched " << countMatches(f, p15)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  123:               << " times\n";
call    0 never executed
        -:  124:
    #####:  125:  auto mulOfAany = m_Op<arith::MulFOp>(a, m_Any());
call    0 never executed
    #####:  126:  auto p16 = m_Op<arith::MulFOp>(mulOfAany, m_Op<arith::AddFOp>(a, c));
    #####:  127:  llvm::outs() << "Pattern mul(mul(a, *), add(a, c)) matched "
call    0 never executed
call    1 never executed
    #####:  128:               << countMatches(f, p16) << " times\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  129:
    #####:  130:  auto p17 = m_Op<arith::MulFOp>(mulOfAany, m_Op<arith::AddFOp>(c, b));
call    0 never executed
    #####:  131:  llvm::outs() << "Pattern mul(mul(a, *), add(c, b)) matched "
call    0 never executed
call    1 never executed
    #####:  132:               << countMatches(f, p17) << " times\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  133:}
        -:  134:
function _Z5test2N4mlir19FunctionOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  135:void test2(FunctionOpInterface f) {
    #####:  136:  auto a = m_Val(f.getArgument(0));
call    0 never executed
    #####:  137:  FloatAttr floatAttr;
    #####:  138:  auto p =
call    0 never executed
    #####:  139:      m_Op<arith::MulFOp>(a, m_Op<arith::AddFOp>(a, m_Constant(&floatAttr)));
call    0 never executed
    #####:  140:  auto p1 = m_Op<arith::MulFOp>(a, m_Op<arith::AddFOp>(a, m_Constant()));
call    0 never executed
        -:  141:  // Last operation that is not the terminator.
    #####:  142:  Operation *lastOp = f.getFunctionBody().front().back().getPrevNode();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  143:  if (p.match(lastOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:    llvm::outs()
call    0 never executed
    #####:  145:        << "Pattern add(add(a, constant), a) matched and bound constant to: "
call    0 never executed
    #####:  146:        << floatAttr.getValueAsDouble() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  147:  if (p1.match(lastOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:    llvm::outs() << "Pattern add(add(a, constant), a) matched\n";
call    0 never executed
call    1 never executed
    #####:  149:}
        -:  150:
function _ZN12_GLOBAL__N_112TestMatchers14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  151:void TestMatchers::runOnOperation() {
    #####:  152:  auto f = getOperation();
call    0 never executed
    #####:  153:  llvm::outs() << f.getName() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  154:  if (f.getName() == "test1")
call    0 never executed
    #####:  155:    test1(f);
call    0 never executed
    #####:  156:  if (f.getName() == "test2")
call    0 never executed
    #####:  157:    test2(f);
call    0 never executed
    #####:  158:}
        -:  159:
        -:  160:namespace mlir {
function _ZN4mlir20registerTestMatchersEv called 128637 returned 100% blocks executed 100%
   128637:  161:void registerTestMatchers() { PassRegistration<TestMatchers>(); }
call    0 returned 100%
        -:  162:} // namespace mlir
