        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/FunctionImplementation.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/FunctionImplementation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/FunctionImplementation.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- FunctionImplementation.cpp - Utilities for function-like ops -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/FunctionImplementation.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/FunctionInterfaces.h"
        -:   12:#include "mlir/IR/SymbolTable.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:
        -:   16:static ParseResult
  2051496:   17:parseFunctionArgumentList(OpAsmParser &parser, bool allowVariadic,
        -:   18:                          SmallVectorImpl<OpAsmParser::Argument> &arguments,
        -:   19:                          bool &isVariadic) {
        -:   20:
        -:   21:  // Parse the function arguments.  The argument list either has to consistently
        -:   22:  // have ssa-id's followed by types, or just be a type list.  It isn't ok to
        -:   23:  // sometimes have SSA ID's and sometimes not.
  2051496:   24:  isVariadic = false;
        -:   25:
  2051496:   26:  return parser.parseCommaSeparatedList(
function _ZZL25parseFunctionArgumentListRN4mlir11OpAsmParserEbRN4llvm15SmallVectorImplINS0_8ArgumentEEERbENKUlvE_clEv called 4967043 returned 100% blocks executed 55%
  4967043:   27:      OpAsmParser::Delimiter::Paren, [&]() -> ParseResult {
        -:   28:        // Ellipsis must be at end of the list.
 4967043*:   29:        if (isVariadic)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   30:          return parser.emitError(
call    0 never executed
call    1 never executed
    #####:   31:              parser.getCurrentLocation(),
call    0 never executed
    #####:   32:              "variadic arguments must be in the end of the argument list");
call    0 never executed
call    1 never executed
        -:   33:
        -:   34:        // Handle ellipsis as a special case.
 4967043*:   35:        if (allowVariadic && succeeded(parser.parseOptionalEllipsis())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   36:          // This is a variadic designator.
    #####:   37:          isVariadic = true;
    #####:   38:          return success(); // Stop parsing arguments.
        -:   39:        }
        -:   40:        // Parse argument name if present.
  4967043:   41:        OpAsmParser::Argument argument;
call    0 returned 100%
  4967043:   42:        auto argPresent = parser.parseOptionalArgument(
  4967043:   43:            argument, /*allowType=*/true, /*allowAttrs=*/true);
call    0 returned 100%
  4967043:   44:        if (argPresent.has_value()) {
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
  2575111:   45:          if (failed(argPresent.value()))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   46:            return failure(); // Present but malformed.
        -:   47:
        -:   48:          // Reject this if the preceding argument was missing a name.
  2575111:   49:          if (!arguments.empty() && arguments.back().ssaName.name.empty())
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   50:            return parser.emitError(argument.ssaName.location,
call    0 never executed
call    1 never executed
    #####:   51:                                    "expected type instead of SSA identifier");
call    0 never executed
call    1 never executed
        -:   52:
        -:   53:        } else {
  2391932:   54:          argument.ssaName.location = parser.getCurrentLocation();
call    0 returned 100%
        -:   55:          // Otherwise we just have a type list without SSA names.  Reject
        -:   56:          // this if the preceding argument had a name.
  2391932:   57:          if (!arguments.empty() && !arguments.back().ssaName.name.empty())
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
    #####:   58:            return parser.emitError(argument.ssaName.location,
call    0 never executed
call    1 never executed
    #####:   59:                                    "expected SSA identifier");
call    0 never executed
call    1 never executed
        -:   60:
  4783864:   61:          NamedAttrList attrs;
call    0 returned 100%
 4783864*:   62:          if (parser.parseType(argument.type) ||
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
 4783864*:   63:              parser.parseOptionalAttrDict(attrs) ||
branch  0 taken 100%
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
 2391932*:   64:              parser.parseOptionalLocationSpecifier(argument.sourceLoc))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:   65:            return failure();
branch  0 never executed
branch  1 never executed
  2391932:   66:          argument.attrs = attrs.getDictionary(parser.getContext());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
        -:   67:        }
  4967043:   68:        arguments.push_back(argument);
call    0 returned 100%
  4967043:   69:        return success();
  4102992:   70:      });
        -:   71:}
        -:   72:
        -:   73:/// Parse a function result list.
        -:   74:///
        -:   75:///   function-result-list ::= function-result-list-parens
        -:   76:///                          | non-function-type
        -:   77:///   function-result-list-parens ::= `(` `)`
        -:   78:///                                 | `(` function-result-list-no-parens `)`
        -:   79:///   function-result-list-no-parens ::= function-result (`,` function-result)*
        -:   80:///   function-result ::= type attribute-dict?
        -:   81:///
        -:   82:static ParseResult
function _ZL23parseFunctionResultListRN4mlir11OpAsmParserERN4llvm15SmallVectorImplINS_4TypeEEERNS3_INS_14DictionaryAttrEEE called 1640501 returned 100% blocks executed 53%
  1640501:   83:parseFunctionResultList(OpAsmParser &parser, SmallVectorImpl<Type> &resultTypes,
        -:   84:                        SmallVectorImpl<DictionaryAttr> &resultAttrs) {
  1640501:   85:  if (failed(parser.parseOptionalLParen())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   86:    // We already know that there is no `(`, so parse a type.
        -:   87:    // Because there is no `(`, it cannot be a function type.
  1640501:   88:    Type ty;
  1640501:   89:    if (parser.parseType(ty))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   90:      return failure();
  1640501:   91:    resultTypes.push_back(ty);
call    0 returned 100%
  1640501:   92:    resultAttrs.emplace_back();
call    0 returned 100%
  1640501:   93:    return success();
        -:   94:  }
        -:   95:
        -:   96:  // Special case for an empty set of parens.
    #####:   97:  if (succeeded(parser.parseOptionalRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:    return success();
        -:   99:
        -:  100:  // Parse individual function results.
function _ZZL23parseFunctionResultListRN4mlir11OpAsmParserERN4llvm15SmallVectorImplINS_4TypeEEERNS3_INS_14DictionaryAttrEEEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  101:  if (parser.parseCommaSeparatedList([&]() -> ParseResult {
branch  0 never executed
branch  1 never executed
    #####:  102:        resultTypes.emplace_back();
call    0 never executed
    #####:  103:        resultAttrs.emplace_back();
call    0 never executed
    #####:  104:        NamedAttrList attrs;
call    0 never executed
    #####:  105:        if (parser.parseType(resultTypes.back()) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  106:            parser.parseOptionalAttrDict(attrs))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  107:          return failure();
    #####:  108:        resultAttrs.back() = attrs.getDictionary(parser.getContext());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  109:        return success();
    #####:  110:      }))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  111:    return failure();
        -:  112:
    #####:  113:  return parser.parseRParen();
call    0 never executed
        -:  114:}
        -:  115:
function _ZN4mlir23function_interface_impl22parseFunctionSignatureERNS_11OpAsmParserEbRN4llvm15SmallVectorImplINS1_8ArgumentEEERbRNS4_INS_4TypeEEERNS4_INS_14DictionaryAttrEEE called 2051496 returned 100% blocks executed 88%
  2051496:  116:ParseResult mlir::function_interface_impl::parseFunctionSignature(
        -:  117:    OpAsmParser &parser, bool allowVariadic,
        -:  118:    SmallVectorImpl<OpAsmParser::Argument> &arguments, bool &isVariadic,
        -:  119:    SmallVectorImpl<Type> &resultTypes,
        -:  120:    SmallVectorImpl<DictionaryAttr> &resultAttrs) {
  2051496:  121:  if (parseFunctionArgumentList(parser, allowVariadic, arguments, isVariadic))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  122:    return failure();
  2051496:  123:  if (succeeded(parser.parseOptionalArrow()))
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
  1640501:  124:    return parseFunctionResultList(parser, resultTypes, resultAttrs);
call    0 returned 100%
   410995:  125:  return success();
        -:  126:}
        -:  127:
function _ZN4mlir23function_interface_impl20addArgAndResultAttrsERNS_7BuilderERNS_14OperationStateEN4llvm8ArrayRefINS_14DictionaryAttrEEES8_ called 2051496 returned 100% blocks executed 45%
  2051496:  128:void mlir::function_interface_impl::addArgAndResultAttrs(
        -:  129:    Builder &builder, OperationState &result, ArrayRef<DictionaryAttr> argAttrs,
        -:  130:    ArrayRef<DictionaryAttr> resultAttrs) {
  2051496:  131:  auto nonEmptyAttrsFn = [](DictionaryAttr attrs) {
        -:  132:    return attrs && !attrs.empty();
        -:  133:  };
        -:  134:  // Convert the specified array of dictionary attrs (which may have null
        -:  135:  // entries) to an ArrayAttr of dictionaries.
function _ZZN4mlir23function_interface_impl20addArgAndResultAttrsERNS_7BuilderERNS_14OperationStateEN4llvm8ArrayRefINS_14DictionaryAttrEEES8_ENKUlS8_E0_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  136:  auto getArrayAttr = [&](ArrayRef<DictionaryAttr> dictAttrs) {
    #####:  137:    SmallVector<Attribute> attrs;
    #####:  138:    for (auto &dict : dictAttrs)
branch  0 never executed
branch  1 never executed
    #####:  139:      attrs.push_back(dict ? dict : builder.getDictionaryAttr({}));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  140:    return builder.getArrayAttr(attrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
  2051496:  141:  };
        -:  142:
        -:  143:  // Add the attributes to the function arguments.
  2051496:  144:  if (llvm::any_of(argAttrs, nonEmptyAttrsFn))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  145:    result.addAttribute(function_interface_impl::getArgDictAttrName(),
call    0 never executed
    #####:  146:                        getArrayAttr(argAttrs));
call    0 never executed
        -:  147:
        -:  148:  // Add the attributes to the function results.
  2051496:  149:  if (llvm::any_of(resultAttrs, nonEmptyAttrsFn))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  150:    result.addAttribute(function_interface_impl::getResultDictAttrName(),
call    0 never executed
    #####:  151:                        getArrayAttr(resultAttrs));
call    0 never executed
  2051496:  152:}
        -:  153:
function _ZN4mlir23function_interface_impl20addArgAndResultAttrsERNS_7BuilderERNS_14OperationStateEN4llvm8ArrayRefINS_11OpAsmParser8ArgumentEEENS6_INS_14DictionaryAttrEEE called 2051496 returned 100% blocks executed 100%
  2051496:  154:void mlir::function_interface_impl::addArgAndResultAttrs(
        -:  155:    Builder &builder, OperationState &result,
        -:  156:    ArrayRef<OpAsmParser::Argument> args,
        -:  157:    ArrayRef<DictionaryAttr> resultAttrs) {
  2051496:  158:  SmallVector<DictionaryAttr> argAttrs;
  7018539:  159:  for (const auto &arg : args)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
  4967043:  160:    argAttrs.push_back(arg.attrs);
call    0 returned 100%
  2051496:  161:  addArgAndResultAttrs(builder, result, argAttrs, resultAttrs);
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
  2051496:  162:}
        -:  163:
function _ZN4mlir23function_interface_impl15parseFunctionOpERNS_11OpAsmParserERNS_14OperationStateEbN4llvm12function_refIFNS_4TypeERNS_7BuilderENS5_8ArrayRefIS7_EESB_NS0_12VariadicFlagERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE called 0 returned 0% blocks executed 0%
    #####:  164:ParseResult mlir::function_interface_impl::parseFunctionOp(
        -:  165:    OpAsmParser &parser, OperationState &result, bool allowVariadic,
        -:  166:    FuncTypeBuilder funcTypeBuilder) {
    #####:  167:  SmallVector<OpAsmParser::Argument> entryArgs;
call    0 never executed
    #####:  168:  SmallVector<DictionaryAttr> resultAttrs;
branch  0 never executed
branch  1 never executed
    #####:  169:  SmallVector<Type> resultTypes;
branch  0 never executed
branch  1 never executed
    #####:  170:  auto &builder = parser.getBuilder();
call    0 never executed
        -:  171:
        -:  172:  // Parse visibility.
    #####:  173:  (void)impl::parseOptionalVisibilityKeyword(parser, result.attributes);
call    0 never executed
        -:  174:
        -:  175:  // Parse the name as a symbol.
    #####:  176:  StringAttr nameAttr;
    #####:  177:  if (parser.parseSymbolName(nameAttr, SymbolTable::getSymbolAttrName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  178:                             result.attributes))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  179:    return failure();
        -:  180:
        -:  181:  // Parse the function signature.
    #####:  182:  SMLoc signatureLocation = parser.getCurrentLocation();
call    0 never executed
    #####:  183:  bool isVariadic = false;
    #####:  184:  if (parseFunctionSignature(parser, allowVariadic, entryArgs, isVariadic,
branch  0 never executed
branch  1 never executed
    #####:  185:                             resultTypes, resultAttrs))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:    return failure();
        -:  187:
    #####:  188:  std::string errorMessage;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  189:  SmallVector<Type> argTypes;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  190:  argTypes.reserve(entryArgs.size());
branch  0 never executed
branch  1 never executed
    #####:  191:  for (auto &arg : entryArgs)
branch  0 never executed
branch  1 never executed
    #####:  192:    argTypes.push_back(arg.type);
call    0 never executed
    #####:  193:  Type type = funcTypeBuilder(builder, argTypes, resultTypes,
    #####:  194:                              VariadicFlag(isVariadic), errorMessage);
call    0 never executed
    #####:  195:  if (!type) {
branch  0 never executed
branch  1 never executed
    #####:  196:    return parser.emitError(signatureLocation)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  197:           << "failed to construct function type"
branch  0 never executed
branch  1 never executed
    #####:  198:           << (errorMessage.empty() ? "" : ": ") << errorMessage;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  199:  }
    #####:  200:  result.addAttribute(getTypeAttrName(), TypeAttr::get(type));
call    0 never executed
call    1 never executed
        -:  201:
        -:  202:  // If function attributes are present, parse them.
    #####:  203:  NamedAttrList parsedAttributes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:  SMLoc attributeDictLocation = parser.getCurrentLocation();
call    0 never executed
    #####:  205:  if (parser.parseOptionalAttrDictWithKeyword(parsedAttributes))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  206:    return failure();
        -:  207:
        -:  208:  // Disallow attributes that are inferred from elsewhere in the attribute
        -:  209:  // dictionary.
    #####:  210:  for (StringRef disallowed :
    #####:  211:       {SymbolTable::getVisibilityAttrName(), SymbolTable::getSymbolAttrName(),
    #####:  212:        getTypeAttrName()}) {
branch  0 never executed
branch  1 never executed
    #####:  213:    if (parsedAttributes.get(disallowed))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  214:      return parser.emitError(attributeDictLocation, "'")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  215:             << disallowed
call    0 never executed
        -:  216:             << "' is an inferred attribute and should not be specified in the "
    #####:  217:                "explicit attribute dictionary";
call    0 never executed
call    1 never executed
        -:  218:  }
    #####:  219:  result.attributes.append(parsedAttributes);
call    0 never executed
        -:  220:
        -:  221:  // Add the attributes to the function arguments.
    #####:  222:  assert(resultAttrs.size() == resultTypes.size());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  223:  addArgAndResultAttrs(builder, result, entryArgs, resultAttrs);
call    0 never executed
        -:  224:
        -:  225:  // Parse the optional function body. The printer will not print the body if
        -:  226:  // its empty, so disallow parsing of empty body in the parser.
    #####:  227:  auto *body = result.addRegion();
call    0 never executed
    #####:  228:  SMLoc loc = parser.getCurrentLocation();
call    0 never executed
    #####:  229:  OptionalParseResult parseResult =
        -:  230:      parser.parseOptionalRegion(*body, entryArgs,
    #####:  231:                                 /*enableNameShadowing=*/false);
call    0 never executed
    #####:  232:  if (parseResult.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:  233:    if (failed(*parseResult))
branch  0 never executed
branch  1 never executed
    #####:  234:      return failure();
        -:  235:    // Function body was parsed, make sure its not empty.
    #####:  236:    if (body->empty())
branch  0 never executed
branch  1 never executed
    #####:  237:      return parser.emitError(loc, "expected non-empty function body");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  238:  }
    #####:  239:  return success();
        -:  240:}
        -:  241:
        -:  242:/// Print a function result list. The provided `attrs` must either be null, or
        -:  243:/// contain a set of DictionaryAttrs of the same arity as `types`.
function _ZL23printFunctionResultListRN4mlir12OpAsmPrinterEN4llvm8ArrayRefINS_4TypeEEENS_9ArrayAttrE called 3036547 returned 100% blocks executed 46%
  3036547:  244:static void printFunctionResultList(OpAsmPrinter &p, ArrayRef<Type> types,
        -:  245:                                    ArrayAttr attrs) {
 3036547*:  246:  assert(!types.empty() && "Should not be called for empty result list.");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
 3036547*:  247:  assert((!attrs || attrs.size() == types.size()) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  248:         "Invalid number of attributes.");
        -:  249:
  3036547:  250:  auto &os = p.getStream();
call    0 returned 100%
  3036547:  251:  bool needsParens = types.size() > 1 || types[0].isa<FunctionType>() ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
 3036547*:  252:                     (attrs && !attrs[0].cast<DictionaryAttr>().empty());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
 3036547*:  253:  if (needsParens)
    #####:  254:    os << '(';
branch  0 never executed
branch  1 never executed
function _ZZL23printFunctionResultListRN4mlir12OpAsmPrinterEN4llvm8ArrayRefINS_4TypeEEENS_9ArrayAttrEENKUlmE_clEm called 3036547 returned 100% blocks executed 40%
  3036547:  255:  llvm::interleaveComma(llvm::seq<size_t>(0, types.size()), os, [&](size_t i) {
call    0 returned 100%
call    1 returned 100%
 3036547*:  256:    p.printType(types[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
  3036547:  257:    if (attrs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  258:      p.printOptionalAttrDict(attrs[i].cast<DictionaryAttr>().getValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
  3036547:  259:  });
  3036547:  260:  if (needsParens)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  261:    os << ')';
branch  0 never executed
branch  1 never executed
  3036547:  262:}
        -:  263:
function _ZN4mlir23function_interface_impl22printFunctionSignatureERNS_12OpAsmPrinterEPNS_9OperationEN4llvm8ArrayRefINS_4TypeEEEbS8_ called 3798964 returned 100% blocks executed 61%
  3798964:  264:void mlir::function_interface_impl::printFunctionSignature(
        -:  265:    OpAsmPrinter &p, Operation *op, ArrayRef<Type> argTypes, bool isVariadic,
        -:  266:    ArrayRef<Type> resultTypes) {
  3798964:  267:  Region &body = op->getRegion(0);
call    0 returned 100%
  3798964:  268:  bool isExternal = body.empty();
call    0 returned 100%
        -:  269:
  3798964:  270:  p << '(';
call    0 returned 100%
  3798964:  271:  ArrayAttr argAttrs = op->getAttrOfType<ArrayAttr>(getArgDictAttrName());
call    0 returned 100%
 12994691:  272:  for (unsigned i = 0, e = argTypes.size(); i < e; ++i) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
  9195727:  273:    if (i > 0)
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
  5397262:  274:      p << ", ";
call    0 returned 100%
        -:  275:
  9195727:  276:    if (!isExternal) {
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
  4822943:  277:      ArrayRef<NamedAttribute> attrs;
  4822943:  278:      if (argAttrs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  279:        attrs = argAttrs[i].cast<DictionaryAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
  4822943:  280:      p.printRegionArgument(body.getArgument(i), attrs);
call    0 returned 100%
call    1 returned 100%
        -:  281:    } else {
  4372784:  282:      p.printType(argTypes[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
  4372784:  283:      if (argAttrs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  284:        p.printOptionalAttrDict(argAttrs[i].cast<DictionaryAttr>().getValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  285:    }
        -:  286:  }
        -:  287:
  3798964:  288:  if (isVariadic) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  289:    if (!argTypes.empty())
branch  0 never executed
branch  1 never executed
    #####:  290:      p << ", ";
call    0 never executed
    #####:  291:    p << "...";
call    0 never executed
        -:  292:  }
        -:  293:
  3798964:  294:  p << ')';
call    0 returned 100%
        -:  295:
  3798964:  296:  if (!resultTypes.empty()) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
  3036547:  297:    p.getStream() << " -> ";
call    0 returned 100%
call    1 returned 100%
  3036547:  298:    auto resultAttrs = op->getAttrOfType<ArrayAttr>(getResultDictAttrName());
call    0 returned 100%
  3036547:  299:    printFunctionResultList(p, resultTypes, resultAttrs);
call    0 returned 100%
        -:  300:  }
  3798964:  301:}
        -:  302:
function _ZN4mlir23function_interface_impl23printFunctionAttributesERNS_12OpAsmPrinterEPNS_9OperationEjjN4llvm8ArrayRefINS5_9StringRefEEE called 3798964 returned 100% blocks executed 100%
  3798964:  303:void mlir::function_interface_impl::printFunctionAttributes(
        -:  304:    OpAsmPrinter &p, Operation *op, unsigned numInputs, unsigned numResults,
        -:  305:    ArrayRef<StringRef> elided) {
        -:  306:  // Print out function attributes, if present.
  3798964:  307:  SmallVector<StringRef, 2> ignoredAttrs = {
call    0 returned 100%
  3798964:  308:      ::mlir::SymbolTable::getSymbolAttrName(), getTypeAttrName(),
call    0 returned 100%
  3798964:  309:      getArgDictAttrName(), getResultDictAttrName()};
call    0 returned 100%
  3798964:  310:  ignoredAttrs.append(elided.begin(), elided.end());
call    0 returned 100%
        -:  311:
  3798964:  312:  p.printOptionalAttrDictWithKeyword(op->getAttrs(), ignoredAttrs);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
  3798964:  313:}
        -:  314:
function _ZN4mlir23function_interface_impl15printFunctionOpERNS_12OpAsmPrinterENS_19FunctionOpInterfaceEb called 1625 returned 100% blocks executed 75%
     1625:  315:void mlir::function_interface_impl::printFunctionOp(OpAsmPrinter &p,
        -:  316:                                                    FunctionOpInterface op,
        -:  317:                                                    bool isVariadic) {
        -:  318:  // Print the operation and the function name.
     1625:  319:  auto funcName =
     1625:  320:      op->getAttrOfType<StringAttr>(SymbolTable::getSymbolAttrName())
call    0 returned 100%
     1625:  321:          .getValue();
call    0 returned 100%
     1625:  322:  p << ' ';
call    0 returned 100%
        -:  323:
     1625:  324:  StringRef visibilityAttrName = SymbolTable::getVisibilityAttrName();
call    0 returned 100%
     1625:  325:  if (auto visibility = op->getAttrOfType<StringAttr>(visibilityAttrName))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  326:    p << visibility.getValue() << ' ';
call    0 never executed
call    1 never executed
call    2 never executed
     1625:  327:  p.printSymbolName(funcName);
call    0 returned 100%
        -:  328:
     1625:  329:  ArrayRef<Type> argTypes = op.getArgumentTypes();
call    0 returned 100%
     1625:  330:  ArrayRef<Type> resultTypes = op.getResultTypes();
call    0 returned 100%
     1625:  331:  printFunctionSignature(p, op, argTypes, isVariadic, resultTypes);
call    0 returned 100%
     1625:  332:  printFunctionAttributes(p, op, argTypes.size(), resultTypes.size(),
call    0 returned 100%
        -:  333:                          {visibilityAttrName});
        -:  334:  // Print the body if this is not an external function.
     1625:  335:  Region &body = op->getRegion(0);
call    0 returned 100%
     1625:  336:  if (!body.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1625:  337:    p << ' ';
call    0 returned 100%
     1625:  338:    p.printRegion(body, /*printEntryBlockArgs=*/false,
     1625:  339:                  /*printBlockTerminators=*/true);
call    0 returned 100%
        -:  340:  }
     1625:  341:}
