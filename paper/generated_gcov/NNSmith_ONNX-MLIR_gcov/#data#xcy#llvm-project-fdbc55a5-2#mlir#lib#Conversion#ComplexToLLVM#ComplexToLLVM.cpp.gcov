        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/ComplexToLLVM/ComplexToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ComplexToLLVM/CMakeFiles/obj.MLIRComplexToLLVM.dir/ComplexToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ComplexToLLVM/CMakeFiles/obj.MLIRComplexToLLVM.dir/ComplexToLLVM.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- ComplexToLLVM.cpp - conversion from Complex to LLVM dialect --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/ComplexToLLVM/ComplexToLLVM.h"
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   12:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   15:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_CONVERTCOMPLEXTOLLVM
        -:   20:#include "mlir/Conversion/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::LLVM;
        -:   25:
        -:   26://===----------------------------------------------------------------------===//
        -:   27:// ComplexStructBuilder implementation.
        -:   28://===----------------------------------------------------------------------===//
        -:   29:
        -:   30:static constexpr unsigned kRealPosInComplexNumberStruct = 0;
        -:   31:static constexpr unsigned kImaginaryPosInComplexNumberStruct = 1;
        -:   32:
function _ZN4mlir20ComplexStructBuilder5undefERNS_9OpBuilderENS_8LocationENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   33:ComplexStructBuilder ComplexStructBuilder::undef(OpBuilder &builder,
        -:   34:                                                 Location loc, Type type) {
    #####:   35:  Value val = builder.create<LLVM::UndefOp>(loc, type);
call    0 never executed
call    1 never executed
    #####:   36:  return ComplexStructBuilder(val);
call    0 never executed
        -:   37:}
        -:   38:
function _ZN4mlir20ComplexStructBuilder7setRealERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   39:void ComplexStructBuilder::setReal(OpBuilder &builder, Location loc,
        -:   40:                                   Value real) {
    #####:   41:  setPtr(builder, loc, kRealPosInComplexNumberStruct, real);
call    0 never executed
    #####:   42:}
        -:   43:
function _ZN4mlir20ComplexStructBuilder4realERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   44:Value ComplexStructBuilder::real(OpBuilder &builder, Location loc) {
    #####:   45:  return extractPtr(builder, loc, kRealPosInComplexNumberStruct);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   46:}
        -:   47:
function _ZN4mlir20ComplexStructBuilder12setImaginaryERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   48:void ComplexStructBuilder::setImaginary(OpBuilder &builder, Location loc,
        -:   49:                                        Value imaginary) {
    #####:   50:  setPtr(builder, loc, kImaginaryPosInComplexNumberStruct, imaginary);
call    0 never executed
    #####:   51:}
        -:   52:
function _ZN4mlir20ComplexStructBuilder9imaginaryERNS_9OpBuilderENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   53:Value ComplexStructBuilder::imaginary(OpBuilder &builder, Location loc) {
    #####:   54:  return extractPtr(builder, loc, kImaginaryPosInComplexNumberStruct);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   55:}
        -:   56:
        -:   57://===----------------------------------------------------------------------===//
        -:   58:// Conversion patterns.
        -:   59://===----------------------------------------------------------------------===//
        -:   60:
        -:   61:namespace {
        -:   62:
        -:   63:struct AbsOpConversion : public ConvertOpToLLVMPattern<complex::AbsOp> {
     1050:   64:  using ConvertOpToLLVMPattern<complex::AbsOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   65:
        -:   66:  LogicalResult
function _ZNK12_GLOBAL__N_115AbsOpConversion15matchAndRewriteEN4mlir7complex5AbsOpENS2_12AbsOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   67:  matchAndRewrite(complex::AbsOp op, OpAdaptor adaptor,
        -:   68:                  ConversionPatternRewriter &rewriter) const override {
    #####:   69:    auto loc = op.getLoc();
call    0 never executed
        -:   70:
    #####:   71:    ComplexStructBuilder complexStruct(adaptor.getComplex());
call    0 never executed
call    1 never executed
    #####:   72:    Value real = complexStruct.real(rewriter, op.getLoc());
call    0 never executed
    #####:   73:    Value imag = complexStruct.imaginary(rewriter, op.getLoc());
call    0 never executed
        -:   74:
    #####:   75:    auto fmf = LLVM::FastmathFlagsAttr::get(op.getContext(), {});
call    0 never executed
call    1 never executed
    #####:   76:    Value sqNorm = rewriter.create<LLVM::FAddOp>(
    #####:   77:        loc, rewriter.create<LLVM::FMulOp>(loc, real, real, fmf),
call    0 never executed
    #####:   78:        rewriter.create<LLVM::FMulOp>(loc, imag, imag, fmf), fmf);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   79:
    #####:   80:    rewriter.replaceOpWithNewOp<LLVM::SqrtOp>(op, sqNorm);
call    0 never executed
    #####:   81:    return success();
        -:   82:  }
        -:   83:};
        -:   84:
        -:   85:struct ConstantOpLowering : public ConvertOpToLLVMPattern<complex::ConstantOp> {
     1050:   86:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   87:
        -:   88:  LogicalResult
function _ZNK12_GLOBAL__N_118ConstantOpLowering15matchAndRewriteEN4mlir7complex10ConstantOpENS2_17ConstantOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   89:  matchAndRewrite(complex::ConstantOp op, OpAdaptor adaptor,
        -:   90:                  ConversionPatternRewriter &rewriter) const override {
    #####:   91:    return LLVM::detail::oneToOneRewrite(
    #####:   92:        op, LLVM::ConstantOp::getOperationName(), adaptor.getOperands(),
    #####:   93:        op->getAttrs(), *getTypeConverter(), rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   94:  }
        -:   95:};
        -:   96:
        -:   97:struct CreateOpConversion : public ConvertOpToLLVMPattern<complex::CreateOp> {
     1050:   98:  using ConvertOpToLLVMPattern<complex::CreateOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   99:
        -:  100:  LogicalResult
function _ZNK12_GLOBAL__N_118CreateOpConversion15matchAndRewriteEN4mlir7complex8CreateOpENS2_15CreateOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  101:  matchAndRewrite(complex::CreateOp complexOp, OpAdaptor adaptor,
        -:  102:                  ConversionPatternRewriter &rewriter) const override {
        -:  103:    // Pack real and imaginary part in a complex number struct.
    #####:  104:    auto loc = complexOp.getLoc();
call    0 never executed
    #####:  105:    auto structType = typeConverter->convertType(complexOp.getType());
call    0 never executed
call    1 never executed
    #####:  106:    auto complexStruct = ComplexStructBuilder::undef(rewriter, loc, structType);
call    0 never executed
    #####:  107:    complexStruct.setReal(rewriter, loc, adaptor.getReal());
call    0 never executed
call    1 never executed
    #####:  108:    complexStruct.setImaginary(rewriter, loc, adaptor.getImaginary());
call    0 never executed
call    1 never executed
        -:  109:
    #####:  110:    rewriter.replaceOp(complexOp, {complexStruct});
call    0 never executed
call    1 never executed
    #####:  111:    return success();
        -:  112:  }
        -:  113:};
        -:  114:
        -:  115:struct ReOpConversion : public ConvertOpToLLVMPattern<complex::ReOp> {
     1050:  116:  using ConvertOpToLLVMPattern<complex::ReOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  117:
        -:  118:  LogicalResult
function _ZNK12_GLOBAL__N_114ReOpConversion15matchAndRewriteEN4mlir7complex4ReOpENS2_11ReOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  119:  matchAndRewrite(complex::ReOp op, OpAdaptor adaptor,
        -:  120:                  ConversionPatternRewriter &rewriter) const override {
        -:  121:    // Extract real part from the complex number struct.
    #####:  122:    ComplexStructBuilder complexStruct(adaptor.getComplex());
call    0 never executed
call    1 never executed
    #####:  123:    Value real = complexStruct.real(rewriter, op.getLoc());
call    0 never executed
    #####:  124:    rewriter.replaceOp(op, real);
call    0 never executed
call    1 never executed
        -:  125:
    #####:  126:    return success();
        -:  127:  }
        -:  128:};
        -:  129:
        -:  130:struct ImOpConversion : public ConvertOpToLLVMPattern<complex::ImOp> {
     1050:  131:  using ConvertOpToLLVMPattern<complex::ImOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  132:
        -:  133:  LogicalResult
function _ZNK12_GLOBAL__N_114ImOpConversion15matchAndRewriteEN4mlir7complex4ImOpENS2_11ImOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  134:  matchAndRewrite(complex::ImOp op, OpAdaptor adaptor,
        -:  135:                  ConversionPatternRewriter &rewriter) const override {
        -:  136:    // Extract imaginary part from the complex number struct.
    #####:  137:    ComplexStructBuilder complexStruct(adaptor.getComplex());
call    0 never executed
call    1 never executed
    #####:  138:    Value imaginary = complexStruct.imaginary(rewriter, op.getLoc());
call    0 never executed
    #####:  139:    rewriter.replaceOp(op, imaginary);
call    0 never executed
call    1 never executed
        -:  140:
    #####:  141:    return success();
        -:  142:  }
        -:  143:};
        -:  144:
        -:  145:struct BinaryComplexOperands {
        -:  146:  std::complex<Value> lhs;
        -:  147:  std::complex<Value> rhs;
        -:  148:};
        -:  149:
        -:  150:template <typename OpTy>
        -:  151:BinaryComplexOperands
    #####:  152:unpackBinaryComplexOperands(OpTy op, typename OpTy::Adaptor adaptor,
        -:  153:                            ConversionPatternRewriter &rewriter) {
    #####:  154:  auto loc = op.getLoc();
        -:  155:
        -:  156:  // Extract real and imaginary values from operands.
        -:  157:  BinaryComplexOperands unpacked;
    #####:  158:  ComplexStructBuilder lhs(adaptor.getLhs());
    #####:  159:  unpacked.lhs.real(lhs.real(rewriter, loc));
    #####:  160:  unpacked.lhs.imag(lhs.imaginary(rewriter, loc));
    #####:  161:  ComplexStructBuilder rhs(adaptor.getRhs());
    #####:  162:  unpacked.rhs.real(rhs.real(rewriter, loc));
    #####:  163:  unpacked.rhs.imag(rhs.imaginary(rewriter, loc));
        -:  164:
    #####:  165:  return unpacked;
        -:  166:}
------------------
_ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5SubOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE:
function _ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5SubOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  152:unpackBinaryComplexOperands(OpTy op, typename OpTy::Adaptor adaptor,
        -:  153:                            ConversionPatternRewriter &rewriter) {
    #####:  154:  auto loc = op.getLoc();
call    0 never executed
        -:  155:
        -:  156:  // Extract real and imaginary values from operands.
        -:  157:  BinaryComplexOperands unpacked;
    #####:  158:  ComplexStructBuilder lhs(adaptor.getLhs());
call    0 never executed
call    1 never executed
    #####:  159:  unpacked.lhs.real(lhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  160:  unpacked.lhs.imag(lhs.imaginary(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  161:  ComplexStructBuilder rhs(adaptor.getRhs());
call    0 never executed
call    1 never executed
    #####:  162:  unpacked.rhs.real(rhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  163:  unpacked.rhs.imag(rhs.imaginary(rewriter, loc));
call    0 never executed
        -:  164:
    #####:  165:  return unpacked;
        -:  166:}
------------------
_ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5MulOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE:
function _ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5MulOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  152:unpackBinaryComplexOperands(OpTy op, typename OpTy::Adaptor adaptor,
        -:  153:                            ConversionPatternRewriter &rewriter) {
    #####:  154:  auto loc = op.getLoc();
call    0 never executed
        -:  155:
        -:  156:  // Extract real and imaginary values from operands.
        -:  157:  BinaryComplexOperands unpacked;
    #####:  158:  ComplexStructBuilder lhs(adaptor.getLhs());
call    0 never executed
call    1 never executed
    #####:  159:  unpacked.lhs.real(lhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  160:  unpacked.lhs.imag(lhs.imaginary(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  161:  ComplexStructBuilder rhs(adaptor.getRhs());
call    0 never executed
call    1 never executed
    #####:  162:  unpacked.rhs.real(rhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  163:  unpacked.rhs.imag(rhs.imaginary(rewriter, loc));
call    0 never executed
        -:  164:
    #####:  165:  return unpacked;
        -:  166:}
------------------
_ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5DivOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE:
function _ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5DivOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  152:unpackBinaryComplexOperands(OpTy op, typename OpTy::Adaptor adaptor,
        -:  153:                            ConversionPatternRewriter &rewriter) {
    #####:  154:  auto loc = op.getLoc();
call    0 never executed
        -:  155:
        -:  156:  // Extract real and imaginary values from operands.
        -:  157:  BinaryComplexOperands unpacked;
    #####:  158:  ComplexStructBuilder lhs(adaptor.getLhs());
call    0 never executed
call    1 never executed
    #####:  159:  unpacked.lhs.real(lhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  160:  unpacked.lhs.imag(lhs.imaginary(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  161:  ComplexStructBuilder rhs(adaptor.getRhs());
call    0 never executed
call    1 never executed
    #####:  162:  unpacked.rhs.real(rhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  163:  unpacked.rhs.imag(rhs.imaginary(rewriter, loc));
call    0 never executed
        -:  164:
    #####:  165:  return unpacked;
        -:  166:}
------------------
_ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5AddOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE:
function _ZN12_GLOBAL__N_127unpackBinaryComplexOperandsIN4mlir7complex5AddOpEEENS_21BinaryComplexOperandsET_NS5_7AdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  152:unpackBinaryComplexOperands(OpTy op, typename OpTy::Adaptor adaptor,
        -:  153:                            ConversionPatternRewriter &rewriter) {
    #####:  154:  auto loc = op.getLoc();
call    0 never executed
        -:  155:
        -:  156:  // Extract real and imaginary values from operands.
        -:  157:  BinaryComplexOperands unpacked;
    #####:  158:  ComplexStructBuilder lhs(adaptor.getLhs());
call    0 never executed
call    1 never executed
    #####:  159:  unpacked.lhs.real(lhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  160:  unpacked.lhs.imag(lhs.imaginary(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  161:  ComplexStructBuilder rhs(adaptor.getRhs());
call    0 never executed
call    1 never executed
    #####:  162:  unpacked.rhs.real(rhs.real(rewriter, loc));
call    0 never executed
call    1 never executed
    #####:  163:  unpacked.rhs.imag(rhs.imaginary(rewriter, loc));
call    0 never executed
        -:  164:
    #####:  165:  return unpacked;
        -:  166:}
------------------
        -:  167:
        -:  168:struct AddOpConversion : public ConvertOpToLLVMPattern<complex::AddOp> {
     1050:  169:  using ConvertOpToLLVMPattern<complex::AddOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  170:
        -:  171:  LogicalResult
function _ZNK12_GLOBAL__N_115AddOpConversion15matchAndRewriteEN4mlir7complex5AddOpENS2_12AddOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  172:  matchAndRewrite(complex::AddOp op, OpAdaptor adaptor,
        -:  173:                  ConversionPatternRewriter &rewriter) const override {
    #####:  174:    auto loc = op.getLoc();
call    0 never executed
    #####:  175:    BinaryComplexOperands arg =
    #####:  176:        unpackBinaryComplexOperands<complex::AddOp>(op, adaptor, rewriter);
call    0 never executed
        -:  177:
        -:  178:    // Initialize complex number struct for result.
    #####:  179:    auto structType = typeConverter->convertType(op.getType());
call    0 never executed
call    1 never executed
    #####:  180:    auto result = ComplexStructBuilder::undef(rewriter, loc, structType);
call    0 never executed
        -:  181:
        -:  182:    // Emit IR to add complex numbers.
    #####:  183:    auto fmf = LLVM::FastmathFlagsAttr::get(op.getContext(), {});
call    0 never executed
call    1 never executed
    #####:  184:    Value real =
    #####:  185:        rewriter.create<LLVM::FAddOp>(loc, arg.lhs.real(), arg.rhs.real(), fmf);
call    0 never executed
call    1 never executed
    #####:  186:    Value imag =
    #####:  187:        rewriter.create<LLVM::FAddOp>(loc, arg.lhs.imag(), arg.rhs.imag(), fmf);
call    0 never executed
call    1 never executed
    #####:  188:    result.setReal(rewriter, loc, real);
call    0 never executed
    #####:  189:    result.setImaginary(rewriter, loc, imag);
call    0 never executed
        -:  190:
    #####:  191:    rewriter.replaceOp(op, {result});
call    0 never executed
call    1 never executed
    #####:  192:    return success();
        -:  193:  }
        -:  194:};
        -:  195:
        -:  196:struct DivOpConversion : public ConvertOpToLLVMPattern<complex::DivOp> {
     1050:  197:  using ConvertOpToLLVMPattern<complex::DivOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  198:
        -:  199:  LogicalResult
function _ZNK12_GLOBAL__N_115DivOpConversion15matchAndRewriteEN4mlir7complex5DivOpENS2_12DivOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  200:  matchAndRewrite(complex::DivOp op, OpAdaptor adaptor,
        -:  201:                  ConversionPatternRewriter &rewriter) const override {
    #####:  202:    auto loc = op.getLoc();
call    0 never executed
    #####:  203:    BinaryComplexOperands arg =
    #####:  204:        unpackBinaryComplexOperands<complex::DivOp>(op, adaptor, rewriter);
call    0 never executed
        -:  205:
        -:  206:    // Initialize complex number struct for result.
    #####:  207:    auto structType = typeConverter->convertType(op.getType());
call    0 never executed
call    1 never executed
    #####:  208:    auto result = ComplexStructBuilder::undef(rewriter, loc, structType);
call    0 never executed
        -:  209:
        -:  210:    // Emit IR to add complex numbers.
    #####:  211:    auto fmf = LLVM::FastmathFlagsAttr::get(op.getContext(), {});
call    0 never executed
call    1 never executed
    #####:  212:    Value rhsRe = arg.rhs.real();
call    0 never executed
    #####:  213:    Value rhsIm = arg.rhs.imag();
call    0 never executed
    #####:  214:    Value lhsRe = arg.lhs.real();
    #####:  215:    Value lhsIm = arg.lhs.imag();
        -:  216:
    #####:  217:    Value rhsSqNorm = rewriter.create<LLVM::FAddOp>(
    #####:  218:        loc, rewriter.create<LLVM::FMulOp>(loc, rhsRe, rhsRe, fmf),
call    0 never executed
    #####:  219:        rewriter.create<LLVM::FMulOp>(loc, rhsIm, rhsIm, fmf), fmf);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  220:
    #####:  221:    Value resultReal = rewriter.create<LLVM::FAddOp>(
    #####:  222:        loc, rewriter.create<LLVM::FMulOp>(loc, lhsRe, rhsRe, fmf),
call    0 never executed
    #####:  223:        rewriter.create<LLVM::FMulOp>(loc, lhsIm, rhsIm, fmf), fmf);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  224:
    #####:  225:    Value resultImag = rewriter.create<LLVM::FSubOp>(
    #####:  226:        loc, rewriter.create<LLVM::FMulOp>(loc, lhsIm, rhsRe, fmf),
call    0 never executed
    #####:  227:        rewriter.create<LLVM::FMulOp>(loc, lhsRe, rhsIm, fmf), fmf);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  228:
    #####:  229:    result.setReal(
call    0 never executed
        -:  230:        rewriter, loc,
    #####:  231:        rewriter.create<LLVM::FDivOp>(loc, resultReal, rhsSqNorm, fmf));
call    0 never executed
call    1 never executed
    #####:  232:    result.setImaginary(
call    0 never executed
        -:  233:        rewriter, loc,
    #####:  234:        rewriter.create<LLVM::FDivOp>(loc, resultImag, rhsSqNorm, fmf));
call    0 never executed
call    1 never executed
        -:  235:
    #####:  236:    rewriter.replaceOp(op, {result});
call    0 never executed
call    1 never executed
    #####:  237:    return success();
        -:  238:  }
        -:  239:};
        -:  240:
        -:  241:struct MulOpConversion : public ConvertOpToLLVMPattern<complex::MulOp> {
     1050:  242:  using ConvertOpToLLVMPattern<complex::MulOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  243:
        -:  244:  LogicalResult
function _ZNK12_GLOBAL__N_115MulOpConversion15matchAndRewriteEN4mlir7complex5MulOpENS2_12MulOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  245:  matchAndRewrite(complex::MulOp op, OpAdaptor adaptor,
        -:  246:                  ConversionPatternRewriter &rewriter) const override {
    #####:  247:    auto loc = op.getLoc();
call    0 never executed
    #####:  248:    BinaryComplexOperands arg =
    #####:  249:        unpackBinaryComplexOperands<complex::MulOp>(op, adaptor, rewriter);
call    0 never executed
        -:  250:
        -:  251:    // Initialize complex number struct for result.
    #####:  252:    auto structType = typeConverter->convertType(op.getType());
call    0 never executed
call    1 never executed
    #####:  253:    auto result = ComplexStructBuilder::undef(rewriter, loc, structType);
call    0 never executed
        -:  254:
        -:  255:    // Emit IR to add complex numbers.
    #####:  256:    auto fmf = LLVM::FastmathFlagsAttr::get(op.getContext(), {});
call    0 never executed
call    1 never executed
    #####:  257:    Value rhsRe = arg.rhs.real();
call    0 never executed
    #####:  258:    Value rhsIm = arg.rhs.imag();
call    0 never executed
    #####:  259:    Value lhsRe = arg.lhs.real();
    #####:  260:    Value lhsIm = arg.lhs.imag();
        -:  261:
    #####:  262:    Value real = rewriter.create<LLVM::FSubOp>(
    #####:  263:        loc, rewriter.create<LLVM::FMulOp>(loc, rhsRe, lhsRe, fmf),
call    0 never executed
    #####:  264:        rewriter.create<LLVM::FMulOp>(loc, rhsIm, lhsIm, fmf), fmf);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  265:
    #####:  266:    Value imag = rewriter.create<LLVM::FAddOp>(
    #####:  267:        loc, rewriter.create<LLVM::FMulOp>(loc, lhsIm, rhsRe, fmf),
call    0 never executed
    #####:  268:        rewriter.create<LLVM::FMulOp>(loc, lhsRe, rhsIm, fmf), fmf);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  269:
    #####:  270:    result.setReal(rewriter, loc, real);
call    0 never executed
    #####:  271:    result.setImaginary(rewriter, loc, imag);
call    0 never executed
        -:  272:
    #####:  273:    rewriter.replaceOp(op, {result});
call    0 never executed
call    1 never executed
    #####:  274:    return success();
        -:  275:  }
        -:  276:};
        -:  277:
        -:  278:struct SubOpConversion : public ConvertOpToLLVMPattern<complex::SubOp> {
     1050:  279:  using ConvertOpToLLVMPattern<complex::SubOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  280:
        -:  281:  LogicalResult
function _ZNK12_GLOBAL__N_115SubOpConversion15matchAndRewriteEN4mlir7complex5SubOpENS2_12SubOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  282:  matchAndRewrite(complex::SubOp op, OpAdaptor adaptor,
        -:  283:                  ConversionPatternRewriter &rewriter) const override {
    #####:  284:    auto loc = op.getLoc();
call    0 never executed
    #####:  285:    BinaryComplexOperands arg =
    #####:  286:        unpackBinaryComplexOperands<complex::SubOp>(op, adaptor, rewriter);
call    0 never executed
        -:  287:
        -:  288:    // Initialize complex number struct for result.
    #####:  289:    auto structType = typeConverter->convertType(op.getType());
call    0 never executed
call    1 never executed
    #####:  290:    auto result = ComplexStructBuilder::undef(rewriter, loc, structType);
call    0 never executed
        -:  291:
        -:  292:    // Emit IR to substract complex numbers.
    #####:  293:    auto fmf = LLVM::FastmathFlagsAttr::get(op.getContext(), {});
call    0 never executed
call    1 never executed
    #####:  294:    Value real =
    #####:  295:        rewriter.create<LLVM::FSubOp>(loc, arg.lhs.real(), arg.rhs.real(), fmf);
call    0 never executed
call    1 never executed
    #####:  296:    Value imag =
    #####:  297:        rewriter.create<LLVM::FSubOp>(loc, arg.lhs.imag(), arg.rhs.imag(), fmf);
call    0 never executed
call    1 never executed
    #####:  298:    result.setReal(rewriter, loc, real);
call    0 never executed
    #####:  299:    result.setImaginary(rewriter, loc, imag);
call    0 never executed
        -:  300:
    #####:  301:    rewriter.replaceOp(op, {result});
call    0 never executed
call    1 never executed
    #####:  302:    return success();
        -:  303:  }
        -:  304:};
        -:  305:} // namespace
        -:  306:
function _ZN4mlir39populateComplexToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    1050*:  307:void mlir::populateComplexToLLVMConversionPatterns(
        -:  308:    LLVMTypeConverter &converter, RewritePatternSet &patterns) {
        -:  309:  // clang-format off
    1050*:  310:  patterns.add<
        -:  311:      AbsOpConversion,
        -:  312:      AddOpConversion,
        -:  313:      ConstantOpLowering,
        -:  314:      CreateOpConversion,
        -:  315:      DivOpConversion,
        -:  316:      ImOpConversion,
        -:  317:      MulOpConversion,
        -:  318:      ReOpConversion,
        -:  319:      SubOpConversion
    #####:  320:    >(converter);
call    0 never executed
        -:  321:  // clang-format on
    #####:  322:}
        -:  323:
        -:  324:namespace {
  129890*:  325:struct ConvertComplexToLLVMPass
call    0 never executed
call    1 returned 100%
        -:  326:    : public impl::ConvertComplexToLLVMBase<ConvertComplexToLLVMPass> {
        -:  327:  void runOnOperation() override;
        -:  328:};
        -:  329:} // namespace
        -:  330:
function _ZN12_GLOBAL__N_124ConvertComplexToLLVMPass14runOnOperationEv called 1050 returned 100% blocks executed 90%
     1050:  331:void ConvertComplexToLLVMPass::runOnOperation() {
        -:  332:  // Convert to the LLVM IR dialect using the converter defined above.
     1050:  333:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     2100:  334:  LLVMTypeConverter converter(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1050:  335:  populateComplexToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
        -:  336:
     2100:  337:  LLVMConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1050:  338:  target.addIllegalDialect<complex::ComplexDialect>();
call    0 returned 100%
     1050:  339:  if (failed(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
     1050:  340:          applyPartialConversion(getOperation(), target, std::move(patterns))))
call    0 returned 100%
    #####:  341:    signalPassFailure();
call    0 never executed
     1050:  342:}
        -:  343:
function _ZN4mlir30createConvertComplexToLLVMPassEv called 129890 returned 100% blocks executed 100%
   129890:  344:std::unique_ptr<Pass> mlir::createConvertComplexToLLVMPass() {
   129890:  345:  return std::make_unique<ConvertComplexToLLVMPass>();
call    0 returned 100%
        -:  346:}
