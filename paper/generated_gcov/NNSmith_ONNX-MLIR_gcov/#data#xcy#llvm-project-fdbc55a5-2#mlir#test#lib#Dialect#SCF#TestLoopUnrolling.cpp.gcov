        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/SCF/TestLoopUnrolling.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/SCF/CMakeFiles/MLIRSCFTestPasses.dir/TestLoopUnrolling.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/SCF/CMakeFiles/MLIRSCFTestPasses.dir/TestLoopUnrolling.cpp.gcda
        -:    0:Runs:128636
        -:    1://===-------- TestLoopUnrolling.cpp --- loop unrolling test pass ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to unroll loops by a specified unroll factor.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   15:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace {
        -:   22:
function _ZN12_GLOBAL__N_1L15getNestingDepthEPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   23:static unsigned getNestingDepth(Operation *op) {
    #####:   24:  Operation *currOp = op;
    #####:   25:  unsigned depth = 0;
    #####:   26:  while ((currOp = currOp->getParentOp())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   27:    if (isa<scf::ForOp>(currOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   28:      depth++;
        -:   29:  }
    #####:   30:  return depth;
        -:   31:}
        -:   32:
        -:   33:struct TestLoopUnrollingPass
        -:   34:    : public PassWrapper<TestLoopUnrollingPass, OperationPass<>> {
function _ZN12_GLOBAL__N_121TestLoopUnrollingPass13resolveTypeIDEv called 129245 returned 100% blocks executed 100%
   129245:   35:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLoopUnrollingPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   36:
function _ZNK12_GLOBAL__N_121TestLoopUnrollingPass11getArgumentEv called 128659 returned 100% blocks executed 100%
   128659:   37:  StringRef getArgument() const final { return "test-loop-unrolling"; }
function _ZNK12_GLOBAL__N_121TestLoopUnrollingPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   38:  StringRef getDescription() const final {
   128636:   39:    return "Tests loop unrolling transformation";
        -:   40:  }
function _ZN12_GLOBAL__N_121TestLoopUnrollingPassC2Ev called 129245 returned 100% blocks executed 100%
   129245:   41:  TestLoopUnrollingPass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   42:  TestLoopUnrollingPass(const TestLoopUnrollingPass &) {}
        -:   43:  explicit TestLoopUnrollingPass(uint64_t unrollFactorParam,
        -:   44:                                 unsigned loopDepthParam,
        -:   45:                                 bool annotateLoopParam) {
        -:   46:    unrollFactor = unrollFactorParam;
        -:   47:    loopDepth = loopDepthParam;
        -:   48:    annotateLoop = annotateLoopParam;
        -:   49:  }
        -:   50:
function _ZNK12_GLOBAL__N_121TestLoopUnrollingPass20getDependentDialectsERN4mlir15DialectRegistryE called 609 returned 100% blocks executed 100%
      609:   51:  void getDependentDialects(DialectRegistry &registry) const override {
      609:   52:    registry.insert<arith::ArithDialect>();
call    0 returned 100%
      609:   53:  }
        -:   54:
function _ZN12_GLOBAL__N_121TestLoopUnrollingPass14runOnOperationEv called 504 returned 100% blocks executed 60%
      504:   55:  void runOnOperation() override {
      504:   56:    SmallVector<scf::ForOp, 4> loops;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_121TestLoopUnrollingPass14runOnOperationEvENKUlN4mlir3scf5ForOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     504*:   57:    getOperation()->walk([&](scf::ForOp forOp) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    #####:   58:      if (getNestingDepth(forOp) == loopDepth)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:        loops.push_back(forOp);
call    0 never executed
    #####:   60:    });
function _ZZN12_GLOBAL__N_121TestLoopUnrollingPass14runOnOperationEvENKUljPN4mlir9OperationENS1_9OpBuilderEE0_clEjS3_S4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   61:    auto annotateFn = [this](unsigned i, Operation *op, OpBuilder b) {
    #####:   62:      if (annotateLoop) {
branch  0 never executed
branch  1 never executed
    #####:   63:        op->setAttr("unrolled_iteration", b.getUI32IntegerAttr(i));
call    0 never executed
call    1 never executed
        -:   64:      }
     504*:   65:    };
     504*:   66:    for (auto loop : loops)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   67:      (void)loopUnrollByFactor(loop, unrollFactor, annotateFn);
call    0 never executed
      504:   68:  }
        -:   69:  Option<uint64_t> unrollFactor{*this, "unroll-factor",
        -:   70:                                llvm::cl::desc("Loop unroll factor."),
        -:   71:                                llvm::cl::init(1)};
        -:   72:  Option<bool> annotateLoop{*this, "annotate",
        -:   73:                            llvm::cl::desc("Annotate unrolled iterations."),
        -:   74:                            llvm::cl::init(false)};
        -:   75:  Option<bool> unrollUpToFactor{*this, "unroll-up-to-factor",
        -:   76:                                llvm::cl::desc("Loop unroll up to factor."),
        -:   77:                                llvm::cl::init(false)};
        -:   78:  Option<unsigned> loopDepth{*this, "loop-depth", llvm::cl::desc("Loop depth."),
        -:   79:                             llvm::cl::init(0)};
        -:   80:};
        -:   81:} // namespace
        -:   82:
        -:   83:namespace mlir {
        -:   84:namespace test {
function _ZN4mlir4test29registerTestLoopUnrollingPassEv called 128636 returned 100% blocks executed 100%
   128636:   85:void registerTestLoopUnrollingPass() {
   128636:   86:  PassRegistration<TestLoopUnrollingPass>();
call    0 returned 100%
   128636:   87:}
        -:   88:} // namespace test
        -:   89:} // namespace mlir
