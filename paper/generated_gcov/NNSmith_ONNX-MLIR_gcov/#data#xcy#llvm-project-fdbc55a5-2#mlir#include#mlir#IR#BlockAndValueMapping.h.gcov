        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/IR/BlockAndValueMapping.h
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/DialectConversion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/DialectConversion.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- BlockAndValueMapping.h -----------------------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines a utility class for maintaining a mapping for multiple
        -:   10:// value types.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_IR_BLOCKANDVALUEMAPPING_H
        -:   15:#define MLIR_IR_BLOCKANDVALUEMAPPING_H
        -:   16:
        -:   17:#include "mlir/IR/Block.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:// This is a utility class for mapping one set of values to another. New
        -:   21:// mappings can be inserted via 'map'. Existing mappings can be
        -:   22:// found via the 'lookup*' functions. There are two variants that differ only in
        -:   23:// return value when an existing is not found for the provided key.
        -:   24:// 'lookupOrNull' returns nullptr where as 'lookupOrDefault' will return the
        -:   25:// lookup key.
        -:   26:class BlockAndValueMapping {
        -:   27:public:
        -:   28:  /// Inserts a new mapping for 'from' to 'to'. If there is an existing mapping,
        -:   29:  /// it is overwritten.
        -:   30:  void map(Block *from, Block *to) { blockMap[from] = to; }
   408698:   31:  void map(Value from, Value to) { valueMap[from] = to; }
call    0 returned 100%
        -:   32:
        -:   33:  template <
        -:   34:      typename S, typename T,
        -:   35:      std::enable_if_t<!std::is_assignable<Value, S>::value &&
        -:   36:                       !std::is_assignable<Block *, S>::value> * = nullptr>
        -:   37:  void map(S &&from, T &&to) {
        -:   38:    for (auto pair : llvm::zip(from, to))
        -:   39:      map(std::get<0>(pair), std::get<1>(pair));
        -:   40:  }
        -:   41:
        -:   42:  /// Erases a mapping for 'from'.
        -:   43:  void erase(Block *from) { blockMap.erase(from); }
    #####:   44:  void erase(Value from) { valueMap.erase(from); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   45:
        -:   46:  /// Checks to see if a mapping for 'from' exists.
        -:   47:  bool contains(Block *from) const { return blockMap.count(from); }
        -:   48:  bool contains(Value from) const { return valueMap.count(from); }
        -:   49:
        -:   50:  /// Lookup a mapped value within the map. If a mapping for the provided value
        -:   51:  /// does not exist then return nullptr.
    #####:   52:  Block *lookupOrNull(Block *from) const {
    #####:   53:    return lookupOrValue(from, (Block *)nullptr);
        -:   54:  }
  826713*:   55:  Value lookupOrNull(Value from) const { return lookupOrValue(from, Value()); }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 returned 100%
branch  5 taken 51% (fallthrough)
branch  6 taken 49%
call    7 never executed
        -:   56:
        -:   57:  /// Lookup a mapped value within the map. If a mapping for the provided value
        -:   58:  /// does not exist then return the provided value.
        -:   59:  Block *lookupOrDefault(Block *from) const {
        -:   60:    return lookupOrValue(from, from);
        -:   61:  }
        -:   62:  Value lookupOrDefault(Value from) const { return lookupOrValue(from, from); }
        -:   63:
        -:   64:  /// Lookup a mapped value within the map. This asserts the provided value
        -:   65:  /// exists within the map.
    #####:   66:  Block *lookup(Block *from) const { return lookupImpl(from); }
call    0 never executed
        -:   67:  Value lookup(Value from) const { return lookupImpl(from); }
        -:   68:
        -:   69:  /// Clears all mappings held by the mapper.
        -:   70:  void clear() { valueMap.clear(); }
        -:   71:
        -:   72:  /// Return the held value mapping.
    #####:   73:  const DenseMap<Value, Value> &getValueMap() const { return valueMap; }
call    0 never executed
        -:   74:
        -:   75:  /// Return the held block mapping.
        -:   76:  const DenseMap<Block *, Block *> &getBlockMap() const { return blockMap; }
        -:   77:
        -:   78:private:
        -:   79:  template<typename T>
function _ZNK4mlir20BlockAndValueMapping10lookupImplIPNS_5BlockEEET_S4_ called 0 returned 0% blocks executed 0%
    #####:   80:  T lookupImpl(T from) const {
call    0 never executed
    #####:   81:    T result = lookupOrNull(from);
    #####:   82:    assert(result && "expected 'from' to be contained within the map");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   83:    return result;
        -:   84:  }
        -:   85:
        -:   86:  /// Utility lookupOrValue that looks up an existing key or returns the
        -:   87:  /// provided value.
function _ZNK4mlir20BlockAndValueMapping13lookupOrValueEPNS_5BlockES2_ called 0 returned 0% blocks executed 0%
    #####:   88:  Block *lookupOrValue(Block *from, Block *value) const {
    #####:   89:    auto it = blockMap.find(from);
call    0 never executed
    #####:   90:    return it != blockMap.end() ? it->second : value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   91:  }
function _ZNK4mlir20BlockAndValueMapping13lookupOrValueENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:   92:  Value lookupOrValue(Value from, Value value) const {
    #####:   93:    auto it = valueMap.find(from);
call    0 never executed
    #####:   94:    return it != valueMap.end() ? it->second : value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   95:  }
        -:   96:
        -:   97:  DenseMap<Value, Value> valueMap;
        -:   98:  DenseMap<Block *, Block *> blockMap;
        -:   99:};
        -:  100:
        -:  101:} // namespace mlir
        -:  102:
        -:  103:#endif // MLIR_IR_BLOCKANDVALUEMAPPING_H
