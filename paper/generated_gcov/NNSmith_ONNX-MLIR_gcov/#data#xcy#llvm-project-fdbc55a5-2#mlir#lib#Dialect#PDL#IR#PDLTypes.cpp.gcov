        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/PDL/IR/PDLTypes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/PDL/IR/CMakeFiles/obj.MLIRPDLDialect.dir/PDLTypes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/PDL/IR/CMakeFiles/obj.MLIRPDLDialect.dir/PDLTypes.cpp.gcda
        -:    0:Runs:128628
        -:    1://===- PDLTypes.cpp - Pattern Descriptor Language Types -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/PDL/IR/PDLTypes.h"
        -:   10:#include "mlir/Dialect/PDL/IR/PDL.h"
        -:   11:#include "mlir/IR/Builders.h"
        -:   12:#include "mlir/IR/DialectImplementation.h"
        -:   13:#include "llvm/ADT/TypeSwitch.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::pdl;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// TableGen'd type method definitions
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
        -:   22:#define GET_TYPEDEF_CLASSES
        -:   23:#include "mlir/Dialect/PDL/IR/PDLOpsTypes.cpp.inc"
        -:   24:
        -:   25://===----------------------------------------------------------------------===//
        -:   26:// PDLDialect
        -:   27://===----------------------------------------------------------------------===//
        -:   28:
function _ZN4mlir3pdl10PDLDialect13registerTypesEv called 1767 returned 100% blocks executed 100%
     1767:   29:void PDLDialect::registerTypes() {
     1767:   30:  addTypes<
        -:   31:#define GET_TYPEDEF_LIST
        -:   32:#include "mlir/Dialect/PDL/IR/PDLOpsTypes.cpp.inc"
     1767:   33:      >();
call    0 returned 100%
     1767:   34:}
        -:   35:
function _ZL12parsePDLTypeRN4mlir9AsmParserE called 2048 returned 100% blocks executed 36%
     2048:   36:static Type parsePDLType(AsmParser &parser) {
     2048:   37:  StringRef typeTag;
     2048:   38:  {
     2048:   39:    Type genType;
     2048:   40:    auto parseResult = generatedTypeParser(parser, &typeTag, genType);
call    0 returned 100%
     2048:   41:    if (parseResult.has_value())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2048:   42:      return genType;
        -:   43:  }
        -:   44:
        -:   45:  // FIXME: This ends up with a double error being emitted if `RangeType` also
        -:   46:  // emits an error. We should rework the `generatedTypeParser` to better
        -:   47:  // support when the keyword is valid but the individual type parser itself
        -:   48:  // emits an error.
    #####:   49:  parser.emitError(parser.getNameLoc(), "invalid 'pdl' type: `")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   50:      << typeTag << "'";
call    0 never executed
call    1 never executed
    #####:   51:  return Type();
        -:   52:}
        -:   53:
        -:   54://===----------------------------------------------------------------------===//
        -:   55:// PDL Types
        -:   56://===----------------------------------------------------------------------===//
        -:   57:
function _ZN4mlir3pdl7PDLType7classofENS_4TypeE called 17408 returned 100% blocks executed 67%
    17408:   58:bool PDLType::classof(Type type) {
    17408:   59:  return llvm::isa<PDLDialect>(type.getDialect());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   60:}
        -:   61:
        -:   62://===----------------------------------------------------------------------===//
        -:   63:// RangeType
        -:   64://===----------------------------------------------------------------------===//
        -:   65:
function _ZN4mlir3pdl9RangeType5parseERNS_9AsmParserE called 2048 returned 100% blocks executed 62%
     2048:   66:Type RangeType::parse(AsmParser &parser) {
     2048:   67:  if (parser.parseLess())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   68:    return Type();
        -:   69:
     2048:   70:  SMLoc elementLoc = parser.getCurrentLocation();
call    0 returned 100%
     2048:   71:  Type elementType = parsePDLType(parser);
call    0 returned 100%
    2048*:   72:  if (!elementType || parser.parseGreater())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   73:    return Type();
        -:   74:
     2048:   75:  if (elementType.isa<RangeType>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   76:    parser.emitError(elementLoc)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   77:        << "element of pdl.range cannot be another range, but got"
call    0 never executed
    #####:   78:        << elementType;
call    0 never executed
    #####:   79:    return Type();
        -:   80:  }
     4096:   81:  return RangeType::get(elementType);
call    0 returned 100%
        -:   82:}
        -:   83:
function _ZNK4mlir3pdl9RangeType5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   84:void RangeType::print(AsmPrinter &printer) const {
    #####:   85:  printer << "<";
call    0 never executed
    #####:   86:  (void)generatedTypePrinter(getElementType(), printer);
call    0 never executed
    #####:   87:  printer << ">";
call    0 never executed
    #####:   88:}
        -:   89:
function _ZN4mlir3pdl9RangeType6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS_4TypeE called 10240 returned 100% blocks executed 50%
    10240:   90:LogicalResult RangeType::verify(function_ref<InFlightDiagnostic()> emitError,
        -:   91:                                Type elementType) {
    20480:   92:  if (!elementType.isa<PDLType>() || elementType.isa<RangeType>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   93:    return emitError()
call    0 never executed
call    1 never executed
call    2 never executed
        -:   94:           << "expected element of pdl.range to be one of [!pdl.attribute, "
    #####:   95:              "!pdl.operation, !pdl.type, !pdl.value], but got "
call    0 never executed
    #####:   96:           << elementType;
call    0 never executed
        -:   97:  }
    10240:   98:  return success();
        -:   99:}
