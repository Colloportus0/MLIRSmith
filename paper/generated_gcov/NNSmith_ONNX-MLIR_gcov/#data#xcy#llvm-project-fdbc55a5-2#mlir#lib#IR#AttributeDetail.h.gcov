        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/AttributeDetail.h
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinAttributes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinAttributes.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- AttributeDetail.h - MLIR Affine Map details Class --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This holds implementation details of Attribute.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef ATTRIBUTEDETAIL_H_
        -:   14:#define ATTRIBUTEDETAIL_H_
        -:   15:
        -:   16:#include "mlir/IR/AffineMap.h"
        -:   17:#include "mlir/IR/BuiltinAttributes.h"
        -:   18:#include "mlir/IR/BuiltinTypes.h"
        -:   19:#include "mlir/IR/IntegerSet.h"
        -:   20:#include "mlir/IR/MLIRContext.h"
        -:   21:#include "mlir/Support/StorageUniquer.h"
        -:   22:#include "llvm/ADT/APFloat.h"
        -:   23:#include "llvm/ADT/PointerIntPair.h"
        -:   24:#include "llvm/Support/TrailingObjects.h"
        -:   25:
        -:   26:namespace mlir {
        -:   27:namespace detail {
        -:   28:
        -:   29://===----------------------------------------------------------------------===//
        -:   30:// Elements Attributes
        -:   31://===----------------------------------------------------------------------===//
        -:   32:
        -:   33:/// Return the bit width which DenseElementsAttr should use for this type.
function _ZN4mlir6detail23getDenseElementBitWidthENS_4TypeE called 898188 returned 100% blocks executed 70%
   898188:   34:inline size_t getDenseElementBitWidth(Type eltType) {
        -:   35:  // Align the width for complex to 8 to make storage and interpretation easier.
   898188:   36:  if (ComplexType comp = eltType.dyn_cast<ComplexType>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   37:    return llvm::alignTo<8>(getDenseElementBitWidth(comp.getElementType())) * 2;
call    0 never executed
call    1 never executed
   898188:   38:  if (eltType.isIndex())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   39:    return IndexType::kInternalStorageBitWidth;
   898188:   40:  return eltType.getIntOrFloatBitWidth();
call    0 returned 100%
        -:   41:}
        -:   42:
        -:   43:/// An attribute representing a reference to a dense vector or tensor object.
        -:   44:struct DenseElementsAttributeStorage : public AttributeStorage {
        -:   45:public:
  164912*:   46:  DenseElementsAttributeStorage(ShapedType type, bool isSplat)
  164912*:   47:      : type(type), isSplat(isSplat) {}
        -:   48:
        -:   49:  ShapedType type;
        -:   50:  bool isSplat;
        -:   51:};
        -:   52:
        -:   53:/// An attribute representing a reference to a dense vector or tensor object.
        -:   54:struct DenseIntOrFPElementsAttrStorage : public DenseElementsAttributeStorage {
   164912:   55:  DenseIntOrFPElementsAttrStorage(ShapedType ty, ArrayRef<char> data,
        -:   56:                                  bool isSplat = false)
   164912:   57:      : DenseElementsAttributeStorage(ty, isSplat), data(data) {}
        -:   58:
        -:   59:  struct KeyTy {
  207614*:   60:    KeyTy(ShapedType type, ArrayRef<char> data, llvm::hash_code hashCode,
        -:   61:          bool isSplat = false)
    #####:   62:        : type(type), data(data), hashCode(hashCode), isSplat(isSplat) {}
        -:   63:
        -:   64:    /// The type of the dense elements.
        -:   65:    ShapedType type;
        -:   66:
        -:   67:    /// The raw buffer for the data storage.
        -:   68:    ArrayRef<char> data;
        -:   69:
        -:   70:    /// The computed hash code for the storage data.
        -:   71:    llvm::hash_code hashCode;
        -:   72:
        -:   73:    /// A boolean that indicates if this data is a splat or not.
        -:   74:    bool isSplat;
        -:   75:  };
        -:   76:
        -:   77:  /// Compare this storage instance with the provided key.
function _ZNK4mlir6detail31DenseIntOrFPElementsAttrStorageeqERKNS1_5KeyTyE called 45420 returned 100% blocks executed 100%
    45420:   78:  bool operator==(const KeyTy &key) const {
    88677:   79:    return key.type == type && key.data == data;
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   80:  }
        -:   81:
        -:   82:  /// Construct a key from a shaped type, raw data buffer, and a flag that
        -:   83:  /// signals if the data is already known to be a splat. Callers to this
        -:   84:  /// function are expected to tag preknown splat values when possible, e.g. one
        -:   85:  /// element shapes.
function _ZN4mlir6detail31DenseIntOrFPElementsAttrStorage6getKeyENS_10ShapedTypeEN4llvm8ArrayRefIcEEb called 207614 returned 100% blocks executed 76%
   207614:   86:  static KeyTy getKey(ShapedType ty, ArrayRef<char> data, bool isKnownSplat) {
        -:   87:    // Handle an empty storage instance.
   207614:   88:    if (data.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   89:      return KeyTy(ty, data, 0);
        -:   90:
        -:   91:    // If the data is already known to be a splat, the key hash value is
        -:   92:    // directly the data buffer.
   207614:   93:    bool isBoolData = ty.getElementType().isInteger(1);
call    0 returned 100%
call    1 returned 100%
   207614:   94:    if (isKnownSplat) {
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
   144528:   95:      if (isBoolData)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     2920:   96:        return getKeyForSplatBoolData(ty, data[0] != 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   143068:   97:      return KeyTy(ty, data, llvm::hash_value(data), isKnownSplat);
call    0 returned 100%
        -:   98:    }
        -:   99:
        -:  100:    // Otherwise, we need to check if the data corresponds to a splat or not.
        -:  101:
        -:  102:    // Handle the simple case of only one element.
    63086:  103:    size_t numElements = ty.getNumElements();
call    0 returned 100%
   63086*:  104:    assert(numElements != 1 && "splat of 1 element should already be detected");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  105:
        -:  106:    // Handle boolean values directly as they are packed to 1-bit.
    63086:  107:    if (isBoolData)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:      return getKeyForBoolData(ty, data, numElements);
call    0 never executed
        -:  109:
    63086:  110:    size_t elementWidth = getDenseElementBitWidth(ty.getElementType());
call    0 returned 100%
call    1 returned 100%
        -:  111:    // Non 1-bit dense elements are padded to 8-bits.
    63086:  112:    size_t storageSize = llvm::divideCeil(elementWidth, CHAR_BIT);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   63086*:  113:    assert(((data.size() / storageSize) == numElements) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  114:           "data does not hold expected number of elements");
        -:  115:
        -:  116:    // Create the initial hash value with just the first element.
    63086:  117:    auto firstElt = data.take_front(storageSize);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    63086:  118:    auto hashVal = llvm::hash_value(firstElt);
call    0 returned 100%
        -:  119:
        -:  120:    // Check to see if this storage represents a splat. If it doesn't then
        -:  121:    // combine the hash for the data starting with the first non splat element.
    82132:  122:    for (size_t i = storageSize, e = data.size(); i != e; i += storageSize)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    82132:  123:      if (memcmp(data.data(), &data[i], storageSize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
    63086:  124:        return KeyTy(ty, data, llvm::hash_combine(hashVal, data.drop_front(i)));
call    0 returned 100%
call    1 returned 100%
        -:  125:
        -:  126:    // Otherwise, this is a splat so just return the hash of the first element.
    #####:  127:    return KeyTy(ty, firstElt, hashVal, /*isSplat=*/true);
        -:  128:  }
        -:  129:
        -:  130:  /// Construct a key with a set of boolean data.
function _ZN4mlir6detail31DenseIntOrFPElementsAttrStorage17getKeyForBoolDataENS_10ShapedTypeEN4llvm8ArrayRefIcEEm called 0 returned 0% blocks executed 0%
    #####:  131:  static KeyTy getKeyForBoolData(ShapedType ty, ArrayRef<char> data,
        -:  132:                                 size_t numElements) {
    #####:  133:    ArrayRef<char> splatData = data;
    #####:  134:    bool splatValue = splatData.front() & 1;
branch  0 never executed
branch  1 never executed
        -:  135:
        -:  136:    // Check the simple case where the data matches the known splat value.
    #####:  137:    if (splatData == ArrayRef<char>(splatValue ? kSplatTrue : kSplatFalse))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  138:      return getKeyForSplatBoolData(ty, splatValue);
        -:  139:
        -:  140:    // Handle the case where the potential splat value is 1 and the number of
        -:  141:    // elements is non 8-bit aligned.
    #####:  142:    size_t numOddElements = numElements % CHAR_BIT;
    #####:  143:    if (splatValue && numOddElements != 0) {
branch  0 never executed
branch  1 never executed
        -:  144:      // Check that all bits are set in the last value.
    #####:  145:      char lastElt = splatData.back();
call    0 never executed
    #####:  146:      if (lastElt != llvm::maskTrailingOnes<unsigned char>(numOddElements))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  147:        return KeyTy(ty, data, llvm::hash_value(data));
call    0 never executed
        -:  148:
        -:  149:      // If this is the only element, the data is known to be a splat.
    #####:  150:      if (splatData.size() == 1)
branch  0 never executed
branch  1 never executed
    #####:  151:        return getKeyForSplatBoolData(ty, splatValue);
    #####:  152:      splatData = splatData.drop_back();
call    0 never executed
        -:  153:    }
        -:  154:
        -:  155:    // Check that the data buffer corresponds to a splat of the proper mask.
    #####:  156:    char mask = splatValue ? ~0 : 0;
    #####:  157:    return llvm::all_of(splatData, [mask](char c) { return c == mask; })
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  158:               ? getKeyForSplatBoolData(ty, splatValue)
    #####:  159:               : KeyTy(ty, data, llvm::hash_value(data));
branch  0 never executed
branch  1 never executed
        -:  160:  }
        -:  161:
        -:  162:  /// Return a key to use for a boolean splat of the given value.
    1460*:  163:  static KeyTy getKeyForSplatBoolData(ShapedType type, bool splatValue) {
    1460*:  164:    const char &splatData = splatValue ? kSplatTrue : kSplatFalse;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    1460*:  165:    return KeyTy(type, splatData, llvm::hash_value(splatData),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 returned 100%
    1460*:  166:                 /*isSplat=*/true);
        -:  167:  }
        -:  168:
        -:  169:  /// Hash the key for the storage.
   207614:  170:  static llvm::hash_code hashKey(const KeyTy &key) {
   207614:  171:    return llvm::hash_combine(key.type, key.hashCode);
call    0 returned 100%
        -:  172:  }
        -:  173:
        -:  174:  /// Construct a new storage instance.
        -:  175:  static DenseIntOrFPElementsAttrStorage *
function _ZN4mlir6detail31DenseIntOrFPElementsAttrStorage9constructERNS_14StorageUniquer16StorageAllocatorENS1_5KeyTyE called 164912 returned 100% blocks executed 100%
   164912:  176:  construct(AttributeStorageAllocator &allocator, KeyTy key) {
        -:  177:    // If the data buffer is non-empty, we copy it into the allocator with a
        -:  178:    // 64-bit alignment.
   164912:  179:    ArrayRef<char> copy, data = key.data;
   164912:  180:    if (!data.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   164912:  181:      char *rawData = reinterpret_cast<char *>(
   164912:  182:          allocator.allocate(data.size(), alignof(uint64_t)));
call    0 returned 100%
   164912:  183:      std::memcpy(rawData, data.data(), data.size());
   164912:  184:      copy = ArrayRef<char>(rawData, data.size());
        -:  185:    }
        -:  186:
   329824:  187:    return new (allocator.allocate<DenseIntOrFPElementsAttrStorage>())
   164912:  188:        DenseIntOrFPElementsAttrStorage(key.type, copy, key.isSplat);
call    0 returned 100%
        -:  189:  }
        -:  190:
        -:  191:  ArrayRef<char> data;
        -:  192:
        -:  193:  /// The values used to denote a boolean splat value.
        -:  194:  static constexpr char kSplatTrue = ~0;
        -:  195:  static constexpr char kSplatFalse = 0;
        -:  196:};
        -:  197:
        -:  198:/// An attribute representing a reference to a dense vector or tensor object
        -:  199:/// containing strings.
        -:  200:struct DenseStringElementsAttrStorage : public DenseElementsAttributeStorage {
    #####:  201:  DenseStringElementsAttrStorage(ShapedType ty, ArrayRef<StringRef> data,
        -:  202:                                 bool isSplat = false)
    #####:  203:      : DenseElementsAttributeStorage(ty, isSplat), data(data) {}
        -:  204:
        -:  205:  struct KeyTy {
    #####:  206:    KeyTy(ShapedType type, ArrayRef<StringRef> data, llvm::hash_code hashCode,
        -:  207:          bool isSplat = false)
    #####:  208:        : type(type), data(data), hashCode(hashCode), isSplat(isSplat) {}
        -:  209:
        -:  210:    /// The type of the dense elements.
        -:  211:    ShapedType type;
        -:  212:
        -:  213:    /// The raw buffer for the data storage.
        -:  214:    ArrayRef<StringRef> data;
        -:  215:
        -:  216:    /// The computed hash code for the storage data.
        -:  217:    llvm::hash_code hashCode;
        -:  218:
        -:  219:    /// A boolean that indicates if this data is a splat or not.
        -:  220:    bool isSplat;
        -:  221:  };
        -:  222:
        -:  223:  /// Compare this storage instance with the provided key.
function _ZNK4mlir6detail30DenseStringElementsAttrStorageeqERKNS1_5KeyTyE called 0 returned 0% blocks executed 0%
    #####:  224:  bool operator==(const KeyTy &key) const {
    #####:  225:    if (key.type != type)
branch  0 never executed
branch  1 never executed
        -:  226:      return false;
        -:  227:
        -:  228:    // Otherwise, we can default to just checking the data. StringRefs compare
        -:  229:    // by contents.
    #####:  230:    return key.data == data;
branch  0 never executed
branch  1 never executed
        -:  231:  }
        -:  232:
        -:  233:  /// Construct a key from a shaped type, StringRef data buffer, and a flag that
        -:  234:  /// signals if the data is already known to be a splat. Callers to this
        -:  235:  /// function are expected to tag preknown splat values when possible, e.g. one
        -:  236:  /// element shapes.
function _ZN4mlir6detail30DenseStringElementsAttrStorage6getKeyENS_10ShapedTypeEN4llvm8ArrayRefINS3_9StringRefEEEb called 0 returned 0% blocks executed 0%
    #####:  237:  static KeyTy getKey(ShapedType ty, ArrayRef<StringRef> data,
        -:  238:                      bool isKnownSplat) {
        -:  239:    // Handle an empty storage instance.
    #####:  240:    if (data.empty())
branch  0 never executed
branch  1 never executed
    #####:  241:      return KeyTy(ty, data, 0);
        -:  242:
        -:  243:    // If the data is already known to be a splat, the key hash value is
        -:  244:    // directly the data buffer.
    #####:  245:    if (isKnownSplat)
branch  0 never executed
branch  1 never executed
    #####:  246:      return KeyTy(ty, data, llvm::hash_value(data.front()), isKnownSplat);
call    0 never executed
        -:  247:
        -:  248:    // Handle the simple case of only one element.
    #####:  249:    assert(ty.getNumElements() != 1 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  250:           "splat of 1 element should already be detected");
        -:  251:
        -:  252:    // Create the initial hash value with just the first element.
    #####:  253:    const auto &firstElt = data.front();
branch  0 never executed
branch  1 never executed
    #####:  254:    auto hashVal = llvm::hash_value(firstElt);
call    0 never executed
        -:  255:
        -:  256:    // Check to see if this storage represents a splat. If it doesn't then
        -:  257:    // combine the hash for the data starting with the first non splat element.
    #####:  258:    for (size_t i = 1, e = data.size(); i != e; i++)
branch  0 never executed
branch  1 never executed
    #####:  259:      if (!firstElt.equals(data[i]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  260:        return KeyTy(ty, data, llvm::hash_combine(hashVal, data.drop_front(i)));
call    0 never executed
call    1 never executed
        -:  261:
        -:  262:    // Otherwise, this is a splat so just return the hash of the first element.
    #####:  263:    return KeyTy(ty, data.take_front(), hashVal, /*isSplat=*/true);
branch  0 never executed
branch  1 never executed
        -:  264:  }
        -:  265:
        -:  266:  /// Hash the key for the storage.
    #####:  267:  static llvm::hash_code hashKey(const KeyTy &key) {
    #####:  268:    return llvm::hash_combine(key.type, key.hashCode);
call    0 never executed
        -:  269:  }
        -:  270:
        -:  271:  /// Construct a new storage instance.
        -:  272:  static DenseStringElementsAttrStorage *
function _ZN4mlir6detail30DenseStringElementsAttrStorage9constructERNS_14StorageUniquer16StorageAllocatorENS1_5KeyTyE called 0 returned 0% blocks executed 0%
    #####:  273:  construct(AttributeStorageAllocator &allocator, KeyTy key) {
        -:  274:    // If the data buffer is non-empty, we copy it into the allocator with a
        -:  275:    // 64-bit alignment.
    #####:  276:    ArrayRef<StringRef> copy, data = key.data;
    #####:  277:    if (data.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  278:      return new (allocator.allocate<DenseStringElementsAttrStorage>())
    #####:  279:          DenseStringElementsAttrStorage(key.type, copy, key.isSplat);
call    0 never executed
        -:  280:    }
        -:  281:
    #####:  282:    int numEntries = key.isSplat ? 1 : data.size();
branch  0 never executed
branch  1 never executed
        -:  283:
        -:  284:    // Compute the amount data needed to store the ArrayRef and StringRef
        -:  285:    // contents.
    #####:  286:    size_t dataSize = sizeof(StringRef) * numEntries;
    #####:  287:    for (int i = 0; i < numEntries; i++)
branch  0 never executed
branch  1 never executed
    #####:  288:      dataSize += data[i].size();
branch  0 never executed
branch  1 never executed
        -:  289:
    #####:  290:    char *rawData = reinterpret_cast<char *>(
call    0 never executed
    #####:  291:        allocator.allocate(dataSize, alignof(uint64_t)));
        -:  292:
        -:  293:    // Setup a mutable array ref of our string refs so that we can update their
        -:  294:    // contents.
    #####:  295:    auto mutableCopy = MutableArrayRef<StringRef>(
    #####:  296:        reinterpret_cast<StringRef *>(rawData), numEntries);
    #####:  297:    auto *stringData = rawData + numEntries * sizeof(StringRef);
        -:  298:
    #####:  299:    for (int i = 0; i < numEntries; i++) {
branch  0 never executed
branch  1 never executed
    #####:  300:      memcpy(stringData, data[i].data(), data[i].size());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  301:      mutableCopy[i] = StringRef(stringData, data[i].size());
branch  0 never executed
branch  1 never executed
    #####:  302:      stringData += data[i].size();
        -:  303:    }
        -:  304:
    #####:  305:    copy =
    #####:  306:        ArrayRef<StringRef>(reinterpret_cast<StringRef *>(rawData), numEntries);
call    0 never executed
        -:  307:
    #####:  308:    return new (allocator.allocate<DenseStringElementsAttrStorage>())
    #####:  309:        DenseStringElementsAttrStorage(key.type, copy, key.isSplat);
call    0 never executed
        -:  310:  }
        -:  311:
        -:  312:  ArrayRef<StringRef> data;
        -:  313:};
        -:  314:
        -:  315://===----------------------------------------------------------------------===//
        -:  316:// StringAttr
        -:  317://===----------------------------------------------------------------------===//
        -:  318:
        -:  319:struct StringAttrStorage : public AttributeStorage {
 45457840:  320:  StringAttrStorage(StringRef value, Type type)
 45457840:  321:      : type(type), value(value), referencedDialect(nullptr) {}
        -:  322:
        -:  323:  /// The hash key is a tuple of the parameter types.
        -:  324:  using KeyTy = std::pair<StringRef, Type>;
function _ZNK4mlir6detail17StringAttrStorageeqERKSt4pairIN4llvm9StringRefENS_4TypeEE called 487837014 returned 100% blocks executed 83%
487837014:  325:  bool operator==(const KeyTy &key) const {
680522985:  326:    return value == key.first && type == key.second;
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  327:  }
237936425:  328:  static ::llvm::hash_code hashKey(const KeyTy &key) {
237936425:  329:    return DenseMapInfo<KeyTy>::getHashValue(key);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  330:  }
        -:  331:
        -:  332:  /// Define a construction method for creating a new instance of this
        -:  333:  /// storage.
function _ZN4mlir6detail17StringAttrStorage9constructERNS_14StorageUniquer16StorageAllocatorERKSt4pairIN4llvm9StringRefENS_4TypeEE called 45457840 returned 100% blocks executed 100%
 45457840:  334:  static StringAttrStorage *construct(AttributeStorageAllocator &allocator,
        -:  335:                                      const KeyTy &key) {
 90915680:  336:    return new (allocator.allocate<StringAttrStorage>())
 45457840:  337:        StringAttrStorage(allocator.copyInto(key.first), key.second);
call    0 returned 100%
call    1 returned 100%
        -:  338:  }
        -:  339:
        -:  340:  /// Initialize the storage given an MLIRContext.
        -:  341:  void initialize(MLIRContext *context);
        -:  342:
        -:  343:  /// The type of the string.
        -:  344:  Type type;
        -:  345:  /// The raw string value.
        -:  346:  StringRef value;
        -:  347:  /// If the string value contains a dialect namespace prefix (e.g.
        -:  348:  /// dialect.blah), this is the dialect referenced.
        -:  349:  Dialect *referencedDialect;
        -:  350:};
        -:  351:
        -:  352:} // namespace detail
        -:  353:} // namespace mlir
        -:  354:
        -:  355:#endif // ATTRIBUTEDETAIL_H_
