        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/LocationSnapshot.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/LocationSnapshot.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/LocationSnapshot.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- LocationSnapshot.cpp - Location Snapshot Utilities -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Transforms/LocationSnapshot.h"
        -:   10:
        -:   11:#include "mlir/IR/AsmState.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/Pass/Pass.h"
        -:   14:#include "mlir/Support/FileUtilities.h"
        -:   15:#include "llvm/Support/FileSystem.h"
        -:   16:#include "llvm/Support/ToolOutputFile.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_LOCATIONSNAPSHOT
        -:   20:#include "mlir/Transforms/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:/// This function generates new locations from the given IR by snapshotting the
        -:   26:/// IR to the given stream, and using the printed locations within that stream.
        -:   27:/// If a 'tag' is non-empty, the generated locations are represented as a
        -:   28:/// NameLoc with the given tag as the name, and then fused with the existing
        -:   29:/// locations. Otherwise, the existing locations are replaced.
function _ZL23generateLocationsFromIRRN4llvm11raw_ostreamENS_9StringRefEPN4mlir9OperationERKNS3_15OpPrintingFlagsES2_ called 496 returned 100% blocks executed 65%
      496:   30:static void generateLocationsFromIR(raw_ostream &os, StringRef fileName,
        -:   31:                                    Operation *op, const OpPrintingFlags &flags,
        -:   32:                                    StringRef tag) {
        -:   33:  // Print the IR to the stream, and collect the raw line+column information.
      496:   34:  AsmState::LocationMap opToLineCol;
call    0 returned 100%
      992:   35:  AsmState state(op, flags, &opToLineCol);
call    0 returned 100%
call    1 returned 100%
      496:   36:  op->print(os, state);
call    0 returned 100%
        -:   37:
      496:   38:  Builder builder(op->getContext());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      496:   39:  Optional<StringAttr> tagIdentifier;
      496:   40:  if (!tag.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:    tagIdentifier = builder.getStringAttr(tag);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   42:
        -:   43:  // Walk and generate new locations for each of the operations.
      496:   44:  StringAttr file = builder.getStringAttr(fileName);
call    0 returned 100%
call    1 returned 100%
function _ZZL23generateLocationsFromIRRN4llvm11raw_ostreamENS_9StringRefEPN4mlir9OperationERKNS3_15OpPrintingFlagsES2_ENKUlS5_E_clES5_ called 394373 returned 100% blocks executed 58%
      496:   45:  op->walk([&](Operation *opIt) {
call    0 returned 100%
call    1 returned 100%
        -:   46:    // Check to see if this operation has a mapped location. Some operations may
        -:   47:    // be elided from the printed form, e.g. the body terminators of some region
        -:   48:    // operations.
   394373:   49:    auto it = opToLineCol.find(opIt);
call    0 returned 100%
   394373:   50:    if (it == opToLineCol.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   394373:   51:      return;
   394373:   52:    const std::pair<unsigned, unsigned> &lineCol = it->second;
call    0 returned 100%
   394373:   53:    auto newLoc = FileLineColLoc::get(file, lineCol.first, lineCol.second);
call    0 returned 100%
        -:   54:
        -:   55:    // If we don't have a tag, set the location directly
  394373*:   56:    if (!tagIdentifier) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   394373:   57:      opIt->setLoc(newLoc);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   394373:   58:      return;
        -:   59:    }
        -:   60:
        -:   61:    // Otherwise, build a fused location with the existing op loc.
    #####:   62:    opIt->setLoc(builder.getFusedLoc(
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   63:        {opIt->getLoc(), NameLoc::get(*tagIdentifier, newLoc)}));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   64:  });
      496:   65:}
        -:   66:
        -:   67:/// This function generates new locations from the given IR by snapshotting the
        -:   68:/// IR to the given file, and using the printed locations within that file. If
        -:   69:/// `filename` is empty, a temporary file is generated instead.
function _ZL23generateLocationsFromIRN4llvm9StringRefEPN4mlir9OperationENS1_15OpPrintingFlagsES0_ called 496 returned 100% blocks executed 47%
      496:   70:static LogicalResult generateLocationsFromIR(StringRef fileName, Operation *op,
        -:   71:                                             OpPrintingFlags flags,
        -:   72:                                             StringRef tag) {
        -:   73:  // If a filename wasn't provided, then generate one.
      496:   74:  SmallString<32> filepath(fileName);
call    0 returned 100%
      496:   75:  if (filepath.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      992:   76:    if (std::error_code error = llvm::sys::fs::createTemporaryFile(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      496:   77:            "mlir_snapshot", "tmp.mlir", filepath)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   78:      return op->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   79:             << "failed to generate temporary file for location snapshot: "
call    0 never executed
    #####:   80:             << error.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   81:    }
        -:   82:  }
        -:   83:
        -:   84:  // Open the output file for emission.
      992:   85:  std::string error;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      496:   86:  std::unique_ptr<llvm::ToolOutputFile> outputFile =
call    0 returned 100%
      992:   87:      openOutputFile(filepath, &error);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      496:   88:  if (!outputFile)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   89:    return op->emitError() << error;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   90:
        -:   91:  // Generate the intermediate locations.
      496:   92:  generateLocationsFromIR(outputFile->os(), filepath, op, flags, tag);
call    0 returned 100%
      496:   93:  outputFile->keep();
      496:   94:  return success();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   95:}
        -:   96:
        -:   97:/// This function generates new locations from the given IR by snapshotting the
        -:   98:/// IR to the given stream, and using the printed locations within that stream.
        -:   99:/// The generated locations replace the current operation locations.
function _ZN4mlir23generateLocationsFromIRERN4llvm11raw_ostreamENS0_9StringRefEPNS_9OperationENS_15OpPrintingFlagsE called 0 returned 0% blocks executed 0%
    #####:  100:void mlir::generateLocationsFromIR(raw_ostream &os, StringRef fileName,
        -:  101:                                   Operation *op, OpPrintingFlags flags) {
    #####:  102:  ::generateLocationsFromIR(os, fileName, op, flags, /*tag=*/StringRef());
call    0 never executed
    #####:  103:}
        -:  104:/// This function generates new locations from the given IR by snapshotting the
        -:  105:/// IR to the given file, and using the printed locations within that file. If
        -:  106:/// `filename` is empty, a temporary file is generated instead.
function _ZN4mlir23generateLocationsFromIREN4llvm9StringRefEPNS_9OperationENS_15OpPrintingFlagsE called 0 returned 0% blocks executed 0%
    #####:  107:LogicalResult mlir::generateLocationsFromIR(StringRef fileName, Operation *op,
        -:  108:                                            OpPrintingFlags flags) {
    #####:  109:  return ::generateLocationsFromIR(fileName, op, flags, /*tag=*/StringRef());
call    0 never executed
        -:  110:}
        -:  111:
        -:  112:/// This function generates new locations from the given IR by snapshotting the
        -:  113:/// IR to the given stream, and using the printed locations within that stream.
        -:  114:/// The generated locations are represented as a NameLoc with the given tag as
        -:  115:/// the name, and then fused with the existing locations.
function _ZN4mlir23generateLocationsFromIRERN4llvm11raw_ostreamENS0_9StringRefES3_PNS_9OperationENS_15OpPrintingFlagsE called 0 returned 0% blocks executed 0%
    #####:  116:void mlir::generateLocationsFromIR(raw_ostream &os, StringRef fileName,
        -:  117:                                   StringRef tag, Operation *op,
        -:  118:                                   OpPrintingFlags flags) {
    #####:  119:  ::generateLocationsFromIR(os, fileName, op, flags, tag);
call    0 never executed
    #####:  120:}
        -:  121:/// This function generates new locations from the given IR by snapshotting the
        -:  122:/// IR to the given file, and using the printed locations within that file. If
        -:  123:/// `filename` is empty, a temporary file is generated instead.
function _ZN4mlir23generateLocationsFromIREN4llvm9StringRefES1_PNS_9OperationENS_15OpPrintingFlagsE called 0 returned 0% blocks executed 0%
    #####:  124:LogicalResult mlir::generateLocationsFromIR(StringRef fileName, StringRef tag,
        -:  125:                                            Operation *op,
        -:  126:                                            OpPrintingFlags flags) {
    #####:  127:  return ::generateLocationsFromIR(fileName, op, flags, tag);
call    0 never executed
        -:  128:}
        -:  129:
        -:  130:namespace {
    #####:  131:struct LocationSnapshotPass
call    0 never executed
        -:  132:    : public impl::LocationSnapshotBase<LocationSnapshotPass> {
   129220:  133:  LocationSnapshotPass() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_120LocationSnapshotPassC2EN4mlir15OpPrintingFlagsEN4llvm9StringRefES4_ called 0 returned 0% blocks executed 0%
    #####:  134:  LocationSnapshotPass(OpPrintingFlags flags, StringRef fileName, StringRef tag)
    #####:  135:      : flags(flags) {
call    0 never executed
    #####:  136:    this->fileName = fileName.str();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  137:    this->tag = tag.str();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  138:  }
        -:  139:
function _ZN12_GLOBAL__N_120LocationSnapshotPass14runOnOperationEv called 496 returned 100% blocks executed 71%
      496:  140:  void runOnOperation() override {
      496:  141:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      496:  142:    if (failed(generateLocationsFromIR(fileName, op, OpPrintingFlags(), tag)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  143:      return signalPassFailure();
call    0 never executed
        -:  144:  }
        -:  145:
        -:  146:  /// The printing flags to use when creating the snapshot.
        -:  147:  OpPrintingFlags flags;
        -:  148:};
        -:  149:} // namespace
        -:  150:
function _ZN4mlir26createLocationSnapshotPassENS_15OpPrintingFlagsEN4llvm9StringRefES2_ called 0 returned 0% blocks executed 0%
    #####:  151:std::unique_ptr<Pass> mlir::createLocationSnapshotPass(OpPrintingFlags flags,
        -:  152:                                                       StringRef fileName,
        -:  153:                                                       StringRef tag) {
    #####:  154:  return std::make_unique<LocationSnapshotPass>(flags, fileName, tag);
call    0 never executed
        -:  155:}
function _ZN4mlir26createLocationSnapshotPassEv called 129220 returned 100% blocks executed 100%
   129220:  156:std::unique_ptr<Pass> mlir::createLocationSnapshotPass() {
   129220:  157:  return std::make_unique<LocationSnapshotPass>();
call    0 returned 100%
        -:  158:}
