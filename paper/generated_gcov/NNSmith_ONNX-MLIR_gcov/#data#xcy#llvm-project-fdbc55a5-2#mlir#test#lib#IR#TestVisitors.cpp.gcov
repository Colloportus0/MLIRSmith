        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/IR/TestVisitors.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestVisitors.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestVisitors.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestIRVisitors.cpp - Pass to test the IR visitors ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinOps.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
function _ZL11printRegionPN4mlir6RegionE called 0 returned 0% blocks executed 0%
    #####:   14:static void printRegion(Region *region) {
    #####:   15:  llvm::outs() << "region " << region->getRegionNumber() << " from operation '"
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   16:               << region->getParentOp()->getName() << "'";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   17:}
        -:   18:
function _ZL10printBlockPN4mlir5BlockE called 0 returned 0% blocks executed 0%
    #####:   19:static void printBlock(Block *block) {
    #####:   20:  llvm::outs() << "block ";
call    0 never executed
call    1 never executed
    #####:   21:  block->printAsOperand(llvm::outs(), /*printType=*/false);
call    0 never executed
call    1 never executed
    #####:   22:  llvm::outs() << " from ";
call    0 never executed
call    1 never executed
    #####:   23:  printRegion(block->getParent());
call    0 never executed
call    1 never executed
    #####:   24:}
        -:   25:
function _ZL14printOperationPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   26:static void printOperation(Operation *op) {
    #####:   27:  llvm::outs() << "op '" << op->getName() << "'";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   28:}
        -:   29:
        -:   30:/// Tests pure callbacks.
function _ZL17testPureCallbacksPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   31:static void testPureCallbacks(Operation *op) {
function _ZZL17testPureCallbacksPN4mlir9OperationEENKUlS1_E_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   32:  auto opPure = [](Operation *op) {
    #####:   33:    llvm::outs() << "Visiting ";
call    0 never executed
call    1 never executed
    #####:   34:    printOperation(op);
call    0 never executed
    #####:   35:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:   36:  };
function _ZZL17testPureCallbacksPN4mlir9OperationEENKUlPNS_5BlockEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   37:  auto blockPure = [](Block *block) {
    #####:   38:    llvm::outs() << "Visiting ";
call    0 never executed
call    1 never executed
    #####:   39:    printBlock(block);
call    0 never executed
    #####:   40:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:   41:  };
function _ZZL17testPureCallbacksPN4mlir9OperationEENKUlPNS_6RegionEE1_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   42:  auto regionPure = [](Region *region) {
    #####:   43:    llvm::outs() << "Visiting ";
call    0 never executed
call    1 never executed
    #####:   44:    printRegion(region);
call    0 never executed
    #####:   45:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:   46:  };
        -:   47:
    #####:   48:  llvm::outs() << "Op pre-order visits"
call    0 never executed
call    1 never executed
    #####:   49:               << "\n";
call    0 never executed
    #####:   50:  op->walk<WalkOrder::PreOrder>(opPure);
call    0 never executed
    #####:   51:  llvm::outs() << "Block pre-order visits"
call    0 never executed
call    1 never executed
    #####:   52:               << "\n";
call    0 never executed
    #####:   53:  op->walk<WalkOrder::PreOrder>(blockPure);
call    0 never executed
    #####:   54:  llvm::outs() << "Region pre-order visits"
call    0 never executed
call    1 never executed
    #####:   55:               << "\n";
call    0 never executed
    #####:   56:  op->walk<WalkOrder::PreOrder>(regionPure);
call    0 never executed
        -:   57:
    #####:   58:  llvm::outs() << "Op post-order visits"
call    0 never executed
call    1 never executed
    #####:   59:               << "\n";
call    0 never executed
    #####:   60:  op->walk<WalkOrder::PostOrder>(opPure);
call    0 never executed
    #####:   61:  llvm::outs() << "Block post-order visits"
call    0 never executed
call    1 never executed
    #####:   62:               << "\n";
call    0 never executed
    #####:   63:  op->walk<WalkOrder::PostOrder>(blockPure);
call    0 never executed
    #####:   64:  llvm::outs() << "Region post-order visits"
call    0 never executed
call    1 never executed
    #####:   65:               << "\n";
call    0 never executed
    #####:   66:  op->walk<WalkOrder::PostOrder>(regionPure);
call    0 never executed
    #####:   67:}
        -:   68:
        -:   69:/// Tests erasure callbacks that skip the walk.
function _ZL24testSkipErasureCallbacksPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   70:static void testSkipErasureCallbacks(Operation *op) {
function _ZZL24testSkipErasureCallbacksPN4mlir9OperationEENKUlS1_E_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   71:  auto skipOpErasure = [](Operation *op) {
        -:   72:    // Do not erase module and module children operations. Otherwise, there
        -:   73:    // wouldn't be too much to test in pre-order.
    #####:   74:    if (isa<ModuleOp>(op) || isa<ModuleOp>(op->getParentOp()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:   75:      return WalkResult::advance();
        -:   76:
    #####:   77:    llvm::outs() << "Erasing ";
call    0 never executed
call    1 never executed
    #####:   78:    printOperation(op);
call    0 never executed
    #####:   79:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:   80:    op->dropAllUses();
call    0 never executed
    #####:   81:    op->erase();
call    0 never executed
    #####:   82:    return WalkResult::skip();
        -:   83:  };
function _ZZL24testSkipErasureCallbacksPN4mlir9OperationEENKUlPNS_5BlockEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   84:  auto skipBlockErasure = [](Block *block) {
        -:   85:    // Do not erase module and module children blocks. Otherwise there wouldn't
        -:   86:    // be too much to test in pre-order.
    #####:   87:    Operation *parentOp = block->getParentOp();
call    0 never executed
    #####:   88:    if (isa<ModuleOp>(parentOp) || isa<ModuleOp>(parentOp->getParentOp()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:   89:      return WalkResult::advance();
        -:   90:
    #####:   91:    llvm::outs() << "Erasing ";
call    0 never executed
call    1 never executed
    #####:   92:    printBlock(block);
call    0 never executed
    #####:   93:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:   94:    block->erase();
call    0 never executed
    #####:   95:    return WalkResult::skip();
        -:   96:  };
        -:   97:
    #####:   98:  llvm::outs() << "Op pre-order erasures (skip)"
call    0 never executed
call    1 never executed
    #####:   99:               << "\n";
call    0 never executed
    #####:  100:  Operation *cloned = op->clone();
call    0 never executed
call    1 never executed
    #####:  101:  cloned->walk<WalkOrder::PreOrder>(skipOpErasure);
call    0 never executed
    #####:  102:  cloned->erase();
call    0 never executed
        -:  103:
    #####:  104:  llvm::outs() << "Block pre-order erasures (skip)"
call    0 never executed
call    1 never executed
    #####:  105:               << "\n";
call    0 never executed
    #####:  106:  cloned = op->clone();
call    0 never executed
call    1 never executed
    #####:  107:  cloned->walk<WalkOrder::PreOrder>(skipBlockErasure);
call    0 never executed
    #####:  108:  cloned->erase();
call    0 never executed
        -:  109:
    #####:  110:  llvm::outs() << "Op post-order erasures (skip)"
call    0 never executed
call    1 never executed
    #####:  111:               << "\n";
call    0 never executed
    #####:  112:  cloned = op->clone();
call    0 never executed
call    1 never executed
    #####:  113:  cloned->walk<WalkOrder::PostOrder>(skipOpErasure);
call    0 never executed
    #####:  114:  cloned->erase();
call    0 never executed
        -:  115:
    #####:  116:  llvm::outs() << "Block post-order erasures (skip)"
call    0 never executed
call    1 never executed
    #####:  117:               << "\n";
call    0 never executed
    #####:  118:  cloned = op->clone();
call    0 never executed
call    1 never executed
    #####:  119:  cloned->walk<WalkOrder::PostOrder>(skipBlockErasure);
call    0 never executed
    #####:  120:  cloned->erase();
call    0 never executed
    #####:  121:}
        -:  122:
        -:  123:/// Tests callbacks that erase the op or block but don't return 'Skip'. This
        -:  124:/// callbacks are only valid in post-order.
function _ZL26testNoSkipErasureCallbacksPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  125:static void testNoSkipErasureCallbacks(Operation *op) {
function _ZZL26testNoSkipErasureCallbacksPN4mlir9OperationEENKUlS1_E_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  126:  auto noSkipOpErasure = [](Operation *op) {
    #####:  127:    llvm::outs() << "Erasing ";
call    0 never executed
call    1 never executed
    #####:  128:    printOperation(op);
call    0 never executed
    #####:  129:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:  130:    op->dropAllUses();
call    0 never executed
    #####:  131:    op->erase();
call    0 never executed
    #####:  132:  };
function _ZZL26testNoSkipErasureCallbacksPN4mlir9OperationEENKUlPNS_5BlockEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  133:  auto noSkipBlockErasure = [](Block *block) {
    #####:  134:    llvm::outs() << "Erasing ";
call    0 never executed
call    1 never executed
    #####:  135:    printBlock(block);
call    0 never executed
    #####:  136:    llvm::outs() << "\n";
call    0 never executed
call    1 never executed
    #####:  137:    block->erase();
call    0 never executed
    #####:  138:  };
        -:  139:
    #####:  140:  llvm::outs() << "Op post-order erasures (no skip)"
call    0 never executed
call    1 never executed
    #####:  141:               << "\n";
call    0 never executed
    #####:  142:  Operation *cloned = op->clone();
call    0 never executed
call    1 never executed
    #####:  143:  cloned->walk<WalkOrder::PostOrder>(noSkipOpErasure);
call    0 never executed
        -:  144:
    #####:  145:  llvm::outs() << "Block post-order erasures (no skip)"
call    0 never executed
call    1 never executed
    #####:  146:               << "\n";
call    0 never executed
    #####:  147:  cloned = op->clone();
call    0 never executed
call    1 never executed
    #####:  148:  cloned->walk<WalkOrder::PostOrder>(noSkipBlockErasure);
call    0 never executed
    #####:  149:  cloned->erase();
call    0 never executed
    #####:  150:}
        -:  151:
        -:  152:namespace {
        -:  153:/// This pass exercises the different configurations of the IR visitors.
  128637*:  154:struct TestIRVisitorsPass
call    0 never executed
call    1 returned 100%
        -:  155:    : public PassWrapper<TestIRVisitorsPass, OperationPass<>> {
function _ZN12_GLOBAL__N_118TestIRVisitorsPass13resolveTypeIDEv called 128637 returned 100% blocks executed 100%
   128637:  156:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestIRVisitorsPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  157:
function _ZNK12_GLOBAL__N_118TestIRVisitorsPass11getArgumentEv called 128637 returned 100% blocks executed 100%
   128637:  158:  StringRef getArgument() const final { return "test-ir-visitors"; }
function _ZNK12_GLOBAL__N_118TestIRVisitorsPass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:  159:  StringRef getDescription() const final { return "Test various visitors."; }
function _ZN12_GLOBAL__N_118TestIRVisitorsPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  160:  void runOnOperation() override {
    #####:  161:    Operation *op = getOperation();
branch  0 never executed
branch  1 never executed
    #####:  162:    testPureCallbacks(op);
call    0 never executed
    #####:  163:    testSkipErasureCallbacks(op);
call    0 never executed
    #####:  164:    testNoSkipErasureCallbacks(op);
call    0 never executed
    #####:  165:  }
        -:  166:};
        -:  167:} // namespace
        -:  168:
        -:  169:namespace mlir {
        -:  170:namespace test {
function _ZN4mlir4test26registerTestIRVisitorsPassEv called 128637 returned 100% blocks executed 100%
   128637:  171:void registerTestIRVisitorsPass() { PassRegistration<TestIRVisitorsPass>(); }
call    0 returned 100%
        -:  172:} // namespace test
        -:  173:} // namespace mlir
