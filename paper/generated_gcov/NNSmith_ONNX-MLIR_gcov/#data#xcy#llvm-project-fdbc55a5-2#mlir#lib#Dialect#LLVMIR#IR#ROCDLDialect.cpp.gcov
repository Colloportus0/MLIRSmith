        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/LLVMIR/IR/ROCDLDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/LLVMIR/CMakeFiles/obj.MLIRROCDLDialect.dir/IR/ROCDLDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/LLVMIR/CMakeFiles/obj.MLIRROCDLDialect.dir/IR/ROCDLDialect.cpp.gcda
        -:    0:Runs:128628
        -:    1://===- ROCDLDialect.cpp - ROCDL IR Ops and Dialect registration -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the types and operation details for the ROCDL IR dialect in
        -:   10:// MLIR, and the LLVM IR dialect.  It also registers the dialect.
        -:   11://
        -:   12:// The ROCDL dialect only contains GPU specific additions on top of the general
        -:   13:// LLVM dialect.
        -:   14://
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:#include "mlir/Dialect/LLVMIR/ROCDLDialect.h"
        -:   18:
        -:   19:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   20:#include "mlir/IR/Builders.h"
        -:   21:#include "mlir/IR/BuiltinTypes.h"
        -:   22:#include "mlir/IR/MLIRContext.h"
        -:   23:#include "mlir/IR/Operation.h"
        -:   24:#include "llvm/AsmParser/Parser.h"
        -:   25:#include "llvm/IR/Attributes.h"
        -:   26:#include "llvm/IR/Function.h"
        -:   27:#include "llvm/IR/Type.h"
        -:   28:#include "llvm/Support/SourceMgr.h"
        -:   29:
        -:   30:using namespace mlir;
        -:   31:using namespace ROCDL;
        -:   32:
        -:   33:#include "mlir/Dialect/LLVMIR/ROCDLOpsDialect.cpp.inc"
        -:   34:
        -:   35://===----------------------------------------------------------------------===//
        -:   36:// Parsing for ROCDL ops
        -:   37://===----------------------------------------------------------------------===//
        -:   38:
        -:   39:// <operation> ::=
        -:   40://     `llvm.amdgcn.buffer.load.* %rsrc, %vindex, %offset, %glc, %slc :
        -:   41://     result_type`
function _ZN4mlir5ROCDL11MubufLoadOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:   42:ParseResult MubufLoadOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:   43:  SmallVector<OpAsmParser::UnresolvedOperand, 8> ops;
call    0 never executed
    #####:   44:  Type type;
    #####:   45:  if (parser.parseOperandList(ops, 5) || parser.parseColonType(type) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   46:      parser.addTypeToList(type, result.types))
call    0 never executed
call    1 never executed
    #####:   47:    return failure();
        -:   48:
    #####:   49:  MLIRContext *context = parser.getContext();
call    0 never executed
    #####:   50:  auto int32Ty = IntegerType::get(context, 32);
call    0 never executed
    #####:   51:  auto int1Ty = IntegerType::get(context, 1);
call    0 never executed
    #####:   52:  auto i32x4Ty = LLVM::getFixedVectorType(int32Ty, 4);
call    0 never executed
    #####:   53:  return parser.resolveOperands(ops,
        -:   54:                                {i32x4Ty, int32Ty, int32Ty, int1Ty, int1Ty},
    #####:   55:                                parser.getNameLoc(), result.operands);
call    0 never executed
call    1 never executed
        -:   56:}
        -:   57:
function _ZN4mlir5ROCDL11MubufLoadOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   58:void MubufLoadOp::print(OpAsmPrinter &p) {
    #####:   59:  p << " " << getOperands() << " : " << (*this)->getResultTypes();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:   60:}
        -:   61:
        -:   62:// <operation> ::=
        -:   63://     `llvm.amdgcn.buffer.store.* %vdata, %rsrc, %vindex, %offset, %glc, %slc :
        -:   64://     result_type`
function _ZN4mlir5ROCDL12MubufStoreOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:   65:ParseResult MubufStoreOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:   66:  SmallVector<OpAsmParser::UnresolvedOperand, 8> ops;
call    0 never executed
    #####:   67:  Type type;
    #####:   68:  if (parser.parseOperandList(ops, 6) || parser.parseColonType(type))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   69:    return failure();
        -:   70:
    #####:   71:  MLIRContext *context = parser.getContext();
call    0 never executed
    #####:   72:  auto int32Ty = IntegerType::get(context, 32);
call    0 never executed
    #####:   73:  auto int1Ty = IntegerType::get(context, 1);
call    0 never executed
    #####:   74:  auto i32x4Ty = LLVM::getFixedVectorType(int32Ty, 4);
call    0 never executed
        -:   75:
    #####:   76:  if (parser.resolveOperands(ops,
branch  0 never executed
branch  1 never executed
        -:   77:                             {type, i32x4Ty, int32Ty, int32Ty, int1Ty, int1Ty},
    #####:   78:                             parser.getNameLoc(), result.operands))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:    return failure();
    #####:   80:  return success();
        -:   81:}
        -:   82:
function _ZN4mlir5ROCDL12MubufStoreOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   83:void MubufStoreOp::print(OpAsmPrinter &p) {
    #####:   84:  p << " " << getOperands() << " : " << getVdata().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   85:}
        -:   86:
        -:   87:// <operation> ::=
        -:   88://     `llvm.amdgcn.raw.buffer.load.* %rsrc, %offset, %soffset, %aux
        -:   89://     : result_type`
function _ZN4mlir5ROCDL15RawBufferLoadOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:   90:ParseResult RawBufferLoadOp::parse(OpAsmParser &parser,
        -:   91:                                   OperationState &result) {
    #####:   92:  SmallVector<OpAsmParser::UnresolvedOperand, 4> ops;
call    0 never executed
    #####:   93:  Type type;
    #####:   94:  if (parser.parseOperandList(ops, 4) || parser.parseColonType(type) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   95:      parser.addTypeToList(type, result.types))
call    0 never executed
call    1 never executed
    #####:   96:    return failure();
        -:   97:
    #####:   98:  auto bldr = parser.getBuilder();
call    0 never executed
    #####:   99:  auto int32Ty = bldr.getI32Type();
call    0 never executed
    #####:  100:  auto i32x4Ty = VectorType::get({4}, int32Ty);
call    0 never executed
    #####:  101:  return parser.resolveOperands(ops, {i32x4Ty, int32Ty, int32Ty, int32Ty},
    #####:  102:                                parser.getNameLoc(), result.operands);
call    0 never executed
call    1 never executed
        -:  103:}
        -:  104:
function _ZN4mlir5ROCDL15RawBufferLoadOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  105:void RawBufferLoadOp::print(OpAsmPrinter &p) {
    #####:  106:  p << " " << getOperands() << " : " << getRes().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  107:}
        -:  108:
        -:  109:// <operation> ::=
        -:  110://     `llvm.amdgcn.raw.buffer.store.* %vdata, %rsrc,  %offset,
        -:  111://     %soffset, %aux : result_type`
function _ZN4mlir5ROCDL16RawBufferStoreOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  112:ParseResult RawBufferStoreOp::parse(OpAsmParser &parser,
        -:  113:                                    OperationState &result) {
    #####:  114:  SmallVector<OpAsmParser::UnresolvedOperand, 5> ops;
call    0 never executed
    #####:  115:  Type type;
    #####:  116:  if (parser.parseOperandList(ops, 5) || parser.parseColonType(type))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  117:    return failure();
        -:  118:
    #####:  119:  auto bldr = parser.getBuilder();
call    0 never executed
    #####:  120:  auto int32Ty = bldr.getI32Type();
call    0 never executed
    #####:  121:  auto i32x4Ty = VectorType::get({4}, int32Ty);
call    0 never executed
        -:  122:
    #####:  123:  if (parser.resolveOperands(ops, {type, i32x4Ty, int32Ty, int32Ty, int32Ty},
branch  0 never executed
branch  1 never executed
    #####:  124:                             parser.getNameLoc(), result.operands))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  125:    return failure();
    #####:  126:  return success();
        -:  127:}
        -:  128:
function _ZN4mlir5ROCDL16RawBufferStoreOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  129:void RawBufferStoreOp::print(OpAsmPrinter &p) {
    #####:  130:  p << " " << getOperands() << " : " << getVdata().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  131:}
        -:  132:
        -:  133:// <operation> ::=
        -:  134://     `llvm.amdgcn.raw.buffer.atomic.fadd.* %vdata, %rsrc,  %offset,
        -:  135://     %soffset, %aux : result_type`
function _ZN4mlir5ROCDL21RawBufferAtomicFAddOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  136:ParseResult RawBufferAtomicFAddOp::parse(OpAsmParser &parser,
        -:  137:                                         OperationState &result) {
    #####:  138:  SmallVector<OpAsmParser::UnresolvedOperand, 5> ops;
call    0 never executed
    #####:  139:  Type type;
    #####:  140:  if (parser.parseOperandList(ops, 5) || parser.parseColonType(type))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  141:    return failure();
        -:  142:
    #####:  143:  auto bldr = parser.getBuilder();
call    0 never executed
    #####:  144:  auto int32Ty = bldr.getI32Type();
call    0 never executed
    #####:  145:  auto i32x4Ty = VectorType::get({4}, int32Ty);
call    0 never executed
        -:  146:
    #####:  147:  if (parser.resolveOperands(ops, {type, i32x4Ty, int32Ty, int32Ty, int32Ty},
branch  0 never executed
branch  1 never executed
    #####:  148:                             parser.getNameLoc(), result.operands))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  149:    return failure();
    #####:  150:  return success();
        -:  151:}
        -:  152:
function _ZN4mlir5ROCDL21RawBufferAtomicFAddOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  153:void RawBufferAtomicFAddOp::print(mlir::OpAsmPrinter &p) {
    #####:  154:  p << " " << getOperands() << " : " << getVdata().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  155:}
        -:  156:
        -:  157://===----------------------------------------------------------------------===//
        -:  158:// ROCDLDialect initialization, type parsing, and registration.
        -:  159://===----------------------------------------------------------------------===//
        -:  160:
        -:  161:// TODO: This should be the llvm.rocdl dialect once this is supported.
function _ZN4mlir5ROCDL12ROCDLDialect10initializeEv called 0 returned 0% blocks executed 0%
    1226*:  162:void ROCDLDialect::initialize() {
    1226*:  163:  addOperations<
        -:  164:#define GET_OP_LIST
        -:  165:#include "mlir/Dialect/LLVMIR/ROCDLOps.cpp.inc"
    1226*:  166:      >();
call    0 never executed
call    1 returned 100%
        -:  167:
        -:  168:  // Support unknown operations because not all ROCDL operations are registered.
    1226*:  169:  allowUnknownOperations();
    #####:  170:}
        -:  171:
function _ZN4mlir5ROCDL12ROCDLDialect24verifyOperationAttributeEPNS_9OperationENS_14NamedAttributeE called 0 returned 0% blocks executed 0%
    #####:  172:LogicalResult ROCDLDialect::verifyOperationAttribute(Operation *op,
        -:  173:                                                     NamedAttribute attr) {
        -:  174:  // Kernel function attribute should be attached to functions.
    #####:  175:  if (attr.getName() == ROCDLDialect::getKernelFuncAttrName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  176:    if (!isa<LLVM::LLVMFuncOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  177:      return op->emitError() << "'" << ROCDLDialect::getKernelFuncAttrName()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  178:                             << "' attribute attached to unexpected op";
call    0 never executed
        -:  179:    }
        -:  180:  }
    #####:  181:  return success();
        -:  182:}
        -:  183:
        -:  184:#define GET_OP_CLASSES
        -:  185:#include "mlir/Dialect/LLVMIR/ROCDLOps.cpp.inc"
