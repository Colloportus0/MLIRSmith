        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Interfaces/SideEffectInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRSideEffectInterfaces.dir/SideEffectInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRSideEffectInterfaces.dir/SideEffectInterfaces.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- SideEffectInterfaces.cpp - SideEffects in MLIR ---------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   10:
        -:   11:#include "llvm/ADT/SmallPtrSet.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15://===----------------------------------------------------------------------===//
        -:   16:// SideEffect Interfaces
        -:   17://===----------------------------------------------------------------------===//
        -:   18:
        -:   19:/// Include the definitions of the side effect interfaces.
        -:   20:#include "mlir/Interfaces/SideEffectInterfaces.cpp.inc"
        -:   21:
        -:   22://===----------------------------------------------------------------------===//
        -:   23:// MemoryEffects
        -:   24://===----------------------------------------------------------------------===//
        -:   25:
function _ZN4mlir13MemoryEffects6Effect7classofEPKNS_11SideEffects6EffectE called 0 returned 0% blocks executed 0%
    #####:   26:bool MemoryEffects::Effect::classof(const SideEffects::Effect *effect) {
    #####:   27:  return isa<Allocate, Free, Read, Write>(effect);
call    0 never executed
        -:   28:}
        -:   29:
        -:   30://===----------------------------------------------------------------------===//
        -:   31:// SideEffect Utilities
        -:   32://===----------------------------------------------------------------------===//
        -:   33:
function _ZN4mlir17isOpTriviallyDeadEPNS_9OperationE called 21806306 returned 100% blocks executed 100%
 21806306:   34:bool mlir::isOpTriviallyDead(Operation *op) {
 43612612:   35:  return op->use_empty() && wouldOpBeTriviallyDead(op);
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
call    4 returned 100%
branch  5 taken 81% (fallthrough)
branch  6 taken 19%
        -:   36:}
        -:   37:
        -:   38:/// Internal implementation of `mlir::wouldOpBeTriviallyDead` that also
        -:   39:/// considers terminator operations as dead if they have no side effects. This
        -:   40:/// allows for marking region operations as trivially dead without always being
        -:   41:/// conservative of terminators.
function _ZL26wouldOpBeTriviallyDeadImplPN4mlir9OperationE called 20443774 returned 100% blocks executed 67%
 20443774:   42:static bool wouldOpBeTriviallyDeadImpl(Operation *rootOp) {
        -:   43:  // The set of operations to consider when checking for side effects.
 20443774:   44:  SmallVector<Operation *, 1> effectingOps(1, rootOp);
call    0 returned 100%
 35692436:   45:  while (!effectingOps.empty()) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
 20443774:   46:    Operation *op = effectingOps.pop_back_val();
call    0 returned 100%
        -:   47:
        -:   48:    // If the operation has recursive effects, push all of the nested operations
        -:   49:    // on to the stack to consider.
 20443774:   50:    bool hasRecursiveEffects =
call    0 returned 100%
 20443774:   51:        op->hasTrait<OpTrait::HasRecursiveMemoryEffects>();
 20443774:   52:    if (hasRecursiveEffects) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:      for (Region &region : op->getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   54:        for (auto &block : region) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:          for (auto &nestedOp : block)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   56:            effectingOps.push_back(&nestedOp);
call    0 never executed
        -:   57:        }
        -:   58:      }
        -:   59:    }
        -:   60:
        -:   61:    // If the op has memory effects, try to characterize them to see if the op
        -:   62:    // is trivially dead here.
 20443774:   63:    if (auto effectInterface = dyn_cast<MemoryEffectOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
        -:   64:      // Check to see if this op either has no effects, or only allocates/reads
        -:   65:      // memory.
 17441853:   66:      SmallVector<MemoryEffects::EffectInstance, 1> effects;
call    0 returned 100%
 17441853:   67:      effectInterface.getEffects(effects);
call    0 returned 100%
        -:   68:
        -:   69:      // Gather all results of this op that are allocated.
 17441853:   70:      SmallPtrSet<Value, 4> allocResults;
call    0 returned 100%
 20712516:   71:      for (const MemoryEffects::EffectInstance &it : effects)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
  3466567:   72:        if (isa<MemoryEffects::Allocate>(it.getEffect()) && it.getValue() &&
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
  3270663:   73:            it.getValue().getDefiningOp() == op)
call    0 returned 100%
   195904:   74:          allocResults.insert(it.getValue());
branch  0 taken 100%
branch  1 taken 0%
call    2 returned 100%
        -:   75:
function _ZZL26wouldOpBeTriviallyDeadImplPN4mlir9OperationEENKUlRKNS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEE_clES8_.isra.0 called 3270663 returned 100% blocks executed 100%
 17441853:   76:      if (!llvm::all_of(effects, [&allocResults](
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
  3270663:   77:                                     const MemoryEffects::EffectInstance &it) {
        -:   78:            // We can drop effects if the value is an allocation and is a result
        -:   79:            // of the operation.
  6541326:   80:            if (allocResults.contains(it.getValue()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
        -:   81:              return true;
        -:   82:            // Otherwise, the effect must be a read.
  3172711:   83:            return isa<MemoryEffects::Read>(it.getEffect());
call    0 returned 100%
        -:   84:          })) {
  2193191:   85:        return false;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   86:      }
 15248662:   87:      continue;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   88:
        -:   89:      // Otherwise, if the op has recursive side effects we can treat the
        -:   90:      // operation itself as having no effects.
        -:   91:    }
 3001921*:   92:    if (hasRecursiveEffects)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:      continue;
        -:   94:
        -:   95:    // If there were no effect interfaces, we treat this op as conservatively
        -:   96:    // having effects.
        -:   97:    return false;
        -:   98:  }
        -:   99:
        -:  100:  // If we get here, none of the operations had effects that prevented marking
        -:  101:  // 'op' as dead.
        -:  102:  return true;
        -:  103:}
        -:  104:
        -:  105:template <typename EffectTy>
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
    #####:  108:  if (!memOp)
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
    #####:  117:    if (value && effect.getValue() != value)
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
    #####:  120:    if (!hasSingleEffectOnVal)
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects5WriteEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects5WriteEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
branch  0 never executed
branch  1 never executed
    #####:  117:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 never executed
    #####:  120:    if (!hasSingleEffectOnVal)
branch  0 never executed
branch  1 never executed
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects4ReadEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects4ReadEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
branch  0 never executed
branch  1 never executed
    #####:  117:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 never executed
    #####:  120:    if (!hasSingleEffectOnVal)
branch  0 never executed
branch  1 never executed
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects4FreeEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects4FreeEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
branch  0 never executed
branch  1 never executed
    #####:  117:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 never executed
    #####:  120:    if (!hasSingleEffectOnVal)
branch  0 never executed
branch  1 never executed
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects8AllocateEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects8AllocateEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
branch  0 never executed
branch  1 never executed
    #####:  117:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 never executed
    #####:  120:    if (!hasSingleEffectOnVal)
branch  0 never executed
branch  1 never executed
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
        -:  125:
        -:  126:template bool mlir::hasSingleEffect<MemoryEffects::Allocate>(Operation *,
        -:  127:                                                             Value);
        -:  128:template bool mlir::hasSingleEffect<MemoryEffects::Free>(Operation *, Value);
        -:  129:template bool mlir::hasSingleEffect<MemoryEffects::Read>(Operation *, Value);
        -:  130:template bool mlir::hasSingleEffect<MemoryEffects::Write>(Operation *, Value);
        -:  131:
        -:  132:template <typename... EffectTys>
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
    #####:  135:  if (!memOp)
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
    #####:  140:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:  141:      return false;
    #####:  142:    return isa<EffectTys...>(effect.getEffect());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteENS1_4FreeEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteENS1_4FreeEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects4ReadEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects4ReadEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects4FreeEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects4FreeEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects8AllocateEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects8AllocateEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
        -:  145:template bool mlir::hasEffect<MemoryEffects::Allocate>(Operation *, Value);
        -:  146:template bool mlir::hasEffect<MemoryEffects::Free>(Operation *, Value);
        -:  147:template bool mlir::hasEffect<MemoryEffects::Read>(Operation *, Value);
        -:  148:template bool mlir::hasEffect<MemoryEffects::Write>(Operation *, Value);
        -:  149:template bool
        -:  150:mlir::hasEffect<MemoryEffects::Write, MemoryEffects::Free>(Operation *, Value);
        -:  151:
function _ZN4mlir22wouldOpBeTriviallyDeadEPNS_9OperationE called 23390165 returned 100% blocks executed 100%
 23390165:  152:bool mlir::wouldOpBeTriviallyDead(Operation *op) {
 23390165:  153:  if (op->mightHaveTrait<OpTrait::IsTerminator>())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
        -:  154:    return false;
 20443774:  155:  return wouldOpBeTriviallyDeadImpl(op);
call    0 returned 100%
        -:  156:}
