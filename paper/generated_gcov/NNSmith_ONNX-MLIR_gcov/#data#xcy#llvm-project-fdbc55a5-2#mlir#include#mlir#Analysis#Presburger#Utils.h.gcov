        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/Analysis/Presburger/Utils.h
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcda
        -:    0:Runs:128654
        -:    1://===- Utils.h - General utilities for Presburger library ------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Utility functions required by the Presburger Library.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_ANALYSIS_PRESBURGER_UTILS_H
        -:   14:#define MLIR_ANALYSIS_PRESBURGER_UTILS_H
        -:   15:
        -:   16:#include "mlir/Analysis/Presburger/MPInt.h"
        -:   17:#include "mlir/Support/LLVM.h"
        -:   18:#include "llvm/ADT/STLExtras.h"
        -:   19:#include "llvm/ADT/SmallBitVector.h"
        -:   20:
        -:   21:#include "mlir/Analysis/Presburger/Matrix.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:namespace presburger {
        -:   25:
        -:   26:class IntegerRelation;
        -:   27:
        -:   28:/// This class represents the result of operations optimizing something subject
        -:   29:/// to some constraints. If the constraints were not satisfiable the, kind will
        -:   30:/// be Empty. If the optimum is unbounded, the kind is Unbounded, and if the
        -:   31:/// optimum is bounded, the kind will be Bounded and `optimum` holds the optimal
        -:   32:/// value.
        -:   33:enum class OptimumKind { Empty, Unbounded, Bounded };
        -:   34:template <typename T>
        -:   35:class MaybeOptimum {
        -:   36:public:
        -:   37:private:
        -:   38:  OptimumKind kind = OptimumKind::Empty;
        -:   39:  T optimum;
        -:   40:
        -:   41:public:
        -:   42:  MaybeOptimum() = default;
        -:   43:  MaybeOptimum(OptimumKind kind) : kind(kind) {
        -:   44:    assert(kind != OptimumKind::Bounded &&
        -:   45:           "Bounded optima should be constructed by specifying the optimum!");
        -:   46:  }
        -:   47:  MaybeOptimum(const T &optimum)
        -:   48:      : kind(OptimumKind::Bounded), optimum(optimum) {}
        -:   49:
        -:   50:  OptimumKind getKind() const { return kind; }
        -:   51:  bool isBounded() const { return kind == OptimumKind::Bounded; }
        -:   52:  bool isUnbounded() const { return kind == OptimumKind::Unbounded; }
        -:   53:  bool isEmpty() const { return kind == OptimumKind::Empty; }
        -:   54:
        -:   55:  Optional<T> getOptimumIfBounded() const { return optimum; }
        -:   56:  const T &getBoundedOptimum() const {
        -:   57:    assert(kind == OptimumKind::Bounded &&
        -:   58:           "This should be called only for bounded optima");
        -:   59:    return optimum;
        -:   60:  }
        -:   61:  T &getBoundedOptimum() {
        -:   62:    assert(kind == OptimumKind::Bounded &&
        -:   63:           "This should be called only for bounded optima");
        -:   64:    return optimum;
        -:   65:  }
        -:   66:  const T &operator*() const { return getBoundedOptimum(); }
        -:   67:  T &operator*() { return getBoundedOptimum(); }
        -:   68:  const T *operator->() const { return &getBoundedOptimum(); }
        -:   69:  T *operator->() { return &getBoundedOptimum(); }
        -:   70:  bool operator==(const MaybeOptimum<T> &other) const {
        -:   71:    if (kind != other.kind)
        -:   72:      return false;
        -:   73:    if (kind != OptimumKind::Bounded)
        -:   74:      return true;
        -:   75:    return optimum == other.optimum;
        -:   76:  }
        -:   77:
        -:   78:  // Given f that takes a T and returns a U, convert this `MaybeOptimum<T>` to
        -:   79:  // a `MaybeOptimum<U>` by applying `f` to the bounded optimum if it exists, or
        -:   80:  // returning a MaybeOptimum of the same kind otherwise.
        -:   81:  template <class Function>
        -:   82:  auto map(const Function &f) const & -> MaybeOptimum<decltype(f(optimum))> {
        -:   83:    if (kind == OptimumKind::Bounded)
        -:   84:      return f(optimum);
        -:   85:    return kind;
        -:   86:  }
        -:   87:};
        -:   88:
        -:   89:/// `ReprKind` enum is used to set the constraint type in `MaybeLocalRepr`.
        -:   90:enum class ReprKind { Inequality, Equality, None };
        -:   91:
        -:   92:/// `MaybeLocalRepr` contains the indices of the constraints that can be
        -:   93:/// expressed as a floordiv of an affine function. If it's an `equality`
        -:   94:/// constraint, `equalityIdx` is set, in case of `inequality` the
        -:   95:/// `lowerBoundIdx` and `upperBoundIdx` is set. By default the kind attribute is
        -:   96:/// set to None.
        -:   97:struct MaybeLocalRepr {
        -:   98:  ReprKind kind = ReprKind::None;
        -:   99:  explicit operator bool() const { return kind != ReprKind::None; }
        -:  100:  union {
        -:  101:    unsigned equalityIdx;
        -:  102:    struct {
        -:  103:      unsigned lowerBoundIdx, upperBoundIdx;
        -:  104:    } inequalityPair;
        -:  105:  } repr;
        -:  106:};
        -:  107:
        -:  108:/// Class storing division representation of local variables of a constraint
        -:  109:/// system. The coefficients of the dividends are stored in order:
        -:  110:/// [nonLocalVars, localVars, constant]. Each local variable may or may not have
        -:  111:/// a representation. If the local does not have a representation, the dividend
        -:  112:/// of the division has no meaning and the denominator is zero. If it has a
        -:  113:/// representation, the denominator will be positive.
        -:  114:///
        -:  115:/// The i^th division here, represents the division representation of the
        -:  116:/// variable at position `divOffset + i` in the constraint system.
        -:  117:class DivisionRepr {
        -:  118:public:
        -:  119:  DivisionRepr(unsigned numVars, unsigned numDivs)
        -:  120:      : dividends(numDivs, numVars + 1), denoms(numDivs, MPInt(0)) {}
        -:  121:
        -:  122:  DivisionRepr(unsigned numVars) : dividends(0, numVars + 1) {}
        -:  123:
    #####:  124:  unsigned getNumVars() const { return dividends.getNumColumns() - 1; }
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  125:  unsigned getNumDivs() const { return dividends.getNumRows(); }
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  126:  unsigned getNumNonDivs() const { return getNumVars() - getNumDivs(); }
branch  0 never executed
branch  1 never executed
        -:  127:  // Get the offset from where division variables start.
    #####:  128:  unsigned getDivOffset() const { return getNumVars() - getNumDivs(); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  129:
        -:  130:  // Check whether the `i^th` division has a division representation or not.
        -:  131:  bool hasRepr(unsigned i) const { return denoms[i] != 0; }
        -:  132:  // Check whether all the divisions have a division representation or not.
    #####:  133:  bool hasAllReprs() const { return !llvm::is_contained(denoms, 0); }
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  134:
        -:  135:  // Clear the division representation of the i^th local variable.
        -:  136:  void clearRepr(unsigned i) { denoms[i] = 0; }
        -:  137:
        -:  138:  // Get the dividend of the `i^th` division.
    #####:  139:  MutableArrayRef<MPInt> getDividend(unsigned i) { return dividends.getRow(i); }
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  140:  ArrayRef<MPInt> getDividend(unsigned i) const { return dividends.getRow(i); }
call    0 never executed
call    1 never executed
        -:  141:
        -:  142:  // For a given point containing values for each variable other than the
        -:  143:  // division variables, try to find the values for each division variable from
        -:  144:  // their division representation.
        -:  145:  SmallVector<Optional<MPInt>, 4> divValuesAt(ArrayRef<MPInt> point) const;
        -:  146:
        -:  147:  // Get the `i^th` denominator.
    #####:  148:  MPInt &getDenom(unsigned i) { return denoms[i]; }
branch  0 never executed
branch  1 never executed
call    2 never executed
function _ZNK4mlir10presburger12DivisionRepr8getDenomEj called 0 returned 0% blocks executed 0%
    #####:  149:  MPInt getDenom(unsigned i) const { return denoms[i]; }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  150:
        -:  151:  ArrayRef<MPInt> getDenoms() const { return denoms; }
        -:  152:
function _ZN4mlir10presburger12DivisionRepr6setDivEjN4llvm8ArrayRefINS0_5MPIntEEERKS4_ called 0 returned 0% blocks executed 0%
    #####:  153:  void setDiv(unsigned i, ArrayRef<MPInt> dividend, const MPInt &divisor) {
    #####:  154:    dividends.setRow(i, dividend);
call    0 never executed
    #####:  155:    denoms[i] = divisor;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  156:  }
        -:  157:
        -:  158:  void insertDiv(unsigned pos, ArrayRef<MPInt> dividend, const MPInt &divisor);
        -:  159:  void insertDiv(unsigned pos, unsigned num = 1);
        -:  160:
        -:  161:  /// Removes duplicate divisions. On every possible duplicate division found,
        -:  162:  /// `merge(i, j)`, where `i`, `j` are current index of the duplicate
        -:  163:  /// divisions, is called and division at index `j` is merged into division at
        -:  164:  /// index `i`. If `merge(i, j)` returns `true`, the divisions are merged i.e.
        -:  165:  /// `j^th` division gets eliminated and it's each instance is replaced by
        -:  166:  /// `i^th` division. If it returns `false`, the divisions are not merged.
        -:  167:  /// `merge` can also do side effects, For example it can merge the local
        -:  168:  /// variables in IntegerRelation.
        -:  169:  void
        -:  170:  removeDuplicateDivs(llvm::function_ref<bool(unsigned i, unsigned j)> merge);
        -:  171:
        -:  172:  void print(raw_ostream &os) const;
        -:  173:  void dump() const;
        -:  174:
        -:  175:private:
        -:  176:  /// Each row of the Matrix represents a single division dividend. The
        -:  177:  /// `i^th` row represents the dividend of the variable at `divOffset + i`
        -:  178:  /// in the constraint system (and the `i^th` local variable).
        -:  179:  Matrix dividends;
        -:  180:
        -:  181:  /// Denominators of each division. If a denominator of a division is `0`, the
        -:  182:  /// division variable is considered to not have a division representation.
        -:  183:  /// Otherwise, the denominator is positive.
        -:  184:  SmallVector<MPInt, 4> denoms;
        -:  185:};
        -:  186:
        -:  187:/// If `q` is defined to be equal to `expr floordiv d`, this equivalent to
        -:  188:/// saying that `q` is an integer and `q` is subject to the inequalities
        -:  189:/// `0 <= expr - d*q <= c - 1` (quotient remainder theorem).
        -:  190:///
        -:  191:/// Rearranging, we get the bounds on `q`: d*q <= expr <= d*q + d - 1.
        -:  192:///
        -:  193:/// `getDivUpperBound` returns `d*q <= expr`, and
        -:  194:/// `getDivLowerBound` returns `expr <= d*q + d - 1`.
        -:  195:///
        -:  196:/// The parameter `dividend` corresponds to `expr` above, `divisor` to `d`, and
        -:  197:/// `localVarIdx` to the position of `q` in the coefficient list.
        -:  198:///
        -:  199:/// The coefficient of `q` in `dividend` must be zero, as it is not allowed for
        -:  200:/// local variable to be a floor division of an expression involving itself.
        -:  201:/// The divisor must be positive.
        -:  202:SmallVector<MPInt, 8> getDivUpperBound(ArrayRef<MPInt> dividend,
        -:  203:                                       const MPInt &divisor,
        -:  204:                                       unsigned localVarIdx);
        -:  205:SmallVector<MPInt, 8> getDivLowerBound(ArrayRef<MPInt> dividend,
        -:  206:                                       const MPInt &divisor,
        -:  207:                                       unsigned localVarIdx);
        -:  208:
        -:  209:llvm::SmallBitVector getSubrangeBitVector(unsigned len, unsigned setOffset,
        -:  210:                                          unsigned numSet);
        -:  211:
        -:  212:/// Check if the pos^th variable can be expressed as a floordiv of an affine
        -:  213:/// function of other variables (where the divisor is a positive constant).
        -:  214:/// `foundRepr` contains a boolean for each variable indicating if the
        -:  215:/// explicit representation for that variable has already been computed.
        -:  216:/// Return the given array as an array of MPInts.
        -:  217:SmallVector<MPInt, 8> getMPIntVec(ArrayRef<int64_t> range);
        -:  218:/// Return the given array as an array of int64_t.
        -:  219:SmallVector<int64_t, 8> getInt64Vec(ArrayRef<MPInt> range);
        -:  220:
        -:  221:/// Returns the `MaybeLocalRepr` struct which contains the indices of the
        -:  222:/// constraints that can be expressed as a floordiv of an affine function. If
        -:  223:/// the representation could be computed, `dividend` and `divisor` are set,
        -:  224:/// in which case, denominator will be positive. If the representation could
        -:  225:/// not be computed, the kind attribute in `MaybeLocalRepr` is set to None.
        -:  226:MaybeLocalRepr computeSingleVarRepr(const IntegerRelation &cst,
        -:  227:                                    ArrayRef<bool> foundRepr, unsigned pos,
        -:  228:                                    MutableArrayRef<MPInt> dividend,
        -:  229:                                    MPInt &divisor);
        -:  230:
        -:  231:/// The following overload using int64_t is required for a callsite in
        -:  232:/// AffineStructures.h.
        -:  233:MaybeLocalRepr computeSingleVarRepr(const IntegerRelation &cst,
        -:  234:                                    ArrayRef<bool> foundRepr, unsigned pos,
        -:  235:                                    SmallVector<int64_t, 8> &dividend,
        -:  236:                                    unsigned &divisor);
        -:  237:
        -:  238:/// Given two relations, A and B, add additional local vars to the sets such
        -:  239:/// that both have the union of the local vars in each set, without changing
        -:  240:/// the set of points that lie in A and B.
        -:  241:///
        -:  242:/// While taking union, if a local var in any set has a division representation
        -:  243:/// which is a duplicate of division representation, of another local var in any
        -:  244:/// set, it is not added to the final union of local vars and is instead merged.
        -:  245:///
        -:  246:/// On every possible merge, `merge(i, j)` is called. `i`, `j` are position
        -:  247:/// of local variables in both sets which are being merged. If `merge(i, j)`
        -:  248:/// returns true, the divisions are merged, otherwise the divisions are not
        -:  249:/// merged.
        -:  250:void mergeLocalVars(IntegerRelation &relA, IntegerRelation &relB,
        -:  251:                    llvm::function_ref<bool(unsigned i, unsigned j)> merge);
        -:  252:
        -:  253:/// Compute the gcd of the range.
        -:  254:MPInt gcdRange(ArrayRef<MPInt> range);
        -:  255:
        -:  256:/// Divide the range by its gcd and return the gcd.
        -:  257:MPInt normalizeRange(MutableArrayRef<MPInt> range);
        -:  258:
        -:  259:/// Normalize the given (numerator, denominator) pair by dividing out the
        -:  260:/// common factors between them. The numerator here is an affine expression
        -:  261:/// with integer coefficients. The denominator must be positive.
        -:  262:void normalizeDiv(MutableArrayRef<MPInt> num, MPInt &denom);
        -:  263:
        -:  264:/// Return `coeffs` with all the elements negated.
        -:  265:SmallVector<MPInt, 8> getNegatedCoeffs(ArrayRef<MPInt> coeffs);
        -:  266:
        -:  267:/// Return the complement of the given inequality.
        -:  268:///
        -:  269:/// The complement of a_1 x_1 + ... + a_n x_ + c >= 0 is
        -:  270:/// a_1 x_1 + ... + a_n x_ + c < 0, i.e., -a_1 x_1 - ... - a_n x_ - c - 1 >= 0,
        -:  271:/// since all the variables are constrained to be integers.
        -:  272:SmallVector<MPInt, 8> getComplementIneq(ArrayRef<MPInt> ineq);
        -:  273:} // namespace presburger
        -:  274:} // namespace mlir
        -:  275:
        -:  276:#endif // MLIR_ANALYSIS_PRESBURGER_UTILS_H
