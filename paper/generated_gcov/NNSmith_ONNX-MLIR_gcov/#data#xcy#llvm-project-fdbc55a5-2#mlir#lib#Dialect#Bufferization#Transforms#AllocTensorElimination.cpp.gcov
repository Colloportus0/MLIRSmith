        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Bufferization/Transforms/AllocTensorElimination.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/AllocTensorElimination.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/AllocTensorElimination.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- AllocTensorElimination.cpp - alloc_tensor op elimination -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   12:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/AllocTensorElimination.h"
        -:   14:#include "mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h"
        -:   15:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   16:#include "mlir/IR/Dominance.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:namespace bufferization {
        -:   21:#define GEN_PASS_DEF_ALLOCTENSORELIMINATION
        -:   22:#include "mlir/Dialect/Bufferization/Transforms/Passes.h.inc"
        -:   23:} // namespace bufferization
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace mlir::bufferization;
        -:   28:
        -:   29:/// Return true if all `neededValues` are in scope at the given
        -:   30:/// `insertionPoint`.
        -:   31:static bool
function _ZL34neededValuesDominateInsertionPointRKN4mlir13DominanceInfoEPNS_9OperationERKN4llvm11SmallVectorINS_5ValueELj6EEE called 0 returned 0% blocks executed 0%
    #####:   32:neededValuesDominateInsertionPoint(const DominanceInfo &domInfo,
        -:   33:                                   Operation *insertionPoint,
        -:   34:                                   const SmallVector<Value> &neededValues) {
    #####:   35:  for (Value val : neededValues) {
branch  0 never executed
branch  1 never executed
    #####:   36:    if (auto bbArg = val.dyn_cast<BlockArgument>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   37:      Block *owner = bbArg.getOwner();
call    0 never executed
    #####:   38:      if (!owner->findAncestorOpInBlock(*insertionPoint))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:        return false;
        -:   40:    } else {
    #####:   41:      auto opResult = val.cast<OpResult>();
call    0 never executed
    #####:   42:      if (!domInfo.dominates(opResult.getOwner(), insertionPoint))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:        return false;
        -:   44:    }
        -:   45:  }
    #####:   46:  return true;
        -:   47:}
        -:   48:
        -:   49:/// Return true if the given `insertionPoint` dominates all uses of
        -:   50:/// `allocTensorOp`.
function _ZL27insertionPointDominatesUsesRKN4mlir13DominanceInfoEPNS_9OperationES4_ called 0 returned 0% blocks executed 0%
    #####:   51:static bool insertionPointDominatesUses(const DominanceInfo &domInfo,
        -:   52:                                        Operation *insertionPoint,
        -:   53:                                        Operation *allocTensorOp) {
    #####:   54:  for (Operation *user : allocTensorOp->getUsers())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:    if (!domInfo.dominates(insertionPoint, user))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   56:      return false;
    #####:   57:  return true;
        -:   58:}
        -:   59:
        -:   60:/// Find a valid insertion point for a replacement of `allocTensorOp`, assuming
        -:   61:/// that the replacement may use any value from `neededValues`.
        -:   62:static Operation *
function _ZL23findValidInsertionPointPN4mlir9OperationERKN4llvm11SmallVectorINS_5ValueELj6EEE called 0 returned 0% blocks executed 0%
    #####:   63:findValidInsertionPoint(Operation *allocTensorOp,
        -:   64:                        const SmallVector<Value> &neededValues) {
    #####:   65:  DominanceInfo domInfo;
call    0 never executed
        -:   66:
        -:   67:  // Gather all possible insertion points: the location of `allocTensorOp` and
        -:   68:  // right after the definition of each value in `neededValues`.
    #####:   69:  SmallVector<Operation *> insertionPointCandidates;
call    0 never executed
call    1 never executed
    #####:   70:  insertionPointCandidates.push_back(allocTensorOp);
call    0 never executed
    #####:   71:  for (Value val : neededValues) {
branch  0 never executed
branch  1 never executed
        -:   72:    // Note: The anchor op is using all of `neededValues`, so:
        -:   73:    // * in case of a block argument: There must be at least one op in the block
        -:   74:    //                                (the anchor op or one of its parents).
        -:   75:    // * in case of an OpResult: There must be at least one op right after the
        -:   76:    //                           defining op (the anchor op or one of its
        -:   77:    //                           parents).
    #####:   78:    if (auto bbArg = val.dyn_cast<BlockArgument>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:      insertionPointCandidates.push_back(
call    0 never executed
    #####:   80:          &bbArg.getOwner()->getOperations().front());
call    0 never executed
call    1 never executed
        -:   81:    } else {
    #####:   82:      insertionPointCandidates.push_back(val.getDefiningOp()->getNextNode());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   83:    }
        -:   84:  }
        -:   85:
        -:   86:  // Select first matching insertion point.
    #####:   87:  for (Operation *insertionPoint : insertionPointCandidates) {
branch  0 never executed
branch  1 never executed
        -:   88:    // Check if all needed values are in scope.
    #####:   89:    if (!neededValuesDominateInsertionPoint(domInfo, insertionPoint,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   90:                                            neededValues))
    #####:   91:      continue;
        -:   92:    // Check if the insertion point is before all uses.
    #####:   93:    if (!insertionPointDominatesUses(domInfo, insertionPoint, allocTensorOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   94:      continue;
        -:   95:    return insertionPoint;
        -:   96:  }
        -:   97:
        -:   98:  // No suitable insertion point was found.
        -:   99:  return nullptr;
        -:  100:}
        -:  101:
        -:  102:/// Try to eliminate AllocTensorOps inside `op`. An AllocTensorOp is replaced
        -:  103:/// with the result of `rewriteFunc` if it is anchored on a matching
        -:  104:/// OpOperand. "Anchored" means that there is a path on the reverse SSA use-def
        -:  105:/// chain, starting from the OpOperand and always following the aliasing
        -:  106:/// OpOperand, that eventually ends at a single AllocTensorOp.
function _ZN4mlir13bufferization21eliminateAllocTensorsERNS_12RewriterBaseEPNS_9OperationERNS0_13AnalysisStateESt8functionIFbRNS_9OpOperandERN4llvm11SmallVectorINS_5ValueELj6EEEEES7_IFSC_RNS_9OpBuilderENS_8LocationES9_EE called 0 returned 0% blocks executed 0%
    #####:  107:LogicalResult mlir::bufferization::eliminateAllocTensors(
        -:  108:    RewriterBase &rewriter, Operation *op, AnalysisState &state,
        -:  109:    AnchorMatchFn anchorMatchFunc, RewriteFn rewriteFunc) {
    #####:  110:  OpBuilder::InsertionGuard g(rewriter);
call    0 never executed
        -:  111:
function _ZZN4mlir13bufferization21eliminateAllocTensorsERNS_12RewriterBaseEPNS_9OperationERNS0_13AnalysisStateESt8functionIFbRNS_9OpOperandERN4llvm11SmallVectorINS_5ValueELj6EEEEES7_IFSC_RNS_9OpBuilderENS_8LocationES9_EEENKUlS4_E_clES4_ called 0 returned 0% blocks executed 0%
    #####:  112:  WalkResult status = op->walk([&](Operation *op) {
    #####:  113:    for (OpOperand &operand : op->getOpOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  114:      // Skip operands that do not bufferize inplace.
    #####:  115:      if (!state.isInPlace(operand))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:        continue;
        -:  117:      // All values that are needed to create the replacement op.
    #####:  118:      SmallVector<Value> neededValues;
branch  0 never executed
branch  1 never executed
        -:  119:      // Is this a matching OpOperand?
    #####:  120:      if (!anchorMatchFunc(operand, neededValues))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  121:        continue;
    #####:  122:      SetVector<Value> maybeAllocTensor =
function _ZZZN4mlir13bufferization21eliminateAllocTensorsERNS_12RewriterBaseEPNS_9OperationERNS0_13AnalysisStateESt8functionIFbRNS_9OpOperandERN4llvm11SmallVectorINS_5ValueELj6EEEEES7_IFSC_RNS_9OpBuilderENS_8LocationES9_EEENKUlS4_E_clES4_ENKUlSC_E_clESC_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  123:          state.findValueInReverseUseDefChain(operand.get(), [&](Value val) {
        -:  124:            // Continue traversal until this function returns true.
    #####:  125:            OpResult opResult = val.dyn_cast<OpResult>();
call    0 never executed
    #####:  126:            if (!opResult)
branch  0 never executed
branch  1 never executed
        -:  127:              return true;
    #####:  128:            SmallVector<OpOperand *> opOperands =
    #####:  129:                state.getAliasingOpOperand(opResult);
call    0 never executed
    #####:  130:            if (!llvm::all_of(opOperands, [&](OpOperand *operand) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  131:                  return state.isInPlace(*operand);
        -:  132:                }))
        -:  133:              return true;
        -:  134:            // Only equivalent tensors are supported at the moment.
        -:  135:            // TODO: Support cases such as extract_slice(alloc_tensor)
    #####:  136:            return !llvm::all_of(opOperands, [&](OpOperand *operand) {
call    0 never executed
        -:  137:              return state.areEquivalentBufferizedValues(operand->get(),
        -:  138:                                                         opResult);
    #####:  139:            });
    #####:  140:          });
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  141:
        -:  142:      // Replace only if the reverse use-def chain ends at exactly one
        -:  143:      // AllocTensorOp.
    #####:  144:      if (maybeAllocTensor.size() != 1 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  145:          !maybeAllocTensor.front().getDefiningOp<AllocTensorOp>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  146:        return WalkResult::skip();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  147:      Value allocTensor = maybeAllocTensor.front();
branch  0 never executed
branch  1 never executed
        -:  148:
        -:  149:      // Replace only if the types match.
        -:  150:      // TODO: This could be extended to support IR such as:
        -:  151:      // %0 = bufferization.alloc_tensor : tensor<128xf32>
        -:  152:      // %1 = "some_op"(%0) : (tensor<128xf32>) -> (tensor<128xf32>)
        -:  153:      // %2 = tensor.expand_shape %1 ...
        -:  154:      // %3 = tensor.insert_slice %2 into ...
    #####:  155:      if (allocTensor.getType() != operand.get().getType())
branch  0 never executed
branch  1 never executed
    #####:  156:        return WalkResult::skip();
        -:  157:
        -:  158:      // Find a suitable insertion point.
    #####:  159:      Operation *insertionPoint =
    #####:  160:          findValidInsertionPoint(allocTensor.getDefiningOp(), neededValues);
call    0 never executed
call    1 never executed
    #####:  161:      if (!insertionPoint)
branch  0 never executed
branch  1 never executed
    #####:  162:        continue;
call    0 never executed
        -:  163:
        -:  164:      // Create a replacement for the AllocTensorOp.
    #####:  165:      rewriter.setInsertionPoint(insertionPoint);
call    0 never executed
    #####:  166:      Value replacement = rewriteFunc(rewriter, allocTensor.getLoc(), operand);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  167:      if (!replacement)
branch  0 never executed
branch  1 never executed
    #####:  168:        continue;
        -:  169:
        -:  170:      // Replace the AllocTensorOp.
    #####:  171:      rewriter.replaceOp(allocTensor.getDefiningOp(), replacement);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  172:    }
        -:  173:
        -:  174:    // Advance to the next operation.
    #####:  175:    return WalkResult::advance();
    #####:  176:  });
call    0 never executed
        -:  177:
    #####:  178:  return failure(status.wasInterrupted());
branch  0 never executed
branch  1 never executed
        -:  179:}
        -:  180:
        -:  181:/// Try to eliminate AllocTensorOps inside `op`. An AllocTensorOp can be
        -:  182:/// eliminated if it is eventually inserted into another tensor (and some other
        -:  183:/// conditions are met).
        -:  184:///
        -:  185:/// E.g.:
        -:  186:/// %0 = linalg.alloc_tensor
        -:  187:/// %1 = linalg.fill(%cst, %0) {inplace = [true]}
        -:  188:/// %2 = tensor.insert_slice %1 into %t[10][20][1]
        -:  189:///
        -:  190:/// AllocTensorOp elimination will try to fill %t inplace instead of filling a
        -:  191:/// new allocation %0 and inserting it into %t. This is done by replacing the
        -:  192:/// AllocTensorOp with:
        -:  193:///
        -:  194:/// %0 = tensor.extract_slice %t[10][20][1]
        -:  195:///
        -:  196:/// The analysis looks for matching ExtractSliceOp/InsertSliceOp pairs and lets
        -:  197:/// those bufferize inplace in the absence of other conflicts.
        -:  198:///
        -:  199:/// Starting from an InsertSliceOp, an AllocTensorOp at the end of the insert
        -:  200:/// source's reverse use-def chain is eliminated if:
        -:  201:/// * On the reverse use-def chain path from the InsertSliceOp to the
        -:  202:///   AllocTensorOp, all ops were decided to bufferize inplace and the buffer
        -:  203:///   relation is "equivalent" (TODO: can be relaxed if needed).
        -:  204:/// * The reverse use-def chain has exactly one end, which is the AllocTensorOp.
        -:  205:LogicalResult
function _ZN4mlir13bufferization45insertSliceAnchoredAllocTensorEliminationStepERNS_12RewriterBaseEPNS_9OperationERNS0_13AnalysisStateE called 0 returned 0% blocks executed 0%
    #####:  206:mlir::bufferization::insertSliceAnchoredAllocTensorEliminationStep(
        -:  207:    RewriterBase &rewriter, Operation *op, AnalysisState &state) {
    #####:  208:  return eliminateAllocTensors(
        -:  209:      rewriter, op, state,
        -:  210:      /*anchorMatchFunc=*/
function _ZZN4mlir13bufferization45insertSliceAnchoredAllocTensorEliminationStepERNS_12RewriterBaseEPNS_9OperationERNS0_13AnalysisStateEENKUlRNS_9OpOperandERN4llvm11SmallVectorINS_5ValueELj6EEEE_clES8_SD_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  211:      [&](OpOperand &operand, SmallVector<Value> &neededValues) {
    #####:  212:        auto insertSliceOp =
    #####:  213:            dyn_cast<tensor::InsertSliceOp>(operand.getOwner());
call    0 never executed
    #####:  214:        if (!insertSliceOp)
branch  0 never executed
branch  1 never executed
        -:  215:          return false;
    #####:  216:        if (&operand != &insertSliceOp->getOpOperand(0) /*source*/)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  217:          return false;
        -:  218:
        -:  219:        // Collect all values that are needed to construct the replacement op.
    #####:  220:        neededValues.append(insertSliceOp.getOffsets().begin(),
call    0 never executed
call    1 never executed
    #####:  221:                            insertSliceOp.getOffsets().end());
call    0 never executed
    #####:  222:        neededValues.append(insertSliceOp.getSizes().begin(),
call    0 never executed
call    1 never executed
    #####:  223:                            insertSliceOp.getSizes().end());
call    0 never executed
    #####:  224:        neededValues.append(insertSliceOp.getStrides().begin(),
call    0 never executed
call    1 never executed
    #####:  225:                            insertSliceOp.getStrides().end());
call    0 never executed
    #####:  226:        neededValues.push_back(insertSliceOp.getDest());
call    0 never executed
call    1 never executed
        -:  227:
    #####:  228:        return true;
        -:  229:      },
        -:  230:      /*rewriteFunc=*/
function _ZZN4mlir13bufferization45insertSliceAnchoredAllocTensorEliminationStepERNS_12RewriterBaseEPNS_9OperationERNS0_13AnalysisStateEENKUlRNS_9OpBuilderENS_8LocationERNS_9OpOperandEE0_clES8_S9_SB_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  231:      [](OpBuilder &b, Location loc, OpOperand &operand) {
    #####:  232:        auto insertOp = cast<tensor::InsertSliceOp>(operand.getOwner());
call    0 never executed
    #####:  233:        auto extractOp = b.create<tensor::ExtractSliceOp>(
    #####:  234:            loc, insertOp.getSourceType(), insertOp.getDest(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  235:            insertOp.getMixedOffsets(), insertOp.getMixedSizes(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  236:            insertOp.getMixedStrides());
call    0 never executed
call    1 never executed
    #####:  237:        return extractOp.getResult();
call    0 never executed
    #####:  238:      });
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  239:}
        -:  240:
        -:  241:namespace {
    #####:  242:struct AllocTensorElimination
call    0 never executed
        -:  243:    : public bufferization::impl::AllocTensorEliminationBase<
        -:  244:          AllocTensorElimination> {
   128624:  245:  AllocTensorElimination() = default;
call    0 returned 100%
        -:  246:
        -:  247:  void runOnOperation() override;
        -:  248:
function _ZNK12_GLOBAL__N_122AllocTensorElimination20getDependentDialectsERN4mlir15DialectRegistryE called 0 returned 0% blocks executed 0%
    #####:  249:  void getDependentDialects(DialectRegistry &registry) const override {
    #####:  250:    registry
call    0 never executed
    #####:  251:        .insert<bufferization::BufferizationDialect, tensor::TensorDialect>();
    #####:  252:  }
        -:  253:};
        -:  254:} // namespace
        -:  255:
function _ZN12_GLOBAL__N_122AllocTensorElimination14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  256:void AllocTensorElimination::runOnOperation() {
    #####:  257:  Operation *op = getOperation();
branch  0 never executed
branch  1 never executed
    #####:  258:  OneShotBufferizationOptions options;
call    0 never executed
    #####:  259:  OneShotAnalysisState state(op, options);
call    0 never executed
call    1 never executed
    #####:  260:  if (failed(analyzeOp(op, state))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  261:    signalPassFailure();
call    0 never executed
    #####:  262:    return;
call    0 never executed
call    1 never executed
        -:  263:  }
        -:  264:
    #####:  265:  IRRewriter rewriter(op->getContext());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  266:  if (failed(bufferization::insertSliceAnchoredAllocTensorEliminationStep(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  267:          rewriter, op, state)))
    #####:  268:    signalPassFailure();
call    0 never executed
        -:  269:}
        -:  270:
function _ZN4mlir13bufferization32createAllocTensorEliminationPassEv called 128624 returned 100% blocks executed 100%
   128624:  271:std::unique_ptr<Pass> mlir::bufferization::createAllocTensorEliminationPass() {
   128624:  272:  return std::make_unique<AllocTensorElimination>();
call    0 returned 100%
        -:  273:}
