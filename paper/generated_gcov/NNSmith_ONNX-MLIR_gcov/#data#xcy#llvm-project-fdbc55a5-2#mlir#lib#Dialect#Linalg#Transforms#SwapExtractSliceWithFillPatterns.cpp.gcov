        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Linalg/Transforms/SwapExtractSliceWithFillPatterns.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/SwapExtractSliceWithFillPatterns.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/SwapExtractSliceWithFillPatterns.cpp.gcda
        -:    0:Runs:128649
        -:    1://===- SwapExtractSliceWithFillPatterns.cpp -------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   10:#include "mlir/IR/PatternMatch.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:using namespace mlir::linalg;
        -:   14:
        -:   15:/// Swaps tensor.extract_slice(linalg.fill(%cst, %init)) into linalg.fill(%cst,
        -:   16:/// tensor.extract_slice(%init)) when the linalg.fill op have no other users.
        -:   17:/// This helps to reduce the fill footprint.
        -:   18:struct SwapExtractSliceOfFill final
        -:   19:    : public OpRewritePattern<tensor::ExtractSliceOp> {
        -:   20:  using OpRewritePattern::OpRewritePattern;
        -:   21:
function _ZNK22SwapExtractSliceOfFill15matchAndRewriteEN4mlir6tensor14ExtractSliceOpERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   22:  LogicalResult matchAndRewrite(tensor::ExtractSliceOp extractOp,
        -:   23:                                PatternRewriter &rewriter) const override {
    #####:   24:    auto fillOp = extractOp.getSource().getDefiningOp<FillOp>();
call    0 never executed
call    1 never executed
    #####:   25:    if (!fillOp || !fillOp->hasOneUse())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   26:      return failure();
        -:   27:
    #####:   28:    auto newExtractOp = rewriter.create<tensor::ExtractSliceOp>(
    #####:   29:        extractOp.getLoc(), extractOp.getType(), fillOp.getOutputs()[0],
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   30:        extractOp.getMixedOffsets(), extractOp.getMixedSizes(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   31:        extractOp.getMixedStrides());
call    0 never executed
call    1 never executed
    #####:   32:    rewriter.replaceOpWithNewOp<FillOp>(extractOp, fillOp.getInputs(),
    #####:   33:                                        ValueRange{newExtractOp.getResult()});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   34:    return success();
        -:   35:  }
        -:   36:};
        -:   37:
function _ZN4mlir6linalg40populateSwapExtractSliceWithFillPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:   38:void mlir::linalg::populateSwapExtractSliceWithFillPatterns(
        -:   39:    RewritePatternSet &patterns) {
    #####:   40:  patterns.add<SwapExtractSliceOfFill>(patterns.getContext());
call    0 never executed
    #####:   41:}
