        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Bufferization/Transforms/BufferUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferUtils.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- BufferUtils.cpp - buffer transformation utilities ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements utilities for buffer optimization passes.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/BufferUtils.h"
        -:   14:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   15:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   16:#include "mlir/Dialect/MemRef/Utils/MemRefUtils.h"
        -:   17:#include "mlir/IR/Operation.h"
        -:   18:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   19:#include "mlir/Interfaces/LoopLikeInterface.h"
        -:   20:#include "mlir/Pass/Pass.h"
        -:   21:#include "llvm/ADT/SetOperations.h"
        -:   22:#include "llvm/ADT/SmallString.h"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:using namespace mlir::bufferization;
        -:   26:
        -:   27://===----------------------------------------------------------------------===//
        -:   28:// BufferPlacementAllocs
        -:   29://===----------------------------------------------------------------------===//
        -:   30:
        -:   31:/// Get the start operation to place the given alloc value withing the
        -:   32:// specified placement block.
function _ZN4mlir13bufferization21BufferPlacementAllocs17getStartOperationENS_5ValueEPNS_5BlockERKNS_8LivenessE called 0 returned 0% blocks executed 0%
    #####:   33:Operation *BufferPlacementAllocs::getStartOperation(Value allocValue,
        -:   34:                                                    Block *placementBlock,
        -:   35:                                                    const Liveness &liveness) {
        -:   36:  // We have to ensure that we place the alloc before its first use in this
        -:   37:  // block.
    #####:   38:  const LivenessBlockInfo &livenessInfo = *liveness.getLiveness(placementBlock);
call    0 never executed
    #####:   39:  Operation *startOperation = livenessInfo.getStartOperation(allocValue);
call    0 never executed
        -:   40:  // Check whether the start operation lies in the desired placement block.
        -:   41:  // If not, we will use the terminator as this is the last operation in
        -:   42:  // this block.
    #####:   43:  if (startOperation->getBlock() != placementBlock) {
branch  0 never executed
branch  1 never executed
    #####:   44:    Operation *opInPlacementBlock =
    #####:   45:        placementBlock->findAncestorOpInBlock(*startOperation);
call    0 never executed
    #####:   46:    startOperation = opInPlacementBlock ? opInPlacementBlock
branch  0 never executed
branch  1 never executed
    #####:   47:                                        : placementBlock->getTerminator();
call    0 never executed
        -:   48:  }
        -:   49:
    #####:   50:  return startOperation;
        -:   51:}
        -:   52:
        -:   53:/// Initializes the internal list by discovering all supported allocation
        -:   54:/// nodes.
function _ZN4mlir13bufferization21BufferPlacementAllocsC2EPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   55:BufferPlacementAllocs::BufferPlacementAllocs(Operation *op) { build(op); }
call    0 never executed
        -:   56:
        -:   57:/// Searches for and registers all supported allocation entries.
function _ZN4mlir13bufferization21BufferPlacementAllocs5buildEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   58:void BufferPlacementAllocs::build(Operation *op) {
function _ZZN4mlir13bufferization21BufferPlacementAllocs5buildEPNS_9OperationEENKUlNS_23MemoryEffectOpInterfaceEE_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   59:  op->walk([&](MemoryEffectOpInterface opInterface) {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   60:    // Try to find a single allocation result.
    #####:   61:    SmallVector<MemoryEffects::EffectInstance, 2> effects;
call    0 never executed
    #####:   62:    opInterface.getEffects(effects);
call    0 never executed
        -:   63:
    #####:   64:    SmallVector<MemoryEffects::EffectInstance, 2> allocateResultEffects;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:    llvm::copy_if(
call    0 never executed
        -:   66:        effects, std::back_inserter(allocateResultEffects),
function _ZZZN4mlir13bufferization21BufferPlacementAllocs5buildEPNS_9OperationEENKUlNS_23MemoryEffectOpInterfaceEE_clES4_ENKUlRNS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEE_clESB_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   67:        [=](MemoryEffects::EffectInstance &it) {
    #####:   68:          Value value = it.getValue();
branch  0 never executed
branch  1 never executed
    #####:   69:          return isa<MemoryEffects::Allocate>(it.getEffect()) && value &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:                 value.isa<OpResult>() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   71:                 it.getResource() !=
call    0 never executed
    #####:   72:                     SideEffects::AutomaticAllocationScopeResource::get();
call    0 never executed
    #####:   73:        });
call    0 never executed
        -:   74:    // If there is one result only, we will be able to move the allocation and
        -:   75:    // (possibly existing) deallocation ops.
    #####:   76:    if (allocateResultEffects.size() != 1)
branch  0 never executed
branch  1 never executed
    #####:   77:      return;
branch  0 never executed
branch  1 never executed
        -:   78:    // Get allocation result.
    #####:   79:    Value allocValue = allocateResultEffects[0].getValue();
branch  0 never executed
branch  1 never executed
        -:   80:    // Find the associated dealloc value and register the allocation entry.
    #####:   81:    llvm::Optional<Operation *> dealloc = memref::findDealloc(allocValue);
call    0 never executed
        -:   82:    // If the allocation has > 1 dealloc associated with it, skip handling it.
    #####:   83:    if (!dealloc)
branch  0 never executed
branch  1 never executed
        -:   84:      return;
    #####:   85:    allocs.push_back(std::make_tuple(allocValue, *dealloc));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   86:  });
    #####:   87:}
        -:   88:
        -:   89://===----------------------------------------------------------------------===//
        -:   90:// BufferPlacementTransformationBase
        -:   91://===----------------------------------------------------------------------===//
        -:   92:
        -:   93:/// Constructs a new transformation base using the given root operation.
function _ZN4mlir13bufferization33BufferPlacementTransformationBaseC2EPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   94:BufferPlacementTransformationBase::BufferPlacementTransformationBase(
    #####:   95:    Operation *op)
    #####:   96:    : aliases(op), allocs(op), liveness(op) {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:   97:
        -:   98:/// Returns true if the given operation represents a loop by testing whether it
        -:   99:/// implements the `LoopLikeOpInterface` or the `RegionBranchOpInterface`. In
        -:  100:/// the case of a `RegionBranchOpInterface`, it checks all region-based control-
        -:  101:/// flow edges for cycles.
function _ZN4mlir13bufferization33BufferPlacementTransformationBase6isLoopEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  102:bool BufferPlacementTransformationBase::isLoop(Operation *op) {
        -:  103:  // If the operation implements the `LoopLikeOpInterface` it can be considered
        -:  104:  // a loop.
    #####:  105:  if (isa<LoopLikeOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  106:    return true;
        -:  107:
        -:  108:  // If the operation does not implement the `RegionBranchOpInterface`, it is
        -:  109:  // (currently) not possible to detect a loop.
    #####:  110:  RegionBranchOpInterface regionInterface;
call    0 never executed
    #####:  111:  if (!(regionInterface = dyn_cast<RegionBranchOpInterface>(op)))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:    return false;
        -:  113:
        -:  114:  // Recurses into a region using the current region interface to find potential
        -:  115:  // cycles.
    #####:  116:  SmallPtrSet<Region *, 4> visitedRegions;
call    0 never executed
function _ZZN4mlir13bufferization33BufferPlacementTransformationBase6isLoopEPNS_9OperationEENKUlPNS_6RegionEE_clES5_ called 0 returned 0% blocks executed 0%
    #####:  117:  std::function<bool(Region *)> recurse = [&](Region *current) {
    #####:  118:    if (!current)
branch  0 never executed
branch  1 never executed
        -:  119:      return false;
        -:  120:    // If we have found a back edge, the parent operation induces a loop.
    #####:  121:    if (!visitedRegions.insert(current).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  122:      return true;
        -:  123:    // Recurses into all region successors.
    #####:  124:    SmallVector<RegionSuccessor, 2> successors;
call    0 never executed
    #####:  125:    regionInterface.getSuccessorRegions(current->getRegionNumber(), successors);
call    0 never executed
call    1 never executed
    #####:  126:    for (RegionSuccessor &regionEntry : successors)
branch  0 never executed
branch  1 never executed
    #####:  127:      if (recurse(regionEntry.getSuccessor()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  128:        return true;
        -:  129:    return false;
    #####:  130:  };
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  131:
        -:  132:  // Start with all entry regions and test whether they induce a loop.
    #####:  133:  SmallVector<RegionSuccessor, 2> successorRegions;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  134:  regionInterface.getSuccessorRegions(/*index=*/llvm::None, successorRegions);
call    0 never executed
    #####:  135:  for (RegionSuccessor &regionEntry : successorRegions) {
branch  0 never executed
branch  1 never executed
    #####:  136:    if (recurse(regionEntry.getSuccessor()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  137:      return true;
    #####:  138:    visitedRegions.clear();
call    0 never executed
        -:  139:  }
        -:  140:
        -:  141:  return false;
        -:  142:}
        -:  143:
        -:  144://===----------------------------------------------------------------------===//
        -:  145:// BufferPlacementTransformationBase
        -:  146://===----------------------------------------------------------------------===//
        -:  147:
        -:  148:FailureOr<memref::GlobalOp>
function _ZN4mlir13bufferization12getGlobalForENS_5arith10ConstantOpEm called 0 returned 0% blocks executed 0%
    #####:  149:bufferization::getGlobalFor(arith::ConstantOp constantOp, uint64_t alignment) {
    #####:  150:  auto type = constantOp.getType().cast<RankedTensorType>();
call    0 never executed
    #####:  151:  auto moduleOp = constantOp->getParentOfType<ModuleOp>();
call    0 never executed
    #####:  152:  if (!moduleOp)
branch  0 never executed
branch  1 never executed
    #####:  153:    return failure();
        -:  154:
        -:  155:  // If we already have a global for this constant value, no need to do
        -:  156:  // anything else.
    #####:  157:  for (Operation &op : moduleOp.getRegion().getOps()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  158:    auto globalOp = dyn_cast<memref::GlobalOp>(&op);
call    0 never executed
    #####:  159:    if (!globalOp)
branch  0 never executed
branch  1 never executed
    #####:  160:      continue;
    #####:  161:    if (!globalOp.getInitialValue().has_value())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  162:      continue;
    #####:  163:    uint64_t opAlignment = globalOp.getAlignment().value_or(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  164:    Attribute initialValue = globalOp.getInitialValue().value();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:    if (opAlignment == alignment && initialValue == constantOp.getValue())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  166:      return globalOp;
        -:  167:  }
        -:  168:
        -:  169:  // Create a builder without an insertion point. We will insert using the
        -:  170:  // symbol table to guarantee unique names.
    #####:  171:  OpBuilder globalBuilder(moduleOp.getContext());
call    0 never executed
call    1 never executed
    #####:  172:  SymbolTable symbolTable(moduleOp);
call    0 never executed
        -:  173:
        -:  174:  // Create a pretty name.
    #####:  175:  SmallString<64> buf;
call    0 never executed
call    1 never executed
    #####:  176:  llvm::raw_svector_ostream os(buf);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  177:  interleave(type.getShape(), os, "x");
call    0 never executed
call    1 never executed
    #####:  178:  os << "x" << type.getElementType();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  179:
        -:  180:  // Add an optional alignment to the global memref.
    #####:  181:  IntegerAttr memrefAlignment =
    #####:  182:      alignment > 0 ? IntegerAttr::get(globalBuilder.getI64Type(), alignment)
call    0 never executed
call    1 never executed
    #####:  183:                    : IntegerAttr();
branch  0 never executed
branch  1 never executed
        -:  184:
    #####:  185:  BufferizeTypeConverter typeConverter;
call    0 never executed
call    1 never executed
    #####:  186:  auto global = globalBuilder.create<memref::GlobalOp>(
    #####:  187:      constantOp.getLoc(), (Twine("__constant_") + os.str()).str(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  188:      /*sym_visibility=*/globalBuilder.getStringAttr("private"),
call    0 never executed
    #####:  189:      /*type=*/typeConverter.convertType(type).cast<MemRefType>(),
call    0 never executed
call    1 never executed
    #####:  190:      /*initial_value=*/constantOp.getValue().cast<ElementsAttr>(),
call    0 never executed
call    1 never executed
    #####:  191:      /*constant=*/true,
call    0 never executed
    #####:  192:      /*alignment=*/memrefAlignment);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  193:  symbolTable.insert(global);
call    0 never executed
        -:  194:  // The symbol table inserts at the end of the module, but globals are a bit
        -:  195:  // nicer if they are at the beginning.
    #####:  196:  global->moveBefore(&moduleOp.front());
call    0 never executed
call    1 never executed
    #####:  197:  return global;
call    0 never executed
        -:  198:}
