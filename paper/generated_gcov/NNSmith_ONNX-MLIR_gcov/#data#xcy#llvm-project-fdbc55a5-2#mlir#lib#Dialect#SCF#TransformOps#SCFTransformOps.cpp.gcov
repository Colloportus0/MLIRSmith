        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SCF/TransformOps/SCFTransformOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/TransformOps/CMakeFiles/obj.MLIRSCFTransformOps.dir/SCFTransformOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/TransformOps/CMakeFiles/obj.MLIRSCFTransformOps.dir/SCFTransformOps.cpp.gcda
        -:    0:Runs:128629
        -:    1://===- SCFTransformOps.cpp - Implementation of SCF transformation ops -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SCF/TransformOps/SCFTransformOps.h"
        -:   10:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   11:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   12:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   13:#include "mlir/Dialect/SCF/Transforms/Patterns.h"
        -:   14:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   15:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   16:#include "mlir/Dialect/Transform/IR/TransformDialect.h"
        -:   17:#include "mlir/Dialect/Transform/IR/TransformInterfaces.h"
        -:   18:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:namespace {
        -:   23:/// A simple pattern rewriter that implements no special logic.
    #####:   24:class SimpleRewriter : public PatternRewriter {
call    0 never executed
call    1 never executed
        -:   25:public:
    #####:   26:  SimpleRewriter(MLIRContext *context) : PatternRewriter(context) {}
        -:   27:};
        -:   28:} // namespace
        -:   29:
        -:   30://===----------------------------------------------------------------------===//
        -:   31:// GetParentForOp
        -:   32://===----------------------------------------------------------------------===//
        -:   33:
        -:   34:DiagnosedSilenceableFailure
function _ZN4mlir9transform14GetParentForOp5applyERNS0_16TransformResultsERNS0_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:   35:transform::GetParentForOp::apply(transform::TransformResults &results,
        -:   36:                                 transform::TransformState &state) {
    #####:   37:  SetVector<Operation *> parents;
call    0 never executed
call    1 never executed
    #####:   38:  for (Operation *target : state.getPayloadOps(getTarget())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   39:    scf::ForOp loop;
call    0 never executed
    #####:   40:    Operation *current = target;
    #####:   41:    for (unsigned i = 0, e = getNumLoops(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:      loop = current->getParentOfType<scf::ForOp>();
call    0 never executed
    #####:   43:      if (!loop) {
branch  0 never executed
branch  1 never executed
    #####:   44:        DiagnosedSilenceableFailure diag = emitSilenceableError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   45:                                           << "could not find an '"
    #####:   46:                                           << scf::ForOp::getOperationName()
call    0 never executed
call    1 never executed
    #####:   47:                                           << "' parent";
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   48:        diag.attachNote(target->getLoc()) << "target op";
call    0 never executed
call    1 never executed
    #####:   49:        results.set(getResult().cast<OpResult>(), {});
call    0 never executed
call    1 never executed
    #####:   50:        return diag;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   51:      }
    #####:   52:      current = loop;
        -:   53:    }
    #####:   54:    parents.insert(loop);
call    0 never executed
        -:   55:  }
    #####:   56:  results.set(getResult().cast<OpResult>(), parents.getArrayRef());
call    0 never executed
call    1 never executed
    #####:   57:  return DiagnosedSilenceableFailure::success();
        -:   58:}
        -:   59:
        -:   60://===----------------------------------------------------------------------===//
        -:   61:// LoopOutlineOp
        -:   62://===----------------------------------------------------------------------===//
        -:   63:
        -:   64:/// Wraps the given operation `op` into an `scf.execute_region` operation. Uses
        -:   65:/// the provided rewriter for all operations to remain compatible with the
        -:   66:/// rewriting infra, as opposed to just splicing the op in place.
function _ZL19wrapInExecuteRegionRN4mlir12RewriterBaseEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   67:static scf::ExecuteRegionOp wrapInExecuteRegion(RewriterBase &b,
        -:   68:                                                Operation *op) {
    #####:   69:  if (op->getNumRegions() != 1)
branch  0 never executed
branch  1 never executed
    #####:   70:    return nullptr;
    #####:   71:  OpBuilder::InsertionGuard g(b);
call    0 never executed
    #####:   72:  b.setInsertionPoint(op);
call    0 never executed
    #####:   73:  scf::ExecuteRegionOp executeRegionOp =
    #####:   74:      b.create<scf::ExecuteRegionOp>(op->getLoc(), op->getResultTypes());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   75:  {
    #####:   76:    OpBuilder::InsertionGuard g(b);
call    0 never executed
    #####:   77:    b.setInsertionPointToStart(&executeRegionOp.getRegion().emplaceBlock());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   78:    Operation *clonedOp = b.cloneWithoutRegions(*op);
call    0 never executed
    #####:   79:    Region &clonedRegion = clonedOp->getRegions().front();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   80:    assert(clonedRegion.empty() && "expected empty region");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   81:    b.inlineRegionBefore(op->getRegions().front(), clonedRegion,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   82:                         clonedRegion.end());
branch  0 never executed
branch  1 never executed
    #####:   83:    b.create<scf::YieldOp>(op->getLoc(), clonedOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   84:  }
    #####:   85:  b.replaceOp(op, executeRegionOp.getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   86:  return executeRegionOp;
branch  0 never executed
branch  1 never executed
        -:   87:}
        -:   88:
        -:   89:DiagnosedSilenceableFailure
function _ZN4mlir9transform13LoopOutlineOp5applyERNS0_16TransformResultsERNS0_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:   90:transform::LoopOutlineOp::apply(transform::TransformResults &results,
        -:   91:                                transform::TransformState &state) {
    #####:   92:  SmallVector<Operation *> transformed;
call    0 never executed
    #####:   93:  DenseMap<Operation *, SymbolTable> symbolTables;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   94:  for (Operation *target : state.getPayloadOps(getTarget())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   95:    Location location = target->getLoc();
call    0 never executed
    #####:   96:    Operation *symbolTableOp = SymbolTable::getNearestSymbolTable(target);
call    0 never executed
    #####:   97:    SimpleRewriter rewriter(getContext());
call    0 never executed
call    1 never executed
    #####:   98:    scf::ExecuteRegionOp exec = wrapInExecuteRegion(rewriter, target);
call    0 never executed
    #####:   99:    if (!exec) {
branch  0 never executed
branch  1 never executed
    #####:  100:      DiagnosedSilenceableFailure diag = emitSilenceableError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  101:                                         << "failed to outline";
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  102:      diag.attachNote(target->getLoc()) << "target op";
call    0 never executed
call    1 never executed
    #####:  103:      results.set(getTransformed().cast<OpResult>(), {});
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  104:      return diag;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  105:    }
    #####:  106:    func::CallOp call;
call    0 never executed
    #####:  107:    FailureOr<func::FuncOp> outlined = outlineSingleBlockRegion(
call    0 never executed
    #####:  108:        rewriter, location, exec.getRegion(), getFuncName(), &call);
call    0 never executed
call    1 never executed
        -:  109:
    #####:  110:    if (failed(outlined)) {
branch  0 never executed
branch  1 never executed
    #####:  111:      (void)reportUnknownTransformError(target);
call    0 never executed
    #####:  112:      return DiagnosedSilenceableFailure::definiteFailure();
        -:  113:    }
        -:  114:
    #####:  115:    if (symbolTableOp) {
branch  0 never executed
branch  1 never executed
    #####:  116:      SymbolTable &symbolTable =
    #####:  117:          symbolTables.try_emplace(symbolTableOp, symbolTableOp)
call    0 never executed
    #####:  118:              .first->getSecond();
call    0 never executed
call    1 never executed
    #####:  119:      symbolTable.insert(*outlined);
call    0 never executed
    #####:  120:      call.setCalleeAttr(FlatSymbolRefAttr::get(*outlined));
call    0 never executed
call    1 never executed
        -:  121:    }
    #####:  122:    transformed.push_back(*outlined);
call    0 never executed
call    1 never executed
        -:  123:  }
    #####:  124:  results.set(getTransformed().cast<OpResult>(), transformed);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  125:  return DiagnosedSilenceableFailure::success();
        -:  126:}
        -:  127:
        -:  128://===----------------------------------------------------------------------===//
        -:  129:// LoopPeelOp
        -:  130://===----------------------------------------------------------------------===//
        -:  131:
        -:  132:DiagnosedSilenceableFailure
function _ZN4mlir9transform10LoopPeelOp10applyToOneENS_3scf5ForOpERN4llvm11SmallVectorIPNS_9OperationELj6EEERNS0_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  133:transform::LoopPeelOp::applyToOne(scf::ForOp target,
        -:  134:                                  SmallVector<Operation *> &results,
        -:  135:                                  transform::TransformState &state) {
    #####:  136:  scf::ForOp result;
call    0 never executed
    #####:  137:  IRRewriter rewriter(target->getContext());
call    0 never executed
call    1 never executed
        -:  138:  // This helper returns failure when peeling does not occur (i.e. when the IR
        -:  139:  // is not modified). This is not a failure for the op as the postcondition:
        -:  140:  //    "the loop trip count is divisible by the step"
        -:  141:  // is valid.
    #####:  142:  LogicalResult status =
    #####:  143:      scf::peelAndCanonicalizeForLoop(rewriter, target, result);
call    0 never executed
        -:  144:  // TODO: Return both the peeled loop and the remainder loop.
    #####:  145:  results.push_back(failed(status) ? target : result);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  146:  return DiagnosedSilenceableFailure(success());
call    0 never executed
        -:  147:}
        -:  148:
        -:  149://===----------------------------------------------------------------------===//
        -:  150:// LoopPipelineOp
        -:  151://===----------------------------------------------------------------------===//
        -:  152:
        -:  153:/// Callback for PipeliningOption. Populates `schedule` with the mapping from an
        -:  154:/// operation to its logical time position given the iteration interval and the
        -:  155:/// read latency. The latter is only relevant for vector transfers.
        -:  156:static void
function _ZL14loopSchedulingN4mlir3scf5ForOpERSt6vectorISt4pairIPNS_9OperationEjESaIS6_EEjj called 0 returned 0% blocks executed 0%
    #####:  157:loopScheduling(scf::ForOp forOp,
        -:  158:               std::vector<std::pair<Operation *, unsigned>> &schedule,
        -:  159:               unsigned iterationInterval, unsigned readLatency) {
    #####:  160:  auto getLatency = [&](Operation *op) -> unsigned {
    #####:  161:    if (isa<vector::TransferReadOp>(op))
branch  0 never executed
branch  1 never executed
    #####:  162:      return readLatency;
        -:  163:    return 1;
    #####:  164:  };
        -:  165:
    #####:  166:  DenseMap<Operation *, unsigned> opCycles;
call    0 never executed
    #####:  167:  std::map<unsigned, std::vector<Operation *>> wrappedSchedule;
call    0 never executed
call    1 never executed
    #####:  168:  for (Operation &op : forOp.getBody()->getOperations()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  169:    if (isa<scf::YieldOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  170:      continue;
    #####:  171:    unsigned earlyCycle = 0;
    #####:  172:    for (Value operand : op.getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  173:      Operation *def = operand.getDefiningOp();
call    0 never executed
    #####:  174:      if (!def)
branch  0 never executed
branch  1 never executed
    #####:  175:        continue;
    #####:  176:      earlyCycle = std::max(earlyCycle, opCycles[def] + getLatency(def));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  177:    }
    #####:  178:    opCycles[&op] = earlyCycle;
call    0 never executed
    #####:  179:    wrappedSchedule[earlyCycle % iterationInterval].push_back(&op);
call    0 never executed
call    1 never executed
        -:  180:  }
    #####:  181:  for (const auto &it : wrappedSchedule) {
branch  0 never executed
branch  1 never executed
    #####:  182:    for (Operation *op : it.second) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  183:      unsigned cycle = opCycles[op];
call    0 never executed
    #####:  184:      schedule.emplace_back(op, cycle / iterationInterval);
call    0 never executed
        -:  185:    }
        -:  186:  }
    #####:  187:}
        -:  188:
        -:  189:DiagnosedSilenceableFailure
function _ZN4mlir9transform14LoopPipelineOp10applyToOneENS_3scf5ForOpERN4llvm11SmallVectorIPNS_9OperationELj6EEERNS0_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  190:transform::LoopPipelineOp::applyToOne(scf::ForOp target,
        -:  191:                                      SmallVector<Operation *> &results,
        -:  192:                                      transform::TransformState &state) {
    #####:  193:  scf::PipeliningOption options;
call    0 never executed
    #####:  194:  options.getScheduleFn =
function _ZZN4mlir9transform14LoopPipelineOp10applyToOneENS_3scf5ForOpERN4llvm11SmallVectorIPNS_9OperationELj6EEERNS0_14TransformStateEENUlS3_RSt6vectorISt4pairIS7_jESaISE_EEE_clES3_SH_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  195:      [this](scf::ForOp forOp,
    #####:  196:             std::vector<std::pair<Operation *, unsigned>> &schedule) mutable {
    #####:  197:        loopScheduling(forOp, schedule, getIterationInterval(),
call    0 never executed
call    1 never executed
    #####:  198:                       getReadLatency());
call    0 never executed
    #####:  199:      };
call    0 never executed
    #####:  200:  scf::ForLoopPipeliningPattern pattern(options, target->getContext());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  201:  SimpleRewriter rewriter(getContext());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  202:  rewriter.setInsertionPoint(target);
call    0 never executed
    #####:  203:  FailureOr<scf::ForOp> patternResult =
    #####:  204:      pattern.returningMatchAndRewrite(target, rewriter);
call    0 never executed
    #####:  205:  if (succeeded(patternResult)) {
branch  0 never executed
branch  1 never executed
    #####:  206:    results.push_back(*patternResult);
call    0 never executed
    #####:  207:    return DiagnosedSilenceableFailure(success());
        -:  208:  }
    #####:  209:  results.assign(1, nullptr);
call    0 never executed
    #####:  210:  return emitDefaultSilenceableFailure(target);
call    0 never executed
        -:  211:}
        -:  212:
        -:  213://===----------------------------------------------------------------------===//
        -:  214:// LoopUnrollOp
        -:  215://===----------------------------------------------------------------------===//
        -:  216:
        -:  217:DiagnosedSilenceableFailure
function _ZN4mlir9transform12LoopUnrollOp10applyToOneENS_3scf5ForOpERN4llvm11SmallVectorIPNS_9OperationELj6EEERNS0_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  218:transform::LoopUnrollOp::applyToOne(scf::ForOp target,
        -:  219:                                    SmallVector<Operation *> &results,
        -:  220:                                    transform::TransformState &state) {
    #####:  221:  if (failed(loopUnrollByFactor(target, getFactor()))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  222:    Diagnostic diag(target->getLoc(), DiagnosticSeverity::Note);
call    0 never executed
    #####:  223:    diag << "op failed to unroll";
call    0 never executed
    #####:  224:    return DiagnosedSilenceableFailure::silenceableFailure(std::move(diag));
call    0 never executed
call    1 never executed
        -:  225:  }
    #####:  226:  return DiagnosedSilenceableFailure(success());
        -:  227:}
        -:  228:
        -:  229://===----------------------------------------------------------------------===//
        -:  230:// Transform op registration
        -:  231://===----------------------------------------------------------------------===//
        -:  232:
        -:  233:namespace {
   232313:  234:class SCFTransformDialectExtension
call    0 returned 100%
call    1 returned 100%
        -:  235:    : public transform::TransformDialectExtension<
        -:  236:          SCFTransformDialectExtension> {
        -:  237:public:
        -:  238:  using Base::Base;
        -:  239:
function _ZN12_GLOBAL__N_128SCFTransformDialectExtension4initEv called 128629 returned 100% blocks executed 100%
   128629:  240:  void init() {
   128629:  241:    declareGeneratedDialect<AffineDialect>();
call    0 returned 100%
   128629:  242:    declareGeneratedDialect<func::FuncDialect>();
call    0 returned 100%
        -:  243:
   128629:  244:    registerTransformOps<
        -:  245:#define GET_OP_LIST
        -:  246:#include "mlir/Dialect/SCF/TransformOps/SCFTransformOps.cpp.inc"
   128629:  247:        >();
call    0 returned 100%
   128629:  248:  }
        -:  249:};
        -:  250:} // namespace
        -:  251:
        -:  252:#define GET_OP_CLASSES
        -:  253:#include "mlir/Dialect/SCF/TransformOps/SCFTransformOps.cpp.inc"
        -:  254:
function _ZN4mlir3scf33registerTransformDialectExtensionERNS_15DialectRegistryE called 128629 returned 100% blocks executed 100%
   128629:  255:void mlir::scf::registerTransformDialectExtension(DialectRegistry &registry) {
   128629:  256:  registry.addExtensions<SCFTransformDialectExtension>();
call    0 returned 100%
   128629:  257:}
