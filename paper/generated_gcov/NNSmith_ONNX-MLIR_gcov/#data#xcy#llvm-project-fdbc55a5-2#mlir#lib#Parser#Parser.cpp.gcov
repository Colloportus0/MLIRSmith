        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Parser/Parser.cpp
        -:    0:Graph:../tools/mlir/lib/Parser/CMakeFiles/obj.MLIRParser.dir/Parser.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Parser/CMakeFiles/obj.MLIRParser.dir/Parser.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- Parser.cpp - MLIR Unified Parser Interface -------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the parser for the MLIR textual form.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Parser/Parser.h"
        -:   14:#include "mlir/AsmParser/AsmParser.h"
        -:   15:#include "mlir/Bytecode/BytecodeReader.h"
        -:   16:#include "llvm/Support/SourceMgr.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
function _ZN4mlir15parseSourceFileERKN4llvm9SourceMgrEPNS_5BlockERKNS_12ParserConfigEPNS_12LocationAttrE called 104717 returned 100% blocks executed 73%
   104717:   20:LogicalResult mlir::parseSourceFile(const llvm::SourceMgr &sourceMgr,
        -:   21:                                    Block *block, const ParserConfig &config,
        -:   22:                                    LocationAttr *sourceFileLoc) {
   104717:   23:  const auto *sourceBuf = sourceMgr.getMemoryBuffer(sourceMgr.getMainFileID());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   104717:   24:  if (sourceFileLoc) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   104717:   25:    *sourceFileLoc = FileLineColLoc::get(config.getContext(),
   104717:   26:                                         sourceBuf->getBufferIdentifier(),
   104717:   27:                                         /*line=*/0, /*column=*/0);
call    0 returned 100%
call    1 returned 100%
        -:   28:  }
   104717:   29:  if (isBytecode(*sourceBuf))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   30:    return readBytecodeFile(*sourceBuf, block, config);
call    0 never executed
call    1 never executed
   104717:   31:  return parseAsmSourceFile(sourceMgr, block, config);
call    0 returned 100%
        -:   32:}
        -:   33:
function _ZN4mlir15parseSourceFileEN4llvm9StringRefEPNS_5BlockERKNS_12ParserConfigEPNS_12LocationAttrE called 0 returned 0% blocks executed 0%
    #####:   34:LogicalResult mlir::parseSourceFile(llvm::StringRef filename, Block *block,
        -:   35:                                    const ParserConfig &config,
        -:   36:                                    LocationAttr *sourceFileLoc) {
    #####:   37:  llvm::SourceMgr sourceMgr;
call    0 never executed
    #####:   38:  return parseSourceFile(filename, sourceMgr, block, config, sourceFileLoc);
call    0 never executed
call    1 never executed
        -:   39:}
        -:   40:
function _ZN4mlir15parseSourceFileEN4llvm9StringRefERNS0_9SourceMgrEPNS_5BlockERKNS_12ParserConfigEPNS_12LocationAttrE called 0 returned 0% blocks executed 0%
    #####:   41:LogicalResult mlir::parseSourceFile(llvm::StringRef filename,
        -:   42:                                    llvm::SourceMgr &sourceMgr, Block *block,
        -:   43:                                    const ParserConfig &config,
        -:   44:                                    LocationAttr *sourceFileLoc) {
    #####:   45:  if (sourceMgr.getNumBuffers() != 0) {
branch  0 never executed
branch  1 never executed
        -:   46:    // TODO: Extend to support multiple buffers.
    #####:   47:    return emitError(mlir::UnknownLoc::get(config.getContext()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   48:                     "only main buffer parsed at the moment");
call    0 never executed
        -:   49:  }
    #####:   50:  auto fileOrErr = llvm::MemoryBuffer::getFileOrSTDIN(filename);
call    0 never executed
call    1 never executed
    #####:   51:  if (std::error_code error = fileOrErr.getError())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   52:    return emitError(mlir::UnknownLoc::get(config.getContext()),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   53:                     "could not open input file " + filename);
call    0 never executed
call    1 never executed
        -:   54:
        -:   55:  // Load the MLIR source file.
    #####:   56:  sourceMgr.AddNewSourceBuffer(std::move(*fileOrErr), SMLoc());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   57:  return parseSourceFile(sourceMgr, block, config, sourceFileLoc);
call    0 never executed
        -:   58:}
        -:   59:
function _ZN4mlir17parseSourceStringEN4llvm9StringRefEPNS_5BlockERKNS_12ParserConfigEPNS_12LocationAttrE called 1024 returned 100% blocks executed 67%
     1024:   60:LogicalResult mlir::parseSourceString(llvm::StringRef sourceStr, Block *block,
        -:   61:                                      const ParserConfig &config,
        -:   62:                                      LocationAttr *sourceFileLoc) {
     1024:   63:  auto memBuffer = llvm::MemoryBuffer::getMemBuffer(sourceStr);
call    0 returned 100%
     1024:   64:  if (!memBuffer)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:    return failure();
        -:   66:
     2048:   67:  llvm::SourceMgr sourceMgr;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     1024:   68:  sourceMgr.AddNewSourceBuffer(std::move(memBuffer), SMLoc());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     1024:   69:  return parseSourceFile(sourceMgr, block, config, sourceFileLoc);
call    0 returned 100%
call    1 returned 100%
        -:   70:}
