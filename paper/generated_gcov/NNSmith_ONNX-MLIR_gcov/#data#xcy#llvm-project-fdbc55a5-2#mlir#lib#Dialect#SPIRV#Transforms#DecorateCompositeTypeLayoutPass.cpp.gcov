        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SPIRV/Transforms/DecorateCompositeTypeLayoutPass.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/DecorateCompositeTypeLayoutPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/DecorateCompositeTypeLayoutPass.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- DecorateCompositeTypeLayoutPass.cpp - Decorate composite type ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to decorate the composite types used by
        -:   10:// composite objects in the StorageBuffer, PhysicalStorageBuffer, Uniform, and
        -:   11:// PushConstant storage classes with layout information. See SPIR-V spec
        -:   12:// "2.16.2. Validation Rules for Shader Capabilities" for more details.
        -:   13://
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#include "mlir/Dialect/SPIRV/Transforms/Passes.h"
        -:   17:
        -:   18:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   20:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   21:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   22:#include "mlir/Transforms/DialectConversion.h"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace mlir {
        -:   27:namespace spirv {
        -:   28:#define GEN_PASS_DEF_SPIRVCOMPOSITETYPELAYOUT
        -:   29:#include "mlir/Dialect/SPIRV/Transforms/Passes.h.inc"
        -:   30:} // namespace spirv
        -:   31:} // namespace mlir
        -:   32:
        -:   33:namespace {
        -:   34:class SPIRVGlobalVariableOpLayoutInfoDecoration
        -:   35:    : public OpRewritePattern<spirv::GlobalVariableOp> {
        -:   36:public:
        -:   37:  using OpRewritePattern<spirv::GlobalVariableOp>::OpRewritePattern;
        -:   38:
function _ZNK12_GLOBAL__N_141SPIRVGlobalVariableOpLayoutInfoDecoration15matchAndRewriteEN4mlir5spirv16GlobalVariableOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  LogicalResult matchAndRewrite(spirv::GlobalVariableOp op,
        -:   40:                                PatternRewriter &rewriter) const override {
    #####:   41:    SmallVector<NamedAttribute, 4> globalVarAttrs;
call    0 never executed
        -:   42:
    #####:   43:    auto ptrType = op.getType().cast<spirv::PointerType>();
call    0 never executed
call    1 never executed
    #####:   44:    auto structType = VulkanLayoutUtils::decorateType(
    #####:   45:        ptrType.getPointeeType().cast<spirv::StructType>());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   46:
    #####:   47:    if (!structType)
branch  0 never executed
branch  1 never executed
    #####:   48:      return failure();
        -:   49:
    #####:   50:    auto decoratedType =
    #####:   51:        spirv::PointerType::get(structType, ptrType.getStorageClass());
call    0 never executed
call    1 never executed
        -:   52:
        -:   53:    // Save all named attributes except "type" attribute.
    #####:   54:    for (const auto &attr : op->getAttrs()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:      if (attr.getName() == "type")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   56:        continue;
    #####:   57:      globalVarAttrs.push_back(attr);
call    0 never executed
        -:   58:    }
        -:   59:
    #####:   60:    rewriter.replaceOpWithNewOp<spirv::GlobalVariableOp>(
    #####:   61:        op, TypeAttr::get(decoratedType), globalVarAttrs);
call    0 never executed
call    1 never executed
    #####:   62:    return success();
branch  0 never executed
branch  1 never executed
        -:   63:  }
        -:   64:};
        -:   65:
        -:   66:class SPIRVAddressOfOpLayoutInfoDecoration
        -:   67:    : public OpRewritePattern<spirv::AddressOfOp> {
        -:   68:public:
        -:   69:  using OpRewritePattern<spirv::AddressOfOp>::OpRewritePattern;
        -:   70:
function _ZNK12_GLOBAL__N_136SPIRVAddressOfOpLayoutInfoDecoration15matchAndRewriteEN4mlir5spirv11AddressOfOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   71:  LogicalResult matchAndRewrite(spirv::AddressOfOp op,
        -:   72:                                PatternRewriter &rewriter) const override {
    #####:   73:    auto spirvModule = op->getParentOfType<spirv::ModuleOp>();
call    0 never executed
    #####:   74:    auto varName = op.getVariableAttr();
call    0 never executed
    #####:   75:    auto varOp = spirvModule.lookupSymbol<spirv::GlobalVariableOp>(varName);
call    0 never executed
        -:   76:
    #####:   77:    rewriter.replaceOpWithNewOp<spirv::AddressOfOp>(
    #####:   78:        op, varOp.getType(), SymbolRefAttr::get(varName.getAttr()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   79:    return success();
        -:   80:  }
        -:   81:};
        -:   82:
        -:   83:template <typename OpT>
        -:   84:class SPIRVPassThroughConversion : public OpConversionPattern<OpT> {
        -:   85:public:
        -:   86:  using OpConversionPattern<OpT>::OpConversionPattern;
        -:   87:
        -:   88:  LogicalResult
    #####:   89:  matchAndRewrite(OpT op, typename OpT::Adaptor adaptor,
        -:   90:                  ConversionPatternRewriter &rewriter) const override {
    #####:   91:    rewriter.updateRootInPlace(op,
    #####:   92:                               [&] { op->setOperands(adaptor.getOperands()); });
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   93:    return success();
        -:   94:  }
------------------
_ZNK12_GLOBAL__N_126SPIRVPassThroughConversionIN4mlir5spirv13AccessChainOpEE15matchAndRewriteES3_NS2_20AccessChainOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_126SPIRVPassThroughConversionIN4mlir5spirv13AccessChainOpEE15matchAndRewriteES3_NS2_20AccessChainOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   89:  matchAndRewrite(OpT op, typename OpT::Adaptor adaptor,
        -:   90:                  ConversionPatternRewriter &rewriter) const override {
    #####:   91:    rewriter.updateRootInPlace(op,
call    0 never executed
call    1 never executed
        -:   92:                               [&] { op->setOperands(adaptor.getOperands()); });
    #####:   93:    return success();
        -:   94:  }
------------------
_ZNK12_GLOBAL__N_126SPIRVPassThroughConversionIN4mlir5spirv6LoadOpEE15matchAndRewriteES3_NS2_13LoadOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_126SPIRVPassThroughConversionIN4mlir5spirv6LoadOpEE15matchAndRewriteES3_NS2_13LoadOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   89:  matchAndRewrite(OpT op, typename OpT::Adaptor adaptor,
        -:   90:                  ConversionPatternRewriter &rewriter) const override {
    #####:   91:    rewriter.updateRootInPlace(op,
call    0 never executed
call    1 never executed
        -:   92:                               [&] { op->setOperands(adaptor.getOperands()); });
    #####:   93:    return success();
        -:   94:  }
------------------
_ZNK12_GLOBAL__N_126SPIRVPassThroughConversionIN4mlir5spirv7StoreOpEE15matchAndRewriteES3_NS2_14StoreOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_126SPIRVPassThroughConversionIN4mlir5spirv7StoreOpEE15matchAndRewriteES3_NS2_14StoreOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   89:  matchAndRewrite(OpT op, typename OpT::Adaptor adaptor,
        -:   90:                  ConversionPatternRewriter &rewriter) const override {
    #####:   91:    rewriter.updateRootInPlace(op,
call    0 never executed
call    1 never executed
        -:   92:                               [&] { op->setOperands(adaptor.getOperands()); });
    #####:   93:    return success();
        -:   94:  }
------------------
        -:   95:};
        -:   96:} // namespace
        -:   97:
      517:   98:static void populateSPIRVLayoutInfoPatterns(RewritePatternSet &patterns) {
      517:   99:  patterns.add<SPIRVGlobalVariableOpLayoutInfoDecoration,
        -:  100:               SPIRVAddressOfOpLayoutInfoDecoration,
        -:  101:               SPIRVPassThroughConversion<spirv::AccessChainOp>,
        -:  102:               SPIRVPassThroughConversion<spirv::LoadOp>,
        -:  103:               SPIRVPassThroughConversion<spirv::StoreOp>>(
     1034:  104:      patterns.getContext());
        -:  105:}
        -:  106:
        -:  107:namespace {
  129234*:  108:class DecorateSPIRVCompositeTypeLayoutPass
call    0 never executed
call    1 returned 100%
        -:  109:    : public spirv::impl::SPIRVCompositeTypeLayoutBase<
        -:  110:          DecorateSPIRVCompositeTypeLayoutPass> {
        -:  111:  void runOnOperation() override;
        -:  112:};
        -:  113:} // namespace
        -:  114:
function _ZN12_GLOBAL__N_136DecorateSPIRVCompositeTypeLayoutPass14runOnOperationEv called 517 returned 100% blocks executed 75%
      517:  115:void DecorateSPIRVCompositeTypeLayoutPass::runOnOperation() {
      517:  116:  auto module = getOperation();
call    0 returned 100%
      517:  117:  RewritePatternSet patterns(module.getContext());
call    0 returned 100%
call    1 returned 100%
      517:  118:  populateSPIRVLayoutInfoPatterns(patterns);
call    0 returned 100%
     1034:  119:  ConversionTarget target(*(module.getContext()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      517:  120:  target.addLegalDialect<spirv::SPIRVDialect>();
call    0 returned 100%
      517:  121:  target.addLegalOp<func::FuncOp>();
call    0 returned 100%
      517:  122:  target.addDynamicallyLegalOp<spirv::GlobalVariableOp>(
call    0 returned 100%
    #####:  123:      [](spirv::GlobalVariableOp op) {
    #####:  124:        return VulkanLayoutUtils::isLegalType(op.getType());
call    0 never executed
call    1 never executed
        -:  125:      });
        -:  126:
        -:  127:  // Change the type for the direct users.
function _ZZN12_GLOBAL__N_136DecorateSPIRVCompositeTypeLayoutPass14runOnOperationEvENKUlN4mlir5spirv11AddressOfOpEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     517*:  128:  target.addDynamicallyLegalOp<spirv::AddressOfOp>([](spirv::AddressOfOp op) {
call    0 returned 100%
    #####:  129:    return VulkanLayoutUtils::isLegalType(op.getPointer().getType());
call    0 never executed
call    1 never executed
        -:  130:  });
        -:  131:
        -:  132:  // Change the type for the indirect users.
      517:  133:  target.addDynamicallyLegalOp<spirv::AccessChainOp, spirv::LoadOp,
function _ZZN12_GLOBAL__N_136DecorateSPIRVCompositeTypeLayoutPass14runOnOperationEvENKUlPN4mlir9OperationEE1_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     517*:  134:                               spirv::StoreOp>([&](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:  135:    for (Value operand : op->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  136:      auto addrOp = operand.getDefiningOp<spirv::AddressOfOp>();
call    0 never executed
    #####:  137:      if (addrOp &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  138:          !VulkanLayoutUtils::isLegalType(addrOp.getPointer().getType()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  139:        return false;
        -:  140:    }
    #####:  141:    return true;
        -:  142:  });
        -:  143:
     1034:  144:  FrozenRewritePatternSet frozenPatterns(std::move(patterns));
call    0 returned 100%
call    1 returned 100%
     517*:  145:  for (auto spirvModule : module.getOps<spirv::ModuleOp>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
    #####:  146:    if (failed(applyFullConversion(spirvModule, target, frozenPatterns)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  147:      signalPassFailure();
call    0 never executed
      517:  148:}
        -:  149:
        -:  150:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir5spirv42createDecorateSPIRVCompositeTypeLayoutPassEv called 129234 returned 100% blocks executed 100%
   129234:  151:mlir::spirv::createDecorateSPIRVCompositeTypeLayoutPass() {
   129234:  152:  return std::make_unique<DecorateSPIRVCompositeTypeLayoutPass>();
call    0 returned 100%
        -:  153:}
