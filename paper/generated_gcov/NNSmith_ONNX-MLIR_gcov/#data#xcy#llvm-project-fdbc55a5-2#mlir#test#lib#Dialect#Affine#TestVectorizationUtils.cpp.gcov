        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/Affine/TestVectorizationUtils.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestVectorizationUtils.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestVectorizationUtils.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- VectorizerTestPass.cpp - VectorizerTestPass Pass Impl --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a simple testing pass for vectorization functionality.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Analysis/SliceAnalysis.h"
        -:   14:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   15:#include "mlir/Dialect/Affine/Analysis/NestedMatcher.h"
        -:   16:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   17:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   18:#include "mlir/Dialect/Affine/Utils.h"
        -:   19:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   20:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   21:#include "mlir/Dialect/Vector/Utils/VectorUtils.h"
        -:   22:#include "mlir/IR/Builders.h"
        -:   23:#include "mlir/IR/BuiltinTypes.h"
        -:   24:#include "mlir/IR/Diagnostics.h"
        -:   25:#include "mlir/Pass/Pass.h"
        -:   26:#include "mlir/Transforms/Passes.h"
        -:   27:
        -:   28:#include "llvm/ADT/STLExtras.h"
        -:   29:#include "llvm/Support/CommandLine.h"
        -:   30:#include "llvm/Support/Debug.h"
        -:   31:
        -:   32:#define DEBUG_TYPE "affine-super-vectorizer-test"
        -:   33:
        -:   34:using namespace mlir;
        -:   35:
        -:   36:static llvm::cl::OptionCategory clOptionsCategory(DEBUG_TYPE " options");
        -:   37:
        -:   38:static llvm::cl::list<int> clTestVectorShapeRatio(
        -:   39:    "vector-shape-ratio",
        -:   40:    llvm::cl::desc("Specify the HW vector size for vectorization"),
        -:   41:    llvm::cl::cat(clOptionsCategory));
        -:   42:static llvm::cl::opt<bool> clTestForwardSlicingAnalysis(
        -:   43:    "forward-slicing",
        -:   44:    llvm::cl::desc("Enable testing forward static slicing and topological sort "
        -:   45:                   "functionalities"),
        -:   46:    llvm::cl::cat(clOptionsCategory));
        -:   47:static llvm::cl::opt<bool> clTestBackwardSlicingAnalysis(
        -:   48:    "backward-slicing",
        -:   49:    llvm::cl::desc("Enable testing backward static slicing and "
        -:   50:                   "topological sort functionalities"),
        -:   51:    llvm::cl::cat(clOptionsCategory));
        -:   52:static llvm::cl::opt<bool> clTestSlicingAnalysis(
        -:   53:    "slicing",
        -:   54:    llvm::cl::desc("Enable testing static slicing and topological sort "
        -:   55:                   "functionalities"),
        -:   56:    llvm::cl::cat(clOptionsCategory));
        -:   57:static llvm::cl::opt<bool> clTestComposeMaps(
        -:   58:    "compose-maps",
        -:   59:    llvm::cl::desc(
        -:   60:        "Enable testing the composition of AffineMap where each "
        -:   61:        "AffineMap in the composition is specified as the affine_map attribute "
        -:   62:        "in a constant op."),
        -:   63:    llvm::cl::cat(clOptionsCategory));
        -:   64:static llvm::cl::opt<bool> clTestVecAffineLoopNest(
        -:   65:    "vectorize-affine-loop-nest",
        -:   66:    llvm::cl::desc(
        -:   67:        "Enable testing for the 'vectorizeAffineLoopNest' utility by "
        -:   68:        "vectorizing the outermost loops found"),
        -:   69:    llvm::cl::cat(clOptionsCategory));
        -:   70:
        -:   71:namespace {
   168535:   72:struct VectorizerTestPass
call    0 returned 100%
call    1 returned 100%
        -:   73:    : public PassWrapper<VectorizerTestPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_118VectorizerTestPass13resolveTypeIDEv called 129295 returned 100% blocks executed 100%
   129295:   74:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(VectorizerTestPass)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   75:
        -:   76:  static constexpr auto kTestAffineMapOpName = "test_affine_map";
        -:   77:  static constexpr auto kTestAffineMapAttrName = "affine_map";
function _ZNK12_GLOBAL__N_118VectorizerTestPass20getDependentDialectsERN4mlir15DialectRegistryE called 659 returned 100% blocks executed 100%
      659:   78:  void getDependentDialects(DialectRegistry &registry) const override {
      659:   79:    registry.insert<vector::VectorDialect>();
call    0 returned 100%
      659:   80:  }
function _ZNK12_GLOBAL__N_118VectorizerTestPass11getArgumentEv called 128647 returned 100% blocks executed 100%
   128647:   81:  StringRef getArgument() const final { return "affine-super-vectorizer-test"; }
function _ZNK12_GLOBAL__N_118VectorizerTestPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   82:  StringRef getDescription() const final {
   128636:   83:    return "Tests vectorizer standalone functionality.";
        -:   84:  }
        -:   85:
        -:   86:  void runOnOperation() override;
        -:   87:  void testVectorShapeRatio(llvm::raw_ostream &outs);
        -:   88:  void testForwardSlicing(llvm::raw_ostream &outs);
        -:   89:  void testBackwardSlicing(llvm::raw_ostream &outs);
        -:   90:  void testSlicing(llvm::raw_ostream &outs);
        -:   91:  void testComposeMaps(llvm::raw_ostream &outs);
        -:   92:
        -:   93:  /// Test for 'vectorizeAffineLoopNest' utility.
        -:   94:  void testVecAffineLoopNest();
        -:   95:};
        -:   96:
        -:   97:} // namespace
        -:   98:
function _ZN12_GLOBAL__N_118VectorizerTestPass20testVectorShapeRatioERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   99:void VectorizerTestPass::testVectorShapeRatio(llvm::raw_ostream &outs) {
    #####:  100:  auto f = getOperation();
call    0 never executed
    #####:  101:  using matcher::Op;
    #####:  102:  SmallVector<int64_t, 8> shape(clTestVectorShapeRatio.begin(),
call    0 never executed
    #####:  103:                                clTestVectorShapeRatio.end());
call    0 never executed
    #####:  104:  auto subVectorType =
call    0 never executed
    #####:  105:      VectorType::get(shape, FloatType::getF32(f.getContext()));
call    0 never executed
call    1 never executed
        -:  106:  // Only filter operations that operate on a strict super-vector and have one
        -:  107:  // return. This makes testing easier.
function _ZZN12_GLOBAL__N_118VectorizerTestPass20testVectorShapeRatioERN4llvm11raw_ostreamEENKUlRN4mlir9OperationEE_clES6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  108:  auto filter = [&](Operation &op) {
    #####:  109:    assert(subVectorType.getElementType().isF32() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  110:           "Only f32 supported for now");
    #####:  111:    if (!matcher::operatesOnSuperVectorsOf(op, subVectorType)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:      return false;
        -:  113:    }
    #####:  114:    if (op.getNumResults() != 1) {
branch  0 never executed
branch  1 never executed
    #####:  115:      return false;
        -:  116:    }
        -:  117:    return true;
    #####:  118:  };
    #####:  119:  auto pat = Op(filter);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  120:  SmallVector<NestedMatch, 8> matches;
call    0 never executed
call    1 never executed
    #####:  121:  pat.match(f, &matches);
call    0 never executed
    #####:  122:  for (auto m : matches) {
branch  0 never executed
branch  1 never executed
    #####:  123:    auto *opInst = m.getMatchedOperation();
call    0 never executed
        -:  124:    // This is a unit test that only checks and prints shape ratio.
        -:  125:    // As a consequence we write only Ops with a single return type for the
        -:  126:    // purpose of this test. If we need to test more intricate behavior in the
        -:  127:    // future we can always extend.
    #####:  128:    auto superVectorType = opInst->getResult(0).getType().cast<VectorType>();
call    0 never executed
    #####:  129:    auto ratio = shapeRatio(superVectorType, subVectorType);
call    0 never executed
    #####:  130:    if (!ratio) {
branch  0 never executed
branch  1 never executed
    #####:  131:      opInst->emitRemark("NOT MATCHED");
call    0 never executed
call    1 never executed
call    2 never executed
        -:  132:    } else {
    #####:  133:      outs << "\nmatched: " << *opInst << " with shape ratio: ";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  134:      llvm::interleaveComma(MutableArrayRef<int64_t>(*ratio), outs);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  135:    }
        -:  136:  }
    #####:  137:}
        -:  138:
function _ZL21patternTestSlicingOpsv called 0 returned 0% blocks executed 0%
    #####:  139:static NestedPattern patternTestSlicingOps() {
    #####:  140:  using matcher::Op;
        -:  141:  // Match all operations with the kTestSlicingOpName name.
function _ZZL21patternTestSlicingOpsvENKUlRN4mlir9OperationEE_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  142:  auto filter = [](Operation &op) {
        -:  143:    // Just use a custom op name for this test, it makes life easier.
    #####:  144:    return op.getName().getStringRef() == "slicing-test-op";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  145:  };
    #####:  146:  return Op(filter);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  147:}
        -:  148:
function _ZN12_GLOBAL__N_118VectorizerTestPass19testBackwardSlicingERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  149:void VectorizerTestPass::testBackwardSlicing(llvm::raw_ostream &outs) {
    #####:  150:  auto f = getOperation();
call    0 never executed
    #####:  151:  outs << "\n" << f.getName();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  152:
    #####:  153:  SmallVector<NestedMatch, 8> matches;
call    0 never executed
    #####:  154:  patternTestSlicingOps().match(f, &matches);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  155:  for (auto m : matches) {
branch  0 never executed
branch  1 never executed
    #####:  156:    SetVector<Operation *> backwardSlice;
call    0 never executed
call    1 never executed
    #####:  157:    getBackwardSlice(m.getMatchedOperation(), &backwardSlice);
call    0 never executed
    #####:  158:    outs << "\nmatched: " << *m.getMatchedOperation()
call    0 never executed
call    1 never executed
    #####:  159:         << " backward static slice: ";
call    0 never executed
    #####:  160:    for (auto *op : backwardSlice)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  161:      outs << "\n" << *op;
call    0 never executed
call    1 never executed
        -:  162:  }
    #####:  163:}
        -:  164:
function _ZN12_GLOBAL__N_118VectorizerTestPass18testForwardSlicingERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  165:void VectorizerTestPass::testForwardSlicing(llvm::raw_ostream &outs) {
    #####:  166:  auto f = getOperation();
call    0 never executed
    #####:  167:  outs << "\n" << f.getName();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  168:
    #####:  169:  SmallVector<NestedMatch, 8> matches;
call    0 never executed
    #####:  170:  patternTestSlicingOps().match(f, &matches);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  171:  for (auto m : matches) {
branch  0 never executed
branch  1 never executed
    #####:  172:    SetVector<Operation *> forwardSlice;
call    0 never executed
call    1 never executed
    #####:  173:    getForwardSlice(m.getMatchedOperation(), &forwardSlice);
call    0 never executed
    #####:  174:    outs << "\nmatched: " << *m.getMatchedOperation()
call    0 never executed
call    1 never executed
    #####:  175:         << " forward static slice: ";
call    0 never executed
    #####:  176:    for (auto *op : forwardSlice)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  177:      outs << "\n" << *op;
call    0 never executed
call    1 never executed
        -:  178:  }
    #####:  179:}
        -:  180:
function _ZN12_GLOBAL__N_118VectorizerTestPass11testSlicingERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  181:void VectorizerTestPass::testSlicing(llvm::raw_ostream &outs) {
    #####:  182:  auto f = getOperation();
call    0 never executed
    #####:  183:  outs << "\n" << f.getName();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  184:
    #####:  185:  SmallVector<NestedMatch, 8> matches;
call    0 never executed
    #####:  186:  patternTestSlicingOps().match(f, &matches);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  187:  for (auto m : matches) {
branch  0 never executed
branch  1 never executed
    #####:  188:    SetVector<Operation *> staticSlice = getSlice(m.getMatchedOperation());
call    0 never executed
call    1 never executed
    #####:  189:    outs << "\nmatched: " << *m.getMatchedOperation() << " static slice: ";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  190:    for (auto *op : staticSlice)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  191:      outs << "\n" << *op;
call    0 never executed
call    1 never executed
        -:  192:  }
    #####:  193:}
        -:  194:
function _ZL30customOpWithAffineMapAttributeRN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  195:static bool customOpWithAffineMapAttribute(Operation &op) {
    #####:  196:  return op.getName().getStringRef() ==
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  197:         VectorizerTestPass::kTestAffineMapOpName;
        -:  198:}
        -:  199:
function _ZN12_GLOBAL__N_118VectorizerTestPass15testComposeMapsERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  200:void VectorizerTestPass::testComposeMaps(llvm::raw_ostream &outs) {
    #####:  201:  auto f = getOperation();
call    0 never executed
        -:  202:
    #####:  203:  using matcher::Op;
    #####:  204:  auto pattern = Op(customOpWithAffineMapAttribute);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  205:  SmallVector<NestedMatch, 8> matches;
call    0 never executed
call    1 never executed
    #####:  206:  pattern.match(f, &matches);
call    0 never executed
    #####:  207:  SmallVector<AffineMap, 4> maps;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  208:  maps.reserve(matches.size());
branch  0 never executed
branch  1 never executed
    #####:  209:  for (auto m : llvm::reverse(matches)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  210:    auto *opInst = m.getMatchedOperation();
call    0 never executed
    #####:  211:    auto map = opInst->getAttr(VectorizerTestPass::kTestAffineMapAttrName)
call    0 never executed
call    1 never executed
    #####:  212:                   .cast<AffineMapAttr>()
    #####:  213:                   .getValue();
call    0 never executed
    #####:  214:    maps.push_back(map);
call    0 never executed
        -:  215:  }
    #####:  216:  AffineMap res;
    #####:  217:  for (auto m : maps) {
branch  0 never executed
branch  1 never executed
    #####:  218:    res = res ? res.compose(m) : m;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  219:  }
    #####:  220:  simplifyAffineMap(res).print(outs << "\nComposed map: ");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  221:}
        -:  222:
        -:  223:/// Test for 'vectorizeAffineLoopNest' utility.
function _ZN12_GLOBAL__N_118VectorizerTestPass21testVecAffineLoopNestEv called 0 returned 0% blocks executed 0%
    #####:  224:void VectorizerTestPass::testVecAffineLoopNest() {
    #####:  225:  std::vector<SmallVector<AffineForOp, 2>> loops;
call    0 never executed
call    1 never executed
    #####:  226:  gatherLoops(getOperation(), loops);
call    0 never executed
call    1 never executed
        -:  227:
        -:  228:  // Expected only one loop nest.
    #####:  229:  if (loops.empty() || loops[0].size() != 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  230:    return;
call    0 never executed
        -:  231:
        -:  232:  // We vectorize the outermost loop found with VF=4.
    #####:  233:  AffineForOp outermostLoop = loops[0][0];
call    0 never executed
    #####:  234:  VectorizationStrategy strategy;
call    0 never executed
call    1 never executed
    #####:  235:  strategy.vectorSizes.push_back(4 /*vectorization factor*/);
call    0 never executed
    #####:  236:  strategy.loopToVectorDim[outermostLoop] = 0;
call    0 never executed
    #####:  237:  std::vector<SmallVector<AffineForOp, 2>> loopsToVectorize;
call    0 never executed
call    1 never executed
    #####:  238:  loopsToVectorize.push_back({outermostLoop});
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  239:  (void)vectorizeAffineLoopNest(loopsToVectorize, strategy);
call    0 never executed
        -:  240:}
        -:  241:
function _ZN12_GLOBAL__N_118VectorizerTestPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  242:void VectorizerTestPass::runOnOperation() {
        -:  243:  // Only support single block functions at this point.
    #####:  244:  func::FuncOp f = getOperation();
call    0 never executed
    #####:  245:  if (!llvm::hasSingleElement(f))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  246:    return;
        -:  247:
    #####:  248:  std::string str;
call    0 never executed
    #####:  249:  llvm::raw_string_ostream outs(str);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  250:
    #####:  251:  { // Tests that expect a NestedPatternContext to be allocated externally.
    #####:  252:    NestedPatternContext mlContext;
call    0 never executed
call    1 never executed
        -:  253:
    #####:  254:    if (!clTestVectorShapeRatio.empty())
branch  0 never executed
branch  1 never executed
    #####:  255:      testVectorShapeRatio(outs);
call    0 never executed
        -:  256:
    #####:  257:    if (clTestForwardSlicingAnalysis)
branch  0 never executed
branch  1 never executed
    #####:  258:      testForwardSlicing(outs);
call    0 never executed
        -:  259:
    #####:  260:    if (clTestBackwardSlicingAnalysis)
branch  0 never executed
branch  1 never executed
    #####:  261:      testBackwardSlicing(outs);
call    0 never executed
        -:  262:
    #####:  263:    if (clTestSlicingAnalysis)
branch  0 never executed
branch  1 never executed
    #####:  264:      testSlicing(outs);
call    0 never executed
        -:  265:
    #####:  266:    if (clTestComposeMaps)
branch  0 never executed
branch  1 never executed
    #####:  267:      testComposeMaps(outs);
call    0 never executed
        -:  268:  }
        -:  269:
    #####:  270:  if (clTestVecAffineLoopNest)
branch  0 never executed
branch  1 never executed
    #####:  271:    testVecAffineLoopNest();
call    0 never executed
        -:  272:
    #####:  273:  if (!outs.str().empty()) {
branch  0 never executed
branch  1 never executed
    #####:  274:    emitRemark(UnknownLoc::get(&getContext()), outs.str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:  275:  }
        -:  276:}
        -:  277:
        -:  278:namespace mlir {
function _ZN4mlir26registerVectorizerTestPassEv called 128636 returned 100% blocks executed 100%
   128636:  279:void registerVectorizerTestPass() { PassRegistration<VectorizerTestPass>(); }
call    0 returned 100%
        -:  280:} // namespace mlir
