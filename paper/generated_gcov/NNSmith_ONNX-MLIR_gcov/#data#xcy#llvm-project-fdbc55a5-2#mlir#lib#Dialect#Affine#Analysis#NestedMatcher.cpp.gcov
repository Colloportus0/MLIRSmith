        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Analysis/NestedMatcher.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Analysis/CMakeFiles/obj.MLIRAffineAnalysis.dir/NestedMatcher.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Analysis/CMakeFiles/obj.MLIRAffineAnalysis.dir/NestedMatcher.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- NestedMatcher.cpp - NestedMatcher Impl  ----------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include <utility>
        -:   10:
        -:   11:#include "mlir/Dialect/Affine/Analysis/NestedMatcher.h"
        -:   12:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   13:
        -:   14:#include "llvm/ADT/ArrayRef.h"
        -:   15:#include "llvm/ADT/STLExtras.h"
        -:   16:#include "llvm/Support/Allocator.h"
        -:   17:#include "llvm/Support/raw_ostream.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
function _ZN4mlir11NestedMatch9allocatorEv called 0 returned 0% blocks executed 0%
    #####:   21:llvm::BumpPtrAllocator *&NestedMatch::allocator() {
    #####:   22:  thread_local llvm::BumpPtrAllocator *allocator = nullptr;
    #####:   23:  return allocator;
        -:   24:}
        -:   25:
function _ZN4mlir11NestedMatch5buildEPNS_9OperationEN4llvm8ArrayRefIS0_EE called 0 returned 0% blocks executed 0%
    #####:   26:NestedMatch NestedMatch::build(Operation *operation,
        -:   27:                               ArrayRef<NestedMatch> nestedMatches) {
    #####:   28:  auto *result = allocator()->Allocate<NestedMatch>();
call    0 never executed
    #####:   29:  auto *children = allocator()->Allocate<NestedMatch>(nestedMatches.size());
call    0 never executed
    #####:   30:  std::uninitialized_copy(nestedMatches.begin(), nestedMatches.end(), children);
    #####:   31:  new (result) NestedMatch();
    #####:   32:  result->matchedOperation = operation;
    #####:   33:  result->matchedChildren =
    #####:   34:      ArrayRef<NestedMatch>(children, nestedMatches.size());
    #####:   35:  return *result;
        -:   36:}
        -:   37:
function _ZN4mlir13NestedPattern9allocatorEv called 0 returned 0% blocks executed 0%
    #####:   38:llvm::BumpPtrAllocator *&NestedPattern::allocator() {
    #####:   39:  thread_local llvm::BumpPtrAllocator *allocator = nullptr;
    #####:   40:  return allocator;
        -:   41:}
        -:   42:
function _ZN4mlir13NestedPattern16copyNestedToThisEN4llvm8ArrayRefIS0_EE called 0 returned 0% blocks executed 0%
    #####:   43:void NestedPattern::copyNestedToThis(ArrayRef<NestedPattern> nested) {
    #####:   44:  if (nested.empty())
branch  0 never executed
branch  1 never executed
        -:   45:    return;
        -:   46:
    #####:   47:  auto *newNested = allocator()->Allocate<NestedPattern>(nested.size());
call    0 never executed
    #####:   48:  std::uninitialized_copy(nested.begin(), nested.end(), newNested);
call    0 never executed
    #####:   49:  nestedPatterns = ArrayRef<NestedPattern>(newNested, nested.size());
        -:   50:}
        -:   51:
function _ZN4mlir13NestedPattern10freeNestedEv called 0 returned 0% blocks executed 0%
    #####:   52:void NestedPattern::freeNested() {
    #####:   53:  for (const auto &p : nestedPatterns)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   54:    p.~NestedPattern();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   55:}
        -:   56:
function _ZN4mlir13NestedPatternC2EN4llvm8ArrayRefIS0_EESt8functionIFbRNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:   57:NestedPattern::NestedPattern(ArrayRef<NestedPattern> nested,
    #####:   58:                             FilterFunctionType filter)
    #####:   59:    : filter(std::move(filter)), skip(nullptr) {
call    0 never executed
    #####:   60:  copyNestedToThis(nested);
call    0 never executed
    #####:   61:}
        -:   62:
function _ZN4mlir13NestedPatternC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   63:NestedPattern::NestedPattern(const NestedPattern &other)
    #####:   64:    : filter(other.filter), skip(other.skip) {
branch  0 never executed
branch  1 never executed
    #####:   65:  copyNestedToThis(other.nestedPatterns);
call    0 never executed
    #####:   66:}
        -:   67:
function _ZN4mlir13NestedPatternaSERKS0_ called 0 returned 0% blocks executed 0%
    #####:   68:NestedPattern &NestedPattern::operator=(const NestedPattern &other) {
    #####:   69:  freeNested();
    #####:   70:  filter = other.filter;
call    0 never executed
    #####:   71:  skip = other.skip;
    #####:   72:  copyNestedToThis(other.nestedPatterns);
call    0 never executed
    #####:   73:  return *this;
        -:   74:}
        -:   75:
function _ZNK4mlir13NestedPattern8getDepthEv called 0 returned 0% blocks executed 0%
    #####:   76:unsigned NestedPattern::getDepth() const {
    #####:   77:  if (nestedPatterns.empty()) {
branch  0 never executed
branch  1 never executed
        -:   78:    return 1;
        -:   79:  }
    #####:   80:  unsigned depth = 0;
    #####:   81:  for (auto &c : nestedPatterns) {
branch  0 never executed
branch  1 never executed
    #####:   82:    depth = std::max(depth, c.getDepth());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   83:  }
    #####:   84:  return depth + 1;
        -:   85:}
        -:   86:
        -:   87:/// Matches a single operation in the following way:
        -:   88:///   1. checks the kind of operation against the matcher, if different then
        -:   89:///      there is no match;
        -:   90:///   2. calls the customizable filter function to refine the single operation
        -:   91:///      match with extra semantic constraints;
        -:   92:///   3. if all is good, recursively matches the nested patterns;
        -:   93:///   4. if all nested match then the single operation matches too and is
        -:   94:///      appended to the list of matches;
        -:   95:///   5. TODO: Optionally applies actions (lambda), in which case we will want
        -:   96:///      to traverse in post-order DFS to avoid invalidating iterators.
function _ZN4mlir13NestedPattern8matchOneEPNS_9OperationEPN4llvm15SmallVectorImplINS_11NestedMatchEEE called 0 returned 0% blocks executed 0%
    #####:   97:void NestedPattern::matchOne(Operation *op,
        -:   98:                             SmallVectorImpl<NestedMatch> *matches) {
    #####:   99:  if (skip == op) {
branch  0 never executed
branch  1 never executed
        -:  100:    return;
        -:  101:  }
        -:  102:  // Local custom filter function
    #####:  103:  if (!filter(*op)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  104:    return;
        -:  105:  }
        -:  106:
    #####:  107:  if (nestedPatterns.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  108:    SmallVector<NestedMatch, 8> nestedMatches;
call    0 never executed
    #####:  109:    matches->push_back(NestedMatch::build(op, nestedMatches));
call    0 never executed
call    1 never executed
    #####:  110:    return;
branch  0 never executed
branch  1 never executed
        -:  111:  }
        -:  112:  // Take a copy of each nested pattern so we can match it.
    #####:  113:  for (auto nestedPattern : nestedPatterns) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  114:    SmallVector<NestedMatch, 8> nestedMatches;
call    0 never executed
call    1 never executed
        -:  115:    // Skip elem in the walk immediately following. Without this we would
        -:  116:    // essentially need to reimplement walk here.
    #####:  117:    nestedPattern.skip = op;
    #####:  118:    nestedPattern.match(op, &nestedMatches);
call    0 never executed
        -:  119:    // If we could not match even one of the specified nestedPattern, early exit
        -:  120:    // as this whole branch is not a match.
    #####:  121:    if (nestedMatches.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  122:      return;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  123:    }
    #####:  124:    matches->push_back(NestedMatch::build(op, nestedMatches));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  125:  }
        -:  126:}
        -:  127:
function _ZL13isAffineForOpRN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  128:static bool isAffineForOp(Operation &op) { return isa<AffineForOp>(op); }
call    0 never executed
        -:  129:
function _ZL12isAffineIfOpRN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  130:static bool isAffineIfOp(Operation &op) { return isa<AffineIfOp>(op); }
call    0 never executed
        -:  131:
        -:  132:namespace mlir {
        -:  133:namespace matcher {
        -:  134:
function _ZN4mlir7matcher2OpESt8functionIFbRNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:  135:NestedPattern Op(FilterFunctionType filter) {
    #####:  136:  return NestedPattern({}, std::move(filter));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  137:}
        -:  138:
function _ZN4mlir7matcher2IfERKNS_13NestedPatternE called 0 returned 0% blocks executed 0%
    #####:  139:NestedPattern If(const NestedPattern &child) {
    #####:  140:  return NestedPattern(child, isAffineIfOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  141:}
function _ZN4mlir7matcher2IfERKSt8functionIFbRNS_9OperationEEERKNS_13NestedPatternE called 0 returned 0% blocks executed 0%
    #####:  142:NestedPattern If(const FilterFunctionType &filter, const NestedPattern &child) {
function _ZZN4mlir7matcher2IfERKSt8functionIFbRNS_9OperationEEERKNS_13NestedPatternEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  143:  return NestedPattern(child, [filter](Operation &op) {
branch  0 never executed
branch  1 never executed
    #####:  144:    return isAffineIfOp(op) && filter(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  145:  });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  146:}
function _ZN4mlir7matcher2IfEN4llvm8ArrayRefINS_13NestedPatternEEE called 0 returned 0% blocks executed 0%
    #####:  147:NestedPattern If(ArrayRef<NestedPattern> nested) {
    #####:  148:  return NestedPattern(nested, isAffineIfOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  149:}
function _ZN4mlir7matcher2IfERKSt8functionIFbRNS_9OperationEEEN4llvm8ArrayRefINS_13NestedPatternEEE called 0 returned 0% blocks executed 0%
    #####:  150:NestedPattern If(const FilterFunctionType &filter,
        -:  151:                 ArrayRef<NestedPattern> nested) {
function _ZZN4mlir7matcher2IfERKSt8functionIFbRNS_9OperationEEEN4llvm8ArrayRefINS_13NestedPatternEEEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  152:  return NestedPattern(nested, [filter](Operation &op) {
branch  0 never executed
branch  1 never executed
    #####:  153:    return isAffineIfOp(op) && filter(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  154:  });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  155:}
        -:  156:
function _ZN4mlir7matcher3ForERKNS_13NestedPatternE called 0 returned 0% blocks executed 0%
    #####:  157:NestedPattern For(const NestedPattern &child) {
    #####:  158:  return NestedPattern(child, isAffineForOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  159:}
function _ZN4mlir7matcher3ForERKSt8functionIFbRNS_9OperationEEERKNS_13NestedPatternE called 0 returned 0% blocks executed 0%
    #####:  160:NestedPattern For(const FilterFunctionType &filter,
        -:  161:                  const NestedPattern &child) {
    #####:  162:  return NestedPattern(
branch  0 never executed
branch  1 never executed
function _ZZN4mlir7matcher3ForERKSt8functionIFbRNS_9OperationEEERKNS_13NestedPatternEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  163:      child, [=](Operation &op) { return isAffineForOp(op) && filter(op); });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -:  164:}
function _ZN4mlir7matcher3ForEN4llvm8ArrayRefINS_13NestedPatternEEE called 0 returned 0% blocks executed 0%
    #####:  165:NestedPattern For(ArrayRef<NestedPattern> nested) {
    #####:  166:  return NestedPattern(nested, isAffineForOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  167:}
function _ZN4mlir7matcher3ForERKSt8functionIFbRNS_9OperationEEEN4llvm8ArrayRefINS_13NestedPatternEEE called 0 returned 0% blocks executed 0%
    #####:  168:NestedPattern For(const FilterFunctionType &filter,
        -:  169:                  ArrayRef<NestedPattern> nested) {
    #####:  170:  return NestedPattern(
branch  0 never executed
branch  1 never executed
function _ZZN4mlir7matcher3ForERKSt8functionIFbRNS_9OperationEEEN4llvm8ArrayRefINS_13NestedPatternEEEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  171:      nested, [=](Operation &op) { return isAffineForOp(op) && filter(op); });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -:  172:}
        -:  173:
function _ZN4mlir7matcher13isLoadOrStoreERNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  174:bool isLoadOrStore(Operation &op) {
    #####:  175:  return isa<AffineLoadOp, AffineStoreOp>(op);
call    0 never executed
        -:  176:}
        -:  177:
        -:  178:} // namespace matcher
        -:  179:} // namespace mlir
