        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Rewrite/FrozenRewritePatternSet.cpp
        -:    0:Graph:../tools/mlir/lib/Rewrite/CMakeFiles/obj.MLIRRewrite.dir/FrozenRewritePatternSet.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Rewrite/CMakeFiles/obj.MLIRRewrite.dir/FrozenRewritePatternSet.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- FrozenRewritePatternSet.cpp - Frozen Pattern List -------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Rewrite/FrozenRewritePatternSet.h"
        -:   10:#include "ByteCode.h"
        -:   11:#include "mlir/Conversion/PDLToPDLInterp/PDLToPDLInterp.h"
        -:   12:#include "mlir/Dialect/PDL/IR/PDLOps.h"
        -:   13:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:#include "mlir/Pass/PassManager.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
function _ZL21convertPDLToPDLInterpN4mlir8ModuleOpE called 512 returned 100% blocks executed 74%
      512:   19:static LogicalResult convertPDLToPDLInterp(ModuleOp pdlModule) {
        -:   20:  // Skip the conversion if the module doesn't contain pdl.
      512:   21:  if (pdlModule.getOps<pdl::PatternOp>().empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   22:    return success();
        -:   23:
        -:   24:  // Simplify the provided PDL module. Note that we can't use the canonicalizer
        -:   25:  // here because it would create a cyclic dependency.
function _ZZL21convertPDLToPDLInterpN4mlir8ModuleOpEENKUlPNS_9OperationEE_clES2_.isra.0 called 18432 returned 100% blocks executed 80%
    18432:   26:  auto simplifyFn = [](Operation *op) {
        -:   27:    // TODO: Add folding here if ever necessary.
    18432:   28:    if (isOpTriviallyDead(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   29:      op->erase();
call    0 never executed
    18432:   30:  };
      512:   31:  pdlModule.getBody()->walk(simplifyFn);
call    0 returned 100%
call    1 returned 100%
        -:   32:
        -:   33:  /// Lower the PDL pattern module to the interpreter dialect.
      512:   34:  PassManager pdlPipeline(pdlModule.getContext());
call    0 returned 100%
call    1 returned 100%
        -:   35:#ifdef NDEBUG
        -:   36:  // We don't want to incur the hit of running the verifier when in release
        -:   37:  // mode.
        -:   38:  pdlPipeline.enableVerifier(false);
        -:   39:#endif
      512:   40:  pdlPipeline.addPass(createPDLToPDLInterpPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      512:   41:  if (failed(pdlPipeline.run(pdlModule)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   42:    return failure();
        -:   43:
        -:   44:  // Simplify again after running the lowering pipeline.
      512:   45:  pdlModule.getBody()->walk(simplifyFn);
call    0 returned 100%
call    1 returned 100%
      512:   46:  return success();
call    0 returned 100%
        -:   47:}
        -:   48:
        -:   49://===----------------------------------------------------------------------===//
        -:   50:// FrozenRewritePatternSet
        -:   51://===----------------------------------------------------------------------===//
        -:   52:
function _ZN4mlir23FrozenRewritePatternSetC2Ev called 260135 returned 100% blocks executed 100%
   260135:   53:FrozenRewritePatternSet::FrozenRewritePatternSet()
call    0 returned 100%
   260135:   54:    : impl(std::make_shared<Impl>()) {}
        -:   55:
function _ZN4mlir23FrozenRewritePatternSetC2EONS_17RewritePatternSetEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_ called 56085 returned 100% blocks executed 71%
    56085:   56:FrozenRewritePatternSet::FrozenRewritePatternSet(
        -:   57:    RewritePatternSet &&patterns, ArrayRef<std::string> disabledPatternLabels,
    56085:   58:    ArrayRef<std::string> enabledPatternLabels)
call    0 returned 100%
        -:   59:    : impl(std::make_shared<Impl>()) {
    56597:   60:  DenseSet<StringRef> disabledPatterns, enabledPatterns;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    56085:   61:  disabledPatterns.insert(disabledPatternLabels.begin(),
call    0 returned 100%
        -:   62:                          disabledPatternLabels.end());
    56085:   63:  enabledPatterns.insert(enabledPatternLabels.begin(),
call    0 returned 100%
        -:   64:                         enabledPatternLabels.end());
        -:   65:
        -:   66:  // Functor used to walk all of the operations registered in the context. This
        -:   67:  // is useful for patterns that get applied to multiple operations, such as
        -:   68:  // interface and trait based patterns.
    56597:   69:  std::vector<RegisteredOperationName> opInfos;
call    0 returned 100%
    56085:   70:  auto addToOpsWhen =
function _ZZN4mlir23FrozenRewritePatternSetC4EONS_17RewritePatternSetEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_ENKUlRSt10unique_ptrINS_14RewritePatternESt14default_deleteISD_EENS3_12function_refIFbNS_23RegisteredOperationNameEEEEE_clESH_SL_.isra.0 called 6764 returned 100% blocks executed 81%
     6764:   71:      [&](std::unique_ptr<RewritePattern> &pattern,
        -:   72:          function_ref<bool(RegisteredOperationName)> callbackFn) {
     9724:   73:        if (opInfos.empty())
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     5920:   74:          opInfos = pattern->getContext()->getRegisteredOperations();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  3581379:   75:        for (RegisteredOperationName info : opInfos)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
  3574615:   76:          if (callbackFn(info))
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
   297135:   77:            impl->nativeOpSpecificPatternMap[info].push_back(pattern.get());
call    0 returned 100%
call    1 returned 100%
     6764:   78:        impl->nativeOpSpecificPatternList.push_back(std::move(pattern));
call    0 returned 100%
    62849:   79:      };
        -:   80:
  1169470:   81:  for (std::unique_ptr<RewritePattern> &pat : patterns.getNativePatterns()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   82:    // Don't add patterns that haven't been enabled by the user.
  1113385:   83:    if (!enabledPatterns.empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   84:      auto isEnabledFn = [&](StringRef label) {
    #####:   85:        return enabledPatterns.count(label);
call    0 never executed
    #####:   86:      };
    #####:   87:      if (!isEnabledFn(pat->getDebugName()) &&
call    0 never executed
call    1 never executed
    #####:   88:          llvm::none_of(pat->getDebugLabels(), isEnabledFn))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:        continue;
        -:   90:    }
        -:   91:    // Don't add patterns that have been disabled by the user.
  1113385:   92:    if (!disabledPatterns.empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:      auto isDisabledFn = [&](StringRef label) {
    #####:   94:        return disabledPatterns.count(label);
call    0 never executed
    #####:   95:      };
    #####:   96:      if (isDisabledFn(pat->getDebugName()) ||
call    0 never executed
call    1 never executed
    #####:   97:          llvm::any_of(pat->getDebugLabels(), isDisabledFn))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:        continue;
        -:   99:    }
        -:  100:
  2226770:  101:    if (Optional<OperationName> rootName = pat->getRootKind()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
  1105540:  102:      impl->nativeOpSpecificPatternMap[*rootName].push_back(pat.get());
call    0 returned 100%
call    1 returned 100%
  1105540:  103:      impl->nativeOpSpecificPatternList.push_back(std::move(pat));
call    0 returned 100%
  1105540:  104:      continue;
        -:  105:    }
    15690:  106:    if (Optional<TypeID> interfaceID = pat->getRootInterfaceID()) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 86% (fallthrough)
branch  3 taken 14%
function _ZZN4mlir23FrozenRewritePatternSetC4EONS_17RewritePatternSetEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_ENKUlNS_23RegisteredOperationNameEE2_clESC_.isra.0 called 3574615 returned 100% blocks executed 75%
     6764:  107:      addToOpsWhen(pat, [&](RegisteredOperationName info) {
call    0 returned 100%
  3574615:  108:        return info.hasInterface(*interfaceID);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  109:      });
     6764:  110:      continue;
        -:  111:    }
     2162:  112:    if (Optional<TypeID> traitID = pat->getRootTraitID()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
function _ZZN4mlir23FrozenRewritePatternSetC4EONS_17RewritePatternSetEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_ENKUlNS_23RegisteredOperationNameEE3_clESC_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  113:      addToOpsWhen(pat, [&](RegisteredOperationName info) {
call    0 never executed
    #####:  114:        return info.hasTrait(*traitID);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  115:      });
    #####:  116:      continue;
        -:  117:    }
  1113385:  118:    impl->nativeAnyOpPatterns.push_back(std::move(pat));
call    0 returned 100%
        -:  119:  }
        -:  120:
        -:  121:  // Generate the bytecode for the PDL patterns if any were provided.
    56085:  122:  PDLPatternModule &pdlPatterns = patterns.getPDLPatterns();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    56085:  123:  ModuleOp pdlModule = pdlPatterns.getModule();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    56085:  124:  if (!pdlModule)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    58533:  125:    return;
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
call    2 returned 100%
      512:  126:  if (failed(convertPDLToPDLInterp(pdlModule)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  127:    llvm::report_fatal_error(
call    0 never executed
        -:  128:        "failed to lower PDL pattern module to the PDL Interpreter");
        -:  129:
        -:  130:  // Generate the pdl bytecode.
     1024:  131:  impl->pdlByteCode = std::make_unique<detail::PDLByteCode>(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     1024:  132:      pdlModule, pdlPatterns.takeConstraintFunctions(),
call    0 returned 100%
call    1 returned 100%
     1536:  133:      pdlPatterns.takeRewriteFunctions());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  134:}
        -:  135:
        -:  136:FrozenRewritePatternSet::~FrozenRewritePatternSet() = default;
