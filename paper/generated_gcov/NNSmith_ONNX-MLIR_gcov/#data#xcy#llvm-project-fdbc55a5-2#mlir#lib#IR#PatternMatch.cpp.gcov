        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/PatternMatch.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/PatternMatch.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/PatternMatch.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- PatternMatch.cpp - Base classes for pattern match ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/PatternMatch.h"
        -:   10:#include "mlir/IR/BlockAndValueMapping.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14://===----------------------------------------------------------------------===//
        -:   15:// PatternBenefit
        -:   16://===----------------------------------------------------------------------===//
        -:   17:
function _ZN4mlir14PatternBenefitC2Ej called 1773486 returned 100% blocks executed 75%
  1773486:   18:PatternBenefit::PatternBenefit(unsigned benefit) : representation(benefit) {
 1773486*:   19:  assert(representation == benefit && benefit != ImpossibleToMatchSentinel &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   20:         "This pattern match benefit is too large to represent");
  1773486:   21:}
        -:   22:
function _ZNK4mlir14PatternBenefit10getBenefitEv called 0 returned 0% blocks executed 0%
    #####:   23:unsigned short PatternBenefit::getBenefit() const {
    #####:   24:  assert(!isImpossibleToMatch() && "Pattern doesn't match");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   25:  return representation;
        -:   26:}
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Pattern
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32://===----------------------------------------------------------------------===//
        -:   33:// OperationName Root Constructors
        -:   34:
function _ZN4mlir7PatternC2EN4llvm9StringRefENS_14PatternBenefitEPNS_11MLIRContextENS1_8ArrayRefIS2_EE called 1105670 returned 100% blocks executed 100%
  1105670:   35:Pattern::Pattern(StringRef rootName, PatternBenefit benefit,
  1105670:   36:                 MLIRContext *context, ArrayRef<StringRef> generatedNames)
  1105670:   37:    : Pattern(OperationName(rootName, context).getAsOpaquePointer(),
call    0 returned 100%
call    1 returned 100%
  1105670:   38:              RootKind::OperationName, generatedNames, benefit, context) {}
call    0 returned 100%
        -:   39:
        -:   40://===----------------------------------------------------------------------===//
        -:   41:// MatchAnyOpTypeTag Root Constructors
        -:   42:
function _ZN4mlir7PatternC2ENS0_17MatchAnyOpTypeTagENS_14PatternBenefitEPNS_11MLIRContextEN4llvm8ArrayRefINS5_9StringRefEEE called 1593 returned 100% blocks executed 100%
     1593:   43:Pattern::Pattern(MatchAnyOpTypeTag tag, PatternBenefit benefit,
     1593:   44:                 MLIRContext *context, ArrayRef<StringRef> generatedNames)
     1593:   45:    : Pattern(nullptr, RootKind::Any, generatedNames, benefit, context) {}
call    0 returned 100%
        -:   46:
        -:   47://===----------------------------------------------------------------------===//
        -:   48:// MatchInterfaceOpTypeTag Root Constructors
        -:   49:
function _ZN4mlir7PatternC2ENS0_23MatchInterfaceOpTypeTagENS_6TypeIDENS_14PatternBenefitEPNS_11MLIRContextEN4llvm8ArrayRefINS6_9StringRefEEE called 6758 returned 100% blocks executed 100%
     6758:   50:Pattern::Pattern(MatchInterfaceOpTypeTag tag, TypeID interfaceID,
        -:   51:                 PatternBenefit benefit, MLIRContext *context,
     6758:   52:                 ArrayRef<StringRef> generatedNames)
        -:   53:    : Pattern(interfaceID.getAsOpaquePointer(), RootKind::InterfaceID,
     6758:   54:              generatedNames, benefit, context) {}
call    0 returned 100%
        -:   55:
        -:   56://===----------------------------------------------------------------------===//
        -:   57:// MatchTraitOpTypeTag Root Constructors
        -:   58:
function _ZN4mlir7PatternC2ENS0_19MatchTraitOpTypeTagENS_6TypeIDENS_14PatternBenefitEPNS_11MLIRContextEN4llvm8ArrayRefINS6_9StringRefEEE called 0 returned 0% blocks executed 0%
    #####:   59:Pattern::Pattern(MatchTraitOpTypeTag tag, TypeID traitID,
        -:   60:                 PatternBenefit benefit, MLIRContext *context,
    #####:   61:                 ArrayRef<StringRef> generatedNames)
        -:   62:    : Pattern(traitID.getAsOpaquePointer(), RootKind::TraitID, generatedNames,
    #####:   63:              benefit, context) {}
call    0 never executed
        -:   64:
        -:   65://===----------------------------------------------------------------------===//
        -:   66:// General Constructors
        -:   67:
function _ZN4mlir7PatternC2EPKvNS0_8RootKindEN4llvm8ArrayRefINS4_9StringRefEEENS_14PatternBenefitEPNS_11MLIRContextE called 1114021 returned 100% blocks executed 100%
  1114021:   68:Pattern::Pattern(const void *rootValue, RootKind rootKind,
        -:   69:                 ArrayRef<StringRef> generatedNames, PatternBenefit benefit,
  1114021:   70:                 MLIRContext *context)
        -:   71:    : rootValue(rootValue), rootKind(rootKind), benefit(benefit),
  1114021:   72:      contextAndHasBoundedRecursion(context, false) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
  1114021:   73:  if (generatedNames.empty())
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:   74:    return;
    73870:   75:  generatedOps.reserve(generatedNames.size());
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
    73870:   76:  std::transform(generatedNames.begin(), generatedNames.end(),
   177387:   77:                 std::back_inserter(generatedOps), [context](StringRef name) {
   103517:   78:                   return OperationName(name, context);
call    0 returned 100%
call    1 returned 100%
    73870:   79:                 });
call    0 returned 100%
        -:   80:}
        -:   81:
        -:   82://===----------------------------------------------------------------------===//
        -:   83:// RewritePattern
        -:   84://===----------------------------------------------------------------------===//
        -:   85:
function _ZNK4mlir14RewritePattern7rewriteEPNS_9OperationERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   86:void RewritePattern::rewrite(Operation *op, PatternRewriter &rewriter) const {
    #####:   87:  llvm_unreachable("need to implement either matchAndRewrite or one of the "
        -:   88:                   "rewrite functions!");
        -:   89:}
        -:   90:
function _ZNK4mlir14RewritePattern5matchEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:   91:LogicalResult RewritePattern::match(Operation *op) const {
    #####:   92:  llvm_unreachable("need to implement either match or matchAndRewrite!");
        -:   93:}
        -:   94:
        -:   95:/// Out-of-line vtable anchor.
function _ZN4mlir14RewritePattern6anchorEv called 0 returned 0% blocks executed 0%
    #####:   96:void RewritePattern::anchor() {}
        -:   97:
        -:   98://===----------------------------------------------------------------------===//
        -:   99:// PDLValue
        -:  100://===----------------------------------------------------------------------===//
        -:  101:
function _ZNK4mlir8PDLValue5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  102:void PDLValue::print(raw_ostream &os) const {
    #####:  103:  if (!value) {
branch  0 never executed
branch  1 never executed
    #####:  104:    os << "<NULL-PDLValue>";
    #####:  105:    return;
call    0 never executed
        -:  106:  }
    #####:  107:  switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  108:  case Kind::Attribute:
    #####:  109:    os << cast<Attribute>();
call    0 never executed
call    1 never executed
    #####:  110:    break;
    #####:  111:  case Kind::Operation:
    #####:  112:    os << *cast<Operation *>();
call    0 never executed
    #####:  113:    break;
call    0 never executed
    #####:  114:  case Kind::Type:
    #####:  115:    os << cast<Type>();
call    0 never executed
call    1 never executed
    #####:  116:    break;
    #####:  117:  case Kind::TypeRange:
    #####:  118:    llvm::interleaveComma(cast<TypeRange>(), os);
call    0 never executed
call    1 never executed
    #####:  119:    break;
    #####:  120:  case Kind::Value:
    #####:  121:    os << cast<Value>();
call    0 never executed
call    1 never executed
    #####:  122:    break;
    #####:  123:  case Kind::ValueRange:
    #####:  124:    llvm::interleaveComma(cast<ValueRange>(), os);
call    0 never executed
call    1 never executed
    #####:  125:    break;
        -:  126:  }
        -:  127:}
        -:  128:
function _ZN4mlir8PDLValue5printERN4llvm11raw_ostreamENS0_4KindE called 0 returned 0% blocks executed 0%
    #####:  129:void PDLValue::print(raw_ostream &os, Kind kind) {
    #####:  130:  switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  131:  case Kind::Attribute:
    #####:  132:    os << "Attribute";
    #####:  133:    break;
call    0 never executed
    #####:  134:  case Kind::Operation:
    #####:  135:    os << "Operation";
    #####:  136:    break;
call    0 never executed
    #####:  137:  case Kind::Type:
    #####:  138:    os << "Type";
    #####:  139:    break;
call    0 never executed
    #####:  140:  case Kind::TypeRange:
    #####:  141:    os << "TypeRange";
    #####:  142:    break;
call    0 never executed
    #####:  143:  case Kind::Value:
    #####:  144:    os << "Value";
    #####:  145:    break;
call    0 never executed
    #####:  146:  case Kind::ValueRange:
    #####:  147:    os << "ValueRange";
    #####:  148:    break;
call    0 never executed
        -:  149:  }
    #####:  150:}
        -:  151:
        -:  152://===----------------------------------------------------------------------===//
        -:  153:// PDLPatternModule
        -:  154://===----------------------------------------------------------------------===//
        -:  155:
function _ZN4mlir16PDLPatternModule7mergeInEOS0_ called 1024 returned 100% blocks executed 67%
     1024:  156:void PDLPatternModule::mergeIn(PDLPatternModule &&other) {
        -:  157:  // Ignore the other module if it has no patterns.
     1024:  158:  if (!other.pdlModule)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  159:    return;
        -:  160:
        -:  161:  // Steal the functions of the other module.
     2048:  162:  for (auto &it : other.constraintFunctions)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
call    4 returned 100%
      512:  163:    registerConstraintFunction(it.first(), std::move(it.second));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    1024*:  164:  for (auto &it : other.rewriteFunctions)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
    #####:  165:    registerRewriteFunction(it.first(), std::move(it.second));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  166:
        -:  167:  // Steal the other state if we have no patterns.
     1024:  168:  if (!pdlModule) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      512:  169:    pdlModule = std::move(other.pdlModule);
      512:  170:    return;
        -:  171:  }
        -:  172:
        -:  173:  // Merge the pattern operations from the other module into this one.
      512:  174:  Block *block = pdlModule->getBody();
call    0 returned 100%
      512:  175:  block->getOperations().splice(block->end(),
call    0 returned 100%
call    1 returned 100%
      512:  176:                                other.pdlModule->getBody()->getOperations());
call    0 returned 100%
call    1 returned 100%
        -:  177:}
        -:  178:
        -:  179://===----------------------------------------------------------------------===//
        -:  180:// Function Registry
        -:  181:
function _ZN4mlir16PDLPatternModule26registerConstraintFunctionEN4llvm9StringRefESt8functionIFNS_13LogicalResultERNS_15PatternRewriterENS1_8ArrayRefINS_8PDLValueEEEEE called 512 returned 100% blocks executed 100%
     1024:  182:void PDLPatternModule::registerConstraintFunction(
        -:  183:    StringRef name, PDLConstraintFunction constraintFn) {
        -:  184:  // TODO: Is it possible to diagnose when `name` is already registered to
        -:  185:  // a function that is not equivalent to `constraintFn`?
        -:  186:  // Allow existing mappings in the case multiple patterns depend on the same
        -:  187:  // constraint.
     1024:  188:  constraintFunctions.try_emplace(name, std::move(constraintFn));
call    0 returned 100%
call    1 returned 100%
      512:  189:}
        -:  190:
function _ZN4mlir16PDLPatternModule23registerRewriteFunctionEN4llvm9StringRefESt8functionIFvRNS_15PatternRewriterERNS_13PDLResultListENS1_8ArrayRefINS_8PDLValueEEEEE called 0 returned 0% blocks executed 0%
    #####:  191:void PDLPatternModule::registerRewriteFunction(StringRef name,
        -:  192:                                               PDLRewriteFunction rewriteFn) {
        -:  193:  // TODO: Is it possible to diagnose when `name` is already registered to
        -:  194:  // a function that is not equivalent to `rewriteFn`?
        -:  195:  // Allow existing mappings in the case multiple patterns depend on the same
        -:  196:  // rewrite.
    #####:  197:  rewriteFunctions.try_emplace(name, std::move(rewriteFn));
call    0 never executed
call    1 never executed
    #####:  198:}
        -:  199:
        -:  200://===----------------------------------------------------------------------===//
        -:  201:// RewriterBase
        -:  202://===----------------------------------------------------------------------===//
        -:  203:
   69427*:  204:RewriterBase::~RewriterBase() {
        -:  205:  // Out of line to provide a vtable anchor for the class.
   69427*:  206:}
------------------
_ZN4mlir12RewriterBaseD0Ev:
function _ZN4mlir12RewriterBaseD0Ev called 0 returned 0% blocks executed 0%
    #####:  204:RewriterBase::~RewriterBase() {
call    0 never executed
        -:  205:  // Out of line to provide a vtable anchor for the class.
    #####:  206:}
call    0 never executed
------------------
_ZN4mlir12RewriterBaseD2Ev:
function _ZN4mlir12RewriterBaseD2Ev called 69427 returned 100% blocks executed 100%
    69427:  204:RewriterBase::~RewriterBase() {
call    0 returned 100%
        -:  205:  // Out of line to provide a vtable anchor for the class.
    69427:  206:}
------------------
        -:  207:
        -:  208:/// This method replaces the uses of the results of `op` with the values in
        -:  209:/// `newValues` when the provided `functor` returns true for a specific use.
        -:  210:/// The number of values in `newValues` is required to match the number of
        -:  211:/// results of `op`.
function _ZN4mlir12RewriterBase15replaceOpWithIfEPNS_9OperationENS_10ValueRangeEPbN4llvm15unique_functionIKFbRNS_9OpOperandEEEE called 0 returned 0% blocks executed 0%
    #####:  212:void RewriterBase::replaceOpWithIf(
        -:  213:    Operation *op, ValueRange newValues, bool *allUsesReplaced,
        -:  214:    llvm::unique_function<bool(OpOperand &) const> functor) {
    #####:  215:  assert(op->getNumResults() == newValues.size() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  216:         "incorrect number of values to replace operation");
        -:  217:
        -:  218:  // Notify the rewriter subclass that we're about to replace this root.
    #####:  219:  notifyRootReplaced(op, newValues);
call    0 never executed
        -:  220:
        -:  221:  // Replace each use of the results when the functor is true.
    #####:  222:  bool replacedAllUses = true;
    #####:  223:  for (auto it : llvm::zip(op->getResults(), newValues)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  224:    std::get<0>(it).replaceUsesWithIf(std::get<1>(it), functor);
call    0 never executed
    #####:  225:    replacedAllUses &= std::get<0>(it).use_empty();
        -:  226:  }
    #####:  227:  if (allUsesReplaced)
branch  0 never executed
branch  1 never executed
    #####:  228:    *allUsesReplaced = replacedAllUses;
    #####:  229:}
        -:  230:
        -:  231:/// This method replaces the uses of the results of `op` with the values in
        -:  232:/// `newValues` when a use is nested within the given `block`. The number of
        -:  233:/// values in `newValues` is required to match the number of results of `op`.
        -:  234:/// If all uses of this operation are replaced, the operation is erased.
function _ZN4mlir12RewriterBase20replaceOpWithinBlockEPNS_9OperationENS_10ValueRangeEPNS_5BlockEPb called 0 returned 0% blocks executed 0%
    #####:  235:void RewriterBase::replaceOpWithinBlock(Operation *op, ValueRange newValues,
        -:  236:                                        Block *block, bool *allUsesReplaced) {
    #####:  237:  replaceOpWithIf(op, newValues, allUsesReplaced, [block](OpOperand &use) {
call    0 never executed
call    1 never executed
    #####:  238:    return block->getParentOp()->isProperAncestor(use.getOwner());
call    0 never executed
call    1 never executed
    #####:  239:  });
call    0 never executed
    #####:  240:}
        -:  241:
        -:  242:/// This method replaces the results of the operation with the specified list of
        -:  243:/// values. The number of provided values must match the number of results of
        -:  244:/// the operation.
function _ZN4mlir12RewriterBase9replaceOpEPNS_9OperationENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  245:void RewriterBase::replaceOp(Operation *op, ValueRange newValues) {
        -:  246:  // Notify the rewriter subclass that we're about to replace this root.
    #####:  247:  notifyRootReplaced(op, newValues);
call    0 never executed
        -:  248:
    #####:  249:  assert(op->getNumResults() == newValues.size() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  250:         "incorrect # of replacement values");
    #####:  251:  op->replaceAllUsesWith(newValues);
branch  0 never executed
branch  1 never executed
        -:  252:
    #####:  253:  notifyOperationRemoved(op);
call    0 never executed
    #####:  254:  op->erase();
call    0 never executed
    #####:  255:}
        -:  256:
        -:  257:/// This method erases an operation that is known to have no uses. The uses of
        -:  258:/// the given operation *must* be known to be dead.
function _ZN4mlir12RewriterBase7eraseOpEPNS_9OperationE called 6209 returned 100% blocks executed 88%
     6209:  259:void RewriterBase::eraseOp(Operation *op) {
   12418*:  260:  assert(op->use_empty() && "expected 'op' to have no uses");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
     6209:  261:  notifyOperationRemoved(op);
call    0 returned 100%
     6209:  262:  op->erase();
call    0 returned 100%
     6209:  263:}
        -:  264:
function _ZN4mlir12RewriterBase10eraseBlockEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:  265:void RewriterBase::eraseBlock(Block *block) {
    #####:  266:  for (auto &op : llvm::make_early_inc_range(llvm::reverse(*block))) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  267:    assert(op.use_empty() && "expected 'op' to have no uses");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  268:    eraseOp(&op);
call    0 never executed
        -:  269:  }
    #####:  270:  block->erase();
call    0 never executed
    #####:  271:}
        -:  272:
        -:  273:/// Merge the operations of block 'source' into the end of block 'dest'.
        -:  274:/// 'source's predecessors must be empty or only contain 'dest`.
        -:  275:/// 'argValues' is used to replace the block arguments of 'source' after
        -:  276:/// merging.
function _ZN4mlir12RewriterBase11mergeBlocksEPNS_5BlockES2_NS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  277:void RewriterBase::mergeBlocks(Block *source, Block *dest,
        -:  278:                               ValueRange argValues) {
    #####:  279:  assert(llvm::all_of(source->getPredecessors(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  280:                      [dest](Block *succ) { return succ == dest; }) &&
        -:  281:         "expected 'source' to have no predecessors or only 'dest'");
    #####:  282:  assert(argValues.size() == source->getNumArguments() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  283:         "incorrect # of argument replacement values");
        -:  284:
        -:  285:  // Replace all of the successor arguments with the provided values.
    #####:  286:  for (auto it : llvm::zip(source->getArguments(), argValues))
branch  0 never executed
branch  1 never executed
    #####:  287:    std::get<0>(it).replaceAllUsesWith(std::get<1>(it));
call    0 never executed
        -:  288:
        -:  289:  // Splice the operations of the 'source' block into the 'dest' block and erase
        -:  290:  // it.
    #####:  291:  dest->getOperations().splice(dest->end(), source->getOperations());
call    0 never executed
    #####:  292:  source->dropAllUses();
call    0 never executed
    #####:  293:  source->erase();
call    0 never executed
    #####:  294:}
        -:  295:
        -:  296:// Merge the operations of block 'source' before the operation 'op'. Source
        -:  297:// block should not have existing predecessors or successors.
function _ZN4mlir12RewriterBase16mergeBlockBeforeEPNS_5BlockEPNS_9OperationENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:  298:void RewriterBase::mergeBlockBefore(Block *source, Operation *op,
        -:  299:                                    ValueRange argValues) {
    #####:  300:  assert(source->hasNoPredecessors() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  301:         "expected 'source' to have no predecessors");
    #####:  302:  assert(source->hasNoSuccessors() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  303:         "expected 'source' to have no successors");
        -:  304:
        -:  305:  // Split the block containing 'op' into two, one containing all operations
        -:  306:  // before 'op' (prologue) and another (epilogue) containing 'op' and all
        -:  307:  // operations after it.
    #####:  308:  Block *prologue = op->getBlock();
call    0 never executed
    #####:  309:  Block *epilogue = splitBlock(prologue, op->getIterator());
call    0 never executed
        -:  310:
        -:  311:  // Merge the source block at the end of the prologue.
    #####:  312:  mergeBlocks(source, prologue, argValues);
call    0 never executed
        -:  313:
        -:  314:  // Merge the epilogue at the end the prologue.
    #####:  315:  mergeBlocks(epilogue, prologue);
call    0 never executed
call    1 never executed
    #####:  316:}
        -:  317:
        -:  318:/// Split the operations starting at "before" (inclusive) out of the given
        -:  319:/// block into a new block, and return it.
function _ZN4mlir12RewriterBase10splitBlockEPNS_5BlockEN4llvm14ilist_iteratorINS3_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEE called 0 returned 0% blocks executed 0%
    #####:  320:Block *RewriterBase::splitBlock(Block *block, Block::iterator before) {
    #####:  321:  return block->splitBlock(before);
call    0 never executed
        -:  322:}
        -:  323:
        -:  324:/// 'op' and 'newOp' are known to have the same number of results, replace the
        -:  325:/// uses of op with uses of newOp
function _ZN4mlir12RewriterBase31replaceOpWithResultsOfAnotherOpEPNS_9OperationES2_ called 0 returned 0% blocks executed 0%
    #####:  326:void RewriterBase::replaceOpWithResultsOfAnotherOp(Operation *op,
        -:  327:                                                   Operation *newOp) {
    #####:  328:  assert(op->getNumResults() == newOp->getNumResults() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  329:         "replacement op doesn't match results of original op");
    #####:  330:  if (op->getNumResults() == 1)
branch  0 never executed
branch  1 never executed
    #####:  331:    return replaceOp(op, newOp->getResult(0));
call    0 never executed
call    1 never executed
    #####:  332:  return replaceOp(op, newOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  333:}
        -:  334:
        -:  335:/// Move the blocks that belong to "region" before the given position in
        -:  336:/// another region.  The two regions must be different.  The caller is in
        -:  337:/// charge to update create the operation transferring the control flow to the
        -:  338:/// region and pass it the correct block arguments.
function _ZN4mlir12RewriterBase18inlineRegionBeforeERNS_6RegionES2_N4llvm14ilist_iteratorINS3_12ilist_detail12node_optionsINS_5BlockELb1ELb0EvEELb0ELb0EEE called 0 returned 0% blocks executed 0%
    #####:  339:void RewriterBase::inlineRegionBefore(Region &region, Region &parent,
        -:  340:                                      Region::iterator before) {
    #####:  341:  parent.getBlocks().splice(before, region.getBlocks());
call    0 never executed
    #####:  342:}
function _ZN4mlir12RewriterBase18inlineRegionBeforeERNS_6RegionEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:  343:void RewriterBase::inlineRegionBefore(Region &region, Block *before) {
    #####:  344:  inlineRegionBefore(region, *before->getParent(), before->getIterator());
call    0 never executed
call    1 never executed
    #####:  345:}
        -:  346:
        -:  347:/// Clone the blocks that belong to "region" before the given position in
        -:  348:/// another region "parent". The two regions must be different. The caller is
        -:  349:/// responsible for creating or updating the operation transferring flow of
        -:  350:/// control to the region and passing it the correct block arguments.
function _ZN4mlir12RewriterBase17cloneRegionBeforeERNS_6RegionES2_N4llvm14ilist_iteratorINS3_12ilist_detail12node_optionsINS_5BlockELb1ELb0EvEELb0ELb0EEERNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:  351:void RewriterBase::cloneRegionBefore(Region &region, Region &parent,
        -:  352:                                     Region::iterator before,
        -:  353:                                     BlockAndValueMapping &mapping) {
    #####:  354:  region.cloneInto(&parent, before, mapping);
call    0 never executed
    #####:  355:}
function _ZN4mlir12RewriterBase17cloneRegionBeforeERNS_6RegionES2_N4llvm14ilist_iteratorINS3_12ilist_detail12node_optionsINS_5BlockELb1ELb0EvEELb0ELb0EEE called 0 returned 0% blocks executed 0%
    #####:  356:void RewriterBase::cloneRegionBefore(Region &region, Region &parent,
        -:  357:                                     Region::iterator before) {
    #####:  358:  BlockAndValueMapping mapping;
call    0 never executed
call    1 never executed
    #####:  359:  cloneRegionBefore(region, parent, before, mapping);
call    0 never executed
    #####:  360:}
function _ZN4mlir12RewriterBase17cloneRegionBeforeERNS_6RegionEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:  361:void RewriterBase::cloneRegionBefore(Region &region, Block *before) {
    #####:  362:  cloneRegionBefore(region, *before->getParent(), before->getIterator());
call    0 never executed
call    1 never executed
    #####:  363:}
