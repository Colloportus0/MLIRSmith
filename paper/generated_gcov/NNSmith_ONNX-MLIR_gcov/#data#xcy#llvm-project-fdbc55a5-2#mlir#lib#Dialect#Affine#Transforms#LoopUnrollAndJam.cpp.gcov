        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Transforms/LoopUnrollAndJam.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopUnrollAndJam.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopUnrollAndJam.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- LoopUnrollAndJam.cpp - Code to perform loop unroll and jam ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop unroll and jam. Unroll and jam is a transformation
        -:   10:// that improves locality, in particular, register reuse, while also improving
        -:   11:// operation level parallelism. The example below shows what it does in nearly
        -:   12:// the general case. Loop unroll and jam currently works if the bounds of the
        -:   13:// loops inner to the loop being unroll-jammed do not depend on the latter.
        -:   14://
        -:   15:// Before      After unroll and jam of i by factor 2:
        -:   16://
        -:   17://             for i, step = 2
        -:   18:// for i         S1(i);
        -:   19://   S1;         S2(i);
        -:   20://   S2;         S1(i+1);
        -:   21://   for j       S2(i+1);
        -:   22://     S3;       for j
        -:   23://     S4;         S3(i, j);
        -:   24://   S5;           S4(i, j);
        -:   25://   S6;           S3(i+1, j)
        -:   26://                 S4(i+1, j)
        -:   27://               S5(i);
        -:   28://               S6(i);
        -:   29://               S5(i+1);
        -:   30://               S6(i+1);
        -:   31://
        -:   32:// Note: 'if/else' blocks are not jammed. So, if there are loops inside if
        -:   33:// op's, bodies of those loops will not be jammed.
        -:   34://===----------------------------------------------------------------------===//
        -:   35:
        -:   36:#include "mlir/Dialect/Affine/Passes.h"
        -:   37:
        -:   38:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   39:#include "mlir/Dialect/Affine/Analysis/LoopAnalysis.h"
        -:   40:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   41:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   42:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   43:#include "mlir/IR/AffineExpr.h"
        -:   44:#include "mlir/IR/AffineMap.h"
        -:   45:#include "mlir/IR/BlockAndValueMapping.h"
        -:   46:#include "mlir/IR/Builders.h"
        -:   47:#include "llvm/ADT/DenseMap.h"
        -:   48:#include "llvm/Support/CommandLine.h"
        -:   49:
        -:   50:namespace mlir {
        -:   51:#define GEN_PASS_DEF_AFFINELOOPUNROLLANDJAM
        -:   52:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   53:} // namespace mlir
        -:   54:
        -:   55:#define DEBUG_TYPE "affine-loop-unroll-jam"
        -:   56:
        -:   57:using namespace mlir;
        -:   58:
        -:   59:namespace {
        -:   60:/// Loop unroll jam pass. Currently, this just unroll jams the first
        -:   61:/// outer loop in a Function.
    38016:   62:struct LoopUnrollAndJam
call    0 returned 100%
        -:   63:    : public impl::AffineLoopUnrollAndJamBase<LoopUnrollAndJam> {
function _ZN12_GLOBAL__N_116LoopUnrollAndJamC2EN4llvm8OptionalIjEE called 129267 returned 100% blocks executed 43%
   129267:   64:  explicit LoopUnrollAndJam(Optional<unsigned> unrollJamFactor = None) {
call    0 returned 100%
   129267:   65:    if (unrollJamFactor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   66:      this->unrollJamFactor = *unrollJamFactor;
branch  0 never executed
branch  1 never executed
   129267:   67:  }
        -:   68:
        -:   69:  void runOnOperation() override;
        -:   70:};
        -:   71:} // namespace
        -:   72:
        -:   73:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir26createLoopUnrollAndJamPassEi called 129267 returned 100% blocks executed 80%
   129267:   74:mlir::createLoopUnrollAndJamPass(int unrollJamFactor) {
   387801:   75:  return std::make_unique<LoopUnrollAndJam>(
  258534*:   76:      unrollJamFactor == -1 ? None : Optional<unsigned>(unrollJamFactor));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:   77:}
        -:   78:
function _ZN12_GLOBAL__N_116LoopUnrollAndJam14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   79:void LoopUnrollAndJam::runOnOperation() {
    #####:   80:  if (getOperation().isExternal())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   81:    return;
        -:   82:
        -:   83:  // Currently, just the outermost loop from the first loop nest is
        -:   84:  // unroll-and-jammed by this pass. However, runOnAffineForOp can be called on
        -:   85:  // any for operation.
    #####:   86:  auto &entryBlock = getOperation().front();
call    0 never executed
call    1 never executed
    #####:   87:  if (auto forOp = dyn_cast<AffineForOp>(entryBlock.front()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   88:    (void)loopUnrollJamByFactor(forOp, unrollJamFactor);
call    0 never executed
        -:   89:}
