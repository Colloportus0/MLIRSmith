        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/IR/TestRegions.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestRegions.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestRegions.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestRegions.cpp - Pass to test Region's methods --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:#include "mlir/Pass/Pass.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:
        -:   16:namespace {
        -:   17:/// This is a test pass that tests Region's takeBody method by making the first
        -:   18:/// function take the body of the second.
  129246*:   19:struct TakeBodyPass
call    0 never executed
call    1 returned 100%
        -:   20:    : public PassWrapper<TakeBodyPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_112TakeBodyPass13resolveTypeIDEv called 129246 returned 100% blocks executed 100%
   129246:   21:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TakeBodyPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   22:
function _ZNK12_GLOBAL__N_112TakeBodyPass11getArgumentEv called 128663 returned 100% blocks executed 100%
   128663:   23:  StringRef getArgument() const final { return "test-take-body"; }
function _ZNK12_GLOBAL__N_112TakeBodyPass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   24:  StringRef getDescription() const final { return "Test Region's takeBody"; }
        -:   25:
function _ZN12_GLOBAL__N_112TakeBodyPass14runOnOperationEv called 518 returned 100% blocks executed 55%
      518:   26:  void runOnOperation() override {
      518:   27:    auto module = getOperation();
call    0 returned 100%
        -:   28:
      518:   29:    SmallVector<func::FuncOp> functions =
     518*:   30:        llvm::to_vector(module.getOps<func::FuncOp>());
call    0 returned 100%
call    1 returned 100%
      518:   31:    if (functions.size() != 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      518:   32:      module.emitError("Expected only two functions in test");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      518:   33:      signalPassFailure();
call    0 returned 100%
      518:   34:      return;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   35:    }
        -:   36:
    #####:   37:    functions[0].getBody().takeBody(functions[1].getBody());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:   38:  }
        -:   39:};
        -:   40:
        -:   41:} // namespace
        -:   42:
        -:   43:namespace mlir {
function _ZN4mlir24registerRegionTestPassesEv called 128637 returned 100% blocks executed 100%
   128637:   44:void registerRegionTestPasses() { PassRegistration<TakeBodyPass>(); }
call    0 returned 100%
        -:   45:} // namespace mlir
