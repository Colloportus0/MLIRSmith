        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Transforms/LoopUnroll.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopUnroll.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopUnroll.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- LoopUnroll.cpp - Code to perform loop unrolling --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop unrolling.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/Analysis/LoopAnalysis.h"
        -:   16:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   17:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   18:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   19:#include "mlir/IR/AffineExpr.h"
        -:   20:#include "mlir/IR/AffineMap.h"
        -:   21:#include "mlir/IR/Builders.h"
        -:   22:#include "llvm/ADT/DenseMap.h"
        -:   23:#include "llvm/Support/CommandLine.h"
        -:   24:#include "llvm/Support/Debug.h"
        -:   25:
        -:   26:namespace mlir {
        -:   27:#define GEN_PASS_DEF_AFFINELOOPUNROLL
        -:   28:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   29:} // namespace mlir
        -:   30:
        -:   31:#define DEBUG_TYPE "affine-loop-unroll"
        -:   32:
        -:   33:using namespace mlir;
        -:   34:
        -:   35:namespace {
        -:   36:
        -:   37:// TODO: this is really a test pass and should be moved out of dialect
        -:   38:// transforms.
        -:   39:
        -:   40:/// Loop unrolling pass. Unrolls all innermost loops unless full unrolling and a
        -:   41:/// full unroll threshold was specified, in which case, fully unrolls all loops
        -:   42:/// with trip count less than the specified threshold. The latter is for testing
        -:   43:/// purposes, especially for testing outer loop unrolling.
        -:   44:struct LoopUnroll : public impl::AffineLoopUnrollBase<LoopUnroll> {
        -:   45:  // Callback to obtain unroll factors; if this has a callable target, takes
        -:   46:  // precedence over command-line argument or passed argument.
        -:   47:  const std::function<unsigned(AffineForOp)> getUnrollFactor;
        -:   48:
        -:   49:  LoopUnroll() : getUnrollFactor(nullptr) {}
function _ZN12_GLOBAL__N_110LoopUnrollC2ERKS0_ called 40248 returned 100% blocks executed 60%
    40248:   50:  LoopUnroll(const LoopUnroll &other)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   51:
        -:   52:      = default;
function _ZN12_GLOBAL__N_110LoopUnrollC2EN4llvm8OptionalIjEEbbRKSt8functionIFjN4mlir11AffineForOpEEE called 129286 returned 100% blocks executed 50%
   129286:   53:  explicit LoopUnroll(
        -:   54:      Optional<unsigned> unrollFactor = None, bool unrollUpToFactor = false,
        -:   55:      bool unrollFull = false,
        -:   56:      const std::function<unsigned(AffineForOp)> &getUnrollFactor = nullptr)
   129286:   57:      : getUnrollFactor(getUnrollFactor) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   129286:   58:    if (unrollFactor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   59:      this->unrollFactor = *unrollFactor;
branch  0 never executed
branch  1 never executed
   129286:   60:    this->unrollUpToFactor = unrollUpToFactor;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129286:   61:    this->unrollFull = unrollFull;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   129286:   62:  }
        -:   63:
        -:   64:  void runOnOperation() override;
        -:   65:
        -:   66:  /// Unroll this for op. Returns failure if nothing was done.
        -:   67:  LogicalResult runOnAffineForOp(AffineForOp forOp);
        -:   68:};
        -:   69:} // namespace
        -:   70:
        -:   71:/// Returns true if no other affine.for ops are nested within `op`.
function _ZL22isInnermostAffineForOpN4mlir11AffineForOpE called 0 returned 0% blocks executed 0%
    #####:   72:static bool isInnermostAffineForOp(AffineForOp op) {
    #####:   73:  return !op.getBody()
    #####:   74:              ->walk([&](AffineForOp nestedForOp) {
    #####:   75:                return WalkResult::interrupt();
    #####:   76:              })
call    0 never executed
call    1 never executed
    #####:   77:              .wasInterrupted();
        -:   78:}
        -:   79:
        -:   80:/// Gathers loops that have no affine.for's nested within.
    #####:   81:static void gatherInnermostLoops(func::FuncOp f,
        -:   82:                                 SmallVectorImpl<AffineForOp> &loops) {
function _ZZL20gatherInnermostLoopsN4mlir4func6FuncOpERN4llvm15SmallVectorImplINS_11AffineForOpEEEENKUlS4_E_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   83:  f.walk([&](AffineForOp forOp) {
    #####:   84:    if (isInnermostAffineForOp(forOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:      loops.push_back(forOp);
call    0 never executed
    #####:   86:  });
        -:   87:}
        -:   88:
function _ZN12_GLOBAL__N_110LoopUnroll14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   89:void LoopUnroll::runOnOperation() {
    #####:   90:  func::FuncOp func = getOperation();
call    0 never executed
    #####:   91:  if (func.isExternal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   92:    return;
        -:   93:
    #####:   94:  if (unrollFull && unrollFullThreshold.hasValue()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   95:    // Store short loops as we walk.
    #####:   96:    SmallVector<AffineForOp, 4> loops;
call    0 never executed
        -:   97:
        -:   98:    // Gathers all loops with trip count <= minTripCount. Do a post order walk
        -:   99:    // so that loops are gathered from innermost to outermost (or else unrolling
        -:  100:    // an outer one may delete gathered inner ones).
function _ZZN12_GLOBAL__N_110LoopUnroll14runOnOperationEvENKUlN4mlir11AffineForOpEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  101:    getOperation().walk([&](AffineForOp forOp) {
call    0 never executed
call    1 never executed
    #####:  102:      Optional<uint64_t> tripCount = getConstantTripCount(forOp);
call    0 never executed
    #####:  103:      if (tripCount && *tripCount <= unrollFullThreshold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  104:        loops.push_back(forOp);
call    0 never executed
    #####:  105:    });
    #####:  106:    for (auto forOp : loops)
branch  0 never executed
branch  1 never executed
    #####:  107:      (void)loopUnrollFull(forOp);
call    0 never executed
    #####:  108:    return;
branch  0 never executed
branch  1 never executed
        -:  109:  }
        -:  110:
        -:  111:  // If the call back is provided, we will recurse until no loops are found.
    #####:  112:  SmallVector<AffineForOp, 4> loops;
    #####:  113:  for (unsigned i = 0; i < numRepetitions || getUnrollFactor; i++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  114:    loops.clear();
call    0 never executed
    #####:  115:    gatherInnermostLoops(func, loops);
call    0 never executed
    #####:  116:    if (loops.empty())
branch  0 never executed
branch  1 never executed
        -:  117:      break;
    #####:  118:    bool unrolled = false;
    #####:  119:    for (auto forOp : loops)
branch  0 never executed
branch  1 never executed
    #####:  120:      unrolled |= succeeded(runOnAffineForOp(forOp));
call    0 never executed
    #####:  121:    if (!unrolled)
branch  0 never executed
branch  1 never executed
        -:  122:      // Break out if nothing was unrolled.
        -:  123:      break;
        -:  124:  }
        -:  125:}
        -:  126:
        -:  127:/// Unrolls a 'affine.for' op. Returns success if the loop was unrolled,
        -:  128:/// failure otherwise. The default unroll factor is 4.
function _ZN12_GLOBAL__N_110LoopUnroll16runOnAffineForOpEN4mlir11AffineForOpE called 0 returned 0% blocks executed 0%
    #####:  129:LogicalResult LoopUnroll::runOnAffineForOp(AffineForOp forOp) {
        -:  130:  // Use the function callback if one was provided.
    #####:  131:  if (getUnrollFactor)
branch  0 never executed
branch  1 never executed
    #####:  132:    return loopUnrollByFactor(forOp, getUnrollFactor(forOp),
    #####:  133:                              /*annotateFn=*/nullptr, cleanUpUnroll);
call    0 never executed
call    1 never executed
        -:  134:  // Unroll completely if full loop unroll was specified.
    #####:  135:  if (unrollFull)
branch  0 never executed
branch  1 never executed
    #####:  136:    return loopUnrollFull(forOp);
call    0 never executed
        -:  137:  // Otherwise, unroll by the given unroll factor.
    #####:  138:  if (unrollUpToFactor)
branch  0 never executed
branch  1 never executed
    #####:  139:    return loopUnrollUpToFactor(forOp, unrollFactor);
call    0 never executed
    #####:  140:  return loopUnrollByFactor(forOp, unrollFactor, /*annotateFn=*/nullptr,
    #####:  141:                            cleanUpUnroll);
call    0 never executed
        -:  142:}
        -:  143:
function _ZN4mlir20createLoopUnrollPassEibbRKSt8functionIFjNS_11AffineForOpEEE called 129286 returned 100% blocks executed 80%
   129286:  144:std::unique_ptr<OperationPass<func::FuncOp>> mlir::createLoopUnrollPass(
        -:  145:    int unrollFactor, bool unrollUpToFactor, bool unrollFull,
        -:  146:    const std::function<unsigned(AffineForOp)> &getUnrollFactor) {
   387858:  147:  return std::make_unique<LoopUnroll>(
  258572*:  148:      unrollFactor == -1 ? None : Optional<unsigned>(unrollFactor),
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
   129286:  149:      unrollUpToFactor, unrollFull, getUnrollFactor);
        -:  150:}
