        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/GPUCommon/IndexIntrinsicsOpLowering.h
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUToROCDL/CMakeFiles/obj.MLIRGPUToROCDLTransforms.dir/LowerGpuOpsToROCDLOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUToROCDL/CMakeFiles/obj.MLIRGPUToROCDLTransforms.dir/LowerGpuOpsToROCDLOps.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- IndexIntrinsicsOpLowering.h - GPU IndexOps Lowering class *- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:#ifndef MLIR_CONVERSION_GPUCOMMON_INDEXINTRINSICSOPLOWERING_H_
        -:    9:#define MLIR_CONVERSION_GPUCOMMON_INDEXINTRINSICSOPLOWERING_H_
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   12:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   13:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   14:
        -:   15:namespace mlir {
        -:   16:
        -:   17:// Rewriting that replaces Op with XOp, YOp, or ZOp depending on the dimension
        -:   18:// that Op operates on.  Op is assumed to return an `index` value and
        -:   19:// XOp, YOp and ZOp are assumed to return an `llvm.i32` value.  Depending on
        -:   20:// `indexBitwidth`, sign-extend or truncate the resulting value to match the
        -:   21:// bitwidth expected by the consumers of the value.
        -:   22:template <typename Op, typename XOp, typename YOp, typename ZOp>
        -:   23:struct GPUIndexIntrinsicOpLowering : public ConvertOpToLLVMPattern<Op> {
        -:   24:private:
        -:   25:  unsigned indexBitwidth;
        -:   26:
        -:   27:public:
    #####:   28:  explicit GPUIndexIntrinsicOpLowering(LLVMTypeConverter &typeConverter)
        -:   29:      : ConvertOpToLLVMPattern<Op>(typeConverter),
    #####:   30:        indexBitwidth(typeConverter.getIndexTypeBitwidth()) {}
------------------
_ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu9GridDimOpENS_5ROCDL10GridDimXOpENS3_10GridDimYOpENS3_10GridDimZOpEEC2ERNS_17LLVMTypeConverterE:
function _ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu9GridDimOpENS_5ROCDL10GridDimXOpENS3_10GridDimYOpENS3_10GridDimZOpEEC2ERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   28:  explicit GPUIndexIntrinsicOpLowering(LLVMTypeConverter &typeConverter)
        -:   29:      : ConvertOpToLLVMPattern<Op>(typeConverter),
    #####:   30:        indexBitwidth(typeConverter.getIndexTypeBitwidth()) {}
call    0 never executed
call    1 never executed
------------------
_ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu9BlockIdOpENS_5ROCDL10BlockIdXOpENS3_10BlockIdYOpENS3_10BlockIdZOpEEC2ERNS_17LLVMTypeConverterE:
function _ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu9BlockIdOpENS_5ROCDL10BlockIdXOpENS3_10BlockIdYOpENS3_10BlockIdZOpEEC2ERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   28:  explicit GPUIndexIntrinsicOpLowering(LLVMTypeConverter &typeConverter)
        -:   29:      : ConvertOpToLLVMPattern<Op>(typeConverter),
    #####:   30:        indexBitwidth(typeConverter.getIndexTypeBitwidth()) {}
call    0 never executed
call    1 never executed
------------------
_ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu10BlockDimOpENS_5ROCDL11BlockDimXOpENS3_11BlockDimYOpENS3_11BlockDimZOpEEC2ERNS_17LLVMTypeConverterE:
function _ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu10BlockDimOpENS_5ROCDL11BlockDimXOpENS3_11BlockDimYOpENS3_11BlockDimZOpEEC2ERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   28:  explicit GPUIndexIntrinsicOpLowering(LLVMTypeConverter &typeConverter)
        -:   29:      : ConvertOpToLLVMPattern<Op>(typeConverter),
    #####:   30:        indexBitwidth(typeConverter.getIndexTypeBitwidth()) {}
call    0 never executed
call    1 never executed
------------------
_ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu10ThreadIdOpENS_5ROCDL11ThreadIdXOpENS3_11ThreadIdYOpENS3_11ThreadIdZOpEEC2ERNS_17LLVMTypeConverterE:
function _ZN4mlir27GPUIndexIntrinsicOpLoweringINS_3gpu10ThreadIdOpENS_5ROCDL11ThreadIdXOpENS3_11ThreadIdYOpENS3_11ThreadIdZOpEEC2ERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:   28:  explicit GPUIndexIntrinsicOpLowering(LLVMTypeConverter &typeConverter)
        -:   29:      : ConvertOpToLLVMPattern<Op>(typeConverter),
    #####:   30:        indexBitwidth(typeConverter.getIndexTypeBitwidth()) {}
call    0 never executed
call    1 never executed
------------------
        -:   31:
        -:   32:  // Convert the kernel arguments to an LLVM type, preserve the rest.
        -:   33:  LogicalResult
    #####:   34:  matchAndRewrite(Op op, typename Op::Adaptor adaptor,
        -:   35:                  ConversionPatternRewriter &rewriter) const override {
    #####:   36:    auto loc = op->getLoc();
    #####:   37:    MLIRContext *context = rewriter.getContext();
    #####:   38:    Value newOp;
    #####:   39:    switch (op.getDimension()) {
    #####:   40:    case gpu::Dimension::x:
    #####:   41:      newOp = rewriter.create<XOp>(loc, IntegerType::get(context, 32));
    #####:   42:      break;
    #####:   43:    case gpu::Dimension::y:
    #####:   44:      newOp = rewriter.create<YOp>(loc, IntegerType::get(context, 32));
    #####:   45:      break;
    #####:   46:    case gpu::Dimension::z:
    #####:   47:      newOp = rewriter.create<ZOp>(loc, IntegerType::get(context, 32));
    #####:   48:      break;
        -:   49:    }
        -:   50:
    #####:   51:    if (indexBitwidth > 32) {
    #####:   52:      newOp = rewriter.create<LLVM::SExtOp>(
    #####:   53:          loc, IntegerType::get(context, indexBitwidth), newOp);
    #####:   54:    } else if (indexBitwidth < 32) {
    #####:   55:      newOp = rewriter.create<LLVM::TruncOp>(
    #####:   56:          loc, IntegerType::get(context, indexBitwidth), newOp);
        -:   57:    }
        -:   58:
    #####:   59:    rewriter.replaceOp(op, {newOp});
    #####:   60:    return success();
        -:   61:  }
        -:   62:};
        -:   63:
        -:   64:} // namespace mlir
        -:   65:
        -:   66:#endif // MLIR_CONVERSION_GPUCOMMON_INDEXINTRINSICSOPLOWERING_H_
