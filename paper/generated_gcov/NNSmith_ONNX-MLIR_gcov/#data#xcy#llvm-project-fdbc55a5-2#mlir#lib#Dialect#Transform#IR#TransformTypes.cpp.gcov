        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Transform/IR/TransformTypes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Transform/IR/CMakeFiles/obj.MLIRTransformDialect.dir/TransformTypes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Transform/IR/CMakeFiles/obj.MLIRTransformDialect.dir/TransformTypes.cpp.gcda
        -:    0:Runs:128633
        -:    1://===- TransformTypes.cpp - Transform Dialect Type Definitions ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Transform/IR/TransformTypes.h"
        -:   10:#include "mlir/Dialect/Transform/IR/TransformDialect.h"
        -:   11:#include "mlir/Dialect/Transform/IR/TransformInterfaces.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/IR/DialectImplementation.h"
        -:   14:#include "mlir/IR/OpImplementation.h"
        -:   15:#include "mlir/IR/Types.h"
        -:   16:#include "llvm/ADT/TypeSwitch.h"
        -:   17:#include "llvm/Support/Compiler.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:#include "mlir/Dialect/Transform/IR/TransformTypeInterfaces.cpp.inc"
        -:   22:
        -:   23:// These are automatically generated by ODS but are not used as the Transform
        -:   24:// dialect uses a different dispatch mechanism to support dialect extensions.
        -:   25:LLVM_ATTRIBUTE_UNUSED static OptionalParseResult
        -:   26:generatedTypeParser(AsmParser &parser, StringRef *mnemonic, Type &value);
        -:   27:LLVM_ATTRIBUTE_UNUSED static LogicalResult
        -:   28:generatedTypePrinter(Type def, AsmPrinter &printer);
        -:   29:
        -:   30:#define GET_TYPEDEF_CLASSES
        -:   31:#include "mlir/Dialect/Transform/IR/TransformTypes.cpp.inc"
        -:   32:
function _ZN4mlir9transform16TransformDialect15initializeTypesEv called 0 returned 0% blocks executed 0%
    #####:   33:void transform::TransformDialect::initializeTypes() {
    #####:   34:  addTypesChecked<
call    0 never executed
        -:   35:#define GET_TYPEDEF_LIST
        -:   36:#include "mlir/Dialect/Transform/IR/TransformTypes.cpp.inc"
    #####:   37:      >();
    #####:   38:}
        -:   39:
        -:   40:DiagnosedSilenceableFailure
function _ZNK4mlir9transform9AnyOpType12checkPayloadENS_8LocationEN4llvm8ArrayRefIPNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:   41:transform::AnyOpType::checkPayload(Location loc,
        -:   42:                                   ArrayRef<Operation *> payload) const {
    #####:   43:  return DiagnosedSilenceableFailure::success();
        -:   44:}
        -:   45:
        -:   46:DiagnosedSilenceableFailure
function _ZNK4mlir9transform13OperationType12checkPayloadENS_8LocationEN4llvm8ArrayRefIPNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:   47:transform::OperationType::checkPayload(Location loc,
        -:   48:                                       ArrayRef<Operation *> payload) const {
    #####:   49:  OperationName opName(getOperationName(), loc.getContext());
call    0 never executed
call    1 never executed
    #####:   50:  for (Operation *op : payload) {
branch  0 never executed
branch  1 never executed
    #####:   51:    if (opName != op->getName()) {
branch  0 never executed
branch  1 never executed
    #####:   52:      DiagnosedSilenceableFailure diag =
    #####:   53:          emitSilenceableError(loc) << "incompatible payload operation name";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   54:      diag.attachNote(op->getLoc()) << "payload operation";
call    0 never executed
call    1 never executed
    #####:   55:      return diag;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   56:    }
        -:   57:  }
        -:   58:
    #####:   59:  return DiagnosedSilenceableFailure::success();
        -:   60:}
