        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/DataFlow/SparseAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/SparseAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/SparseAnalysis.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- SparseAnalysis.cpp - Sparse data-flow analysis ---------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/SparseAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   11:#include "mlir/Interfaces/CallInterfaces.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::dataflow;
        -:   15:
        -:   16://===----------------------------------------------------------------------===//
        -:   17:// AbstractSparseLattice
        -:   18://===----------------------------------------------------------------------===//
        -:   19:
function _ZNK4mlir8dataflow21AbstractSparseLattice8onUpdateEPNS_14DataFlowSolverE called 2075759 returned 100% blocks executed 100%
  2075759:   20:void AbstractSparseLattice::onUpdate(DataFlowSolver *solver) const {
        -:   21:  // Push all users of the value to the queue.
  4977259:   22:  for (Operation *user : point.get<Value>().getUsers())
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
  3203823:   23:    for (DataFlowAnalysis *analysis : useDefSubscribers)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
   302323:   24:      solver->enqueue({user, analysis});
call    0 returned 100%
call    1 returned 100%
  2075759:   25:}
        -:   26:
        -:   27://===----------------------------------------------------------------------===//
        -:   28:// AbstractSparseDataFlowAnalysis
        -:   29://===----------------------------------------------------------------------===//
        -:   30:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysisC2ERNS_14DataFlowSolverE called 2545 returned 100% blocks executed 100%
     2545:   31:AbstractSparseDataFlowAnalysis::AbstractSparseDataFlowAnalysis(
     2545:   32:    DataFlowSolver &solver)
     2545:   33:    : DataFlowAnalysis(solver) {
call    0 returned 100%
     2545:   34:  registerPointKind<CFGEdge>();
call    0 returned 100%
     2545:   35:}
        -:   36:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis10initializeEPNS_9OperationE called 2545 returned 100% blocks executed 63%
     2545:   37:LogicalResult AbstractSparseDataFlowAnalysis::initialize(Operation *top) {
        -:   38:  // Mark the entry block arguments as having reached their pessimistic
        -:   39:  // fixpoints.
     7635:   40:  for (Region &region : top->getRegions()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
    2545*:   41:    if (region.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   42:      continue;
    2545*:   43:    for (Value argument : region.front().getArguments())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   44:      setAllToEntryStates(getLatticeElement(argument));
call    0 never executed
        -:   45:  }
        -:   46:
     2545:   47:  return initializeRecursively(top);
call    0 returned 100%
        -:   48:}
        -:   49:
        -:   50:LogicalResult
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis21initializeRecursivelyEPNS_9OperationE called 1999490 returned 100% blocks executed 91%
  1999490:   51:AbstractSparseDataFlowAnalysis::initializeRecursively(Operation *op) {
        -:   52:  // Initialize the analysis by visiting every owner of an SSA value (all
        -:   53:  // operations and blocks).
  1999490:   54:  visitOperation(op);
call    0 returned 100%
  2617875:   55:  for (Region &region : op->getRegions()) {
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
   289240:   56:    for (Block &block : region) {
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   220388:   57:      getOrCreate<Executable>(&block)->blockContentSubscribe(this);
call    0 returned 100%
call    1 returned 100%
   220388:   58:      visitBlock(&block);
call    0 returned 100%
  2217333:   59:      for (Operation &op : block)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
call    2 returned 100%
  1996945:   60:        if (failed(initializeRecursively(&op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   61:          return failure();
        -:   62:    }
        -:   63:  }
        -:   64:
  1999490:   65:  return success();
        -:   66:}
        -:   67:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis5visitENS_12ProgramPointE called 1462544 returned 100% blocks executed 89%
  1462544:   68:LogicalResult AbstractSparseDataFlowAnalysis::visit(ProgramPoint point) {
  1462544:   69:  if (Operation *op = point.dyn_cast<Operation *>())
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
  1225757:   70:    visitOperation(op);
call    0 returned 100%
   236787:   71:  else if (Block *block = point.dyn_cast<Block *>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   236787:   72:    visitBlock(block);
call    0 returned 100%
        -:   73:  else
    #####:   74:    return failure();
  1462544:   75:  return success();
        -:   76:}
        -:   77:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis14visitOperationEPNS_9OperationE called 3225247 returned 100% blocks executed 69%
  3225247:   78:void AbstractSparseDataFlowAnalysis::visitOperation(Operation *op) {
        -:   79:  // Exit early on operations with no results.
  3225247:   80:  if (op->getNumResults() == 0)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
  1606821:   81:    return;
        -:   82:
        -:   83:  // If the containing block is not executable, bail out.
  2646571:   84:  if (!getOrCreate<Executable>(op->getBlock())->isLive())
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
        -:   85:    return;
        -:   86:
        -:   87:  // Get the result lattices.
  3299742:   88:  SmallVector<AbstractSparseLattice *> resultLattices;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
  1681316:   89:  resultLattices.reserve(op->getNumResults());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
  5043948:   90:  for (Value result : op->getResults()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
  1681316:   91:    AbstractSparseLattice *resultLattice = getLatticeElement(result);
call    0 returned 100%
  1681316:   92:    resultLattices.push_back(resultLattice);
call    0 returned 100%
        -:   93:  }
        -:   94:
        -:   95:  // The results of a region branch operation are determined by control-flow.
  1681316:   96:  if (auto branch = dyn_cast<RegionBranchOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100%
    #####:   97:    return visitRegionSuccessors({branch}, branch,
call    0 never executed
call    1 never executed
    #####:   98:                                 /*successorIndex=*/llvm::None, resultLattices);
        -:   99:  }
        -:  100:
        -:  101:  // The results of a call operation are determined by the callgraph.
  1681316:  102:  if (auto call = dyn_cast<CallOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
    62890:  103:    const auto *predecessors = getOrCreateFor<PredecessorState>(op, call);
call    0 returned 100%
call    1 returned 100%
        -:  104:    // If not all return sites are known, then conservatively assume we can't
        -:  105:    // reason about the data-flow.
    62890:  106:    if (!predecessors->allPredecessorsKnown())
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    65230:  107:      return setAllToEntryStates(resultLattices);
   60550*:  108:    for (Operation *predecessor : predecessors->getKnownPredecessors())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  109:      for (auto it : llvm::zip(predecessor->getOperands(), resultLattices))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:        join(std::get<1>(it), *getLatticeElementFor(op, std::get<0>(it)));
call    0 never executed
        -:  111:    return;
        -:  112:  }
        -:  113:
        -:  114:  // Grab the lattice elements of the operands.
  3236852:  115:  SmallVector<const AbstractSparseLattice *> operandLattices;
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  2781432:  116:  operandLattices.reserve(op->getNumOperands());
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  3632955:  117:  for (Value operand : op->getOperands()) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
call    3 returned 100%
  2014529:  118:    AbstractSparseLattice *operandLattice = getLatticeElement(operand);
call    0 returned 100%
  2014529:  119:    operandLattice->useDefSubscribe(this);
call    0 returned 100%
  2014529:  120:    operandLattices.push_back(operandLattice);
call    0 returned 100%
        -:  121:  }
        -:  122:
        -:  123:  // Invoke the operation transfer function.
  1618426:  124:  visitOperationImpl(op, operandLattices, resultLattices);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  125:}
        -:  126:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis10visitBlockEPNS_5BlockE called 457175 returned 100% blocks executed 70%
   457175:  127:void AbstractSparseDataFlowAnalysis::visitBlock(Block *block) {
        -:  128:  // Exit early on blocks with no arguments.
   457175:  129:  if (block->getNumArguments() == 0)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
   341202:  130:    return;
        -:  131:
        -:  132:  // If the block is not executable, bail out.
   192836:  133:  if (!getOrCreate<Executable>(block)->isLive())
call    0 returned 100%
branch  1 taken 68% (fallthrough)
branch  2 taken 32%
        -:  134:    return;
        -:  135:
        -:  136:  // Get the argument lattices.
   247141:  137:  SmallVector<AbstractSparseLattice *> argLattices;
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   131168:  138:  argLattices.reserve(block->getNumArguments());
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   310963:  139:  for (BlockArgument argument : block->getArguments()) {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
   179795:  140:    AbstractSparseLattice *argLattice = getLatticeElement(argument);
call    0 returned 100%
   179795:  141:    argLattices.push_back(argLattice);
call    0 returned 100%
        -:  142:  }
        -:  143:
        -:  144:  // The argument lattices of entry blocks are set by region control-flow or the
        -:  145:  // callgraph.
   131168:  146:  if (block->isEntryBlock()) {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
        -:  147:    // Check if this block is the entry block of a callable region.
    15195:  148:    auto callable = dyn_cast<CallableOpInterface>(block->getParentOp());
call    0 returned 100%
call    1 returned 100%
    15195:  149:    if (callable && callable.getCallableRegion() == block->getParent()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
    15174:  150:      const auto *callsites = getOrCreateFor<PredecessorState>(block, callable);
call    0 returned 100%
call    1 returned 100%
        -:  151:      // If not all callsites are known, conservatively mark all lattices as
        -:  152:      // having reached their pessimistic fixpoints.
    15174:  153:      if (!callsites->allPredecessorsKnown())
branch  0 taken 100%
branch  1 taken 0%
    30369:  154:        return setAllToEntryStates(argLattices);
    #####:  155:      for (Operation *callsite : callsites->getKnownPredecessors()) {
branch  0 never executed
branch  1 never executed
    #####:  156:        auto call = cast<CallOpInterface>(callsite);
call    0 never executed
    #####:  157:        for (auto it : llvm::zip(call.getArgOperands(), argLattices))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  158:          join(std::get<1>(it), *getLatticeElementFor(block, std::get<0>(it)));
call    0 never executed
        -:  159:      }
        -:  160:      return;
        -:  161:    }
        -:  162:
        -:  163:    // Check if the lattices can be determined from region control flow.
       21:  164:    if (auto branch = dyn_cast<RegionBranchOpInterface>(block->getParentOp())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
    #####:  165:      return visitRegionSuccessors(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  166:          block, branch, block->getParent()->getRegionNumber(), argLattices);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  167:    }
        -:  168:
        -:  169:    // Otherwise, we can't reason about the data-flow.
       21:  170:    return visitNonControlFlowArgumentsImpl(block->getParentOp(),
call    0 returned 100%
       42:  171:                                            RegionSuccessor(block->getParent()),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       21:  172:                                            argLattices, /*firstIndex=*/0);
call    0 returned 100%
        -:  173:  }
        -:  174:
        -:  175:  // Iterate over the predecessors of the non-entry block.
   347919:  176:  for (Block::pred_iterator it = block->pred_begin(), e = block->pred_end();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   347919:  177:       it != e; ++it) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   231946:  178:    Block *predecessor = *it;
call    0 returned 100%
        -:  179:
        -:  180:    // If the edge from the predecessor block to the current block is not live,
        -:  181:    // bail out.
   231946:  182:    auto *edgeExecutable =
   231946:  183:        getOrCreate<Executable>(getProgramPoint<CFGEdge>(predecessor, block));
call    0 returned 100%
call    1 returned 100%
   231946:  184:    edgeExecutable->blockContentSubscribe(this);
call    0 returned 100%
   231946:  185:    if (!edgeExecutable->isLive())
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
    58137:  186:      continue;
        -:  187:
        -:  188:    // Check if we can reason about the data-flow from the predecessor.
   173809:  189:    if (auto branch =
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   173809:  190:            dyn_cast<BranchOpInterface>(predecessor->getTerminator())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   173809:  191:      SuccessorOperands operands =
   347618:  192:          branch.getSuccessorOperands(it.getSuccessorIndex());
call    0 returned 100%
call    1 returned 100%
   347618:  193:      for (auto &it : llvm::enumerate(argLattices)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   173809:  194:        if (Value operand = operands[it.index()]) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   173809:  195:          join(it.value(), *getLatticeElementFor(block, operand));
call    0 returned 100%
        -:  196:        } else {
        -:  197:          // Conservatively consider internally produced arguments as entry
        -:  198:          // points.
  173809*:  199:          setAllToEntryStates(it.value());
call    0 returned 100%
        -:  200:        }
        -:  201:      }
        -:  202:    } else {
    #####:  203:      return setAllToEntryStates(argLattices);
        -:  204:    }
        -:  205:  }
        -:  206:}
        -:  207:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis21visitRegionSuccessorsENS_12ProgramPointENS_23RegionBranchOpInterfaceEN4llvm8OptionalIjEENS4_8ArrayRefIPNS0_21AbstractSparseLatticeEEE called 0 returned 0% blocks executed 0%
    #####:  208:void AbstractSparseDataFlowAnalysis::visitRegionSuccessors(
        -:  209:    ProgramPoint point, RegionBranchOpInterface branch,
        -:  210:    Optional<unsigned> successorIndex,
        -:  211:    ArrayRef<AbstractSparseLattice *> lattices) {
    #####:  212:  const auto *predecessors = getOrCreateFor<PredecessorState>(point, point);
call    0 never executed
    #####:  213:  assert(predecessors->allPredecessorsKnown() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  214:         "unexpected unresolved region successors");
        -:  215:
    #####:  216:  for (Operation *op : predecessors->getKnownPredecessors()) {
branch  0 never executed
branch  1 never executed
        -:  217:    // Get the incoming successor operands.
    #####:  218:    Optional<OperandRange> operands;
        -:  219:
        -:  220:    // Check if the predecessor is the parent op.
    #####:  221:    if (op == branch) {
branch  0 never executed
branch  1 never executed
    #####:  222:      operands = branch.getSuccessorEntryOperands(successorIndex);
call    0 never executed
        -:  223:      // Otherwise, try to deduce the operands from a region return-like op.
        -:  224:    } else {
    #####:  225:      if (isRegionReturnLike(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  226:        operands = getRegionBranchSuccessorOperands(op, successorIndex);
call    0 never executed
        -:  227:    }
        -:  228:
    #####:  229:    if (!operands) {
branch  0 never executed
branch  1 never executed
        -:  230:      // We can't reason about the data-flow.
    #####:  231:      return setAllToEntryStates(lattices);
        -:  232:    }
        -:  233:
    #####:  234:    ValueRange inputs = predecessors->getSuccessorInputs(op);
call    0 never executed
    #####:  235:    assert(inputs.size() == operands->size() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  236:           "expected the same number of successor inputs as operands");
        -:  237:
    #####:  238:    unsigned firstIndex = 0;
    #####:  239:    if (inputs.size() != lattices.size()) {
branch  0 never executed
branch  1 never executed
    #####:  240:      if (point.dyn_cast<Operation *>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  241:        if (!inputs.empty())
branch  0 never executed
branch  1 never executed
    #####:  242:          firstIndex = inputs.front().cast<OpResult>().getResultNumber();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  243:        visitNonControlFlowArgumentsImpl(
call    0 never executed
        -:  244:            branch,
    #####:  245:            RegionSuccessor(
call    0 never executed
    #####:  246:                branch->getResults().slice(firstIndex, inputs.size())),
call    0 never executed
call    1 never executed
    #####:  247:            lattices, firstIndex);
branch  0 never executed
branch  1 never executed
        -:  248:      } else {
    #####:  249:        if (!inputs.empty())
branch  0 never executed
branch  1 never executed
    #####:  250:          firstIndex = inputs.front().cast<BlockArgument>().getArgNumber();
call    0 never executed
call    1 never executed
    #####:  251:        Region *region = point.get<Block *>()->getParent();
call    0 never executed
call    1 never executed
    #####:  252:        visitNonControlFlowArgumentsImpl(
        -:  253:            branch,
    #####:  254:            RegionSuccessor(region, region->getArguments().slice(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  255:                                        firstIndex, inputs.size())),
    #####:  256:            lattices, firstIndex);
call    0 never executed
        -:  257:      }
        -:  258:    }
        -:  259:
    #####:  260:    for (auto it : llvm::zip(*operands, lattices.drop_front(firstIndex)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  261:      join(std::get<1>(it), *getLatticeElementFor(point, std::get<0>(it)));
call    0 never executed
        -:  262:  }
        -:  263:}
        -:  264:
        -:  265:const AbstractSparseLattice *
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis20getLatticeElementForENS_12ProgramPointENS_5ValueE called 0 returned 0% blocks executed 0%
  173809*:  266:AbstractSparseDataFlowAnalysis::getLatticeElementFor(ProgramPoint point,
        -:  267:                                                     Value value) {
  173809*:  268:  AbstractSparseLattice *state = getLatticeElement(value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
  173809*:  269:  addDependency(state, point);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
  173809*:  270:  return state;
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 never executed
        -:  271:}
        -:  272:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis19setAllToEntryStatesEN4llvm8ArrayRefIPNS0_21AbstractSparseLatticeEEE called 977134 returned 100% blocks executed 100%
  994648*:  273:void AbstractSparseDataFlowAnalysis::setAllToEntryStates(
        -:  274:    ArrayRef<AbstractSparseLattice *> lattices) {
 2037902*:  275:  for (AbstractSparseLattice *lattice : lattices)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 never executed
branch  3 never executed
branch  4 taken 81% (fallthrough)
branch  5 taken 19%
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
branch 12 never executed
branch 13 never executed
 1043254*:  276:    setToEntryState(lattice);
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 never executed
   977134:  277:}
        -:  278:
function _ZN4mlir8dataflow30AbstractSparseDataFlowAnalysis4joinEPNS0_21AbstractSparseLatticeERKS2_ called 179337 returned 100% blocks executed 100%
   179337:  279:void AbstractSparseDataFlowAnalysis::join(AbstractSparseLattice *lhs,
        -:  280:                                          const AbstractSparseLattice &rhs) {
   179337:  281:  propagateIfChanged(lhs, lhs->join(rhs));
call    0 returned 100%
call    1 returned 100%
   179337:  282:}
