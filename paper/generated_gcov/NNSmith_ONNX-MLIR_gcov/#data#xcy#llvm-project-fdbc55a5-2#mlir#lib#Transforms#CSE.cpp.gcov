        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/CSE.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/CSE.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/CSE.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- CSE.cpp - Common Sub-expression Elimination ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This transformation pass performs a simple common sub-expression elimination
        -:   10:// algorithm on operations within a region.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/IR/Dominance.h"
        -:   17:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:#include "llvm/ADT/DenseMapInfo.h"
        -:   20:#include "llvm/ADT/Hashing.h"
        -:   21:#include "llvm/ADT/ScopedHashTable.h"
        -:   22:#include "llvm/Support/Allocator.h"
        -:   23:#include "llvm/Support/RecyclingAllocator.h"
        -:   24:#include <deque>
        -:   25:
        -:   26:namespace mlir {
        -:   27:#define GEN_PASS_DEF_CSE
        -:   28:#include "mlir/Transforms/Passes.h.inc"
        -:   29:} // namespace mlir
        -:   30:
        -:   31:using namespace mlir;
        -:   32:
        -:   33:namespace {
        -:   34:struct SimpleOperationInfo : public llvm::DenseMapInfo<Operation *> {
function _ZN12_GLOBAL__N_119SimpleOperationInfo12getHashValueEPKN4mlir9OperationE called 2037968 returned 100% blocks executed 100%
  2037968:   35:  static unsigned getHashValue(const Operation *opC) {
  2037968:   36:    return OperationEquivalence::computeHash(
call    0 returned 100%
        -:   37:        const_cast<Operation *>(opC),
        -:   38:        /*hashOperands=*/OperationEquivalence::directHashValue,
        -:   39:        /*hashResults=*/OperationEquivalence::ignoreHashValue,
  2037968:   40:        OperationEquivalence::IgnoreLocations);
call    0 returned 100%
        -:   41:  }
function _ZN12_GLOBAL__N_119SimpleOperationInfo7isEqualEPKN4mlir9OperationES4_ called 15287533 returned 100% blocks executed 100%
 15287533:   42:  static bool isEqual(const Operation *lhsC, const Operation *rhsC) {
 15287533:   43:    auto *lhs = const_cast<Operation *>(lhsC);
 15287533:   44:    auto *rhs = const_cast<Operation *>(rhsC);
 15287533:   45:    if (lhs == rhs)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:   46:      return true;
 11873039:   47:    if (lhs == getTombstoneKey() || lhs == getEmptyKey() ||
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 62% (fallthrough)
branch  5 taken 38%
 18863348:   48:        rhs == getTombstoneKey() || rhs == getEmptyKey())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 26% (fallthrough)
branch  3 taken 74%
        -:   49:      return false;
  1814499:   50:    return OperationEquivalence::isEquivalentTo(
call    0 returned 100%
        -:   51:        const_cast<Operation *>(lhsC), const_cast<Operation *>(rhsC),
        -:   52:        /*mapOperands=*/OperationEquivalence::exactValueMatch,
        -:   53:        /*mapResults=*/OperationEquivalence::ignoreValueEquivalence,
        -:   54:        OperationEquivalence::IgnoreLocations);
        -:   55:  }
        -:   56:};
        -:   57:} // namespace
        -:   58:
        -:   59:namespace {
        -:   60:/// Simple common sub-expression elimination.
        -:   61:struct CSE : public impl::CSEBase<CSE> {
        -:   62:  /// Shared implementation of operation elimination and scoped map definitions.
        -:   63:  using AllocatorTy = llvm::RecyclingAllocator<
        -:   64:      llvm::BumpPtrAllocator,
        -:   65:      llvm::ScopedHashTableVal<Operation *, Operation *>>;
        -:   66:  using ScopedMapTy = llvm::ScopedHashTable<Operation *, Operation *,
        -:   67:                                            SimpleOperationInfo, AllocatorTy>;
        -:   68:
        -:   69:  /// Cache holding MemoryEffects information between two operations. The first
        -:   70:  /// operation is stored has the key. The second operation is stored inside a
        -:   71:  /// pair in the value. The pair also hold the MemoryEffects between those
        -:   72:  /// two operations. If the MemoryEffects is nullptr then we assume there is
        -:   73:  /// no operation with MemoryEffects::Write between the two operations.
        -:   74:  using MemEffectsCache =
        -:   75:      DenseMap<Operation *, std::pair<Operation *, MemoryEffects::Effect *>>;
        -:   76:
        -:   77:  /// Represents a single entry in the depth first traversal of a CFG.
        -:   78:  struct CFGStackNode {
    86844:   79:    CFGStackNode(ScopedMapTy &knownValues, DominanceInfoNode *node)
    86844:   80:        : scope(knownValues), node(node), childIterator(node->begin()) {}
call    0 returned 100%
call    1 returned 100%
        -:   81:
        -:   82:    /// Scope for the known values.
        -:   83:    ScopedMapTy::ScopeTy scope;
        -:   84:
        -:   85:    DominanceInfoNode *node;
        -:   86:    DominanceInfoNode::const_iterator childIterator;
        -:   87:
        -:   88:    /// If this node has been fully processed yet or not.
        -:   89:    bool processed = false;
        -:   90:  };
        -:   91:
        -:   92:  /// Attempt to eliminate a redundant operation. Returns success if the
        -:   93:  /// operation was marked for removal, failure otherwise.
        -:   94:  LogicalResult simplifyOperation(ScopedMapTy &knownValues, Operation *op,
        -:   95:                                  bool hasSSADominance);
        -:   96:  void simplifyBlock(ScopedMapTy &knownValues, Block *bb, bool hasSSADominance);
        -:   97:  void simplifyRegion(ScopedMapTy &knownValues, Region &region);
        -:   98:
        -:   99:  void runOnOperation() override;
        -:  100:
        -:  101:private:
        -:  102:  void replaceUsesAndDelete(ScopedMapTy &knownValues, Operation *op,
        -:  103:                            Operation *existing, bool hasSSADominance);
        -:  104:
        -:  105:  /// Check if there is side-effecting operations other than the given effect
        -:  106:  /// between the two operations.
        -:  107:  bool hasOtherSideEffectingOpInBetween(Operation *fromOp, Operation *toOp);
        -:  108:
        -:  109:  /// Operations marked as dead and to be erased.
        -:  110:  std::vector<Operation *> opsToErase;
        -:  111:  DominanceInfo *domInfo = nullptr;
        -:  112:  MemEffectsCache memEffectsCache;
        -:  113:};
        -:  114:} // namespace
        -:  115:
function _ZN12_GLOBAL__N_13CSE20replaceUsesAndDeleteERN4llvm15ScopedHashTableIPN4mlir9OperationES5_NS_19SimpleOperationInfoENS1_18RecyclingAllocatorINS1_20BumpPtrAllocatorImplINS1_15MallocAllocatorELm4096ELm4096ELm128EEENS1_18ScopedHashTableValIS5_S5_EELm32ELm8EEEEES5_S5_b called 107260 returned 100% blocks executed 42%
   107260:  116:void CSE::replaceUsesAndDelete(ScopedMapTy &knownValues, Operation *op,
        -:  117:                               Operation *existing, bool hasSSADominance) {
        -:  118:  // If we find one then replace all uses of the current operation with the
        -:  119:  // existing one and mark it for deletion. We can only replace an operand in
        -:  120:  // an operation if it has not been visited yet.
   107260:  121:  if (hasSSADominance) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  122:    // If the region has SSA dominance, then we are guaranteed to have not
        -:  123:    // visited any use of the current operation.
   107260:  124:    op->replaceAllUsesWith(existing);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   107260:  125:    opsToErase.push_back(op);
call    0 returned 100%
        -:  126:  } else {
        -:  127:    // When the region does not have SSA dominance, we need to check if we
        -:  128:    // have visited a use before replacing any use.
    #####:  129:    for (auto it : llvm::zip(op->getResults(), existing->getResults())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  130:      std::get<0>(it).replaceUsesWithIf(
call    0 never executed
    #####:  131:          std::get<1>(it), [&](OpOperand &operand) {
call    0 never executed
    #####:  132:            return !knownValues.count(operand.getOwner());
call    0 never executed
        -:  133:          });
        -:  134:    }
        -:  135:
        -:  136:    // There may be some remaining uses of the operation.
    #####:  137:    if (op->use_empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  138:      opsToErase.push_back(op);
call    0 never executed
        -:  139:  }
        -:  140:
        -:  141:  // If the existing operation has an unknown location and the current
        -:  142:  // operation doesn't, then set the existing op's location to that of the
        -:  143:  // current op.
   107260:  144:  if (existing->getLoc().isa<UnknownLoc>() && !op->getLoc().isa<UnknownLoc>())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  145:    existing->setLoc(op->getLoc());
        -:  146:
   107260:  147:  ++numCSE;
call    0 returned 100%
   107260:  148:}
        -:  149:
function _ZN12_GLOBAL__N_13CSE32hasOtherSideEffectingOpInBetweenEPN4mlir9OperationES3_ called 528 returned 100% blocks executed 92%
      528:  150:bool CSE::hasOtherSideEffectingOpInBetween(Operation *fromOp, Operation *toOp) {
     528*:  151:  assert(fromOp->getBlock() == toOp->getBlock());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     528*:  152:  assert(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        -:  153:      isa<MemoryEffectOpInterface>(fromOp) &&
        -:  154:      cast<MemoryEffectOpInterface>(fromOp).hasEffect<MemoryEffects::Read>() &&
        -:  155:      isa<MemoryEffectOpInterface>(toOp) &&
        -:  156:      cast<MemoryEffectOpInterface>(toOp).hasEffect<MemoryEffects::Read>());
      528:  157:  Operation *nextOp = fromOp->getNextNode();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      528:  158:  auto result =
      528:  159:      memEffectsCache.try_emplace(fromOp, std::make_pair(fromOp, nullptr));
call    0 returned 100%
      528:  160:  if (result.second) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      528:  161:    auto memEffectsCachePair = result.first->second;
call    0 returned 100%
      528:  162:    if (memEffectsCachePair.second == nullptr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  163:      // No MemoryEffects::Write has been detected until the cached operation.
        -:  164:      // Continue looking from the cached operation to toOp.
        -:  165:      nextOp = memEffectsCachePair.first;
        -:  166:    } else {
        -:  167:      // MemoryEffects::Write has been detected before so there is no need to
        -:  168:      // check further.
      528:  169:      return true;
        -:  170:    }
        -:  171:  }
    3995*:  172:  while (nextOp && nextOp != toOp) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 87% (fallthrough)
branch  3 taken 13%
     3475:  173:    auto nextOpMemEffects = dyn_cast<MemoryEffectOpInterface>(nextOp);
call    0 returned 100%
        -:  174:    // TODO: Do we need to handle other effects generically?
        -:  175:    // If the operation does not implement the MemoryEffectOpInterface we
        -:  176:    // conservatively assumes it writes.
     6950:  177:    if ((nextOpMemEffects &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
     3475:  178:         nextOpMemEffects.hasEffect<MemoryEffects::Write>()) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     3467:  179:        !nextOpMemEffects) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  180:      result.first->second =
call    0 returned 100%
call    1 returned 100%
        8:  181:          std::make_pair(nextOp, MemoryEffects::Write::get());
call    0 returned 100%
        8:  182:      return true;
        -:  183:    }
    6934*:  184:    nextOp = nextOp->getNextNode();
branch  0 taken 0%
branch  1 taken 100%
        -:  185:  }
      520:  186:  result.first->second = std::make_pair(toOp, nullptr);
call    0 returned 100%
      520:  187:  return false;
        -:  188:}
        -:  189:
        -:  190:/// Attempt to eliminate a redundant operation.
function _ZN12_GLOBAL__N_13CSE17simplifyOperationERN4llvm15ScopedHashTableIPN4mlir9OperationES5_NS_19SimpleOperationInfoENS1_18RecyclingAllocatorINS1_20BumpPtrAllocatorImplINS1_15MallocAllocatorELm4096ELm4096ELm128EEENS1_18ScopedHashTableValIS5_S5_EELm32ELm8EEEEES5_b called 698823 returned 100% blocks executed 100%
   698823:  191:LogicalResult CSE::simplifyOperation(ScopedMapTy &knownValues, Operation *op,
        -:  192:                                     bool hasSSADominance) {
        -:  193:  // Don't simplify terminator operations.
   698823:  194:  if (op->hasTrait<OpTrait::IsTerminator>())
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
    89948:  195:    return failure();
        -:  196:
        -:  197:  // If the operation is already trivially dead just add it to the erase list.
   608875:  198:  if (isOpTriviallyDead(op)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     3600:  199:    opsToErase.push_back(op);
call    0 returned 100%
     3600:  200:    ++numDCE;
call    0 returned 100%
     3600:  201:    return success();
        -:  202:  }
        -:  203:
        -:  204:  // Don't simplify operations with nested blocks. We don't currently model
        -:  205:  // equality comparisons correctly among other things. It is also unclear
        -:  206:  // whether we would want to CSE such operations.
   605275:  207:  if (op->getNumRegions() != 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    26903:  208:    return failure();
        -:  209:
        -:  210:  // Some simple use case of operation with memory side-effect are dealt with
        -:  211:  // here. Operations with no side-effect are done after.
   578372:  212:  if (!MemoryEffectOpInterface::hasNoEffect(op)) {
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
    95534:  213:    auto memEffects = dyn_cast<MemoryEffectOpInterface>(op);
call    0 returned 100%
        -:  214:    // TODO: Only basic use case for operations with MemoryEffects::Read can be
        -:  215:    // eleminated now. More work needs to be done for more complicated patterns
        -:  216:    // and other side-effects.
    95534:  217:    if (!memEffects || !memEffects.onlyHasEffect<MemoryEffects::Read>())
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
call    2 returned 100%
branch  3 taken 53% (fallthrough)
branch  4 taken 47%
    65508:  218:      return failure();
        -:  219:
        -:  220:    // Look for an existing definition for the operation.
    30026:  221:    if (auto *existing = knownValues.lookup(op)) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
     1075:  222:      if (existing->getBlock() == op->getBlock() &&
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
      528:  223:          !hasOtherSideEffectingOpInBetween(existing, op)) {
call    0 returned 100%
        -:  224:        // The operation that can be deleted has been reach with no
        -:  225:        // side-effecting operations in between the existing operation and
        -:  226:        // this one so we can remove the duplicate.
      520:  227:        replaceUsesAndDelete(knownValues, op, existing, hasSSADominance);
call    0 returned 100%
      520:  228:        return success();
        -:  229:      }
        -:  230:    }
    29506:  231:    knownValues.insert(op, op);
call    0 returned 100%
    95534:  232:    return failure();
        -:  233:  }
        -:  234:
        -:  235:  // Look for an existing definition for the operation.
   482838:  236:  if (auto *existing = knownValues.lookup(op)) {
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
   106740:  237:    replaceUsesAndDelete(knownValues, op, existing, hasSSADominance);
call    0 returned 100%
   106740:  238:    ++numCSE;
call    0 returned 100%
   106740:  239:    return success();
        -:  240:  }
        -:  241:
        -:  242:  // Otherwise, we add this operation to the known values map.
   376098:  243:  knownValues.insert(op, op);
call    0 returned 100%
   376098:  244:  return failure();
        -:  245:}
        -:  246:
function _ZN12_GLOBAL__N_13CSE13simplifyBlockERN4llvm15ScopedHashTableIPN4mlir9OperationES5_NS_19SimpleOperationInfoENS1_18RecyclingAllocatorINS1_20BumpPtrAllocatorImplINS1_15MallocAllocatorELm4096ELm4096ELm128EEENS1_18ScopedHashTableValIS5_S5_EELm32ELm8EEEEEPNS3_5BlockEb called 90988 returned 100% blocks executed 79%
    90988:  247:void CSE::simplifyBlock(ScopedMapTy &knownValues, Block *bb,
        -:  248:                        bool hasSSADominance) {
   789811:  249:  for (auto &op : *bb) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
call    2 returned 100%
        -:  250:    // If the operation is simplified, we don't process any held regions.
   698823:  251:    if (succeeded(simplifyOperation(knownValues, &op, hasSSADominance)))
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
   110860:  252:      continue;
        -:  253:
        -:  254:    // Most operations don't have regions, so fast path that case.
   587963:  255:    if (op.getNumRegions() == 0)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
   561060:  256:      continue;
        -:  257:
        -:  258:    // If this operation is isolated above, we can't process nested regions with
        -:  259:    // the given 'knownValues' map. This would cause the insertion of implicit
        -:  260:    // captures in explicit capture only regions.
    26903:  261:    if (op.mightHaveTrait<OpTrait::IsIsolatedFromAbove>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    26903:  262:      ScopedMapTy nestedKnownValues;
call    0 returned 100%
    80709:  263:      for (auto &region : op.getRegions())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
    26903:  264:        simplifyRegion(nestedKnownValues, region);
call    0 returned 100%
    26903:  265:      continue;
call    0 returned 100%
        -:  266:    }
        -:  267:
        -:  268:    // Otherwise, process nested regions normally.
    #####:  269:    for (auto &region : op.getRegions())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  270:      simplifyRegion(knownValues, region);
call    0 never executed
        -:  271:  }
        -:  272:  // Clear the MemoryEffects cache since its usage is by block only.
    90988:  273:  memEffectsCache.clear();
call    0 returned 100%
    90988:  274:}
        -:  275:
function _ZN12_GLOBAL__N_13CSE14simplifyRegionERN4llvm15ScopedHashTableIPN4mlir9OperationES5_NS_19SimpleOperationInfoENS1_18RecyclingAllocatorINS1_20BumpPtrAllocatorImplINS1_15MallocAllocatorELm4096ELm4096ELm128EEENS1_18ScopedHashTableValIS5_S5_EELm32ELm8EEEEERNS3_6RegionE called 27935 returned 100% blocks executed 91%
    27935:  276:void CSE::simplifyRegion(ScopedMapTy &knownValues, Region &region) {
        -:  277:  // If the region is empty there is nothing to do.
    27935:  278:  if (region.empty())
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
    23807:  279:    return;
        -:  280:
     8272:  281:  bool hasSSADominance = domInfo->hasSSADominance(&region);
call    0 returned 100%
        -:  282:
        -:  283:  // If the region only contains one block, then simplify it directly.
     8272:  284:  if (region.hasOneBlock()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4144:  285:    ScopedMapTy::ScopeTy scope(knownValues);
call    0 returned 100%
     4144:  286:    simplifyBlock(knownValues, &region.front(), hasSSADominance);
call    0 returned 100%
call    1 returned 100%
     4144:  287:    return;
call    0 returned 100%
        -:  288:  }
        -:  289:
        -:  290:  // If the region does not have dominanceInfo, then skip it.
        -:  291:  // TODO: Regions without SSA dominance should define a different
        -:  292:  // traversal order which is appropriate and can be used here.
     4128:  293:  if (!hasSSADominance)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  294:    return;
        -:  295:
        -:  296:  // Note, deque is being used here because there was significant performance
        -:  297:  // gains over vector when the container becomes very large due to the
        -:  298:  // specific access patterns. If/when these performance issues are no
        -:  299:  // longer a problem we can change this to vector. For more information see
        -:  300:  // the llvm mailing list discussion on this:
        -:  301:  // http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20120116/135228.html
     8256:  302:  std::deque<std::unique_ptr<CFGStackNode>> stack;
call    0 returned 100%
call    1 returned 100%
        -:  303:
        -:  304:  // Process the nodes of the dom tree for this region.
     8256:  305:  stack.emplace_back(std::make_unique<CFGStackNode>(
call    0 returned 100%
     8256:  306:      knownValues, domInfo->getRootNode(&region)));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  307:
   173688:  308:  while (!stack.empty()) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   169560:  309:    auto &currentNode = stack.back();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  310:
        -:  311:    // Check to see if we need to process this node.
   169560:  312:    if (!currentNode->processed) {
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
    86844:  313:      currentNode->processed = true;
call    0 returned 100%
    86844:  314:      simplifyBlock(knownValues, currentNode->node->getBlock(),
call    0 returned 100%
        -:  315:                    hasSSADominance);
        -:  316:    }
        -:  317:
        -:  318:    // Otherwise, check to see if we need to process a child node.
   169560:  319:    if (currentNode->childIterator != currentNode->node->end()) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
    82716:  320:      auto *childNode = *(currentNode->childIterator++);
call    0 returned 100%
    82716:  321:      stack.emplace_back(
    82716:  322:          std::make_unique<CFGStackNode>(knownValues, childNode));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  323:    } else {
        -:  324:      // Finally, if the node and all of its children have been processed
        -:  325:      // then we delete the node.
    86844:  326:      stack.pop_back();
call    0 returned 100%
        -:  327:    }
        -:  328:  }
        -:  329:}
        -:  330:
function _ZN12_GLOBAL__N_13CSE14runOnOperationEv called 1032 returned 100% blocks executed 96%
     1032:  331:void CSE::runOnOperation() {
        -:  332:  /// A scoped hash table of defining operations within a region.
     1032:  333:  ScopedMapTy knownValues;
call    0 returned 100%
        -:  334:
     1032:  335:  domInfo = &getAnalysis<DominanceInfo>();
call    0 returned 100%
     1032:  336:  Operation *rootOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  337:
     3096:  338:  for (auto &region : rootOp->getRegions())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
     1032:  339:    simplifyRegion(knownValues, region);
call    0 returned 100%
        -:  340:
        -:  341:  // If no operations were erased, then we mark all analyses as preserved.
     1032:  342:  if (opsToErase.empty())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       10:  343:    return markAllAnalysesPreserved();
call    0 returned 100%
call    1 returned 100%
        -:  344:
        -:  345:  /// Erase any operations that were marked as dead during simplification.
   111882:  346:  for (auto *op : opsToErase)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
   110860:  347:    op->erase();
call    0 returned 100%
     1022:  348:  opsToErase.clear();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  349:
        -:  350:  // We currently don't remove region operations, so mark dominance as
        -:  351:  // preserved.
     1022:  352:  markAnalysesPreserved<DominanceInfo, PostDominanceInfo>();
call    0 returned 100%
     1022:  353:  domInfo = nullptr;
call    0 returned 100%
        -:  354:}
        -:  355:
function _ZN4mlir13createCSEPassEv called 129771 returned 100% blocks executed 100%
   129771:  356:std::unique_ptr<Pass> mlir::createCSEPass() { return std::make_unique<CSE>(); }
call    0 returned 100%
