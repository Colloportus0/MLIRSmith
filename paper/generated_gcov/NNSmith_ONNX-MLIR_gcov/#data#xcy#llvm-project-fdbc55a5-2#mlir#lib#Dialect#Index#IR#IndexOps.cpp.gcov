        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Index/IR/IndexOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Index/IR/CMakeFiles/obj.MLIRIndexDialect.dir/IndexOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Index/IR/CMakeFiles/obj.MLIRIndexDialect.dir/IndexOps.cpp.gcda
        -:    0:Runs:128626
        -:    1://===- IndexOps.cpp - Index operation definitions --------------------------==//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Index/IR/IndexOps.h"
        -:   10:#include "mlir/Dialect/Index/IR/IndexAttrs.h"
        -:   11:#include "mlir/Dialect/Index/IR/IndexDialect.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/IR/OpImplementation.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::index;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// IndexDialect
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
function _ZN4mlir5index12IndexDialect18registerOperationsEv called 0 returned 0% blocks executed 0%
    #####:   22:void IndexDialect::registerOperations() {
    #####:   23:  addOperations<
        -:   24:#define GET_OP_LIST
        -:   25:#include "mlir/Dialect/Index/IR/IndexOps.cpp.inc"
    #####:   26:      >();
call    0 never executed
    #####:   27:}
        -:   28:
function _ZN4mlir5index12IndexDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   29:Operation *IndexDialect::materializeConstant(OpBuilder &b, Attribute value,
        -:   30:                                             Type type, Location loc) {
        -:   31:  // Materialize bool constants as `i1`.
    #####:   32:  if (auto boolValue = dyn_cast<BoolAttr>(value)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   33:    if (!type.isSignlessInteger(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   34:      return nullptr;
    #####:   35:    return b.create<BoolConstantOp>(loc, type, boolValue);
call    0 never executed
        -:   36:  }
        -:   37:
        -:   38:  // Materialize integer attributes as `index`.
    #####:   39:  if (auto indexValue = dyn_cast<IntegerAttr>(value)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    if (!indexValue.getType().isa<IndexType>() || !type.isa<IndexType>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   41:      return nullptr;
    #####:   42:    assert(indexValue.getValue().getBitWidth() ==
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   43:           IndexType::kInternalStorageBitWidth);
    #####:   44:    return b.create<ConstantOp>(loc, indexValue);
call    0 never executed
        -:   45:  }
        -:   46:
    #####:   47:  return nullptr;
        -:   48:}
        -:   49:
        -:   50://===----------------------------------------------------------------------===//
        -:   51:// Fold Utilities
        -:   52://===----------------------------------------------------------------------===//
        -:   53:
        -:   54:/// Fold an index operation irrespective of the target bitwidth. The
        -:   55:/// operation must satisfy the property:
        -:   56:///
        -:   57:/// ```
        -:   58:/// trunc(f(a, b)) = f(trunc(a), trunc(b))
        -:   59:/// ```
        -:   60:///
        -:   61:/// For all values of `a` and `b`. The function accepts a lambda that computes
        -:   62:/// the integer result, which in turn must satisfy the above property.
function _ZL21foldBinaryOpUncheckedN4llvm8ArrayRefIN4mlir9AttributeEEENS_12function_refIFNS_5APIntERKS5_S7_EEE called 0 returned 0% blocks executed 0%
    #####:   63:static OpFoldResult foldBinaryOpUnchecked(
        -:   64:    ArrayRef<Attribute> operands,
        -:   65:    function_ref<APInt(const APInt &, const APInt &)> calculate) {
    #####:   66:  assert(operands.size() == 2 && "binary operation expected 2 operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   67:  auto lhs = dyn_cast_if_present<IntegerAttr>(operands[0]);
branch  0 never executed
branch  1 never executed
    #####:   68:  auto rhs = dyn_cast_if_present<IntegerAttr>(operands[1]);
branch  0 never executed
branch  1 never executed
    #####:   69:  if (!lhs || !rhs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   70:    return {};
        -:   71:
    #####:   72:  APInt result = calculate(lhs.getValue(), rhs.getValue());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   73:  assert(result.trunc(32) ==
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:   74:         calculate(lhs.getValue().trunc(32), rhs.getValue().trunc(32)));
    #####:   75:  return IntegerAttr::get(IndexType::get(lhs.getContext()), std::move(result));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   76:}
        -:   77:
        -:   78:/// Fold an index operation only if the truncated 64-bit result matches the
        -:   79:/// 32-bit result for operations that don't satisfy the above property. These
        -:   80:/// are operations where the upper bits of the operands can affect the lower
        -:   81:/// bits of the results.
        -:   82:///
        -:   83:/// The function accepts a lambda that computes the integer result in both
        -:   84:/// 64-bit and 32-bit. If either call returns `None`, the operation is not
        -:   85:/// folded.
function _ZL19foldBinaryOpCheckedN4llvm8ArrayRefIN4mlir9AttributeEEENS_12function_refIFNS_8OptionalINS_5APIntEEERKS6_S9_EEE called 0 returned 0% blocks executed 0%
    #####:   86:static OpFoldResult foldBinaryOpChecked(
        -:   87:    ArrayRef<Attribute> operands,
        -:   88:    function_ref<Optional<APInt>(const APInt &, const APInt &lhs)> calculate) {
    #####:   89:  assert(operands.size() == 2 && "binary operation expected 2 operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   90:  auto lhs = dyn_cast_if_present<IntegerAttr>(operands[0]);
branch  0 never executed
branch  1 never executed
    #####:   91:  auto rhs = dyn_cast_if_present<IntegerAttr>(operands[1]);
branch  0 never executed
branch  1 never executed
        -:   92:  // Only fold index operands.
    #####:   93:  if (!lhs || !rhs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   94:    return {};
        -:   95:
        -:   96:  // Compute the 64-bit result and the 32-bit result.
    #####:   97:  Optional<APInt> result64 = calculate(lhs.getValue(), rhs.getValue());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   98:  if (!result64)
branch  0 never executed
branch  1 never executed
    #####:   99:    return {};
    #####:  100:  Optional<APInt> result32 =
    #####:  101:      calculate(lhs.getValue().trunc(32), rhs.getValue().trunc(32));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
    #####:  102:  if (!result32)
branch  0 never executed
branch  1 never executed
    #####:  103:    return {};
        -:  104:  // Compare the truncated 64-bit result to the 32-bit result.
    #####:  105:  if (result64->trunc(32) != *result32)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  106:    return {};
        -:  107:  // The operation can be folded for these particular operands.
    #####:  108:  return IntegerAttr::get(IndexType::get(lhs.getContext()),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  109:                          std::move(*result64));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  110:}
        -:  111:
        -:  112://===----------------------------------------------------------------------===//
        -:  113:// AddOp
        -:  114://===----------------------------------------------------------------------===//
        -:  115:
function _ZN4mlir5index5AddOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  116:OpFoldResult AddOp::fold(ArrayRef<Attribute> operands) {
    #####:  117:  return foldBinaryOpUnchecked(
function _ZZN4mlir5index5AddOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  118:      operands, [](const APInt &lhs, const APInt &rhs) { return lhs + rhs; });
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  119:}
        -:  120:
        -:  121://===----------------------------------------------------------------------===//
        -:  122:// SubOp
        -:  123://===----------------------------------------------------------------------===//
        -:  124:
function _ZN4mlir5index5SubOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  125:OpFoldResult SubOp::fold(ArrayRef<Attribute> operands) {
    #####:  126:  return foldBinaryOpUnchecked(
function _ZZN4mlir5index5SubOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  127:      operands, [](const APInt &lhs, const APInt &rhs) { return lhs - rhs; });
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  128:}
        -:  129:
        -:  130://===----------------------------------------------------------------------===//
        -:  131:// MulOp
        -:  132://===----------------------------------------------------------------------===//
        -:  133:
function _ZN4mlir5index5MulOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  134:OpFoldResult MulOp::fold(ArrayRef<Attribute> operands) {
    #####:  135:  return foldBinaryOpUnchecked(
    #####:  136:      operands, [](const APInt &lhs, const APInt &rhs) { return lhs * rhs; });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  137:}
        -:  138:
        -:  139://===----------------------------------------------------------------------===//
        -:  140:// DivSOp
        -:  141://===----------------------------------------------------------------------===//
        -:  142:
function _ZN4mlir5index6DivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  143:OpFoldResult DivSOp::fold(ArrayRef<Attribute> operands) {
    #####:  144:  return foldBinaryOpChecked(
function _ZZN4mlir5index6DivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  145:      operands, [](const APInt &lhs, const APInt &rhs) -> Optional<APInt> {
        -:  146:        // Don't fold division by zero.
    #####:  147:        if (rhs.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  148:          return None;
    #####:  149:        return lhs.sdiv(rhs);
call    0 never executed
    #####:  150:      });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  151:}
        -:  152:
        -:  153://===----------------------------------------------------------------------===//
        -:  154:// DivUOp
        -:  155://===----------------------------------------------------------------------===//
        -:  156:
function _ZN4mlir5index6DivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  157:OpFoldResult DivUOp::fold(ArrayRef<Attribute> operands) {
    #####:  158:  return foldBinaryOpChecked(
function _ZZN4mlir5index6DivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  159:      operands, [](const APInt &lhs, const APInt &rhs) -> Optional<APInt> {
        -:  160:        // Don't fold division by zero.
    #####:  161:        if (rhs.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  162:          return None;
    #####:  163:        return lhs.udiv(rhs);
call    0 never executed
    #####:  164:      });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  165:}
        -:  166:
        -:  167://===----------------------------------------------------------------------===//
        -:  168:// CeilDivSOp
        -:  169://===----------------------------------------------------------------------===//
        -:  170:
        -:  171:/// Compute `ceildivs(n, m)` as `x = m > 0 ? -1 : 1` and then
        -:  172:/// `n*m > 0 ? (n+x)/m + 1 : -(-n/m)`.
function _ZL17calculateCeilDivSRKN4llvm5APIntES2_ called 0 returned 0% blocks executed 0%
    #####:  173:static Optional<APInt> calculateCeilDivS(const APInt &n, const APInt &m) {
        -:  174:  // Don't fold division by zero.
    #####:  175:  if (m.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  176:    return None;
        -:  177:  // Short-circuit the zero case.
    #####:  178:  if (n.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  179:    return n;
branch  0 never executed
branch  1 never executed
        -:  180:
    #####:  181:  bool mGtZ = m.sgt(0);
call    0 never executed
    #####:  182:  if (n.sgt(0) != mGtZ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  183:    // If the operands have different signs, compute the negative result. Signed
        -:  184:    // division overflow is not possible, since if `m == -1`, `n` can be at most
        -:  185:    // `INT_MAX`, and `-INT_MAX != INT_MIN` in two's complement.
    #####:  186:    return -(-n).sdiv(m);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  187:  }
        -:  188:  // Otherwise, compute the positive result. Signed division overflow is not
        -:  189:  // possible since if `m == -1`, `x` will be `1`.
    #####:  190:  int64_t x = mGtZ ? -1 : 1;
branch  0 never executed
branch  1 never executed
    #####:  191:  return (n + x).sdiv(m) + 1;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  192:}
        -:  193:
function _ZN4mlir5index10CeilDivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  194:OpFoldResult CeilDivSOp::fold(ArrayRef<Attribute> operands) {
    #####:  195:  return foldBinaryOpChecked(operands, calculateCeilDivS);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  196:}
        -:  197:
        -:  198://===----------------------------------------------------------------------===//
        -:  199:// CeilDivUOp
        -:  200://===----------------------------------------------------------------------===//
        -:  201:
function _ZN4mlir5index10CeilDivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  202:OpFoldResult CeilDivUOp::fold(ArrayRef<Attribute> operands) {
        -:  203:  // Compute `ceildivu(n, m)` as `n == 0 ? 0 : (n-1)/m + 1`.
    #####:  204:  return foldBinaryOpChecked(
function _ZZN4mlir5index10CeilDivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  205:      operands, [](const APInt &n, const APInt &m) -> Optional<APInt> {
        -:  206:        // Don't fold division by zero.
    #####:  207:        if (m.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  208:          return None;
        -:  209:        // Short-circuit the zero case.
    #####:  210:        if (n.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  211:          return n;
branch  0 never executed
branch  1 never executed
        -:  212:
    #####:  213:        return (n - 1).udiv(m) + 1;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  214:      });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  215:}
        -:  216:
        -:  217://===----------------------------------------------------------------------===//
        -:  218:// FloorDivSOp
        -:  219://===----------------------------------------------------------------------===//
        -:  220:
        -:  221:/// Compute `floordivs(n, m)` as `x = m < 0 ? 1 : -1` and then
        -:  222:/// `n*m < 0 ? -1 - (x-n)/m : n/m`.
function _ZL18calculateFloorDivSRKN4llvm5APIntES2_ called 0 returned 0% blocks executed 0%
    #####:  223:static Optional<APInt> calculateFloorDivS(const APInt &n, const APInt &m) {
        -:  224:  // Don't fold division by zero.
    #####:  225:  if (m.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:    return None;
        -:  227:  // Short-circuit the zero case.
    #####:  228:  if (n.isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  229:    return n;
branch  0 never executed
branch  1 never executed
        -:  230:
    #####:  231:  bool mLtZ = m.slt(0);
call    0 never executed
    #####:  232:  if (n.slt(0) == mLtZ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  233:    // If the operands have the same sign, compute the positive result.
    #####:  234:    return n.sdiv(m);
call    0 never executed
        -:  235:  }
        -:  236:  // If the operands have different signs, compute the negative result. Signed
        -:  237:  // division overflow is not possible since if `m == -1`, `x` will be 1 and
        -:  238:  // `n` can be at most `INT_MAX`.
    #####:  239:  int64_t x = mLtZ ? 1 : -1;
branch  0 never executed
branch  1 never executed
    #####:  240:  return -1 - (x - n).sdiv(m);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  241:}
        -:  242:
function _ZN4mlir5index11FloorDivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  243:OpFoldResult FloorDivSOp::fold(ArrayRef<Attribute> operands) {
    #####:  244:  return foldBinaryOpChecked(operands, calculateFloorDivS);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  245:}
        -:  246:
        -:  247://===----------------------------------------------------------------------===//
        -:  248:// RemSOp
        -:  249://===----------------------------------------------------------------------===//
        -:  250:
function _ZN4mlir5index6RemSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  251:OpFoldResult RemSOp::fold(ArrayRef<Attribute> operands) {
    #####:  252:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
    #####:  253:    return lhs.srem(rhs);
call    0 never executed
    #####:  254:  });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  255:}
        -:  256:
        -:  257://===----------------------------------------------------------------------===//
        -:  258:// RemUOp
        -:  259://===----------------------------------------------------------------------===//
        -:  260:
function _ZN4mlir5index6RemUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  261:OpFoldResult RemUOp::fold(ArrayRef<Attribute> operands) {
    #####:  262:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
    #####:  263:    return lhs.urem(rhs);
call    0 never executed
    #####:  264:  });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  265:}
        -:  266:
        -:  267://===----------------------------------------------------------------------===//
        -:  268:// MaxSOp
        -:  269://===----------------------------------------------------------------------===//
        -:  270:
function _ZN4mlir5index6MaxSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  271:OpFoldResult MaxSOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir5index6MaxSOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  272:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
    #####:  273:    return lhs.sgt(rhs) ? lhs : rhs;
branch  0 never executed
branch  1 never executed
    #####:  274:  });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  275:}
        -:  276:
        -:  277://===----------------------------------------------------------------------===//
        -:  278:// MaxUOp
        -:  279://===----------------------------------------------------------------------===//
        -:  280:
function _ZN4mlir5index6MaxUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  281:OpFoldResult MaxUOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir5index6MaxUOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  282:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
    #####:  283:    return lhs.ugt(rhs) ? lhs : rhs;
branch  0 never executed
branch  1 never executed
    #####:  284:  });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  285:}
        -:  286:
        -:  287://===----------------------------------------------------------------------===//
        -:  288:// CastSOp
        -:  289://===----------------------------------------------------------------------===//
        -:  290:
function _ZN4mlir5index7CastSOp17areCastCompatibleENS_9TypeRangeES2_ called 0 returned 0% blocks executed 0%
    #####:  291:bool CastSOp::areCastCompatible(TypeRange lhsTypes, TypeRange rhsTypes) {
    #####:  292:  return lhsTypes.front().isa<IndexType>() != rhsTypes.front().isa<IndexType>();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  293:}
        -:  294:
        -:  295://===----------------------------------------------------------------------===//
        -:  296:// CastUOp
        -:  297://===----------------------------------------------------------------------===//
        -:  298:
function _ZN4mlir5index7CastUOp17areCastCompatibleENS_9TypeRangeES2_ called 0 returned 0% blocks executed 0%
    #####:  299:bool CastUOp::areCastCompatible(TypeRange lhsTypes, TypeRange rhsTypes) {
    #####:  300:  return lhsTypes.front().isa<IndexType>() != rhsTypes.front().isa<IndexType>();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  301:}
        -:  302:
        -:  303://===----------------------------------------------------------------------===//
        -:  304:// CmpOp
        -:  305://===----------------------------------------------------------------------===//
        -:  306:
        -:  307:/// Compare two integers according to the comparison predicate.
function _Z14compareIndicesRKN4llvm5APIntES2_N4mlir5index17IndexCmpPredicateE called 0 returned 0% blocks executed 0%
    #####:  308:bool compareIndices(const APInt &lhs, const APInt &rhs,
        -:  309:                    IndexCmpPredicate pred) {
    #####:  310:  switch (pred) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  311:  case IndexCmpPredicate::EQ:
    #####:  312:    return lhs.eq(rhs);
call    0 never executed
    #####:  313:  case IndexCmpPredicate::NE:
    #####:  314:    return lhs.ne(rhs);
call    0 never executed
    #####:  315:  case IndexCmpPredicate::SGE:
    #####:  316:    return lhs.sge(rhs);
    #####:  317:  case IndexCmpPredicate::SGT:
    #####:  318:    return lhs.sgt(rhs);
    #####:  319:  case IndexCmpPredicate::SLE:
    #####:  320:    return lhs.sle(rhs);
    #####:  321:  case IndexCmpPredicate::SLT:
    #####:  322:    return lhs.slt(rhs);
    #####:  323:  case IndexCmpPredicate::UGE:
    #####:  324:    return lhs.uge(rhs);
    #####:  325:  case IndexCmpPredicate::UGT:
    #####:  326:    return lhs.ugt(rhs);
    #####:  327:  case IndexCmpPredicate::ULE:
    #####:  328:    return lhs.ule(rhs);
    #####:  329:  case IndexCmpPredicate::ULT:
    #####:  330:    return lhs.ult(rhs);
        -:  331:  }
    #####:  332:  llvm_unreachable("unhandled IndexCmpPredicate predicate");
call    0 never executed
        -:  333:}
        -:  334:
function _ZN4mlir5index5CmpOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  335:OpFoldResult CmpOp::fold(ArrayRef<Attribute> operands) {
    #####:  336:  assert(operands.size() == 2 && "compare expected 2 operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  337:  auto lhs = dyn_cast_if_present<IntegerAttr>(operands[0]);
branch  0 never executed
branch  1 never executed
    #####:  338:  auto rhs = dyn_cast_if_present<IntegerAttr>(operands[1]);
branch  0 never executed
branch  1 never executed
    #####:  339:  if (!lhs || !rhs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  340:    return {};
        -:  341:
        -:  342:  // Perform the comparison in 64-bit and 32-bit.
    #####:  343:  bool result64 = compareIndices(lhs.getValue(), rhs.getValue(), getPred());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  344:  bool result32 = compareIndices(lhs.getValue().trunc(32),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  345:                                 rhs.getValue().trunc(32), getPred());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  346:  if (result64 != result32)
branch  0 never executed
branch  1 never executed
    #####:  347:    return {};
    #####:  348:  return BoolAttr::get(getContext(), result64);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  349:}
        -:  350:
        -:  351://===----------------------------------------------------------------------===//
        -:  352:// ConstantOp
        -:  353://===----------------------------------------------------------------------===//
        -:  354:
function _ZN4mlir5index10ConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  355:OpFoldResult ConstantOp::fold(ArrayRef<Attribute> operands) {
    #####:  356:  return getValueAttr();
call    0 never executed
call    1 never executed
        -:  357:}
        -:  358:
function _ZN4mlir5index10ConstantOp5buildERNS_9OpBuilderERNS_14OperationStateEl called 0 returned 0% blocks executed 0%
    #####:  359:void ConstantOp::build(OpBuilder &b, OperationState &state, int64_t value) {
    #####:  360:  build(b, state, b.getIndexType(), b.getIndexAttr(value));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  361:}
        -:  362:
        -:  363://===----------------------------------------------------------------------===//
        -:  364:// BoolConstantOp
        -:  365://===----------------------------------------------------------------------===//
        -:  366:
function _ZN4mlir5index14BoolConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  367:OpFoldResult BoolConstantOp::fold(ArrayRef<Attribute> operands) {
    #####:  368:  return getValueAttr();
call    0 never executed
call    1 never executed
        -:  369:}
        -:  370:
        -:  371://===----------------------------------------------------------------------===//
        -:  372:// ODS-Generated Definitions
        -:  373://===----------------------------------------------------------------------===//
        -:  374:
        -:  375:#define GET_OP_CLASSES
        -:  376:#include "mlir/Dialect/Index/IR/IndexOps.cpp.inc"
