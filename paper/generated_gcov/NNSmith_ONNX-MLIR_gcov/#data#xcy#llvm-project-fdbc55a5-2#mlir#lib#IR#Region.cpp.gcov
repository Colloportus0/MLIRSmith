        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/IR/Region.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Region.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Region.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- Region.cpp - MLIR Region Class -------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Region.h"
        -:   10:#include "mlir/IR/BlockAndValueMapping.h"
        -:   11:#include "mlir/IR/Operation.h"
        -:   12:using namespace mlir;
        -:   13:
function _ZN4mlir6RegionC2EPNS_9OperationE called 2875904 returned 100% blocks executed 100%
  2875904:   14:Region::Region(Operation *container) : container(container) {}
call    0 returned 100%
        -:   15:
function _ZN4mlir6RegionD2Ev called 5760837 returned 100% blocks executed 100%
  5760837:   16:Region::~Region() {
call    0 returned 100%
        -:   17:  // Operations may have cyclic references, which need to be dropped before we
        -:   18:  // can start deleting them.
  5760837:   19:  dropAllReferences();
call    0 returned 100%
  5760837:   20:}
        -:   21:
        -:   22:/// Return the context this region is inserted in. The region must have a valid
        -:   23:/// parent container.
function _ZN4mlir6Region10getContextEv called 148928 returned 100% blocks executed 75%
   148928:   24:MLIRContext *Region::getContext() {
  148928*:   25:  assert(container && "region is not attached to a container");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   148928:   26:  return container->getContext();
call    0 returned 100%
        -:   27:}
        -:   28:
        -:   29:/// Return a location for this region. This is the location attached to the
        -:   30:/// parent container. The region must have a valid parent container.
function _ZN4mlir6Region6getLocEv called 968214 returned 100% blocks executed 67%
   968214:   31:Location Region::getLoc() {
  968214*:   32:  assert(container && "region is not attached to a container");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   968214:   33:  return container->getLoc();
        -:   34:}
        -:   35:
function _ZN4mlir6Region16getArgumentTypesEv called 0 returned 0% blocks executed 0%
    #####:   36:auto Region::getArgumentTypes() -> ValueTypeRange<BlockArgListType> {
    #####:   37:  return ValueTypeRange<BlockArgListType>(getArguments());
call    0 never executed
        -:   38:}
        -:   39:
        -:   40:iterator_range<Region::args_iterator>
function _ZN4mlir6Region12addArgumentsENS_9TypeRangeEN4llvm8ArrayRefINS_8LocationEEE called 0 returned 0% blocks executed 0%
    #####:   41:Region::addArguments(TypeRange types, ArrayRef<Location> locs) {
    #####:   42:  return front().addArguments(types, locs);
call    0 never executed
call    1 never executed
        -:   43:}
        -:   44:
function _ZN4mlir6Region15getParentRegionEv called 31740 returned 100% blocks executed 80%
    31740:   45:Region *Region::getParentRegion() {
   31740*:   46:  assert(container && "region is not attached to a container");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    31740:   47:  return container->getParentRegion();
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   48:}
        -:   49:
function _ZN4mlir6Region16isProperAncestorEPS0_ called 16382 returned 100% blocks executed 100%
    16382:   50:bool Region::isProperAncestor(Region *other) {
    16382:   51:  if (this == other)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   52:    return false;
        -:   53:
    31740:   54:  while ((other = other->getParentRegion())) {
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
    16382:   55:    if (this == other)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   56:      return true;
        -:   57:  }
        -:   58:  return false;
        -:   59:}
        -:   60:
        -:   61:/// Return the number of this region in the parent operation.
function _ZN4mlir6Region15getRegionNumberEv called 27642 returned 100% blocks executed 80%
    27642:   62:unsigned Region::getRegionNumber() {
        -:   63:  // Regions are always stored consecutively, so use pointer subtraction to
        -:   64:  // figure out what number this is.
    55284:   65:  return this - &getParentOp()->getRegions()[0];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:}
        -:   67:
        -:   68:/// Clone the internal blocks from this region into `dest`. Any
        -:   69:/// cloned blocks are appended to the back of dest.
function _ZN4mlir6Region9cloneIntoEPS0_RNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   70:void Region::cloneInto(Region *dest, BlockAndValueMapping &mapper) {
    #####:   71:  assert(dest && "expected valid region to clone into");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   72:  cloneInto(dest, dest->end(), mapper);
call    0 never executed
    #####:   73:}
        -:   74:
        -:   75:/// Clone this region into 'dest' before the given position in 'dest'.
function _ZN4mlir6Region9cloneIntoEPS0_N4llvm14ilist_iteratorINS2_12ilist_detail12node_optionsINS_5BlockELb1ELb0EvEELb0ELb0EEERNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:   76:void Region::cloneInto(Region *dest, Region::iterator destPos,
        -:   77:                       BlockAndValueMapping &mapper) {
    #####:   78:  assert(dest && "expected valid region to clone into");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   79:  assert(this != dest && "cannot clone region into itself");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
        -:   81:  // If the list is empty there is nothing to clone.
    #####:   82:  if (empty())
branch  0 never executed
branch  1 never executed
    #####:   83:    return;
        -:   84:
        -:   85:  // The below clone implementation takes special care to be read only for the
        -:   86:  // sake of multi threading. That essentially means not adding any uses to any
        -:   87:  // of the blocks or operation results contained within this region as that
        -:   88:  // would lead to a write in their use-def list. This is unavoidable for
        -:   89:  // 'Value's from outside the region however, in which case it is not read
        -:   90:  // only. Using the BlockAndValueMapper it is possible to remap such 'Value's
        -:   91:  // to ones owned by the calling thread however, making it read only once
        -:   92:  // again.
        -:   93:
        -:   94:  // First clone all the blocks and block arguments and map them, but don't yet
        -:   95:  // clone the operations, as they may otherwise add a use to a block that has
        -:   96:  // not yet been mapped
    #####:   97:  for (Block &block : *this) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   98:    Block *newBlock = new Block();
call    0 never executed
call    1 never executed
    #####:   99:    mapper.map(&block, newBlock);
call    0 never executed
        -:  100:
        -:  101:    // Clone the block arguments. The user might be deleting arguments to the
        -:  102:    // block by specifying them in the mapper. If so, we don't add the
        -:  103:    // argument to the cloned block.
    #####:  104:    for (auto arg : block.getArguments())
branch  0 never executed
branch  1 never executed
    #####:  105:      if (!mapper.contains(arg))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:        mapper.map(arg, newBlock->addArgument(arg.getType(), arg.getLoc()));
call    0 never executed
call    1 never executed
        -:  107:
    #####:  108:    dest->getBlocks().insert(destPos, newBlock);
call    0 never executed
        -:  109:  }
        -:  110:
    #####:  111:  auto newBlocksRange =
call    0 never executed
    #####:  112:      llvm::make_range(Region::iterator(mapper.lookup(&front())), destPos);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  113:
        -:  114:  // Now follow up with creating the operations, but don't yet clone their
        -:  115:  // regions, nor set their operands. Setting the successors is safe as all have
        -:  116:  // already been mapped. We are essentially just creating the operation results
        -:  117:  // to be able to map them.
        -:  118:  // Cloning the operands and region as well would lead to uses of operations
        -:  119:  // not yet mapped.
    #####:  120:  auto cloneOptions =
    #####:  121:      Operation::CloneOptions::all().cloneRegions(false).cloneOperands(false);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  122:  for (auto zippedBlocks : llvm::zip(*this, newBlocksRange)) {
branch  0 never executed
branch  1 never executed
    #####:  123:    Block &sourceBlock = std::get<0>(zippedBlocks);
    #####:  124:    Block &clonedBlock = std::get<1>(zippedBlocks);
        -:  125:    // Clone and remap the operations within this block.
    #####:  126:    for (Operation &op : sourceBlock)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  127:      clonedBlock.push_back(op.clone(mapper, cloneOptions));
call    0 never executed
call    1 never executed
        -:  128:  }
        -:  129:
        -:  130:  // Finally now that all operation results have been mapped, set the operands
        -:  131:  // and clone the regions.
    #####:  132:  SmallVector<Value> operands;
    #####:  133:  for (auto zippedBlocks : llvm::zip(*this, newBlocksRange)) {
branch  0 never executed
branch  1 never executed
    #####:  134:    for (auto ops :
    #####:  135:         llvm::zip(std::get<0>(zippedBlocks), std::get<1>(zippedBlocks))) {
branch  0 never executed
branch  1 never executed
    #####:  136:      Operation &source = std::get<0>(ops);
branch  0 never executed
branch  1 never executed
    #####:  137:      Operation &clone = std::get<1>(ops);
branch  0 never executed
branch  1 never executed
        -:  138:
    #####:  139:      operands.resize(source.getNumOperands());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  140:      llvm::transform(
call    0 never executed
    #####:  141:          source.getOperands(), operands.begin(),
call    0 never executed
    #####:  142:          [&](Value operand) { return mapper.lookupOrDefault(operand); });
call    0 never executed
    #####:  143:      clone.setOperands(operands);
call    0 never executed
call    1 never executed
        -:  144:
    #####:  145:      for (auto regions : llvm::zip(source.getRegions(), clone.getRegions()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  146:        std::get<0>(regions).cloneInto(&std::get<1>(regions), mapper);
call    0 never executed
        -:  147:    }
        -:  148:  }
        -:  149:}
        -:  150:
        -:  151:/// Returns 'block' if 'block' lies in this region, or otherwise finds the
        -:  152:/// ancestor of 'block' that lies in this region. Returns nullptr if the latter
        -:  153:/// fails.
function _ZN4mlir6Region25findAncestorBlockInRegionERNS_5BlockE called 1024 returned 100% blocks executed 57%
     1024:  154:Block *Region::findAncestorBlockInRegion(Block &block) {
     1024:  155:  Block *currBlock = &block;
     1024:  156:  while (currBlock->getParent() != this) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  157:    Operation *parentOp = currBlock->getParentOp();
call    0 never executed
    #####:  158:    if (!parentOp || !parentOp->getBlock())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  159:      return nullptr;
        -:  160:    currBlock = parentOp->getBlock();
        -:  161:  }
        -:  162:  return currBlock;
        -:  163:}
        -:  164:
        -:  165:/// Returns 'op' if 'op' lies in this region, or otherwise finds the
        -:  166:/// ancestor of 'op' that lies in this region. Returns nullptr if the
        -:  167:/// latter fails.
function _ZN4mlir6Region22findAncestorOpInRegionERNS_9OperationE called 1024 returned 100% blocks executed 100%
     1024:  168:Operation *Region::findAncestorOpInRegion(Operation &op) {
     1024:  169:  Operation *curOp = &op;
     4096:  170:  while (Region *opRegion = curOp->getParentRegion()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     2048:  171:    if (opRegion == this)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1024:  172:      return curOp;
        -:  173:
     1024:  174:    curOp = opRegion->getParentOp();
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
     1024:  175:    if (!curOp)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  176:      return nullptr;
        -:  177:  }
        -:  178:  return nullptr;
        -:  179:}
        -:  180:
function _ZN4mlir6Region17dropAllReferencesEv called 13888820 returned 100% blocks executed 86%
 13888820:  181:void Region::dropAllReferences() {
 39989837:  182:  for (Block &b : *this)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
 26101017:  183:    b.dropAllReferences();
call    0 returned 100%
 13888820:  184:}
        -:  185:
function _ZN4llvm12ilist_traitsIN4mlir5BlockEE15getParentRegionEv called 0 returned 0% blocks executed 0%
 9889230*:  186:Region *llvm::ilist_traits<::mlir::Block>::getParentRegion() {
 9889230*:  187:  size_t offset(
 9889230*:  188:      size_t(&((Region *)nullptr->*Region::getSublistAccess(nullptr))));
 9889230*:  189:  iplist<Block> *anchor(static_cast<iplist<Block> *>(this));
 8987373*:  190:  return reinterpret_cast<Region *>(reinterpret_cast<char *>(anchor) - offset);
call    0 returned 100%
        -:  191:}
        -:  192:
        -:  193:/// This is a trait method invoked when a basic block is added to a region.
        -:  194:/// We keep the region pointer up to date.
function _ZN4llvm12ilist_traitsIN4mlir5BlockEE13addNodeToListEPS2_ called 8987373 returned 100% blocks executed 80%
  8987373:  195:void llvm::ilist_traits<::mlir::Block>::addNodeToList(Block *block) {
 8987373*:  196:  assert(!block->getParent() && "already in a region!");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
  8987373:  197:  block->parentValidOpOrderPair.setPointer(getParentRegion());
call    0 returned 100%
  8987373:  198:}
        -:  199:
        -:  200:/// This is a trait method invoked when an operation is removed from a
        -:  201:/// region.  We keep the region pointer up to date.
function _ZN4llvm12ilist_traitsIN4mlir5BlockEE18removeNodeFromListEPS2_ called 8985387 returned 100% blocks executed 75%
  8985387:  202:void llvm::ilist_traits<::mlir::Block>::removeNodeFromList(Block *block) {
 8985387*:  203:  assert(block->getParent() && "not already in a region!");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
  8985387:  204:  block->parentValidOpOrderPair.setPointer(nullptr);
  8985387:  205:}
        -:  206:
        -:  207:/// This is a trait method invoked when an operation is moved from one block
        -:  208:/// to another.  We keep the block pointer up to date.
function _ZN4llvm12ilist_traitsIN4mlir5BlockEE21transferNodesFromListERS3_NS_14ilist_iteratorINS_12ilist_detail12node_optionsIS2_Lb1ELb0EvEELb0ELb0EEES9_ called 901857 returned 100% blocks executed 100%
   901857:  209:void llvm::ilist_traits<::mlir::Block>::transferNodesFromList(
        -:  210:    ilist_traits<Block> &otherList, block_iterator first, block_iterator last) {
        -:  211:  // If we are transferring operations within the same function, the parent
        -:  212:  // pointer doesn't need to be updated.
   901857:  213:  auto *curParent = getParentRegion();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   901857:  214:  if (curParent == otherList.getParentRegion())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  215:    return;
        -:  216:
        -:  217:  // Update the 'parent' member of each Block.
  9664905:  218:  for (; first != last; ++first)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
  8763048:  219:    first->parentValidOpOrderPair.setPointer(curParent);
call    0 returned 100%
call    1 returned 100%
        -:  220:}
        -:  221:
        -:  222://===----------------------------------------------------------------------===//
        -:  223:// Region::OpIterator
        -:  224://===----------------------------------------------------------------------===//
        -:  225:
function _ZN4mlir6Region10OpIteratorC2EPS0_b called 47984981 returned 100% blocks executed 100%
 47984981:  226:Region::OpIterator::OpIterator(Region *region, bool end)
 47984981:  227:    : region(region), block(end ? region->end() : region->begin()) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 41% (fallthrough)
branch  3 taken 59%
 47984981:  228:  if (!region->empty())
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
 19792618:  229:    skipOverBlocksWithNoOps();
call    0 returned 100%
 47984649:  230:}
        -:  231:
function _ZN4mlir6Region10OpIteratorppEv called 3120319284 returned 100% blocks executed 100%
3120319284:  232:Region::OpIterator &Region::OpIterator::operator++() {
        -:  233:  // We increment over operations, if we reach the last use then move to next
        -:  234:  // block.
3120319284:  235:  if (operation != block->end())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
3120319795:  236:    ++operation;
3120319795:  237:  if (operation == block->end()) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
264859644:  238:    ++block;
call    0 returned 100%
264859644:  239:    skipOverBlocksWithNoOps();
call    0 returned 100%
        -:  240:  }
3120322308:  241:  return *this;
        -:  242:}
        -:  243:
function _ZN4mlir6Region10OpIterator23skipOverBlocksWithNoOpsEv called 284639914 returned 100% blocks executed 100%
284639914:  244:void Region::OpIterator::skipOverBlocksWithNoOps() {
264861439:  245:  while (block != region->end() && block->empty())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
284644631:  246:    ++block;
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:  247:
        -:  248:  // If we are at the last block, then set the operation to first operation of
        -:  249:  // next block (sentinel value used for end).
284658377:  250:  if (block == region->end())
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
 19783270:  251:    operation = {};
        -:  252:  else
264875107:  253:    operation = block->begin();
call    0 returned 100%
284658890:  254:}
        -:  255:
        -:  256://===----------------------------------------------------------------------===//
        -:  257:// RegionRange
        -:  258://===----------------------------------------------------------------------===//
        -:  259:
function _ZN4mlir11RegionRangeC2EN4llvm15MutableArrayRefINS_6RegionEEE called 232004432 returned 100% blocks executed 100%
232004432:  260:RegionRange::RegionRange(MutableArrayRef<Region> regions)
232004432:  261:    : RegionRange(regions.data(), regions.size()) {}
call    0 returned 100%
function _ZN4mlir11RegionRangeC2EN4llvm8ArrayRefISt10unique_ptrINS_6RegionESt14default_deleteIS4_EEEE called 84534746 returned 100% blocks executed 100%
 84534746:  262:RegionRange::RegionRange(ArrayRef<std::unique_ptr<Region>> regions)
 84534746:  263:    : RegionRange(regions.data(), regions.size()) {}
call    0 returned 100%
function _ZN4mlir11RegionRangeC2EN4llvm8ArrayRefIPNS_6RegionEEE called 0 returned 0% blocks executed 0%
    #####:  264:RegionRange::RegionRange(ArrayRef<Region *> regions)
    #####:  265:    : RegionRange(const_cast<Region **>(regions.data()), regions.size()) {}
call    0 never executed
        -:  266:
        -:  267:/// See `llvm::detail::indexed_accessor_range_base` for details.
function _ZN4mlir11RegionRange11offset_baseERKN4llvm12PointerUnionIJPNS_6RegionEPKSt10unique_ptrIS3_St14default_deleteIS3_EEPS4_EEEl called 0 returned 0% blocks executed 0%
    #####:  268:RegionRange::OwnerT RegionRange::offset_base(const OwnerT &owner,
        -:  269:                                             ptrdiff_t index) {
    #####:  270:  if (auto *region = owner.dyn_cast<const std::unique_ptr<Region> *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  271:    return region + index;
call    0 never executed
    #####:  272:  if (auto **region = owner.dyn_cast<Region **>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  273:    return region + index;
call    0 never executed
    #####:  274:  return &owner.get<Region *>()[index];
call    0 never executed
call    1 never executed
        -:  275:}
        -:  276:/// See `llvm::detail::indexed_accessor_range_base` for details.
function _ZN4mlir11RegionRange20dereference_iteratorERKN4llvm12PointerUnionIJPNS_6RegionEPKSt10unique_ptrIS3_St14default_deleteIS3_EEPS4_EEEl called 5751808 returned 100% blocks executed 44%
  5751808:  277:Region *RegionRange::dereference_iterator(const OwnerT &owner,
        -:  278:                                          ptrdiff_t index) {
  5751808:  279:  if (auto *region = owner.dyn_cast<const std::unique_ptr<Region> *>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
  5751808:  280:    return region[index].get();
    #####:  281:  if (auto **region = owner.dyn_cast<Region **>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  282:    return region[index];
    #####:  283:  return &owner.get<Region *>()[index];
call    0 never executed
        -:  284:}
