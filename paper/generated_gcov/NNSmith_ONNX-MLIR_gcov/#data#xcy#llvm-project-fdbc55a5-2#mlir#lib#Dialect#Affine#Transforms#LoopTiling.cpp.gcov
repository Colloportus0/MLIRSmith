        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Transforms/LoopTiling.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopTiling.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/LoopTiling.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- LoopTiling.cpp --- Loop tiling pass ------------------------------*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to tile loop nests.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   16:#include "mlir/Dialect/Affine/Analysis/AffineStructures.h"
        -:   17:#include "mlir/Dialect/Affine/Analysis/LoopAnalysis.h"
        -:   18:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   19:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   20:#include "mlir/Dialect/Affine/IR/AffineValueMap.h"
        -:   21:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   22:#include "mlir/Dialect/Affine/Utils.h"
        -:   23:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   24:#include "mlir/IR/BlockAndValueMapping.h"
        -:   25:#include "mlir/IR/Builders.h"
        -:   26:#include "llvm/Support/CommandLine.h"
        -:   27:#include "llvm/Support/Debug.h"
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_AFFINELOOPTILING
        -:   31:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   32:} // namespace mlir
        -:   33:
        -:   34:using namespace mlir;
        -:   35:
        -:   36:#define DEBUG_TYPE "affine-loop-tile"
        -:   37:
        -:   38:namespace {
        -:   39:
        -:   40:/// A pass to perform loop tiling on all suitable loop nests of a Function.
    39528:   41:struct LoopTiling : public impl::AffineLoopTilingBase<LoopTiling> {
call    0 returned 100%
   129263:   42:  LoopTiling() = default;
call    0 returned 100%
function _ZN12_GLOBAL__N_110LoopTilingC2Emb called 0 returned 0% blocks executed 0%
    #####:   43:  explicit LoopTiling(uint64_t cacheSizeBytes, bool avoidMaxMinBounds = true)
    #####:   44:      : avoidMaxMinBounds(avoidMaxMinBounds) {
call    0 never executed
    #####:   45:    this->cacheSizeInKiB = cacheSizeBytes / 1024;
branch  0 never executed
branch  1 never executed
    #####:   46:  }
        -:   47:
        -:   48:  void runOnOperation() override;
        -:   49:  void getTileSizes(ArrayRef<AffineForOp> band,
        -:   50:                    SmallVectorImpl<unsigned> *tileSizes);
        -:   51:
        -:   52:  // Default tile size if nothing is provided.
        -:   53:  constexpr static unsigned kDefaultTileSize = 4;
        -:   54:
        -:   55:  // If true, tile sizes are set to avoid max/min in bounds if possible.
        -:   56:  bool avoidMaxMinBounds = true;
        -:   57:};
        -:   58:
        -:   59:} // namespace
        -:   60:
        -:   61:/// Creates a pass to perform loop tiling on all suitable loop nests of a
        -:   62:/// Function.
        -:   63:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir20createLoopTilingPassEm called 0 returned 0% blocks executed 0%
    #####:   64:mlir::createLoopTilingPass(uint64_t cacheSizeBytes) {
    #####:   65:  return std::make_unique<LoopTiling>(cacheSizeBytes);
call    0 never executed
        -:   66:}
function _ZN4mlir20createLoopTilingPassEv called 129263 returned 100% blocks executed 100%
   129263:   67:std::unique_ptr<OperationPass<func::FuncOp>> mlir::createLoopTilingPass() {
   129263:   68:  return std::make_unique<LoopTiling>();
call    0 returned 100%
        -:   69:}
        -:   70:
        -:   71:/// Reduces each tile size to the largest divisor of the corresponding trip
        -:   72:/// count (if the trip count is known).
function _ZL28adjustToDivisorsOfTripCountsN4llvm8ArrayRefIN4mlir11AffineForOpEEEPNS_15SmallVectorImplIjEE called 0 returned 0% blocks executed 0%
    #####:   73:static void adjustToDivisorsOfTripCounts(ArrayRef<AffineForOp> band,
        -:   74:                                         SmallVectorImpl<unsigned> *tileSizes) {
    #####:   75:  assert(band.size() == tileSizes->size() && "invalid tile size count");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   76:  for (unsigned i = 0, e = band.size(); i < e; i++) {
branch  0 never executed
branch  1 never executed
    #####:   77:    unsigned &tSizeAdjusted = (*tileSizes)[i];
branch  0 never executed
branch  1 never executed
    #####:   78:    Optional<uint64_t> mayConst = getConstantTripCount(band[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   79:    if (!mayConst)
branch  0 never executed
branch  1 never executed
    #####:   80:      continue;
        -:   81:    // Adjust the tile size to largest factor of the trip count less than
        -:   82:    // tSize.
    #####:   83:    uint64_t constTripCount = *mayConst;
branch  0 never executed
branch  1 never executed
    #####:   84:    if (constTripCount > 1 && tSizeAdjusted > constTripCount / 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   85:      tSizeAdjusted = constTripCount / 2;
    #####:   86:    while (constTripCount % tSizeAdjusted != 0)
branch  0 never executed
branch  1 never executed
    #####:   87:      tSizeAdjusted--;
        -:   88:  }
    #####:   89:}
        -:   90:
        -:   91:// Returns tile sizes to use. Checks CL options; if none are specified, sets it
        -:   92:// based on a simple model that looks at the memory footprint and determines
        -:   93:// tile sizes assuming identity accesses / 1:1 tile size proportional footprint
        -:   94:// along each of the dimensions being tiled.
        -:   95:// TODO: evolve this model. Tile size determination is a large area
        -:   96:// to play with in general.
function _ZN12_GLOBAL__N_110LoopTiling12getTileSizesEN4llvm8ArrayRefIN4mlir11AffineForOpEEEPNS1_15SmallVectorImplIjEE called 0 returned 0% blocks executed 0%
    #####:   97:void LoopTiling::getTileSizes(ArrayRef<AffineForOp> band,
        -:   98:                              SmallVectorImpl<unsigned> *tileSizes) {
    #####:   99:  if (band.empty())
branch  0 never executed
branch  1 never executed
    #####:  100:    return;
        -:  101:
        -:  102:  // Use command-line tileSize for all loops if specified.
    #####:  103:  if (tileSize) {
branch  0 never executed
branch  1 never executed
    #####:  104:    tileSizes->assign(band.size(), tileSize);
call    0 never executed
    #####:  105:    return;
call    0 never executed
        -:  106:  }
        -:  107:
        -:  108:  // Use tileSizes and fill them with default tile size if it's short.
    #####:  109:  if (!this->tileSizes.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  110:    tileSizes->assign(this->tileSizes.begin(), this->tileSizes.end());
call    0 never executed
    #####:  111:    tileSizes->resize(band.size(), kDefaultTileSize);
call    0 never executed
    #####:  112:    return;
call    0 never executed
        -:  113:  }
    #####:  114:  tileSizes->resize(band.size());
call    0 never executed
        -:  115:
        -:  116:  // The first loop in the band.
    #####:  117:  AffineForOp rootForOp = band[0];
call    0 never executed
    #####:  118:  (void)rootForOp;
        -:  119:
        -:  120:  // Obtain memory footprint and set tile sizes so that a tile fits in
        -:  121:  // the cache size. This is an approximation with the assumption that the
        -:  122:  // footprint increases with the tile size linearly in that dimension (i.e.,
        -:  123:  // assumes one-to-one access function).
    #####:  124:  Optional<int64_t> fp = getMemoryFootprintBytes(band[0], 0);
call    0 never executed
    #####:  125:  if (!fp) {
branch  0 never executed
branch  1 never executed
        -:  126:    // Fill with default tile sizes if footprint is unknown.
    #####:  127:    std::fill(tileSizes->begin(), tileSizes->end(),
        -:  128:              LoopTiling::kDefaultTileSize);
    #####:  129:    if (avoidMaxMinBounds)
branch  0 never executed
branch  1 never executed
    #####:  130:      adjustToDivisorsOfTripCounts(band, tileSizes);
call    0 never executed
    #####:  131:    LLVM_DEBUG(
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  132:        rootForOp.emitWarning("memory footprint unknown: using default tile "
        -:  133:                              "sizes adjusted to trip count divisors"));
    #####:  134:    return;
        -:  135:  }
        -:  136:
        -:  137:  // Check how many times larger the cache size is when compared to footprint.
    #####:  138:  uint64_t cacheSizeBytes = cacheSizeInKiB * 1024;
call    0 never executed
    #####:  139:  uint64_t excessFactor = llvm::divideCeil(*fp, cacheSizeBytes);
call    0 never executed
    #####:  140:  if (excessFactor <= 1) {
branch  0 never executed
branch  1 never executed
        -:  141:    // No need of any tiling - set tile size to 1.
    #####:  142:    std::fill(tileSizes->begin(), tileSizes->end(), 1);
        -:  143:    return;
        -:  144:  }
        -:  145:
        -:  146:  // Divide all loops equally in an attempt to reduce footprint.
        -:  147:  // TODO: this is approximate. Ideally, obtain reuse factor /
        -:  148:  // profitability along each dimension and weight tile sizes based on that as
        -:  149:  // one possible approach. Or compute a polynomial in tile sizes and solve for
        -:  150:  // it.
        -:  151:
        -:  152:  // For an n-d tileable band, compute the n^th root of the excess.
    #####:  153:  unsigned tSize =
    #####:  154:      static_cast<unsigned>(floorl(std::pow(excessFactor, 1.0 / band.size())));
        -:  155:  // We'll keep a running product to determine the last tile size better.
    #####:  156:  unsigned cumulProductOfTileSizes = 1;
    #####:  157:  for (unsigned i = 0, e = band.size(); i < e; i++) {
branch  0 never executed
branch  1 never executed
    #####:  158:    if (i < e - 1)
branch  0 never executed
branch  1 never executed
    #####:  159:      (*tileSizes)[i] = tSize;
branch  0 never executed
branch  1 never executed
        -:  160:    else
        -:  161:      // Set last tile size to cover the balance.
    #####:  162:      (*tileSizes)[i] = std::max(
    #####:  163:          1U, static_cast<unsigned>(excessFactor / cumulProductOfTileSizes));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  164:    cumulProductOfTileSizes *= (*tileSizes)[i];
branch  0 never executed
branch  1 never executed
        -:  165:  }
    #####:  166:  if (avoidMaxMinBounds)
branch  0 never executed
branch  1 never executed
    #####:  167:    adjustToDivisorsOfTripCounts(band, tileSizes);
call    0 never executed
        -:  168:}
        -:  169:
function _ZN12_GLOBAL__N_110LoopTiling14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  170:void LoopTiling::runOnOperation() {
        -:  171:  // Bands of loops to tile.
    #####:  172:  std::vector<SmallVector<AffineForOp, 6>> bands;
call    0 never executed
call    1 never executed
    #####:  173:  getTileableBands(getOperation(), &bands);
call    0 never executed
call    1 never executed
        -:  174:
        -:  175:  // Tile each band.
    #####:  176:  for (auto &band : bands) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  177:    // Set up tile sizes; fill missing tile sizes at the end with default tile
        -:  178:    // size or tileSize if one was provided.
    #####:  179:    SmallVector<unsigned, 6> tileSizes;
call    0 never executed
    #####:  180:    getTileSizes(band, &tileSizes);
call    0 never executed
    #####:  181:    if (llvm::DebugFlag) {
branch  0 never executed
branch  1 never executed
    #####:  182:      auto diag = band[0].emitRemark("using tile sizes [");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  183:      for (unsigned tSize : tileSizes)
branch  0 never executed
branch  1 never executed
    #####:  184:        diag << tSize << ' ';
call    0 never executed
call    1 never executed
    #####:  185:      diag << "]\n";
call    0 never executed
call    1 never executed
        -:  186:    }
    #####:  187:    SmallVector<AffineForOp, 6> tiledNest;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  188:    if (failed(tilePerfectlyNested(band, tileSizes, &tiledNest))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  189:      // An empty band always succeeds.
    #####:  190:      assert(!band.empty() && "guaranteed to succeed on empty bands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  191:      LLVM_DEBUG(band.front()->emitRemark("loop tiling failed!\n"));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  192:      continue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  193:    }
        -:  194:
        -:  195:    // Separate full and partial tiles.
    #####:  196:    if (separate) {
branch  0 never executed
branch  1 never executed
    #####:  197:      auto intraTileLoops =
call    0 never executed
    #####:  198:          MutableArrayRef<AffineForOp>(tiledNest).drop_front(band.size());
call    0 never executed
    #####:  199:      if (failed(separateFullTiles(intraTileLoops))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  200:        assert(!intraTileLoops.empty() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  201:               "guaranteed to succeed on empty bands");
    #####:  202:        LLVM_DEBUG(intraTileLoops.front()->emitRemark(
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  203:            "separation post tiling failed!\n"));
        -:  204:      }
        -:  205:    }
        -:  206:  }
    #####:  207:}
        -:  208:
        -:  209:constexpr unsigned LoopTiling::kDefaultTileSize;
