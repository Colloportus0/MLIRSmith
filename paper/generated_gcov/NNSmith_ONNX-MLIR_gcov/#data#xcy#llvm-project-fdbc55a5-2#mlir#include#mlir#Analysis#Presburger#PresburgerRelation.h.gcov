        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/Analysis/Presburger/PresburgerRelation.h
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcda
        -:    0:Runs:128654
        -:    1://===- PresburgerRelation.h - MLIR PresburgerRelation Class -----*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// A class to represent unions of IntegerRelations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_ANALYSIS_PRESBURGER_PRESBURGERRELATION_H
        -:   14:#define MLIR_ANALYSIS_PRESBURGER_PRESBURGERRELATION_H
        -:   15:
        -:   16:#include "mlir/Analysis/Presburger/IntegerRelation.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:namespace presburger {
        -:   20:
        -:   21:/// The SetCoalescer class contains all functionality concerning the coalesce
        -:   22:/// heuristic. It is built from a `PresburgerRelation` and has the `coalesce()`
        -:   23:/// function as its main API.
        -:   24:class SetCoalescer;
        -:   25:
        -:   26:/// A PresburgerRelation represents a union of IntegerRelations that live in
        -:   27:/// the same PresburgerSpace with support for union, intersection, subtraction,
        -:   28:/// and complement operations, as well as sampling.
        -:   29:///
        -:   30:/// The IntegerRelations (disjuncts) are stored in a vector, and the set
        -:   31:/// represents the union of these relations. An empty list corresponds to
        -:   32:/// the empty set.
        -:   33:///
        -:   34:/// Note that there are no invariants guaranteed on the list of disjuncts
        -:   35:/// other than that they are all in the same PresburgerSpace. For example, the
        -:   36:/// relations may overlap with each other.
        -:   37:class PresburgerRelation {
        -:   38:public:
        -:   39:  /// Return a universe set of the specified type that contains all points.
        -:   40:  static PresburgerRelation getUniverse(const PresburgerSpace &space);
        -:   41:
        -:   42:  /// Return an empty set of the specified type that contains no points.
        -:   43:  static PresburgerRelation getEmpty(const PresburgerSpace &space);
        -:   44:
        -:   45:  explicit PresburgerRelation(const IntegerRelation &disjunct);
        -:   46:
        -:   47:  unsigned getNumDomainVars() const { return space.getNumDomainVars(); }
        -:   48:  unsigned getNumRangeVars() const { return space.getNumRangeVars(); }
        -:   49:  unsigned getNumSymbolVars() const { return space.getNumSymbolVars(); }
        -:   50:  unsigned getNumLocalVars() const { return space.getNumLocalVars(); }
        -:   51:  unsigned getNumVars() const { return space.getNumVars(); }
        -:   52:
        -:   53:  /// Return the number of disjuncts in the union.
        -:   54:  unsigned getNumDisjuncts() const;
        -:   55:
    #####:   56:  const PresburgerSpace &getSpace() const { return space; }
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:   57:
        -:   58:  /// Set the space to `oSpace`. `oSpace` should not contain any local ids.
        -:   59:  /// `oSpace` need not have the same number of ids as the current space;
        -:   60:  /// it could have more or less. If it has less, the extra ids become
        -:   61:  /// locals of the disjuncts. It can also have more, in which case the
        -:   62:  /// disjuncts will have fewer locals. If its total number of ids
        -:   63:  /// exceeds that of some disjunct, an assert failure will occur.
        -:   64:  void setSpace(const PresburgerSpace &oSpace);
        -:   65:
        -:   66:  /// Return a reference to the list of disjuncts.
        -:   67:  ArrayRef<IntegerRelation> getAllDisjuncts() const;
        -:   68:
        -:   69:  /// Return the disjunct at the specified index.
        -:   70:  const IntegerRelation &getDisjunct(unsigned index) const;
        -:   71:
        -:   72:  /// Mutate this set, turning it into the union of this set and the given
        -:   73:  /// disjunct.
        -:   74:  void unionInPlace(const IntegerRelation &disjunct);
        -:   75:
        -:   76:  /// Mutate this set, turning it into the union of this set and the given set.
        -:   77:  void unionInPlace(const PresburgerRelation &set);
        -:   78:
        -:   79:  /// Return the union of this set and the given set.
        -:   80:  PresburgerRelation unionSet(const PresburgerRelation &set) const;
        -:   81:
        -:   82:  /// Return the intersection of this set and the given set.
        -:   83:  PresburgerRelation intersect(const PresburgerRelation &set) const;
        -:   84:
        -:   85:  /// Return true if the set contains the given point, and false otherwise.
        -:   86:  bool containsPoint(ArrayRef<MPInt> point) const;
        -:   87:  bool containsPoint(ArrayRef<int64_t> point) const {
        -:   88:    return containsPoint(getMPIntVec(point));
        -:   89:  }
        -:   90:
        -:   91:  /// Return the complement of this set. All local variables in the set must
        -:   92:  /// correspond to floor divisions.
        -:   93:  PresburgerRelation complement() const;
        -:   94:
        -:   95:  /// Return the set difference of this set and the given set, i.e.,
        -:   96:  /// return `this \ set`. All local variables in `set` must correspond
        -:   97:  /// to floor divisions, but local variables in `this` need not correspond to
        -:   98:  /// divisions.
        -:   99:  PresburgerRelation subtract(const PresburgerRelation &set) const;
        -:  100:
        -:  101:  /// Return true if this set is a subset of the given set, and false otherwise.
        -:  102:  bool isSubsetOf(const PresburgerRelation &set) const;
        -:  103:
        -:  104:  /// Return true if this set is equal to the given set, and false otherwise.
        -:  105:  /// All local variables in both sets must correspond to floor divisions.
        -:  106:  bool isEqual(const PresburgerRelation &set) const;
        -:  107:
        -:  108:  /// Return true if all the sets in the union are known to be integer empty
        -:  109:  /// false otherwise.
        -:  110:  bool isIntegerEmpty() const;
        -:  111:
        -:  112:  /// Find an integer sample from the given set. This should not be called if
        -:  113:  /// any of the disjuncts in the union are unbounded.
        -:  114:  bool findIntegerSample(SmallVectorImpl<MPInt> &sample);
        -:  115:
        -:  116:  /// Compute an overapproximation of the number of integer points in the
        -:  117:  /// disjunct. Symbol vars are currently not supported. If the computed
        -:  118:  /// overapproximation is infinite, an empty optional is returned.
        -:  119:  ///
        -:  120:  /// This currently just sums up the overapproximations of the volumes of the
        -:  121:  /// disjuncts, so the approximation might be far from the true volume in the
        -:  122:  /// case when there is a lot of overlap between disjuncts.
        -:  123:  Optional<MPInt> computeVolume() const;
        -:  124:
        -:  125:  /// Simplifies the representation of a PresburgerRelation.
        -:  126:  ///
        -:  127:  /// In particular, removes all disjuncts which are subsets of other
        -:  128:  /// disjuncts in the union.
        -:  129:  PresburgerRelation coalesce() const;
        -:  130:
        -:  131:  /// Check whether all local ids in all disjuncts have a div representation.
        -:  132:  bool hasOnlyDivLocals() const;
        -:  133:
        -:  134:  /// Compute an equivalent representation of the same relation, such that all
        -:  135:  /// local ids in all disjuncts have division representations. This
        -:  136:  /// representation may involve local ids that correspond to divisions, and may
        -:  137:  /// also be a union of convex disjuncts.
        -:  138:  PresburgerRelation computeReprWithOnlyDivLocals() const;
        -:  139:
        -:  140:  /// Print the set's internal state.
        -:  141:  void print(raw_ostream &os) const;
        -:  142:  void dump() const;
        -:  143:
        -:  144:protected:
        -:  145:  /// Construct an empty PresburgerRelation with the specified number of
        -:  146:  /// dimension and symbols.
        -:  147:  explicit PresburgerRelation(const PresburgerSpace &space) : space(space) {
        -:  148:    assert(space.getNumLocalVars() == 0 &&
        -:  149:           "PresburgerRelation cannot have local vars.");
        -:  150:  }
        -:  151:
        -:  152:  PresburgerSpace space;
        -:  153:
        -:  154:  /// The list of disjuncts that this set is the union of.
        -:  155:  SmallVector<IntegerRelation, 2> disjuncts;
        -:  156:
        -:  157:  friend class SetCoalescer;
        -:  158:};
        -:  159:
    #####:  160:class PresburgerSet : public PresburgerRelation {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
        -:  161:public:
        -:  162:  /// Return a universe set of the specified type that contains all points.
        -:  163:  static PresburgerSet getUniverse(const PresburgerSpace &space);
        -:  164:
        -:  165:  /// Return an empty set of the specified type that contains no points.
        -:  166:  static PresburgerSet getEmpty(const PresburgerSpace &space);
        -:  167:
        -:  168:  /// Create a set from a relation.
        -:  169:  explicit PresburgerSet(const IntegerPolyhedron &disjunct);
        -:  170:  explicit PresburgerSet(const PresburgerRelation &set);
        -:  171:
        -:  172:  /// These operations are the same as the ones in PresburgeRelation, they just
        -:  173:  /// forward the arguement and return the result as a set instead of a
        -:  174:  /// relation.
        -:  175:  PresburgerSet unionSet(const PresburgerRelation &set) const;
        -:  176:  PresburgerSet intersect(const PresburgerRelation &set) const;
        -:  177:  PresburgerSet complement() const;
        -:  178:  PresburgerSet subtract(const PresburgerRelation &set) const;
        -:  179:  PresburgerSet coalesce() const;
        -:  180:
        -:  181:protected:
        -:  182:  /// Construct an empty PresburgerRelation with the specified number of
        -:  183:  /// dimension and symbols.
        -:  184:  explicit PresburgerSet(const PresburgerSpace &space)
        -:  185:      : PresburgerRelation(space) {
        -:  186:    assert(space.getNumDomainVars() == 0 &&
        -:  187:           "Set type cannot have domain vars.");
        -:  188:    assert(space.getNumLocalVars() == 0 &&
        -:  189:           "PresburgerRelation cannot have local vars.");
        -:  190:  }
        -:  191:};
        -:  192:
        -:  193:} // namespace presburger
        -:  194:} // namespace mlir
        -:  195:
        -:  196:#endif // MLIR_ANALYSIS_PRESBURGER_PRESBURGERRELATION_H
