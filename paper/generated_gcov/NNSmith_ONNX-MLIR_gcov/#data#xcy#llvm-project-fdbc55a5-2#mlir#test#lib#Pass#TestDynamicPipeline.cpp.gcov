        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Pass/TestDynamicPipeline.cpp
        -:    0:Graph:../tools/mlir/test/lib/Pass/CMakeFiles/MLIRTestPass.dir/TestDynamicPipeline.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Pass/CMakeFiles/MLIRTestPass.dir/TestDynamicPipeline.cpp.gcda
        -:    0:Runs:128637
        -:    1://===------ TestDynamicPipeline.cpp --- dynamic pipeline test pass --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to test the dynamic pipeline feature.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/IR/BuiltinOps.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:#include "mlir/Pass/PassManager.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:namespace {
        -:   20:
        -:   21:class TestDynamicPipelinePass
        -:   22:    : public PassWrapper<TestDynamicPipelinePass, OperationPass<>> {
        -:   23:public:
function _ZN12_GLOBAL__N_123TestDynamicPipelinePass13resolveTypeIDEv called 129268 returned 100% blocks executed 100%
   129268:   24:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestDynamicPipelinePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   25:
function _ZNK12_GLOBAL__N_123TestDynamicPipelinePass11getArgumentEv called 128662 returned 100% blocks executed 100%
   128662:   26:  StringRef getArgument() const final { return "test-dynamic-pipeline"; }
function _ZNK12_GLOBAL__N_123TestDynamicPipelinePass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   27:  StringRef getDescription() const final {
   128637:   28:    return "Tests the dynamic pipeline feature by applying "
   128637:   29:           "a pipeline on a selected set of functions";
        -:   30:  }
function _ZNK12_GLOBAL__N_123TestDynamicPipelinePass20getDependentDialectsERN4mlir15DialectRegistryE called 631 returned 100% blocks executed 100%
      631:   31:  void getDependentDialects(DialectRegistry &registry) const override {
     1262:   32:    OpPassManager pm(ModuleOp::getOperationName(),
     1262:   33:                     OpPassManager::Nesting::Implicit);
call    0 returned 100%
call    1 returned 100%
      631:   34:    (void)parsePassPipeline(pipeline, pm, llvm::errs());
call    0 returned 100%
call    1 returned 100%
      631:   35:    pm.getDependentDialects(registry);
call    0 returned 100%
      631:   36:  }
        -:   37:
function _ZN12_GLOBAL__N_123TestDynamicPipelinePassC2Ev called 129268 returned 100% blocks executed 100%
   129268:   38:  TestDynamicPipelinePass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   39:  TestDynamicPipelinePass(const TestDynamicPipelinePass &) {}
        -:   40:
function _ZN12_GLOBAL__N_123TestDynamicPipelinePass14runOnOperationEv called 530 returned 100% blocks executed 24%
      530:   41:  void runOnOperation() override {
      530:   42:    Operation *currentOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   43:
      530:   44:    llvm::errs() << "Dynamic execute '" << pipeline << "' on "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      530:   45:                 << currentOp->getName() << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      530:   46:    if (pipeline.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      530:   47:      llvm::errs() << "Empty pipeline\n";
call    0 returned 100%
     1060:   48:      return;
call    0 returned 100%
        -:   49:    }
    #####:   50:    auto symbolOp = dyn_cast<SymbolOpInterface>(currentOp);
call    0 never executed
    #####:   51:    if (!symbolOp) {
branch  0 never executed
branch  1 never executed
    #####:   52:      currentOp->emitWarning()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   53:          << "Ignoring because not implementing SymbolOpInterface\n";
call    0 never executed
    #####:   54:      return;
        -:   55:    }
        -:   56:
    #####:   57:    auto opName = symbolOp.getName();
call    0 never executed
    #####:   58:    if (!opNames.empty() && !llvm::is_contained(opNames, opName)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   59:      llvm::errs() << "dynamic-pipeline skip op name: " << opName << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   60:      return;
call    0 never executed
        -:   61:    }
    #####:   62:    OpPassManager pm(currentOp->getName().getIdentifier(),
call    0 never executed
    #####:   63:                     OpPassManager::Nesting::Implicit);
call    0 never executed
call    1 never executed
    #####:   64:    (void)parsePassPipeline(pipeline, pm, llvm::errs());
call    0 never executed
call    1 never executed
        -:   65:
        -:   66:    // Check that running on the parent operation always immediately fails.
    #####:   67:    if (runOnParent) {
branch  0 never executed
branch  1 never executed
    #####:   68:      if (currentOp->getParentOp())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:        if (!failed(runPipeline(pm, currentOp->getParentOp())))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   70:          signalPassFailure();
call    0 never executed
    #####:   71:      return;
call    0 never executed
        -:   72:    }
        -:   73:
    #####:   74:    if (runOnNestedOp) {
branch  0 never executed
branch  1 never executed
    #####:   75:      llvm::errs() << "Run on nested op\n";
call    0 never executed
call    1 never executed
function _ZZN12_GLOBAL__N_123TestDynamicPipelinePass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_ called 0 returned 0% blocks executed 0%
    #####:   76:      currentOp->walk([&](Operation *op) {
call    0 never executed
    #####:   77:        if (op == currentOp || !op->hasTrait<OpTrait::IsIsolatedFromAbove>() ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   78:            op->getName() != currentOp->getName())
branch  0 never executed
branch  1 never executed
    #####:   79:          return;
    #####:   80:        llvm::errs() << "Run on " << *op << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   81:        // Run on the current operation
    #####:   82:        if (failed(runPipeline(pm, op)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:          signalPassFailure();
call    0 never executed
        -:   84:      });
        -:   85:    } else {
        -:   86:      // Run on the current operation
    #####:   87:      if (failed(runPipeline(pm, currentOp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:        signalPassFailure();
call    0 never executed
        -:   89:    }
        -:   90:  }
        -:   91:
        -:   92:  Option<bool> runOnNestedOp{
        -:   93:      *this, "run-on-nested-operations",
        -:   94:      llvm::cl::desc("This will apply the pipeline on nested operations under "
        -:   95:                     "the visited operation.")};
        -:   96:  Option<bool> runOnParent{
        -:   97:      *this, "run-on-parent",
        -:   98:      llvm::cl::desc("This will apply the pipeline on the parent operation if "
        -:   99:                     "it exist, this is expected to fail.")};
        -:  100:  Option<std::string> pipeline{
        -:  101:      *this, "dynamic-pipeline",
        -:  102:      llvm::cl::desc("The pipeline description that "
        -:  103:                     "will run on the filtered function.")};
        -:  104:  ListOption<std::string> opNames{
        -:  105:      *this, "op-name",
        -:  106:      llvm::cl::desc("List of function name to apply the pipeline to")};
        -:  107:};
        -:  108:} // namespace
        -:  109:
        -:  110:namespace mlir {
        -:  111:namespace test {
function _ZN4mlir4test31registerTestDynamicPipelinePassEv called 128637 returned 100% blocks executed 100%
   128637:  112:void registerTestDynamicPipelinePass() {
   128637:  113:  PassRegistration<TestDynamicPipelinePass>();
call    0 returned 100%
   128637:  114:}
        -:  115:} // namespace test
        -:  116:} // namespace mlir
