        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Func/Transforms/DecomposeCallGraphTypes.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Func/Transforms/CMakeFiles/obj.MLIRFuncTransforms.dir/DecomposeCallGraphTypes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Func/Transforms/CMakeFiles/obj.MLIRFuncTransforms.dir/DecomposeCallGraphTypes.cpp.gcda
        -:    0:Runs:128649
        -:    1://===- DecomposeCallGraphTypes.cpp - CG type decomposition ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Func/Transforms/DecomposeCallGraphTypes.h"
        -:   10:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::func;
        -:   15:
        -:   16://===----------------------------------------------------------------------===//
        -:   17:// ValueDecomposer
        -:   18://===----------------------------------------------------------------------===//
        -:   19:
function _ZN4mlir15ValueDecomposer14decomposeValueERNS_9OpBuilderENS_8LocationENS_4TypeENS_5ValueERN4llvm15SmallVectorImplIS5_EE called 0 returned 0% blocks executed 0%
    #####:   20:void ValueDecomposer::decomposeValue(OpBuilder &builder, Location loc,
        -:   21:                                     Type type, Value value,
        -:   22:                                     SmallVectorImpl<Value> &results) {
    #####:   23:  for (auto &conversion : decomposeValueConversions)
branch  0 never executed
branch  1 never executed
    #####:   24:    if (conversion(builder, loc, type, value, results))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   25:      return;
    #####:   26:  results.push_back(value);
call    0 never executed
        -:   27:}
        -:   28:
        -:   29://===----------------------------------------------------------------------===//
        -:   30:// DecomposeCallGraphTypesOpConversionPattern
        -:   31://===----------------------------------------------------------------------===//
        -:   32:
        -:   33:namespace {
        -:   34:/// Base OpConversionPattern class to make a ValueDecomposer available to
        -:   35:/// inherited patterns.
        -:   36:template <typename SourceOp>
        -:   37:class DecomposeCallGraphTypesOpConversionPattern
        -:   38:    : public OpConversionPattern<SourceOp> {
        -:   39:public:
        -:   40:  DecomposeCallGraphTypesOpConversionPattern(TypeConverter &typeConverter,
        -:   41:                                             MLIRContext *context,
        -:   42:                                             ValueDecomposer &decomposer,
        -:   43:                                             PatternBenefit benefit = 1)
        -:   44:      : OpConversionPattern<SourceOp>(typeConverter, context, benefit),
        -:   45:        decomposer(decomposer) {}
        -:   46:
        -:   47:protected:
        -:   48:  ValueDecomposer &decomposer;
        -:   49:};
        -:   50:} // namespace
        -:   51:
        -:   52://===----------------------------------------------------------------------===//
        -:   53:// DecomposeCallGraphTypesForFuncArgs
        -:   54://===----------------------------------------------------------------------===//
        -:   55:
        -:   56:namespace {
        -:   57:/// Expand function arguments according to the provided TypeConverter and
        -:   58:/// ValueDecomposer.
        -:   59:struct DecomposeCallGraphTypesForFuncArgs
        -:   60:    : public DecomposeCallGraphTypesOpConversionPattern<func::FuncOp> {
        -:   61:  using DecomposeCallGraphTypesOpConversionPattern::
        -:   62:      DecomposeCallGraphTypesOpConversionPattern;
        -:   63:
        -:   64:  LogicalResult
function _ZNK12_GLOBAL__N_134DecomposeCallGraphTypesForFuncArgs15matchAndRewriteEN4mlir4func6FuncOpENS2_13FuncOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   65:  matchAndRewrite(func::FuncOp op, OpAdaptor adaptor,
        -:   66:                  ConversionPatternRewriter &rewriter) const final {
    #####:   67:    auto functionType = op.getFunctionType();
call    0 never executed
        -:   68:
        -:   69:    // Convert function arguments using the provided TypeConverter.
    #####:   70:    TypeConverter::SignatureConversion conversion(functionType.getNumInputs());
call    0 never executed
call    1 never executed
    #####:   71:    for (const auto &argType : llvm::enumerate(functionType.getInputs())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:      SmallVector<Type, 2> decomposedTypes;
call    0 never executed
call    1 never executed
    #####:   73:      if (failed(typeConverter->convertType(argType.value(), decomposedTypes)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:        return failure();
branch  0 never executed
branch  1 never executed
    #####:   75:      if (!decomposedTypes.empty())
branch  0 never executed
branch  1 never executed
    #####:   76:        conversion.addInputs(argType.index(), decomposedTypes);
call    0 never executed
        -:   77:    }
        -:   78:
        -:   79:    // If the SignatureConversion doesn't apply, bail out.
    #####:   80:    if (failed(rewriter.convertRegionTypes(&op.getBody(), *getTypeConverter(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:                                           &conversion)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:      return failure();
        -:   83:
        -:   84:    // Update the signature of the function.
    #####:   85:    SmallVector<Type, 2> newResultTypes;
call    0 never executed
call    1 never executed
    #####:   86:    if (failed(typeConverter->convertTypes(functionType.getResults(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   87:                                           newResultTypes)))
    #####:   88:      return failure();
function _ZZNK12_GLOBAL__N_134DecomposeCallGraphTypesForFuncArgs15matchAndRewriteEN4mlir4func6FuncOpENS2_13FuncOpAdaptorERNS1_25ConversionPatternRewriterEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:   89:    rewriter.updateRootInPlace(op, [&] {
call    0 never executed
    #####:   90:      op.setType(rewriter.getFunctionType(conversion.getConvertedTypes(),
    #####:   91:                                          newResultTypes));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   92:    });
    #####:   93:    return success();
branch  0 never executed
branch  1 never executed
        -:   94:  }
        -:   95:};
        -:   96:} // namespace
        -:   97:
        -:   98://===----------------------------------------------------------------------===//
        -:   99:// DecomposeCallGraphTypesForReturnOp
        -:  100://===----------------------------------------------------------------------===//
        -:  101:
        -:  102:namespace {
        -:  103:/// Expand return operands according to the provided TypeConverter and
        -:  104:/// ValueDecomposer.
        -:  105:struct DecomposeCallGraphTypesForReturnOp
        -:  106:    : public DecomposeCallGraphTypesOpConversionPattern<ReturnOp> {
        -:  107:  using DecomposeCallGraphTypesOpConversionPattern::
        -:  108:      DecomposeCallGraphTypesOpConversionPattern;
        -:  109:  LogicalResult
function _ZNK12_GLOBAL__N_134DecomposeCallGraphTypesForReturnOp15matchAndRewriteEN4mlir4func8ReturnOpENS2_15ReturnOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  110:  matchAndRewrite(ReturnOp op, OpAdaptor adaptor,
        -:  111:                  ConversionPatternRewriter &rewriter) const final {
    #####:  112:    SmallVector<Value, 2> newOperands;
call    0 never executed
    #####:  113:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  114:      decomposer.decomposeValue(rewriter, op.getLoc(), operand.getType(),
call    0 never executed
        -:  115:                                operand, newOperands);
    #####:  116:    rewriter.replaceOpWithNewOp<ReturnOp>(op, newOperands);
call    0 never executed
    #####:  117:    return success();
branch  0 never executed
branch  1 never executed
        -:  118:  }
        -:  119:};
        -:  120:} // namespace
        -:  121:
        -:  122://===----------------------------------------------------------------------===//
        -:  123:// DecomposeCallGraphTypesForCallOp
        -:  124://===----------------------------------------------------------------------===//
        -:  125:
        -:  126:namespace {
        -:  127:/// Expand call op operands and results according to the provided TypeConverter
        -:  128:/// and ValueDecomposer.
        -:  129:struct DecomposeCallGraphTypesForCallOp
        -:  130:    : public DecomposeCallGraphTypesOpConversionPattern<CallOp> {
        -:  131:  using DecomposeCallGraphTypesOpConversionPattern::
        -:  132:      DecomposeCallGraphTypesOpConversionPattern;
        -:  133:
        -:  134:  LogicalResult
function _ZNK12_GLOBAL__N_132DecomposeCallGraphTypesForCallOp15matchAndRewriteEN4mlir4func6CallOpENS2_13CallOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  135:  matchAndRewrite(CallOp op, OpAdaptor adaptor,
        -:  136:                  ConversionPatternRewriter &rewriter) const final {
        -:  137:
        -:  138:    // Create the operands list of the new `CallOp`.
    #####:  139:    SmallVector<Value, 2> newOperands;
call    0 never executed
    #####:  140:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  141:      decomposer.decomposeValue(rewriter, op.getLoc(), operand.getType(),
call    0 never executed
        -:  142:                                operand, newOperands);
        -:  143:
        -:  144:    // Create the new result types for the new `CallOp` and track the indices in
        -:  145:    // the new call op's results that correspond to the old call op's results.
        -:  146:    //
        -:  147:    // expandedResultIndices[i] = "list of new result indices that old result i
        -:  148:    // expanded to".
    #####:  149:    SmallVector<Type, 2> newResultTypes;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  150:    SmallVector<SmallVector<unsigned, 2>, 4> expandedResultIndices;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  151:    for (Type resultType : op.getResultTypes()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  152:      unsigned oldSize = newResultTypes.size();
call    0 never executed
    #####:  153:      if (failed(typeConverter->convertType(resultType, newResultTypes)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  154:        return failure();
    #####:  155:      auto &resultMapping = expandedResultIndices.emplace_back();
call    0 never executed
    #####:  156:      for (unsigned i = oldSize, e = newResultTypes.size(); i < e; i++)
branch  0 never executed
branch  1 never executed
    #####:  157:        resultMapping.push_back(i);
call    0 never executed
        -:  158:    }
        -:  159:
    #####:  160:    CallOp newCallOp = rewriter.create<CallOp>(op.getLoc(), op.getCalleeAttr(),
    #####:  161:                                               newResultTypes, newOperands);
call    0 never executed
call    1 never executed
        -:  162:
        -:  163:    // Build a replacement value for each result to replace its uses. If a
        -:  164:    // result has multiple mapping values, it needs to be materialized as a
        -:  165:    // single value.
    #####:  166:    SmallVector<Value, 2> replacedValues;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  167:    replacedValues.reserve(op.getNumResults());
branch  0 never executed
branch  1 never executed
    #####:  168:    for (unsigned i = 0, e = op.getNumResults(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  169:      auto decomposedValues = llvm::to_vector<6>(
    #####:  170:          llvm::map_range(expandedResultIndices[i],
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  171:                          [&](unsigned i) { return newCallOp.getResult(i); }));
call    0 never executed
    #####:  172:      if (decomposedValues.empty()) {
branch  0 never executed
branch  1 never executed
        -:  173:        // No replacement is required.
    #####:  174:        replacedValues.push_back(nullptr);
call    0 never executed
    #####:  175:      } else if (decomposedValues.size() == 1) {
branch  0 never executed
branch  1 never executed
    #####:  176:        replacedValues.push_back(decomposedValues.front());
call    0 never executed
        -:  177:      } else {
        -:  178:        // Materialize a single Value to replace the original Value.
    #####:  179:        Value materialized = getTypeConverter()->materializeArgumentConversion(
    #####:  180:            rewriter, op.getLoc(), op.getType(i), decomposedValues);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  181:        replacedValues.push_back(materialized);
call    0 never executed
        -:  182:      }
        -:  183:    }
    #####:  184:    rewriter.replaceOp(op, replacedValues);
call    0 never executed
call    1 never executed
    #####:  185:    return success();
branch  0 never executed
branch  1 never executed
        -:  186:  }
        -:  187:};
        -:  188:} // namespace
        -:  189:
function _ZN4mlir39populateDecomposeCallGraphTypesPatternsEPNS_11MLIRContextERNS_13TypeConverterERNS_15ValueDecomposerERNS_17RewritePatternSetE called 534 returned 100% blocks executed 100%
      534:  190:void mlir::populateDecomposeCallGraphTypesPatterns(
        -:  191:    MLIRContext *context, TypeConverter &typeConverter,
        -:  192:    ValueDecomposer &decomposer, RewritePatternSet &patterns) {
      534:  193:  patterns
        -:  194:      .add<DecomposeCallGraphTypesForCallOp, DecomposeCallGraphTypesForFuncArgs,
        -:  195:           DecomposeCallGraphTypesForReturnOp>(typeConverter, context,
      534:  196:                                               decomposer);
call    0 returned 100%
      534:  197:}
