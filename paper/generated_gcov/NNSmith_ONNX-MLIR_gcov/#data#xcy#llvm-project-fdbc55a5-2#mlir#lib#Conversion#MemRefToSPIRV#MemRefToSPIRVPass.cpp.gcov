        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/MemRefToSPIRV/MemRefToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/MemRefToSPIRV/CMakeFiles/obj.MLIRMemRefToSPIRV.dir/MemRefToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/MemRefToSPIRV/CMakeFiles/obj.MLIRMemRefToSPIRV.dir/MemRefToSPIRVPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- MemRefToSPIRVPass.cpp - MemRef to SPIR-V Passes ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert standard dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/MemRefToSPIRV/MemRefToSPIRVPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/MemRefToSPIRV/MemRefToSPIRV.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_CONVERTMEMREFTOSPIRV
        -:   21:#include "mlir/Conversion/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:/// A pass converting MLIR MemRef operations into the SPIR-V dialect.
  129284*:   28:class ConvertMemRefToSPIRVPass
call    0 never executed
call    1 returned 100%
        -:   29:    : public impl::ConvertMemRefToSPIRVBase<ConvertMemRefToSPIRVPass> {
        -:   30:  void runOnOperation() override;
        -:   31:};
        -:   32:} // namespace
        -:   33:
function _ZN12_GLOBAL__N_124ConvertMemRefToSPIRVPass14runOnOperationEv called 541 returned 100% blocks executed 70%
      541:   34:void ConvertMemRefToSPIRVPass::runOnOperation() {
      541:   35:  MLIRContext *context = &getContext();
call    0 returned 100%
      541:   36:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   37:
      541:   38:  auto targetAttr = spirv::lookupTargetEnvOrDefault(op);
call    0 returned 100%
      541:   39:  std::unique_ptr<ConversionTarget> target =
     1082:   40:      SPIRVConversionTarget::get(targetAttr);
call    0 returned 100%
call    1 returned 100%
        -:   41:
      541:   42:  SPIRVConversionOptions options;
      541:   43:  options.boolNumBits = this->boolNumBits;
call    0 returned 100%
     1082:   44:  SPIRVTypeConverter typeConverter(targetAttr, options);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   45:
        -:   46:  // Use UnrealizedConversionCast as the bridge so that we don't need to pull in
        -:   47:  // patterns for other dialects.
     541*:   48:  auto addUnrealizedCast = [](OpBuilder &builder, Type type, ValueRange inputs,
        -:   49:                              Location loc) {
    #####:   50:    auto cast = builder.create<UnrealizedConversionCastOp>(loc, type, inputs);
call    0 never executed
    #####:   51:    return Optional<Value>(cast.getResult(0));
        -:   52:  };
      541:   53:  typeConverter.addSourceMaterialization(addUnrealizedCast);
call    0 returned 100%
      541:   54:  typeConverter.addTargetMaterialization(addUnrealizedCast);
call    0 returned 100%
      541:   55:  target->addLegalOp<UnrealizedConversionCastOp>();
call    0 returned 100%
        -:   56:
     1082:   57:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      541:   58:  populateMemRefToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
        -:   59:
      541:   60:  if (failed(applyPartialConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   61:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   62:}
        -:   63:
function _ZN4mlir30createConvertMemRefToSPIRVPassEv called 129284 returned 100% blocks executed 100%
   129284:   64:std::unique_ptr<OperationPass<>> mlir::createConvertMemRefToSPIRVPass() {
   129284:   65:  return std::make_unique<ConvertMemRefToSPIRVPass>();
call    0 returned 100%
        -:   66:}
