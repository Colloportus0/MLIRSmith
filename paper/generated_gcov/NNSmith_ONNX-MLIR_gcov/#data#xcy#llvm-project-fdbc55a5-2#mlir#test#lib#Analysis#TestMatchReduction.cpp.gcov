        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Analysis/TestMatchReduction.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMatchReduction.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMatchReduction.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestMatchReduction.cpp - Test the match reduction utility ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains a test pass for the match reduction utility.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Analysis/SliceAnalysis.h"
        -:   14:#include "mlir/IR/FunctionInterfaces.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:namespace {
        -:   20:
function _ZN12_GLOBAL__N_120printReductionResultEPN4mlir9OperationEjNS0_5ValueEN4llvm8ArrayRefIS2_EE called 0 returned 0% blocks executed 0%
    #####:   21:void printReductionResult(Operation *redRegionOp, unsigned numOutput,
        -:   22:                          Value reducedValue,
        -:   23:                          ArrayRef<Operation *> combinerOps) {
    #####:   24:  if (reducedValue) {
branch  0 never executed
branch  1 never executed
    #####:   25:    redRegionOp->emitRemark("Reduction found in output #") << numOutput << "!";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   26:    redRegionOp->emitRemark("Reduced Value: ") << reducedValue;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   27:    for (Operation *combOp : combinerOps)
branch  0 never executed
branch  1 never executed
    #####:   28:      redRegionOp->emitRemark("Combiner Op: ") << *combOp;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   29:
        -:   30:    return;
        -:   31:  }
        -:   32:
    #####:   33:  redRegionOp->emitRemark("Reduction NOT found in output #")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   34:      << numOutput << "!";
call    0 never executed
call    1 never executed
        -:   35:}
        -:   36:
  129239*:   37:struct TestMatchReductionPass
call    0 never executed
call    1 returned 100%
        -:   38:    : public PassWrapper<TestMatchReductionPass,
        -:   39:                         InterfacePass<FunctionOpInterface>> {
function _ZN12_GLOBAL__N_122TestMatchReductionPass13resolveTypeIDEv called 129239 returned 100% blocks executed 100%
   129239:   40:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMatchReductionPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   41:
function _ZNK12_GLOBAL__N_122TestMatchReductionPass11getArgumentEv called 128645 returned 100% blocks executed 100%
   128645:   42:  StringRef getArgument() const final { return "test-match-reduction"; }
function _ZNK12_GLOBAL__N_122TestMatchReductionPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   43:  StringRef getDescription() const final {
   128636:   44:    return "Test the match reduction utility.";
        -:   45:  }
        -:   46:
function _ZN12_GLOBAL__N_122TestMatchReductionPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   47:  void runOnOperation() override {
    #####:   48:    FunctionOpInterface func = getOperation();
call    0 never executed
    #####:   49:    func->emitRemark("Testing function");
call    0 never executed
call    1 never executed
call    2 never executed
        -:   50:
function _ZZN12_GLOBAL__N_122TestMatchReductionPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   51:    func.walk<WalkOrder::PreOrder>([](Operation *op) {
call    0 never executed
    #####:   52:      if (isa<FunctionOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:        return;
        -:   54:
        -:   55:      // Limit testing to ops with only one region.
    #####:   56:      if (op->getNumRegions() != 1)
branch  0 never executed
branch  1 never executed
        -:   57:        return;
        -:   58:
    #####:   59:      Region &region = op->getRegion(0);
call    0 never executed
    #####:   60:      if (!region.hasOneBlock())
branch  0 never executed
branch  1 never executed
        -:   61:        return;
        -:   62:
        -:   63:      // We expect all the tested region ops to have 1 input by default. The
        -:   64:      // remaining arguments are assumed to be outputs/reductions and there must
        -:   65:      // be at least one.
        -:   66:      // TODO: Extend it to support more generic cases.
    #####:   67:      Block &regionEntry = region.front();
call    0 never executed
    #####:   68:      auto args = regionEntry.getArguments();
branch  0 never executed
branch  1 never executed
    #####:   69:      if (args.size() < 2)
branch  0 never executed
branch  1 never executed
        -:   70:        return;
        -:   71:
    #####:   72:      auto outputs = args.drop_front();
call    0 never executed
    #####:   73:      for (int i = 0, size = outputs.size(); i < size; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   74:        SmallVector<Operation *, 4> combinerOps;
call    0 never executed
    #####:   75:        Value reducedValue = matchReduction(outputs, i, combinerOps);
call    0 never executed
    #####:   76:        printReductionResult(op, i, reducedValue, combinerOps);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   77:      }
        -:   78:    });
    #####:   79:  }
        -:   80:};
        -:   81:
        -:   82:} // namespace
        -:   83:
        -:   84:namespace mlir {
        -:   85:namespace test {
function _ZN4mlir4test30registerTestMatchReductionPassEv called 128636 returned 100% blocks executed 100%
   128636:   86:void registerTestMatchReductionPass() {
   128636:   87:  PassRegistration<TestMatchReductionPass>();
call    0 returned 100%
   128636:   88:}
        -:   89:} // namespace test
        -:   90:} // namespace mlir
