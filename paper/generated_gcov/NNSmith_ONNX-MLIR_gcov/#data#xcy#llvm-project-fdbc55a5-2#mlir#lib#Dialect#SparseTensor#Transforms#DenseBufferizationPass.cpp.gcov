        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SparseTensor/Transforms/DenseBufferizationPass.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/DenseBufferizationPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/DenseBufferizationPass.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- DenseBufferizationPass.cpp - Dense bufferization pass --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   12:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/SparseTensor/IR/SparseTensor.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:using namespace mlir::func;
        -:   19:
        -:   20:namespace mlir {
        -:   21:namespace sparse_tensor {
        -:   22:
        -:   23:/// Return `true` if one of the given types is a sparse tensor type.
function _ZN4mlir13sparse_tensorL20containsSparseTensorENS_9TypeRangeE called 0 returned 0% blocks executed 0%
    #####:   24:static bool containsSparseTensor(TypeRange types) {
    #####:   25:  for (Type t : types)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   26:    if (getSparseTensorEncoding(t))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   27:      return true;
    #####:   28:  return false;
        -:   29:}
        -:   30:
        -:   31:/// A pass that bufferizes only dense tensor ops and ignores all sparse tensor
        -:   32:/// ops. No buffer copies are inserted. All tensor OpOperands must be
        -:   33:/// inplacable.
        -:   34:class BufferizeDenseOpsPass
        -:   35:    : public PassWrapper<BufferizeDenseOpsPass, OperationPass<ModuleOp>> {
        -:   36:public:
function _ZN4mlir13sparse_tensor21BufferizeDenseOpsPassC2ERKNS_13bufferization27OneShotBufferizationOptionsE called 619 returned 100% blocks executed 100%
      619:   37:  BufferizeDenseOpsPass(
        -:   38:      const bufferization::OneShotBufferizationOptions &options)
      619:   39:      : options(options) {}
call    0 returned 100%
call    1 returned 100%
        -:   40:
function _ZN4mlir13sparse_tensor21BufferizeDenseOpsPass14runOnOperationEv called 507 returned 100% blocks executed 89%
      507:   41:  void runOnOperation() override {
        -:   42:    // Disallow all sparse tensor ops, so that only dense tensor ops are
        -:   43:    // bufferized.
      507:   44:    bufferization::OpFilter opFilter;
call    0 returned 100%
function _ZZN4mlir13sparse_tensor21BufferizeDenseOpsPass14runOnOperationEvENKUlPNS_9OperationEE_clES3_ called 0 returned 0% blocks executed 0%
     507*:   45:    opFilter.allowOperation([&](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:   46:      if (containsSparseTensor(TypeRange(op->getResults())) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   47:          containsSparseTensor(TypeRange(op->getOperands())))
call    0 never executed
call    1 never executed
    #####:   48:        return false;
    #####:   49:      if (auto funcOp = dyn_cast<func::FuncOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:        FunctionType funcType = funcOp.getFunctionType();
call    0 never executed
    #####:   51:        if (containsSparseTensor(funcType.getInputs()) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   52:            containsSparseTensor(funcType.getResults()))
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   53:          return false;
        -:   54:      }
    #####:   55:      return true;
        -:   56:    });
        -:   57:
      507:   58:    if (failed(bufferization::bufferizeOp(getOperation(), options,
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   59:                                          /*copyBeforeWrite=*/false,
        -:   60:                                          &opFilter)))
    #####:   61:      signalPassFailure();
call    0 never executed
      507:   62:  }
        -:   63:
        -:   64:private:
        -:   65:  bufferization::OneShotBufferizationOptions options;
        -:   66:};
        -:   67:} // namespace sparse_tensor
        -:   68:} // namespace mlir
        -:   69:
function _ZN4mlir28createDenseBufferizationPassERKNS_13bufferization27OneShotBufferizationOptionsE called 619 returned 100% blocks executed 100%
      619:   70:std::unique_ptr<Pass> mlir::createDenseBufferizationPass(
        -:   71:    const bufferization::OneShotBufferizationOptions &options) {
      619:   72:  return std::make_unique<mlir::sparse_tensor::BufferizeDenseOpsPass>(options);
call    0 returned 100%
        -:   73:}
