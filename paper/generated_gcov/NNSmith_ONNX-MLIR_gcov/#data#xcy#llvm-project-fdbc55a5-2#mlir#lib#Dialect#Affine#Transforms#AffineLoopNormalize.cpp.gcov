        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Transforms/AffineLoopNormalize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineLoopNormalize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineLoopNormalize.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- AffineLoopNormalize.cpp - AffineLoopNormalize Pass -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a normalizer for affine loop-like ops.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/Affine/Utils.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_AFFINELOOPNORMALIZE
        -:   21:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:
        -:   28:/// Normalize affine.parallel ops so that lower bounds are 0 and steps are 1.
        -:   29:/// As currently implemented, this pass cannot fail, but it might skip over ops
        -:   30:/// that are already in a normalized form.
   167413:   31:struct AffineLoopNormalizePass
call    0 returned 100%
call    1 returned 100%
        -:   32:    : public impl::AffineLoopNormalizeBase<AffineLoopNormalizePass> {
        -:   33:
function _ZN12_GLOBAL__N_123AffineLoopNormalizePass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   34:  void runOnOperation() override {
function _ZZN12_GLOBAL__N_123AffineLoopNormalizePass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   35:    getOperation().walk([](Operation *op) {
call    0 never executed
call    1 never executed
    #####:   36:      if (auto affineParallel = dyn_cast<AffineParallelOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   37:        normalizeAffineParallel(affineParallel);
call    0 never executed
    #####:   38:      else if (auto affineFor = dyn_cast<AffineForOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   39:        (void)normalizeAffineFor(affineFor);
call    0 never executed
    #####:   40:    });
    #####:   41:  }
        -:   42:};
        -:   43:
        -:   44:} // namespace
        -:   45:
        -:   46:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir29createAffineLoopNormalizePassEv called 129253 returned 100% blocks executed 100%
   129253:   47:mlir::createAffineLoopNormalizePass() {
   129253:   48:  return std::make_unique<AffineLoopNormalizePass>();
call    0 returned 100%
        -:   49:}
