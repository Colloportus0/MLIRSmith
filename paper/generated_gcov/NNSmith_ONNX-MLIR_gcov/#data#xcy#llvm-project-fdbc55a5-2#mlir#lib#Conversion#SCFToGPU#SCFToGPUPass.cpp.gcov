        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/SCFToGPU/SCFToGPUPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/SCFToGPU/CMakeFiles/obj.MLIRSCFToGPU.dir/SCFToGPUPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/SCFToGPU/CMakeFiles/obj.MLIRSCFToGPU.dir/SCFToGPUPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- SCFToGPUPass.cpp - Convert a loop nest to a GPU kernel -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/SCFToGPU/SCFToGPUPass.h"
        -:   10:
        -:   11:#include "mlir/Conversion/SCFToGPU/SCFToGPU.h"
        -:   12:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   13:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   14:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   15:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:#include "mlir/Transforms/DialectConversion.h"
        -:   19:#include "llvm/ADT/ArrayRef.h"
        -:   20:#include "llvm/Support/CommandLine.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:#define GEN_PASS_DEF_CONVERTAFFINEFORTOGPU
        -:   24:#define GEN_PASS_DEF_CONVERTPARALLELLOOPTOGPU
        -:   25:#include "mlir/Conversion/Passes.h.inc"
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:using namespace mlir::scf;
        -:   30:
        -:   31:namespace {
        -:   32:// A pass that traverses top-level loops in the function and converts them to
        -:   33:// GPU launch operations.  Nested launches are not allowed, so this does not
        -:   34:// walk the function recursively to avoid considering nested loops.
    #####:   35:struct ForLoopMapper : public impl::ConvertAffineForToGPUBase<ForLoopMapper> {
call    0 never executed
   129284:   36:  ForLoopMapper() = default;
call    0 returned 100%
function _ZN12_GLOBAL__N_113ForLoopMapperC2Ejj called 0 returned 0% blocks executed 0%
    #####:   37:  ForLoopMapper(unsigned numBlockDims, unsigned numThreadDims) {
call    0 never executed
    #####:   38:    this->numBlockDims = numBlockDims;
branch  0 never executed
branch  1 never executed
    #####:   39:    this->numThreadDims = numThreadDims;
branch  0 never executed
branch  1 never executed
    #####:   40:  }
        -:   41:
function _ZN12_GLOBAL__N_113ForLoopMapper14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   42:  void runOnOperation() override {
    #####:   43:    for (Operation &op : llvm::make_early_inc_range(
branch  0 never executed
branch  1 never executed
    #####:   44:             getOperation().getFunctionBody().getOps())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:   45:      if (auto forOp = dyn_cast<AffineForOp>(&op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:        if (failed(convertAffineLoopNestToGPULaunch(forOp, numBlockDims,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   47:                                                    numThreadDims)))
    #####:   48:          signalPassFailure();
call    0 never executed
        -:   49:      }
        -:   50:    }
    #####:   51:  }
        -:   52:};
        -:   53:
  129262*:   54:struct ParallelLoopToGpuPass
call    0 never executed
call    1 returned 100%
        -:   55:    : public impl::ConvertParallelLoopToGpuBase<ParallelLoopToGpuPass> {
function _ZN12_GLOBAL__N_121ParallelLoopToGpuPass14runOnOperationEv called 535 returned 100% blocks executed 86%
      535:   56:  void runOnOperation() override {
      535:   57:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      535:   58:    populateParallelLoopToGPUPatterns(patterns);
call    0 returned 100%
     1070:   59:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      535:   60:    target.markUnknownOpDynamicallyLegal([](Operation *) { return true; });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      535:   61:    configureParallelLoopToGPULegality(target);
call    0 returned 100%
      535:   62:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      535:   63:                                      std::move(patterns))))
call    0 returned 100%
    #####:   64:      signalPassFailure();
call    0 never executed
      535:   65:    finalizeParallelLoopToGPUConversion(getOperation());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
      535:   66:  }
        -:   67:};
        -:   68:
        -:   69:} // namespace
        -:   70:
        -:   71:std::unique_ptr<InterfacePass<FunctionOpInterface>>
function _ZN4mlir24createAffineForToGPUPassEjj called 0 returned 0% blocks executed 0%
    #####:   72:mlir::createAffineForToGPUPass(unsigned numBlockDims, unsigned numThreadDims) {
    #####:   73:  return std::make_unique<ForLoopMapper>(numBlockDims, numThreadDims);
call    0 never executed
        -:   74:}
        -:   75:std::unique_ptr<InterfacePass<FunctionOpInterface>>
function _ZN4mlir24createAffineForToGPUPassEv called 129284 returned 100% blocks executed 100%
   129284:   76:mlir::createAffineForToGPUPass() {
   129284:   77:  return std::make_unique<ForLoopMapper>();
call    0 returned 100%
        -:   78:}
        -:   79:
function _ZN4mlir27createParallelLoopToGpuPassEv called 129262 returned 100% blocks executed 100%
   129262:   80:std::unique_ptr<Pass> mlir::createParallelLoopToGpuPass() {
   129262:   81:  return std::make_unique<ParallelLoopToGpuPass>();
call    0 returned 100%
        -:   82:}
