        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Utils/StructuredOpsUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Utils/CMakeFiles/obj.MLIRDialectUtils.dir/StructuredOpsUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Utils/CMakeFiles/obj.MLIRDialectUtils.dir/StructuredOpsUtils.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- StructuredOpsUtils.cpp - Utilities used by structured ops ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Utils/StructuredOpsUtils.h"
        -:   10:#include "mlir/IR/AffineMap.h"
        -:   11:#include "mlir/IR/BuiltinAttributes.h"
        -:   12:
        -:   13:#include "mlir/Dialect/Utils/DialectUtilsEnums.cpp.inc"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
function _ZN4mlir16isRowMajorMatmulENS_9ArrayAttrE called 0 returned 0% blocks executed 0%
    #####:   17:bool mlir::isRowMajorMatmul(ArrayAttr indexingMaps) {
    #####:   18:  if (indexingMaps.size() != 3)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   19:    return false;
        -:   20:
    #####:   21:  auto map0 = indexingMaps[0].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   22:  auto map1 = indexingMaps[1].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   23:  auto map2 = indexingMaps[2].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   24:
    #####:   25:  if (map0.getNumResults() != 2 || map1.getNumResults() != 2 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   26:      map2.getNumResults() != 2 || map0.getNumInputs() != 3 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   27:      map1.getNumInputs() != 3 || map2.getNumInputs() != 3) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   28:    return false;
        -:   29:  }
        -:   30:
        -:   31:  // Extract dimensions for MxK * KxN -> MxN
    #####:   32:  AffineExpr m = map2.getResult(0);
call    0 never executed
    #####:   33:  AffineExpr n = map2.getResult(1);
call    0 never executed
    #####:   34:  AffineExpr k = map0.getResult(1);
call    0 never executed
    #####:   35:  auto *context = indexingMaps.getContext();
call    0 never executed
    #####:   36:  auto mapA = AffineMapAttr::get(AffineMap::get(3, 0, {m, k}, context));
call    0 never executed
call    1 never executed
    #####:   37:  auto mapB = AffineMapAttr::get(AffineMap::get(3, 0, {k, n}, context));
call    0 never executed
call    1 never executed
    #####:   38:  auto mapC = AffineMapAttr::get(AffineMap::get(3, 0, {m, n}, context));
call    0 never executed
call    1 never executed
    #####:   39:  auto maps = ArrayAttr::get(context, {mapA, mapB, mapC});
call    0 never executed
    #####:   40:  return indexingMaps == maps;
        -:   41:}
        -:   42:
function _ZN4mlir19isColumnMajorMatmulENS_9ArrayAttrE called 0 returned 0% blocks executed 0%
    #####:   43:bool mlir::isColumnMajorMatmul(ArrayAttr indexingMaps) {
    #####:   44:  if (indexingMaps.size() != 3)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   45:    return false;
        -:   46:
    #####:   47:  auto map0 = indexingMaps[0].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   48:  auto map1 = indexingMaps[1].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   49:  auto map2 = indexingMaps[2].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   50:
    #####:   51:  if (map0.getNumResults() != 2 || map1.getNumResults() != 2 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   52:      map2.getNumResults() != 2 || map0.getNumInputs() != 3 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   53:      map1.getNumInputs() != 3 || map2.getNumInputs() != 3) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   54:    return false;
        -:   55:  }
        -:   56:
        -:   57:  // Extract dimensions for KxM * NxK -> NxM
    #####:   58:  AffineExpr n = map2.getResult(0);
call    0 never executed
    #####:   59:  AffineExpr m = map2.getResult(1);
call    0 never executed
    #####:   60:  AffineExpr k = map0.getResult(0);
call    0 never executed
    #####:   61:  auto *context = indexingMaps.getContext();
call    0 never executed
    #####:   62:  auto mapA = AffineMapAttr::get(AffineMap::get(3, 0, {k, m}, context));
call    0 never executed
call    1 never executed
    #####:   63:  auto mapB = AffineMapAttr::get(AffineMap::get(3, 0, {n, k}, context));
call    0 never executed
call    1 never executed
    #####:   64:  auto mapC = AffineMapAttr::get(AffineMap::get(3, 0, {n, m}, context));
call    0 never executed
call    1 never executed
    #####:   65:  auto maps = ArrayAttr::get(context, {mapA, mapB, mapC});
call    0 never executed
    #####:   66:  return indexingMaps == maps;
        -:   67:}
        -:   68:
function _ZN4mlir21isRowMajorBatchMatmulENS_9ArrayAttrE called 0 returned 0% blocks executed 0%
    #####:   69:bool mlir::isRowMajorBatchMatmul(ArrayAttr indexingMaps) {
    #####:   70:  if (indexingMaps.size() != 3)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   71:    return false;
        -:   72:
    #####:   73:  auto map0 = indexingMaps[0].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   74:  auto map1 = indexingMaps[1].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   75:  auto map2 = indexingMaps[2].cast<AffineMapAttr>().getValue();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   76:
    #####:   77:  if (map0.getNumResults() != 3 || map1.getNumResults() != 3 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   78:      map2.getNumResults() != 3 || map0.getNumInputs() != 4 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   79:      map1.getNumInputs() != 4 || map2.getNumInputs() != 4) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   80:    return false;
        -:   81:  }
        -:   82:
        -:   83:  // Extract dimensions for BxMxK * BxKxN -> BxMxN
    #####:   84:  AffineExpr b = map2.getResult(0);
call    0 never executed
    #####:   85:  AffineExpr m = map2.getResult(1);
call    0 never executed
    #####:   86:  AffineExpr n = map2.getResult(2);
call    0 never executed
    #####:   87:  AffineExpr k = map0.getResult(2);
call    0 never executed
    #####:   88:  auto *context = indexingMaps.getContext();
call    0 never executed
    #####:   89:  auto mapA = AffineMapAttr::get(AffineMap::get(4, 0, {b, m, k}, context));
call    0 never executed
call    1 never executed
    #####:   90:  auto mapB = AffineMapAttr::get(AffineMap::get(4, 0, {b, k, n}, context));
call    0 never executed
call    1 never executed
    #####:   91:  auto mapC = AffineMapAttr::get(AffineMap::get(4, 0, {b, m, n}, context));
call    0 never executed
call    1 never executed
    #####:   92:  auto maps = ArrayAttr::get(context, {mapA, mapB, mapC});
call    0 never executed
    #####:   93:  return indexingMaps == maps;
        -:   94:}
