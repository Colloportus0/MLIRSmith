        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Arith/IR/InferIntRangeInterfaceImpls.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/IR/CMakeFiles/obj.MLIRArithDialect.dir/InferIntRangeInterfaceImpls.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/IR/CMakeFiles/obj.MLIRArithDialect.dir/InferIntRangeInterfaceImpls.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- InferIntRangeInterfaceImpls.cpp - Integer range impls for arith -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/Interfaces/InferIntRangeInterface.h"
        -:   11:
        -:   12:#include "llvm/Support/Debug.h"
        -:   13:
        -:   14:#define DEBUG_TYPE "int-range-analysis"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::arith;
        -:   18:
        -:   19:/// Function that evaluates the result of doing something on arithmetic
        -:   20:/// constants and returns None on overflow.
        -:   21:using ConstArithFn =
        -:   22:    function_ref<Optional<APInt>(const APInt &, const APInt &)>;
        -:   23:
        -:   24:/// Return the maxmially wide signed or unsigned range for a given bitwidth.
        -:   25:
        -:   26:/// Compute op(minLeft, minRight) and op(maxLeft, maxRight) if possible,
        -:   27:/// If either computation overflows, make the result unbounded.
function _ZL15computeBoundsByN4llvm12function_refIFNS_8OptionalINS_5APIntEEERKS2_S5_EEES5_S5_S5_S5_b called 0 returned 0% blocks executed 0%
    #####:   28:static ConstantIntRanges computeBoundsBy(ConstArithFn op, const APInt &minLeft,
        -:   29:                                         const APInt &minRight,
        -:   30:                                         const APInt &maxLeft,
        -:   31:                                         const APInt &maxRight, bool isSigned) {
    #####:   32:  Optional<APInt> maybeMin = op(minLeft, minRight);
call    0 never executed
    #####:   33:  Optional<APInt> maybeMax = op(maxLeft, maxRight);
call    0 never executed
call    1 never executed
    #####:   34:  if (maybeMin && maybeMax)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   35:    return ConstantIntRanges::range(*maybeMin, *maybeMax, isSigned);
call    0 never executed
    #####:   36:  return ConstantIntRanges::maxRange(minLeft.getBitWidth());
call    0 never executed
        -:   37:}
        -:   38:
        -:   39:/// Compute the minimum and maximum of `(op(l, r) for l in lhs for r in rhs)`,
        -:   40:/// ignoring unbounded values. Returns the maximal range if `op` overflows.
function _ZL8minMaxByN4llvm12function_refIFNS_8OptionalINS_5APIntEEERKS2_S5_EEENS_8ArrayRefIS2_EES9_b called 0 returned 0% blocks executed 0%
    #####:   41:static ConstantIntRanges minMaxBy(ConstArithFn op, ArrayRef<APInt> lhs,
        -:   42:                                  ArrayRef<APInt> rhs, bool isSigned) {
    #####:   43:  unsigned width = lhs[0].getBitWidth();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   44:  APInt min =
    #####:   45:      isSigned ? APInt::getSignedMaxValue(width) : APInt::getMaxValue(width);
branch  0 never executed
branch  1 never executed
    #####:   46:  APInt max =
    #####:   47:      isSigned ? APInt::getSignedMinValue(width) : APInt::getZero(width);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   48:  for (const APInt &left : lhs) {
branch  0 never executed
branch  1 never executed
    #####:   49:    for (const APInt &right : rhs) {
branch  0 never executed
branch  1 never executed
    #####:   50:      Optional<APInt> maybeThisResult = op(left, right);
call    0 never executed
    #####:   51:      if (!maybeThisResult)
branch  0 never executed
branch  1 never executed
    #####:   52:        return ConstantIntRanges::maxRange(width);
call    0 never executed
call    1 never executed
    #####:   53:      APInt result = std::move(*maybeThisResult);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   54:      min = (isSigned ? result.slt(min) : result.ult(min)) ? result : min;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:      max = (isSigned ? result.sgt(max) : result.ugt(max)) ? result : max;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   56:    }
        -:   57:  }
    #####:   58:  return ConstantIntRanges::range(min, max, isSigned);
call    0 never executed
        -:   59:}
        -:   60:
        -:   61://===----------------------------------------------------------------------===//
        -:   62:// ConstantOp
        -:   63://===----------------------------------------------------------------------===//
        -:   64:
function _ZN4mlir5arith10ConstantOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:   65:void arith::ConstantOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:   66:                                          SetIntRangeFn setResultRange) {
    #####:   67:  auto constAttr = getValue().dyn_cast_or_null<IntegerAttr>();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:  if (constAttr) {
branch  0 never executed
branch  1 never executed
    #####:   69:    const APInt &value = constAttr.getValue();
call    0 never executed
    #####:   70:    setResultRange(getResult(), ConstantIntRanges::constant(value));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   71:  }
    #####:   72:}
        -:   73:
        -:   74://===----------------------------------------------------------------------===//
        -:   75:// AddIOp
        -:   76://===----------------------------------------------------------------------===//
        -:   77:
function _ZN4mlir5arith6AddIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:   78:void arith::AddIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:   79:                                      SetIntRangeFn setResultRange) {
    #####:   80:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
function _ZZN4mlir5arith6AddIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   81:  ConstArithFn uadd = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:   82:    bool overflowed = false;
    #####:   83:    APInt result = a.uadd_ov(b, overflowed);
call    0 never executed
    #####:   84:    return overflowed ? Optional<APInt>() : result;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   85:  };
call    0 never executed
function _ZZN4mlir5arith6AddIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E0_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   86:  ConstArithFn sadd = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:   87:    bool overflowed = false;
    #####:   88:    APInt result = a.sadd_ov(b, overflowed);
call    0 never executed
    #####:   89:    return overflowed ? Optional<APInt>() : result;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   90:  };
        -:   91:
    #####:   92:  ConstantIntRanges urange = computeBoundsBy(
    #####:   93:      uadd, lhs.umin(), rhs.umin(), lhs.umax(), rhs.umax(), /*isSigned=*/false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   94:  ConstantIntRanges srange = computeBoundsBy(
    #####:   95:      sadd, lhs.smin(), rhs.smin(), lhs.smax(), rhs.smax(), /*isSigned=*/true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   96:  setResultRange(getResult(), urange.intersection(srange));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   97:}
        -:   98:
        -:   99://===----------------------------------------------------------------------===//
        -:  100:// SubIOp
        -:  101://===----------------------------------------------------------------------===//
        -:  102:
function _ZN4mlir5arith6SubIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  103:void arith::SubIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  104:                                      SetIntRangeFn setResultRange) {
    #####:  105:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  106:
function _ZZN4mlir5arith6SubIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  107:  ConstArithFn usub = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  108:    bool overflowed = false;
    #####:  109:    APInt result = a.usub_ov(b, overflowed);
call    0 never executed
    #####:  110:    return overflowed ? Optional<APInt>() : result;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  111:  };
call    0 never executed
function _ZZN4mlir5arith6SubIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E0_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  112:  ConstArithFn ssub = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  113:    bool overflowed = false;
    #####:  114:    APInt result = a.ssub_ov(b, overflowed);
call    0 never executed
    #####:  115:    return overflowed ? Optional<APInt>() : result;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  116:  };
    #####:  117:  ConstantIntRanges urange = computeBoundsBy(
    #####:  118:      usub, lhs.umin(), rhs.umax(), lhs.umax(), rhs.umin(), /*isSigned=*/false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  119:  ConstantIntRanges srange = computeBoundsBy(
    #####:  120:      ssub, lhs.smin(), rhs.smax(), lhs.smax(), rhs.smin(), /*isSigned=*/true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  121:  setResultRange(getResult(), urange.intersection(srange));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  122:}
        -:  123:
        -:  124://===----------------------------------------------------------------------===//
        -:  125:// MulIOp
        -:  126://===----------------------------------------------------------------------===//
        -:  127:
function _ZN4mlir5arith6MulIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  128:void arith::MulIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  129:                                      SetIntRangeFn setResultRange) {
    #####:  130:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  131:
function _ZZN4mlir5arith6MulIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  132:  ConstArithFn umul = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  133:    bool overflowed = false;
    #####:  134:    APInt result = a.umul_ov(b, overflowed);
call    0 never executed
    #####:  135:    return overflowed ? Optional<APInt>() : result;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  136:  };
call    0 never executed
function _ZZN4mlir5arith6MulIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E0_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  137:  ConstArithFn smul = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  138:    bool overflowed = false;
    #####:  139:    APInt result = a.smul_ov(b, overflowed);
call    0 never executed
    #####:  140:    return overflowed ? Optional<APInt>() : result;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  141:  };
        -:  142:
    #####:  143:  ConstantIntRanges urange =
        -:  144:      minMaxBy(umul, {lhs.umin(), lhs.umax()}, {rhs.umin(), rhs.umax()},
    #####:  145:               /*isSigned=*/false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
    #####:  146:  ConstantIntRanges srange =
        -:  147:      minMaxBy(smul, {lhs.smin(), lhs.smax()}, {rhs.smin(), rhs.smax()},
    #####:  148:               /*isSigned=*/true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
        -:  149:
    #####:  150:  setResultRange(getResult(), urange.intersection(srange));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  151:}
        -:  152:
        -:  153://===----------------------------------------------------------------------===//
        -:  154:// DivUIOp
        -:  155://===----------------------------------------------------------------------===//
        -:  156:
        -:  157:/// Fix up division results (ex. for ceiling and floor), returning an APInt
        -:  158:/// if there has been no overflow
        -:  159:using DivisionFixupFn = function_ref<Optional<APInt>(
        -:  160:    const APInt &lhs, const APInt &rhs, const APInt &result)>;
        -:  161:
function _ZL15inferDivUIRangeRKN4mlir17ConstantIntRangesES2_N4llvm12function_refIFNS3_8OptionalINS3_5APIntEEERKS6_S9_S9_EEE called 0 returned 0% blocks executed 0%
    #####:  162:static ConstantIntRanges inferDivUIRange(const ConstantIntRanges &lhs,
        -:  163:                                         const ConstantIntRanges &rhs,
        -:  164:                                         DivisionFixupFn fixup) {
    #####:  165:  const APInt &lhsMin = lhs.umin(), &lhsMax = lhs.umax(), &rhsMin = rhs.umin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  166:              &rhsMax = rhs.umax();
call    0 never executed
        -:  167:
    #####:  168:  if (!rhsMin.isZero()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
function _ZZL15inferDivUIRangeRKN4mlir17ConstantIntRangesES2_N4llvm12function_refIFNS3_8OptionalINS3_5APIntEEERKS6_S9_S9_EEEENKUlS9_S9_E_clES9_S9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  169:    auto udiv = [&fixup](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  170:      return fixup(a, b, a.udiv(b));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  171:    };
    #####:  172:    return minMaxBy(udiv, {lhsMin, lhsMax}, {rhsMin, rhsMax},
branch  0 never executed
branch  1 never executed
    #####:  173:                    /*isSigned=*/false);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
        -:  174:  }
        -:  175:  // Otherwise, it's possible we might divide by 0.
    #####:  176:  return ConstantIntRanges::maxRange(rhsMin.getBitWidth());
call    0 never executed
        -:  177:}
        -:  178:
function _ZN4mlir5arith7DivUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  179:void arith::DivUIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  180:                                       SetIntRangeFn setResultRange) {
    #####:  181:  setResultRange(getResult(),
call    0 never executed
call    1 never executed
    #####:  182:                 inferDivUIRange(argRanges[0], argRanges[1],
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  183:                                 [](const APInt &lhs, const APInt &rhs,
    #####:  184:                                    const APInt &result) { return result; }));
branch  0 never executed
branch  1 never executed
    #####:  185:}
        -:  186:
        -:  187://===----------------------------------------------------------------------===//
        -:  188:// DivSIOp
        -:  189://===----------------------------------------------------------------------===//
        -:  190:
function _ZL15inferDivSIRangeRKN4mlir17ConstantIntRangesES2_N4llvm12function_refIFNS3_8OptionalINS3_5APIntEEERKS6_S9_S9_EEE called 0 returned 0% blocks executed 0%
    #####:  191:static ConstantIntRanges inferDivSIRange(const ConstantIntRanges &lhs,
        -:  192:                                         const ConstantIntRanges &rhs,
        -:  193:                                         DivisionFixupFn fixup) {
    #####:  194:  const APInt &lhsMin = lhs.smin(), &lhsMax = lhs.smax(), &rhsMin = rhs.smin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  195:              &rhsMax = rhs.smax();
call    0 never executed
    #####:  196:  bool canDivide = rhsMin.isStrictlyPositive() || rhsMax.isNegative();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  197:
    #####:  198:  if (canDivide) {
function _ZZL15inferDivSIRangeRKN4mlir17ConstantIntRangesES2_N4llvm12function_refIFNS3_8OptionalINS3_5APIntEEERKS6_S9_S9_EEEENKUlS9_S9_E_clES9_S9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  199:    auto sdiv = [&fixup](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  200:      bool overflowed = false;
    #####:  201:      APInt result = a.sdiv_ov(b, overflowed);
call    0 never executed
    #####:  202:      return overflowed ? Optional<APInt>() : fixup(a, b, result);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  203:    };
    #####:  204:    return minMaxBy(sdiv, {lhsMin, lhsMax}, {rhsMin, rhsMax},
branch  0 never executed
branch  1 never executed
    #####:  205:                    /*isSigned=*/true);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
        -:  206:  }
    #####:  207:  return ConstantIntRanges::maxRange(rhsMin.getBitWidth());
call    0 never executed
        -:  208:}
        -:  209:
function _ZN4mlir5arith7DivSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  210:void arith::DivSIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  211:                                       SetIntRangeFn setResultRange) {
    #####:  212:  setResultRange(getResult(),
call    0 never executed
call    1 never executed
    #####:  213:                 inferDivSIRange(argRanges[0], argRanges[1],
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  214:                                 [](const APInt &lhs, const APInt &rhs,
    #####:  215:                                    const APInt &result) { return result; }));
branch  0 never executed
branch  1 never executed
    #####:  216:}
        -:  217:
        -:  218://===----------------------------------------------------------------------===//
        -:  219:// CeilDivUIOp
        -:  220://===----------------------------------------------------------------------===//
        -:  221:
function _ZN4mlir5arith11CeilDivUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  222:void arith::CeilDivUIOp::inferResultRanges(
        -:  223:    ArrayRef<ConstantIntRanges> argRanges, SetIntRangeFn setResultRange) {
    #####:  224:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  225:
function _ZZN4mlir5arith11CeilDivUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_SE_E_clESE_SE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  226:  DivisionFixupFn ceilDivUIFix = [](const APInt &lhs, const APInt &rhs,
        -:  227:                                    const APInt &result) -> Optional<APInt> {
    #####:  228:    if (!lhs.urem(rhs).isZero()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  229:      bool overflowed = false;
    #####:  230:      APInt corrected =
    #####:  231:          result.uadd_ov(APInt(result.getBitWidth(), 1), overflowed);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  232:      return overflowed ? Optional<APInt>() : corrected;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  233:    }
    #####:  234:    return result;
branch  0 never executed
branch  1 never executed
    #####:  235:  };
call    0 never executed
    #####:  236:  setResultRange(getResult(), inferDivUIRange(lhs, rhs, ceilDivUIFix));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  237:}
        -:  238:
        -:  239://===----------------------------------------------------------------------===//
        -:  240:// CeilDivSIOp
        -:  241://===----------------------------------------------------------------------===//
        -:  242:
function _ZN4mlir5arith11CeilDivSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  243:void arith::CeilDivSIOp::inferResultRanges(
        -:  244:    ArrayRef<ConstantIntRanges> argRanges, SetIntRangeFn setResultRange) {
    #####:  245:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  246:
function _ZZN4mlir5arith11CeilDivSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_SE_E_clESE_SE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  247:  DivisionFixupFn ceilDivSIFix = [](const APInt &lhs, const APInt &rhs,
        -:  248:                                    const APInt &result) -> Optional<APInt> {
    #####:  249:    if (!lhs.srem(rhs).isZero() && lhs.isNonNegative() == rhs.isNonNegative()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  250:      bool overflowed = false;
    #####:  251:      APInt corrected =
    #####:  252:          result.sadd_ov(APInt(result.getBitWidth(), 1), overflowed);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  253:      return overflowed ? Optional<APInt>() : corrected;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    }
    #####:  255:    return result;
branch  0 never executed
branch  1 never executed
    #####:  256:  };
call    0 never executed
    #####:  257:  setResultRange(getResult(), inferDivSIRange(lhs, rhs, ceilDivSIFix));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  258:}
        -:  259:
        -:  260://===----------------------------------------------------------------------===//
        -:  261:// FloorDivSIOp
        -:  262://===----------------------------------------------------------------------===//
        -:  263:
function _ZN4mlir5arith12FloorDivSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  264:void arith::FloorDivSIOp::inferResultRanges(
        -:  265:    ArrayRef<ConstantIntRanges> argRanges, SetIntRangeFn setResultRange) {
    #####:  266:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  267:
function _ZZN4mlir5arith12FloorDivSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_SE_E_clESE_SE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  268:  DivisionFixupFn floorDivSIFix = [](const APInt &lhs, const APInt &rhs,
        -:  269:                                     const APInt &result) -> Optional<APInt> {
    #####:  270:    if (!lhs.srem(rhs).isZero() && lhs.isNonNegative() != rhs.isNonNegative()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  271:      bool overflowed = false;
    #####:  272:      APInt corrected =
    #####:  273:          result.ssub_ov(APInt(result.getBitWidth(), 1), overflowed);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  274:      return overflowed ? Optional<APInt>() : corrected;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  275:    }
    #####:  276:    return result;
branch  0 never executed
branch  1 never executed
    #####:  277:  };
call    0 never executed
    #####:  278:  setResultRange(getResult(), inferDivSIRange(lhs, rhs, floorDivSIFix));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  279:}
        -:  280:
        -:  281://===----------------------------------------------------------------------===//
        -:  282:// RemUIOp
        -:  283://===----------------------------------------------------------------------===//
        -:  284:
function _ZN4mlir5arith7RemUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  285:void arith::RemUIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  286:                                       SetIntRangeFn setResultRange) {
    #####:  287:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  288:  const APInt &rhsMin = rhs.umin(), &rhsMax = rhs.umax();
call    0 never executed
call    1 never executed
        -:  289:
    #####:  290:  unsigned width = rhsMin.getBitWidth();
call    0 never executed
    #####:  291:  APInt umin = APInt::getZero(width);
call    0 never executed
    #####:  292:  APInt umax = APInt::getMaxValue(width);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:
    #####:  294:  if (!rhsMin.isZero()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  295:    umax = rhsMax - 1;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  296:    // Special case: sweeping out a contiguous range in N/[modulus]
    #####:  297:    if (rhsMin == rhsMax) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  298:      const APInt &lhsMin = lhs.umin(), &lhsMax = lhs.umax();
call    0 never executed
call    1 never executed
    #####:  299:      if ((lhsMax - lhsMin).ult(rhsMax)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  300:        APInt minRem = lhsMin.urem(rhsMax);
call    0 never executed
    #####:  301:        APInt maxRem = lhsMax.urem(rhsMax);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  302:        if (minRem.ule(maxRem)) {
branch  0 never executed
branch  1 never executed
    #####:  303:          umin = minRem;
branch  0 never executed
branch  1 never executed
    #####:  304:          umax = maxRem;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  305:        }
        -:  306:      }
        -:  307:    }
        -:  308:  }
    #####:  309:  setResultRange(getResult(), ConstantIntRanges::fromUnsigned(umin, umax));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  310:}
        -:  311:
        -:  312://===----------------------------------------------------------------------===//
        -:  313:// RemSIOp
        -:  314://===----------------------------------------------------------------------===//
        -:  315:
function _ZN4mlir5arith7RemSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  316:void arith::RemSIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  317:                                       SetIntRangeFn setResultRange) {
    #####:  318:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  319:  const APInt &lhsMin = lhs.smin(), &lhsMax = lhs.smax(), &rhsMin = rhs.smin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  320:              &rhsMax = rhs.smax();
call    0 never executed
        -:  321:
    #####:  322:  unsigned width = rhsMax.getBitWidth();
call    0 never executed
    #####:  323:  APInt smin = APInt::getSignedMinValue(width);
call    0 never executed
    #####:  324:  APInt smax = APInt::getSignedMaxValue(width);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  325:  // No bounds if zero could be a divisor.
    #####:  326:  bool canBound = (rhsMin.isStrictlyPositive() || rhsMax.isNegative());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  327:  if (canBound) {
    #####:  328:    APInt maxDivisor = rhsMin.isStrictlyPositive() ? rhsMax : rhsMin.abs();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  329:    bool canNegativeDividend = lhsMin.isNegative();
call    0 never executed
    #####:  330:    bool canPositiveDividend = lhsMax.isStrictlyPositive();
call    0 never executed
    #####:  331:    APInt zero = APInt::getZero(maxDivisor.getBitWidth());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  332:    APInt maxPositiveResult = maxDivisor - 1;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  333:    APInt minNegativeResult = -maxPositiveResult;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  334:    smin = canNegativeDividend ? minNegativeResult : zero;
branch  0 never executed
branch  1 never executed
    #####:  335:    smax = canPositiveDividend ? maxPositiveResult : zero;
branch  0 never executed
branch  1 never executed
        -:  336:    // Special case: sweeping out a contiguous range in N/[modulus].
    #####:  337:    if (rhsMin == rhsMax) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  338:      if ((lhsMax - lhsMin).ult(maxDivisor)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  339:        APInt minRem = lhsMin.srem(maxDivisor);
call    0 never executed
    #####:  340:        APInt maxRem = lhsMax.srem(maxDivisor);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  341:        if (minRem.sle(maxRem)) {
branch  0 never executed
branch  1 never executed
    #####:  342:          smin = minRem;
branch  0 never executed
branch  1 never executed
    #####:  343:          smax = maxRem;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  344:        }
        -:  345:      }
        -:  346:    }
        -:  347:  }
    #####:  348:  setResultRange(getResult(), ConstantIntRanges::fromSigned(smin, smax));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  349:}
        -:  350:
        -:  351://===----------------------------------------------------------------------===//
        -:  352:// AndIOp
        -:  353://===----------------------------------------------------------------------===//
        -:  354:
        -:  355:/// "Widen" bounds - if 0bvvvvv??? <= a <= 0bvvvvv???,
        -:  356:/// relax the bounds to 0bvvvvv000 <= a <= 0bvvvvv111, where vvvvv are the bits
        -:  357:/// that both bonuds have in common. This gives us a consertive approximation
        -:  358:/// for what values can be passed to bitwise operations.
        -:  359:static std::tuple<APInt, APInt>
function _ZL18widenBitwiseBoundsRKN4mlir17ConstantIntRangesE called 0 returned 0% blocks executed 0%
    #####:  360:widenBitwiseBounds(const ConstantIntRanges &bound) {
    #####:  361:  APInt leftVal = bound.umin(), rightVal = bound.umax();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  362:  unsigned bitwidth = leftVal.getBitWidth();
branch  0 never executed
branch  1 never executed
    #####:  363:  unsigned differingBits = bitwidth - (leftVal ^ rightVal).countLeadingZeros();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  364:  leftVal.clearLowBits(differingBits);
call    0 never executed
    #####:  365:  rightVal.setLowBits(differingBits);
call    0 never executed
    #####:  366:  return std::make_tuple(std::move(leftVal), std::move(rightVal));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  367:}
        -:  368:
function _ZN4mlir5arith6AndIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  369:void arith::AndIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  370:                                      SetIntRangeFn setResultRange) {
    #####:  371:  auto [lhsZeros, lhsOnes] = widenBitwiseBounds(argRanges[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  372:  auto [rhsZeros, rhsOnes] = widenBitwiseBounds(argRanges[1]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
function _ZZN4mlir5arith6AndIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  373:  auto andi = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  374:    return a & b;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  375:  };
    #####:  376:  setResultRange(getResult(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  377:                 minMaxBy(andi, {lhsZeros, lhsOnes}, {rhsZeros, rhsOnes},
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####:  378:                          /*isSigned=*/false));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  379:}
        -:  380:
        -:  381://===----------------------------------------------------------------------===//
        -:  382:// OrIOp
        -:  383://===----------------------------------------------------------------------===//
        -:  384:
function _ZN4mlir5arith5OrIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  385:void arith::OrIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  386:                                     SetIntRangeFn setResultRange) {
    #####:  387:  auto [lhsZeros, lhsOnes] = widenBitwiseBounds(argRanges[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  388:  auto [rhsZeros, rhsOnes] = widenBitwiseBounds(argRanges[1]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
function _ZZN4mlir5arith5OrIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  389:  auto ori = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  390:    return a | b;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  391:  };
    #####:  392:  setResultRange(getResult(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  393:                 minMaxBy(ori, {lhsZeros, lhsOnes}, {rhsZeros, rhsOnes},
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####:  394:                          /*isSigned=*/false));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  395:}
        -:  396:
        -:  397://===----------------------------------------------------------------------===//
        -:  398:// XOrIOp
        -:  399://===----------------------------------------------------------------------===//
        -:  400:
function _ZN4mlir5arith6XOrIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  401:void arith::XOrIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  402:                                      SetIntRangeFn setResultRange) {
    #####:  403:  auto [lhsZeros, lhsOnes] = widenBitwiseBounds(argRanges[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  404:  auto [rhsZeros, rhsOnes] = widenBitwiseBounds(argRanges[1]);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
function _ZZN4mlir5arith6XOrIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  405:  auto xori = [](const APInt &a, const APInt &b) -> Optional<APInt> {
    #####:  406:    return a ^ b;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  407:  };
    #####:  408:  setResultRange(getResult(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  409:                 minMaxBy(xori, {lhsZeros, lhsOnes}, {rhsZeros, rhsOnes},
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####:  410:                          /*isSigned=*/false));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  411:}
        -:  412:
        -:  413://===----------------------------------------------------------------------===//
        -:  414:// MaxSIOp
        -:  415://===----------------------------------------------------------------------===//
        -:  416:
function _ZN4mlir5arith7MaxSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  417:void arith::MaxSIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  418:                                       SetIntRangeFn setResultRange) {
    #####:  419:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  420:
    #####:  421:  const APInt &smin = lhs.smin().sgt(rhs.smin()) ? lhs.smin() : rhs.smin();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  422:  const APInt &smax = lhs.smax().sgt(rhs.smax()) ? lhs.smax() : rhs.smax();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  423:  setResultRange(getResult(), ConstantIntRanges::fromSigned(smin, smax));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  424:}
        -:  425:
        -:  426://===----------------------------------------------------------------------===//
        -:  427:// MaxUIOp
        -:  428://===----------------------------------------------------------------------===//
        -:  429:
function _ZN4mlir5arith7MaxUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  430:void arith::MaxUIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  431:                                       SetIntRangeFn setResultRange) {
    #####:  432:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  433:
    #####:  434:  const APInt &umin = lhs.umin().ugt(rhs.umin()) ? lhs.umin() : rhs.umin();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  435:  const APInt &umax = lhs.umax().ugt(rhs.umax()) ? lhs.umax() : rhs.umax();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  436:  setResultRange(getResult(), ConstantIntRanges::fromUnsigned(umin, umax));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  437:}
        -:  438:
        -:  439://===----------------------------------------------------------------------===//
        -:  440:// MinSIOp
        -:  441://===----------------------------------------------------------------------===//
        -:  442:
function _ZN4mlir5arith7MinSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  443:void arith::MinSIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  444:                                       SetIntRangeFn setResultRange) {
    #####:  445:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  446:
    #####:  447:  const APInt &smin = lhs.smin().slt(rhs.smin()) ? lhs.smin() : rhs.smin();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  448:  const APInt &smax = lhs.smax().slt(rhs.smax()) ? lhs.smax() : rhs.smax();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  449:  setResultRange(getResult(), ConstantIntRanges::fromSigned(smin, smax));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  450:}
        -:  451:
        -:  452://===----------------------------------------------------------------------===//
        -:  453:// MinUIOp
        -:  454://===----------------------------------------------------------------------===//
        -:  455:
function _ZN4mlir5arith7MinUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  456:void arith::MinUIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  457:                                       SetIntRangeFn setResultRange) {
    #####:  458:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  459:
    #####:  460:  const APInt &umin = lhs.umin().ult(rhs.umin()) ? lhs.umin() : rhs.umin();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  461:  const APInt &umax = lhs.umax().ult(rhs.umax()) ? lhs.umax() : rhs.umax();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  462:  setResultRange(getResult(), ConstantIntRanges::fromUnsigned(umin, umax));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  463:}
        -:  464:
        -:  465://===----------------------------------------------------------------------===//
        -:  466:// ExtUIOp
        -:  467://===----------------------------------------------------------------------===//
        -:  468:
function _ZL10extUIRangeRKN4mlir17ConstantIntRangesENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  469:static ConstantIntRanges extUIRange(const ConstantIntRanges &range,
        -:  470:                                    Type destType) {
    #####:  471:  unsigned destWidth = ConstantIntRanges::getStorageBitwidth(destType);
call    0 never executed
    #####:  472:  APInt smin = range.umin().zext(destWidth);
call    0 never executed
call    1 never executed
    #####:  473:  APInt smax = range.umax().zext(destWidth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  474:  return ConstantIntRanges::fromSigned(smin, smax);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  475:}
        -:  476:
function _ZN4mlir5arith7ExtUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  477:void arith::ExtUIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  478:                                       SetIntRangeFn setResultRange) {
    #####:  479:  Type destType = getResult().getType();
branch  0 never executed
branch  1 never executed
    #####:  480:  setResultRange(getResult(), extUIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  481:}
        -:  482:
        -:  483://===----------------------------------------------------------------------===//
        -:  484:// ExtSIOp
        -:  485://===----------------------------------------------------------------------===//
        -:  486:
function _ZL10extSIRangeRKN4mlir17ConstantIntRangesENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  487:static ConstantIntRanges extSIRange(const ConstantIntRanges &range,
        -:  488:                                    Type destType) {
    #####:  489:  unsigned destWidth = ConstantIntRanges::getStorageBitwidth(destType);
call    0 never executed
    #####:  490:  APInt smin = range.smin().sext(destWidth);
call    0 never executed
call    1 never executed
    #####:  491:  APInt smax = range.smax().sext(destWidth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  492:  return ConstantIntRanges::fromSigned(smin, smax);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  493:}
        -:  494:
function _ZN4mlir5arith7ExtSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  495:void arith::ExtSIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  496:                                       SetIntRangeFn setResultRange) {
    #####:  497:  Type destType = getResult().getType();
branch  0 never executed
branch  1 never executed
    #####:  498:  setResultRange(getResult(), extSIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  499:}
        -:  500:
        -:  501://===----------------------------------------------------------------------===//
        -:  502:// TruncIOp
        -:  503://===----------------------------------------------------------------------===//
        -:  504:
function _ZL11truncIRangeRKN4mlir17ConstantIntRangesENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  505:static ConstantIntRanges truncIRange(const ConstantIntRanges &range,
        -:  506:                                     Type destType) {
    #####:  507:  unsigned destWidth = ConstantIntRanges::getStorageBitwidth(destType);
call    0 never executed
        -:  508:  // If you truncate the first four bytes in [0xaaaabbbb, 0xccccbbbb],
        -:  509:  // the range of the resulting value is not contiguous ind includes 0.
        -:  510:  // Ex. If you truncate [256, 258] from i16 to i8, you validly get [0, 2],
        -:  511:  // but you can't truncate [255, 257] similarly.
    #####:  512:  bool hasUnsignedRollover =
    #####:  513:      range.umin().lshr(destWidth) != range.umax().lshr(destWidth);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  514:  APInt umin = hasUnsignedRollover ? APInt::getZero(destWidth)
    #####:  515:                                   : range.umin().trunc(destWidth);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  516:  APInt umax = hasUnsignedRollover ? APInt::getMaxValue(destWidth)
    #####:  517:                                   : range.umax().trunc(destWidth);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  518:
        -:  519:  // Signed post-truncation rollover will not occur when either:
        -:  520:  // - The high parts of the min and max, plus the sign bit, are the same
        -:  521:  // - The high halves + sign bit of the min and max are either all 1s or all 0s
        -:  522:  //  and you won't create a [positive, negative] range by truncating.
        -:  523:  // For example, you can truncate the ranges [256, 258]_i16 to [0, 2]_i8
        -:  524:  // but not [255, 257]_i16 to a range of i8s. You can also truncate
        -:  525:  // [-256, -256]_i16 to [-2, 0]_i8, but not [-257, -255]_i16.
        -:  526:  // You can also truncate [-130, 0]_i16 to i8 because -130_i16 (0xff7e)
        -:  527:  // will truncate to 0x7e, which is greater than 0
    #####:  528:  APInt sminHighPart = range.smin().ashr(destWidth - 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  529:  APInt smaxHighPart = range.smax().ashr(destWidth - 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  530:  bool hasSignedOverflow =
call    0 never executed
    #####:  531:      (sminHighPart != smaxHighPart) &&
    #####:  532:      !(sminHighPart.isAllOnes() &&
branch  0 never executed
branch  1 never executed
    #####:  533:        (smaxHighPart.isAllOnes() || smaxHighPart.isZero())) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  534:      !(sminHighPart.isZero() && smaxHighPart.isZero());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  535:  APInt smin = hasSignedOverflow ? APInt::getSignedMinValue(destWidth)
    #####:  536:                                 : range.smin().trunc(destWidth);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  537:  APInt smax = hasSignedOverflow ? APInt::getSignedMaxValue(destWidth)
    #####:  538:                                 : range.smax().trunc(destWidth);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  539:  return {umin, umax, smin, smax};
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  540:}
        -:  541:
function _ZN4mlir5arith8TruncIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  542:void arith::TruncIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  543:                                        SetIntRangeFn setResultRange) {
    #####:  544:  Type destType = getResult().getType();
branch  0 never executed
branch  1 never executed
    #####:  545:  setResultRange(getResult(), truncIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  546:}
        -:  547:
        -:  548://===----------------------------------------------------------------------===//
        -:  549:// IndexCastOp
        -:  550://===----------------------------------------------------------------------===//
        -:  551:
function _ZN4mlir5arith11IndexCastOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  552:void arith::IndexCastOp::inferResultRanges(
        -:  553:    ArrayRef<ConstantIntRanges> argRanges, SetIntRangeFn setResultRange) {
    #####:  554:  Type sourceType = getOperand().getType();
call    0 never executed
call    1 never executed
    #####:  555:  Type destType = getResult().getType();
call    0 never executed
    #####:  556:  unsigned srcWidth = ConstantIntRanges::getStorageBitwidth(sourceType);
call    0 never executed
    #####:  557:  unsigned destWidth = ConstantIntRanges::getStorageBitwidth(destType);
call    0 never executed
        -:  558:
    #####:  559:  if (srcWidth < destWidth)
branch  0 never executed
branch  1 never executed
    #####:  560:    setResultRange(getResult(), extSIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  561:  else if (srcWidth > destWidth)
branch  0 never executed
branch  1 never executed
    #####:  562:    setResultRange(getResult(), truncIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  563:  else
    #####:  564:    setResultRange(getResult(), argRanges[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  565:}
        -:  566:
        -:  567://===----------------------------------------------------------------------===//
        -:  568:// IndexCastUIOp
        -:  569://===----------------------------------------------------------------------===//
        -:  570:
function _ZN4mlir5arith13IndexCastUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  571:void arith::IndexCastUIOp::inferResultRanges(
        -:  572:    ArrayRef<ConstantIntRanges> argRanges, SetIntRangeFn setResultRange) {
    #####:  573:  Type sourceType = getOperand().getType();
call    0 never executed
call    1 never executed
    #####:  574:  Type destType = getResult().getType();
call    0 never executed
    #####:  575:  unsigned srcWidth = ConstantIntRanges::getStorageBitwidth(sourceType);
call    0 never executed
    #####:  576:  unsigned destWidth = ConstantIntRanges::getStorageBitwidth(destType);
call    0 never executed
        -:  577:
    #####:  578:  if (srcWidth < destWidth)
branch  0 never executed
branch  1 never executed
    #####:  579:    setResultRange(getResult(), extUIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  580:  else if (srcWidth > destWidth)
branch  0 never executed
branch  1 never executed
    #####:  581:    setResultRange(getResult(), truncIRange(argRanges[0], destType));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  582:  else
    #####:  583:    setResultRange(getResult(), argRanges[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  584:}
        -:  585:
        -:  586://===----------------------------------------------------------------------===//
        -:  587:// CmpIOp
        -:  588://===----------------------------------------------------------------------===//
        -:  589:
function _Z16isStaticallyTrueN4mlir5arith13CmpIPredicateERKNS_17ConstantIntRangesES4_ called 0 returned 0% blocks executed 0%
    #####:  590:bool isStaticallyTrue(arith::CmpIPredicate pred, const ConstantIntRanges &lhs,
        -:  591:                      const ConstantIntRanges &rhs) {
    #####:  592:  switch (pred) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  593:  case arith::CmpIPredicate::sle:
    #####:  594:  case arith::CmpIPredicate::slt:
    #####:  595:    return (applyCmpPredicate(pred, lhs.smax(), rhs.smin()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  596:  case arith::CmpIPredicate::ule:
    #####:  597:  case arith::CmpIPredicate::ult:
    #####:  598:    return applyCmpPredicate(pred, lhs.umax(), rhs.umin());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  599:  case arith::CmpIPredicate::sge:
    #####:  600:  case arith::CmpIPredicate::sgt:
    #####:  601:    return applyCmpPredicate(pred, lhs.smin(), rhs.smax());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  602:  case arith::CmpIPredicate::uge:
    #####:  603:  case arith::CmpIPredicate::ugt:
    #####:  604:    return applyCmpPredicate(pred, lhs.umin(), rhs.umax());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  605:  case arith::CmpIPredicate::eq: {
    #####:  606:    Optional<APInt> lhsConst = lhs.getConstantValue();
call    0 never executed
    #####:  607:    Optional<APInt> rhsConst = rhs.getConstantValue();
call    0 never executed
call    1 never executed
    #####:  608:    return lhsConst && rhsConst && lhsConst == rhsConst;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  609:  }
    #####:  610:  case arith::CmpIPredicate::ne: {
        -:  611:    // While equality requires that there is an interpration of the preceeding
        -:  612:    // computations that produces equal constants, whether that be signed or
        -:  613:    // unsigned, statically determining inequality requires that neither
        -:  614:    // interpretation produce potentially overlapping ranges.
    #####:  615:    bool sne = isStaticallyTrue(CmpIPredicate::slt, lhs, rhs) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  616:               isStaticallyTrue(CmpIPredicate::sgt, lhs, rhs);
call    0 never executed
    #####:  617:    bool une = isStaticallyTrue(CmpIPredicate::ult, lhs, rhs) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  618:               isStaticallyTrue(CmpIPredicate::ugt, lhs, rhs);
call    0 never executed
    #####:  619:    return sne && une;
        -:  620:  }
        -:  621:  }
        -:  622:  return false;
        -:  623:}
        -:  624:
function _ZN4mlir5arith6CmpIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  625:void arith::CmpIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  626:                                      SetIntRangeFn setResultRange) {
    #####:  627:  arith::CmpIPredicate pred = getPredicate();
call    0 never executed
    #####:  628:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  629:
    #####:  630:  APInt min = APInt::getZero(1);
call    0 never executed
    #####:  631:  APInt max = APInt::getAllOnesValue(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  632:  if (isStaticallyTrue(pred, lhs, rhs))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  633:    min = max;
branch  0 never executed
branch  1 never executed
    #####:  634:  else if (isStaticallyTrue(invertPredicate(pred), lhs, rhs))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  635:    max = min;
branch  0 never executed
branch  1 never executed
        -:  636:
    #####:  637:  setResultRange(getResult(), ConstantIntRanges::fromUnsigned(min, max));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  638:}
        -:  639:
        -:  640://===----------------------------------------------------------------------===//
        -:  641:// SelectOp
        -:  642://===----------------------------------------------------------------------===//
        -:  643:
function _ZN4mlir5arith8SelectOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  644:void arith::SelectOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  645:                                        SetIntRangeFn setResultRange) {
    #####:  646:  Optional<APInt> mbCondVal = argRanges[0].getConstantValue();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  647:
    #####:  648:  if (mbCondVal) {
branch  0 never executed
branch  1 never executed
    #####:  649:    if (mbCondVal->isZero())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  650:      setResultRange(getResult(), argRanges[2]);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  651:    else
    #####:  652:      setResultRange(getResult(), argRanges[1]);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  653:    return;
call    0 never executed
        -:  654:  }
    #####:  655:  setResultRange(getResult(), argRanges[1].rangeUnion(argRanges[2]));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  656:}
        -:  657:
        -:  658://===----------------------------------------------------------------------===//
        -:  659:// ShLIOp
        -:  660://===----------------------------------------------------------------------===//
        -:  661:
function _ZN4mlir5arith6ShLIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  662:void arith::ShLIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  663:                                      SetIntRangeFn setResultRange) {
    #####:  664:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
function _ZZN4mlir5arith6ShLIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  665:  ConstArithFn shl = [](const APInt &l, const APInt &r) -> Optional<APInt> {
    #####:  666:    return r.uge(r.getBitWidth()) ? Optional<APInt>() : l.shl(r);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  667:  };
call    0 never executed
    #####:  668:  ConstantIntRanges urange =
        -:  669:      minMaxBy(shl, {lhs.umin(), lhs.umax()}, {rhs.umin(), rhs.umax()},
    #####:  670:               /*isSigned=*/false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
    #####:  671:  ConstantIntRanges srange =
        -:  672:      minMaxBy(shl, {lhs.smin(), lhs.smax()}, {rhs.umin(), rhs.umax()},
    #####:  673:               /*isSigned=*/true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  674:  setResultRange(getResult(), urange.intersection(srange));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  675:}
        -:  676:
        -:  677://===----------------------------------------------------------------------===//
        -:  678:// ShRUIOp
        -:  679://===----------------------------------------------------------------------===//
        -:  680:
function _ZN4mlir5arith7ShRUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  681:void arith::ShRUIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  682:                                       SetIntRangeFn setResultRange) {
    #####:  683:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  684:
function _ZZN4mlir5arith7ShRUIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  685:  ConstArithFn lshr = [](const APInt &l, const APInt &r) -> Optional<APInt> {
    #####:  686:    return r.uge(r.getBitWidth()) ? Optional<APInt>() : l.lshr(r);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  687:  };
call    0 never executed
    #####:  688:  setResultRange(getResult(), minMaxBy(lshr, {lhs.umin(), lhs.umax()},
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:  689:                                       {rhs.umin(), rhs.umax()},
    #####:  690:                                       /*isSigned=*/false));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  691:}
        -:  692:
        -:  693://===----------------------------------------------------------------------===//
        -:  694:// ShRSIOp
        -:  695://===----------------------------------------------------------------------===//
        -:  696:
function _ZN4mlir5arith7ShRSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEE called 0 returned 0% blocks executed 0%
    #####:  697:void arith::ShRSIOp::inferResultRanges(ArrayRef<ConstantIntRanges> argRanges,
        -:  698:                                       SetIntRangeFn setResultRange) {
    #####:  699:  const ConstantIntRanges &lhs = argRanges[0], &rhs = argRanges[1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  700:
function _ZZN4mlir5arith7ShRSIOp17inferResultRangesEN4llvm8ArrayRefINS_17ConstantIntRangesEEENS2_12function_refIFvNS_5ValueERKS4_EEEENKUlRKNS2_5APIntESE_E_clESE_SE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  701:  ConstArithFn ashr = [](const APInt &l, const APInt &r) -> Optional<APInt> {
    #####:  702:    return r.uge(r.getBitWidth()) ? Optional<APInt>() : l.ashr(r);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  703:  };
call    0 never executed
        -:  704:
    #####:  705:  setResultRange(getResult(),
call    0 never executed
call    1 never executed
    #####:  706:                 minMaxBy(ashr, {lhs.smin(), lhs.smax()},
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  707:                          {rhs.umin(), rhs.umax()}, /*isSigned=*/true));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  708:}
