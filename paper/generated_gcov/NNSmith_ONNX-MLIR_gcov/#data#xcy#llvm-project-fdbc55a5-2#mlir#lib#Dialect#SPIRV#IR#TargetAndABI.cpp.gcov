        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SPIRV/IR/TargetAndABI.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/TargetAndABI.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/TargetAndABI.cpp.gcda
        -:    0:Runs:128632
        -:    1://===- TargetAndABI.cpp - SPIR-V target and ABI utilities -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SPIRV/IR/TargetAndABI.h"
        -:   10:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   11:#include "mlir/IR/Builders.h"
        -:   12:#include "mlir/IR/FunctionInterfaces.h"
        -:   13:#include "mlir/IR/Operation.h"
        -:   14:#include "mlir/IR/SymbolTable.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// TargetEnv
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
function _ZN4mlir5spirv9TargetEnvC2ENS0_13TargetEnvAttrE called 8398 returned 100% blocks executed 81%
     8398:   22:spirv::TargetEnv::TargetEnv(spirv::TargetEnvAttr targetAttr)
     8398:   23:    : targetAttr(targetAttr) {
call    0 returned 100%
    8398*:   24:  for (spirv::Extension ext : targetAttr.getExtensions())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   25:    givenExtensions.insert(ext);
call    0 never executed
        -:   26:
        -:   27:  // Add extensions implied by the current version.
    #####:   28:  for (spirv::Extension ext :
     8398:   29:       spirv::getImpliedExtensions(targetAttr.getVersion()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   30:    givenExtensions.insert(ext);
call    0 never executed
        -:   31:
    16796:   32:  for (spirv::Capability cap : targetAttr.getCapabilities()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
     8398:   33:    givenCapabilities.insert(cap);
call    0 returned 100%
call    1 returned 100%
        -:   34:
        -:   35:    // Add capabilities implied by the current capability.
    25194:   36:    for (spirv::Capability c : spirv::getRecursiveImpliedCapabilities(cap))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
     8398:   37:      givenCapabilities.insert(c);
call    0 returned 100%
        -:   38:  }
     8398:   39:}
        -:   40:
function _ZNK4mlir5spirv9TargetEnv10getVersionEv called 0 returned 0% blocks executed 0%
    #####:   41:spirv::Version spirv::TargetEnv::getVersion() const {
    #####:   42:  return targetAttr.getVersion();
call    0 never executed
        -:   43:}
        -:   44:
function _ZNK4mlir5spirv9TargetEnv6allowsENS0_10CapabilityE called 0 returned 0% blocks executed 0%
    #####:   45:bool spirv::TargetEnv::allows(spirv::Capability capability) const {
    #####:   46:  return givenCapabilities.count(capability);
call    0 never executed
        -:   47:}
        -:   48:
        -:   49:Optional<spirv::Capability>
function _ZNK4mlir5spirv9TargetEnv6allowsEN4llvm8ArrayRefINS0_10CapabilityEEE called 0 returned 0% blocks executed 0%
    #####:   50:spirv::TargetEnv::allows(ArrayRef<spirv::Capability> caps) const {
    #####:   51:  const auto *chosen = llvm::find_if(caps, [this](spirv::Capability cap) {
call    0 never executed
        -:   52:    return givenCapabilities.count(cap);
        -:   53:  });
    #####:   54:  if (chosen != caps.end())
branch  0 never executed
branch  1 never executed
    #####:   55:    return *chosen;
    #####:   56:  return llvm::None;
        -:   57:}
        -:   58:
function _ZNK4mlir5spirv9TargetEnv6allowsENS0_9ExtensionE called 0 returned 0% blocks executed 0%
    #####:   59:bool spirv::TargetEnv::allows(spirv::Extension extension) const {
    #####:   60:  return givenExtensions.count(extension);
call    0 never executed
        -:   61:}
        -:   62:
        -:   63:Optional<spirv::Extension>
function _ZNK4mlir5spirv9TargetEnv6allowsEN4llvm8ArrayRefINS0_9ExtensionEEE called 0 returned 0% blocks executed 0%
    #####:   64:spirv::TargetEnv::allows(ArrayRef<spirv::Extension> exts) const {
    #####:   65:  const auto *chosen = llvm::find_if(exts, [this](spirv::Extension ext) {
call    0 never executed
        -:   66:    return givenExtensions.count(ext);
        -:   67:  });
    #####:   68:  if (chosen != exts.end())
branch  0 never executed
branch  1 never executed
    #####:   69:    return *chosen;
    #####:   70:  return llvm::None;
        -:   71:}
        -:   72:
function _ZNK4mlir5spirv9TargetEnv11getVendorIDEv called 0 returned 0% blocks executed 0%
    #####:   73:spirv::Vendor spirv::TargetEnv::getVendorID() const {
    #####:   74:  return targetAttr.getVendorID();
call    0 never executed
        -:   75:}
        -:   76:
function _ZNK4mlir5spirv9TargetEnv13getDeviceTypeEv called 0 returned 0% blocks executed 0%
    #####:   77:spirv::DeviceType spirv::TargetEnv::getDeviceType() const {
    #####:   78:  return targetAttr.getDeviceType();
call    0 never executed
        -:   79:}
        -:   80:
function _ZNK4mlir5spirv9TargetEnv11getDeviceIDEv called 0 returned 0% blocks executed 0%
    #####:   81:uint32_t spirv::TargetEnv::getDeviceID() const {
    #####:   82:  return targetAttr.getDeviceID();
call    0 never executed
        -:   83:}
        -:   84:
function _ZNK4mlir5spirv9TargetEnv17getResourceLimitsEv called 0 returned 0% blocks executed 0%
    #####:   85:spirv::ResourceLimitsAttr spirv::TargetEnv::getResourceLimits() const {
    #####:   86:  return targetAttr.getResourceLimits();
call    0 never executed
        -:   87:}
        -:   88:
function _ZNK4mlir5spirv9TargetEnv10getContextEv called 0 returned 0% blocks executed 0%
    #####:   89:MLIRContext *spirv::TargetEnv::getContext() const {
    #####:   90:  return targetAttr.getContext();
call    0 never executed
        -:   91:}
        -:   92:
        -:   93://===----------------------------------------------------------------------===//
        -:   94:// Utility functions
        -:   95://===----------------------------------------------------------------------===//
        -:   96:
function _ZN4mlir5spirv26getInterfaceVarABIAttrNameEv called 0 returned 0% blocks executed 0%
    #####:   97:StringRef spirv::getInterfaceVarABIAttrName() {
    #####:   98:  return "spirv.interface_var_abi";
        -:   99:}
        -:  100:
        -:  101:spirv::InterfaceVarABIAttr
function _ZN4mlir5spirv22getInterfaceVarABIAttrEjjN4llvm8OptionalINS0_12StorageClassEEEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  102:spirv::getInterfaceVarABIAttr(unsigned descriptorSet, unsigned binding,
        -:  103:                              Optional<spirv::StorageClass> storageClass,
        -:  104:                              MLIRContext *context) {
    #####:  105:  return spirv::InterfaceVarABIAttr::get(descriptorSet, binding, storageClass,
    #####:  106:                                         context);
call    0 never executed
        -:  107:}
        -:  108:
function _ZN4mlir5spirv25needsInterfaceVarABIAttrsENS0_13TargetEnvAttrE called 0 returned 0% blocks executed 0%
    #####:  109:bool spirv::needsInterfaceVarABIAttrs(spirv::TargetEnvAttr targetAttr) {
    #####:  110:  for (spirv::Capability cap : targetAttr.getCapabilities()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  111:    if (cap == spirv::Capability::Kernel)
branch  0 never executed
branch  1 never executed
    #####:  112:      return false;
    #####:  113:    if (cap == spirv::Capability::Shader)
branch  0 never executed
branch  1 never executed
        -:  114:      return true;
        -:  115:  }
    #####:  116:  return false;
        -:  117:}
        -:  118:
function _ZN4mlir5spirv24getEntryPointABIAttrNameEv called 0 returned 0% blocks executed 0%
    #####:  119:StringRef spirv::getEntryPointABIAttrName() { return "spirv.entry_point_abi"; }
        -:  120:
        -:  121:spirv::EntryPointABIAttr
function _ZN4mlir5spirv20getEntryPointABIAttrEN4llvm8ArrayRefIiEEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  122:spirv::getEntryPointABIAttr(ArrayRef<int32_t> localSize, MLIRContext *context) {
    #####:  123:  if (localSize.empty())
branch  0 never executed
branch  1 never executed
    #####:  124:    return spirv::EntryPointABIAttr::get(context, nullptr);
call    0 never executed
        -:  125:
    #####:  126:  assert(localSize.size() == 3);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  127:  return spirv::EntryPointABIAttr::get(
    #####:  128:      context, DenseElementsAttr::get<int32_t>(
    #####:  129:                   VectorType::get(3, IntegerType::get(context, 32)), localSize)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  130:                   .cast<DenseIntElementsAttr>());
call    0 never executed
        -:  131:}
        -:  132:
function _ZN4mlir5spirv19lookupEntryPointABIEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  133:spirv::EntryPointABIAttr spirv::lookupEntryPointABI(Operation *op) {
    #####:  134:  while (op && !isa<FunctionOpInterface>(op))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  135:    op = op->getParentOp();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  136:  if (!op)
branch  0 never executed
branch  1 never executed
    #####:  137:    return {};
        -:  138:
    #####:  139:  if (auto attr = op->getAttrOfType<spirv::EntryPointABIAttr>(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:          spirv::getEntryPointABIAttrName()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  141:    return attr;
        -:  142:
    #####:  143:  return {};
        -:  144:}
        -:  145:
function _ZN4mlir5spirv24lookupLocalWorkGroupSizeEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  146:DenseIntElementsAttr spirv::lookupLocalWorkGroupSize(Operation *op) {
    #####:  147:  if (auto entryPoint = spirv::lookupEntryPointABI(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:    return entryPoint.getLocalSize();
call    0 never executed
        -:  149:
    #####:  150:  return {};
        -:  151:}
        -:  152:
        -:  153:spirv::ResourceLimitsAttr
function _ZN4mlir5spirv24getDefaultResourceLimitsEPNS_11MLIRContextE called 4199 returned 100% blocks executed 100%
     4199:  154:spirv::getDefaultResourceLimits(MLIRContext *context) {
        -:  155:  // All the fields have default values. Here we just provide a nicer way to
        -:  156:  // construct a default resource limit attribute.
     4199:  157:  Builder b(context);
call    0 returned 100%
     4199:  158:  return spirv::ResourceLimitsAttr::get(
        -:  159:      context,
        -:  160:      /*max_compute_shared_memory_size=*/16384,
        -:  161:      /*max_compute_workgroup_invocations=*/128,
        -:  162:      /*max_compute_workgroup_size=*/b.getI32ArrayAttr({128, 128, 64}),
        -:  163:      /*subgroup_size=*/32,
     4199:  164:      /*cooperative_matrix_properties_nv=*/ArrayAttr());
call    0 returned 100%
call    1 returned 100%
        -:  165:}
        -:  166:
function _ZN4mlir5spirv20getTargetEnvAttrNameEv called 0 returned 0% blocks executed 0%
    4749*:  167:StringRef spirv::getTargetEnvAttrName() { return "spirv.target_env"; }
        -:  168:
function _ZN4mlir5spirv19getDefaultTargetEnvEPNS_11MLIRContextE called 4199 returned 100% blocks executed 100%
     4199:  169:spirv::TargetEnvAttr spirv::getDefaultTargetEnv(MLIRContext *context) {
     4199:  170:  auto triple = spirv::VerCapExtAttr::get(spirv::Version::V_1_0,
        -:  171:                                          {spirv::Capability::Shader},
     4199:  172:                                          ArrayRef<Extension>(), context);
call    0 returned 100%
     4199:  173:  return spirv::TargetEnvAttr::get(triple, spirv::Vendor::Unknown,
        -:  174:                                   spirv::DeviceType::Unknown,
        -:  175:                                   spirv::TargetEnvAttr::kUnknownDeviceID,
     4199:  176:                                   spirv::getDefaultResourceLimits(context));
call    0 returned 100%
call    1 returned 100%
        -:  177:}
        -:  178:
function _ZN4mlir5spirv15lookupTargetEnvEPNS_9OperationE called 4749 returned 100% blocks executed 75%
     4749:  179:spirv::TargetEnvAttr spirv::lookupTargetEnv(Operation *op) {
     4749:  180:  while (op) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4749:  181:    op = SymbolTable::getNearestSymbolTable(op);
call    0 returned 100%
     4749:  182:    if (!op)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  183:      break;
        -:  184:
     4749:  185:    if (auto attr = op->getAttrOfType<spirv::TargetEnvAttr>(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     4749:  186:            spirv::getTargetEnvAttrName()))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  187:      return attr;
        -:  188:
    4749*:  189:    op = op->getParentOp();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  190:  }
        -:  191:
     4749:  192:  return {};
        -:  193:}
        -:  194:
function _ZN4mlir5spirv24lookupTargetEnvOrDefaultEPNS_9OperationE called 4199 returned 100% blocks executed 83%
     4199:  195:spirv::TargetEnvAttr spirv::lookupTargetEnvOrDefault(Operation *op) {
     4199:  196:  if (spirv::TargetEnvAttr attr = spirv::lookupTargetEnv(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  197:    return attr;
        -:  198:
     4199:  199:  return getDefaultTargetEnv(op->getContext());
call    0 returned 100%
call    1 returned 100%
        -:  200:}
        -:  201:
        -:  202:spirv::AddressingModel
function _ZN4mlir5spirv18getAddressingModelENS0_13TargetEnvAttrE called 0 returned 0% blocks executed 0%
    #####:  203:spirv::getAddressingModel(spirv::TargetEnvAttr targetAttr) {
    #####:  204:  for (spirv::Capability cap : targetAttr.getCapabilities()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  205:    // TODO: Physical64 is hard-coded here, but some information should come
        -:  206:    // from TargetEnvAttr to selected between Physical32 and Physical64.
    #####:  207:    if (cap == Capability::Kernel)
branch  0 never executed
branch  1 never executed
    #####:  208:      return spirv::AddressingModel::Physical64;
        -:  209:    // TODO PhysicalStorageBuffer64 is hard-coded here, but some information
        -:  210:    // should come from TargetEnvAttr to select between PhysicalStorageBuffer64
        -:  211:    // and PhysicalStorageBuffer64EXT
    #####:  212:    if (cap == Capability::PhysicalStorageBufferAddresses)
branch  0 never executed
branch  1 never executed
        -:  213:      return spirv::AddressingModel::PhysicalStorageBuffer64;
        -:  214:  }
        -:  215:  // Logical addressing doesn't need any capabilities so return it as default.
    #####:  216:  return spirv::AddressingModel::Logical;
        -:  217:}
        -:  218:
        -:  219:FailureOr<spirv::ExecutionModel>
function _ZN4mlir5spirv17getExecutionModelENS0_13TargetEnvAttrE called 0 returned 0% blocks executed 0%
    #####:  220:spirv::getExecutionModel(spirv::TargetEnvAttr targetAttr) {
    #####:  221:  for (spirv::Capability cap : targetAttr.getCapabilities()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  222:    if (cap == spirv::Capability::Kernel)
branch  0 never executed
branch  1 never executed
    #####:  223:      return spirv::ExecutionModel::Kernel;
    #####:  224:    if (cap == spirv::Capability::Shader)
branch  0 never executed
branch  1 never executed
    #####:  225:      return spirv::ExecutionModel::GLCompute;
        -:  226:  }
    #####:  227:  return failure();
        -:  228:}
        -:  229:
        -:  230:FailureOr<spirv::MemoryModel>
function _ZN4mlir5spirv14getMemoryModelENS0_13TargetEnvAttrE called 0 returned 0% blocks executed 0%
    #####:  231:spirv::getMemoryModel(spirv::TargetEnvAttr targetAttr) {
    #####:  232:  for (spirv::Capability cap : targetAttr.getCapabilities()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  233:    if (cap == spirv::Capability::Addresses)
branch  0 never executed
branch  1 never executed
    #####:  234:      return spirv::MemoryModel::OpenCL;
    #####:  235:    if (cap == spirv::Capability::Shader)
branch  0 never executed
branch  1 never executed
    #####:  236:      return spirv::MemoryModel::GLSL450;
        -:  237:  }
    #####:  238:  return failure();
        -:  239:}
