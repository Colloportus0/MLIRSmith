        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Transforms/TestIntRangeInference.cpp
        -:    0:Graph:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestIntRangeInference.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestIntRangeInference.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestIntRangeInference.cpp - Create consts from range inference ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:// TODO: This pass is needed to test integer range inference until that
        -:    9:// functionality has been integrated into SCCP.
        -:   10://===----------------------------------------------------------------------===//
        -:   11:
        -:   12:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   13:#include "mlir/Analysis/DataFlow/IntegerRangeAnalysis.h"
        -:   14:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:#include "mlir/Pass/PassRegistry.h"
        -:   17:#include "mlir/Support/TypeID.h"
        -:   18:#include "mlir/Transforms/FoldUtils.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:using namespace mlir::dataflow;
        -:   22:
        -:   23:/// Patterned after SCCP
function _ZL19replaceWithConstantRN4mlir14DataFlowSolverERNS_9OpBuilderERNS_15OperationFolderENS_5ValueE called 334947 returned 100% blocks executed 38%
   334947:   24:static LogicalResult replaceWithConstant(DataFlowSolver &solver, OpBuilder &b,
        -:   25:                                         OperationFolder &folder, Value value) {
   334947:   26:  auto *maybeInferredRange =
   334947:   27:      solver.lookupState<IntegerValueRangeLattice>(value);
call    0 returned 100%
   334947:   28:  if (!maybeInferredRange || maybeInferredRange->getValue().isUninitialized())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
   115492:   29:    return failure();
   219455:   30:  const ConstantIntRanges &inferredRange =
   219455:   31:      maybeInferredRange->getValue().getValue();
call    0 returned 100%
   219455:   32:  Optional<APInt> maybeConstValue = inferredRange.getConstantValue();
call    0 returned 100%
   219455:   33:  if (!maybeConstValue.has_value())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   219455:   34:    return failure();
        -:   35:
    #####:   36:  Operation *maybeDefiningOp = value.getDefiningOp();
call    0 never executed
    #####:   37:  Dialect *valueDialect =
    #####:   38:      maybeDefiningOp ? maybeDefiningOp->getDialect()
branch  0 never executed
branch  1 never executed
    #####:   39:                      : value.getParentRegion()->getParentOp()->getDialect();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:  Attribute constAttr = b.getIntegerAttr(value.getType(), *maybeConstValue);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   41:  Value constant = folder.getOrCreateConstant(b, valueDialect, constAttr,
    #####:   42:                                              value.getType(), value.getLoc());
call    0 never executed
call    1 never executed
    #####:   43:  if (!constant)
branch  0 never executed
branch  1 never executed
    #####:   44:    return failure();
        -:   45:
    #####:   46:  value.replaceAllUsesWith(constant);
call    0 never executed
  219455*:   47:  return success();
call    0 returned 100%
        -:   48:}
        -:   49:
function _ZL7rewriteRN4mlir14DataFlowSolverEPNS_11MLIRContextEN4llvm15MutableArrayRefINS_6RegionEEE called 488 returned 100% blocks executed 74%
      488:   50:static void rewrite(DataFlowSolver &solver, MLIRContext *context,
        -:   51:                    MutableArrayRef<Region> initialRegions) {
      488:   52:  SmallVector<Block *> worklist;
call    0 returned 100%
function _ZZL7rewriteRN4mlir14DataFlowSolverEPNS_11MLIRContextEN4llvm15MutableArrayRefINS_6RegionEEEENKUlS7_E_clES7_.isra.0 called 383930 returned 100% blocks executed 91%
   383930:   53:  auto addToWorklist = [&](MutableArrayRef<Region> regions) {
   397118:   54:    for (Region &region : regions)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    55790:   55:      for (Block &block : llvm::reverse(region))
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    42602:   56:        worklist.push_back(&block);
call    0 returned 100%
   384418:   57:  };
        -:   58:
      488:   59:  OpBuilder builder(context);
call    0 returned 100%
      976:   60:  OperationFolder folder(context);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   61:
      488:   62:  addToWorklist(initialRegions);
call    0 returned 100%
    43090:   63:  while (!worklist.empty()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    42602:   64:    Block *block = worklist.pop_back_val();
call    0 returned 100%
        -:   65:
   809486:   66:    for (Operation &op : llvm::make_early_inc_range(*block)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
   383442:   67:      builder.setInsertionPoint(&op);
call    0 returned 100%
        -:   68:
        -:   69:      // Replace any result with constants.
   383442:   70:      bool replacedAll = op.getNumResults() != 0;
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
  1004956:   71:      for (Value res : op.getResults())
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
branch  2 taken 55% (fallthrough)
branch  3 taken 45%
call    4 returned 100%
   621514:   72:        replacedAll &=
   310757:   73:            succeeded(replaceWithConstant(solver, builder, folder, res));
call    0 returned 100%
        -:   74:
        -:   75:      // If all of the results of the operation were replaced, try to erase
        -:   76:      // the operation completely.
  383442*:   77:      if (replacedAll && wouldOpBeTriviallyDead(&op)) {
branch  0 taken 0%
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   78:        assert(op.use_empty() && "expected all uses to be replaced");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   79:        op.erase();
call    0 never executed
    #####:   80:        continue;
        -:   81:      }
        -:   82:
        -:   83:      // Add any the regions of this operation to the worklist.
   488764:   84:      addToWorklist(op.getRegions());
branch  0 taken 27%
branch  1 taken 73%
call    2 returned 100%
        -:   85:    }
        -:   86:
        -:   87:    // Replace any block arguments with constants.
    42602:   88:    builder.setInsertionPointToStart(block);
    66792:   89:    for (BlockArgument arg : block->getArguments())
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    24190:   90:      (void)replaceWithConstant(solver, builder, folder, arg);
call    0 returned 100%
        -:   91:  }
      488:   92:}
        -:   93:
        -:   94:namespace {
  129216*:   95:struct TestIntRangeInference
call    0 never executed
call    1 returned 100%
        -:   96:    : PassWrapper<TestIntRangeInference, OperationPass<>> {
function _ZN12_GLOBAL__N_121TestIntRangeInference13resolveTypeIDEv called 129216 returned 100% blocks executed 100%
   129216:   97:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestIntRangeInference)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   98:
function _ZNK12_GLOBAL__N_121TestIntRangeInference11getArgumentEv called 128658 returned 100% blocks executed 100%
   128658:   99:  StringRef getArgument() const final { return "test-int-range-inference"; }
function _ZNK12_GLOBAL__N_121TestIntRangeInference14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:  100:  StringRef getDescription() const final {
   128637:  101:    return "Test integer range inference analysis";
        -:  102:  }
        -:  103:
function _ZN12_GLOBAL__N_121TestIntRangeInference14runOnOperationEv called 488 returned 100% blocks executed 76%
      488:  104:  void runOnOperation() override {
      488:  105:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      976:  106:    DataFlowSolver solver;
call    0 returned 100%
call    1 returned 100%
      488:  107:    solver.load<DeadCodeAnalysis>();
call    0 returned 100%
      488:  108:    solver.load<IntegerRangeAnalysis>();
call    0 returned 100%
      488:  109:    if (failed(solver.initializeAndRun(op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  110:      return signalPassFailure();
call    0 never executed
call    1 never executed
      976:  111:    rewrite(solver, op->getContext(), op->getRegions());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        -:  112:  }
        -:  113:};
        -:  114:} // end anonymous namespace
        -:  115:
        -:  116:namespace mlir {
        -:  117:namespace test {
function _ZN4mlir4test29registerTestIntRangeInferenceEv called 128637 returned 100% blocks executed 100%
   128637:  118:void registerTestIntRangeInference() {
   128637:  119:  PassRegistration<TestIntRangeInference>();
call    0 returned 100%
   128637:  120:}
        -:  121:} // end namespace test
        -:  122:} // end namespace mlir
