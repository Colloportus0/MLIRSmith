        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/IR/TestSymbolUses.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestSymbolUses.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestSymbolUses.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestSymbolUses.cpp - Pass to test symbol uselists ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "mlir/IR/BuiltinOps.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15:namespace {
        -:   16:/// This is a symbol test pass that tests the symbol uselist functionality
        -:   17:/// provided by the symbol table along with erasing from the symbol table.
  129273*:   18:struct SymbolUsesPass
call    0 never executed
call    1 returned 100%
        -:   19:    : public PassWrapper<SymbolUsesPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_114SymbolUsesPass13resolveTypeIDEv called 129273 returned 100% blocks executed 100%
   129273:   20:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(SymbolUsesPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   21:
function _ZNK12_GLOBAL__N_114SymbolUsesPass11getArgumentEv called 128662 returned 100% blocks executed 100%
   128662:   22:  StringRef getArgument() const final { return "test-symbol-uses"; }
function _ZNK12_GLOBAL__N_114SymbolUsesPass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   23:  StringRef getDescription() const final {
   128637:   24:    return "Test detection of symbol uses";
        -:   25:  }
        -:   26:  WalkResult operateOnSymbol(Operation *symbol, ModuleOp module,
        -:   27:                             SmallVectorImpl<func::FuncOp> &deadFunctions) {
        -:   28:    // Test computing uses on a non symboltable op.
        -:   29:    Optional<SymbolTable::UseRange> symbolUses =
        -:   30:        SymbolTable::getSymbolUses(symbol);
        -:   31:
        -:   32:    // Test the conservative failure case.
        -:   33:    if (!symbolUses) {
        -:   34:      symbol->emitRemark()
        -:   35:          << "symbol contains an unknown nested operation that "
        -:   36:             "'may' define a new symbol table";
        -:   37:      return WalkResult::interrupt();
        -:   38:    }
        -:   39:    if (unsigned numUses = llvm::size(*symbolUses))
        -:   40:      symbol->emitRemark() << "symbol contains " << numUses
        -:   41:                           << " nested references";
        -:   42:
        -:   43:    // Test the functionality of symbolKnownUseEmpty.
        -:   44:    if (SymbolTable::symbolKnownUseEmpty(symbol, &module.getBodyRegion())) {
        -:   45:      func::FuncOp funcSymbol = dyn_cast<func::FuncOp>(symbol);
        -:   46:      if (funcSymbol && funcSymbol.isExternal())
        -:   47:        deadFunctions.push_back(funcSymbol);
        -:   48:
        -:   49:      symbol->emitRemark() << "symbol has no uses";
        -:   50:      return WalkResult::advance();
        -:   51:    }
        -:   52:
        -:   53:    // Test the functionality of getSymbolUses.
        -:   54:    symbolUses = SymbolTable::getSymbolUses(symbol, &module.getBodyRegion());
        -:   55:    assert(symbolUses && "expected no unknown operations");
        -:   56:    for (SymbolTable::SymbolUse symbolUse : *symbolUses) {
        -:   57:      // Check that we can resolve back to our symbol.
        -:   58:      if (SymbolTable::lookupNearestSymbolFrom(
        -:   59:              symbolUse.getUser()->getParentOp(), symbolUse.getSymbolRef())) {
        -:   60:        symbolUse.getUser()->emitRemark()
        -:   61:            << "found use of symbol : " << symbolUse.getSymbolRef() << " : "
        -:   62:            << symbol->getAttr(SymbolTable::getSymbolAttrName());
        -:   63:      }
        -:   64:    }
        -:   65:    symbol->emitRemark() << "symbol has " << llvm::size(*symbolUses) << " uses";
        -:   66:    return WalkResult::advance();
        -:   67:  }
        -:   68:
function _ZN12_GLOBAL__N_114SymbolUsesPass14runOnOperationEv called 545 returned 100% blocks executed 36%
      545:   69:  void runOnOperation() override {
      545:   70:    auto module = getOperation();
call    0 returned 100%
        -:   71:
        -:   72:    // Walk nested symbols.
      545:   73:    SmallVector<func::FuncOp, 4> deadFunctions;
call    0 returned 100%
function _ZZN12_GLOBAL__N_114SymbolUsesPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 426961 returned 100% blocks executed 100%
   427506:   74:    module.getBodyRegion().walk([&](Operation *nestedOp) {
call    0 returned 100%
   426961:   75:      if (isa<SymbolOpInterface>(nestedOp))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
    14231:   76:        return operateOnSymbol(nestedOp, module, deadFunctions);
call    0 returned 100%
   412730:   77:      return WalkResult::advance();
      545:   78:    });
call    0 returned 100%
        -:   79:
     1090:   80:    SymbolTable table(module);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     545*:   81:    for (Operation *op : deadFunctions) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   82:      // In order to test the SymbolTable::erase method, also erase completely
        -:   83:      // useless functions.
    #####:   84:      auto name = SymbolTable::getSymbolName(op);
call    0 never executed
    #####:   85:      assert(table.lookup(name) && "expected no unknown operations");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   86:      table.erase(op);
call    0 never executed
    #####:   87:      assert(!table.lookup(name) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   88:             "expected erased operation to be unknown now");
    #####:   89:      module.emitRemark() << name.getValue() << " function successfully erased";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   90:    }
      545:   91:  }
        -:   92:};
        -:   93:
        -:   94:/// This is a symbol test pass that tests the symbol use replacement
        -:   95:/// functionality provided by the symbol table.
  129234*:   96:struct SymbolReplacementPass
call    0 never executed
call    1 returned 100%
        -:   97:    : public PassWrapper<SymbolReplacementPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_121SymbolReplacementPass13resolveTypeIDEv called 129234 returned 100% blocks executed 100%
   129234:   98:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(SymbolReplacementPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   99:
function _ZNK12_GLOBAL__N_121SymbolReplacementPass11getArgumentEv called 128671 returned 100% blocks executed 100%
   128671:  100:  StringRef getArgument() const final { return "test-symbol-rauw"; }
function _ZNK12_GLOBAL__N_121SymbolReplacementPass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:  101:  StringRef getDescription() const final {
   128637:  102:    return "Test replacement of symbol uses";
        -:  103:  }
function _ZN12_GLOBAL__N_121SymbolReplacementPass14runOnOperationEv called 515 returned 100% blocks executed 94%
      515:  104:  void runOnOperation() override {
      515:  105:    ModuleOp module = getOperation();
call    0 returned 100%
        -:  106:
        -:  107:    // Don't try to replace if we can't collect symbol uses.
     1030:  108:    if (!SymbolTable::getSymbolUses(&module.getBodyRegion()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  109:      return;
        -:  110:
     1030:  111:    SymbolTableCollection symbolTable;
call    0 returned 100%
     1030:  112:    SymbolUserMap symbolUsers(symbolTable, module);
call    0 returned 100%
call    1 returned 100%
function _ZZN12_GLOBAL__N_121SymbolReplacementPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 405312 returned 100% blocks executed 57%
      515:  113:    module.getBodyRegion().walk([&](Operation *nestedOp) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   405312:  114:      StringAttr newName = nestedOp->getAttrOfType<StringAttr>("sym.new_name");
call    0 returned 100%
   405312:  115:      if (!newName)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   405312:  116:        return;
    #####:  117:      symbolUsers.replaceAllUsesWith(nestedOp, newName);
call    0 never executed
    #####:  118:      SymbolTable::setSymbolName(nestedOp, newName);
call    0 never executed
        -:  119:    });
        -:  120:  }
        -:  121:};
        -:  122:} // namespace
        -:  123:
        -:  124:namespace mlir {
function _ZN4mlir24registerSymbolTestPassesEv called 128637 returned 100% blocks executed 100%
   128637:  125:void registerSymbolTestPasses() {
   128637:  126:  PassRegistration<SymbolUsesPass>();
call    0 returned 100%
        -:  127:
   128637:  128:  PassRegistration<SymbolReplacementPass>();
call    0 returned 100%
   128637:  129:}
        -:  130:} // namespace mlir
