        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/Canonicalizer.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/Canonicalizer.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/Canonicalizer.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- Canonicalizer.cpp - Canonicalize MLIR operations -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This transformation pass converts operations into their canonical forms by
        -:   10:// folding constants, applying operation identity transformations etc.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_CANONICALIZER
        -:   21:#include "mlir/Transforms/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:/// Canonicalize operations in nested regions.
    35856:   28:struct Canonicalizer : public impl::CanonicalizerBase<Canonicalizer> {
call    0 returned 100%
call    1 returned 100%
   130888:   29:  Canonicalizer() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_113CanonicalizerC2ERKN4mlir19GreedyRewriteConfigEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESD_ called 0 returned 0% blocks executed 0%
    #####:   30:  Canonicalizer(const GreedyRewriteConfig &config,
        -:   31:                ArrayRef<std::string> disabledPatterns,
    #####:   32:                ArrayRef<std::string> enabledPatterns) {
call    0 never executed
call    1 never executed
    #####:   33:    this->topDownProcessingEnabled = config.useTopDownTraversal;
branch  0 never executed
branch  1 never executed
    #####:   34:    this->enableRegionSimplification = config.enableRegionSimplification;
branch  0 never executed
branch  1 never executed
    #####:   35:    this->maxIterations = config.maxIterations;
branch  0 never executed
branch  1 never executed
    #####:   36:    this->disabledPatterns = disabledPatterns;
call    0 never executed
    #####:   37:    this->enabledPatterns = enabledPatterns;
call    0 never executed
    #####:   38:  }
        -:   39:
        -:   40:  /// Initialize the canonicalizer by building the set of patterns used during
        -:   41:  /// execution.
function _ZN12_GLOBAL__N_113Canonicalizer10initializeEPN4mlir11MLIRContextE called 2094 returned 100% blocks executed 100%
     2094:   42:  LogicalResult initialize(MLIRContext *context) override {
     2094:   43:    RewritePatternSet owningPatterns(context);
call    0 returned 100%
    22478:   44:    for (auto *dialect : context->getLoadedDialects())
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
    20384:   45:      dialect->getCanonicalizationPatterns(owningPatterns);
call    0 returned 100%
   945405:   46:    for (RegisteredOperationName op : context->getRegisteredOperations())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
   943311:   47:      op.getCanonicalizationPatterns(owningPatterns, context);
call    0 returned 100%
        -:   48:
     2094:   49:    patterns = FrozenRewritePatternSet(std::move(owningPatterns),
call    0 returned 100%
     4188:   50:                                       disabledPatterns, enabledPatterns);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     2094:   51:    return success();
call    0 returned 100%
        -:   52:  }
function _ZN12_GLOBAL__N_113Canonicalizer14runOnOperationEv called 11352 returned 100% blocks executed 75%
    11352:   53:  void runOnOperation() override {
    11352:   54:    GreedyRewriteConfig config;
    11352:   55:    config.useTopDownTraversal = topDownProcessingEnabled;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    11352:   56:    config.enableRegionSimplification = enableRegionSimplification;
    11352:   57:    config.maxIterations = maxIterations;
    11352:   58:    (void)applyPatternsAndFoldGreedily(getOperation(), patterns, config);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    11352:   59:  }
        -:   60:
        -:   61:  FrozenRewritePatternSet patterns;
        -:   62:};
        -:   63:} // namespace
        -:   64:
        -:   65:/// Create a Canonicalizer pass.
function _ZN4mlir23createCanonicalizerPassEv called 130888 returned 100% blocks executed 100%
   130888:   66:std::unique_ptr<Pass> mlir::createCanonicalizerPass() {
   130888:   67:  return std::make_unique<Canonicalizer>();
call    0 returned 100%
        -:   68:}
        -:   69:
        -:   70:/// Creates an instance of the Canonicalizer pass with the specified config.
        -:   71:std::unique_ptr<Pass>
function _ZN4mlir23createCanonicalizerPassERKNS_19GreedyRewriteConfigEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_ called 0 returned 0% blocks executed 0%
    #####:   72:mlir::createCanonicalizerPass(const GreedyRewriteConfig &config,
        -:   73:                              ArrayRef<std::string> disabledPatterns,
        -:   74:                              ArrayRef<std::string> enabledPatterns) {
    #####:   75:  return std::make_unique<Canonicalizer>(config, disabledPatterns,
call    0 never executed
    #####:   76:                                         enabledPatterns);
        -:   77:}
