        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Conversion/FuncToLLVM/TestConvertCallOp.cpp
        -:    0:Graph:../tools/mlir/test/lib/Conversion/FuncToLLVM/CMakeFiles/MLIRTestFuncToLLVM.dir/TestConvertCallOp.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Conversion/FuncToLLVM/CMakeFiles/MLIRTestFuncToLLVM.dir/TestConvertCallOp.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestConvertCallOp.cpp - Test LLVM Conversion of Func CallOp --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "TestTypes.h"
        -:   11:#include "mlir/Conversion/FuncToLLVM/ConvertFuncToLLVM.h"
        -:   12:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:namespace {
        -:   20:
        -:   21:class TestTypeProducerOpConverter
        -:   22:    : public ConvertOpToLLVMPattern<test::TestTypeProducerOp> {
        -:   23:public:
        -:   24:  using ConvertOpToLLVMPattern<
      555:   25:      test::TestTypeProducerOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   26:
        -:   27:  LogicalResult
function _ZNK12_GLOBAL__N_127TestTypeProducerOpConverter15matchAndRewriteEN4test18TestTypeProducerOpENS1_25TestTypeProducerOpAdaptorERN4mlir25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   28:  matchAndRewrite(test::TestTypeProducerOp op, OpAdaptor adaptor,
        -:   29:                  ConversionPatternRewriter &rewriter) const override {
    #####:   30:    rewriter.replaceOpWithNewOp<LLVM::NullOp>(op, getVoidPtrType());
call    0 never executed
call    1 never executed
    #####:   31:    return success();
        -:   32:  }
        -:   33:};
        -:   34:
  129286*:   35:struct TestConvertCallOp
call    0 never executed
call    1 returned 100%
        -:   36:    : public PassWrapper<TestConvertCallOp, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_117TestConvertCallOp13resolveTypeIDEv called 129286 returned 100% blocks executed 100%
   129286:   37:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestConvertCallOp)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   38:
function _ZNK12_GLOBAL__N_117TestConvertCallOp20getDependentDialectsERN4mlir15DialectRegistryE called 650 returned 100% blocks executed 100%
      650:   39:  void getDependentDialects(DialectRegistry &registry) const final {
      650:   40:    registry.insert<LLVM::LLVMDialect>();
call    0 returned 100%
      650:   41:  }
function _ZNK12_GLOBAL__N_117TestConvertCallOp11getArgumentEv called 128666 returned 100% blocks executed 100%
   128666:   42:  StringRef getArgument() const final { return "test-convert-call-op"; }
function _ZNK12_GLOBAL__N_117TestConvertCallOp14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   43:  StringRef getDescription() const final {
   128636:   44:    return "Tests conversion of `func.call` to `llvm.call` in "
   128636:   45:           "presence of custom types";
        -:   46:  }
        -:   47:
function _ZN12_GLOBAL__N_117TestConvertCallOp14runOnOperationEv called 555 returned 100% blocks executed 96%
      555:   48:  void runOnOperation() override {
      555:   49:    ModuleOp m = getOperation();
call    0 returned 100%
        -:   50:
        -:   51:    // Populate type conversions.
      555:   52:    LLVMTypeConverter typeConverter(m.getContext());
call    0 returned 100%
call    1 returned 100%
function _ZZN12_GLOBAL__N_117TestConvertCallOp14runOnOperationEvENKUlN4test8TestTypeEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
     555*:   53:    typeConverter.addConversion([&](test::TestType type) {
call    0 returned 100%
    #####:   54:      return LLVM::LLVMPointerType::get(IntegerType::get(m.getContext(), 8));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   55:    });
function _ZZN12_GLOBAL__N_117TestConvertCallOp14runOnOperationEvENKUlN4test11SimpleATypeEE0_clES2_.isra.0 called 0 returned 0% blocks executed 0%
     555*:   56:    typeConverter.addConversion([&](test::SimpleAType type) {
call    0 returned 100%
    #####:   57:      return IntegerType::get(type.getContext(), 42);
call    0 never executed
call    1 never executed
        -:   58:    });
        -:   59:
        -:   60:    // Populate patterns.
     1110:   61:    RewritePatternSet patterns(m.getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      555:   62:    populateFuncToLLVMConversionPatterns(typeConverter, patterns);
call    0 returned 100%
      555:   63:    patterns.add<TestTypeProducerOpConverter>(typeConverter);
call    0 returned 100%
        -:   64:
        -:   65:    // Set target.
     1110:   66:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      555:   67:    target.addLegalDialect<LLVM::LLVMDialect>();
call    0 returned 100%
      555:   68:    target.addIllegalDialect<test::TestDialect>();
call    0 returned 100%
      555:   69:    target.addIllegalDialect<func::FuncDialect>();
call    0 returned 100%
        -:   70:
     1110:   71:    if (failed(applyPartialConversion(m, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:   72:      signalPassFailure();
call    0 never executed
      555:   73:  }
        -:   74:};
        -:   75:
        -:   76:} // namespace
        -:   77:
        -:   78:namespace mlir {
        -:   79:namespace test {
function _ZN4mlir4test25registerConvertCallOpPassEv called 128636 returned 100% blocks executed 100%
   128636:   80:void registerConvertCallOpPass() { PassRegistration<TestConvertCallOp>(); }
call    0 returned 100%
        -:   81:} // namespace test
        -:   82:} // namespace mlir
