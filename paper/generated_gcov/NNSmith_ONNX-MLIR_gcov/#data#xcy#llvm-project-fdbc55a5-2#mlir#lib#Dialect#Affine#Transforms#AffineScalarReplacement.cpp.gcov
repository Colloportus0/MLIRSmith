        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Transforms/AffineScalarReplacement.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineScalarReplacement.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineScalarReplacement.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- AffineScalarReplacement.cpp - Affine scalar replacement pass -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to forward affine memref stores to loads, thereby
        -:   10:// potentially getting rid of intermediate memrefs entirely. It also removes
        -:   11:// redundant loads.
        -:   12:// TODO: In the future, similar techniques could be used to eliminate
        -:   13:// dead memref store's and perform more complex forwarding when support for
        -:   14:// SSA scalars live out of 'affine.for'/'affine.if' statements is available.
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:#include "mlir/Dialect/Affine/Passes.h"
        -:   18:
        -:   19:#include "mlir/Dialect/Affine/Utils.h"
        -:   20:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   21:#include "mlir/IR/Dominance.h"
        -:   22:#include "mlir/Support/LogicalResult.h"
        -:   23:#include <algorithm>
        -:   24:
        -:   25:namespace mlir {
        -:   26:#define GEN_PASS_DEF_AFFINESCALARREPLACEMENT
        -:   27:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   28:} // namespace mlir
        -:   29:
        -:   30:#define DEBUG_TYPE "affine-scalrep"
        -:   31:
        -:   32:using namespace mlir;
        -:   33:
        -:   34:namespace {
   170338:   35:struct AffineScalarReplacement
call    0 returned 100%
call    1 returned 100%
        -:   36:    : public impl::AffineScalarReplacementBase<AffineScalarReplacement> {
        -:   37:  void runOnOperation() override;
        -:   38:};
        -:   39:
        -:   40:} // namespace
        -:   41:
        -:   42:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir33createAffineScalarReplacementPassEv called 129298 returned 100% blocks executed 100%
   129298:   43:mlir::createAffineScalarReplacementPass() {
   129298:   44:  return std::make_unique<AffineScalarReplacement>();
call    0 returned 100%
        -:   45:}
        -:   46:
function _ZN12_GLOBAL__N_123AffineScalarReplacement14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   47:void AffineScalarReplacement::runOnOperation() {
    #####:   48:  affineScalarReplace(getOperation(), getAnalysis<DominanceInfo>(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   49:                      getAnalysis<PostDominanceInfo>());
    #####:   50:}
