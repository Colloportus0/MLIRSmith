        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/VectorToSPIRV/VectorToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/VectorToSPIRV/CMakeFiles/obj.MLIRVectorToSPIRV.dir/VectorToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/VectorToSPIRV/CMakeFiles/obj.MLIRVectorToSPIRV.dir/VectorToSPIRVPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- VectorToSPIRVPass.cpp - Vector to SPIR-V Passes --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert Vector dialect to SPIRV dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/VectorToSPIRV/VectorToSPIRVPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/VectorToSPIRV/VectorToSPIRV.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:#include "mlir/Transforms/DialectConversion.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_CONVERTVECTORTOSPIRV
        -:   23:#include "mlir/Conversion/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28:namespace {
  129254*:   29:struct ConvertVectorToSPIRVPass
call    0 never executed
call    1 returned 100%
        -:   30:    : public impl::ConvertVectorToSPIRVBase<ConvertVectorToSPIRVPass> {
        -:   31:  void runOnOperation() override;
        -:   32:};
        -:   33:} // namespace
        -:   34:
function _ZN12_GLOBAL__N_124ConvertVectorToSPIRVPass14runOnOperationEv called 520 returned 100% blocks executed 70%
      520:   35:void ConvertVectorToSPIRVPass::runOnOperation() {
      520:   36:  MLIRContext *context = &getContext();
call    0 returned 100%
      520:   37:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   38:
      520:   39:  auto targetAttr = spirv::lookupTargetEnvOrDefault(op);
call    0 returned 100%
      520:   40:  std::unique_ptr<ConversionTarget> target =
     1040:   41:      SPIRVConversionTarget::get(targetAttr);
call    0 returned 100%
call    1 returned 100%
        -:   42:
     1040:   43:  SPIRVTypeConverter typeConverter(targetAttr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   44:
        -:   45:  // Use UnrealizedConversionCast as the bridge so that we don't need to pull in
        -:   46:  // patterns for other dialects.
     520*:   47:  auto addUnrealizedCast = [](OpBuilder &builder, Type type, ValueRange inputs,
        -:   48:                              Location loc) {
    #####:   49:    auto cast = builder.create<UnrealizedConversionCastOp>(loc, type, inputs);
call    0 never executed
    #####:   50:    return Optional<Value>(cast.getResult(0));
        -:   51:  };
      520:   52:  typeConverter.addSourceMaterialization(addUnrealizedCast);
call    0 returned 100%
      520:   53:  typeConverter.addTargetMaterialization(addUnrealizedCast);
call    0 returned 100%
      520:   54:  target->addLegalOp<UnrealizedConversionCastOp>();
call    0 returned 100%
        -:   55:
     1040:   56:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      520:   57:  populateVectorToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
        -:   58:
      520:   59:  if (failed(applyPartialConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   60:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   61:}
        -:   62:
function _ZN4mlir30createConvertVectorToSPIRVPassEv called 129254 returned 100% blocks executed 100%
   129254:   63:std::unique_ptr<OperationPass<>> mlir::createConvertVectorToSPIRVPass() {
   129254:   64:  return std::make_unique<ConvertVectorToSPIRVPass>();
call    0 returned 100%
        -:   65:}
