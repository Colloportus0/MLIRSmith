        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Interfaces/CallInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRCallInterfaces.dir/CallInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRCallInterfaces.dir/CallInterfaces.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- CallInterfaces.cpp - ControlFlow Interfaces ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/CallInterfaces.h"
        -:   10:
        -:   11:using namespace mlir;
        -:   12:
        -:   13://===----------------------------------------------------------------------===//
        -:   14:// CallOpInterface
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:/// Resolve the callable operation for given callee to a CallableOpInterface, or
        -:   18:/// nullptr if a valid callable was not resolved. `symbolTable` is an optional
        -:   19:/// parameter that will allow for using a cached symbol table for symbol lookups
        -:   20:/// instead of performing an O(N) scan.
        -:   21:Operation *
function _ZN4mlir15CallOpInterface15resolveCallableEPNS_21SymbolTableCollectionE called 121162 returned 100% blocks executed 70%
   121162:   22:CallOpInterface::resolveCallable(SymbolTableCollection *symbolTable) {
   121162:   23:  CallInterfaceCallable callable = getCallableForCallee();
call    0 returned 100%
   121162:   24:  if (auto symbolVal = dyn_cast<Value>(callable))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   25:    return symbolVal.getDefiningOp();
call    0 never executed
        -:   26:
        -:   27:  // If the callable isn't a value, lookup the symbol reference.
   121162:   28:  auto symbolRef = callable.get<SymbolRefAttr>();
call    0 returned 100%
   121162:   29:  if (symbolTable)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   121162:   30:    return symbolTable->lookupNearestSymbolFrom(getOperation(), symbolRef);
call    0 returned 100%
    #####:   31:  return SymbolTable::lookupNearestSymbolFrom(getOperation(), symbolRef);
call    0 never executed
        -:   32:}
        -:   33:
        -:   34://===----------------------------------------------------------------------===//
        -:   35:// CallInterfaces
        -:   36://===----------------------------------------------------------------------===//
        -:   37:
        -:   38:#include "mlir/Interfaces/CallInterfaces.cpp.inc"
