        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/Linalg/TestPadFusion.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestPadFusion.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestPadFusion.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestPadFusion.cpp - Test fusion of pad op with Linalg ops ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass for testing fusion of pad ops with its producer
        -:   10:// Linalg op.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Pass/PassManager.h"
        -:   18:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:namespace {
  129226*:   23:struct TestPadFusionPass
call    0 never executed
call    1 returned 100%
        -:   24:    : public PassWrapper<TestPadFusionPass, OperationPass<>> {
function _ZN12_GLOBAL__N_117TestPadFusionPass13resolveTypeIDEv called 129226 returned 100% blocks executed 100%
   129226:   25:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestPadFusionPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   26:
function _ZNK12_GLOBAL__N_117TestPadFusionPass20getDependentDialectsERN4mlir15DialectRegistryE called 590 returned 100% blocks executed 100%
      590:   27:  void getDependentDialects(DialectRegistry &registry) const override {
      590:   28:    registry
      590:   29:        .insert<AffineDialect, linalg::LinalgDialect, tensor::TensorDialect>();
call    0 returned 100%
      590:   30:  }
        -:   31:
function _ZNK12_GLOBAL__N_117TestPadFusionPass11getArgumentEv called 128663 returned 100% blocks executed 100%
   128663:   32:  StringRef getArgument() const final { return "test-linalg-pad-fusion"; }
function _ZNK12_GLOBAL__N_117TestPadFusionPass14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   33:  StringRef getDescription() const final { return "Test PadOp fusion"; }
        -:   34:
function _ZN12_GLOBAL__N_117TestPadFusionPass14runOnOperationEv called 511 returned 100% blocks executed 69%
      511:   35:  void runOnOperation() override {
      511:   36:    MLIRContext *context = &getContext();
call    0 returned 100%
     1022:   37:    RewritePatternSet patterns(context);
call    0 returned 100%
      511:   38:    linalg::populateFuseTensorPadWithProducerLinalgOpPatterns(patterns);
call    0 returned 100%
      511:   39:    if (failed(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      511:   40:            applyPatternsAndFoldGreedily(getOperation(), std::move(patterns))))
call    0 returned 100%
    #####:   41:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:   42:  }
        -:   43:};
        -:   44:} // namespace
        -:   45:
        -:   46:namespace mlir {
        -:   47:namespace test {
function _ZN4mlir4test21registerTestPadFusionEv called 128636 returned 100% blocks executed 100%
   128636:   48:void registerTestPadFusion() { PassRegistration<TestPadFusionPass>(); }
call    0 returned 100%
        -:   49:} // namespace test
        -:   50:} // namespace mlir
