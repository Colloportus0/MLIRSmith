        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/SPIRV/Linking/ModuleCombiner/ModuleCombiner.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/Linking/ModuleCombiner/CMakeFiles/obj.MLIRSPIRVModuleCombiner.dir/ModuleCombiner.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/Linking/ModuleCombiner/CMakeFiles/obj.MLIRSPIRVModuleCombiner.dir/ModuleCombiner.cpp.gcda
        -:    0:Runs:128649
        -:    1://===- ModuleCombiner.cpp - MLIR SPIR-V Module Combiner ---------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the SPIR-V module combiner library.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SPIRV/Linking/ModuleCombiner.h"
        -:   14:
        -:   15:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   18:#include "mlir/IR/Attributes.h"
        -:   19:#include "mlir/IR/Builders.h"
        -:   20:#include "mlir/IR/SymbolTable.h"
        -:   21:#include "llvm/ADT/ArrayRef.h"
        -:   22:#include "llvm/ADT/Hashing.h"
        -:   23:#include "llvm/ADT/STLExtras.h"
        -:   24:#include "llvm/ADT/StringExtras.h"
        -:   25:#include "llvm/ADT/StringMap.h"
        -:   26:
        -:   27:using namespace mlir;
        -:   28:
        -:   29:static constexpr unsigned maxFreeID = 1 << 20;
        -:   30:
        -:   31:/// Returns an unsed symbol in `module` for `oldSymbolName` by trying numeric
        -:   32:/// suffix in `lastUsedID`.
function _ZL12renameSymbolN4llvm9StringRefERjN4mlir5spirv8ModuleOpE called 0 returned 0% blocks executed 0%
    #####:   33:static StringAttr renameSymbol(StringRef oldSymName, unsigned &lastUsedID,
        -:   34:                               spirv::ModuleOp module) {
    #####:   35:  SmallString<64> newSymName(oldSymName);
call    0 never executed
    #####:   36:  newSymName.push_back('_');
call    0 never executed
        -:   37:
    #####:   38:  MLIRContext *ctx = module->getContext();
call    0 never executed
        -:   39:
    #####:   40:  while (lastUsedID < maxFreeID) {
branch  0 never executed
branch  1 never executed
    #####:   41:    auto possible = StringAttr::get(ctx, newSymName + Twine(++lastUsedID));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   42:    if (!SymbolTable::lookupSymbolIn(module, possible))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:      return possible;
        -:   44:  }
        -:   45:
    #####:   46:  return StringAttr::get(ctx, newSymName);
call    0 never executed
call    1 never executed
        -:   47:}
        -:   48:
        -:   49:/// Checks if a symbol with the same name as `op` already exists in `source`.
        -:   50:/// If so, renames `op` and updates all its references in `target`.
function _ZL22updateSymbolAndAllUsesN4mlir17SymbolOpInterfaceENS_5spirv8ModuleOpES2_Rj called 0 returned 0% blocks executed 0%
    #####:   51:static LogicalResult updateSymbolAndAllUses(SymbolOpInterface op,
        -:   52:                                            spirv::ModuleOp target,
        -:   53:                                            spirv::ModuleOp source,
        -:   54:                                            unsigned &lastUsedID) {
    #####:   55:  if (!SymbolTable::lookupSymbolIn(source, op.getName()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   56:    return success();
        -:   57:
    #####:   58:  StringRef oldSymName = op.getName();
call    0 never executed
    #####:   59:  StringAttr newSymName = renameSymbol(oldSymName, lastUsedID, target);
call    0 never executed
        -:   60:
    #####:   61:  if (failed(SymbolTable::replaceAllSymbolUses(op, newSymName, target)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    return op.emitError("unable to update all symbol uses for ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   63:           << oldSymName << " to " << newSymName;
call    0 never executed
call    1 never executed
call    2 never executed
        -:   64:
    #####:   65:  SymbolTable::setSymbolName(op, newSymName);
call    0 never executed
    #####:   66:  return success();
        -:   67:}
        -:   68:
        -:   69:/// Computes a hash code to represent `symbolOp` based on all its attributes
        -:   70:/// except for the symbol name.
        -:   71:///
        -:   72:/// Note: We use the operation's name (not the symbol name) as part of the hash
        -:   73:/// computation. This prevents, for example, mistakenly considering a global
        -:   74:/// variable and a spec constant as duplicates because their descriptor set +
        -:   75:/// binding and spec_id, respectively, happen to hash to the same value.
        -:   76:static llvm::hash_code computeHash(SymbolOpInterface symbolOp) {
        -:   77:  auto range =
function _ZZL11computeHashN4mlir17SymbolOpInterfaceEENKUlNS_14NamedAttributeEE_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   78:      llvm::make_filter_range(symbolOp->getAttrs(), [](NamedAttribute attr) {
    #####:   79:        return attr.getName() != SymbolTable::getSymbolAttrName();
call    0 never executed
        -:   80:      });
        -:   81:
        -:   82:  return llvm::hash_combine(
        -:   83:      symbolOp->getName(),
        -:   84:      llvm::hash_combine_range(range.begin(), range.end()));
        -:   85:}
        -:   86:
        -:   87:namespace mlir {
        -:   88:namespace spirv {
        -:   89:
function _ZN4mlir5spirv7combineEN4llvm8ArrayRefINS0_8ModuleOpEEERNS_9OpBuilderENS1_12function_refIFvS3_NS1_9StringRefES8_EEE called 0 returned 0% blocks executed 0%
    #####:   90:OwningOpRef<spirv::ModuleOp> combine(ArrayRef<spirv::ModuleOp> inputModules,
        -:   91:                                     OpBuilder &combinedModuleBuilder,
        -:   92:                                     SymbolRenameListener symRenameListener) {
    #####:   93:  if (inputModules.empty())
branch  0 never executed
branch  1 never executed
    #####:   94:    return nullptr;
        -:   95:
    #####:   96:  spirv::ModuleOp firstModule = inputModules.front();
call    0 never executed
    #####:   97:  auto addressingModel = firstModule.getAddressingModel();
call    0 never executed
    #####:   98:  auto memoryModel = firstModule.getMemoryModel();
call    0 never executed
    #####:   99:  auto vceTriple = firstModule.getVceTriple();
call    0 never executed
        -:  100:
        -:  101:  // First check whether there are conflicts between addressing/memory model.
        -:  102:  // Return early if so.
    #####:  103:  for (auto module : inputModules) {
branch  0 never executed
branch  1 never executed
    #####:  104:    if (module.getAddressingModel() != addressingModel ||
call    0 never executed
    #####:  105:        module.getMemoryModel() != memoryModel ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  106:        module.getVceTriple() != vceTriple) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  107:      module.emitError("input modules differ in addressing model, memory "
call    0 never executed
call    1 never executed
call    2 never executed
        -:  108:                       "model, and/or VCE triple");
    #####:  109:      return nullptr;
        -:  110:    }
        -:  111:  }
        -:  112:
    #####:  113:  auto combinedModule = combinedModuleBuilder.create<spirv::ModuleOp>(
    #####:  114:      firstModule.getLoc(), addressingModel, memoryModel, vceTriple);
call    0 never executed
call    1 never executed
    #####:  115:  combinedModuleBuilder.setInsertionPointToStart(combinedModule.getBody());
call    0 never executed
        -:  116:
        -:  117:  // In some cases, a symbol in the (current state of the) combined module is
        -:  118:  // renamed in order to enable the conflicting symbol in the input module
        -:  119:  // being merged. For example, if the conflict is between a global variable in
        -:  120:  // the current combined module and a function in the input module, the global
        -:  121:  // variable is renamed. In order to notify listeners of the symbol updates in
        -:  122:  // such cases, we need to keep track of the module from which the renamed
        -:  123:  // symbol in the combined module originated. This map keeps such information.
    #####:  124:  llvm::StringMap<spirv::ModuleOp> symNameToModuleMap;
        -:  125:
    #####:  126:  unsigned lastUsedID = 0;
        -:  127:
    #####:  128:  for (auto inputModule : inputModules) {
branch  0 never executed
branch  1 never executed
    #####:  129:    OwningOpRef<spirv::ModuleOp> moduleClone = inputModule.clone();
call    0 never executed
call    1 never executed
        -:  130:
        -:  131:    // In the combined module, rename all symbols that conflict with symbols
        -:  132:    // from the current input module. This renaming applies to all ops except
        -:  133:    // for spirv.funcs. This way, if the conflicting op in the input module is
        -:  134:    // non-spirv.func, we rename that symbol instead and maintain the spirv.func
        -:  135:    // in the combined module name as it is.
    #####:  136:    for (auto &op : *combinedModule.getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  137:      auto symbolOp = dyn_cast<SymbolOpInterface>(op);
call    0 never executed
    #####:  138:      if (!symbolOp)
branch  0 never executed
branch  1 never executed
    #####:  139:        continue;
        -:  140:
    #####:  141:      StringRef oldSymName = symbolOp.getName();
call    0 never executed
        -:  142:
    #####:  143:      if (!isa<FuncOp>(op) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:          failed(updateSymbolAndAllUses(symbolOp, combinedModule, *moduleClone,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  145:                                        lastUsedID)))
    #####:  146:        return nullptr;
        -:  147:
    #####:  148:      StringRef newSymName = symbolOp.getName();
call    0 never executed
        -:  149:
    #####:  150:      if (symRenameListener && oldSymName != newSymName) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  151:        spirv::ModuleOp originalModule = symNameToModuleMap.lookup(oldSymName);
call    0 never executed
        -:  152:
    #####:  153:        if (!originalModule) {
branch  0 never executed
branch  1 never executed
    #####:  154:          inputModule.emitError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  155:              "unable to find original spirv::ModuleOp for symbol ")
    #####:  156:              << oldSymName;
call    0 never executed
    #####:  157:          return nullptr;
        -:  158:        }
        -:  159:
    #####:  160:        symRenameListener(originalModule, oldSymName, newSymName);
call    0 never executed
        -:  161:
        -:  162:        // Since the symbol name is updated, there is no need to maintain the
        -:  163:        // entry that associates the old symbol name with the original module.
    #####:  164:        symNameToModuleMap.erase(oldSymName);
call    0 never executed
        -:  165:        // Instead, add a new entry to map the new symbol name to the original
        -:  166:        // module in case it gets renamed again later.
    #####:  167:        symNameToModuleMap[newSymName] = originalModule;
call    0 never executed
        -:  168:      }
        -:  169:    }
        -:  170:
        -:  171:    // In the current input module, rename all symbols that conflict with
        -:  172:    // symbols from the combined module. This includes renaming spirv.funcs.
    #####:  173:    for (auto &op : *moduleClone->getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  174:      auto symbolOp = dyn_cast<SymbolOpInterface>(op);
call    0 never executed
    #####:  175:      if (!symbolOp)
branch  0 never executed
branch  1 never executed
    #####:  176:        continue;
        -:  177:
    #####:  178:      StringRef oldSymName = symbolOp.getName();
call    0 never executed
        -:  179:
    #####:  180:      if (failed(updateSymbolAndAllUses(symbolOp, *moduleClone, combinedModule,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  181:                                        lastUsedID)))
    #####:  182:        return nullptr;
        -:  183:
    #####:  184:      StringRef newSymName = symbolOp.getName();
call    0 never executed
        -:  185:
    #####:  186:      if (symRenameListener) {
branch  0 never executed
branch  1 never executed
    #####:  187:        if (oldSymName != newSymName)
branch  0 never executed
branch  1 never executed
    #####:  188:          symRenameListener(inputModule, oldSymName, newSymName);
call    0 never executed
        -:  189:
        -:  190:        // Insert the module associated with the symbol name.
    #####:  191:        auto emplaceResult =
    #####:  192:            symNameToModuleMap.try_emplace(newSymName, inputModule);
call    0 never executed
        -:  193:
        -:  194:        // If an entry with the same symbol name is already present, this must
        -:  195:        // be a problem with the implementation, specially clean-up of the map
        -:  196:        // while iterating over the combined module above.
    #####:  197:        if (!emplaceResult.second) {
branch  0 never executed
branch  1 never executed
    #####:  198:          inputModule.emitError("did not expect to find an entry for symbol ")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  199:              << symbolOp.getName();
call    0 never executed
call    1 never executed
    #####:  200:          return nullptr;
        -:  201:        }
        -:  202:      }
        -:  203:    }
        -:  204:
        -:  205:    // Clone all the module's ops to the combined module.
    #####:  206:    for (auto &op : *moduleClone->getBody())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  207:      combinedModuleBuilder.insert(op.clone());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  208:  }
        -:  209:
        -:  210:  // Deduplicate identical global variables, spec constants, and functions.
    #####:  211:  DenseMap<llvm::hash_code, SymbolOpInterface> hashToSymbolOp;
call    0 never executed
call    1 never executed
    #####:  212:  SmallVector<SymbolOpInterface, 0> eraseList;
call    0 never executed
call    1 never executed
        -:  213:
    #####:  214:  for (auto &op : *combinedModule.getBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  215:    SymbolOpInterface symbolOp = dyn_cast<SymbolOpInterface>(op);
call    0 never executed
    #####:  216:    if (!symbolOp)
branch  0 never executed
branch  1 never executed
    #####:  217:      continue;
        -:  218:
        -:  219:    // Do not support ops with operands or results.
        -:  220:    // Global variables, spec constants, and functions won't have
        -:  221:    // operands/results, but just for safety here.
    #####:  222:    if (op.getNumOperands() != 0 || op.getNumResults() != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  223:      continue;
        -:  224:
        -:  225:    // Deduplicating functions are not supported yet.
    #####:  226:    if (isa<FuncOp>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  227:      continue;
        -:  228:
    #####:  229:    auto result = hashToSymbolOp.try_emplace(computeHash(symbolOp), symbolOp);
call    0 never executed
call    1 never executed
    #####:  230:    if (result.second)
branch  0 never executed
branch  1 never executed
    #####:  231:      continue;
        -:  232:
    #####:  233:    SymbolOpInterface replacementSymOp = result.first->second;
call    0 never executed
        -:  234:
    #####:  235:    if (failed(SymbolTable::replaceAllSymbolUses(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  236:            symbolOp, replacementSymOp.getNameAttr(), combinedModule))) {
    #####:  237:      symbolOp.emitError("unable to update all symbol uses for ")
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  238:          << symbolOp.getName() << " to " << replacementSymOp.getName();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  239:      return nullptr;
        -:  240:    }
        -:  241:
    #####:  242:    eraseList.push_back(symbolOp);
call    0 never executed
        -:  243:  }
        -:  244:
    #####:  245:  for (auto symbolOp : eraseList)
branch  0 never executed
branch  1 never executed
    #####:  246:    symbolOp.erase();
call    0 never executed
        -:  247:
    #####:  248:  return combinedModule;
        -:  249:}
        -:  250:
        -:  251:} // namespace spirv
        -:  252:} // namespace mlir
