        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Conversion/TosaToArith/TosaToArithPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TosaToArith/CMakeFiles/obj.MLIRTosaToArith.dir/TosaToArithPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TosaToArith/CMakeFiles/obj.MLIRTosaToArith.dir/TosaToArithPass.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TosaToArithPass.cpp - Lowering Tosa to Linalg Dialect -----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This transformation pass legalizes Tosa operations to the Arith dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TosaToArith/TosaToArith.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   17:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   18:#include "mlir/IR/PatternMatch.h"
        -:   19:#include "mlir/Pass/PassManager.h"
        -:   20:#include "mlir/Transforms/DialectConversion.h"
        -:   21:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:#define GEN_PASS_DEF_TOSATOARITH
        -:   25:#include "mlir/Conversion/Passes.h.inc"
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:using namespace tosa;
        -:   30:
        -:   31:namespace {
    #####:   32:struct TosaToArith : public impl::TosaToArithBase<TosaToArith> {
call    0 never executed
        -:   33:public:
   129281:   34:  TosaToArith(TosaToArithOptions &options) : TosaToArithBase(options) {}
call    0 returned 100%
        -:   35:
function _ZN12_GLOBAL__N_111TosaToArith14runOnOperationEv called 547 returned 100% blocks executed 80%
      547:   36:  void runOnOperation() override {
      547:   37:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     1094:   38:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      547:   39:    target.addIllegalOp<tosa::ConstOp>();
call    0 returned 100%
      547:   40:    target.addLegalDialect<arith::ArithDialect>();
call    0 returned 100%
        -:   41:
      547:   42:    mlir::tosa::populateTosaToArithConversionPatterns(&patterns);
call    0 returned 100%
        -:   43:
      547:   44:    if (this->includeApplyRescale) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:      mlir::tosa::populateTosaRescaleToArithConversionPatterns(&patterns,
    #####:   46:                                                               this->use32Bit);
call    0 never executed
    #####:   47:      target.addIllegalOp<tosa::ApplyScaleOp>();
call    0 never executed
        -:   48:    }
        -:   49:
      547:   50:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      547:   51:                                      std::move(patterns))))
call    0 returned 100%
    #####:   52:      signalPassFailure();
call    0 never executed
      547:   53:  }
        -:   54:};
        -:   55:} // namespace
        -:   56:
function _ZN4mlir4tosa17createTosaToArithEbb called 129281 returned 100% blocks executed 100%
   129281:   57:std::unique_ptr<Pass> mlir::tosa::createTosaToArith(bool includeApplyRescale,
        -:   58:                                                    bool use32BitApplyRescale) {
   129281:   59:  TosaToArithOptions options = {includeApplyRescale, use32BitApplyRescale};
   129281:   60:  return std::make_unique<TosaToArith>(options);
call    0 returned 100%
        -:   61:}
