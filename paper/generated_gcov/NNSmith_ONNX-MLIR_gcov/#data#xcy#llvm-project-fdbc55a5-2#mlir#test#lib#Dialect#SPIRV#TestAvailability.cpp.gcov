        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Dialect/SPIRV/TestAvailability.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/SPIRV/CMakeFiles/MLIRSPIRVTestPasses.dir/TestAvailability.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/SPIRV/CMakeFiles/MLIRSPIRVTestPasses.dir/TestAvailability.cpp.gcda
        -:    0:Runs:128636
        -:    1://===- TestAvailability.cpp - Pass to test SPIR-V op availability ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   10:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   11:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   12:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   13:#include "mlir/IR/BuiltinOps.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// Printing op availability pass
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
        -:   22:namespace {
        -:   23:/// A pass for testing SPIR-V op availability.
   165316:   24:struct PrintOpAvailability
call    0 returned 100%
call    1 returned 100%
        -:   25:    : public PassWrapper<PrintOpAvailability, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_119PrintOpAvailability13resolveTypeIDEv called 129244 returned 100% blocks executed 100%
   129244:   26:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(PrintOpAvailability)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   27:
        -:   28:  void runOnOperation() override;
function _ZNK12_GLOBAL__N_119PrintOpAvailability11getArgumentEv called 128644 returned 100% blocks executed 100%
   128644:   29:  StringRef getArgument() const final { return "test-spirv-op-availability"; }
function _ZNK12_GLOBAL__N_119PrintOpAvailability14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:   30:  StringRef getDescription() const final {
   128636:   31:    return "Test SPIR-V op availability";
        -:   32:  }
        -:   33:};
        -:   34:} // namespace
        -:   35:
function _ZN12_GLOBAL__N_119PrintOpAvailability14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   36:void PrintOpAvailability::runOnOperation() {
    #####:   37:  auto f = getOperation();
call    0 never executed
    #####:   38:  llvm::outs() << f.getName() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   39:
    #####:   40:  Dialect *spirvDialect = getContext().getLoadedDialect("spirv");
call    0 never executed
call    1 never executed
        -:   41:
function _ZZN12_GLOBAL__N_119PrintOpAvailability14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   42:  f->walk([&](Operation *op) {
    #####:   43:    if (op->getDialect() != spirvDialect)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   44:      return WalkResult::advance();
        -:   45:
    #####:   46:    auto opName = op->getName();
call    0 never executed
    #####:   47:    auto &os = llvm::outs();
call    0 never executed
        -:   48:
    #####:   49:    if (auto minVersionIfx = dyn_cast<spirv::QueryMinVersionInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:      Optional<spirv::Version> minVersion = minVersionIfx.getMinVersion();
call    0 never executed
    #####:   51:      os << opName << " min version: ";
call    0 never executed
call    1 never executed
    #####:   52:      if (minVersion)
branch  0 never executed
branch  1 never executed
    #####:   53:        os << spirv::stringifyVersion(*minVersion) << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:   54:      else
    #####:   55:        os << "None\n";
call    0 never executed
        -:   56:    }
        -:   57:
    #####:   58:    if (auto maxVersionIfx = dyn_cast<spirv::QueryMaxVersionInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:      Optional<spirv::Version> maxVersion = maxVersionIfx.getMaxVersion();
call    0 never executed
    #####:   60:      os << opName << " max version: ";
call    0 never executed
call    1 never executed
    #####:   61:      if (maxVersion)
branch  0 never executed
branch  1 never executed
    #####:   62:        os << spirv::stringifyVersion(*maxVersion) << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:      else
    #####:   64:        os << "None\n";
call    0 never executed
        -:   65:    }
        -:   66:
    #####:   67:    if (auto extension = dyn_cast<spirv::QueryExtensionInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:      os << opName << " extensions: [";
call    0 never executed
call    1 never executed
    #####:   69:      for (const auto &exts : extension.getExtensions()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:        os << " [";
call    0 never executed
    #####:   71:        llvm::interleaveComma(exts, os, [&](spirv::Extension ext) {
call    0 never executed
    #####:   72:          os << spirv::stringifyExtension(ext);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   73:        });
    #####:   74:        os << "]";
call    0 never executed
        -:   75:      }
    #####:   76:      os << " ]\n";
call    0 never executed
        -:   77:    }
        -:   78:
    #####:   79:    if (auto capability = dyn_cast<spirv::QueryCapabilityInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:      os << opName << " capabilities: [";
call    0 never executed
call    1 never executed
    #####:   81:      for (const auto &caps : capability.getCapabilities()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:        os << " [";
call    0 never executed
    #####:   83:        llvm::interleaveComma(caps, os, [&](spirv::Capability cap) {
call    0 never executed
    #####:   84:          os << spirv::stringifyCapability(cap);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   85:        });
    #####:   86:        os << "]";
call    0 never executed
        -:   87:      }
    #####:   88:      os << " ]\n";
call    0 never executed
        -:   89:    }
    #####:   90:    os.flush();
branch  0 never executed
branch  1 never executed
        -:   91:
    #####:   92:    return WalkResult::advance();
    #####:   93:  });
call    0 never executed
    #####:   94:}
        -:   95:
        -:   96:namespace mlir {
function _ZN4mlir34registerPrintSpirvAvailabilityPassEv called 128636 returned 100% blocks executed 100%
   128636:   97:void registerPrintSpirvAvailabilityPass() {
   128636:   98:  PassRegistration<PrintOpAvailability>();
call    0 returned 100%
   128636:   99:}
        -:  100:} // namespace mlir
        -:  101:
        -:  102://===----------------------------------------------------------------------===//
        -:  103:// Converting target environment pass
        -:  104://===----------------------------------------------------------------------===//
        -:  105:
        -:  106:namespace {
        -:  107:/// A pass for testing SPIR-V op availability.
   166264:  108:struct ConvertToTargetEnv
call    0 returned 100%
call    1 returned 100%
        -:  109:    : public PassWrapper<ConvertToTargetEnv, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_118ConvertToTargetEnv13resolveTypeIDEv called 129256 returned 100% blocks executed 100%
   129256:  110:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertToTargetEnv)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  111:
function _ZNK12_GLOBAL__N_118ConvertToTargetEnv11getArgumentEv called 128651 returned 100% blocks executed 100%
   128651:  112:  StringRef getArgument() const override { return "test-spirv-target-env"; }
function _ZNK12_GLOBAL__N_118ConvertToTargetEnv14getDescriptionEv called 128636 returned 100% blocks executed 100%
   128636:  113:  StringRef getDescription() const override {
   128636:  114:    return "Test SPIR-V target environment";
        -:  115:  }
        -:  116:  void runOnOperation() override;
        -:  117:};
        -:  118:
        -:  119:struct ConvertToAtomCmpExchangeWeak : public RewritePattern {
        -:  120:  ConvertToAtomCmpExchangeWeak(MLIRContext *context);
        -:  121:  LogicalResult matchAndRewrite(Operation *op,
        -:  122:                                PatternRewriter &rewriter) const override;
        -:  123:};
        -:  124:
        -:  125:struct ConvertToBitReverse : public RewritePattern {
        -:  126:  ConvertToBitReverse(MLIRContext *context);
        -:  127:  LogicalResult matchAndRewrite(Operation *op,
        -:  128:                                PatternRewriter &rewriter) const override;
        -:  129:};
        -:  130:
        -:  131:struct ConvertToGroupNonUniformBallot : public RewritePattern {
        -:  132:  ConvertToGroupNonUniformBallot(MLIRContext *context);
        -:  133:  LogicalResult matchAndRewrite(Operation *op,
        -:  134:                                PatternRewriter &rewriter) const override;
        -:  135:};
        -:  136:
        -:  137:struct ConvertToModule : public RewritePattern {
        -:  138:  ConvertToModule(MLIRContext *context);
        -:  139:  LogicalResult matchAndRewrite(Operation *op,
        -:  140:                                PatternRewriter &rewriter) const override;
        -:  141:};
        -:  142:
        -:  143:struct ConvertToSubgroupBallot : public RewritePattern {
        -:  144:  ConvertToSubgroupBallot(MLIRContext *context);
        -:  145:  LogicalResult matchAndRewrite(Operation *op,
        -:  146:                                PatternRewriter &rewriter) const override;
        -:  147:};
        -:  148:} // namespace
        -:  149:
function _ZN12_GLOBAL__N_118ConvertToTargetEnv14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  150:void ConvertToTargetEnv::runOnOperation() {
    #####:  151:  MLIRContext *context = &getContext();
call    0 never executed
    #####:  152:  func::FuncOp fn = getOperation();
call    0 never executed
        -:  153:
    #####:  154:  auto targetEnv = fn.getOperation()
    #####:  155:                       ->getAttr(spirv::getTargetEnvAttrName())
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  156:                       .cast<spirv::TargetEnvAttr>();
    #####:  157:  if (!targetEnv) {
branch  0 never executed
branch  1 never executed
    #####:  158:    fn.emitError("missing 'spirv.target_env' attribute");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  159:    return signalPassFailure();
call    0 never executed
        -:  160:  }
        -:  161:
    #####:  162:  auto target = SPIRVConversionTarget::get(targetEnv);
call    0 never executed
        -:  163:
    #####:  164:  RewritePatternSet patterns(context);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:  patterns.add<ConvertToAtomCmpExchangeWeak, ConvertToBitReverse,
        -:  166:               ConvertToGroupNonUniformBallot, ConvertToModule,
    #####:  167:               ConvertToSubgroupBallot>(context);
call    0 never executed
        -:  168:
    #####:  169:  if (failed(applyPartialConversion(fn, *target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  170:    return signalPassFailure();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  171:}
        -:  172:
function _ZN12_GLOBAL__N_128ConvertToAtomCmpExchangeWeakC2EPN4mlir11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  173:ConvertToAtomCmpExchangeWeak::ConvertToAtomCmpExchangeWeak(MLIRContext *context)
        -:  174:    : RewritePattern("test.convert_to_atomic_compare_exchange_weak_op", 1,
    #####:  175:                     context, {"spirv.AtomicCompareExchangeWeak"}) {}
call    0 never executed
call    1 never executed
        -:  176:
        -:  177:LogicalResult
function _ZNK12_GLOBAL__N_128ConvertToAtomCmpExchangeWeak15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  178:ConvertToAtomCmpExchangeWeak::matchAndRewrite(Operation *op,
        -:  179:                                              PatternRewriter &rewriter) const {
    #####:  180:  Value ptr = op->getOperand(0);
call    0 never executed
    #####:  181:  Value value = op->getOperand(1);
call    0 never executed
    #####:  182:  Value comparator = op->getOperand(2);
call    0 never executed
        -:  183:
        -:  184:  // Create a spirv.AtomicCompareExchangeWeak op with AtomicCounterMemory bits
        -:  185:  // in memory semantics to additionally require AtomicStorage capability.
    #####:  186:  rewriter.replaceOpWithNewOp<spirv::AtomicCompareExchangeWeakOp>(
    #####:  187:      op, value.getType(), ptr, spirv::Scope::Workgroup,
    #####:  188:      spirv::MemorySemantics::AcquireRelease |
        -:  189:          spirv::MemorySemantics::AtomicCounterMemory,
    #####:  190:      spirv::MemorySemantics::Acquire, value, comparator);
call    0 never executed
    #####:  191:  return success();
        -:  192:}
        -:  193:
function _ZN12_GLOBAL__N_119ConvertToBitReverseC2EPN4mlir11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  194:ConvertToBitReverse::ConvertToBitReverse(MLIRContext *context)
        -:  195:    : RewritePattern("test.convert_to_bit_reverse_op", 1, context,
    #####:  196:                     {"spirv.BitReverse"}) {}
call    0 never executed
call    1 never executed
        -:  197:
        -:  198:LogicalResult
function _ZNK12_GLOBAL__N_119ConvertToBitReverse15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  199:ConvertToBitReverse::matchAndRewrite(Operation *op,
        -:  200:                                     PatternRewriter &rewriter) const {
    #####:  201:  Value predicate = op->getOperand(0);
call    0 never executed
        -:  202:
    #####:  203:  rewriter.replaceOpWithNewOp<spirv::BitReverseOp>(
    #####:  204:      op, op->getResult(0).getType(), predicate);
call    0 never executed
    #####:  205:  return success();
        -:  206:}
        -:  207:
function _ZN12_GLOBAL__N_130ConvertToGroupNonUniformBallotC2EPN4mlir11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  208:ConvertToGroupNonUniformBallot::ConvertToGroupNonUniformBallot(
    #####:  209:    MLIRContext *context)
        -:  210:    : RewritePattern("test.convert_to_group_non_uniform_ballot_op", 1, context,
    #####:  211:                     {"spirv.GroupNonUniformBallot"}) {}
call    0 never executed
call    1 never executed
        -:  212:
function _ZNK12_GLOBAL__N_130ConvertToGroupNonUniformBallot15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  213:LogicalResult ConvertToGroupNonUniformBallot::matchAndRewrite(
        -:  214:    Operation *op, PatternRewriter &rewriter) const {
    #####:  215:  Value predicate = op->getOperand(0);
call    0 never executed
        -:  216:
    #####:  217:  rewriter.replaceOpWithNewOp<spirv::GroupNonUniformBallotOp>(
    #####:  218:      op, op->getResult(0).getType(), spirv::Scope::Workgroup, predicate);
call    0 never executed
    #####:  219:  return success();
        -:  220:}
        -:  221:
function _ZN12_GLOBAL__N_115ConvertToModuleC2EPN4mlir11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  222:ConvertToModule::ConvertToModule(MLIRContext *context)
        -:  223:    : RewritePattern("test.convert_to_module_op", 1, context,
    #####:  224:                     {"spirv.module"}) {}
call    0 never executed
call    1 never executed
        -:  225:
        -:  226:LogicalResult
function _ZNK12_GLOBAL__N_115ConvertToModule15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  227:ConvertToModule::matchAndRewrite(Operation *op,
        -:  228:                                 PatternRewriter &rewriter) const {
    #####:  229:  rewriter.replaceOpWithNewOp<spirv::ModuleOp>(
    #####:  230:      op, spirv::AddressingModel::PhysicalStorageBuffer64,
    #####:  231:      spirv::MemoryModel::Vulkan);
call    0 never executed
    #####:  232:  return success();
        -:  233:}
        -:  234:
function _ZN12_GLOBAL__N_123ConvertToSubgroupBallotC2EPN4mlir11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:  235:ConvertToSubgroupBallot::ConvertToSubgroupBallot(MLIRContext *context)
        -:  236:    : RewritePattern("test.convert_to_subgroup_ballot_op", 1, context,
    #####:  237:                     {"spirv.KHR.SubgroupBallot"}) {}
call    0 never executed
call    1 never executed
        -:  238:
        -:  239:LogicalResult
function _ZNK12_GLOBAL__N_123ConvertToSubgroupBallot15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  240:ConvertToSubgroupBallot::matchAndRewrite(Operation *op,
        -:  241:                                         PatternRewriter &rewriter) const {
    #####:  242:  Value predicate = op->getOperand(0);
call    0 never executed
        -:  243:
    #####:  244:  rewriter.replaceOpWithNewOp<spirv::KHRSubgroupBallotOp>(
    #####:  245:      op, op->getResult(0).getType(), predicate);
call    0 never executed
    #####:  246:  return success();
        -:  247:}
        -:  248:
        -:  249:namespace mlir {
function _ZN4mlir30registerConvertToTargetEnvPassEv called 128636 returned 100% blocks executed 100%
   128636:  250:void registerConvertToTargetEnvPass() {
   128636:  251:  PassRegistration<ConvertToTargetEnv>();
call    0 returned 100%
   128636:  252:}
        -:  253:} // namespace mlir
