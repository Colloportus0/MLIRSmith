        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/AsmParser/AsmParserImpl.h
        -:    0:Graph:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/DialectSymbolParser.cpp.gcno
        -:    0:Data:../tools/mlir/lib/AsmParser/CMakeFiles/obj.MLIRAsmParser.dir/DialectSymbolParser.cpp.gcda
        -:    0:Runs:128655
        -:    1://===- AsmParserImpl.h - MLIR AsmParserImpl Class ---------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_LIB_ASMPARSER_ASMPARSERIMPL_H
        -:   10:#define MLIR_LIB_ASMPARSER_ASMPARSERIMPL_H
        -:   11:
        -:   12:#include "Parser.h"
        -:   13:#include "mlir/AsmParser/AsmParserState.h"
        -:   14:#include "mlir/IR/Builders.h"
        -:   15:#include "mlir/IR/OpImplementation.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:namespace detail {
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// AsmParserImpl
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
        -:   23:/// This class provides the implementation of the generic parser methods within
        -:   24:/// AsmParser.
        -:   25:template <typename BaseT>
        -:   26:class AsmParserImpl : public BaseT {
        -:   27:public:
54915255*:   28:  AsmParserImpl(SMLoc nameLoc, Parser &parser)
54915255*:   29:      : nameLoc(nameLoc), parser(parser) {}
call    0 returned 100%
call    1 never executed
54915255*:   30:  ~AsmParserImpl() override = default;
call    0 returned 100%
call    1 never executed
call    2 never executed
call    3 never executed
        -:   31:
        -:   32:  /// Return the location of the original name token.
function _ZNK4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10getNameLocEv called 0 returned 0% blocks executed 0%
    #####:   33:  SMLoc getNameLoc() const override { return nameLoc; }
        -:   34:
        -:   35:  //===--------------------------------------------------------------------===//
        -:   36:  // Utilities
        -:   37:  //===--------------------------------------------------------------------===//
        -:   38:
        -:   39:  /// Return if any errors were emitted during parsing.
        -:   40:  bool didEmitError() const { return emittedError; }
        -:   41:
        -:   42:  /// Emit a diagnostic at the specified location and return failure.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE9emitErrorEN4llvm5SMLocERKNS4_5TwineE called 0 returned 0% blocks executed 0%
    #####:   43:  InFlightDiagnostic emitError(SMLoc loc, const Twine &message) override {
    #####:   44:    emittedError = true;
    #####:   45:    return parser.emitError(loc, message);
call    0 never executed
        -:   46:  }
        -:   47:
        -:   48:  /// Return a builder which provides useful access to MLIRContext, global
        -:   49:  /// objects like types and attributes.
function _ZNK4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10getBuilderEv called 411388882 returned 100% blocks executed 100%
411388882:   50:  Builder &getBuilder() const override { return parser.builder; }
        -:   51:
        -:   52:  /// Get the location of the next token and store it into the argument.  This
        -:   53:  /// always succeeds.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18getCurrentLocationEv called 1057907975 returned 100% blocks executed 100%
1057907975:   54:  SMLoc getCurrentLocation() override { return parser.getToken().getLoc(); }
call    0 returned 100%
        -:   55:
        -:   56:  /// Re-encode the given source location as an MLIR location and return it.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19getEncodedSourceLocEN4llvm5SMLocE called 23749398 returned 100% blocks executed 100%
 23749398:   57:  Location getEncodedSourceLoc(SMLoc loc) override {
 23749398:   58:    return parser.getEncodedSourceLocation(loc);
call    0 returned 100%
        -:   59:  }
        -:   60:
        -:   61:  //===--------------------------------------------------------------------===//
        -:   62:  // Token Parsing
        -:   63:  //===--------------------------------------------------------------------===//
        -:   64:
        -:   65:  using Delimiter = AsmParser::Delimiter;
        -:   66:
        -:   67:  /// Parse a `->` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10parseArrowEv called 0 returned 0% blocks executed 0%
    #####:   68:  ParseResult parseArrow() override {
    #####:   69:    return parser.parseToken(Token::arrow, "expected '->'");
call    0 never executed
call    1 never executed
        -:   70:  }
        -:   71:
        -:   72:  /// Parses a `->` if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseOptionalArrowEv called 0 returned 0% blocks executed 0%
    #####:   73:  ParseResult parseOptionalArrow() override {
    #####:   74:    return success(parser.consumeIf(Token::arrow));
branch  0 never executed
branch  1 never executed
        -:   75:  }
        -:   76:
        -:   77:  /// Parse a '{' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE11parseLBraceEv called 0 returned 0% blocks executed 0%
    #####:   78:  ParseResult parseLBrace() override {
    #####:   79:    return parser.parseToken(Token::l_brace, "expected '{'");
call    0 never executed
call    1 never executed
        -:   80:  }
        -:   81:
        -:   82:  /// Parse a '{' token if present
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19parseOptionalLBraceEv called 0 returned 0% blocks executed 0%
    #####:   83:  ParseResult parseOptionalLBrace() override {
    #####:   84:    return success(parser.consumeIf(Token::l_brace));
branch  0 never executed
branch  1 never executed
        -:   85:  }
        -:   86:
        -:   87:  /// Parse a `}` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE11parseRBraceEv called 0 returned 0% blocks executed 0%
    #####:   88:  ParseResult parseRBrace() override {
    #####:   89:    return parser.parseToken(Token::r_brace, "expected '}'");
call    0 never executed
call    1 never executed
        -:   90:  }
        -:   91:
        -:   92:  /// Parse a `}` token if present
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19parseOptionalRBraceEv called 0 returned 0% blocks executed 0%
    #####:   93:  ParseResult parseOptionalRBrace() override {
    #####:   94:    return success(parser.consumeIf(Token::r_brace));
branch  0 never executed
branch  1 never executed
        -:   95:  }
        -:   96:
        -:   97:  /// Parse a `:` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10parseColonEv called 0 returned 0% blocks executed 0%
    #####:   98:  ParseResult parseColon() override {
    #####:   99:    return parser.parseToken(Token::colon, "expected ':'");
call    0 never executed
call    1 never executed
        -:  100:  }
        -:  101:
        -:  102:  /// Parse a `:` token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseOptionalColonEv called 0 returned 0% blocks executed 0%
    #####:  103:  ParseResult parseOptionalColon() override {
    #####:  104:    return success(parser.consumeIf(Token::colon));
branch  0 never executed
branch  1 never executed
        -:  105:  }
        -:  106:
        -:  107:  /// Parse a `,` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10parseCommaEv called 0 returned 0% blocks executed 0%
    #####:  108:  ParseResult parseComma() override {
    #####:  109:    return parser.parseToken(Token::comma, "expected ','");
call    0 never executed
call    1 never executed
        -:  110:  }
        -:  111:
        -:  112:  /// Parse a `,` token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseOptionalCommaEv called 197070063 returned 100% blocks executed 100%
197070063:  113:  ParseResult parseOptionalComma() override {
197070063:  114:    return success(parser.consumeIf(Token::comma));
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:  115:  }
        -:  116:
        -:  117:  /// Parses a `...`.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE13parseEllipsisEv called 0 returned 0% blocks executed 0%
    #####:  118:  ParseResult parseEllipsis() override {
    #####:  119:    return parser.parseToken(Token::ellipsis, "expected '...'");
call    0 never executed
call    1 never executed
        -:  120:  }
        -:  121:
        -:  122:  /// Parses a `...` if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE21parseOptionalEllipsisEv called 0 returned 0% blocks executed 0%
    #####:  123:  ParseResult parseOptionalEllipsis() override {
    #####:  124:    return success(parser.consumeIf(Token::ellipsis));
branch  0 never executed
branch  1 never executed
        -:  125:  }
        -:  126:
        -:  127:  /// Parse a `=` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10parseEqualEv called 0 returned 0% blocks executed 0%
    #####:  128:  ParseResult parseEqual() override {
    #####:  129:    return parser.parseToken(Token::equal, "expected '='");
call    0 never executed
call    1 never executed
        -:  130:  }
        -:  131:
        -:  132:  /// Parse a `=` token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseOptionalEqualEv called 0 returned 0% blocks executed 0%
    #####:  133:  ParseResult parseOptionalEqual() override {
    #####:  134:    return success(parser.consumeIf(Token::equal));
branch  0 never executed
branch  1 never executed
        -:  135:  }
        -:  136:
        -:  137:  /// Parse a '<' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE9parseLessEv called 70135404 returned 100% blocks executed 100%
 70135404:  138:  ParseResult parseLess() override {
 70135404:  139:    return parser.parseToken(Token::less, "expected '<'");
call    0 returned 100%
call    1 returned 100%
        -:  140:  }
        -:  141:
        -:  142:  /// Parse a `<` token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE17parseOptionalLessEv called 82828350 returned 100% blocks executed 100%
 82828350:  143:  ParseResult parseOptionalLess() override {
 82828350:  144:    return success(parser.consumeIf(Token::less));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  145:  }
        -:  146:
        -:  147:  /// Parse a '>' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE12parseGreaterEv called 152963754 returned 100% blocks executed 100%
152963754:  148:  ParseResult parseGreater() override {
152963754:  149:    return parser.parseToken(Token::greater, "expected '>'");
call    0 returned 100%
call    1 returned 100%
        -:  150:  }
        -:  151:
        -:  152:  /// Parse a `>` token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalGreaterEv called 0 returned 0% blocks executed 0%
    #####:  153:  ParseResult parseOptionalGreater() override {
    #####:  154:    return success(parser.consumeIf(Token::greater));
branch  0 never executed
branch  1 never executed
        -:  155:  }
        -:  156:
        -:  157:  /// Parse a `(` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE11parseLParenEv called 23749398 returned 100% blocks executed 100%
 23749398:  158:  ParseResult parseLParen() override {
 23749398:  159:    return parser.parseToken(Token::l_paren, "expected '('");
call    0 returned 100%
call    1 returned 100%
        -:  160:  }
        -:  161:
        -:  162:  /// Parses a '(' if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19parseOptionalLParenEv called 0 returned 0% blocks executed 0%
    #####:  163:  ParseResult parseOptionalLParen() override {
    #####:  164:    return success(parser.consumeIf(Token::l_paren));
branch  0 never executed
branch  1 never executed
        -:  165:  }
        -:  166:
        -:  167:  /// Parse a `)` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE11parseRParenEv called 23749398 returned 100% blocks executed 100%
 23749398:  168:  ParseResult parseRParen() override {
 23749398:  169:    return parser.parseToken(Token::r_paren, "expected ')'");
call    0 returned 100%
call    1 returned 100%
        -:  170:  }
        -:  171:
        -:  172:  /// Parses a ')' if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19parseOptionalRParenEv called 23749398 returned 100% blocks executed 50%
 23749398:  173:  ParseResult parseOptionalRParen() override {
 23749398:  174:    return success(parser.consumeIf(Token::r_paren));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  175:  }
        -:  176:
        -:  177:  /// Parse a `[` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE12parseLSquareEv called 0 returned 0% blocks executed 0%
    #####:  178:  ParseResult parseLSquare() override {
    #####:  179:    return parser.parseToken(Token::l_square, "expected '['");
call    0 never executed
call    1 never executed
        -:  180:  }
        -:  181:
        -:  182:  /// Parses a '[' if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalLSquareEv called 0 returned 0% blocks executed 0%
    #####:  183:  ParseResult parseOptionalLSquare() override {
    #####:  184:    return success(parser.consumeIf(Token::l_square));
branch  0 never executed
branch  1 never executed
        -:  185:  }
        -:  186:
        -:  187:  /// Parse a `]` token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE12parseRSquareEv called 0 returned 0% blocks executed 0%
    #####:  188:  ParseResult parseRSquare() override {
    #####:  189:    return parser.parseToken(Token::r_square, "expected ']'");
call    0 never executed
call    1 never executed
        -:  190:  }
        -:  191:
        -:  192:  /// Parses a ']' if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalRSquareEv called 0 returned 0% blocks executed 0%
    #####:  193:  ParseResult parseOptionalRSquare() override {
    #####:  194:    return success(parser.consumeIf(Token::r_square));
branch  0 never executed
branch  1 never executed
        -:  195:  }
        -:  196:
        -:  197:  /// Parses a '?' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE13parseQuestionEv called 0 returned 0% blocks executed 0%
    #####:  198:  ParseResult parseQuestion() override {
    #####:  199:    return parser.parseToken(Token::question, "expected '?'");
call    0 never executed
call    1 never executed
        -:  200:  }
        -:  201:
        -:  202:  /// Parses a '?' if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE21parseOptionalQuestionEv called 0 returned 0% blocks executed 0%
    #####:  203:  ParseResult parseOptionalQuestion() override {
    #####:  204:    return success(parser.consumeIf(Token::question));
branch  0 never executed
branch  1 never executed
        -:  205:  }
        -:  206:
        -:  207:  /// Parses a '*' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE9parseStarEv called 0 returned 0% blocks executed 0%
    #####:  208:  ParseResult parseStar() override {
    #####:  209:    return parser.parseToken(Token::star, "expected '*'");
call    0 never executed
call    1 never executed
        -:  210:  }
        -:  211:
        -:  212:  /// Parses a '*' if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE17parseOptionalStarEv called 0 returned 0% blocks executed 0%
    #####:  213:  ParseResult parseOptionalStar() override {
    #####:  214:    return success(parser.consumeIf(Token::star));
branch  0 never executed
branch  1 never executed
        -:  215:  }
        -:  216:
        -:  217:  /// Parses a '+' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE9parsePlusEv called 0 returned 0% blocks executed 0%
    #####:  218:  ParseResult parsePlus() override {
    #####:  219:    return parser.parseToken(Token::plus, "expected '+'");
call    0 never executed
call    1 never executed
        -:  220:  }
        -:  221:
        -:  222:  /// Parses a '+' token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE17parseOptionalPlusEv called 0 returned 0% blocks executed 0%
    #####:  223:  ParseResult parseOptionalPlus() override {
    #####:  224:    return success(parser.consumeIf(Token::plus));
branch  0 never executed
branch  1 never executed
        -:  225:  }
        -:  226:
        -:  227:  /// Parse a '|' token.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE16parseVerticalBarEv called 0 returned 0% blocks executed 0%
    #####:  228:  ParseResult parseVerticalBar() override {
    #####:  229:    return parser.parseToken(Token::vertical_bar, "expected '|'");
call    0 never executed
call    1 never executed
        -:  230:  }
        -:  231:
        -:  232:  /// Parse a '|' token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE24parseOptionalVerticalBarEv called 0 returned 0% blocks executed 0%
    #####:  233:  ParseResult parseOptionalVerticalBar() override {
    #####:  234:    return success(parser.consumeIf(Token::vertical_bar));
branch  0 never executed
branch  1 never executed
        -:  235:  }
        -:  236:
        -:  237:  /// Parses a quoted string token if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19parseOptionalStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 23749398 returned 100% blocks executed 25%
 23749398:  238:  ParseResult parseOptionalString(std::string *string) override {
 23749398:  239:    if (!parser.getToken().is(Token::string))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
 23749398:  240:      return failure();
        -:  241:
    #####:  242:    if (string)
branch  0 never executed
branch  1 never executed
    #####:  243:      *string = parser.getToken().getStringValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  244:    parser.consumeToken();
call    0 never executed
    #####:  245:    return success();
        -:  246:  }
        -:  247:
        -:  248:  /// Parse a floating point value from the stream.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE10parseFloatERd called 0 returned 0% blocks executed 0%
    #####:  249:  ParseResult parseFloat(double &result) override {
    #####:  250:    bool isNegative = parser.consumeIf(Token::minus);
branch  0 never executed
branch  1 never executed
    #####:  251:    Token curTok = parser.getToken();
call    0 never executed
    #####:  252:    SMLoc loc = curTok.getLoc();
call    0 never executed
        -:  253:
        -:  254:    // Check for a floating point value.
    #####:  255:    if (curTok.is(Token::floatliteral)) {
branch  0 never executed
branch  1 never executed
    #####:  256:      auto val = curTok.getFloatingPointValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  257:      if (!val)
branch  0 never executed
branch  1 never executed
    #####:  258:        return emitError(loc, "floating point value too large");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  259:      parser.consumeToken(Token::floatliteral);
call    0 never executed
    #####:  260:      result = isNegative ? -*val : *val;
branch  0 never executed
branch  1 never executed
    #####:  261:      return success();
        -:  262:    }
        -:  263:
        -:  264:    // Check for a hexadecimal float value.
    #####:  265:    if (curTok.is(Token::integer)) {
branch  0 never executed
branch  1 never executed
    #####:  266:      Optional<APFloat> apResult;
    #####:  267:      if (failed(parser.parseFloatFromIntegerLiteral(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:              apResult, curTok, isNegative, APFloat::IEEEdouble(),
        -:  269:              /*typeSizeInBits=*/64)))
    #####:  270:        return failure();
        -:  271:
    #####:  272:      parser.consumeToken(Token::integer);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  273:      result = apResult->convertToDouble();
call    0 never executed
    #####:  274:      return success();
        -:  275:    }
        -:  276:
    #####:  277:    return emitError(loc, "expected floating point literal");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  278:  }
        -:  279:
        -:  280:  /// Parse an optional integer value from the stream.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalIntegerERN4llvm5APIntE called 129212308 returned 100% blocks executed 100%
129212308:  281:  OptionalParseResult parseOptionalInteger(APInt &result) override {
129212308:  282:    return parser.parseOptionalInteger(result);
call    0 returned 100%
        -:  283:  }
        -:  284:
        -:  285:  /// Parse a list of comma-separated items with an optional delimiter.  If a
        -:  286:  /// delimiter is provided, then an empty list is allowed.  If not, then at
        -:  287:  /// least one element will be parsed.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE23parseCommaSeparatedListENS_9AsmParser9DelimiterEN4llvm12function_refIFNS_11ParseResultEvEEENS6_9StringRefE called 0 returned 0% blocks executed 0%
    #####:  288:  ParseResult parseCommaSeparatedList(Delimiter delimiter,
        -:  289:                                      function_ref<ParseResult()> parseElt,
        -:  290:                                      StringRef contextMessage) override {
    #####:  291:    return parser.parseCommaSeparatedList(delimiter, parseElt, contextMessage);
call    0 never executed
        -:  292:  }
        -:  293:
        -:  294:  //===--------------------------------------------------------------------===//
        -:  295:  // Keyword Parsing
        -:  296:  //===--------------------------------------------------------------------===//
        -:  297:
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE12parseKeywordEN4llvm9StringRefERKNS4_5TwineE called 46383958 returned 100% blocks executed 38%
 46383958:  298:  ParseResult parseKeyword(StringRef keyword, const Twine &msg) override {
 46383958:  299:    if (parser.getToken().isCodeCompletion())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  300:      return parser.codeCompleteExpectedTokens(keyword);
call    0 never executed
        -:  301:
 46383958:  302:    auto loc = getCurrentLocation();
call    0 returned 100%
 46383958:  303:    if (parseOptionalKeyword(keyword))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  304:      return emitError(loc, "expected '") << keyword << "'" << msg;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
 46383958:  305:    return success();
        -:  306:  }
        -:  307:  using AsmParser::parseKeyword;
        -:  308:
        -:  309:  /// Parse the given keyword if present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalKeywordEN4llvm9StringRefE called 93882754 returned 100% blocks executed 80%
 93882754:  310:  ParseResult parseOptionalKeyword(StringRef keyword) override {
 93882754:  311:    if (parser.getToken().isCodeCompletion())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  312:      return parser.codeCompleteOptionalTokens(keyword);
call    0 never executed
        -:  313:
        -:  314:    // Check that the current token has the same spelling.
 93882754:  315:    if (!parser.isCurrentTokenAKeyword() ||
call    0 returned 100%
branch  1 taken 49% (fallthrough)
branch  2 taken 51%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
 46383958:  316:        parser.getTokenSpelling() != keyword)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
 47498796:  317:      return failure();
 46383958:  318:    parser.consumeToken();
call    0 returned 100%
 46383958:  319:    return success();
        -:  320:  }
        -:  321:
        -:  322:  /// Parse a keyword, if present, into 'keyword'.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalKeywordEPN4llvm9StringRefE called 152966314 returned 100% blocks executed 83%
152966314:  323:  ParseResult parseOptionalKeyword(StringRef *keyword) override {
        -:  324:    // Check that the current token is a keyword.
152966314:  325:    if (!parser.isCurrentTokenAKeyword())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  326:      return failure();
        -:  327:
152966314:  328:    *keyword = parser.getTokenSpelling();
call    0 returned 100%
152966314:  329:    parser.consumeToken();
call    0 returned 100%
152966314:  330:    return success();
        -:  331:  }
        -:  332:
        -:  333:  /// Parse a keyword if it is one of the 'allowedKeywords'.
        -:  334:  ParseResult
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE20parseOptionalKeywordEPN4llvm9StringRefENS4_8ArrayRefIS5_EE called 0 returned 0% blocks executed 0%
    #####:  335:  parseOptionalKeyword(StringRef *keyword,
        -:  336:                       ArrayRef<StringRef> allowedKeywords) override {
    #####:  337:    if (parser.getToken().isCodeCompletion())
branch  0 never executed
branch  1 never executed
    #####:  338:      return parser.codeCompleteOptionalTokens(allowedKeywords);
call    0 never executed
        -:  339:
        -:  340:    // Check that the current token is a keyword.
    #####:  341:    if (!parser.isCurrentTokenAKeyword())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  342:      return failure();
        -:  343:
    #####:  344:    StringRef currentKeyword = parser.getTokenSpelling();
branch  0 never executed
branch  1 never executed
    #####:  345:    if (llvm::is_contained(allowedKeywords, currentKeyword)) {
branch  0 never executed
branch  1 never executed
    #####:  346:      *keyword = currentKeyword;
    #####:  347:      parser.consumeToken();
call    0 never executed
    #####:  348:      return success();
        -:  349:    }
        -:  350:
    #####:  351:    return failure();
        -:  352:  }
        -:  353:
        -:  354:  /// Parse an optional keyword or string and set instance into 'result'.`
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE28parseOptionalKeywordOrStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  355:  ParseResult parseOptionalKeywordOrString(std::string *result) override {
    #####:  356:    StringRef keyword;
    #####:  357:    if (succeeded(parseOptionalKeyword(&keyword))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  358:      *result = keyword.str();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  359:      return success();
        -:  360:    }
        -:  361:
    #####:  362:    return parseOptionalString(result);
call    0 never executed
        -:  363:  }
        -:  364:
        -:  365:  //===--------------------------------------------------------------------===//
        -:  366:  // Attribute Parsing
        -:  367:  //===--------------------------------------------------------------------===//
        -:  368:
        -:  369:  /// Parse an arbitrary attribute and return it in result.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE14parseAttributeERNS_9AttributeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  370:  ParseResult parseAttribute(Attribute &result, Type type) override {
    #####:  371:    result = parser.parseAttribute(type);
call    0 never executed
    #####:  372:    return success(static_cast<bool>(result));
        -:  373:  }
        -:  374:
        -:  375:  /// Parse a custom attribute with the provided callback, unless the next
        -:  376:  /// token is `#`, in which case the generic parser is invoked.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE32parseCustomAttributeWithFallbackERNS_9AttributeENS_4TypeEN4llvm12function_refIFNS_11ParseResultES5_S6_EEE called 0 returned 0% blocks executed 0%
    #####:  377:  ParseResult parseCustomAttributeWithFallback(
        -:  378:      Attribute &result, Type type,
        -:  379:      function_ref<ParseResult(Attribute &result, Type type)> parseAttribute)
        -:  380:      override {
    #####:  381:    if (parser.getToken().isNot(Token::hash_identifier))
branch  0 never executed
branch  1 never executed
    #####:  382:      return parseAttribute(result, type);
call    0 never executed
    #####:  383:    result = parser.parseAttribute(type);
call    0 never executed
    #####:  384:    return success(static_cast<bool>(result));
        -:  385:  }
        -:  386:
        -:  387:  /// Parse a custom attribute with the provided callback, unless the next
        -:  388:  /// token is `#`, in which case the generic parser is invoked.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE27parseCustomTypeWithFallbackERNS_4TypeEN4llvm12function_refIFNS_11ParseResultES5_EEE called 0 returned 0% blocks executed 0%
    #####:  389:  ParseResult parseCustomTypeWithFallback(
        -:  390:      Type &result,
        -:  391:      function_ref<ParseResult(Type &result)> parseType) override {
    #####:  392:    if (parser.getToken().isNot(Token::exclamation_identifier))
branch  0 never executed
branch  1 never executed
    #####:  393:      return parseType(result);
call    0 never executed
    #####:  394:    result = parser.parseType();
call    0 never executed
    #####:  395:    return success(static_cast<bool>(result));
        -:  396:  }
        -:  397:
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE22parseOptionalAttributeERNS_9AttributeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  398:  OptionalParseResult parseOptionalAttribute(Attribute &result,
        -:  399:                                             Type type) override {
    #####:  400:    return parser.parseOptionalAttribute(result, type);
call    0 never executed
        -:  401:  }
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE22parseOptionalAttributeERNS_9ArrayAttrENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  402:  OptionalParseResult parseOptionalAttribute(ArrayAttr &result,
        -:  403:                                             Type type) override {
    #####:  404:    return parser.parseOptionalAttribute(result, type);
call    0 never executed
        -:  405:  }
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE22parseOptionalAttributeERNS_10StringAttrENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  406:  OptionalParseResult parseOptionalAttribute(StringAttr &result,
        -:  407:                                             Type type) override {
    #####:  408:    return parser.parseOptionalAttribute(result, type);
call    0 never executed
        -:  409:  }
        -:  410:
        -:  411:  /// Parse a named dictionary into 'result' if it is present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE21parseOptionalAttrDictERNS_13NamedAttrListE called 0 returned 0% blocks executed 0%
    #####:  412:  ParseResult parseOptionalAttrDict(NamedAttrList &result) override {
    #####:  413:    if (parser.getToken().isNot(Token::l_brace))
branch  0 never executed
branch  1 never executed
    #####:  414:      return success();
    #####:  415:    return parser.parseAttributeDict(result);
call    0 never executed
        -:  416:  }
        -:  417:
        -:  418:  /// Parse a named dictionary into 'result' if the `attributes` keyword is
        -:  419:  /// present.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE32parseOptionalAttrDictWithKeywordERNS_13NamedAttrListE called 0 returned 0% blocks executed 0%
    #####:  420:  ParseResult parseOptionalAttrDictWithKeyword(NamedAttrList &result) override {
    #####:  421:    if (failed(parseOptionalKeyword("attributes")))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  422:      return success();
    #####:  423:    return parser.parseAttributeDict(result);
call    0 never executed
        -:  424:  }
        -:  425:
        -:  426:  /// Parse an affine map instance into 'map'.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE14parseAffineMapERNS_9AffineMapE called 0 returned 0% blocks executed 0%
    #####:  427:  ParseResult parseAffineMap(AffineMap &map) override {
    #####:  428:    return parser.parseAffineMapReference(map);
call    0 never executed
        -:  429:  }
        -:  430:
        -:  431:  /// Parse an integer set instance into 'set'.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE15printIntegerSetERNS_10IntegerSetE called 0 returned 0% blocks executed 0%
    #####:  432:  ParseResult printIntegerSet(IntegerSet &set) override {
    #####:  433:    return parser.parseIntegerSetReference(set);
call    0 never executed
        -:  434:  }
        -:  435:
        -:  436:  //===--------------------------------------------------------------------===//
        -:  437:  // Identifier Parsing
        -:  438:  //===--------------------------------------------------------------------===//
        -:  439:
        -:  440:  /// Parse an optional @-identifier and store it (without the '@' symbol) in a
        -:  441:  /// string attribute named 'attrName'.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE23parseOptionalSymbolNameERNS_10StringAttrE called 0 returned 0% blocks executed 0%
    #####:  442:  ParseResult parseOptionalSymbolName(StringAttr &result) override {
    #####:  443:    Token atToken = parser.getToken();
branch  0 never executed
branch  1 never executed
    #####:  444:    if (atToken.isNot(Token::at_identifier))
branch  0 never executed
branch  1 never executed
    #####:  445:      return failure();
        -:  446:
    #####:  447:    result = getBuilder().getStringAttr(atToken.getSymbolReference());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  448:    parser.consumeToken();
call    0 never executed
        -:  449:
        -:  450:    // If we are populating the assembly parser state, record this as a symbol
        -:  451:    // reference.
    #####:  452:    if (parser.getState().asmState) {
branch  0 never executed
branch  1 never executed
    #####:  453:      parser.getState().asmState->addUses(SymbolRefAttr::get(result),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  454:                                          atToken.getLocRange());
call    0 never executed
call    1 never executed
        -:  455:    }
    #####:  456:    return success();
        -:  457:  }
        -:  458:
        -:  459:  //===--------------------------------------------------------------------===//
        -:  460:  // Resource Parsing
        -:  461:  //===--------------------------------------------------------------------===//
        -:  462:
        -:  463:  /// Parse a handle to a resource within the assembly format.
        -:  464:  FailureOr<AsmDialectResourceHandle>
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE19parseResourceHandleEPNS_7DialectE called 0 returned 0% blocks executed 0%
    #####:  465:  parseResourceHandle(Dialect *dialect) override {
    #####:  466:    const auto *interface = dyn_cast<OpAsmDialectInterface>(dialect);
call    0 never executed
    #####:  467:    if (!interface) {
branch  0 never executed
branch  1 never executed
    #####:  468:      return parser.emitError() << "dialect '" << dialect->getNamespace()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  469:                                << "' does not expect resource handles";
call    0 never executed
        -:  470:    }
    #####:  471:    StringRef resourceName;
    #####:  472:    return parser.parseResourceHandle(interface, resourceName);
call    0 never executed
        -:  473:  }
        -:  474:
        -:  475:  //===--------------------------------------------------------------------===//
        -:  476:  // Type Parsing
        -:  477:  //===--------------------------------------------------------------------===//
        -:  478:
        -:  479:  /// Parse a type.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE9parseTypeERNS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  480:  ParseResult parseType(Type &result) override {
    #####:  481:    return failure(!(result = parser.parseType()));
call    0 never executed
        -:  482:  }
        -:  483:
        -:  484:  /// Parse an optional type.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE17parseOptionalTypeERNS_4TypeE called 298366716 returned 100% blocks executed 100%
298366716:  485:  OptionalParseResult parseOptionalType(Type &result) override {
298366716:  486:    return parser.parseOptionalType(result);
call    0 returned 100%
        -:  487:  }
        -:  488:
        -:  489:  /// Parse an arrow followed by a type list.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseArrowTypeListERN4llvm15SmallVectorImplINS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  490:  ParseResult parseArrowTypeList(SmallVectorImpl<Type> &result) override {
    #####:  491:    if (parseArrow() || parser.parseFunctionResultTypes(result))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  492:      return failure();
    #####:  493:    return success();
        -:  494:  }
        -:  495:
        -:  496:  /// Parse an optional arrow followed by a type list.
        -:  497:  ParseResult
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE26parseOptionalArrowTypeListERN4llvm15SmallVectorImplINS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  498:  parseOptionalArrowTypeList(SmallVectorImpl<Type> &result) override {
    #####:  499:    if (!parser.consumeIf(Token::arrow))
branch  0 never executed
branch  1 never executed
    #####:  500:      return success();
    #####:  501:    return parser.parseFunctionResultTypes(result);
call    0 never executed
        -:  502:  }
        -:  503:
        -:  504:  /// Parse a colon followed by a type.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE14parseColonTypeERNS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  505:  ParseResult parseColonType(Type &result) override {
    #####:  506:    return failure(parser.parseToken(Token::colon, "expected ':'") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  507:                   !(result = parser.parseType()));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  508:  }
        -:  509:
        -:  510:  /// Parse a colon followed by a type list, which must have at least one type.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseColonTypeListERN4llvm15SmallVectorImplINS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  511:  ParseResult parseColonTypeList(SmallVectorImpl<Type> &result) override {
    #####:  512:    if (parser.parseToken(Token::colon, "expected ':'"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  513:      return failure();
    #####:  514:    return parser.parseTypeListNoParens(result);
call    0 never executed
        -:  515:  }
        -:  516:
        -:  517:  /// Parse an optional colon followed by a type list, which if present must
        -:  518:  /// have at least one type.
        -:  519:  ParseResult
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE26parseOptionalColonTypeListERN4llvm15SmallVectorImplINS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  520:  parseOptionalColonTypeList(SmallVectorImpl<Type> &result) override {
    #####:  521:    if (!parser.consumeIf(Token::colon))
branch  0 never executed
branch  1 never executed
    #####:  522:      return success();
    #####:  523:    return parser.parseTypeListNoParens(result);
call    0 never executed
        -:  524:  }
        -:  525:
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE18parseDimensionListERN4llvm15SmallVectorImplIlEEbb called 0 returned 0% blocks executed 0%
    #####:  526:  ParseResult parseDimensionList(SmallVectorImpl<int64_t> &dimensions,
        -:  527:                                 bool allowDynamic,
        -:  528:                                 bool withTrailingX) override {
    #####:  529:    return parser.parseDimensionListRanked(dimensions, allowDynamic,
call    0 never executed
    #####:  530:                                           withTrailingX);
        -:  531:  }
        -:  532:
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE21parseXInDimensionListEv called 0 returned 0% blocks executed 0%
    #####:  533:  ParseResult parseXInDimensionList() override {
    #####:  534:    return parser.parseXInDimensionList();
call    0 never executed
        -:  535:  }
        -:  536:
        -:  537:  //===--------------------------------------------------------------------===//
        -:  538:  // Code Completion
        -:  539:  //===--------------------------------------------------------------------===//
        -:  540:
        -:  541:  /// Parse a keyword, or an empty string if the current location signals a code
        -:  542:  /// completion.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE24parseKeywordOrCompletionEPN4llvm9StringRefE called 4608 returned 100% blocks executed 60%
     4608:  543:  ParseResult parseKeywordOrCompletion(StringRef *keyword) override {
     4608:  544:    Token tok = parser.getToken();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    4608*:  545:    if (tok.isCodeCompletion() && tok.getSpelling().empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  546:      *keyword = "";
    #####:  547:      return success();
        -:  548:    }
     4608:  549:    return parseKeyword(keyword);
call    0 returned 100%
        -:  550:  }
        -:  551:
        -:  552:  /// Signal the code completion of a set of expected tokens.
function _ZN4mlir6detail13AsmParserImplINS_16DialectAsmParserEE26codeCompleteExpectedTokensEN4llvm8ArrayRefINS4_9StringRefEEE called 0 returned 0% blocks executed 0%
    #####:  553:  void codeCompleteExpectedTokens(ArrayRef<StringRef> tokens) override {
    #####:  554:    Token tok = parser.getToken();
branch  0 never executed
branch  1 never executed
    #####:  555:    if (tok.isCodeCompletion() && tok.getSpelling().empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  556:      (void)parser.codeCompleteExpectedTokens(tokens);
call    0 never executed
    #####:  557:  }
        -:  558:
        -:  559:protected:
        -:  560:  /// The source location of the dialect symbol.
        -:  561:  SMLoc nameLoc;
        -:  562:
        -:  563:  /// The main parser.
        -:  564:  Parser &parser;
        -:  565:
        -:  566:  /// A flag that indicates if any errors were emitted during parsing.
        -:  567:  bool emittedError = false;
        -:  568:};
        -:  569:} // namespace detail
        -:  570:} // namespace mlir
        -:  571:
        -:  572:#endif // MLIR_LIB_ASMPARSER_ASMPARSERIMPL_H
