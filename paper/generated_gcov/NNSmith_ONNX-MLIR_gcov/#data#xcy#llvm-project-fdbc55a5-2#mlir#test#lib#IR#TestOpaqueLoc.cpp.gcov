        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/IR/TestOpaqueLoc.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestOpaqueLoc.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestOpaqueLoc.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestOpaqueLoc.cpp - Pass to test opaque locations ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Builders.h"
        -:   10:#include "mlir/IR/BuiltinOps.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15:namespace {
        -:   16:/// A simple structure which is used for testing as an underlying location in
        -:   17:/// OpaqueLoc.
        -:   18:struct MyLocation {
        -:   19:  MyLocation() = default;
   404539:   20:  MyLocation(int id) : id(id) {}
call    0 returned 100%
        -:   21:  int getId() { return id; }
        -:   22:
        -:   23:  int id{42};
        -:   24:};
        -:   25:} // namespace
        -:   26:
  1851761:   27:MLIR_DECLARE_EXPLICIT_TYPE_ID(MyLocation *)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   28:MLIR_DEFINE_EXPLICIT_TYPE_ID(MyLocation *)
        -:   29:
        -:   30:namespace {
        -:   31:/// Pass that changes locations to opaque locations for each operation.
        -:   32:/// It also takes all operations that are not function operations or
        -:   33:/// terminators and clones them with opaque locations which store the initial
        -:   34:/// locations.
  129225*:   35:struct TestOpaqueLoc
call    0 never executed
call    1 returned 100%
        -:   36:    : public PassWrapper<TestOpaqueLoc, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_113TestOpaqueLoc13resolveTypeIDEv called 129225 returned 100% blocks executed 100%
   129225:   37:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestOpaqueLoc)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   38:
function _ZNK12_GLOBAL__N_113TestOpaqueLoc11getArgumentEv called 128661 returned 100% blocks executed 100%
   128661:   39:  StringRef getArgument() const final { return "test-opaque-loc"; }
function _ZNK12_GLOBAL__N_113TestOpaqueLoc14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   40:  StringRef getDescription() const final {
   128637:   41:    return "Changes all leaf locations to opaque locations";
        -:   42:  }
        -:   43:
function _ZN12_GLOBAL__N_113TestOpaqueLoc14runOnOperationEv called 508 returned 100% blocks executed 100%
      508:   44:  void runOnOperation() override {
     1016:   45:    std::vector<std::unique_ptr<MyLocation>> myLocs;
call    0 returned 100%
call    1 returned 100%
      508:   46:    int lastIt = 0;
        -:   47:
function _ZZN12_GLOBAL__N_113TestOpaqueLoc14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_ called 404539 returned 100% blocks executed 81%
      508:   48:    getOperation().getBody()->walk([&](Operation *op) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   809078:   49:      myLocs.push_back(std::make_unique<MyLocation>(lastIt++));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
        -:   50:
   404539:   51:      Location loc = op->getLoc();
call    0 returned 100%
        -:   52:
        -:   53:      /// Set opaque location without fallback location to test the
        -:   54:      /// corresponding get method.
   404539:   55:      op->setLoc(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   404539:   56:          OpaqueLoc::get<MyLocation *>(myLocs.back().get(), &getContext()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   57:
   809078:   58:      if (isa<ModuleOp>(op->getParentOp()) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
   391257:   59:          op->hasTrait<OpTrait::IsTerminator>())
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
    56978:   60:        return;
        -:   61:
   347561:   62:      OpBuilder builder(op);
call    0 returned 100%
        -:   63:
        -:   64:      /// Add the same operation but with fallback location to test the
        -:   65:      /// corresponding get method and serialization.
   347561:   66:      Operation *opCloned1 = builder.clone(*op);
call    0 returned 100%
   347561:   67:      opCloned1->setLoc(OpaqueLoc::get<MyLocation *>(myLocs.back().get(), loc));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
        -:   68:
        -:   69:      /// Add the same operation but with void* instead of MyLocation* to test
        -:   70:      /// getUnderlyingLocationOrNull method.
   347561:   71:      Operation *opCloned2 = builder.clone(*op);
call    0 returned 100%
   347561:   72:      opCloned2->setLoc(OpaqueLoc::get<void *>(nullptr, loc));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   73:    });
        -:   74:
function _ZZN12_GLOBAL__N_113TestOpaqueLoc14runOnOperationEvENKUlRN4mlir10DiagnosticEE0_clES3_.isra.0 called 1100169 returned 100% blocks executed 94%
      508:   75:    ScopedDiagnosticHandler diagHandler(&getContext(), [](Diagnostic &diag) {
call    0 returned 100%
  1100169:   76:      auto &os = llvm::outs();
call    0 returned 100%
  1100169:   77:      if (diag.getLocation().isa<OpaqueLoc>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
  1099661:   78:        MyLocation *loc = OpaqueLoc::getUnderlyingLocationOrNull<MyLocation *>(
call    0 returned 100%
        -:   79:            diag.getLocation());
  1099661:   80:        if (loc)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
   752100:   81:          os << "MyLocation: " << loc->id;
call    0 returned 100%
call    1 returned 100%
        -:   82:        else
   347561:   83:          os << "nullptr";
call    0 returned 100%
        -:   84:      }
  1100169:   85:      os << ": " << diag << '\n';
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  1100169:   86:      os.flush();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      508:   87:    });
call    0 returned 100%
        -:   88:
function _ZZN12_GLOBAL__N_113TestOpaqueLoc14runOnOperationEvENKUlPN4mlir9OperationEE1_clES3_.isra.0 called 1100169 returned 100% blocks executed 100%
  1100677:   89:    getOperation().walk([&](Operation *op) { op->emitOpError(); });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      508:   90:  }
        -:   91:};
        -:   92:
        -:   93:} // namespace
        -:   94:
        -:   95:namespace mlir {
        -:   96:namespace test {
function _ZN4mlir4test21registerTestOpaqueLocEv called 128637 returned 100% blocks executed 100%
   128637:   97:void registerTestOpaqueLoc() { PassRegistration<TestOpaqueLoc>(); }
call    0 returned 100%
        -:   98:} // namespace test
        -:   99:} // namespace mlir
