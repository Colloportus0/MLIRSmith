        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/CallGraph.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/CallGraph.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/CallGraph.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- CallGraph.cpp - CallGraph analysis for MLIR ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains interfaces and analyses for defining a nested callgraph.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Analysis/CallGraph.h"
        -:   14:#include "mlir/IR/Operation.h"
        -:   15:#include "mlir/IR/SymbolTable.h"
        -:   16:#include "mlir/Interfaces/CallInterfaces.h"
        -:   17:#include "llvm/ADT/PointerUnion.h"
        -:   18:#include "llvm/ADT/SCCIterator.h"
        -:   19:#include "llvm/Support/raw_ostream.h"
        -:   20:
        -:   21:using namespace mlir;
        -:   22:
        -:   23://===----------------------------------------------------------------------===//
        -:   24:// CallGraphNode
        -:   25://===----------------------------------------------------------------------===//
        -:   26:
        -:   27:/// Returns true if this node refers to the indirect/external node.
function _ZNK4mlir13CallGraphNode10isExternalEv called 37008 returned 100% blocks executed 100%
  202012*:   28:bool CallGraphNode::isExternal() const { return !callableRegion; }
        -:   29:
        -:   30:/// Return the callable region this node represents. This can only be called
        -:   31:/// on non-external nodes.
function _ZNK4mlir13CallGraphNode17getCallableRegionEv called 118244 returned 100% blocks executed 67%
  144846*:   32:Region *CallGraphNode::getCallableRegion() const {
  118244*:   33:  assert(!isExternal() && "the external node has no callable region");
call    0 never executed
call    1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
  144846*:   34:  return callableRegion;
        -:   35:}
        -:   36:
        -:   37:/// Adds an reference edge to the given node. This is only valid on the
        -:   38:/// external node.
function _ZN4mlir13CallGraphNode15addAbstractEdgeEPS0_ called 20158 returned 100% blocks executed 80%
    20158:   39:void CallGraphNode::addAbstractEdge(CallGraphNode *node) {
   20158*:   40:  assert(isExternal() && "abstract edges are only valid on external nodes");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    40316:   41:  addEdge(node, Edge::Kind::Abstract);
    20158:   42:}
        -:   43:
        -:   44:/// Add an outgoing call edge from this node.
function _ZN4mlir13CallGraphNode11addCallEdgeEPS0_ called 30063 returned 100% blocks executed 100%
    30063:   45:void CallGraphNode::addCallEdge(CallGraphNode *node) {
    60126:   46:  addEdge(node, Edge::Kind::Call);
    30063:   47:}
        -:   48:
        -:   49:/// Adds a reference edge to the given child node.
function _ZN4mlir13CallGraphNode12addChildEdgeEPS0_ called 0 returned 0% blocks executed 0%
    #####:   50:void CallGraphNode::addChildEdge(CallGraphNode *child) {
    #####:   51:  addEdge(child, Edge::Kind::Child);
    #####:   52:}
        -:   53:
        -:   54:/// Returns true if this node has any child edges.
function _ZNK4mlir13CallGraphNode11hasChildrenEv called 10310 returned 100% blocks executed 100%
   10310*:   55:bool CallGraphNode::hasChildren() const {
   10310*:   56:  return llvm::any_of(edges, [](const Edge &edge) { return edge.isChild(); });
        -:   57:}
        -:   58:
        -:   59:/// Add an edge to 'node' with the given kind.
function _ZN4mlir13CallGraphNode7addEdgeEPS0_NS0_4Edge4KindE called 0 returned 0% blocks executed 0%
   50221*:   60:void CallGraphNode::addEdge(CallGraphNode *node, Edge::Kind kind) {
   50221*:   61:  edges.insert({node, kind});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
    #####:   62:}
        -:   63:
        -:   64://===----------------------------------------------------------------------===//
        -:   65:// CallGraph
        -:   66://===----------------------------------------------------------------------===//
        -:   67:
        -:   68:/// Recursively compute the callgraph edges for the given operation. Computed
        -:   69:/// edges are placed into the given callgraph object.
function _ZL16computeCallGraphPN4mlir9OperationERNS_9CallGraphERNS_21SymbolTableCollectionEPNS_13CallGraphNodeEb called 1593436 returned 100% blocks executed 96%
  1593436:   70:static void computeCallGraph(Operation *op, CallGraph &cg,
        -:   71:                             SymbolTableCollection &symbolTable,
        -:   72:                             CallGraphNode *parentNode, bool resolveCalls) {
  1593436:   73:  if (CallOpInterface call = dyn_cast<CallOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        -:   74:    // If there is no parent node, we ignore this operation. Even if this
        -:   75:    // operation was a call, there would be no callgraph node to attribute it
        -:   76:    // to.
    60126:   77:    if (resolveCalls && parentNode)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    30063:   78:      parentNode->addCallEdge(cg.resolveCallable(call, symbolTable));
call    0 returned 100%
call    1 returned 100%
    60126:   79:    return;
        -:   80:  }
        -:   81:
        -:   82:  // Compute the callgraph nodes and edges for each of the nested operations.
  1533310:   83:  if (CallableOpInterface callable = dyn_cast<CallableOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
    40316:   84:    if (auto *callableRegion = callable.getCallableRegion())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    40316:   85:      parentNode = cg.getOrAddNode(callableRegion, parentNode);
call    0 returned 100%
        -:   86:    else
    #####:   87:      return;
        -:   88:  }
        -:   89:
  2030650:   90:  for (Region &region : op->getRegions())
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
  1645922:   91:    for (Operation &nested : region.getOps())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
  1591422:   92:      computeCallGraph(&nested, cg, symbolTable, parentNode, resolveCalls);
call    0 returned 100%
        -:   93:}
        -:   94:
function _ZN4mlir9CallGraphC2EPNS_9OperationE called 1007 returned 100% blocks executed 100%
     1007:   95:CallGraph::CallGraph(Operation *op)
        -:   96:    : externalCallerNode(/*callableRegion=*/nullptr),
     1007:   97:      unknownCalleeNode(/*callableRegion=*/nullptr) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   98:  // Make two passes over the graph, one to compute the callables and one to
        -:   99:  // resolve the calls. We split these up as we may have nested callable objects
        -:  100:  // that need to be reserved before the calls.
     1007:  101:  SymbolTableCollection symbolTable;
call    0 returned 100%
     1007:  102:  computeCallGraph(op, *this, symbolTable, /*parentNode=*/nullptr,
call    0 returned 100%
        -:  103:                   /*resolveCalls=*/false);
     1007:  104:  computeCallGraph(op, *this, symbolTable, /*parentNode=*/nullptr,
call    0 returned 100%
call    1 returned 100%
        -:  105:                   /*resolveCalls=*/true);
     1007:  106:}
        -:  107:
        -:  108:/// Get or add a call graph node for the given region.
function _ZN4mlir9CallGraph12getOrAddNodeEPNS_6RegionEPNS_13CallGraphNodeE called 40316 returned 100% blocks executed 79%
    40316:  109:CallGraphNode *CallGraph::getOrAddNode(Region *region,
        -:  110:                                       CallGraphNode *parentNode) {
   40316*:  111:  assert(region && isa<CallableOpInterface>(region->getParentOp()) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  112:         "expected parent operation to be callable");
    40316:  113:  std::unique_ptr<CallGraphNode> &node = nodes[region];
call    0 returned 100%
    40316:  114:  if (!node) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    20158:  115:    node.reset(new CallGraphNode(region));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  116:
        -:  117:    // Add this node to the given parent node if necessary.
    20158:  118:    if (parentNode) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  119:      parentNode->addChildEdge(node.get());
call    0 never executed
        -:  120:    } else {
        -:  121:      // Otherwise, connect all callable nodes to the external node, this allows
        -:  122:      // for conservatively including all callable nodes within the graph.
        -:  123:      // FIXME This isn't correct, this is only necessary for callable nodes
        -:  124:      // that *could* be called from external sources. This requires extending
        -:  125:      // the interface for callables to check if they may be referenced
        -:  126:      // externally.
    20158:  127:      externalCallerNode.addAbstractEdge(node.get());
call    0 returned 100%
        -:  128:    }
        -:  129:  }
    40316:  130:  return node.get();
        -:  131:}
        -:  132:
        -:  133:/// Lookup a call graph node for the given region, or nullptr if none is
        -:  134:/// registered.
function _ZNK4mlir9CallGraph10lookupNodeEPNS_6RegionE called 24760 returned 100% blocks executed 100%
    70181:  135:CallGraphNode *CallGraph::lookupNode(Region *region) const {
    24760:  136:  auto it = nodes.find(region);
call    0 returned 100%
    70181:  137:  return it == nodes.end() ? nullptr : it->second.get();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  138:}
        -:  139:
        -:  140:/// Resolve the callable for given callee to a node in the callgraph, or the
        -:  141:/// unknown callee node if a valid node was not resolved.
        -:  142:CallGraphNode *
function _ZNK4mlir9CallGraph15resolveCallableENS_15CallOpInterfaceERNS_21SymbolTableCollectionE called 45421 returned 100% blocks executed 85%
    45421:  143:CallGraph::resolveCallable(CallOpInterface call,
        -:  144:                           SymbolTableCollection &symbolTable) const {
    45421:  145:  Operation *callable = call.resolveCallable(&symbolTable);
call    0 returned 100%
    90842:  146:  if (auto callableOp = dyn_cast_or_null<CallableOpInterface>(callable))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   90842*:  147:    if (auto *node = lookupNode(callableOp.getCallableRegion()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    45421:  148:      return node;
        -:  149:
    #####:  150:  return getUnknownCalleeNode();
        -:  151:}
        -:  152:
        -:  153:/// Erase the given node from the callgraph.
function _ZN4mlir9CallGraph9eraseNodeEPNS_13CallGraphNodeE called 0 returned 0% blocks executed 0%
    #####:  154:void CallGraph::eraseNode(CallGraphNode *node) {
        -:  155:  // Erase any children of this node first.
    #####:  156:  if (node->hasChildren()) {
branch  0 never executed
branch  1 never executed
    #####:  157:    for (const CallGraphNode::Edge &edge : llvm::make_early_inc_range(*node))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  158:      if (edge.isChild())
branch  0 never executed
branch  1 never executed
    #####:  159:        eraseNode(edge.getTarget());
call    0 never executed
        -:  160:  }
        -:  161:  // Erase any edges to this node from any other nodes.
    #####:  162:  for (auto &it : nodes) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  163:    it.second->edges.remove_if([node](const CallGraphNode::Edge &edge) {
call    0 never executed
    #####:  164:      return edge.getTarget() == node;
branch  0 never executed
branch  1 never executed
        -:  165:    });
        -:  166:  }
    #####:  167:  nodes.erase(node->getCallableRegion());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  168:}
        -:  169:
        -:  170://===----------------------------------------------------------------------===//
        -:  171:// Printing
        -:  172:
        -:  173:/// Dump the graph in a human readable format.
function _ZNK4mlir9CallGraph4dumpEv called 0 returned 0% blocks executed 0%
    #####:  174:void CallGraph::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
function _ZNK4mlir9CallGraph5printERN4llvm11raw_ostreamE called 492 returned 100% blocks executed 94%
      492:  175:void CallGraph::print(raw_ostream &os) const {
      492:  176:  os << "// ---- CallGraph ----\n";
call    0 returned 100%
        -:  177:
        -:  178:  // Functor used to output the name for the given node.
function _ZZNK4mlir9CallGraph5printERN4llvm11raw_ostreamEENKUlPKNS_13CallGraphNodeEE_clES6_.isra.0 called 27094 returned 100% blocks executed 86%
    27586:  179:  auto emitNodeName = [&](const CallGraphNode *node) {
    27094:  180:    if (node == getExternalCallerNode()) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   53696*:  181:      os << "<External-Caller-Node>";
      984:  182:      return;
call    0 returned 100%
        -:  183:    }
    26602:  184:    if (node == getUnknownCalleeNode()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  185:      os << "<Unknown-Callee-Node>";
    #####:  186:      return;
call    0 never executed
        -:  187:    }
        -:  188:
    26602:  189:    auto *callableRegion = node->getCallableRegion();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    26602:  190:    auto *parentOp = callableRegion->getParentOp();
call    0 returned 100%
    26602:  191:    os << "'" << callableRegion->getParentOp()->getName() << "' - Region #"
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    26602:  192:       << callableRegion->getRegionNumber();
call    0 returned 100%
call    1 returned 100%
    26602:  193:    auto attrs = parentOp->getAttrDictionary();
call    0 returned 100%
    26602:  194:    if (!attrs.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    26602:  195:      os << " : " << attrs;
call    0 returned 100%
call    1 returned 100%
      492:  196:  };
        -:  197:
    10340:  198:  for (auto &nodeIt : nodes) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
     9848:  199:    const CallGraphNode *node = nodeIt.second.get();
call    0 returned 100%
        -:  200:
        -:  201:    // Dump the header for this node.
     9848:  202:    os << "// - Node : ";
call    0 returned 100%
     9848:  203:    emitNodeName(node);
call    0 returned 100%
     9848:  204:    os << "\n";
call    0 returned 100%
        -:  205:
        -:  206:    // Emit each of the edges.
    16754:  207:    for (auto &edge : *node) {
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
     6906:  208:      os << "// -- ";
call    0 returned 100%
     6906:  209:      if (edge.isCall())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     6906:  210:        os << "Call";
call    0 returned 100%
    #####:  211:      else if (edge.isChild())
branch  0 never executed
branch  1 never executed
    #####:  212:        os << "Child";
call    0 never executed
        -:  213:
     6906:  214:      os << "-Edge : ";
call    0 returned 100%
     6906:  215:      emitNodeName(edge.getTarget());
call    0 returned 100%
     6906:  216:      os << "\n";
call    0 returned 100%
        -:  217:    }
     9848:  218:    os << "//\n";
call    0 returned 100%
        -:  219:  }
        -:  220:
      492:  221:  os << "// -- SCCs --\n";
call    0 returned 100%
        -:  222:
    21172:  223:  for (auto &scc : make_range(llvm::scc_begin(this), llvm::scc_end(this))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 95% (fallthrough)
branch  9 taken 5%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
    10340:  224:    os << "// - SCC : \n";
call    0 returned 100%
    20680:  225:    for (auto &node : scc) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
    10340:  226:      os << "// -- Node :";
call    0 returned 100%
    10340:  227:      emitNodeName(node);
call    0 returned 100%
    10340:  228:      os << "\n";
call    0 returned 100%
        -:  229:    }
    10340:  230:    os << "\n";
call    0 returned 100%
        -:  231:  }
        -:  232:
      492:  233:  os << "// -------------------\n";
call    0 returned 100%
      492:  234:}
