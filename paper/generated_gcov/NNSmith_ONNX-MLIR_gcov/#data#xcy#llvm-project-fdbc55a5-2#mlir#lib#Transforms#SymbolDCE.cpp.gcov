        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Transforms/SymbolDCE.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/SymbolDCE.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/SymbolDCE.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- SymbolDCE.cpp - Pass to delete dead symbols ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements an algorithm for eliminating symbol operations that are
        -:   10:// known to be dead.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/IR/SymbolTable.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_SYMBOLDCE
        -:   20:#include "mlir/Transforms/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
  129222*:   26:struct SymbolDCE : public impl::SymbolDCEBase<SymbolDCE> {
call    0 never executed
call    1 returned 100%
        -:   27:  void runOnOperation() override;
        -:   28:
        -:   29:  /// Compute the liveness of the symbols within the given symbol table.
        -:   30:  /// `symbolTableIsHidden` is true if this symbol table is known to be
        -:   31:  /// unaccessible from operations in its parent regions.
        -:   32:  LogicalResult computeLiveness(Operation *symbolTableOp,
        -:   33:                                SymbolTableCollection &symbolTable,
        -:   34:                                bool symbolTableIsHidden,
        -:   35:                                DenseSet<Operation *> &liveSymbols);
        -:   36:};
        -:   37:} // namespace
        -:   38:
function _ZN12_GLOBAL__N_19SymbolDCE14runOnOperationEv called 507 returned 100% blocks executed 48%
      507:   39:void SymbolDCE::runOnOperation() {
      507:   40:  Operation *symbolTableOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   41:
        -:   42:  // SymbolDCE should only be run on operations that define a symbol table.
      507:   43:  if (!symbolTableOp->hasTrait<OpTrait::SymbolTable>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   44:    symbolTableOp->emitOpError()
call    0 never executed
call    1 never executed
call    2 never executed
        -:   45:        << " was scheduled to run under SymbolDCE, but does not define a "
    #####:   46:           "symbol table";
call    0 never executed
    #####:   47:    return signalPassFailure();
call    0 never executed
        -:   48:  }
        -:   49:
        -:   50:  // A flag that signals if the top level symbol table is hidden, i.e. not
        -:   51:  // accessible from parent scopes.
      507:   52:  bool symbolTableIsHidden = true;
      507:   53:  SymbolOpInterface symbol = dyn_cast<SymbolOpInterface>(symbolTableOp);
call    0 returned 100%
     507*:   54:  if (symbolTableOp->getParentOp() && symbol)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   55:    symbolTableIsHidden = symbol.isPrivate();
call    0 never executed
        -:   56:
        -:   57:  // Compute the set of live symbols within the symbol table.
     1014:   58:  DenseSet<Operation *> liveSymbols;
call    0 returned 100%
     1014:   59:  SymbolTableCollection symbolTable;
call    0 returned 100%
call    1 returned 100%
      507:   60:  if (failed(computeLiveness(symbolTableOp, symbolTable, symbolTableIsHidden,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   61:                             liveSymbols)))
    #####:   62:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:
        -:   64:  // After computing the liveness, delete all of the symbols that were found to
        -:   65:  // be dead.
function _ZZN12_GLOBAL__N_19SymbolDCE14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 401869 returned 100% blocks executed 88%
      507:   66:  symbolTableOp->walk([&](Operation *nestedSymbolTable) {
call    0 returned 100%
call    1 returned 100%
   401869:   67:    if (!nestedSymbolTable->hasTrait<OpTrait::SymbolTable>())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        -:   68:      return;
     1024:   69:    for (auto &block : nestedSymbolTable->getRegion(0)) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    26924:   70:      for (Operation &op : llvm::make_early_inc_range(block)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    26358:   71:        if (isa<SymbolOpInterface>(&op) && !liveSymbols.count(&op)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
       54:   72:          op.erase();
call    0 returned 100%
       54:   73:          ++numDCE;
call    0 returned 100%
        -:   74:        }
        -:   75:      }
        -:   76:    }
        -:   77:  });
        -:   78:}
        -:   79:
        -:   80:/// Compute the liveness of the symbols within the given symbol table.
        -:   81:/// `symbolTableIsHidden` is true if this symbol table is known to be
        -:   82:/// unaccessible from operations in its parent regions.
function _ZN12_GLOBAL__N_19SymbolDCE15computeLivenessEPN4mlir9OperationERNS1_21SymbolTableCollectionEbRN4llvm8DenseSetIS3_NS6_12DenseMapInfoIS3_vEEEE called 512 returned 100% blocks executed 69%
      512:   83:LogicalResult SymbolDCE::computeLiveness(Operation *symbolTableOp,
        -:   84:                                         SymbolTableCollection &symbolTable,
        -:   85:                                         bool symbolTableIsHidden,
        -:   86:                                         DenseSet<Operation *> &liveSymbols) {
        -:   87:  // A worklist of live operations to propagate uses from.
      512:   88:  SmallVector<Operation *, 16> worklist;
call    0 returned 100%
        -:   89:
        -:   90:  // Walk the symbols within the current symbol table, marking the symbols that
        -:   91:  // are known to be live.
     1024:   92:  for (auto &block : symbolTableOp->getRegion(0)) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   93:    // Add all non-symbols or symbols that can't be discarded.
    13718:   94:    for (Operation &op : block) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
    13206:   95:      SymbolOpInterface symbol = dyn_cast<SymbolOpInterface>(&op);
call    0 returned 100%
   13206*:   96:      if (!symbol) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   97:        worklist.push_back(&op);
call    0 never executed
    #####:   98:        continue;
        -:   99:      }
   26412*:  100:      bool isDiscardable = (symbolTableIsHidden || symbol.isPrivate()) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 100% (fallthrough)
branch  6 taken 1%
    13206:  101:                           symbol.canDiscardOnUseEmpty();
call    0 returned 100%
    13206:  102:      if (!isDiscardable && liveSymbols.insert(&op).second)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    13152:  103:        worklist.push_back(&op);
call    0 returned 100%
        -:  104:    }
        -:  105:  }
        -:  106:
        -:  107:  // Process the set of symbols that were known to be live, adding new symbols
        -:  108:  // that are referenced within.
    13664:  109:  while (!worklist.empty()) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
    13152:  110:    Operation *op = worklist.pop_back_val();
call    0 returned 100%
        -:  111:
        -:  112:    // If this is a symbol table, recursively compute its liveness.
    13152:  113:    if (op->hasTrait<OpTrait::SymbolTable>()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        -:  114:      // The internal symbol table is hidden if the parent is, if its not a
        -:  115:      // symbol, or if it is a private symbol.
        5:  116:      SymbolOpInterface symbol = dyn_cast<SymbolOpInterface>(op);
call    0 returned 100%
       5*:  117:      bool symIsHidden = symbolTableIsHidden || !symbol || symbol.isPrivate();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        5:  118:      if (failed(computeLiveness(op, symbolTable, symIsHidden, liveSymbols)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  119:        return failure();
        -:  120:    }
        -:  121:
        -:  122:    // Collect the uses held by this operation.
    26304:  123:    Optional<SymbolTable::UseRange> uses = SymbolTable::getSymbolUses(op);
call    0 returned 100%
    13152:  124:    if (!uses) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  125:      return op->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  126:             << "operation contains potentially unknown symbol table, "
    #####:  127:                "meaning that we can't reliable compute symbol uses";
call    0 never executed
        -:  128:    }
        -:  129:
    26304:  130:    SmallVector<Operation *, 4> resolvedSymbols;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    32458:  131:    for (const SymbolTable::SymbolUse &use : *uses) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  132:      // Lookup the symbols referenced by this use.
    19306:  133:      resolvedSymbols.clear();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   38612*:  134:      if (failed(symbolTable.lookupSymbolIn(
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  135:              op->getParentOp(), use.getSymbolRef(), resolvedSymbols)))
        -:  136:        // Ignore references to unknown symbols.
    #####:  137:        continue;
        -:  138:
        -:  139:      // Mark each of the resolved symbols as live.
    38612:  140:      for (Operation *resolvedSymbol : resolvedSymbols)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    19306:  141:        if (liveSymbols.insert(resolvedSymbol).second)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  142:          worklist.push_back(resolvedSymbol);
call    0 never executed
        -:  143:    }
        -:  144:  }
        -:  145:
      512:  146:  return success();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  147:}
        -:  148:
function _ZN4mlir19createSymbolDCEPassEv called 129222 returned 100% blocks executed 100%
   129222:  149:std::unique_ptr<Pass> mlir::createSymbolDCEPass() {
   129222:  150:  return std::make_unique<SymbolDCE>();
call    0 returned 100%
        -:  151:}
