        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Affine/Transforms/AffineExpandIndexOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineExpandIndexOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineExpandIndexOps.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- AffineExpandIndexOps.cpp - Affine expand index ops pass ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to expand affine index ops into one or more more
        -:   10:// fundamental operations.
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/Affine/Utils.h"
        -:   17:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_AFFINEEXPANDINDEXOPS
        -:   21:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:/// Lowers `affine.delinearize_index` into a sequence of division and remainder
        -:   28:/// operations.
        -:   29:struct LowerDelinearizeIndexOps
        -:   30:    : public OpRewritePattern<AffineDelinearizeIndexOp> {
        -:   31:  using OpRewritePattern<AffineDelinearizeIndexOp>::OpRewritePattern;
function _ZNK12_GLOBAL__N_124LowerDelinearizeIndexOps15matchAndRewriteEN4mlir24AffineDelinearizeIndexOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   32:  LogicalResult matchAndRewrite(AffineDelinearizeIndexOp op,
        -:   33:                                PatternRewriter &rewriter) const override {
    #####:   34:    FailureOr<SmallVector<Value>> multiIndex =
    #####:   35:        delinearizeIndex(rewriter, op->getLoc(), op.getLinearIndex(),
call    0 never executed
    #####:   36:                         llvm::to_vector(op.getBasis()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   37:    if (failed(multiIndex))
branch  0 never executed
branch  1 never executed
    #####:   38:      return failure();
    #####:   39:    rewriter.replaceOp(op, *multiIndex);
call    0 never executed
call    1 never executed
    #####:   40:    return success();
branch  0 never executed
branch  1 never executed
        -:   41:  }
        -:   42:};
        -:   43:
    #####:   44:class ExpandAffineIndexOpsPass
call    0 never executed
        -:   45:    : public impl::AffineExpandIndexOpsBase<ExpandAffineIndexOpsPass> {
        -:   46:public:
   129270:   47:  ExpandAffineIndexOpsPass() = default;
call    0 returned 100%
        -:   48:
function _ZN12_GLOBAL__N_124ExpandAffineIndexOpsPass14runOnOperationEv called 551 returned 100% blocks executed 69%
      551:   49:  void runOnOperation() override {
      551:   50:    MLIRContext *context = &getContext();
call    0 returned 100%
     1102:   51:    RewritePatternSet patterns(context);
call    0 returned 100%
     1102:   52:    populateAffineExpandIndexOpsPatterns(patterns);
      551:   53:    if (failed(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      551:   54:            applyPatternsAndFoldGreedily(getOperation(), std::move(patterns))))
call    0 returned 100%
    #####:   55:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:   56:  }
        -:   57:};
        -:   58:
        -:   59:} // namespace
        -:   60:
function _ZN4mlir36populateAffineExpandIndexOpsPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     551*:   61:void mlir::populateAffineExpandIndexOpsPatterns(RewritePatternSet &patterns) {
     551*:   62:  patterns.insert<LowerDelinearizeIndexOps>(patterns.getContext());
call    0 never executed
call    1 returned 100%
call    2 returned 100%
    #####:   63:}
        -:   64:
function _ZN4mlir30createAffineExpandIndexOpsPassEv called 129270 returned 100% blocks executed 100%
   129270:   65:std::unique_ptr<Pass> mlir::createAffineExpandIndexOpsPass() {
   129270:   66:  return std::make_unique<ExpandAffineIndexOpsPass>();
call    0 returned 100%
        -:   67:}
