        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/IR/TestDominance.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestDominance.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestDominance.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestDominance.cpp - Test dominance construction and information
        -:    2://-------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9://
        -:   10:// This file contains test passes for constructing and resolving dominance
        -:   11:// information.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/IR/Dominance.h"
        -:   16:#include "mlir/IR/SymbolTable.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:/// Overloaded helper to call the right function based on whether we are testing
        -:   22:/// dominance or post-dominance.
    #####:   23:static bool dominatesOrPostDominates(DominanceInfo &dominanceInfo, Block *a,
        -:   24:                                     Block *b) {
    #####:   25:  return dominanceInfo.dominates(a, b);
        -:   26:}
        -:   27:
    #####:   28:static bool dominatesOrPostDominates(PostDominanceInfo &dominanceInfo, Block *a,
        -:   29:                                     Block *b) {
    #####:   30:  return dominanceInfo.postDominates(a, b);
        -:   31:}
        -:   32:
        -:   33:namespace {
        -:   34:
        -:   35:/// Helper class to print dominance information.
    #####:   36:class DominanceTest {
        -:   37:public:
        -:   38:  /// Constructs a new test instance using the given operation.
function _ZN12_GLOBAL__N_113DominanceTestC2EPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   39:  DominanceTest(Operation *operation) : operation(operation) {
call    0 never executed
        -:   40:    // Create unique ids for each block.
function _ZZN12_GLOBAL__N_113DominanceTestC4EPN4mlir9OperationEENKUlS3_E_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   41:    operation->walk([&](Operation *nested) {
call    0 never executed
    #####:   42:      if (blockIds.count(nested->getBlock()) > 0)
call    0 never executed
    #####:   43:        return;
    #####:   44:      blockIds.insert({nested->getBlock(), blockIds.size()});
call    0 never executed
        -:   45:    });
    #####:   46:  }
        -:   47:
        -:   48:  /// Prints dominance information of all blocks.
        -:   49:  template <typename DominanceT>
    #####:   50:  void printDominance(DominanceT &dominanceInfo,
        -:   51:                      bool printCommonDominatorInfo) {
    #####:   52:    DenseSet<Block *> parentVisited;
    #####:   53:    operation->walk([&](Operation *op) {
    #####:   54:      Block *block = op->getBlock();
call    0 never executed
call    1 never executed
    #####:   55:      if (!parentVisited.insert(block).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   56:        return;
        -:   57:
    #####:   58:      DenseSet<Block *> visited;
    #####:   59:      operation->walk([&](Operation *nested) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   60:        Block *nestedBlock = nested->getBlock();
call    0 never executed
call    1 never executed
    #####:   61:        if (!visited.insert(nestedBlock).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   62:          return;
    #####:   63:        if (printCommonDominatorInfo) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   64:          llvm::errs() << "Nearest(" << blockIds[block] << ", "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:   65:                       << blockIds[nestedBlock] << ") = ";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   66:          Block *dom =
call    0 never executed
call    1 never executed
        -:   67:              dominanceInfo.findNearestCommonDominator(block, nestedBlock);
    #####:   68:          if (dom)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:            llvm::errs() << blockIds[dom];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   70:          else
    #####:   71:            llvm::errs() << "<no dom>";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   72:          llvm::errs() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   73:        } else {
        -:   74:          if (std::is_same<DominanceInfo, DominanceT>::value)
    #####:   75:            llvm::errs() << "dominates(";
call    0 never executed
call    1 never executed
        -:   76:          else
    #####:   77:            llvm::errs() << "postdominates(";
call    0 never executed
call    1 never executed
    #####:   78:          llvm::errs() << blockIds[block] << ", " << blockIds[nestedBlock]
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   79:                       << ") = ";
call    0 never executed
call    1 never executed
    #####:   80:          if (dominatesOrPostDominates(dominanceInfo, block, nestedBlock))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   81:            llvm::errs() << "true\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   82:          else
    #####:   83:            llvm::errs() << "false\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   84:        }
        -:   85:      });
        -:   86:    });
    #####:   87:  }
------------------
_ZN12_GLOBAL__N_113DominanceTest14printDominanceIN4mlir17PostDominanceInfoEEEvRT_b:
function _ZN12_GLOBAL__N_113DominanceTest14printDominanceIN4mlir17PostDominanceInfoEEEvRT_b called 0 returned 0% blocks executed 0%
    #####:   50:  void printDominance(DominanceT &dominanceInfo,
call    0 never executed
        -:   51:                      bool printCommonDominatorInfo) {
    #####:   52:    DenseSet<Block *> parentVisited;
    #####:   53:    operation->walk([&](Operation *op) {
call    0 never executed
call    1 never executed
        -:   54:      Block *block = op->getBlock();
        -:   55:      if (!parentVisited.insert(block).second)
        -:   56:        return;
        -:   57:
        -:   58:      DenseSet<Block *> visited;
        -:   59:      operation->walk([&](Operation *nested) {
        -:   60:        Block *nestedBlock = nested->getBlock();
        -:   61:        if (!visited.insert(nestedBlock).second)
        -:   62:          return;
        -:   63:        if (printCommonDominatorInfo) {
        -:   64:          llvm::errs() << "Nearest(" << blockIds[block] << ", "
        -:   65:                       << blockIds[nestedBlock] << ") = ";
        -:   66:          Block *dom =
        -:   67:              dominanceInfo.findNearestCommonDominator(block, nestedBlock);
        -:   68:          if (dom)
        -:   69:            llvm::errs() << blockIds[dom];
        -:   70:          else
        -:   71:            llvm::errs() << "<no dom>";
        -:   72:          llvm::errs() << "\n";
        -:   73:        } else {
        -:   74:          if (std::is_same<DominanceInfo, DominanceT>::value)
        -:   75:            llvm::errs() << "dominates(";
        -:   76:          else
        -:   77:            llvm::errs() << "postdominates(";
        -:   78:          llvm::errs() << blockIds[block] << ", " << blockIds[nestedBlock]
        -:   79:                       << ") = ";
        -:   80:          if (dominatesOrPostDominates(dominanceInfo, block, nestedBlock))
        -:   81:            llvm::errs() << "true\n";
        -:   82:          else
        -:   83:            llvm::errs() << "false\n";
        -:   84:        }
        -:   85:      });
        -:   86:    });
    #####:   87:  }
------------------
_ZN12_GLOBAL__N_113DominanceTest14printDominanceIN4mlir13DominanceInfoEEEvRT_b:
function _ZN12_GLOBAL__N_113DominanceTest14printDominanceIN4mlir13DominanceInfoEEEvRT_b called 0 returned 0% blocks executed 0%
    #####:   50:  void printDominance(DominanceT &dominanceInfo,
call    0 never executed
        -:   51:                      bool printCommonDominatorInfo) {
    #####:   52:    DenseSet<Block *> parentVisited;
    #####:   53:    operation->walk([&](Operation *op) {
call    0 never executed
call    1 never executed
        -:   54:      Block *block = op->getBlock();
        -:   55:      if (!parentVisited.insert(block).second)
        -:   56:        return;
        -:   57:
        -:   58:      DenseSet<Block *> visited;
        -:   59:      operation->walk([&](Operation *nested) {
        -:   60:        Block *nestedBlock = nested->getBlock();
        -:   61:        if (!visited.insert(nestedBlock).second)
        -:   62:          return;
        -:   63:        if (printCommonDominatorInfo) {
        -:   64:          llvm::errs() << "Nearest(" << blockIds[block] << ", "
        -:   65:                       << blockIds[nestedBlock] << ") = ";
        -:   66:          Block *dom =
        -:   67:              dominanceInfo.findNearestCommonDominator(block, nestedBlock);
        -:   68:          if (dom)
        -:   69:            llvm::errs() << blockIds[dom];
        -:   70:          else
        -:   71:            llvm::errs() << "<no dom>";
        -:   72:          llvm::errs() << "\n";
        -:   73:        } else {
        -:   74:          if (std::is_same<DominanceInfo, DominanceT>::value)
        -:   75:            llvm::errs() << "dominates(";
        -:   76:          else
        -:   77:            llvm::errs() << "postdominates(";
        -:   78:          llvm::errs() << blockIds[block] << ", " << blockIds[nestedBlock]
        -:   79:                       << ") = ";
        -:   80:          if (dominatesOrPostDominates(dominanceInfo, block, nestedBlock))
        -:   81:            llvm::errs() << "true\n";
        -:   82:          else
        -:   83:            llvm::errs() << "false\n";
        -:   84:        }
        -:   85:      });
        -:   86:    });
    #####:   87:  }
------------------
        -:   88:
        -:   89:private:
        -:   90:  Operation *operation;
        -:   91:  DenseMap<Block *, size_t> blockIds;
        -:   92:};
        -:   93:
  128637*:   94:struct TestDominancePass
call    0 never executed
call    1 returned 100%
        -:   95:    : public PassWrapper<TestDominancePass, InterfacePass<SymbolOpInterface>> {
function _ZN12_GLOBAL__N_117TestDominancePass13resolveTypeIDEv called 128637 returned 100% blocks executed 100%
   128637:   96:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestDominancePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   97:
function _ZNK12_GLOBAL__N_117TestDominancePass11getArgumentEv called 128637 returned 100% blocks executed 100%
   128637:   98:  StringRef getArgument() const final { return "test-print-dominance"; }
function _ZNK12_GLOBAL__N_117TestDominancePass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:   99:  StringRef getDescription() const final {
   128637:  100:    return "Print the dominance information for multiple regions.";
        -:  101:  }
        -:  102:
function _ZN12_GLOBAL__N_117TestDominancePass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  103:  void runOnOperation() override {
    #####:  104:    llvm::errs() << "Testing : " << getOperation().getName() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  105:    DominanceTest dominanceTest(getOperation());
call    0 never executed
call    1 never executed
        -:  106:
        -:  107:    // Print dominance information.
    #####:  108:    llvm::errs() << "--- DominanceInfo ---\n";
call    0 never executed
call    1 never executed
    #####:  109:    dominanceTest.printDominance(getAnalysis<DominanceInfo>(),
call    0 never executed
call    1 never executed
        -:  110:                                 /*printCommonDominatorInfo=*/true);
        -:  111:
    #####:  112:    llvm::errs() << "--- PostDominanceInfo ---\n";
call    0 never executed
call    1 never executed
    #####:  113:    dominanceTest.printDominance(getAnalysis<PostDominanceInfo>(),
call    0 never executed
call    1 never executed
        -:  114:                                 /*printCommonDominatorInfo=*/true);
        -:  115:
        -:  116:    // Print dominance relationship between blocks.
    #####:  117:    llvm::errs() << "--- Block Dominance relationship ---\n";
call    0 never executed
call    1 never executed
    #####:  118:    dominanceTest.printDominance(getAnalysis<DominanceInfo>(),
call    0 never executed
call    1 never executed
        -:  119:                                 /*printCommonDominatorInfo=*/false);
        -:  120:
    #####:  121:    llvm::errs() << "--- Block PostDominance relationship ---\n";
call    0 never executed
call    1 never executed
    #####:  122:    dominanceTest.printDominance(getAnalysis<PostDominanceInfo>(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  123:                                 /*printCommonDominatorInfo=*/false);
    #####:  124:  }
        -:  125:};
        -:  126:
        -:  127:} // namespace
        -:  128:
        -:  129:namespace mlir {
        -:  130:namespace test {
function _ZN4mlir4test25registerTestDominancePassEv called 128637 returned 100% blocks executed 100%
   128637:  131:void registerTestDominancePass() { PassRegistration<TestDominancePass>(); }
call    0 returned 100%
        -:  132:} // namespace test
        -:  133:} // namespace mlir
