        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/include/mlir/Tools/mlir-opt/MlirOptMain.h
        -:    0:Graph:../tools/mlir/tools/mlir-opt/CMakeFiles/mlir-opt.dir/mlir-opt.cpp.gcno
        -:    0:Data:../tools/mlir/tools/mlir-opt/CMakeFiles/mlir-opt.dir/mlir-opt.cpp.gcda
        -:    0:Runs:128623
        -:    1://===- MlirOptMain.h - MLIR Optimizer Driver main ---------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Main entry function for mlir-opt for when built as standalone binary.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_TOOLS_MLIROPT_MLIROPTMAIN_H
        -:   14:#define MLIR_TOOLS_MLIROPT_MLIROPTMAIN_H
        -:   15:
        -:   16:#include "mlir/Support/LogicalResult.h"
        -:   17:#include "llvm/ADT/StringRef.h"
        -:   18:
        -:   19:#include <cstdlib>
        -:   20:#include <memory>
        -:   21:
        -:   22:namespace llvm {
        -:   23:class raw_ostream;
        -:   24:class MemoryBuffer;
        -:   25:} // namespace llvm
        -:   26:
        -:   27:namespace mlir {
        -:   28:class DialectRegistry;
        -:   29:class PassPipelineCLParser;
        -:   30:class PassManager;
        -:   31:
        -:   32:/// This defines the function type used to setup the pass manager. This can be
        -:   33:/// used to pass in a callback to setup a default pass pipeline to be applied on
        -:   34:/// the loaded IR.
        -:   35:using PassPipelineFn = llvm::function_ref<LogicalResult(PassManager &pm)>;
        -:   36:
        -:   37:/// Perform the core processing behind `mlir-opt`:
        -:   38:/// - outputStream is the stream where the resulting IR is printed.
        -:   39:/// - buffer is the in-memory file to parser and process.
        -:   40:/// - passPipeline is the specification of the pipeline that will be applied.
        -:   41:/// - registry should contain all the dialects that can be parsed in the source.
        -:   42:/// - splitInputFile will look for a "-----" marker in the input file, and load
        -:   43:/// each chunk in an individual ModuleOp processed separately.
        -:   44:/// - verifyDiagnostics enables a verification mode where comments starting with
        -:   45:/// "expected-(error|note|remark|warning)" are parsed in the input and matched
        -:   46:/// against emitted diagnostics.
        -:   47:/// - verifyPasses enables the IR verifier in-between each pass in the pipeline.
        -:   48:/// - allowUnregisteredDialects allows to parse and create operation without
        -:   49:/// registering the Dialect in the MLIRContext.
        -:   50:/// - preloadDialectsInContext will trigger the upfront loading of all
        -:   51:///   dialects from the global registry in the MLIRContext. This option is
        -:   52:///   deprecated and will be removed soon.
        -:   53:/// - emitBytecode will generate bytecode output instead of text.
        -:   54:/// - implicitModule will enable implicit addition of a top-level
        -:   55:/// 'builtin.module' if one doesn't already exist.
        -:   56:/// - dumpPassPipeline will dump the pipeline being run to stderr
        -:   57:LogicalResult
        -:   58:MlirOptMain(llvm::raw_ostream &outputStream,
        -:   59:            std::unique_ptr<llvm::MemoryBuffer> buffer,
        -:   60:            const PassPipelineCLParser &passPipeline, DialectRegistry &registry,
        -:   61:            bool splitInputFile, bool verifyDiagnostics, bool verifyPasses,
        -:   62:            bool allowUnregisteredDialects,
        -:   63:            bool preloadDialectsInContext = false, bool emitBytecode = false,
        -:   64:            bool implicitModule = false, bool dumpPassPipeline = false);
        -:   65:
        -:   66:/// Support a callback to setup the pass manager.
        -:   67:/// - passManagerSetupFn is the callback invoked to setup the pass manager to
        -:   68:///   apply on the loaded IR.
        -:   69:LogicalResult MlirOptMain(
        -:   70:    llvm::raw_ostream &outputStream, std::unique_ptr<llvm::MemoryBuffer> buffer,
        -:   71:    PassPipelineFn passManagerSetupFn, DialectRegistry &registry,
        -:   72:    bool splitInputFile, bool verifyDiagnostics, bool verifyPasses,
        -:   73:    bool allowUnregisteredDialects, bool preloadDialectsInContext = false,
        -:   74:    bool emitBytecode = false, bool implicitModule = false);
        -:   75:
        -:   76:/// Implementation for tools like `mlir-opt`.
        -:   77:/// - toolName is used for the header displayed by `--help`.
        -:   78:/// - registry should contain all the dialects that can be parsed in the source.
        -:   79:/// - preloadDialectsInContext will trigger the upfront loading of all
        -:   80:///   dialects from the global registry in the MLIRContext. This option is
        -:   81:///   deprecated and will be removed soon.
        -:   82:LogicalResult MlirOptMain(int argc, char **argv, llvm::StringRef toolName,
        -:   83:                          DialectRegistry &registry,
        -:   84:                          bool preloadDialectsInContext = false);
        -:   85:
        -:   86:/// Helper wrapper to return the result of MlirOptMain directly from main.
        -:   87:///
        -:   88:/// Example:
        -:   89:///
        -:   90:///     int main(int argc, char **argv) {
        -:   91:///       // ...
        -:   92:///       return mlir::asMainReturnCode(mlir::MlirOptMain(
        -:   93:///           argc, argv, /* ... */);
        -:   94:///     }
        -:   95:///
   104302:   96:inline int asMainReturnCode(LogicalResult r) {
   104302:   97:  return r.succeeded() ? EXIT_SUCCESS : EXIT_FAILURE;
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:   98:}
        -:   99:
        -:  100:} // namespace mlir
        -:  101:
        -:  102:#endif // MLIR_TOOLS_MLIROPT_MLIROPTMAIN_H
