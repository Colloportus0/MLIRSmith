        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/test/lib/Interfaces/TilingInterface/TestTilingInterface.cpp
        -:    0:Graph:../tools/mlir/test/lib/Interfaces/TilingInterface/CMakeFiles/MLIRTilingInterfaceTestPasses.dir/TestTilingInterface.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Interfaces/TilingInterface/CMakeFiles/MLIRTilingInterfaceTestPasses.dir/TestTilingInterface.cpp.gcda
        -:    0:Runs:128637
        -:    1://===- TestTilingInterface.cpp - Test tiling using `TilingInterface` -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass for testing tiling operations using
        -:   10:// `TilingInterface`.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include <utility>
        -:   15:
        -:   16:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   19:#include "mlir/Dialect/Linalg/Transforms/TilingInterfaceImpl.h"
        -:   20:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   21:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   22:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   23:#include "mlir/Dialect/SCF/Transforms/TileUsingInterface.h"
        -:   24:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   25:#include "mlir/Dialect/Tensor/IR/TensorTilingInterfaceImpl.h"
        -:   26:#include "mlir/Interfaces/TilingInterface.h"
        -:   27:#include "mlir/Pass/Pass.h"
        -:   28:#include "mlir/Pass/PassManager.h"
        -:   29:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   30:#include "llvm/ADT/TypeSwitch.h"
        -:   31:
        -:   32:using namespace mlir;
        -:   33:
        -:   34:// TODO: this file should disappear and instead tests should make use of the
        -:   35:// transform dialect.
        -:   36:namespace {
        -:   37:
        -:   38:/// Marker used as attribute name in generated Linalg rewriting transformations.
        -:   39:const StringLiteral kLinalgTransformMarker = "__internal_linalg_transform__";
        -:   40:
        -:   41:/// Helper class to control application of linalg transformation patterns.
        -:   42:/// Control comes in 2 forms:
        -:   43:///   1. attribute matching and setting behavior using the attribute named
        -:   44:///      `kLinalgTransformMarker`. This can be used to build a state machine
        -:   45:///      using attributes and incrementally applying patterns to advance states.
        -:   46:///   2. filter function, which is a simple lambda on the Operation* that
        -:   47:///      returns a LogicalResult.
        -:   48:struct LinalgTransformationFilter {
        -:   49:  using FilterFunction = std::function<LogicalResult(Operation *)>;
        -:   50:
        -:   51:  explicit LinalgTransformationFilter(
        -:   52:      ArrayRef<StringAttr> matchDisjunction = {},
        -:   53:      Optional<StringAttr> replacement = None);
        -:   54:
        -:   55:  explicit LinalgTransformationFilter(
        -:   56:      const FilterFunction &f, ArrayRef<StringAttr> matchDisjunction = {},
        -:   57:      Optional<StringAttr> replacement = None);
        -:   58:
function _ZN12_GLOBAL__N_126LinalgTransformationFilterC2EOS0_ called 0 returned 0% blocks executed 0%
    #####:   59:  LinalgTransformationFilter(LinalgTransformationFilter &&) = default;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
function _ZN12_GLOBAL__N_126LinalgTransformationFilterC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   60:  LinalgTransformationFilter(const LinalgTransformationFilter &) = default;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   61:  LogicalResult checkAndNotify(PatternRewriter &rewriter, Operation *op) const;
        -:   62:  void replaceLinalgTransformationFilter(PatternRewriter &rewriter,
        -:   63:                                         Operation *op) const;
        -:   64:  bool hasReplacementFilter(Operation *op) const;
        -:   65:
        -:   66:  LinalgTransformationFilter &addFilter(const FilterFunction &f) {
        -:   67:    if (f)
        -:   68:      filters.push_back(f);
        -:   69:    return *this;
        -:   70:  }
        -:   71:
        -:   72:  template <typename... OpTypes>
        -:   73:  LinalgTransformationFilter &addOpFilter() {
        -:   74:    return addFilter(
        -:   75:        [](Operation *op) { return success(isa<OpTypes...>(op)); });
        -:   76:  }
        -:   77:
        -:   78:  LinalgTransformationFilter &addOpNameFilter(StringRef opName) {
        -:   79:    return addFilter([opName](Operation *op) {
        -:   80:      return success(op->getName().getStringRef() == opName);
        -:   81:    });
        -:   82:  }
        -:   83:
        -:   84:  LinalgTransformationFilter &setMatchByDefault() {
        -:   85:    matchByDefault = true;
        -:   86:    return *this;
        -:   87:  }
        -:   88:
        -:   89:private:
        -:   90:  SmallVector<FilterFunction> filters;
        -:   91:  SmallVector<StringAttr> matchDisjunction;
        -:   92:  Optional<StringAttr> replacement;
        -:   93:  /// When set to true, if the attribute is not set, it will be treated as
        -:   94:  /// a match. Default is false.
        -:   95:  bool matchByDefault;
        -:   96:};
        -:   97:
    #####:   98:LinalgTransformationFilter::LinalgTransformationFilter(
    #####:   99:    ArrayRef<StringAttr> matchDisjunction, Optional<StringAttr> replacement)
        -:  100:    : matchDisjunction(matchDisjunction.begin(), matchDisjunction.end()),
    #####:  101:      replacement(replacement), matchByDefault(false) {}
        -:  102:
        -:  103:LinalgTransformationFilter::LinalgTransformationFilter(
        -:  104:    const FilterFunction &f, ArrayRef<StringAttr> matchDisjunction,
        -:  105:    Optional<StringAttr> replacement)
        -:  106:    : matchDisjunction(matchDisjunction.begin(), matchDisjunction.end()),
        -:  107:      replacement(replacement), matchByDefault(false) {
        -:  108:  if (f)
        -:  109:    filters.push_back(f);
        -:  110:}
        -:  111:
        -:  112:LogicalResult
function _ZNK12_GLOBAL__N_126LinalgTransformationFilter14checkAndNotifyERN4mlir15PatternRewriterEPNS1_9OperationE called 0 returned 0% blocks executed 0%
    #####:  113:LinalgTransformationFilter::checkAndNotify(PatternRewriter &rewriter,
        -:  114:                                           Operation *op) const {
    #####:  115:  if (llvm::any_of(filters,
call    0 never executed
branch  1 never executed
branch  2 never executed
function _ZZNK12_GLOBAL__N_126LinalgTransformationFilter14checkAndNotifyERN4mlir15PatternRewriterEPNS1_9OperationEENKUlRKSt8functionIFNS1_13LogicalResultES5_EEE_clESB_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  116:                   [&](const FilterFunction &f) { return failed(f(op)); }))
branch  0 never executed
branch  1 never executed
    #####:  117:    return failure();
        -:  118:
    #####:  119:  auto attr = op->template getAttrOfType<StringAttr>(kLinalgTransformMarker);
call    0 never executed
        -:  120:
    #####:  121:  if (!attr) {
branch  0 never executed
branch  1 never executed
        -:  122:    // 1. Has no filter case and matchDisjunction is empty.
    #####:  123:    if (matchDisjunction.empty() || matchByDefault)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  124:      return success();
        -:  125:
        -:  126:    // 2. Has no filter but was expecting a filter.
function _ZZNK12_GLOBAL__N_126LinalgTransformationFilter14checkAndNotifyERN4mlir15PatternRewriterEPNS1_9OperationEENKUlRNS1_10DiagnosticEE0_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  127:    return rewriter.notifyMatchFailure(op, [&](Diagnostic &diag) {
    #####:  128:      diag << " does not have any filter from list: ";
call    0 never executed
    #####:  129:      interleaveComma(matchDisjunction, diag);
call    0 never executed
    #####:  130:    });
call    0 never executed
        -:  131:  }
        -:  132:
        -:  133:  // 4. Match explicit filter.
    #####:  134:  for (auto filter : matchDisjunction)
branch  0 never executed
branch  1 never executed
    #####:  135:    if (attr.getValue() == filter)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  136:      return success();
        -:  137:
        -:  138:  // 5. Fail to match.
function _ZZNK12_GLOBAL__N_126LinalgTransformationFilter14checkAndNotifyERN4mlir15PatternRewriterEPNS1_9OperationEENKUlRNS1_10DiagnosticEE1_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  139:  return rewriter.notifyMatchFailure(op, [&](Diagnostic &diag) {
    #####:  140:    diag << " does not have any filter from list: ";
call    0 never executed
    #####:  141:    interleaveComma(matchDisjunction, diag);
call    0 never executed
    #####:  142:  });
call    0 never executed
        -:  143:}
        -:  144:
function _ZNK12_GLOBAL__N_126LinalgTransformationFilter33replaceLinalgTransformationFilterERN4mlir15PatternRewriterEPNS1_9OperationE called 0 returned 0% blocks executed 0%
    #####:  145:void LinalgTransformationFilter::replaceLinalgTransformationFilter(
        -:  146:    PatternRewriter &rewriter, Operation *op) const {
    #####:  147:  if (replacement.has_value())
branch  0 never executed
branch  1 never executed
    #####:  148:    op->setAttr(kLinalgTransformMarker, replacement.value());
call    0 never executed
        -:  149:  else
    #####:  150:    op->removeAttr(rewriter.getStringAttr(kLinalgTransformMarker));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  151:}
        -:  152:
        -:  153:bool LinalgTransformationFilter::hasReplacementFilter(Operation *op) const {
        -:  154:  if (!replacement)
        -:  155:    return false;
        -:  156:  auto attr = op->getAttr(kLinalgTransformMarker).dyn_cast<StringAttr>();
        -:  157:  return attr && attr == *replacement;
        -:  158:}
        -:  159:
        -:  160:/// Pattern for testing `TileUsingSCFForOp` pattern (that tiles operations using
        -:  161:/// the `TilingInterface` with `scf.for` ops for iterating over the tiles) while
        -:  162:/// using a `filter` to avoid recursive application.
        -:  163:struct TestTileUsingSCFForOp
        -:  164:    : public OpInterfaceRewritePattern<TilingInterface> {
function _ZN12_GLOBAL__N_121TestTileUsingSCFForOpC2EPN4mlir11MLIRContextENS1_3scf16SCFTilingOptionsENS_26LinalgTransformationFilterENS1_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  165:  TestTileUsingSCFForOp(
        -:  166:      MLIRContext *context, scf::SCFTilingOptions options,
        -:  167:      LinalgTransformationFilter filter = LinalgTransformationFilter(),
        -:  168:      PatternBenefit benefit = 1)
    #####:  169:      : OpInterfaceRewritePattern<TilingInterface>(context, benefit),
    #####:  170:        options(std::move(options)), filter(std::move(filter)) {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:  171:
        -:  172:  /// Construct a generic pattern applied to `opName`.
        -:  173:  TestTileUsingSCFForOp(
        -:  174:      StringRef opName, MLIRContext *context, scf::SCFTilingOptions options,
        -:  175:      LinalgTransformationFilter filter = LinalgTransformationFilter(),
        -:  176:      PatternBenefit benefit = 1)
        -:  177:      : OpInterfaceRewritePattern<TilingInterface>(context, benefit),
        -:  178:        options(std::move(options)), filter(std::move(filter)) {}
        -:  179:
function _ZNK12_GLOBAL__N_121TestTileUsingSCFForOp15matchAndRewriteEN4mlir15TilingInterfaceERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  180:  LogicalResult matchAndRewrite(TilingInterface op,
        -:  181:                                PatternRewriter &rewriter) const override {
    #####:  182:    if (failed(filter.checkAndNotify(rewriter, op)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  183:      return failure();
        -:  184:
    #####:  185:    FailureOr<scf::SCFTilingResult> tilingResult =
    #####:  186:        scf::tileUsingSCFForOp(rewriter, op, options);
call    0 never executed
    #####:  187:    if (failed(tilingResult))
branch  0 never executed
branch  1 never executed
    #####:  188:      return rewriter.notifyMatchFailure(op, "failed to tile operation");
call    0 never executed
        -:  189:
    #####:  190:    if (op->getNumResults()) {
branch  0 never executed
branch  1 never executed
    #####:  191:      rewriter.replaceOp(op, tilingResult->replacements);
call    0 never executed
call    1 never executed
        -:  192:    } else {
    #####:  193:      rewriter.eraseOp(op);
call    0 never executed
        -:  194:    }
        -:  195:
    #####:  196:    filter.replaceLinalgTransformationFilter(rewriter, tilingResult->tiledOp);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  197:    return success();
branch  0 never executed
branch  1 never executed
        -:  198:  }
        -:  199:
        -:  200:private:
        -:  201:  scf::SCFTilingOptions options;
        -:  202:  LinalgTransformationFilter filter;
        -:  203:};
        -:  204:
        -:  205:/// Pattern for testing `TileConsumerAndFuseProducersUsingSCFForOp` pattern
        -:  206:/// (that tiles and fuses operations using the `TilingInterface` with `scf.for`
        -:  207:/// ops for iterating over the tiles) while using a `filter` to avoid recursive
        -:  208:/// application.
        -:  209:struct TestTileConsumerAndFuseProducersGreedilyUsingSCFForOp
        -:  210:    : public OpInterfaceRewritePattern<TilingInterface> {
function _ZN12_GLOBAL__N_153TestTileConsumerAndFuseProducersGreedilyUsingSCFForOpC2EPN4mlir11MLIRContextENS1_3scf21SCFTileAndFuseOptionsENS_26LinalgTransformationFilterENS1_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  211:  TestTileConsumerAndFuseProducersGreedilyUsingSCFForOp(
        -:  212:      MLIRContext *context, scf::SCFTileAndFuseOptions options,
        -:  213:      LinalgTransformationFilter filter = LinalgTransformationFilter(),
        -:  214:      PatternBenefit benefit = 1)
    #####:  215:      : OpInterfaceRewritePattern<TilingInterface>(context, benefit),
    #####:  216:        options(std::move(options)), filter(std::move(filter)) {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:  217:
        -:  218:  /// Construct a generic pattern applied to `opName`.
        -:  219:  TestTileConsumerAndFuseProducersGreedilyUsingSCFForOp(
        -:  220:      StringRef opName, MLIRContext *context,
        -:  221:      scf::SCFTileAndFuseOptions options,
        -:  222:      LinalgTransformationFilter filter = LinalgTransformationFilter(),
        -:  223:      PatternBenefit benefit = 1)
        -:  224:      : OpInterfaceRewritePattern<TilingInterface>(context, benefit),
        -:  225:        options(std::move(options)), filter(std::move(filter)) {}
        -:  226:
function _ZNK12_GLOBAL__N_153TestTileConsumerAndFuseProducersGreedilyUsingSCFForOp15matchAndRewriteEN4mlir15TilingInterfaceERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  227:  LogicalResult matchAndRewrite(TilingInterface op,
        -:  228:                                PatternRewriter &rewriter) const override {
    #####:  229:    if (failed(filter.checkAndNotify(rewriter, op)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  230:      return failure();
        -:  231:
    #####:  232:    FailureOr<scf::SCFTileAndFuseResult> tileAndFuseResult =
        -:  233:        scf::tileConsumerAndFuseProducerGreedilyUsingSCFForOp(rewriter, op,
    #####:  234:                                                              options);
call    0 never executed
    #####:  235:    if (failed(tileAndFuseResult)) {
branch  0 never executed
branch  1 never executed
    #####:  236:      return failure();
        -:  237:    }
        -:  238:    // Replace the tiled op with replacements.
    #####:  239:    SmallVector<Value> replacements(op->getNumResults());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  240:    for (const auto &result : llvm::enumerate(op->getResults())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  241:      replacements[result.index()] =
branch  0 never executed
branch  1 never executed
    #####:  242:          tileAndFuseResult->replacements.lookup(result.value());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  243:    }
    #####:  244:    rewriter.replaceOp(op, replacements);
call    0 never executed
call    1 never executed
        -:  245:
    #####:  246:    filter.replaceLinalgTransformationFilter(
branch  0 never executed
branch  1 never executed
    #####:  247:        rewriter, tileAndFuseResult->tiledAndFusedOps.front());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  248:    return success();
branch  0 never executed
branch  1 never executed
        -:  249:  }
        -:  250:
        -:  251:private:
        -:  252:  scf::SCFTileAndFuseOptions options;
        -:  253:  LinalgTransformationFilter filter;
        -:  254:};
        -:  255:
        -:  256:/// Pattern to lower operations that implement the `TilingInterface` to
        -:  257:/// loops/scalar IR using `scf.for`.
        -:  258:struct LowerToLoopsUsingSCFForOp
        -:  259:    : public OpInterfaceRewritePattern<TilingInterface> {
        -:  260:  using OpInterfaceRewritePattern<TilingInterface>::OpInterfaceRewritePattern;
        -:  261:
        -:  262:  /// `matchAndRewrite` implementation that returns the significant transformed
        -:  263:  /// pieces of IR.
function _ZNK12_GLOBAL__N_125LowerToLoopsUsingSCFForOp15matchAndRewriteEN4mlir15TilingInterfaceERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  264:  LogicalResult matchAndRewrite(TilingInterface op,
        -:  265:                                PatternRewriter &rewriter) const override {
    #####:  266:    FailureOr<SmallVector<scf::ForOp>> loops =
    #####:  267:        scf::lowerToLoopsUsingSCFForOp(rewriter, op);
call    0 never executed
    #####:  268:    if (failed(loops))
branch  0 never executed
branch  1 never executed
    #####:  269:      return rewriter.notifyMatchFailure(op, "failed to lower to loops");
call    0 never executed
    #####:  270:    rewriter.eraseOp(op);
call    0 never executed
    #####:  271:    return loops;
branch  0 never executed
branch  1 never executed
        -:  272:  }
        -:  273:};
        -:  274:
        -:  275:/// Test pass for testing the use of `TilingInterface`.
        -:  276:struct TestTilingInterfacePass
        -:  277:    : public PassWrapper<TestTilingInterfacePass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_123TestTilingInterfacePass13resolveTypeIDEv called 129200 returned 100% blocks executed 100%
   129200:  278:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestTilingInterfacePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  279:
function _ZN12_GLOBAL__N_123TestTilingInterfacePassC2Ev called 129200 returned 100% blocks executed 100%
   129200:  280:  TestTilingInterfacePass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
function _ZN12_GLOBAL__N_123TestTilingInterfacePassC2ERKS0_ called 33768 returned 100% blocks executed 100%
    33768:  281:  TestTilingInterfacePass(const TestTilingInterfacePass &pass)
    33768:  282:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
function _ZNK12_GLOBAL__N_123TestTilingInterfacePass20getDependentDialectsERN4mlir15DialectRegistryE called 563 returned 100% blocks executed 100%
      563:  283:  void getDependentDialects(DialectRegistry &registry) const override {
      563:  284:    registry.insert<AffineDialect, linalg::LinalgDialect, memref::MemRefDialect,
      563:  285:                    scf::SCFDialect, tensor::TensorDialect>();
call    0 returned 100%
      563:  286:    linalg::registerTilingInterfaceExternalModels(registry);
call    0 returned 100%
      563:  287:    tensor::registerTilingInterfaceExternalModels(registry);
call    0 returned 100%
      563:  288:  }
function _ZNK12_GLOBAL__N_123TestTilingInterfacePass11getArgumentEv called 128649 returned 100% blocks executed 100%
   128649:  289:  StringRef getArgument() const final { return "test-tiling-interface"; }
function _ZNK12_GLOBAL__N_123TestTilingInterfacePass14getDescriptionEv called 128637 returned 100% blocks executed 100%
   128637:  290:  StringRef getDescription() const final {
   128637:  291:    return "Test tiling using TilingInterface";
        -:  292:  }
        -:  293:
        -:  294:  Option<bool> testTiling{
        -:  295:      *this, "tile-using-scf-for",
        -:  296:      llvm::cl::desc(
        -:  297:          "Test tiling using TilingInterface with scf.for operations"),
        -:  298:      llvm::cl::init(false)};
        -:  299:
        -:  300:  Option<bool> testTileConsumerAndFuseProducer{
        -:  301:      *this, "tile-consumer-and-fuse-producer-using-scf-for",
        -:  302:      llvm::cl::desc("Test tile and fuse transformation using TilingInterface "
        -:  303:                     "with scf.for operations"),
        -:  304:      llvm::cl::init(false)};
        -:  305:
        -:  306:  Option<bool> testLoweringToScalar{
        -:  307:      *this, "lower-to-scalar-using-scf-for",
        -:  308:      llvm::cl::desc("Test lowering to scalar implementation using "
        -:  309:                     "TilingInterface with scf.for operations"),
        -:  310:      llvm::cl::init(false)};
        -:  311:
        -:  312:  void runOnOperation() override;
        -:  313:
        -:  314:private:
        -:  315:  void addTestPatterns(MLIRContext *context, RewritePatternSet &patterns);
        -:  316:};
        -:  317:} // namespace
        -:  318:
function _ZL19addPatternForTilingPN4mlir11MLIRContextERNS_17RewritePatternSetEN4llvm9StringRefENS4_8ArrayRefIlEES7_ called 0 returned 0% blocks executed 0%
    #####:  319:static void addPatternForTiling(MLIRContext *context,
        -:  320:                                RewritePatternSet &patterns,
        -:  321:                                StringRef filterName,
        -:  322:                                ArrayRef<int64_t> tileSizes,
        -:  323:                                ArrayRef<int64_t> interchange = {}) {
    #####:  324:  scf::SCFTilingOptions tilingOptions;
call    0 never executed
call    1 never executed
    #####:  325:  tilingOptions.setTileSizes(tileSizes).setInterchange(interchange);
call    0 never executed
call    1 never executed
    #####:  326:  LinalgTransformationFilter filter(StringAttr::get(context, filterName),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  327:                                    StringAttr::get(context, "tiled"));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  328:  patterns.add<TestTileUsingSCFForOp>(context, tilingOptions, filter);
call    0 never executed
call    1 never executed
    #####:  329:}
        -:  330:
function _ZL24addPatternForTileAndFusePN4mlir11MLIRContextERNS_17RewritePatternSetEN4llvm9StringRefENS4_8ArrayRefIlEES7_ called 0 returned 0% blocks executed 0%
    #####:  331:static void addPatternForTileAndFuse(MLIRContext *context,
        -:  332:                                     RewritePatternSet &patterns,
        -:  333:                                     StringRef filterName,
        -:  334:                                     ArrayRef<int64_t> tileSizes,
        -:  335:                                     ArrayRef<int64_t> interchange = {}) {
    #####:  336:  scf::SCFTileAndFuseOptions tileAndFuseOptions;
call    0 never executed
    #####:  337:  tileAndFuseOptions.tilingOptions.setTileSizes(tileSizes).setInterchange(
call    0 never executed
    #####:  338:      interchange);
call    0 never executed
    #####:  339:  LinalgTransformationFilter filter(StringAttr::get(context, filterName),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  340:                                    StringAttr::get(context, "tiled"));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  341:  patterns.add<TestTileConsumerAndFuseProducersGreedilyUsingSCFForOp>(
    #####:  342:      context, tileAndFuseOptions, filter);
call    0 never executed
call    1 never executed
    #####:  343:}
        -:  344:
function _ZN12_GLOBAL__N_123TestTilingInterfacePass15addTestPatternsEPN4mlir11MLIRContextERNS1_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:  345:void TestTilingInterfacePass::addTestPatterns(MLIRContext *context,
        -:  346:                                              RewritePatternSet &patterns) {
    #####:  347:  if (testTiling) {
branch  0 never executed
branch  1 never executed
        -:  348:    // 1. Tiling M and N dims of `linalg.matmul` on tensors.
    #####:  349:    addPatternForTiling(context, patterns, "simple_gemm", {10, 20});
call    0 never executed
        -:  350:    // 2. Tiling M, N and K of `linalg.matmul` on buffers.
    #####:  351:    addPatternForTiling(context, patterns, "simple_gemm_memref", {10, 20, 30});
call    0 never executed
        -:  352:    // 3. Tiling 3D parallel generic op which implements a transpose
    #####:  353:    addPatternForTiling(context, patterns, "parallel_generic_transpose",
call    0 never executed
        -:  354:                        {10, 0, 20});
        -:  355:    // 4. Tiling 2D conv op.
    #####:  356:    addPatternForTiling(context, patterns, "simple_conv",
call    0 never executed
        -:  357:                        {0, 0, 0, 0, 10, 20, 30});
        -:  358:    // 5. Tiling a simple op with `linalg.index` inside.
    #####:  359:    addPatternForTiling(context, patterns, "indexed_semantics", {10, 20});
call    0 never executed
        -:  360:    // 6. Tiling + interchange of an operation
    #####:  361:    addPatternForTiling(context, patterns, "gemm_interchange", {10, 20, 30},
call    0 never executed
        -:  362:                        {1, 2, 0});
        -:  363:    // 7. Tiling for 2D pad tensor operations.
    #####:  364:    addPatternForTiling(context, patterns, "pad_2dtiling", {2, 3});
call    0 never executed
        -:  365:    // 8. Tiling inner dimension of 2d pad tensor operations.
    #####:  366:    addPatternForTiling(context, patterns, "pad_inner_tiling", {0, 3});
call    0 never executed
        -:  367:    // 9. Tiling inner dimension of 2d pad tensor operations.
    #####:  368:    addPatternForTiling(context, patterns, "pad_outer_tiling", {2, 3});
call    0 never executed
        -:  369:
    #####:  370:    return;
        -:  371:  }
    #####:  372:  if (testTileConsumerAndFuseProducer) {
branch  0 never executed
branch  1 never executed
        -:  373:    // 1. Tile and fuse of gemm with fill producer and bias-add consumer.
    #####:  374:    addPatternForTileAndFuse(context, patterns, "fusion", {10, 20});
call    0 never executed
        -:  375:    // 2. Tile and fuse sequence of GEMMs, by fusing only along M.
    #####:  376:    addPatternForTileAndFuse(context, patterns, "gemm_fusion", {10});
call    0 never executed
        -:  377:    // 3. Tile and fuse gemm with consumer + interchange of tiled loops.
    #####:  378:    addPatternForTileAndFuse(context, patterns, "gemm_interchange_fusion",
call    0 never executed
        -:  379:                             {10, 20}, {1, 0});
        -:  380:    // 4. Tile and fuse matmul + transpose(matmul). Will introduce redundant
        -:  381:    // computations.
    #####:  382:    addPatternForTileAndFuse(context, patterns, "gemm_plus_gemm_fusion",
call    0 never executed
        -:  383:                             {10, 20});
        -:  384:    // 5. Tile and fuse a sequence of GEMMs by tiling and fusing only along M
        -:  385:    // dimension.
    #####:  386:    addPatternForTileAndFuse(context, patterns, "gemm_sequence_fusion", {10});
call    0 never executed
    #####:  387:    return;
        -:  388:  }
    #####:  389:  if (testLoweringToScalar) {
branch  0 never executed
branch  1 never executed
    #####:  390:    patterns.add<LowerToLoopsUsingSCFForOp>(context);
call    0 never executed
        -:  391:  }
        -:  392:}
        -:  393:
function _ZN12_GLOBAL__N_123TestTilingInterfacePass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  394:void TestTilingInterfacePass::runOnOperation() {
    #####:  395:  MLIRContext *context = &getContext();
call    0 never executed
        -:  396:
    #####:  397:  RewritePatternSet tilingPatterns(context);
call    0 never executed
    #####:  398:  addTestPatterns(context, tilingPatterns);
call    0 never executed
    #####:  399:  if (failed(applyPatternsAndFoldGreedily(getOperation(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  400:                                          std::move(tilingPatterns))))
call    0 never executed
    #####:  401:    return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  402:}
        -:  403:
        -:  404:namespace mlir {
        -:  405:namespace test {
function _ZN4mlir4test27registerTestTilingInterfaceEv called 128637 returned 100% blocks executed 100%
   128637:  406:void registerTestTilingInterface() {
   128637:  407:  PassRegistration<TestTilingInterfacePass>();
call    0 returned 100%
   128637:  408:}
        -:  409:} // namespace test
        -:  410:} // namespace mlir
