        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Dialect/Bufferization/Transforms/BufferResultsToOutParams.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferResultsToOutParams.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferResultsToOutParams.cpp.gcda
        -:    0:Runs:128624
        -:    1://===- BufferResultsToOutParams.cpp - Calling convention conversion -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   12:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   13:#include "mlir/IR/Operation.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:namespace bufferization {
        -:   18:#define GEN_PASS_DEF_BUFFERRESULTSTOOUTPARAMS
        -:   19:#include "mlir/Dialect/Bufferization/Transforms/Passes.h.inc"
        -:   20:} // namespace bufferization
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:/// Return `true` if the given MemRef type has a fully dynamic layout.
function _ZL24hasFullyDynamicLayoutMapN4mlir10MemRefTypeE called 0 returned 0% blocks executed 0%
    #####:   26:static bool hasFullyDynamicLayoutMap(MemRefType type) {
    #####:   27:  int64_t offset;
    #####:   28:  SmallVector<int64_t, 4> strides;
call    0 never executed
    #####:   29:  if (failed(getStridesAndOffset(type, strides, offset)))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   30:    return false;
    #####:   31:  if (!llvm::all_of(strides, ShapedType::isDynamicStrideOrOffset))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   32:    return false;
    #####:   33:  if (!ShapedType::isDynamicStrideOrOffset(offset))
branch  0 never executed
branch  1 never executed
    #####:   34:    return false;
        -:   35:  return true;
        -:   36:}
        -:   37:
        -:   38:/// Return `true` if the given MemRef type has a static identity layout (i.e.,
        -:   39:/// no layout).
    #####:   40:static bool hasStaticIdentityLayout(MemRefType type) {
    #####:   41:  return type.getLayout().isIdentity();
call    0 never executed
call    1 never executed
        -:   42:}
        -:   43:
        -:   44:// Updates the func op and entry block.
        -:   45://
        -:   46:// Any args appended to the entry block are added to `appendedEntryArgs`.
        -:   47:static LogicalResult
function _ZL12updateFuncOpN4mlir4func6FuncOpERN4llvm15SmallVectorImplINS_13BlockArgumentEEE called 0 returned 0% blocks executed 0%
    #####:   48:updateFuncOp(func::FuncOp func,
        -:   49:             SmallVectorImpl<BlockArgument> &appendedEntryArgs) {
    #####:   50:  auto functionType = func.getFunctionType();
call    0 never executed
        -:   51:
        -:   52:  // Collect information about the results will become appended arguments.
    #####:   53:  SmallVector<Type, 6> erasedResultTypes;
call    0 never executed
    #####:   54:  BitVector erasedResultIndices(functionType.getNumResults());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:  for (const auto &resultType : llvm::enumerate(functionType.getResults())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   56:    if (auto memrefType = resultType.value().dyn_cast<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:      if (!hasStaticIdentityLayout(memrefType) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   58:          !hasFullyDynamicLayoutMap(memrefType)) {
call    0 never executed
        -:   59:        // Only buffers with static identity layout can be allocated. These can
        -:   60:        // be casted to memrefs with fully dynamic layout map. Other layout maps
        -:   61:        // are not supported.
    #####:   62:        return func->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   63:               << "cannot create out param for result with unsupported layout";
call    0 never executed
        -:   64:      }
    #####:   65:      erasedResultIndices.set(resultType.index());
call    0 never executed
    #####:   66:      erasedResultTypes.push_back(memrefType);
call    0 never executed
        -:   67:    }
        -:   68:  }
        -:   69:
        -:   70:  // Add the new arguments to the function type.
    #####:   71:  auto newArgTypes = llvm::to_vector<6>(
    #####:   72:      llvm::concat<const Type>(functionType.getInputs(), erasedResultTypes));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   73:  auto newFunctionType = FunctionType::get(func.getContext(), newArgTypes,
    #####:   74:                                           functionType.getResults());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   75:  func.setType(newFunctionType);
call    0 never executed
        -:   76:
        -:   77:  // Transfer the result attributes to arg attributes.
    #####:   78:  auto erasedIndicesIt = erasedResultIndices.set_bits_begin();
call    0 never executed
    #####:   79:  for (int i = 0, e = erasedResultTypes.size(); i < e; ++i, ++erasedIndicesIt) {
branch  0 never executed
branch  1 never executed
    #####:   80:    func.setArgAttrs(functionType.getNumInputs() + i,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   81:                     func.getResultAttrs(*erasedIndicesIt));
        -:   82:  }
        -:   83:
        -:   84:  // Erase the results.
    #####:   85:  func.eraseResults(erasedResultIndices);
call    0 never executed
        -:   86:
        -:   87:  // Add the new arguments to the entry block if the function is not external.
    #####:   88:  if (func.isExternal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:    return success();
    #####:   90:  Location loc = func.getLoc();
    #####:   91:  for (Type type : erasedResultTypes)
branch  0 never executed
branch  1 never executed
    #####:   92:    appendedEntryArgs.push_back(func.front().addArgument(type, loc));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   93:
    #####:   94:  return success();
branch  0 never executed
branch  1 never executed
        -:   95:}
        -:   96:
        -:   97:// Updates all ReturnOps in the scope of the given func::FuncOp by either
        -:   98:// keeping them as return values or copying the associated buffer contents into
        -:   99:// the given out-params.
    #####:  100:static void updateReturnOps(func::FuncOp func,
        -:  101:                            ArrayRef<BlockArgument> appendedEntryArgs) {
function _ZZL15updateReturnOpsN4mlir4func6FuncOpEN4llvm8ArrayRefINS_13BlockArgumentEEEENKUlNS0_8ReturnOpEE_clES6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  102:  func.walk([&](func::ReturnOp op) {
call    0 never executed
    #####:  103:    SmallVector<Value, 6> copyIntoOutParams;
call    0 never executed
    #####:  104:    SmallVector<Value, 6> keepAsReturnOperands;
branch  0 never executed
branch  1 never executed
    #####:  105:    for (Value operand : op.getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  106:      if (operand.getType().isa<MemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  107:        copyIntoOutParams.push_back(operand);
call    0 never executed
        -:  108:      else
    #####:  109:        keepAsReturnOperands.push_back(operand);
call    0 never executed
        -:  110:    }
    #####:  111:    OpBuilder builder(op);
call    0 never executed
    #####:  112:    for (auto t : llvm::zip(copyIntoOutParams, appendedEntryArgs))
branch  0 never executed
branch  1 never executed
    #####:  113:      builder.create<memref::CopyOp>(op.getLoc(), std::get<0>(t),
call    0 never executed
    #####:  114:                                     std::get<1>(t));
call    0 never executed
    #####:  115:    builder.create<func::ReturnOp>(op.getLoc(), keepAsReturnOperands);
call    0 never executed
    #####:  116:    op.erase();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:  });
        -:  118:}
        -:  119:
        -:  120:// Updates all CallOps in the scope of the given ModuleOp by allocating
        -:  121:// temporary buffers for newly introduced out params.
function _ZL11updateCallsN4mlir8ModuleOpE called 533 returned 100% blocks executed 100%
      533:  122:static LogicalResult updateCalls(ModuleOp module) {
      533:  123:  bool didFail = false;
function _ZZL11updateCallsN4mlir8ModuleOpEENKUlNS_4func6CallOpEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
     533*:  124:  module.walk([&](func::CallOp op) {
call    0 returned 100%
    #####:  125:    SmallVector<Value, 6> replaceWithNewCallResults;
branch  0 never executed
branch  1 never executed
    #####:  126:    SmallVector<Value, 6> replaceWithOutParams;
branch  0 never executed
branch  1 never executed
    #####:  127:    for (OpResult result : op.getResults()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  128:      if (result.getType().isa<MemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:        replaceWithOutParams.push_back(result);
call    0 never executed
        -:  130:      else
    #####:  131:        replaceWithNewCallResults.push_back(result);
call    0 never executed
        -:  132:    }
    #####:  133:    SmallVector<Value, 6> outParams;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  134:    OpBuilder builder(op);
call    0 never executed
    #####:  135:    for (Value memref : replaceWithOutParams) {
branch  0 never executed
branch  1 never executed
    #####:  136:      if (!memref.getType().cast<MemRefType>().hasStaticShape()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  137:        op.emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  138:            << "cannot create out param for dynamically shaped result";
call    0 never executed
    #####:  139:        didFail = true;
    #####:  140:        return;
branch  0 never executed
branch  1 never executed
        -:  141:      }
    #####:  142:      auto memrefType = memref.getType().cast<MemRefType>();
call    0 never executed
    #####:  143:      auto allocType =
        -:  144:          MemRefType::get(memrefType.getShape(), memrefType.getElementType(),
    #####:  145:                          AffineMap(), memrefType.getMemorySpaceAsInt());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  146:      Value outParam = builder.create<memref::AllocOp>(op.getLoc(), allocType);
call    0 never executed
call    1 never executed
    #####:  147:      if (!hasStaticIdentityLayout(memrefType)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  148:        // Layout maps are already checked in `updateFuncOp`.
    #####:  149:        assert(hasFullyDynamicLayoutMap(memrefType) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  150:               "layout map not supported");
    #####:  151:        outParam =
    #####:  152:            builder.create<memref::CastOp>(op.getLoc(), memrefType, outParam);
call    0 never executed
        -:  153:      }
    #####:  154:      memref.replaceAllUsesWith(outParam);
call    0 never executed
    #####:  155:      outParams.push_back(outParam);
call    0 never executed
        -:  156:    }
        -:  157:
    #####:  158:    auto newOperands = llvm::to_vector<6>(op.getOperands());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  159:    newOperands.append(outParams.begin(), outParams.end());
call    0 never executed
    #####:  160:    auto newResultTypes = llvm::to_vector<6>(llvm::map_range(
    #####:  161:        replaceWithNewCallResults, [](Value v) { return v.getType(); }));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  162:    auto newCall = builder.create<func::CallOp>(op.getLoc(), op.getCalleeAttr(),
call    0 never executed
    #####:  163:                                                newResultTypes, newOperands);
call    0 never executed
    #####:  164:    for (auto t : llvm::zip(replaceWithNewCallResults, newCall.getResults()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  165:      std::get<0>(t).replaceAllUsesWith(std::get<1>(t));
call    0 never executed
    #####:  166:    op.erase();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  167:  });
        -:  168:
      533:  169:  return failure(didFail);
        -:  170:}
        -:  171:
        -:  172:LogicalResult
function _ZN4mlir13bufferization31promoteBufferResultsToOutParamsENS_8ModuleOpE called 533 returned 100% blocks executed 27%
      533:  173:mlir::bufferization::promoteBufferResultsToOutParams(ModuleOp module) {
     533*:  174:  for (auto func : module.getOps<func::FuncOp>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
    #####:  175:    SmallVector<BlockArgument, 6> appendedEntryArgs;
call    0 never executed
    #####:  176:    if (failed(updateFuncOp(func, appendedEntryArgs)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  177:      return failure();
branch  0 never executed
branch  1 never executed
    #####:  178:    if (func.isExternal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  179:      continue;
branch  0 never executed
branch  1 never executed
    #####:  180:    updateReturnOps(func, appendedEntryArgs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  181:  }
      533:  182:  if (failed(updateCalls(module)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  183:    return failure();
      533:  184:  return success();
        -:  185:}
        -:  186:
        -:  187:namespace {
  129239*:  188:struct BufferResultsToOutParamsPass
call    0 never executed
call    1 returned 100%
        -:  189:    : bufferization::impl::BufferResultsToOutParamsBase<
        -:  190:          BufferResultsToOutParamsPass> {
function _ZN12_GLOBAL__N_128BufferResultsToOutParamsPass14runOnOperationEv called 533 returned 100% blocks executed 80%
      533:  191:  void runOnOperation() override {
      533:  192:    if (failed(bufferization::promoteBufferResultsToOutParams(getOperation())))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  193:      return signalPassFailure();
call    0 never executed
        -:  194:  }
        -:  195:};
        -:  196:} // namespace
        -:  197:
        -:  198:std::unique_ptr<Pass>
function _ZN4mlir13bufferization34createBufferResultsToOutParamsPassEv called 129239 returned 100% blocks executed 100%
   129239:  199:mlir::bufferization::createBufferResultsToOutParamsPass() {
   129239:  200:  return std::make_unique<BufferResultsToOutParamsPass>();
call    0 returned 100%
        -:  201:}
