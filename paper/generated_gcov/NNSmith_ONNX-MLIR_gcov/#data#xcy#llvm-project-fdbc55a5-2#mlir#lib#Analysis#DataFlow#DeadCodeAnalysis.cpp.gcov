        -:    0:Source:/data/xcy/llvm-project-fdbc55a5-2/mlir/lib/Analysis/DataFlow/DeadCodeAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DeadCodeAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DeadCodeAnalysis.cpp.gcda
        -:    0:Runs:128638
        -:    1://===- DeadCodeAnalysis.cpp - Dead code analysis --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   11:#include "mlir/Interfaces/CallInterfaces.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::dataflow;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// Executable
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
function _ZN4mlir8dataflow10Executable9setToLiveEv called 0 returned 0% blocks executed 0%
  520086*:   21:ChangeResult Executable::setToLive() {
    #####:   22:  if (live)
branch  0 never executed
branch  1 never executed
        -:   23:    return ChangeResult::NoChange;
  453076*:   24:  live = true;
  453076*:   25:  return ChangeResult::Change;
        -:   26:}
        -:   27:
function _ZNK4mlir8dataflow10Executable5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   28:void Executable::print(raw_ostream &os) const {
    #####:   29:  os << (live ? "live" : "dead");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   30:}
        -:   31:
function _ZNK4mlir8dataflow10Executable8onUpdateEPNS_14DataFlowSolverE called 453076 returned 100% blocks executed 100%
   453076:   32:void Executable::onUpdate(DataFlowSolver *solver) const {
   453076:   33:  if (auto *block = point.dyn_cast<Block *>()) {
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
        -:   34:    // Re-invoke the analyses on the block itself.
   570165:   35:    for (DataFlowAnalysis *analysis : subscribers)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
   364341:   36:      solver->enqueue({block, analysis});
call    0 returned 100%
call    1 returned 100%
        -:   37:    // Re-invoke the analyses on all operations in the block.
   570165:   38:    for (DataFlowAnalysis *analysis : subscribers)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
  2534566:   39:      for (Operation &op : *block)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
  2170225:   40:        solver->enqueue({&op, analysis});
call    0 returned 100%
call    1 returned 100%
   247252:   41:  } else if (auto *programPoint = point.dyn_cast<GenericProgramPoint *>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   42:    // Re-invoke the analysis on the successor block.
   247252:   43:    if (auto *edge = dyn_cast<CFGEdge>(programPoint)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   305088:   44:      for (DataFlowAnalysis *analysis : subscribers)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
    57836:   45:        solver->enqueue({edge->getTo(), analysis});
call    0 returned 100%
call    1 returned 100%
        -:   46:    }
        -:   47:  }
   453076:   48:}
        -:   49:
        -:   50://===----------------------------------------------------------------------===//
        -:   51:// PredecessorState
        -:   52://===----------------------------------------------------------------------===//
        -:   53:
function _ZNK4mlir8dataflow16PredecessorState5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   54:void PredecessorState::print(raw_ostream &os) const {
    #####:   55:  if (allPredecessorsKnown())
branch  0 never executed
branch  1 never executed
    #####:   56:    os << "(all) ";
call    0 never executed
    #####:   57:  os << "predecessors:\n";
call    0 never executed
    #####:   58:  for (Operation *op : getKnownPredecessors())
branch  0 never executed
branch  1 never executed
    #####:   59:    os << "  " << *op << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   60:}
        -:   61:
function _ZN4mlir8dataflow16PredecessorState4joinEPNS_9OperationE called 0 returned 0% blocks executed 0%
   75741*:   62:ChangeResult PredecessorState::join(Operation *predecessor) {
   75741*:   63:  return knownPredecessors.insert(predecessor) ? ChangeResult::Change
branch  0 never executed
branch  1 never executed
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:   64:                                               : ChangeResult::NoChange;
        -:   65:}
        -:   66:
function _ZN4mlir8dataflow16PredecessorState4joinEPNS_9OperationENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:   67:ChangeResult PredecessorState::join(Operation *predecessor, ValueRange inputs) {
    #####:   68:  ChangeResult result = join(predecessor);
call    0 never executed
    #####:   69:  if (!inputs.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   70:    ValueRange &curInputs = successorInputs[predecessor];
call    0 never executed
    #####:   71:    if (curInputs != inputs) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:      curInputs = inputs;
    #####:   73:      result |= ChangeResult::Change;
branch  0 never executed
branch  1 never executed
        -:   74:    }
        -:   75:  }
    #####:   76:  return result;
        -:   77:}
        -:   78:
        -:   79://===----------------------------------------------------------------------===//
        -:   80:// CFGEdge
        -:   81://===----------------------------------------------------------------------===//
        -:   82:
function _ZNK4mlir8dataflow7CFGEdge6getLocEv called 0 returned 0% blocks executed 0%
    #####:   83:Location CFGEdge::getLoc() const {
    #####:   84:  return FusedLoc::get(
call    0 never executed
        -:   85:      getFrom()->getParent()->getContext(),
    #####:   86:      {getFrom()->getParent()->getLoc(), getTo()->getParent()->getLoc()});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   87:}
        -:   88:
function _ZNK4mlir8dataflow7CFGEdge5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   89:void CFGEdge::print(raw_ostream &os) const {
    #####:   90:  getFrom()->print(os);
call    0 never executed
    #####:   91:  os << "\n -> \n";
call    0 never executed
    #####:   92:  getTo()->print(os);
call    0 never executed
    #####:   93:}
        -:   94:
        -:   95://===----------------------------------------------------------------------===//
        -:   96:// DeadCodeAnalysis
        -:   97://===----------------------------------------------------------------------===//
        -:   98:
function _ZN4mlir8dataflow16DeadCodeAnalysisC2ERNS_14DataFlowSolverE called 2562 returned 100% blocks executed 100%
     2562:   99:DeadCodeAnalysis::DeadCodeAnalysis(DataFlowSolver &solver)
     2562:  100:    : DataFlowAnalysis(solver) {
call    0 returned 100%
call    1 returned 100%
     2562:  101:  registerPointKind<CFGEdge>();
call    0 returned 100%
     2562:  102:}
        -:  103:
function _ZN4mlir8dataflow16DeadCodeAnalysis10initializeEPNS_9OperationE called 2562 returned 100% blocks executed 93%
     2562:  104:LogicalResult DeadCodeAnalysis::initialize(Operation *top) {
        -:  105:  // Mark the top-level blocks as executable.
     7686:  106:  for (Region &region : top->getRegions()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
    2562*:  107:    if (region.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:      continue;
     2562:  109:    auto *state = getOrCreate<Executable>(&region.front());
call    0 returned 100%
call    1 returned 100%
     5124:  110:    propagateIfChanged(state, state->setToLive());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  111:  }
        -:  112:
        -:  113:  // Mark as overdefined the predecessors of symbol callables with potentially
        -:  114:  // unknown predecessors.
     5124:  115:  initializeSymbolCallables(top);
        -:  116:
     5124:  117:  return initializeRecursively(top);
        -:  118:}
        -:  119:
function _ZN4mlir8dataflow16DeadCodeAnalysis25initializeSymbolCallablesEPNS_9OperationE called 0 returned 0% blocks executed 0%
    2562*:  120:void DeadCodeAnalysis::initializeSymbolCallables(Operation *top) {
    2562*:  121:  analysisScope = top;
function _ZZN4mlir8dataflow16DeadCodeAnalysis25initializeSymbolCallablesEPNS_9OperationEENKUlS3_bE_clES3_b called 2585 returned 100% blocks executed 77%
    5147*:  122:  auto walkFn = [&](Operation *symTable, bool allUsesVisible) {
     2585:  123:    Region &symbolTableRegion = symTable->getRegion(0);
call    0 returned 100%
     2585:  124:    Block *symbolTableBlock = &symbolTableRegion.front();
call    0 returned 100%
        -:  125:
     2585:  126:    bool foundSymbolCallable = false;
   105139:  127:    for (auto callable : symbolTableBlock->getOps<CallableOpInterface>()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
call    4 returned 100%
    51277:  128:      Region *callableRegion = callable.getCallableRegion();
call    0 returned 100%
   51277*:  129:      if (!callableRegion)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  130:        continue;
    51277:  131:      auto symbol = dyn_cast<SymbolOpInterface>(callable.getOperation());
call    0 returned 100%
   51277*:  132:      if (!symbol)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  133:        continue;
        -:  134:
        -:  135:      // Public symbol callables or those for which we can't see all uses have
        -:  136:      // potentially unknown callsites.
   51277*:  137:      if (symbol.isPublic() || (!allUsesVisible && symbol.isNested())) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
   50917*:  138:        auto *state = getOrCreate<PredecessorState>(callable);
call    0 returned 100%
    50917:  139:        propagateIfChanged(state, state->setHasUnknownPredecessors());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  140:      }
    51277:  141:      foundSymbolCallable = true;
        -:  142:    }
        -:  143:
        -:  144:    // Exit early if no eligible symbol callables were found in the table.
     2585:  145:    if (!foundSymbolCallable)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
       23:  146:      return;
        -:  147:
        -:  148:    // Walk the symbol table to check for non-call uses of symbols.
     2562:  149:    Optional<SymbolTable::UseRange> uses =
     5124:  150:        SymbolTable::getSymbolUses(&symbolTableRegion);
call    0 returned 100%
     2562:  151:    if (!uses) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  152:      // If we couldn't gather the symbol uses, conservatively assume that
        -:  153:      // we can't track information for any nested symbols.
function _ZZZN4mlir8dataflow16DeadCodeAnalysis25initializeSymbolCallablesEPNS_9OperationEENKUlS3_bE_clES3_bENKUlNS_19CallableOpInterfaceEE_clES5_.isra.0 called 0 returned 0% blocks executed 0%
   20751*:  154:      return top->walk([&](CallableOpInterface callable) {
call    0 never executed
call    1 returned 100%
    #####:  155:        auto *state = getOrCreate<PredecessorState>(callable);
call    0 never executed
    #####:  156:        propagateIfChanged(state, state->setHasUnknownPredecessors());
branch  0 never executed
branch  1 never executed
call    2 never executed
      23*:  157:      });
branch  0 never executed
branch  1 never executed
        -:  158:    }
        -:  159:
   100146:  160:    for (const SymbolTable::SymbolUse &use : *uses) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
    97584:  161:      if (isa<CallOpInterface>(use.getUser()))
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
    76833:  162:        continue;
        -:  163:      // If a callable symbol has a non-call use, then we can't be guaranteed to
        -:  164:      // know all callsites.
    20751:  165:      Operation *symbol = symbolTable.lookupSymbolIn(top, use.getSymbolRef());
call    0 returned 100%
    20751:  166:      auto *state = getOrCreate<PredecessorState>(symbol);
call    0 returned 100%
    26059:  167:      propagateIfChanged(state, state->setHasUnknownPredecessors());
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
call    2 returned 100%
        -:  168:    }
    2562*:  169:  };
    2562*:  170:  SymbolTable::walkSymbolTables(top, /*allSymUsesVisible=*/!top->getBlock(),
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  171:                                walkFn);
    #####:  172:}
        -:  173:
        -:  174:/// Returns true if the operation is a returning terminator in region
        -:  175:/// control-flow or the terminator of a callable region.
function _ZL24isRegionOrCallableReturnPN4mlir9OperationE called 3210268 returned 100% blocks executed 100%
  3210268:  176:static bool isRegionOrCallableReturn(Operation *op) {
  6095222:  177:  return !op->getNumSuccessors() &&
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
  8817462:  178:         isa<RegionBranchOpInterface, CallableOpInterface>(op->getParentOp()) &&
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
  2722240:  179:         op->getBlock()->getTerminator() == op;
call    0 returned 100%
        -:  180:}
        -:  181:
function _ZN4mlir8dataflow16DeadCodeAnalysis21initializeRecursivelyEPNS_9OperationE called 2017909 returned 100% blocks executed 93%
  2017909:  182:LogicalResult DeadCodeAnalysis::initializeRecursively(Operation *op) {
        -:  183:  // Initialize the analysis by visiting every op with control-flow semantics.
  3768967:  184:  if (op->getNumRegions() || op->getNumSuccessors() ||
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
  5499529:  185:      isRegionOrCallableReturn(op) || isa<CallOpInterface>(op)) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        -:  186:    // When the liveness of the parent block changes, make sure to re-invoke the
        -:  187:    // analysis on the op.
   364180:  188:    if (op->getBlock())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   361618:  189:      getOrCreate<Executable>(op->getBlock())->blockContentSubscribe(this);
call    0 returned 100%
call    1 returned 100%
        -:  190:    // Visit the op.
   364180:  191:    if (failed(visit(op)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  192:      return failure();
        -:  193:  }
        -:  194:  // Recurse on nested operations.
  2641563:  195:  for (Region &region : op->getRegions())
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
  2084675:  196:    for (Operation &op : region.getOps())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
  2015347:  197:      if (failed(initializeRecursively(&op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  198:        return failure();
  2017909:  199:  return success();
        -:  200:}
        -:  201:
function _ZN4mlir8dataflow16DeadCodeAnalysis12markEdgeLiveEPNS_5BlockES3_ called 247252 returned 100% blocks executed 100%
   247252:  202:void DeadCodeAnalysis::markEdgeLive(Block *from, Block *to) {
   247252:  203:  auto *state = getOrCreate<Executable>(to);
call    0 returned 100%
   432642:  204:  propagateIfChanged(state, state->setToLive());
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
   247252:  205:  auto *edgeState = getOrCreate<Executable>(getProgramPoint<CFGEdge>(from, to));
call    0 returned 100%
call    1 returned 100%
   494504:  206:  propagateIfChanged(edgeState, edgeState->setToLive());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
   247252:  207:}
        -:  208:
function _ZN4mlir8dataflow16DeadCodeAnalysis19markEntryBlocksLiveEPNS_9OperationE called 142147 returned 100% blocks executed 100%
   142147:  209:void DeadCodeAnalysis::markEntryBlocksLive(Operation *op) {
   426441:  210:  for (Region &region : op->getRegions()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
   142147:  211:    if (region.empty())
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
   119127:  212:      continue;
    23020:  213:    auto *state = getOrCreate<Executable>(&region.front());
call    0 returned 100%
call    1 returned 100%
    40892:  214:    propagateIfChanged(state, state->setToLive());
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
        -:  215:  }
   142147:  216:}
        -:  217:
function _ZN4mlir8dataflow16DeadCodeAnalysis5visitENS_12ProgramPointE called 1874442 returned 100% blocks executed 77%
  1874442:  218:LogicalResult DeadCodeAnalysis::visit(ProgramPoint point) {
  1874442:  219:  if (point.is<Block *>())
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
   185390:  220:    return success();
  1689052:  221:  auto *op = point.dyn_cast<Operation *>();
call    0 returned 100%
  1689052:  222:  if (!op)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  223:    return emitError(point.getLoc(), "unknown program point kind");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  224:
        -:  225:  // If the parent block is not executable, there is nothing to do.
  1689052:  226:  if (!getOrCreate<Executable>(op->getBlock())->isLive())
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
   229842:  227:    return success();
        -:  228:
        -:  229:  // We have a live call op. Add this as a live predecessor of the callee.
  1459210:  230:  if (auto call = dyn_cast<CallOpInterface>(op))
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
    75741:  231:    visitCallOperation(call);
call    0 returned 100%
        -:  232:
        -:  233:  // Visit the regions.
  1459210:  234:  if (op->getNumRegions()) {
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  235:    // Check if we can reason about the region control-flow.
   142507:  236:    if (auto branch = dyn_cast<RegionBranchOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  237:      visitRegionBranchOperation(branch);
call    0 never executed
        -:  238:
        -:  239:      // Check if this is a callable operation.
   142507:  240:    } else if (auto callable = dyn_cast<CallableOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
   127018:  241:      const auto *callsites = getOrCreateFor<PredecessorState>(op, callable);
call    0 returned 100%
call    1 returned 100%
        -:  242:
        -:  243:      // If the callsites could not be resolved or are known to be non-empty,
        -:  244:      // mark the callable as executable.
   127018:  245:      if (!callsites->allPredecessorsKnown() ||
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      360:  246:          !callsites->getKnownPredecessors().empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   126658:  247:        markEntryBlocksLive(callable);
call    0 returned 100%
        -:  248:
        -:  249:      // Otherwise, conservatively mark all entry blocks as executable.
        -:  250:    } else {
    15489:  251:      markEntryBlocksLive(op);
call    0 returned 100%
        -:  252:    }
        -:  253:  }
        -:  254:
  1459210:  255:  if (isRegionOrCallableReturn(op)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
    24064:  256:    if (auto branch = dyn_cast<RegionBranchOpInterface>(op->getParentOp())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  257:      // Visit the exiting terminator of a region.
    #####:  258:      visitRegionTerminator(op, branch);
call    0 never executed
    12032:  259:    } else if (auto callable =
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    24064:  260:                   dyn_cast<CallableOpInterface>(op->getParentOp())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  261:      // Visit the exiting terminator of a callable.
    12032:  262:      visitCallableTerminator(op, callable);
call    0 returned 100%
        -:  263:    }
        -:  264:  }
        -:  265:  // Visit the successors.
  1459210:  266:  if (op->getNumSuccessors()) {
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:  267:    // Check if we can reason about the control-flow.
   325314:  268:    if (auto branch = dyn_cast<BranchOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   325314:  269:      visitBranchOperation(branch);
call    0 returned 100%
        -:  270:
        -:  271:      // Otherwise, conservatively mark all successors as exectuable.
        -:  272:    } else {
  325314*:  273:      for (Block *successor : op->getSuccessors())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  274:        markEdgeLive(op->getBlock(), successor);
call    0 never executed
        -:  275:    }
        -:  276:  }
        -:  277:
  1459210:  278:  return success();
        -:  279:}
        -:  280:
function _ZN4mlir8dataflow16DeadCodeAnalysis18visitCallOperationENS_15CallOpInterfaceE called 75741 returned 100% blocks executed 69%
    75741:  281:void DeadCodeAnalysis::visitCallOperation(CallOpInterface call) {
    75741:  282:  Operation *callableOp = call.resolveCallable(&symbolTable);
call    0 returned 100%
        -:  283:
        -:  284:  // A call to a externally-defined callable has unknown predecessors.
function _ZZN4mlir8dataflow16DeadCodeAnalysis18visitCallOperationENS_15CallOpInterfaceEENKUlPNS_9OperationEE_clES4_.isra.0 called 75741 returned 100% blocks executed 89%
   151482:  285:  const auto isExternalCallable = [this](Operation *op) {
        -:  286:    // A callable outside the analysis scope is an external callable.
    75741:  287:    if (!analysisScope->isAncestor(op))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  288:      return true;
        -:  289:    // Otherwise, check if the callable region is defined.
    75741:  290:    if (auto callable = dyn_cast<CallableOpInterface>(op))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    75741:  291:      return !callable.getCallableRegion();
call    0 returned 100%
    #####:  292:    return false;
    75741:  293:  };
        -:  294:
        -:  295:  // TODO: Add support for non-symbol callables when necessary. If the
        -:  296:  // callable has non-call uses we would mark as having reached pessimistic
        -:  297:  // fixpoint, otherwise allow for propagating the return values out.
   227223:  298:  if (isa_and_nonnull<SymbolOpInterface>(callableOp) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    75741:  299:      !isExternalCallable(callableOp)) {
call    0 returned 100%
        -:  300:    // Add the live callsite.
    75741:  301:    auto *callsites = getOrCreate<PredecessorState>(callableOp);
call    0 returned 100%
   151482:  302:    propagateIfChanged(callsites, callsites->join(call));
call    0 returned 100%
call    1 returned 100%
        -:  303:  } else {
        -:  304:    // Mark this call op's predecessors as overdefined.
    #####:  305:    auto *predecessors = getOrCreate<PredecessorState>(call);
call    0 never executed
    #####:  306:    propagateIfChanged(predecessors, predecessors->setHasUnknownPredecessors());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  307:  }
    75741:  308:}
        -:  309:
        -:  310:/// Get the constant values of the operands of an operation. If any of the
        -:  311:/// constant value lattices are uninitialized, return none to indicate the
        -:  312:/// analysis should bail out.
function _ZL20getOperandValuesImplPN4mlir9OperationEN4llvm12function_refIFPKNS_8dataflow7LatticeINS4_13ConstantValueEEENS_5ValueEEEE called 325314 returned 100% blocks executed 81%
   325314:  313:static Optional<SmallVector<Attribute>> getOperandValuesImpl(
        -:  314:    Operation *op,
        -:  315:    function_ref<const Lattice<ConstantValue> *(Value)> getLattice) {
   325314:  316:  SmallVector<Attribute> operands;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   650628:  317:  operands.reserve(op->getNumOperands());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   507109:  318:  for (Value operand : op->getOperands()) {
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
call    3 returned 100%
   322770:  319:    const Lattice<ConstantValue> *cv = getLattice(operand);
call    0 returned 100%
        -:  320:    // If any of the operands' values are uninitialized, bail out.
   322770:  321:    if (cv->getValue().isUninitialized())
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
   140975:  322:      return {};
   181795:  323:    operands.push_back(cv->getValue().getConstantValue());
call    0 returned 100%
        -:  324:  }
   509653:  325:  return operands;
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  326:}
        -:  327:
        -:  328:Optional<SmallVector<Attribute>>
function _ZN4mlir8dataflow16DeadCodeAnalysis16getOperandValuesEPNS_9OperationE called 0 returned 0% blocks executed 0%
  325314*:  329:DeadCodeAnalysis::getOperandValues(Operation *op) {
function _ZZN4mlir8dataflow16DeadCodeAnalysis16getOperandValuesEPNS_9OperationEENKUlNS_5ValueEE_clES4_.isra.0 called 322770 returned 100% blocks executed 100%
  322770*:  330:  return getOperandValuesImpl(op, [&](Value value) {
   322770:  331:    auto *lattice = getOrCreate<Lattice<ConstantValue>>(value);
call    0 returned 100%
   322770:  332:    lattice->useDefSubscribe(this);
call    0 returned 100%
   322770:  333:    return lattice;
  325314*:  334:  });
call    0 never executed
call    1 returned 100%
call    2 never executed
        -:  335:}
        -:  336:
function _ZN4mlir8dataflow16DeadCodeAnalysis20visitBranchOperationENS_17BranchOpInterfaceE called 325314 returned 100% blocks executed 88%
   325314:  337:void DeadCodeAnalysis::visitBranchOperation(BranchOpInterface branch) {
        -:  338:  // Try to deduce a single successor for the branch.
   509653:  339:  Optional<SmallVector<Attribute>> operands = getOperandValues(branch);
call    0 returned 100%
   325314:  340:  if (!operands)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
   140975:  341:    return;
        -:  342:
   184339:  343:  if (Block *successor = branch.getSuccessorForOperands(*operands)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  344:    markEdgeLive(branch->getBlock(), successor);
call    0 never executed
        -:  345:  } else {
        -:  346:    // Otherwise, mark all successors as executable and outgoing edges.
   431591:  347:    for (Block *successor : branch->getSuccessors())
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
   247252:  348:      markEdgeLive(branch->getBlock(), successor);
call    0 returned 100%
        -:  349:  }
        -:  350:}
        -:  351:
function _ZN4mlir8dataflow16DeadCodeAnalysis26visitRegionBranchOperationENS_23RegionBranchOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  352:void DeadCodeAnalysis::visitRegionBranchOperation(
        -:  353:    RegionBranchOpInterface branch) {
        -:  354:  // Try to deduce which regions are executable.
    #####:  355:  Optional<SmallVector<Attribute>> operands = getOperandValues(branch);
call    0 never executed
    #####:  356:  if (!operands)
branch  0 never executed
branch  1 never executed
    #####:  357:    return;
        -:  358:
    #####:  359:  SmallVector<RegionSuccessor> successors;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  360:  branch.getSuccessorRegions(/*index=*/{}, *operands, successors);
call    0 never executed
    #####:  361:  for (const RegionSuccessor &successor : successors) {
branch  0 never executed
branch  1 never executed
        -:  362:    // The successor can be either an entry block or the parent operation.
    #####:  363:    ProgramPoint point = successor.getSuccessor()
branch  0 never executed
branch  1 never executed
    #####:  364:                             ? &successor.getSuccessor()->front()
call    0 never executed
call    1 never executed
    #####:  365:                             : ProgramPoint(branch);
branch  0 never executed
branch  1 never executed
        -:  366:    // Mark the entry block as executable.
    #####:  367:    auto *state = getOrCreate<Executable>(point);
call    0 never executed
    #####:  368:    propagateIfChanged(state, state->setToLive());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  369:    // Add the parent op as a predecessor.
    #####:  370:    auto *predecessors = getOrCreate<PredecessorState>(point);
call    0 never executed
    #####:  371:    propagateIfChanged(
call    0 never executed
call    1 never executed
        -:  372:        predecessors,
        -:  373:        predecessors->join(branch, successor.getSuccessorInputs()));
        -:  374:  }
        -:  375:}
        -:  376:
function _ZN4mlir8dataflow16DeadCodeAnalysis21visitRegionTerminatorEPNS_9OperationENS_23RegionBranchOpInterfaceE called 0 returned 0% blocks executed 0%
    #####:  377:void DeadCodeAnalysis::visitRegionTerminator(Operation *op,
        -:  378:                                             RegionBranchOpInterface branch) {
    #####:  379:  Optional<SmallVector<Attribute>> operands = getOperandValues(op);
call    0 never executed
    #####:  380:  if (!operands)
branch  0 never executed
branch  1 never executed
    #####:  381:    return;
        -:  382:
    #####:  383:  SmallVector<RegionSuccessor> successors;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  384:  branch.getSuccessorRegions(op->getParentRegion()->getRegionNumber(),
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  385:                             *operands, successors);
branch  0 never executed
branch  1 never executed
        -:  386:
        -:  387:  // Mark successor region entry blocks as executable and add this op to the
        -:  388:  // list of predecessors.
    #####:  389:  for (const RegionSuccessor &successor : successors) {
branch  0 never executed
branch  1 never executed
    #####:  390:    PredecessorState *predecessors;
    #####:  391:    if (Region *region = successor.getSuccessor()) {
branch  0 never executed
branch  1 never executed
    #####:  392:      auto *state = getOrCreate<Executable>(&region->front());
call    0 never executed
call    1 never executed
    #####:  393:      propagateIfChanged(state, state->setToLive());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  394:      predecessors = getOrCreate<PredecessorState>(&region->front());
call    0 never executed
call    1 never executed
        -:  395:    } else {
        -:  396:      // Add this terminator as a predecessor to the parent op.
    #####:  397:      predecessors = getOrCreate<PredecessorState>(branch);
call    0 never executed
        -:  398:    }
    #####:  399:    propagateIfChanged(predecessors,
call    0 never executed
call    1 never executed
        -:  400:                       predecessors->join(op, successor.getSuccessorInputs()));
        -:  401:  }
        -:  402:}
        -:  403:
function _ZN4mlir8dataflow16DeadCodeAnalysis23visitCallableTerminatorEPNS_9OperationENS_19CallableOpInterfaceE called 12032 returned 100% blocks executed 70%
    12032:  404:void DeadCodeAnalysis::visitCallableTerminator(Operation *op,
        -:  405:                                               CallableOpInterface callable) {
        -:  406:  // If there are no exiting values, we have nothing to do.
    24064:  407:  if (op->getNumOperands() == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 79% (fallthrough)
branch  3 taken 21%
        -:  408:    return;
        -:  409:
        -:  410:  // Add as predecessors to all callsites this return op.
     9488:  411:  auto *callsites = getOrCreateFor<PredecessorState>(op, callable);
call    0 returned 100%
call    1 returned 100%
     9488:  412:  bool canResolve = op->hasTrait<OpTrait::ReturnLike>();
call    0 returned 100%
    11890:  413:  for (Operation *predecessor : callsites->getKnownPredecessors()) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
    2402*:  414:    assert(isa<CallOpInterface>(predecessor));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
     2402:  415:    auto *predecessors = getOrCreate<PredecessorState>(predecessor);
call    0 returned 100%
     2402:  416:    if (canResolve) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  417:      propagateIfChanged(predecessors, predecessors->join(op));
call    0 never executed
call    1 never executed
        -:  418:    } else {
        -:  419:      // If the terminator is not a return-like, then conservatively assume we
        -:  420:      // can't resolve the predecessor.
     2402:  421:      propagateIfChanged(predecessors,
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  422:                         predecessors->setHasUnknownPredecessors());
        -:  423:    }
        -:  424:  }
        -:  425:}
