        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Affine/Transforms/SimplifyAffineStructures.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/SimplifyAffineStructures.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/SimplifyAffineStructures.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- SimplifyAffineStructures.cpp ---------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to simplify affine structures in operations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   16:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   17:#include "mlir/Dialect/Affine/Utils.h"
        -:   18:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   19:#include "mlir/IR/IntegerSet.h"
        -:   20:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:#define GEN_PASS_DEF_SIMPLIFYAFFINESTRUCTURES
        -:   24:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   25:} // namespace mlir
        -:   26:
        -:   27:#define DEBUG_TYPE "simplify-affine-structure"
        -:   28:
        -:   29:using namespace mlir;
        -:   30:
        -:   31:namespace {
        -:   32:
        -:   33:/// Simplifies affine maps and sets appearing in the operations of the Function.
        -:   34:/// This part is mainly to test the simplifyAffineExpr method. In addition,
        -:   35:/// all memrefs with non-trivial layout maps are converted to ones with trivial
        -:   36:/// identity layout ones.
   116722:   37:struct SimplifyAffineStructures
call    0 returned 100%
call    1 returned 100%
        -:   38:    : public impl::SimplifyAffineStructuresBase<SimplifyAffineStructures> {
        -:   39:  void runOnOperation() override;
        -:   40:
        -:   41:  /// Utility to simplify an affine attribute and update its entry in the parent
        -:   42:  /// operation if necessary.
        -:   43:  template <typename AttributeT>
    41932:   44:  void simplifyAndUpdateAttribute(Operation *op, StringAttr name,
        -:   45:                                  AttributeT attr) {
    41932:   46:    auto &simplified = simplifiedAttributes[attr];
    41932:   47:    if (simplified == attr)
        -:   48:      return;
        -:   49:
        -:   50:    // This is a newly encountered attribute.
    21210:   51:    if (!simplified) {
        -:   52:      // Try to simplify the value of the attribute.
    20203:   53:      auto value = attr.getValue();
    21964:   54:      auto simplifiedValue = simplify(value);
    20203:   55:      if (simplifiedValue == value) {
    13657:   56:        simplified = attr;
    13657:   57:        return;
        -:   58:      }
     6546:   59:      simplified = AttributeT::get(simplifiedValue);
        -:   60:    }
        -:   61:
        -:   62:    // Simplification was successful, so update the attribute.
     7553:   63:    op->setAttr(name, simplified);
        -:   64:  }
------------------
_ZN12_GLOBAL__N_124SimplifyAffineStructures26simplifyAndUpdateAttributeIN4mlir14IntegerSetAttrEEEvPNS2_9OperationENS2_10StringAttrET_:
function _ZN12_GLOBAL__N_124SimplifyAffineStructures26simplifyAndUpdateAttributeIN4mlir14IntegerSetAttrEEEvPNS2_9OperationENS2_10StringAttrET_ called 2268 returned 100% blocks executed 100%
     2268:   44:  void simplifyAndUpdateAttribute(Operation *op, StringAttr name,
        -:   45:                                  AttributeT attr) {
     2268:   46:    auto &simplified = simplifiedAttributes[attr];
call    0 returned 100%
     2268:   47:    if (simplified == attr)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:   48:      return;
        -:   49:
        -:   50:    // This is a newly encountered attribute.
     2192:   51:    if (!simplified) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:   52:      // Try to simplify the value of the attribute.
     1761:   53:      auto value = attr.getValue();
call    0 returned 100%
     3522:   54:      auto simplifiedValue = simplify(value);
     1761:   55:      if (simplifiedValue == value) {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      162:   56:        simplified = attr;
      162:   57:        return;
        -:   58:      }
     1599:   59:      simplified = AttributeT::get(simplifiedValue);
call    0 returned 100%
        -:   60:    }
        -:   61:
        -:   62:    // Simplification was successful, so update the attribute.
     2030:   63:    op->setAttr(name, simplified);
call    0 returned 100%
        -:   64:  }
------------------
_ZN12_GLOBAL__N_124SimplifyAffineStructures26simplifyAndUpdateAttributeIN4mlir13AffineMapAttrEEEvPNS2_9OperationENS2_10StringAttrET_:
function _ZN12_GLOBAL__N_124SimplifyAffineStructures26simplifyAndUpdateAttributeIN4mlir13AffineMapAttrEEEvPNS2_9OperationENS2_10StringAttrET_ called 39664 returned 100% blocks executed 100%
    39664:   44:  void simplifyAndUpdateAttribute(Operation *op, StringAttr name,
        -:   45:                                  AttributeT attr) {
    39664:   46:    auto &simplified = simplifiedAttributes[attr];
call    0 returned 100%
    39664:   47:    if (simplified == attr)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -:   48:      return;
        -:   49:
        -:   50:    // This is a newly encountered attribute.
    19018:   51:    if (!simplified) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:   52:      // Try to simplify the value of the attribute.
    18442:   53:      auto value = attr.getValue();
call    0 returned 100%
    18442:   54:      auto simplifiedValue = simplify(value);
call    0 returned 100%
    18442:   55:      if (simplifiedValue == value) {
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
    13495:   56:        simplified = attr;
    13495:   57:        return;
        -:   58:      }
     4947:   59:      simplified = AttributeT::get(simplifiedValue);
call    0 returned 100%
        -:   60:    }
        -:   61:
        -:   62:    // Simplification was successful, so update the attribute.
     5523:   63:    op->setAttr(name, simplified);
call    0 returned 100%
        -:   64:  }
------------------
        -:   65:
     1761:   66:  IntegerSet simplify(IntegerSet set) { return simplifyIntegerSet(set); }
call    0 returned 100%
        -:   67:
        -:   68:  /// Performs basic affine map simplifications.
        -:   69:  AffineMap simplify(AffineMap map) {
        -:   70:    MutableAffineMap mMap(map);
        -:   71:    mMap.simplify();
        -:   72:    return mMap.getAffineMap();
        -:   73:  }
        -:   74:
        -:   75:  DenseMap<Attribute, Attribute> simplifiedAttributes;
        -:   76:};
        -:   77:
        -:   78:} // namespace
        -:   79:
        -:   80:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir34createSimplifyAffineStructuresPassEv called 116722 returned 100% blocks executed 100%
   116722:   81:mlir::createSimplifyAffineStructuresPass() {
   116722:   82:  return std::make_unique<SimplifyAffineStructures>();
call    0 returned 100%
        -:   83:}
        -:   84:
function _ZN12_GLOBAL__N_124SimplifyAffineStructures14runOnOperationEv called 515 returned 99% blocks executed 100%
      515:   85:void SimplifyAffineStructures::runOnOperation() {
      515:   86:  auto func = getOperation();
call    0 returned 100%
      515:   87:  simplifiedAttributes.clear();
call    0 returned 100%
      515:   88:  RewritePatternSet patterns(func.getContext());
call    0 returned 100%
call    1 returned 100%
      515:   89:  AffineApplyOp::getCanonicalizationPatterns(patterns, func.getContext());
call    0 returned 100%
call    1 returned 99%
      510:   90:  AffineForOp::getCanonicalizationPatterns(patterns, func.getContext());
call    0 returned 100%
call    1 returned 99%
      507:   91:  AffineIfOp::getCanonicalizationPatterns(patterns, func.getContext());
call    0 returned 100%
call    1 returned 101%
     1024:   92:  FrozenRewritePatternSet frozenPatterns(std::move(patterns));
call    0 returned 98%
call    1 returned 100%
        -:   93:
        -:   94:  // The simplification of affine attributes will likely simplify the op. Try to
        -:   95:  // fold/apply canonicalization patterns when we have affine dialect ops.
     1000:   96:  SmallVector<Operation *> opsToSimplify;
call    0 returned 100%
call    1 returned 102%
function _ZZN12_GLOBAL__N_124SimplifyAffineStructures14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 1098680 returned 100% blocks executed 100%
  1099179:   97:  func.walk([&](Operation *op) {
call    0 returned 100%
  1709546:   98:    for (auto attr : op->getAttrs()) {
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
   610869:   99:      if (auto mapAttr = attr.getValue().dyn_cast<AffineMapAttr>())
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
    39664:  100:        simplifyAndUpdateAttribute(op, attr.getName(), mapAttr);
call    0 returned 100%
call    1 returned 100%
   571223:  101:      else if (auto setAttr = attr.getValue().dyn_cast<IntegerSetAttr>())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
     2268:  102:        simplifyAndUpdateAttribute(op, attr.getName(), setAttr);
call    0 returned 100%
call    1 returned 100%
        -:  103:    }
        -:  104:
  1098670:  105:    if (isa<AffineForOp, AffineIfOp, AffineApplyOp>(op))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     8447:  106:      opsToSimplify.push_back(op);
call    0 returned 100%
  1098680:  107:  });
      500:  108:  (void)applyOpPatternsAndFold(opsToSimplify, frozenPatterns, /*strict=*/true);
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
      509:  109:}
