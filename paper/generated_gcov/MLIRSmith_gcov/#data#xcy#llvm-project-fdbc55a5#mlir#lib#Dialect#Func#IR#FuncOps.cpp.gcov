        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Func/IR/FuncOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Func/IR/CMakeFiles/obj.MLIRFuncDialect.dir/FuncOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Func/IR/CMakeFiles/obj.MLIRFuncDialect.dir/FuncOps.cpp.gcda
        -:    0:Runs:116158
        -:    1://===- FuncOps.cpp - Func Dialect Operations ------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   10:
        -:   11:#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
        -:   12:#include "mlir/IR/BlockAndValueMapping.h"
        -:   13:#include "mlir/IR/Builders.h"
        -:   14:#include "mlir/IR/BuiltinOps.h"
        -:   15:#include "mlir/IR/BuiltinTypes.h"
        -:   16:#include "mlir/IR/FunctionImplementation.h"
        -:   17:#include "mlir/IR/Matchers.h"
        -:   18:#include "mlir/IR/OpImplementation.h"
        -:   19:#include "mlir/IR/PatternMatch.h"
        -:   20:#include "mlir/IR/TypeUtilities.h"
        -:   21:#include "mlir/IR/Value.h"
        -:   22:#include "mlir/Support/MathExtras.h"
        -:   23:#include "mlir/Transforms/InliningUtils.h"
        -:   24:#include "llvm/ADT/APFloat.h"
        -:   25:#include "llvm/ADT/MapVector.h"
        -:   26:#include "llvm/ADT/STLExtras.h"
        -:   27:#include "llvm/Support/FormatVariadic.h"
        -:   28:#include "llvm/Support/raw_ostream.h"
        -:   29:#include <numeric>
        -:   30:
        -:   31:#include "mlir/Dialect/Func/IR/FuncOpsDialect.cpp.inc"
        -:   32:
        -:   33:using namespace mlir;
        -:   34:using namespace mlir::func;
        -:   35:
        -:   36://===----------------------------------------------------------------------===//
        -:   37:// FuncDialect Interfaces
        -:   38://===----------------------------------------------------------------------===//
        -:   39:namespace {
        -:   40:/// This class defines the interface for handling inlining with func operations.
        -:   41:struct FuncInlinerInterface : public DialectInlinerInterface {
        -:   42:  using DialectInlinerInterface::DialectInlinerInterface;
        -:   43:
        -:   44:  //===--------------------------------------------------------------------===//
        -:   45:  // Analysis Hooks
        -:   46:  //===--------------------------------------------------------------------===//
        -:   47:
        -:   48:  /// All call operations can be inlined.
function _ZNK12_GLOBAL__N_120FuncInlinerInterface15isLegalToInlineEPN4mlir9OperationES3_b called 5 returned 100% blocks executed 100%
        5:   49:  bool isLegalToInline(Operation *call, Operation *callable,
        -:   50:                       bool wouldBeCloned) const final {
        5:   51:    return true;
        -:   52:  }
        -:   53:
        -:   54:  /// All operations can be inlined.
function _ZNK12_GLOBAL__N_120FuncInlinerInterface15isLegalToInlineEPN4mlir9OperationEPNS1_6RegionEbRNS1_20BlockAndValueMappingE called 3 returned 100% blocks executed 100%
        3:   55:  bool isLegalToInline(Operation *, Region *, bool,
        -:   56:                       BlockAndValueMapping &) const final {
        3:   57:    return true;
        -:   58:  }
        -:   59:
        -:   60:  /// All functions can be inlined.
function _ZNK12_GLOBAL__N_120FuncInlinerInterface15isLegalToInlineEPN4mlir6RegionES3_bRNS1_20BlockAndValueMappingE called 2 returned 100% blocks executed 100%
        2:   61:  bool isLegalToInline(Region *, Region *, bool,
        -:   62:                       BlockAndValueMapping &) const final {
        2:   63:    return true;
        -:   64:  }
        -:   65:
        -:   66:  //===--------------------------------------------------------------------===//
        -:   67:  // Transformation Hooks
        -:   68:  //===--------------------------------------------------------------------===//
        -:   69:
        -:   70:  /// Handle the given inlined terminator by replacing it with a new operation
        -:   71:  /// as necessary.
function _ZNK12_GLOBAL__N_120FuncInlinerInterface16handleTerminatorEPN4mlir9OperationEPNS1_5BlockE called 0 returned 0% blocks executed 0%
    #####:   72:  void handleTerminator(Operation *op, Block *newDest) const final {
        -:   73:    // Only return needs to be handled here.
    #####:   74:    auto returnOp = dyn_cast<ReturnOp>(op);
call    0 never executed
    #####:   75:    if (!returnOp)
branch  0 never executed
branch  1 never executed
    #####:   76:      return;
        -:   77:
        -:   78:    // Replace the return with a branch to the dest.
    #####:   79:    OpBuilder builder(op);
call    0 never executed
    #####:   80:    builder.create<cf::BranchOp>(op->getLoc(), newDest, returnOp.getOperands());
call    0 never executed
call    1 never executed
    #####:   81:    op->erase();
call    0 never executed
        -:   82:  }
        -:   83:
        -:   84:  /// Handle the given inlined terminator by replacing it with a new operation
        -:   85:  /// as necessary.
function _ZNK12_GLOBAL__N_120FuncInlinerInterface16handleTerminatorEPN4mlir9OperationEN4llvm8ArrayRefINS1_5ValueEEE called 3 returned 100% blocks executed 85%
        3:   86:  void handleTerminator(Operation *op,
        -:   87:                        ArrayRef<Value> valuesToRepl) const final {
        -:   88:    // Only return needs to be handled here.
        3:   89:    auto returnOp = cast<ReturnOp>(op);
call    0 returned 100%
        -:   90:
        -:   91:    // Replace the values directly with the return operands.
       3*:   92:    assert(returnOp.getNumOperands() == valuesToRepl.size());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        5:   93:    for (const auto &it : llvm::enumerate(returnOp.getOperands()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        1:   94:      valuesToRepl[it.index()].replaceAllUsesWith(it.value());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        3:   95:  }
        -:   96:};
        -:   97:} // namespace
        -:   98:
        -:   99://===----------------------------------------------------------------------===//
        -:  100:// FuncDialect
        -:  101://===----------------------------------------------------------------------===//
        -:  102:
function _ZN4mlir4func11FuncDialect10initializeEv called 0 returned 0% blocks executed 0%
   91592*:  103:void FuncDialect::initialize() {
   91592*:  104:  addOperations<
        -:  105:#define GET_OP_LIST
        -:  106:#include "mlir/Dialect/Func/IR/FuncOps.cpp.inc"
   91592*:  107:      >();
call    0 never executed
call    1 returned 100%
   91592*:  108:  addInterfaces<FuncInlinerInterface>();
call    0 never executed
call    1 returned 100%
    #####:  109:}
        -:  110:
        -:  111:/// Materialize a single constant operation from a given attribute value with
        -:  112:/// the desired resultant type.
function _ZN4mlir4func11FuncDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  113:Operation *FuncDialect::materializeConstant(OpBuilder &builder, Attribute value,
        -:  114:                                            Type type, Location loc) {
    #####:  115:  if (ConstantOp::isBuildableWith(value, type))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:    return builder.create<ConstantOp>(loc, type,
call    0 never executed
    #####:  117:                                      value.cast<FlatSymbolRefAttr>());
call    0 never executed
        -:  118:  return nullptr;
        -:  119:}
        -:  120:
        -:  121://===----------------------------------------------------------------------===//
        -:  122:// CallOp
        -:  123://===----------------------------------------------------------------------===//
        -:  124:
function _ZN4mlir4func6CallOp16verifySymbolUsesERNS_21SymbolTableCollectionE called 16137 returned 100% blocks executed 31%
    16137:  125:LogicalResult CallOp::verifySymbolUses(SymbolTableCollection &symbolTable) {
        -:  126:  // Check that the callee attribute was specified.
    16137:  127:  auto fnAttr = (*this)->getAttrOfType<FlatSymbolRefAttr>("callee");
call    0 returned 100%
    16137:  128:  if (!fnAttr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  129:    return emitOpError("requires a 'callee' symbol reference attribute");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    16137:  130:  FuncOp fn = symbolTable.lookupNearestSymbolFrom<FuncOp>(*this, fnAttr);
call    0 returned 100%
    16137:  131:  if (!fn)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  132:    return emitOpError() << "'" << fnAttr.getValue()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  133:                         << "' does not reference a valid function";
call    0 never executed
        -:  134:
        -:  135:  // Verify that the operand and result types match the callee.
    16137:  136:  auto fnType = fn.getFunctionType();
call    0 returned 100%
    16137:  137:  if (fnType.getNumInputs() != getNumOperands())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  138:    return emitOpError("incorrect number of operands for callee");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  139:
   316537:  140:  for (unsigned i = 0, e = fnType.getNumInputs(); i != e; ++i)
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
   300400:  141:    if (getOperand(i).getType() != fnType.getInput(i))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  142:      return emitOpError("operand type mismatch: expected operand type ")
call    0 never executed
call    1 never executed
    #####:  143:             << fnType.getInput(i) << ", but provided "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  144:             << getOperand(i).getType() << " for operand number " << i;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  145:
    16137:  146:  if (fnType.getNumResults() != getNumResults())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  147:    return emitOpError("incorrect number of results for callee");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  148:
    23206:  149:  for (unsigned i = 0, e = fnType.getNumResults(); i != e; ++i)
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
    14138:  150:    if (getResult(i).getType() != fnType.getResult(i)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  151:      auto diag = emitOpError("result type mismatch at index ") << i;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  152:      diag.attachNote() << "      op result types: " << getResultTypes();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  153:      diag.attachNote() << "function result types: " << fnType.getResults();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  154:      return diag;
call    0 never executed
        -:  155:    }
        -:  156:
    16137:  157:  return success();
        -:  158:}
        -:  159:
function _ZN4mlir4func6CallOp13getCalleeTypeEv called 100 returned 100% blocks executed 100%
      100:  160:FunctionType CallOp::getCalleeType() {
      200:  161:  return FunctionType::get(getContext(), getOperandTypes(), getResultTypes());
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:  162:}
        -:  163:
        -:  164://===----------------------------------------------------------------------===//
        -:  165:// CallIndirectOp
        -:  166://===----------------------------------------------------------------------===//
        -:  167:
        -:  168:/// Fold indirect calls that have a constant function as the callee operand.
function _ZN4mlir4func14CallIndirectOp12canonicalizeES1_RNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  169:LogicalResult CallIndirectOp::canonicalize(CallIndirectOp indirectCall,
        -:  170:                                           PatternRewriter &rewriter) {
        -:  171:  // Check that the callee is a constant callee.
    #####:  172:  SymbolRefAttr calledFn;
    #####:  173:  if (!matchPattern(indirectCall.getCallee(), m_Constant(&calledFn)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  174:    return failure();
        -:  175:
        -:  176:  // Replace with a direct call.
    #####:  177:  rewriter.replaceOpWithNewOp<CallOp>(indirectCall, calledFn,
    #####:  178:                                      indirectCall.getResultTypes(),
    #####:  179:                                      indirectCall.getArgOperands());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  180:  return success();
        -:  181:}
        -:  182:
        -:  183://===----------------------------------------------------------------------===//
        -:  184:// ConstantOp
        -:  185://===----------------------------------------------------------------------===//
        -:  186:
function _ZN4mlir4func10ConstantOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  187:LogicalResult ConstantOp::verify() {
    #####:  188:  StringRef fnName = getValue();
call    0 never executed
    #####:  189:  Type type = getType();
call    0 never executed
        -:  190:
        -:  191:  // Try to find the referenced function.
    #####:  192:  auto fn = (*this)->getParentOfType<ModuleOp>().lookupSymbol<FuncOp>(fnName);
call    0 never executed
call    1 never executed
    #####:  193:  if (!fn)
branch  0 never executed
branch  1 never executed
    #####:  194:    return emitOpError() << "reference to undefined function '" << fnName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  195:                         << "'";
call    0 never executed
        -:  196:
        -:  197:  // Check that the referenced function has the correct type.
    #####:  198:  if (fn.getFunctionType() != type)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:    return emitOpError("reference to function with mismatched type");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  200:
    #####:  201:  return success();
        -:  202:}
        -:  203:
function _ZN4mlir4func10ConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  204:OpFoldResult ConstantOp::fold(ArrayRef<Attribute> operands) {
    #####:  205:  assert(operands.empty() && "constant has no operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  206:  return getValueAttr();
call    0 never executed
call    1 never executed
        -:  207:}
        -:  208:
function _ZN4mlir4func10ConstantOp17getAsmResultNamesEN4llvm12function_refIFvNS_5ValueENS2_9StringRefEEEE called 0 returned 0% blocks executed 0%
    #####:  209:void ConstantOp::getAsmResultNames(
        -:  210:    function_ref<void(Value, StringRef)> setNameFn) {
    #####:  211:  setNameFn(getResult(), "f");
call    0 never executed
call    1 never executed
    #####:  212:}
        -:  213:
function _ZN4mlir4func10ConstantOp15isBuildableWithENS_9AttributeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  214:bool ConstantOp::isBuildableWith(Attribute value, Type type) {
    #####:  215:  return value.isa<FlatSymbolRefAttr>() && type.isa<FunctionType>();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  216:}
        -:  217:
        -:  218://===----------------------------------------------------------------------===//
        -:  219:// FuncOp
        -:  220://===----------------------------------------------------------------------===//
        -:  221:
function _ZN4mlir4func6FuncOp6createENS_8LocationEN4llvm9StringRefENS_12FunctionTypeENS3_8ArrayRefINS_14NamedAttributeEEE called 910 returned 100% blocks executed 100%
      910:  222:FuncOp FuncOp::create(Location location, StringRef name, FunctionType type,
        -:  223:                      ArrayRef<NamedAttribute> attrs) {
      910:  224:  OpBuilder builder(location->getContext());
call    0 returned 100%
call    1 returned 100%
     1820:  225:  OperationState state(location, getOperationName());
call    0 returned 100%
call    1 returned 100%
      910:  226:  FuncOp::build(builder, state, name, type, attrs);
call    0 returned 100%
      910:  227:  return cast<FuncOp>(Operation::create(state));
call    0 returned 100%
call    1 returned 100%
        -:  228:}
function _ZN4mlir4func6FuncOp6createENS_8LocationEN4llvm9StringRefENS_12FunctionTypeENS3_14iterator_rangeINS_9Operation21dialect_attr_iteratorEEE called 0 returned 0% blocks executed 0%
    #####:  229:FuncOp FuncOp::create(Location location, StringRef name, FunctionType type,
        -:  230:                      Operation::dialect_attr_range attrs) {
    #####:  231:  SmallVector<NamedAttribute, 8> attrRef(attrs);
call    0 never executed
    #####:  232:  return create(location, name, type, llvm::makeArrayRef(attrRef));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  233:}
function _ZN4mlir4func6FuncOp6createENS_8LocationEN4llvm9StringRefENS_12FunctionTypeENS3_8ArrayRefINS_14NamedAttributeEEENS6_INS_14DictionaryAttrEEE called 0 returned 0% blocks executed 0%
    #####:  234:FuncOp FuncOp::create(Location location, StringRef name, FunctionType type,
        -:  235:                      ArrayRef<NamedAttribute> attrs,
        -:  236:                      ArrayRef<DictionaryAttr> argAttrs) {
    #####:  237:  FuncOp func = create(location, name, type, attrs);
call    0 never executed
    #####:  238:  func.setAllArgAttrs(argAttrs);
call    0 never executed
    #####:  239:  return func;
        -:  240:}
        -:  241:
function _ZN4mlir4func6FuncOp5buildERNS_9OpBuilderERNS_14OperationStateEN4llvm9StringRefENS_12FunctionTypeENS6_8ArrayRefINS_14NamedAttributeEEENS9_INS_14DictionaryAttrEEE called 28812 returned 100% blocks executed 64%
    28812:  242:void FuncOp::build(OpBuilder &builder, OperationState &state, StringRef name,
        -:  243:                   FunctionType type, ArrayRef<NamedAttribute> attrs,
        -:  244:                   ArrayRef<DictionaryAttr> argAttrs) {
    28812:  245:  state.addAttribute(SymbolTable::getSymbolAttrName(),
call    0 returned 100%
    28812:  246:                     builder.getStringAttr(name));
call    0 returned 100%
call    1 returned 100%
    28812:  247:  state.addAttribute(FunctionOpInterface::getTypeAttrName(),
call    0 returned 100%
    28812:  248:                     TypeAttr::get(type));
call    0 returned 100%
    28812:  249:  state.attributes.append(attrs.begin(), attrs.end());
call    0 returned 100%
    28812:  250:  state.addRegion();
call    0 returned 100%
        -:  251:
    28812:  252:  if (argAttrs.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  253:    return;
    #####:  254:  assert(type.getNumInputs() == argAttrs.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  255:  function_interface_impl::addArgAndResultAttrs(builder, state, argAttrs,
call    0 never executed
        -:  256:                                                /*resultAttrs=*/llvm::None);
        -:  257:}
        -:  258:
function _ZN4mlir4func6FuncOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 91592 returned 100% blocks executed 100%
    91592:  259:ParseResult FuncOp::parse(OpAsmParser &parser, OperationState &result) {
    91592:  260:  auto buildFuncType =
function _ZZN4mlir4func6FuncOp5parseERNS_11OpAsmParserERNS_14OperationStateEENKUlRNS_7BuilderEN4llvm8ArrayRefINS_4TypeEEESB_NS_23function_interface_impl12VariadicFlagERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_clES7_SB_SB_SD_SK_.isra.0 called 91592 returned 100% blocks executed 100%
    91592:  261:      [](Builder &builder, ArrayRef<Type> argTypes, ArrayRef<Type> results,
        -:  262:         function_interface_impl::VariadicFlag,
    91592:  263:         std::string &) { return builder.getFunctionType(argTypes, results); };
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  264:
    91592:  265:  return function_interface_impl::parseFunctionOp(
    91592:  266:      parser, result, /*allowVariadic=*/false, buildFuncType);
call    0 returned 100%
        -:  267:}
        -:  268:
function _ZN4mlir4func6FuncOp5printERNS_12OpAsmPrinterE called 187731 returned 100% blocks executed 100%
   187731:  269:void FuncOp::print(OpAsmPrinter &p) {
   187731:  270:  function_interface_impl::printFunctionOp(p, *this, /*isVariadic=*/false);
call    0 returned 100%
call    1 returned 100%
   187731:  271:}
        -:  272:
        -:  273:/// Clone the internal blocks from this function into dest and all attributes
        -:  274:/// from this function to dest.
function _ZN4mlir4func6FuncOp9cloneIntoES1_RNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:  275:void FuncOp::cloneInto(FuncOp dest, BlockAndValueMapping &mapper) {
        -:  276:  // Add the attributes of this function to dest.
    #####:  277:  llvm::MapVector<StringAttr, Attribute> newAttrMap;
call    0 never executed
    #####:  278:  for (const auto &attr : dest->getAttrs())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  279:    newAttrMap.insert({attr.getName(), attr.getValue()});
call    0 never executed
call    1 never executed
    #####:  280:  for (const auto &attr : (*this)->getAttrs())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  281:    newAttrMap.insert({attr.getName(), attr.getValue()});
call    0 never executed
call    1 never executed
        -:  282:
    #####:  283:  auto newAttrs = llvm::to_vector(llvm::map_range(
    #####:  284:      newAttrMap, [](std::pair<StringAttr, Attribute> attrPair) {
    #####:  285:        return NamedAttribute(attrPair.first, attrPair.second);
call    0 never executed
    #####:  286:      }));
call    0 never executed
call    1 never executed
    #####:  287:  dest->setAttrs(DictionaryAttr::get(getContext(), newAttrs));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  288:
        -:  289:  // Clone the body.
    #####:  290:  getBody().cloneInto(&dest.getBody(), mapper);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  291:}
        -:  292:
        -:  293:/// Create a deep copy of this function and all of its blocks, remapping
        -:  294:/// any operands that use values outside of the function using the map that is
        -:  295:/// provided (leaving them alone if no entry is present). Replaces references
        -:  296:/// to cloned sub-values with the corresponding value that is copied, and adds
        -:  297:/// those mappings to the mapper.
function _ZN4mlir4func6FuncOp5cloneERNS_20BlockAndValueMappingE called 0 returned 0% blocks executed 0%
    #####:  298:FuncOp FuncOp::clone(BlockAndValueMapping &mapper) {
        -:  299:  // Create the new function.
    #####:  300:  FuncOp newFunc = cast<FuncOp>(getOperation()->cloneWithoutRegions());
call    0 never executed
call    1 never executed
        -:  301:
        -:  302:  // If the function has a body, then the user might be deleting arguments to
        -:  303:  // the function by specifying them in the mapper. If so, we don't add the
        -:  304:  // argument to the input type vector.
    #####:  305:  if (!isExternal()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  306:    FunctionType oldType = getFunctionType();
call    0 never executed
        -:  307:
    #####:  308:    unsigned oldNumArgs = oldType.getNumInputs();
call    0 never executed
    #####:  309:    SmallVector<Type, 4> newInputs;
branch  0 never executed
branch  1 never executed
    #####:  310:    newInputs.reserve(oldNumArgs);
branch  0 never executed
branch  1 never executed
    #####:  311:    for (unsigned i = 0; i != oldNumArgs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  312:      if (!mapper.contains(getArgument(i)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  313:        newInputs.push_back(oldType.getInput(i));
call    0 never executed
call    1 never executed
        -:  314:
        -:  315:    /// If any of the arguments were dropped, update the type and drop any
        -:  316:    /// necessary argument attributes.
    #####:  317:    if (newInputs.size() != oldNumArgs) {
branch  0 never executed
branch  1 never executed
    #####:  318:      newFunc.setType(FunctionType::get(oldType.getContext(), newInputs,
    #####:  319:                                        oldType.getResults()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  320:
    #####:  321:      if (ArrayAttr argAttrs = getAllArgAttrs()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  322:        SmallVector<Attribute> newArgAttrs;
branch  0 never executed
branch  1 never executed
    #####:  323:        newArgAttrs.reserve(newInputs.size());
branch  0 never executed
branch  1 never executed
    #####:  324:        for (unsigned i = 0; i != oldNumArgs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  325:          if (!mapper.contains(getArgument(i)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  326:            newArgAttrs.push_back(argAttrs[i]);
call    0 never executed
call    1 never executed
    #####:  327:        newFunc.setAllArgAttrs(newArgAttrs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  328:      }
        -:  329:    }
        -:  330:  }
        -:  331:
        -:  332:  /// Clone the current function into the new one and return it.
    #####:  333:  cloneInto(newFunc, mapper);
call    0 never executed
    #####:  334:  return newFunc;
        -:  335:}
function _ZN4mlir4func6FuncOp5cloneEv called 0 returned 0% blocks executed 0%
    #####:  336:FuncOp FuncOp::clone() {
    #####:  337:  BlockAndValueMapping mapper;
call    0 never executed
call    1 never executed
    #####:  338:  return clone(mapper);
call    0 never executed
        -:  339:}
        -:  340:
        -:  341://===----------------------------------------------------------------------===//
        -:  342:// ReturnOp
        -:  343://===----------------------------------------------------------------------===//
        -:  344:
function _ZN4mlir4func8ReturnOp6verifyEv called 3475352 returned 100% blocks executed 96%
  3475352:  345:LogicalResult ReturnOp::verify() {
  6950653:  346:  auto function = cast<FuncOp>((*this)->getParentOp());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  347:
        -:  348:  // The operand number and types must match the function signature.
  3475260:  349:  const auto &results = function.getFunctionType().getResults();
call    0 returned 100%
call    1 returned 100%
  3474728:  350:  if (getNumOperands() != results.size())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
    32969:  351:    return emitOpError("has ")
call    0 returned 100%
call    1 returned 100%
    16456:  352:           << getNumOperands() << " operands, but enclosing function (@"
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    16484:  353:           << function.getName() << ") returns " << results.size();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  354:
  5276329:  355:  for (unsigned i = 0, e = results.size(); i != e; ++i)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
  1821509:  356:    if (getOperand(i).getType() != results[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 100%
     6850:  357:      return emitError() << "type of return operand " << i << " ("
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
     3425:  358:                         << getOperand(i).getType()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     3425:  359:                         << ") doesn't match function result type ("
     3425:  360:                         << results[i] << ")"
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
     3425:  361:                         << " in function @" << function.getName();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  362:
  3454820:  363:  return success();
        -:  364:}
        -:  365:
        -:  366://===----------------------------------------------------------------------===//
        -:  367:// TableGen'd op method definitions
        -:  368://===----------------------------------------------------------------------===//
        -:  369:
        -:  370:#define GET_OP_CLASSES
        -:  371:#include "mlir/Dialect/Func/IR/FuncOps.cpp.inc"
