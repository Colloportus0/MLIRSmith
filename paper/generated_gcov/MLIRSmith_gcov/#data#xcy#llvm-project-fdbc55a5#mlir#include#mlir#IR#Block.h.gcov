        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/IR/Block.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/ModuleTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/ModuleTranslation.cpp.gcda
        -:    0:Runs:116169
        -:    1://===- Block.h - MLIR Block Class -------------------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the Block class.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_IR_BLOCK_H
        -:   14:#define MLIR_IR_BLOCK_H
        -:   15:
        -:   16:#include "mlir/IR/BlockSupport.h"
        -:   17:#include "mlir/IR/Visitors.h"
        -:   18:
        -:   19:namespace llvm {
        -:   20:class BitVector;
        -:   21:} // namespace llvm
        -:   22:
        -:   23:namespace mlir {
        -:   24:class TypeRange;
        -:   25:template <typename ValueRangeT>
        -:   26:class ValueTypeRange;
        -:   27:
        -:   28:/// `Block` represents an ordered list of `Operation`s.
        -:   29:class Block : public IRObjectWithUseList<BlockOperand>,
        -:   30:              public llvm::ilist_node_with_parent<Block, Region> {
        -:   31:public:
        -:   32:  explicit Block() = default;
        -:   33:  ~Block();
        -:   34:
        -:   35:  void clear() {
        -:   36:    // Drop all references from within this block.
        -:   37:    dropAllReferences();
        -:   38:
        -:   39:    // Clear operations in the reverse order so that uses are destroyed
        -:   40:    // before their defs.
        -:   41:    while (!empty())
        -:   42:      operations.pop_back();
        -:   43:  }
        -:   44:
        -:   45:  /// Provide a 'getParent' method for ilist_node_with_parent methods.
        -:   46:  /// We mark it as a const function because ilist_node_with_parent specifically
        -:   47:  /// requires a 'getParent() const' method. Once ilist_node removes this
        -:   48:  /// constraint, we should drop the const to fit the rest of the MLIR const
        -:   49:  /// model.
        -:   50:  Region *getParent() const;
        -:   51:
        -:   52:  /// Returns the closest surrounding operation that contains this block.
        -:   53:  Operation *getParentOp();
        -:   54:
        -:   55:  /// Return if this block is the entry block in the parent region.
        -:   56:  bool isEntryBlock();
        -:   57:
        -:   58:  /// Insert this block (which must not already be in a region) right before
        -:   59:  /// the specified block.
        -:   60:  void insertBefore(Block *block);
        -:   61:
        -:   62:  /// Unlink this block from its current region and insert it right before the
        -:   63:  /// specific block.
        -:   64:  void moveBefore(Block *block);
        -:   65:
        -:   66:  /// Unlink this Block from its parent region and delete it.
        -:   67:  void erase();
        -:   68:
        -:   69:  //===--------------------------------------------------------------------===//
        -:   70:  // Block argument management
        -:   71:  //===--------------------------------------------------------------------===//
        -:   72:
        -:   73:  // This is the list of arguments to the block.
        -:   74:  using BlockArgListType = MutableArrayRef<BlockArgument>;
        -:   75:
    #####:   76:  BlockArgListType getArguments() { return arguments; }
        -:   77:
        -:   78:  /// Return a range containing the types of the arguments for this block.
        -:   79:  ValueTypeRange<BlockArgListType> getArgumentTypes();
        -:   80:
        -:   81:  using args_iterator = BlockArgListType::iterator;
        -:   82:  using reverse_args_iterator = BlockArgListType::reverse_iterator;
        -:   83:  args_iterator args_begin() { return getArguments().begin(); }
        -:   84:  args_iterator args_end() { return getArguments().end(); }
        -:   85:  reverse_args_iterator args_rbegin() { return getArguments().rbegin(); }
        -:   86:  reverse_args_iterator args_rend() { return getArguments().rend(); }
        -:   87:
        -:   88:  bool args_empty() { return arguments.empty(); }
        -:   89:
        -:   90:  /// Add one value to the argument list.
        -:   91:  BlockArgument addArgument(Type type, Location loc);
        -:   92:
        -:   93:  /// Insert one value to the position in the argument list indicated by the
        -:   94:  /// given iterator. The existing arguments are shifted. The block is expected
        -:   95:  /// not to have predecessors.
        -:   96:  BlockArgument insertArgument(args_iterator it, Type type, Location loc);
        -:   97:
        -:   98:  /// Add one argument to the argument list for each type specified in the list.
        -:   99:  /// `locs` is required to have the same number of elements as `types`.
        -:  100:  iterator_range<args_iterator> addArguments(TypeRange types,
        -:  101:                                             ArrayRef<Location> locs);
        -:  102:
        -:  103:  /// Add one value to the argument list at the specified position.
        -:  104:  BlockArgument insertArgument(unsigned index, Type type, Location loc);
        -:  105:
        -:  106:  /// Erase the argument at 'index' and remove it from the argument list.
        -:  107:  void eraseArgument(unsigned index);
        -:  108:  /// Erases 'num' arguments from the index 'start'.
        -:  109:  void eraseArguments(unsigned start, unsigned num);
        -:  110:  /// Erases the arguments that have their corresponding bit set in
        -:  111:  /// `eraseIndices` and removes them from the argument list.
        -:  112:  void eraseArguments(const BitVector &eraseIndices);
        -:  113:  /// Erases arguments using the given predicate. If the predicate returns true,
        -:  114:  /// that argument is erased.
        -:  115:  void eraseArguments(function_ref<bool(BlockArgument)> shouldEraseFn);
        -:  116:
    #####:  117:  unsigned getNumArguments() { return arguments.size(); }
        -:  118:  BlockArgument getArgument(unsigned i) { return arguments[i]; }
        -:  119:
        -:  120:  //===--------------------------------------------------------------------===//
        -:  121:  // Operation list management
        -:  122:  //===--------------------------------------------------------------------===//
        -:  123:
        -:  124:  /// This is the list of operations in the block.
        -:  125:  using OpListType = llvm::iplist<Operation>;
    #####:  126:  OpListType &getOperations() { return operations; }
        -:  127:
        -:  128:  // Iteration over the operations in the block.
        -:  129:  using iterator = OpListType::iterator;
        -:  130:  using reverse_iterator = OpListType::reverse_iterator;
        -:  131:
    #####:  132:  iterator begin() { return operations.begin(); }
branch  0 never executed
branch  1 never executed
    #####:  133:  iterator end() { return operations.end(); }
        -:  134:  reverse_iterator rbegin() { return operations.rbegin(); }
        -:  135:  reverse_iterator rend() { return operations.rend(); }
        -:  136:
        -:  137:  bool empty() { return operations.empty(); }
        -:  138:  void push_back(Operation *op) { operations.push_back(op); }
        -:  139:  void push_front(Operation *op) { operations.push_front(op); }
        -:  140:
        -:  141:  Operation &back() { return operations.back(); }
    #####:  142:  Operation &front() { return operations.front(); }
call    0 never executed
call    1 never executed
        -:  143:
        -:  144:  /// Returns 'op' if 'op' lies in this block, or otherwise finds the
        -:  145:  /// ancestor operation of 'op' that lies in this block. Returns nullptr if
        -:  146:  /// the latter fails.
        -:  147:  /// TODO: This is very specific functionality that should live somewhere else,
        -:  148:  /// probably in Dominance.cpp.
        -:  149:  Operation *findAncestorOpInBlock(Operation &op);
        -:  150:
        -:  151:  /// This drops all operand uses from operations within this block, which is
        -:  152:  /// an essential step in breaking cyclic dependences between references when
        -:  153:  /// they are to be deleted.
        -:  154:  void dropAllReferences();
        -:  155:
        -:  156:  /// This drops all uses of values defined in this block or in the blocks of
        -:  157:  /// nested regions wherever the uses are located.
        -:  158:  void dropAllDefinedValueUses();
        -:  159:
        -:  160:  /// Returns true if the ordering of the child operations is valid, false
        -:  161:  /// otherwise.
        -:  162:  bool isOpOrderValid();
        -:  163:
        -:  164:  /// Invalidates the current ordering of operations.
        -:  165:  void invalidateOpOrder();
        -:  166:
        -:  167:  /// Verifies the current ordering of child operations matches the
        -:  168:  /// validOpOrder flag. Returns false if the order is valid, true otherwise.
        -:  169:  bool verifyOpOrder();
        -:  170:
        -:  171:  /// Recomputes the ordering of child operations within the block.
        -:  172:  void recomputeOpOrder();
        -:  173:
        -:  174:  /// This class provides iteration over the held operations of a block for a
        -:  175:  /// specific operation type.
        -:  176:  template <typename OpT>
        -:  177:  using op_iterator = detail::op_iterator<OpT, iterator>;
        -:  178:
        -:  179:  /// Return an iterator range over the operations within this block that are of
        -:  180:  /// 'OpT'.
        -:  181:  template <typename OpT>
    #####:  182:  iterator_range<op_iterator<OpT>> getOps() {
    #####:  183:    auto endIt = end();
        -:  184:    return {detail::op_filter_iterator<OpT, iterator>(begin(), endIt),
    #####:  185:            detail::op_filter_iterator<OpT, iterator>(endIt, endIt)};
        -:  186:  }
------------------
_ZN4mlir5Block6getOpsINS_4LLVM10LLVMFuncOpEEEN4llvm14iterator_rangeINS_6detail11op_iteratorIT_NS4_14ilist_iteratorINS4_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEEEEEEv:
function _ZN4mlir5Block6getOpsINS_4LLVM10LLVMFuncOpEEEN4llvm14iterator_rangeINS_6detail11op_iteratorIT_NS4_14ilist_iteratorINS4_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEEEEEEv called 0 returned 0% blocks executed 0%
    #####:  182:  iterator_range<op_iterator<OpT>> getOps() {
call    0 never executed
    #####:  183:    auto endIt = end();
call    0 never executed
        -:  184:    return {detail::op_filter_iterator<OpT, iterator>(begin(), endIt),
    #####:  185:            detail::op_filter_iterator<OpT, iterator>(endIt, endIt)};
call    0 never executed
call    1 never executed
        -:  186:  }
------------------
_ZN4mlir5Block6getOpsINS_4LLVM8GlobalOpEEEN4llvm14iterator_rangeINS_6detail11op_iteratorIT_NS4_14ilist_iteratorINS4_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEEEEEEv:
function _ZN4mlir5Block6getOpsINS_4LLVM8GlobalOpEEEN4llvm14iterator_rangeINS_6detail11op_iteratorIT_NS4_14ilist_iteratorINS4_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEEEEEEv called 0 returned 0% blocks executed 0%
    #####:  182:  iterator_range<op_iterator<OpT>> getOps() {
call    0 never executed
    #####:  183:    auto endIt = end();
call    0 never executed
        -:  184:    return {detail::op_filter_iterator<OpT, iterator>(begin(), endIt),
    #####:  185:            detail::op_filter_iterator<OpT, iterator>(endIt, endIt)};
call    0 never executed
call    1 never executed
        -:  186:  }
------------------
        -:  187:  template <typename OpT>
        -:  188:  op_iterator<OpT> op_begin() {
        -:  189:    return detail::op_filter_iterator<OpT, iterator>(begin(), end());
        -:  190:  }
        -:  191:  template <typename OpT>
        -:  192:  op_iterator<OpT> op_end() {
        -:  193:    return detail::op_filter_iterator<OpT, iterator>(end(), end());
        -:  194:  }
        -:  195:
        -:  196:  /// Return an iterator range over the operation within this block excluding
        -:  197:  /// the terminator operation at the end.
    #####:  198:  iterator_range<iterator> without_terminator() {
    #####:  199:    if (begin() == end())
branch  0 never executed
branch  1 never executed
    #####:  200:      return {begin(), end()};
    #####:  201:    auto endIt = --end();
    #####:  202:    return {begin(), endIt};
        -:  203:  }
        -:  204:
        -:  205:  //===--------------------------------------------------------------------===//
        -:  206:  // Terminator management
        -:  207:  //===--------------------------------------------------------------------===//
        -:  208:
        -:  209:  /// Get the terminator operation of this block. This function asserts that
        -:  210:  /// the block has a valid terminator operation.
        -:  211:  Operation *getTerminator();
        -:  212:
        -:  213:  //===--------------------------------------------------------------------===//
        -:  214:  // Predecessors and successors.
        -:  215:  //===--------------------------------------------------------------------===//
        -:  216:
        -:  217:  // Predecessor iteration.
        -:  218:  using pred_iterator = PredecessorIterator;
    #####:  219:  pred_iterator pred_begin() {
    #####:  220:    return pred_iterator((BlockOperand *)getFirstUse());
        -:  221:  }
    #####:  222:  pred_iterator pred_end() { return pred_iterator(nullptr); }
    #####:  223:  iterator_range<pred_iterator> getPredecessors() {
    #####:  224:    return {pred_begin(), pred_end()};
        -:  225:  }
        -:  226:
        -:  227:  /// Return true if this block has no predecessors.
        -:  228:  bool hasNoPredecessors() { return pred_begin() == pred_end(); }
        -:  229:
        -:  230:  /// Returns true if this blocks has no successors.
        -:  231:  bool hasNoSuccessors() { return succ_begin() == succ_end(); }
        -:  232:
        -:  233:  /// If this block has exactly one predecessor, return it.  Otherwise, return
        -:  234:  /// null.
        -:  235:  ///
        -:  236:  /// Note that if a block has duplicate predecessors from a single block (e.g.
        -:  237:  /// if you have a conditional branch with the same block as the true/false
        -:  238:  /// destinations) is not considered to be a single predecessor.
        -:  239:  Block *getSinglePredecessor();
        -:  240:
        -:  241:  /// If this block has a unique predecessor, i.e., all incoming edges originate
        -:  242:  /// from one block, return it. Otherwise, return null.
        -:  243:  Block *getUniquePredecessor();
        -:  244:
        -:  245:  // Indexed successor access.
        -:  246:  unsigned getNumSuccessors();
        -:  247:  Block *getSuccessor(unsigned i);
        -:  248:
        -:  249:  // Successor iteration.
        -:  250:  using succ_iterator = SuccessorRange::iterator;
    #####:  251:  succ_iterator succ_begin() { return getSuccessors().begin(); }
    #####:  252:  succ_iterator succ_end() { return getSuccessors().end(); }
    #####:  253:  SuccessorRange getSuccessors() { return SuccessorRange(this); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  254:
        -:  255:  //===--------------------------------------------------------------------===//
        -:  256:  // Operation Walkers
        -:  257:  //===--------------------------------------------------------------------===//
        -:  258:
        -:  259:  /// Walk the operations in this block. The callback method is called for each
        -:  260:  /// nested region, block or operation, depending on the callback provided.
        -:  261:  /// Regions, blocks and operations at the same nesting level are visited in
        -:  262:  /// lexicographical order. The walk order for enclosing regions, blocks and
        -:  263:  /// operations with respect to their nested ones is specified by 'Order'
        -:  264:  /// (post-order by default). A callback on a block or operation is allowed to
        -:  265:  /// erase that block or operation if either:
        -:  266:  ///   * the walk is in post-order, or
        -:  267:  ///   * the walk is in pre-order and the walk is skipped after the erasure.
        -:  268:  /// See Operation::walk for more details.
        -:  269:  template <WalkOrder Order = WalkOrder::PostOrder, typename FnT,
        -:  270:            typename RetT = detail::walkResultType<FnT>>
        -:  271:  RetT walk(FnT &&callback) {
        -:  272:    return walk<Order>(begin(), end(), std::forward<FnT>(callback));
        -:  273:  }
        -:  274:
        -:  275:  /// Walk the operations in the specified [begin, end) range of this block. The
        -:  276:  /// callback method is called for each nested region, block or operation,
        -:  277:  /// depending on the callback provided. Regions, blocks and operations at the
        -:  278:  /// same nesting level are visited in lexicographical order. The walk order
        -:  279:  /// for enclosing regions, blocks and operations with respect to their nested
        -:  280:  /// ones is specified by 'Order' (post-order by default). This method is
        -:  281:  /// invoked for void-returning callbacks. A callback on a block or operation
        -:  282:  /// is allowed to erase that block or operation only if the walk is in
        -:  283:  /// post-order. See non-void method for pre-order erasure.
        -:  284:  /// See Operation::walk for more details.
        -:  285:  template <WalkOrder Order = WalkOrder::PostOrder, typename FnT,
        -:  286:            typename RetT = detail::walkResultType<FnT>>
        -:  287:  std::enable_if_t<std::is_same<RetT, void>::value, RetT>
        -:  288:  walk(Block::iterator begin, Block::iterator end, FnT &&callback) {
        -:  289:    for (auto &op : llvm::make_early_inc_range(llvm::make_range(begin, end)))
        -:  290:      detail::walk<Order>(&op, callback);
        -:  291:  }
        -:  292:
        -:  293:  /// Walk the operations in the specified [begin, end) range of this block. The
        -:  294:  /// callback method is called for each nested region, block or operation,
        -:  295:  /// depending on the callback provided. Regions, blocks and operations at the
        -:  296:  /// same nesting level are visited in lexicographical order. The walk order
        -:  297:  /// for enclosing regions, blocks and operations with respect to their nested
        -:  298:  /// ones is specified by 'Order' (post-order by default). This method is
        -:  299:  /// invoked for skippable or interruptible callbacks. A callback on a block or
        -:  300:  /// operation is allowed to erase that block or operation if either:
        -:  301:  ///   * the walk is in post-order, or
        -:  302:  ///   * the walk is in pre-order and the walk is skipped after the erasure.
        -:  303:  /// See Operation::walk for more details.
        -:  304:  template <WalkOrder Order = WalkOrder::PostOrder, typename FnT,
        -:  305:            typename RetT = detail::walkResultType<FnT>>
        -:  306:  std::enable_if_t<std::is_same<RetT, WalkResult>::value, RetT>
        -:  307:  walk(Block::iterator begin, Block::iterator end, FnT &&callback) {
        -:  308:    for (auto &op : llvm::make_early_inc_range(llvm::make_range(begin, end)))
        -:  309:      if (detail::walk<Order>(&op, callback).wasInterrupted())
        -:  310:        return WalkResult::interrupt();
        -:  311:    return WalkResult::advance();
        -:  312:  }
        -:  313:
        -:  314:  //===--------------------------------------------------------------------===//
        -:  315:  // Other
        -:  316:  //===--------------------------------------------------------------------===//
        -:  317:
        -:  318:  /// Split the block into two blocks before the specified operation or
        -:  319:  /// iterator.
        -:  320:  ///
        -:  321:  /// Note that all operations BEFORE the specified iterator stay as part of
        -:  322:  /// the original basic block, and the rest of the operations in the original
        -:  323:  /// block are moved to the new block, including the old terminator.  The
        -:  324:  /// original block is left without a terminator.
        -:  325:  ///
        -:  326:  /// The newly formed Block is returned, and the specified iterator is
        -:  327:  /// invalidated.
        -:  328:  Block *splitBlock(iterator splitBefore);
        -:  329:  Block *splitBlock(Operation *splitBeforeOp) {
        -:  330:    return splitBlock(iterator(splitBeforeOp));
        -:  331:  }
        -:  332:
        -:  333:  /// Returns pointer to member of operation list.
        -:  334:  static OpListType Block::*getSublistAccess(Operation *) {
        -:  335:    return &Block::operations;
        -:  336:  }
        -:  337:
        -:  338:  void print(raw_ostream &os);
        -:  339:  void print(raw_ostream &os, AsmState &state);
        -:  340:  void dump();
        -:  341:
        -:  342:  /// Print out the name of the block without printing its body.
        -:  343:  /// NOTE: The printType argument is ignored.  We keep it for compatibility
        -:  344:  /// with LLVM dominator machinery that expects it to exist.
        -:  345:  void printAsOperand(raw_ostream &os, bool printType = true);
        -:  346:  void printAsOperand(raw_ostream &os, AsmState &state);
        -:  347:
        -:  348:private:
        -:  349:  /// Pair of the parent object that owns this block and a bit that signifies if
        -:  350:  /// the operations within this block have a valid ordering.
        -:  351:  llvm::PointerIntPair<Region *, /*IntBits=*/1, bool> parentValidOpOrderPair;
        -:  352:
        -:  353:  /// This is the list of operations in the block.
        -:  354:  OpListType operations;
        -:  355:
        -:  356:  /// This is the list of arguments to the block.
        -:  357:  std::vector<BlockArgument> arguments;
        -:  358:
        -:  359:  Block(Block &) = delete;
        -:  360:  void operator=(Block &) = delete;
        -:  361:
        -:  362:  friend struct llvm::ilist_traits<Block>;
        -:  363:};
        -:  364:} // namespace mlir
        -:  365:
        -:  366:#endif // MLIR_IR_BLOCK_H
