        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUCommon/CMakeFiles/obj.MLIRGPUToGPURuntimeTransforms.dir/GPUOpsLowering.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUCommon/CMakeFiles/obj.MLIRGPUToGPURuntimeTransforms.dir/GPUOpsLowering.cpp.gcda
        -:    0:Runs:116164
        -:    1://===- GPUOpsLowering.cpp - GPU FuncOp / ReturnOp lowering ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "GPUOpsLowering.h"
        -:   10:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   11:#include "mlir/IR/Builders.h"
        -:   12:#include "mlir/IR/BuiltinTypes.h"
        -:   13:#include "llvm/ADT/STLExtras.h"
        -:   14:#include "llvm/Support/FormatVariadic.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:LogicalResult
function _ZNK4mlir17GPUFuncOpLowering15matchAndRewriteENS_3gpu9GPUFuncOpENS1_16GPUFuncOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   19:GPUFuncOpLowering::matchAndRewrite(gpu::GPUFuncOp gpuFuncOp, OpAdaptor adaptor,
        -:   20:                                   ConversionPatternRewriter &rewriter) const {
    #####:   21:  Location loc = gpuFuncOp.getLoc();
call    0 never executed
        -:   22:
    #####:   23:  SmallVector<LLVM::GlobalOp, 3> workgroupBuffers;
call    0 never executed
    #####:   24:  workgroupBuffers.reserve(gpuFuncOp.getNumWorkgroupAttributions());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   25:  for (const auto &en : llvm::enumerate(gpuFuncOp.getWorkgroupAttributions())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   26:    Value attribution = en.value();
call    0 never executed
        -:   27:
    #####:   28:    auto type = attribution.getType().dyn_cast<MemRefType>();
call    0 never executed
    #####:   29:    assert(type && type.hasStaticShape() && "unexpected type in attribution");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   30:
    #####:   31:    uint64_t numElements = type.getNumElements();
call    0 never executed
        -:   32:
    #####:   33:    auto elementType =
    #####:   34:        typeConverter->convertType(type.getElementType()).template cast<Type>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   35:    auto arrayType = LLVM::LLVMArrayType::get(elementType, numElements);
call    0 never executed
    #####:   36:    std::string name = std::string(
    #####:   37:        llvm::formatv("__wg_{0}_{1}", gpuFuncOp.getName(), en.index()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   38:    auto globalOp = rewriter.create<LLVM::GlobalOp>(
    #####:   39:        gpuFuncOp.getLoc(), arrayType, /*isConstant=*/false,
call    0 never executed
    #####:   40:        LLVM::Linkage::Internal, name, /*value=*/Attribute(),
call    0 never executed
    #####:   41:        /*alignment=*/0, gpu::GPUDialect::getWorkgroupAddressSpace());
call    0 never executed
    #####:   42:    workgroupBuffers.push_back(globalOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   43:  }
        -:   44:
        -:   45:  // Rewrite the original GPU function to an LLVM function.
    #####:   46:  auto funcType = typeConverter->convertType(gpuFuncOp.getFunctionType())
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   47:                      .template cast<LLVM::LLVMPointerType>()
    #####:   48:                      .getElementType();
call    0 never executed
        -:   49:
        -:   50:  // Remap proper input types.
    #####:   51:  TypeConverter::SignatureConversion signatureConversion(
    #####:   52:      gpuFuncOp.front().getNumArguments());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   53:  getTypeConverter()->convertFunctionSignature(
    #####:   54:      gpuFuncOp.getFunctionType(), /*isVariadic=*/false, signatureConversion);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   55:
        -:   56:  // Create the new function operation. Only copy those attributes that are
        -:   57:  // not specific to function modeling.
    #####:   58:  SmallVector<NamedAttribute, 4> attributes;
call    0 never executed
call    1 never executed
    #####:   59:  for (const auto &attr : gpuFuncOp->getAttrs()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    if (attr.getName() == SymbolTable::getSymbolAttrName() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   61:        attr.getName() == FunctionOpInterface::getTypeAttrName() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   62:        attr.getName() == gpu::GPUFuncOp::getNumWorkgroupAttributionsAttrName())
call    0 never executed
call    1 never executed
    #####:   63:      continue;
    #####:   64:    attributes.push_back(attr);
call    0 never executed
        -:   65:  }
        -:   66:  // Add a dialect specific kernel attribute in addition to GPU kernel
        -:   67:  // attribute. The former is necessary for further translation while the
        -:   68:  // latter is expected by gpu.launch_func.
    #####:   69:  if (gpuFuncOp.isKernel())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:    attributes.emplace_back(kernelAttributeName, rewriter.getUnitAttr());
call    0 never executed
call    1 never executed
    #####:   71:  auto llvmFuncOp = rewriter.create<LLVM::LLVMFuncOp>(
    #####:   72:      gpuFuncOp.getLoc(), gpuFuncOp.getName(), funcType,
    #####:   73:      LLVM::Linkage::External, /*dsoLocal*/ false, /*cconv*/ LLVM::CConv::C,
    #####:   74:      attributes);
call    0 never executed
call    1 never executed
        -:   75:
    #####:   76:  {
        -:   77:    // Insert operations that correspond to converted workgroup and private
        -:   78:    // memory attributions to the body of the function. This must operate on
        -:   79:    // the original function, before the body region is inlined in the new
        -:   80:    // function to maintain the relation between block arguments and the
        -:   81:    // parent operation that assigns their semantics.
    #####:   82:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
        -:   83:
        -:   84:    // Rewrite workgroup memory attributions to addresses of global buffers.
    #####:   85:    rewriter.setInsertionPointToStart(&gpuFuncOp.front());
call    0 never executed
call    1 never executed
    #####:   86:    unsigned numProperArguments = gpuFuncOp.getNumArguments();
call    0 never executed
        -:   87:
    #####:   88:    for (const auto &en : llvm::enumerate(workgroupBuffers)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   89:      LLVM::GlobalOp global = en.value();
call    0 never executed
    #####:   90:      Value address = rewriter.create<LLVM::AddressOfOp>(loc, global);
call    0 never executed
call    1 never executed
    #####:   91:      auto elementType =
call    0 never executed
    #####:   92:          global.getType().cast<LLVM::LLVMArrayType>().getElementType();
call    0 never executed
call    1 never executed
    #####:   93:      Value memory = rewriter.create<LLVM::GEPOp>(
    #####:   94:          loc, LLVM::LLVMPointerType::get(elementType, global.getAddrSpace()),
call    0 never executed
call    1 never executed
    #####:   95:          address, ArrayRef<LLVM::GEPArg>{0, 0});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   96:
        -:   97:      // Build a memref descriptor pointing to the buffer to plug with the
        -:   98:      // existing memref infrastructure. This may use more registers than
        -:   99:      // otherwise necessary given that memref sizes are fixed, but we can try
        -:  100:      // and canonicalize that away later.
    #####:  101:      Value attribution = gpuFuncOp.getWorkgroupAttributions()[en.index()];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:      auto type = attribution.getType().cast<MemRefType>();
call    0 never executed
    #####:  103:      auto descr = MemRefDescriptor::fromStaticShape(
    #####:  104:          rewriter, loc, *getTypeConverter(), type, memory);
call    0 never executed
call    1 never executed
    #####:  105:      signatureConversion.remapInput(numProperArguments + en.index(), descr);
call    0 never executed
        -:  106:    }
        -:  107:
        -:  108:    // Rewrite private memory attributions to alloca'ed buffers.
    #####:  109:    unsigned numWorkgroupAttributions = gpuFuncOp.getNumWorkgroupAttributions();
call    0 never executed
    #####:  110:    auto int64Ty = IntegerType::get(rewriter.getContext(), 64);
call    0 never executed
    #####:  111:    for (const auto &en : llvm::enumerate(gpuFuncOp.getPrivateAttributions())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  112:      Value attribution = en.value();
call    0 never executed
    #####:  113:      auto type = attribution.getType().cast<MemRefType>();
call    0 never executed
    #####:  114:      assert(type && type.hasStaticShape() && "unexpected type in attribution");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  115:
        -:  116:      // Explicitly drop memory space when lowering private memory
        -:  117:      // attributions since NVVM models it as `alloca`s in the default
        -:  118:      // memory space and does not support `alloca`s with addrspace(5).
    #####:  119:      auto ptrType = LLVM::LLVMPointerType::get(
    #####:  120:          typeConverter->convertType(type.getElementType())
call    0 never executed
call    1 never executed
        -:  121:              .template cast<Type>(),
    #####:  122:          allocaAddrSpace);
call    0 never executed
call    1 never executed
    #####:  123:      Value numElements = rewriter.create<LLVM::ConstantOp>(
    #####:  124:          gpuFuncOp.getLoc(), int64Ty, type.getNumElements());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  125:      Value allocated = rewriter.create<LLVM::AllocaOp>(
    #####:  126:          gpuFuncOp.getLoc(), ptrType, numElements, /*alignment=*/0);
call    0 never executed
call    1 never executed
    #####:  127:      auto descr = MemRefDescriptor::fromStaticShape(
    #####:  128:          rewriter, loc, *getTypeConverter(), type, allocated);
call    0 never executed
call    1 never executed
    #####:  129:      signatureConversion.remapInput(
call    0 never executed
    #####:  130:          numProperArguments + numWorkgroupAttributions + en.index(), descr);
call    0 never executed
        -:  131:    }
        -:  132:  }
        -:  133:
        -:  134:  // Move the region to the new function, update the entry block signature.
    #####:  135:  rewriter.inlineRegionBefore(gpuFuncOp.getBody(), llvmFuncOp.getBody(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  136:                              llvmFuncOp.end());
    #####:  137:  if (failed(rewriter.convertRegionTypes(&llvmFuncOp.getBody(), *typeConverter,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:                                         &signatureConversion)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  139:    return failure();
        -:  140:
        -:  141:  // If bare memref pointers are being used, remap them back to memref
        -:  142:  // descriptors This must be done after signature conversion to get rid of the
        -:  143:  // unrealized casts.
    #####:  144:  if (getTypeConverter()->getOptions().useBarePtrCallConv) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  145:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:  146:    rewriter.setInsertionPointToStart(&llvmFuncOp.getBody().front());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  147:    for (const auto &en : llvm::enumerate(gpuFuncOp.getArgumentTypes())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  148:      auto memrefTy = en.value().dyn_cast<MemRefType>();
call    0 never executed
    #####:  149:      if (!memrefTy)
branch  0 never executed
branch  1 never executed
    #####:  150:        continue;
    #####:  151:      assert(memrefTy.hasStaticShape() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  152:             "Bare pointer convertion used with dynamically-shaped memrefs");
        -:  153:      // Use a placeholder when replacing uses of the memref argument to prevent
        -:  154:      // circular replacements.
    #####:  155:      auto remapping = signatureConversion.getInputMapping(en.index());
call    0 never executed
    #####:  156:      assert(remapping && remapping->size == 1 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  157:             "Type converter should produce 1-to-1 mapping for bare memrefs");
    #####:  158:      BlockArgument newArg =
    #####:  159:          llvmFuncOp.getBody().getArgument(remapping->inputNo);
call    0 never executed
call    1 never executed
    #####:  160:      auto placeholder = rewriter.create<LLVM::UndefOp>(
    #####:  161:          loc, getTypeConverter()->convertType(memrefTy));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  162:      rewriter.replaceUsesOfBlockArgument(newArg, placeholder);
call    0 never executed
    #####:  163:      Value desc = MemRefDescriptor::fromStaticShape(
    #####:  164:          rewriter, loc, *getTypeConverter(), memrefTy, newArg);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  165:      rewriter.replaceOp(placeholder, {desc});
call    0 never executed
call    1 never executed
        -:  166:    }
        -:  167:  }
        -:  168:
    #####:  169:  rewriter.eraseOp(gpuFuncOp);
call    0 never executed
    #####:  170:  return success();
branch  0 never executed
branch  1 never executed
        -:  171:}
        -:  172:
        -:  173:static const char formatStringPrefix[] = "printfFormat_";
        -:  174:
        -:  175:template <typename T>
function _Z19getOrDefineFunctionIN4mlir3gpu11GPUModuleOpEENS0_4LLVM10LLVMFuncOpERT_NS0_8LocationERNS0_25ConversionPatternRewriterEN4llvm9StringRefENS3_16LLVMFunctionTypeE called 0 returned 0% blocks executed 0%
    #####:  176:static LLVM::LLVMFuncOp getOrDefineFunction(T &moduleOp, const Location loc,
call    0 never executed
        -:  177:                                            ConversionPatternRewriter &rewriter,
        -:  178:                                            StringRef name,
        -:  179:                                            LLVM::LLVMFunctionType type) {
    #####:  180:  LLVM::LLVMFuncOp ret;
    #####:  181:  if (!(ret = moduleOp.template lookupSymbol<LLVM::LLVMFuncOp>(name))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  182:    ConversionPatternRewriter::InsertionGuard guard(rewriter);
call    0 never executed
    #####:  183:    rewriter.setInsertionPointToStart(moduleOp.getBody());
call    0 never executed
call    1 never executed
    #####:  184:    ret = rewriter.create<LLVM::LLVMFuncOp>(loc, name, type,
    #####:  185:                                            LLVM::Linkage::External);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  186:  }
    #####:  187:  return ret;
        -:  188:}
        -:  189:
function _ZNK4mlir24GPUPrintfOpToHIPLowering15matchAndRewriteENS_3gpu8PrintfOpENS1_15PrintfOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  190:LogicalResult GPUPrintfOpToHIPLowering::matchAndRewrite(
        -:  191:    gpu::PrintfOp gpuPrintfOp, gpu::PrintfOpAdaptor adaptor,
        -:  192:    ConversionPatternRewriter &rewriter) const {
    #####:  193:  Location loc = gpuPrintfOp->getLoc();
call    0 never executed
        -:  194:
    #####:  195:  mlir::Type llvmI8 = typeConverter->convertType(rewriter.getI8Type());
call    0 never executed
call    1 never executed
    #####:  196:  mlir::Type i8Ptr = LLVM::LLVMPointerType::get(llvmI8);
call    0 never executed
    #####:  197:  mlir::Type llvmI32 = typeConverter->convertType(rewriter.getI32Type());
call    0 never executed
call    1 never executed
    #####:  198:  mlir::Type llvmI64 = typeConverter->convertType(rewriter.getI64Type());
call    0 never executed
call    1 never executed
        -:  199:  // Note: this is the GPUModule op, not the ModuleOp that surrounds it
        -:  200:  // This ensures that global constants and declarations are placed within
        -:  201:  // the device code, not the host code
    #####:  202:  auto moduleOp = gpuPrintfOp->getParentOfType<gpu::GPUModuleOp>();
call    0 never executed
        -:  203:
    #####:  204:  auto ocklBegin =
        -:  205:      getOrDefineFunction(moduleOp, loc, rewriter, "__ockl_printf_begin",
    #####:  206:                          LLVM::LLVMFunctionType::get(llvmI64, {llvmI64}));
call    0 never executed
call    1 never executed
    #####:  207:  LLVM::LLVMFuncOp ocklAppendArgs;
call    0 never executed
    #####:  208:  if (!adaptor.getArgs().empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  209:    ocklAppendArgs = getOrDefineFunction(
        -:  210:        moduleOp, loc, rewriter, "__ockl_printf_append_args",
        -:  211:        LLVM::LLVMFunctionType::get(
        -:  212:            llvmI64, {llvmI64, /*numArgs*/ llvmI32, llvmI64, llvmI64, llvmI64,
    #####:  213:                      llvmI64, llvmI64, llvmI64, llvmI64, /*isLast*/ llvmI32}));
call    0 never executed
call    1 never executed
        -:  214:  }
    #####:  215:  auto ocklAppendStringN = getOrDefineFunction(
        -:  216:      moduleOp, loc, rewriter, "__ockl_printf_append_string_n",
        -:  217:      LLVM::LLVMFunctionType::get(
        -:  218:          llvmI64,
    #####:  219:          {llvmI64, i8Ptr, /*length (bytes)*/ llvmI64, /*isLast*/ llvmI32}));
call    0 never executed
call    1 never executed
        -:  220:
        -:  221:  /// Start the printf hostcall
    #####:  222:  Value zeroI64 = rewriter.create<LLVM::ConstantOp>(loc, llvmI64, 0);
call    0 never executed
call    1 never executed
    #####:  223:  auto printfBeginCall = rewriter.create<LLVM::CallOp>(loc, ocklBegin, zeroI64);
call    0 never executed
    #####:  224:  Value printfDesc = printfBeginCall.getResult();
call    0 never executed
        -:  225:
        -:  226:  // Create a global constant for the format string
    #####:  227:  unsigned stringNumber = 0;
    #####:  228:  SmallString<16> stringConstName;
    #####:  229:  do {
    #####:  230:    stringConstName.clear();
call    0 never executed
    #####:  231:    (formatStringPrefix + Twine(stringNumber++)).toStringRef(stringConstName);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  232:  } while (moduleOp.lookupSymbol(stringConstName));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  233:
    #####:  234:  llvm::SmallString<20> formatString(adaptor.getFormat());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  235:  formatString.push_back('\0'); // Null terminate for C
call    0 never executed
    #####:  236:  size_t formatStringSize = formatString.size_in_bytes();
call    0 never executed
        -:  237:
    #####:  238:  auto globalType = LLVM::LLVMArrayType::get(llvmI8, formatStringSize);
call    0 never executed
    #####:  239:  LLVM::GlobalOp global;
call    0 never executed
    #####:  240:  {
    #####:  241:    ConversionPatternRewriter::InsertionGuard guard(rewriter);
call    0 never executed
    #####:  242:    rewriter.setInsertionPointToStart(moduleOp.getBody());
call    0 never executed
call    1 never executed
    #####:  243:    global = rewriter.create<LLVM::GlobalOp>(
        -:  244:        loc, globalType,
    #####:  245:        /*isConstant=*/true, LLVM::Linkage::Internal, stringConstName,
    #####:  246:        rewriter.getStringAttr(formatString));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  247:  }
        -:  248:
        -:  249:  // Get a pointer to the format string's first element and pass it to printf()
    #####:  250:  Value globalPtr = rewriter.create<LLVM::AddressOfOp>(loc, global);
call    0 never executed
call    1 never executed
    #####:  251:  Value stringStart = rewriter.create<LLVM::GEPOp>(
    #####:  252:      loc, i8Ptr, globalPtr, ArrayRef<LLVM::GEPArg>{0, 0});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  253:  Value stringLen =
    #####:  254:      rewriter.create<LLVM::ConstantOp>(loc, llvmI64, formatStringSize);
call    0 never executed
call    1 never executed
        -:  255:
    #####:  256:  Value oneI32 = rewriter.create<LLVM::ConstantOp>(loc, llvmI32, 1);
call    0 never executed
call    1 never executed
    #####:  257:  Value zeroI32 = rewriter.create<LLVM::ConstantOp>(loc, llvmI32, 0);
call    0 never executed
call    1 never executed
        -:  258:
    #####:  259:  auto appendFormatCall = rewriter.create<LLVM::CallOp>(
        -:  260:      loc, ocklAppendStringN,
    #####:  261:      ValueRange{printfDesc, stringStart, stringLen,
call    0 never executed
    #####:  262:                 adaptor.getArgs().empty() ? oneI32 : zeroI32});
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  263:  printfDesc = appendFormatCall.getResult();
call    0 never executed
        -:  264:
        -:  265:  // __ockl_printf_append_args takes 7 values per append call
    #####:  266:  constexpr size_t argsPerAppend = 7;
    #####:  267:  size_t nArgs = adaptor.getArgs().size();
call    0 never executed
    #####:  268:  for (size_t group = 0; group < nArgs; group += argsPerAppend) {
branch  0 never executed
branch  1 never executed
    #####:  269:    size_t bound = std::min(group + argsPerAppend, nArgs);
branch  0 never executed
branch  1 never executed
    #####:  270:    size_t numArgsThisCall = bound - group;
        -:  271:
    #####:  272:    SmallVector<mlir::Value, 2 + argsPerAppend + 1> arguments;
call    0 never executed
    #####:  273:    arguments.push_back(printfDesc);
call    0 never executed
    #####:  274:    arguments.push_back(
call    0 never executed
    #####:  275:        rewriter.create<LLVM::ConstantOp>(loc, llvmI32, numArgsThisCall));
call    0 never executed
call    1 never executed
    #####:  276:    for (size_t i = group; i < bound; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  277:      Value arg = adaptor.getArgs()[i];
call    0 never executed
call    1 never executed
    #####:  278:      if (auto floatType = arg.getType().dyn_cast<FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  279:        if (!floatType.isF64())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:          arg = rewriter.create<LLVM::FPExtOp>(
    #####:  281:              loc, typeConverter->convertType(rewriter.getF64Type()), arg);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  282:        arg = rewriter.create<LLVM::BitcastOp>(loc, llvmI64, arg);
call    0 never executed
        -:  283:      }
    #####:  284:      if (arg.getType().getIntOrFloatBitWidth() != 64)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  285:        arg = rewriter.create<LLVM::ZExtOp>(loc, llvmI64, arg);
call    0 never executed
        -:  286:
    #####:  287:      arguments.push_back(arg);
call    0 never executed
        -:  288:    }
        -:  289:    // Pad out to 7 arguments since the hostcall always needs 7
    #####:  290:    for (size_t extra = numArgsThisCall; extra < argsPerAppend; ++extra) {
branch  0 never executed
branch  1 never executed
    #####:  291:      arguments.push_back(zeroI64);
call    0 never executed
        -:  292:    }
        -:  293:
    #####:  294:    auto isLast = (bound == nArgs) ? oneI32 : zeroI32;
branch  0 never executed
branch  1 never executed
    #####:  295:    arguments.push_back(isLast);
call    0 never executed
    #####:  296:    auto call = rewriter.create<LLVM::CallOp>(loc, ocklAppendArgs, arguments);
call    0 never executed
    #####:  297:    printfDesc = call.getResult();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  298:  }
    #####:  299:  rewriter.eraseOp(gpuPrintfOp);
call    0 never executed
    #####:  300:  return success();
branch  0 never executed
branch  1 never executed
        -:  301:}
        -:  302:
function _ZNK4mlir29GPUPrintfOpToLLVMCallLowering15matchAndRewriteENS_3gpu8PrintfOpENS1_15PrintfOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  303:LogicalResult GPUPrintfOpToLLVMCallLowering::matchAndRewrite(
        -:  304:    gpu::PrintfOp gpuPrintfOp, gpu::PrintfOpAdaptor adaptor,
        -:  305:    ConversionPatternRewriter &rewriter) const {
    #####:  306:  Location loc = gpuPrintfOp->getLoc();
call    0 never executed
        -:  307:
    #####:  308:  mlir::Type llvmI8 = typeConverter->convertType(rewriter.getIntegerType(8));
call    0 never executed
call    1 never executed
    #####:  309:  mlir::Type i8Ptr = LLVM::LLVMPointerType::get(llvmI8, addressSpace);
call    0 never executed
        -:  310:
        -:  311:  // Note: this is the GPUModule op, not the ModuleOp that surrounds it
        -:  312:  // This ensures that global constants and declarations are placed within
        -:  313:  // the device code, not the host code
    #####:  314:  auto moduleOp = gpuPrintfOp->getParentOfType<gpu::GPUModuleOp>();
call    0 never executed
        -:  315:
    #####:  316:  auto printfType = LLVM::LLVMFunctionType::get(rewriter.getI32Type(), {i8Ptr},
    #####:  317:                                                /*isVarArg=*/true);
call    0 never executed
call    1 never executed
    #####:  318:  LLVM::LLVMFuncOp printfDecl =
call    0 never executed
    #####:  319:      getOrDefineFunction(moduleOp, loc, rewriter, "printf", printfType);
call    0 never executed
        -:  320:
        -:  321:  // Create a global constant for the format string
    #####:  322:  unsigned stringNumber = 0;
    #####:  323:  SmallString<16> stringConstName;
    #####:  324:  do {
    #####:  325:    stringConstName.clear();
call    0 never executed
    #####:  326:    (formatStringPrefix + Twine(stringNumber++)).toStringRef(stringConstName);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  327:  } while (moduleOp.lookupSymbol(stringConstName));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  328:
    #####:  329:  llvm::SmallString<20> formatString(adaptor.getFormat());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  330:  formatString.push_back('\0'); // Null terminate for C
call    0 never executed
    #####:  331:  auto globalType =
call    0 never executed
    #####:  332:      LLVM::LLVMArrayType::get(llvmI8, formatString.size_in_bytes());
call    0 never executed
    #####:  333:  LLVM::GlobalOp global;
call    0 never executed
    #####:  334:  {
    #####:  335:    ConversionPatternRewriter::InsertionGuard guard(rewriter);
call    0 never executed
    #####:  336:    rewriter.setInsertionPointToStart(moduleOp.getBody());
call    0 never executed
call    1 never executed
    #####:  337:    global = rewriter.create<LLVM::GlobalOp>(
        -:  338:        loc, globalType,
    #####:  339:        /*isConstant=*/true, LLVM::Linkage::Internal, stringConstName,
    #####:  340:        rewriter.getStringAttr(formatString), /*allignment=*/0, addressSpace);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  341:  }
        -:  342:
        -:  343:  // Get a pointer to the format string's first element
    #####:  344:  Value globalPtr = rewriter.create<LLVM::AddressOfOp>(loc, global);
call    0 never executed
call    1 never executed
    #####:  345:  Value stringStart = rewriter.create<LLVM::GEPOp>(
    #####:  346:      loc, i8Ptr, globalPtr, ArrayRef<LLVM::GEPArg>{0, 0});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  347:
        -:  348:  // Construct arguments and function call
    #####:  349:  auto argsRange = adaptor.getArgs();
call    0 never executed
    #####:  350:  SmallVector<Value, 4> printfArgs;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  351:  printfArgs.reserve(argsRange.size() + 1);
branch  0 never executed
branch  1 never executed
    #####:  352:  printfArgs.push_back(stringStart);
call    0 never executed
    #####:  353:  printfArgs.append(argsRange.begin(), argsRange.end());
call    0 never executed
        -:  354:
    #####:  355:  rewriter.create<LLVM::CallOp>(loc, printfDecl, printfArgs);
call    0 never executed
    #####:  356:  rewriter.eraseOp(gpuPrintfOp);
call    0 never executed
    #####:  357:  return success();
branch  0 never executed
branch  1 never executed
        -:  358:}
        -:  359:
        -:  360:/// Unrolls op if it's operating on vectors.
function _ZN4mlir4impl17scalarizeVectorOpEPNS_9OperationENS_10ValueRangeERNS_25ConversionPatternRewriterERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:  361:LogicalResult impl::scalarizeVectorOp(Operation *op, ValueRange operands,
        -:  362:                                      ConversionPatternRewriter &rewriter,
        -:  363:                                      LLVMTypeConverter &converter) {
    #####:  364:  TypeRange operandTypes(operands);
call    0 never executed
    #####:  365:  if (llvm::none_of(operandTypes,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  366:                    [](Type type) { return type.isa<VectorType>(); })) {
    #####:  367:    return rewriter.notifyMatchFailure(op, "expected vector operand");
call    0 never executed
        -:  368:  }
    #####:  369:  if (op->getNumRegions() != 0 || op->getNumSuccessors() != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  370:    return rewriter.notifyMatchFailure(op, "expected no region/successor");
call    0 never executed
    #####:  371:  if (op->getNumResults() != 1)
branch  0 never executed
branch  1 never executed
    #####:  372:    return rewriter.notifyMatchFailure(op, "expected single result");
call    0 never executed
    #####:  373:  VectorType vectorType = op->getResult(0).getType().dyn_cast<VectorType>();
call    0 never executed
    #####:  374:  if (!vectorType)
branch  0 never executed
branch  1 never executed
    #####:  375:    return rewriter.notifyMatchFailure(op, "expected vector result");
call    0 never executed
        -:  376:
    #####:  377:  Location loc = op->getLoc();
call    0 never executed
    #####:  378:  Value result = rewriter.create<LLVM::UndefOp>(loc, vectorType);
call    0 never executed
call    1 never executed
    #####:  379:  Type indexType = converter.convertType(rewriter.getIndexType());
call    0 never executed
call    1 never executed
    #####:  380:  StringAttr name = op->getName().getIdentifier();
call    0 never executed
    #####:  381:  Type elementType = vectorType.getElementType();
call    0 never executed
        -:  382:
    #####:  383:  for (int64_t i = 0; i < vectorType.getNumElements(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  384:    Value index = rewriter.create<LLVM::ConstantOp>(loc, indexType, i);
call    0 never executed
call    1 never executed
function _ZZN4mlir4impl17scalarizeVectorOpEPNS_9OperationENS_10ValueRangeERNS_25ConversionPatternRewriterERNS_17LLVMTypeConverterEENKUlNS_5ValueEE0_clES8_ called 0 returned 0% blocks executed 0%
    #####:  385:    auto extractElement = [&](Value operand) -> Value {
    #####:  386:      if (!operand.getType().isa<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  387:        return operand;
    #####:  388:      return rewriter.create<LLVM::ExtractElementOp>(loc, operand, index);
call    0 never executed
    #####:  389:    };
    #####:  390:    auto scalarOperands =
call    0 never executed
    #####:  391:        llvm::to_vector(llvm::map_range(operands, extractElement));
call    0 never executed
    #####:  392:    Operation *scalarOp =
    #####:  393:        rewriter.create(loc, name, scalarOperands, elementType, op->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  394:    rewriter.create<LLVM::InsertElementOp>(loc, result, scalarOp->getResult(0),
branch  0 never executed
branch  1 never executed
    #####:  395:                                           index);
call    0 never executed
        -:  396:  }
        -:  397:
    #####:  398:  rewriter.replaceOp(op, result);
call    0 never executed
call    1 never executed
    #####:  399:  return success();
        -:  400:}
