        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Analysis/TestDataFlowFramework.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestDataFlowFramework.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestDataFlowFramework.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestDataFlowFramework.cpp - Test data-flow analysis framework ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlowFramework.h"
        -:   10:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15:namespace {
        -:   16:/// This analysis state represents an integer that is XOR'd with other states.
        -:   17:class FooState : public AnalysisState {
        -:   18:public:
function _ZN12_GLOBAL__N_18FooState13resolveTypeIDEv called 56458 returned 100% blocks executed 100%
    56458:   19:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(FooState)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   20:
    28533:   21:  using AnalysisState::AnalysisState;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   22:
        -:   23:  /// Returns true if the state is uninitialized.
    #####:   24:  bool isUninitialized() const { return !state; }
branch  0 never executed
branch  1 never executed
        -:   25:
        -:   26:  /// Print the integer value or "none" if uninitialized.
function _ZNK12_GLOBAL__N_18FooState5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   27:  void print(raw_ostream &os) const override {
    #####:   28:    if (state)
branch  0 never executed
branch  1 never executed
    #####:   29:      os << *state;
call    0 never executed
        -:   30:    else
    #####:   31:      os << "none";
call    0 never executed
    #####:   32:  }
        -:   33:
        -:   34:  /// Join the state with another. If either is unintialized, take the
        -:   35:  /// initialized value. Otherwise, XOR the integer values.
    #####:   36:  ChangeResult join(const FooState &rhs) {
    #####:   37:    if (rhs.isUninitialized())
        -:   38:      return ChangeResult::NoChange;
    #####:   39:    return join(*rhs.state);
branch  0 never executed
branch  1 never executed
        -:   40:  }
     448*:   41:  ChangeResult join(uint64_t value) {
    #####:   42:    if (isUninitialized()) {
branch  0 never executed
branch  1 never executed
     448*:   43:      state = value;
     448*:   44:      return ChangeResult::Change;
        -:   45:    }
    #####:   46:    uint64_t before = *state;
    #####:   47:    state = before ^ value;
    #####:   48:    return before == *state ? ChangeResult::NoChange : ChangeResult::Change;
        -:   49:  }
        -:   50:
        -:   51:  /// Set the value of the state directly.
    28057:   52:  ChangeResult set(const FooState &rhs) {
    28057:   53:    if (state == rhs.state)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   54:      return ChangeResult::NoChange;
    28057:   55:    state = rhs.state;
    28057:   56:    return ChangeResult::Change;
        -:   57:  }
        -:   58:
        -:   59:  /// Returns the integer value of the state.
    #####:   60:  uint64_t getValue() const { return *state; }
        -:   61:
        -:   62:private:
        -:   63:  /// An optional integer value.
        -:   64:  Optional<uint64_t> state;
        -:   65:};
        -:   66:
        -:   67:/// This analysis computes `FooState` across operations and control-flow edges.
        -:   68:/// If an op specifies a `foo` integer attribute, the contained value is XOR'd
        -:   69:/// with the value before the operation.
        -:   70:class FooAnalysis : public DataFlowAnalysis {
        -:   71:public:
        -:   72:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(FooAnalysis)
        -:   73:
      451:   74:  using DataFlowAnalysis::DataFlowAnalysis;
call    0 returned 100%
call    1 returned 100%
        -:   75:
        -:   76:  LogicalResult initialize(Operation *top) override;
        -:   77:  LogicalResult visit(ProgramPoint point) override;
        -:   78:
        -:   79:private:
        -:   80:  void visitBlock(Block *block);
        -:   81:  void visitOperation(Operation *op);
        -:   82:};
        -:   83:
   146188:   84:struct TestFooAnalysisPass
call    0 returned 100%
call    1 returned 100%
        -:   85:    : public PassWrapper<TestFooAnalysisPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_119TestFooAnalysisPass13resolveTypeIDEv called 116668 returned 100% blocks executed 100%
   116668:   86:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestFooAnalysisPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   87:
function _ZNK12_GLOBAL__N_119TestFooAnalysisPass11getArgumentEv called 116177 returned 100% blocks executed 100%
   116177:   88:  StringRef getArgument() const override { return "test-foo-analysis"; }
        -:   89:
        -:   90:  void runOnOperation() override;
        -:   91:};
        -:   92:} // namespace
        -:   93:
function _ZN12_GLOBAL__N_111FooAnalysis10initializeEPN4mlir9OperationE called 451 returned 99% blocks executed 78%
      451:   94:LogicalResult FooAnalysis::initialize(Operation *top) {
      451:   95:  if (top->getNumRegions() != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   96:    return top->emitError("expected a single region top-level op");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   97:
        -:   98:  // Initialize the top-level state.
      451:   99:  getOrCreate<FooState>(&top->getRegion(0).front())->join(0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 99%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  100:
        -:  101:  // Visit all nested blocks and operations.
      473:  102:  for (Block &block : top->getRegion(0)) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      448:  103:    visitBlock(&block);
call    0 returned 100%
    28483:  104:    for (Operation &op : block) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    28457:  105:      if (op.getNumRegions())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      420:  106:        return op.emitError("unexpected op with regions");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    28037:  107:      visitOperation(&op);
call    0 returned 100%
        -:  108:    }
        -:  109:  }
       25:  110:  return success();
        -:  111:}
        -:  112:
function _ZN12_GLOBAL__N_111FooAnalysis5visitEN4mlir12ProgramPointE called 0 returned 0% blocks executed 0%
    #####:  113:LogicalResult FooAnalysis::visit(ProgramPoint point) {
    #####:  114:  if (auto *op = point.dyn_cast<Operation *>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  115:    visitOperation(op);
call    0 never executed
    #####:  116:    return success();
        -:  117:  }
    #####:  118:  if (auto *block = point.dyn_cast<Block *>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  119:    visitBlock(block);
call    0 never executed
    #####:  120:    return success();
        -:  121:  }
    #####:  122:  return emitError(point.getLoc(), "unknown point kind");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  123:}
        -:  124:
function _ZN12_GLOBAL__N_111FooAnalysis10visitBlockEPN4mlir5BlockE called 447 returned 100% blocks executed 16%
      447:  125:void FooAnalysis::visitBlock(Block *block) {
      447:  126:  if (block->isEntryBlock()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  127:    // This is the initial state. Let the framework default-initialize it.
      447:  128:    return;
        -:  129:  }
    #####:  130:  FooState *state = getOrCreate<FooState>(block);
call    0 never executed
    #####:  131:  ChangeResult result = ChangeResult::NoChange;
    #####:  132:  for (Block *pred : block->getPredecessors()) {
branch  0 never executed
branch  1 never executed
        -:  133:    // Join the state at the terminators of all predecessors.
    #####:  134:    const FooState *predState =
    #####:  135:        getOrCreateFor<FooState>(block, pred->getTerminator());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  136:    result |= state->join(*predState);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  137:  }
    #####:  138:  propagateIfChanged(state, result);
call    0 never executed
        -:  139:}
        -:  140:
function _ZN12_GLOBAL__N_111FooAnalysis14visitOperationEPN4mlir9OperationE called 28037 returned 100% blocks executed 71%
    28037:  141:void FooAnalysis::visitOperation(Operation *op) {
    28037:  142:  FooState *state = getOrCreate<FooState>(op);
call    0 returned 100%
    28066:  143:  ChangeResult result = ChangeResult::NoChange;
        -:  144:
        -:  145:  // Copy the state across the operation.
    28066:  146:  const FooState *prevState;
    55680:  147:  if (Operation *prev = op->getPrevNode())
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    55239:  148:    prevState = getOrCreateFor<FooState>(op, prev);
call    0 returned 100%
call    1 returned 100%
        -:  149:  else
      877:  150:    prevState = getOrCreateFor<FooState>(op, op->getBlock());
call    0 returned 100%
call    1 returned 100%
    56114:  151:  result |= state->set(*prevState);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  152:
        -:  153:  // Modify the state with the attribute, if specified.
    28057:  154:  if (auto attr = op->getAttrOfType<IntegerAttr>("foo")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  155:    uint64_t value = attr.getUInt();
call    0 never executed
    #####:  156:    result |= state->join(value);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  157:  }
    28044:  158:  propagateIfChanged(state, result);
call    0 returned 100%
    28037:  159:}
        -:  160:
function _ZN12_GLOBAL__N_119TestFooAnalysisPass14runOnOperationEv called 451 returned 100% blocks executed 100%
      451:  161:void TestFooAnalysisPass::runOnOperation() {
      451:  162:  func::FuncOp func = getOperation();
call    0 returned 100%
      450:  163:  DataFlowSolver solver;
call    0 returned 100%
      451:  164:  solver.load<FooAnalysis>();
call    0 returned 100%
      451:  165:  if (failed(solver.initializeAndRun(func)))
call    0 returned 99%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
      422:  166:    return signalPassFailure();
call    0 returned 100%
call    1 returned 100%
        -:  167:
       25:  168:  raw_ostream &os = llvm::errs();
call    0 returned 100%
       25:  169:  os << "function: @" << func.getSymName() << "\n";
call    0 returned 116%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  170:
function _ZZN12_GLOBAL__N_119TestFooAnalysisPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 134 returned 100% blocks executed 25%
       29:  171:  func.walk([&](Operation *op) {
call    0 returned 100%
call    1 returned 100%
      134:  172:    auto tag = op->getAttrOfType<StringAttr>("tag");
call    0 returned 100%
      134:  173:    if (!tag)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      134:  174:      return;
    #####:  175:    const FooState *state = solver.lookupState<FooState>(op);
call    0 never executed
    #####:  176:    assert(state && !state->isUninitialized());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  177:    os << tag.getValue() << " -> " << state->getValue() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:  178:  });
        -:  179:}
        -:  180:
        -:  181:namespace mlir {
        -:  182:namespace test {
function _ZN4mlir4test27registerTestFooAnalysisPassEv called 116161 returned 100% blocks executed 100%
   116161:  183:void registerTestFooAnalysisPass() { PassRegistration<TestFooAnalysisPass>(); }
call    0 returned 100%
        -:  184:} // namespace test
        -:  185:} // namespace mlir
