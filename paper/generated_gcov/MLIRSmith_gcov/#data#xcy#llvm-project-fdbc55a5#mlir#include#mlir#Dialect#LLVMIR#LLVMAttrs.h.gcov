        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/DebugTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/DebugTranslation.cpp.gcda
        -:    0:Runs:116169
        -:    1://===- LLVMDialect.h - MLIR LLVM IR dialect ---------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the LLVM IR dialect in MLIR, containing LLVM operations and
        -:   10:// LLVM type system.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_DIALECT_LLVMIR_LLVMATTRS_H_
        -:   15:#define MLIR_DIALECT_LLVMIR_LLVMATTRS_H_
        -:   16:
        -:   17:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   18:#include "mlir/IR/OpImplementation.h"
        -:   19:
        -:   20:#include "mlir/Dialect/LLVMIR/LLVMOpsEnums.h.inc"
        -:   21:
        -:   22:namespace mlir {
        -:   23:namespace LLVM {
        -:   24:class LoopOptionsAttrBuilder;
        -:   25:
        -:   26:/// This class represents the base attribute for all debug info attributes.
        -:   27:class DINodeAttr : public Attribute {
        -:   28:public:
    #####:   29:  using Attribute::Attribute;
        -:   30:
        -:   31:  // Support LLVM type casting.
        -:   32:  static bool classof(Attribute attr);
        -:   33:};
        -:   34:
        -:   35:/// This class represents a LLVM attribute that describes a debug info scope.
        -:   36:class DIScopeAttr : public DINodeAttr {
        -:   37:public:
    #####:   38:  using DINodeAttr::DINodeAttr;
        -:   39:
        -:   40:  /// Support LLVM type casting.
        -:   41:  static bool classof(Attribute attr);
        -:   42:};
        -:   43:
        -:   44:/// This class represents a LLVM attribute that describes a debug info type.
        -:   45:class DITypeAttr : public DINodeAttr {
        -:   46:public:
    #####:   47:  using DINodeAttr::DINodeAttr;
        -:   48:
        -:   49:  /// Support LLVM type casting.
        -:   50:  static bool classof(Attribute attr);
        -:   51:};
        -:   52:
        -:   53:// Inline the LLVM generated Linkage enum and utility.
        -:   54:// This is only necessary to isolate the "enum generated code" from the
        -:   55:// attribute definition itself.
        -:   56:// TODO: this shouldn't be needed after we unify the attribute generation, i.e.
        -:   57:// --gen-attr-* and --gen-attrdef-*.
        -:   58:using cconv::CConv;
        -:   59:using linkage::Linkage;
        -:   60:} // namespace LLVM
        -:   61:} // namespace mlir
        -:   62:
        -:   63:#define GET_ATTRDEF_CLASSES
        -:   64:#include "mlir/Dialect/LLVMIR/LLVMOpsAttrDefs.h.inc"
        -:   65:
        -:   66:namespace mlir {
        -:   67:namespace LLVM {
        -:   68:
        -:   69:/// Builder class for LoopOptionsAttr. This helper class allows to progressively
        -:   70:/// build a LoopOptionsAttr one option at a time, and pay the price of attribute
        -:   71:/// creation once all the options are in place.
        -:   72:class LoopOptionsAttrBuilder {
        -:   73:public:
        -:   74:  /// Construct a empty builder.
        -:   75:  LoopOptionsAttrBuilder() = default;
        -:   76:
        -:   77:  /// Construct a builder with an initial list of options from an existing
        -:   78:  /// LoopOptionsAttr.
        -:   79:  LoopOptionsAttrBuilder(LoopOptionsAttr attr);
        -:   80:
        -:   81:  /// Set the `disable_licm` option to the provided value. If no value
        -:   82:  /// is provided the option is deleted.
        -:   83:  LoopOptionsAttrBuilder &setDisableLICM(Optional<bool> value);
        -:   84:
        -:   85:  /// Set the `interleave_count` option to the provided value. If no value
        -:   86:  /// is provided the option is deleted.
        -:   87:  LoopOptionsAttrBuilder &setInterleaveCount(Optional<uint64_t> count);
        -:   88:
        -:   89:  /// Set the `disable_unroll` option to the provided value. If no value
        -:   90:  /// is provided the option is deleted.
        -:   91:  LoopOptionsAttrBuilder &setDisableUnroll(Optional<bool> value);
        -:   92:
        -:   93:  /// Set the `disable_pipeline` option to the provided value. If no value
        -:   94:  /// is provided the option is deleted.
        -:   95:  LoopOptionsAttrBuilder &setDisablePipeline(Optional<bool> value);
        -:   96:
        -:   97:  /// Set the `pipeline_initiation_interval` option to the provided value.
        -:   98:  /// If no value is provided the option is deleted.
        -:   99:  LoopOptionsAttrBuilder &
        -:  100:  setPipelineInitiationInterval(Optional<uint64_t> count);
        -:  101:
        -:  102:  /// Returns true if any option has been set.
        -:  103:  bool empty() { return options.empty(); }
        -:  104:
        -:  105:private:
        -:  106:  template <typename T>
        -:  107:  LoopOptionsAttrBuilder &setOption(LoopOptionCase tag, Optional<T> value);
        -:  108:
        -:  109:  friend class LoopOptionsAttr;
        -:  110:  SmallVector<LoopOptionsAttr::OptionValuePair> options;
        -:  111:};
        -:  112:
        -:  113:} // namespace LLVM
        -:  114:} // namespace mlir
        -:  115:
        -:  116:#endif // MLIR_DIALECT_LLVMIR_LLVMATTRS_H_
