        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/IR/TestPrintNesting.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestPrintNesting.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestPrintNesting.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestPrintNesting.cpp - Passes to illustrate the IR nesting ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinOps.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14:namespace {
        -:   15:/// This pass illustrates the IR nesting through printing.
  116665*:   16:struct TestPrintNestingPass
call    0 never executed
call    1 returned 100%
        -:   17:    : public PassWrapper<TestPrintNestingPass, OperationPass<>> {
function _ZN12_GLOBAL__N_120TestPrintNestingPass13resolveTypeIDEv called 116665 returned 100% blocks executed 100%
   116665:   18:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestPrintNestingPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   19:
function _ZNK12_GLOBAL__N_120TestPrintNestingPass11getArgumentEv called 116179 returned 100% blocks executed 100%
   116179:   20:  StringRef getArgument() const final { return "test-print-nesting"; }
function _ZNK12_GLOBAL__N_120TestPrintNestingPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   21:  StringRef getDescription() const final { return "Test various printing."; }
        -:   22:  // Entry point for the pass.
function _ZN12_GLOBAL__N_120TestPrintNestingPass14runOnOperationEv called 395 returned 100% blocks executed 75%
      395:   23:  void runOnOperation() override {
      395:   24:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      395:   25:    resetIndent();
      395:   26:    printOperation(op);
      395:   27:  }
        -:   28:
        -:   29:  /// The three methods below are mutually recursive and follow the nesting of
        -:   30:  /// the IR: operation->region->block->operation->...
        -:   31:
function _ZN12_GLOBAL__N_120TestPrintNestingPass14printOperationEPN4mlir9OperationE called 790529 returned 100% blocks executed 98%
   790529:   32:  void printOperation(Operation *op) {
        -:   33:    // Print the operation itself and some of its properties
   790529:   34:    printIndent() << "visiting op: '" << op->getName() << "' with "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 94% (fallthrough)
branch  5 taken 6%
   790529:   35:                  << op->getNumOperands() << " operands and "
call    0 returned 100%
call    1 returned 100%
   790529:   36:                  << op->getNumResults() << " results\n";
call    0 returned 100%
call    1 returned 100%
        -:   37:    // Print the operation attributes
   790529:   38:    if (!op->getAttrs().empty()) {
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
   239610:   39:      printIndent() << op->getAttrs().size() << " attributes:\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
   551486:   40:      for (NamedAttribute attr : op->getAttrs())
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
   623752:   41:        printIndent() << " - '" << attr.getName().getValue() << "' : '"
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
   311876:   42:                      << attr.getValue() << "'\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   43:    }
        -:   44:
        -:   45:    // Recurse into each of the regions attached to the operation.
   790529:   46:    printIndent() << " " << op->getNumRegions() << " nested regions:\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
  1581058:   47:    auto indent = pushIndent();
   835504:   48:    for (Region &region : op->getRegions())
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
    44975:   49:      printRegion(region);
call    0 returned 100%
   790529:   50:  }
        -:   51:
function _ZN12_GLOBAL__N_120TestPrintNestingPass11printRegionERN4mlir6RegionE called 44975 returned 100% blocks executed 93%
    44975:   52:  void printRegion(Region &region) {
        -:   53:    // A region does not hold anything by itself other than a list of blocks.
    89950:   54:    printIndent() << "Region with " << region.getBlocks().size()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    44975:   55:                  << " blocks:\n";
call    0 returned 100%
    89950:   56:    auto indent = pushIndent();
    89220:   57:    for (Block &block : region.getBlocks())
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    44245:   58:      printBlock(block);
call    0 returned 100%
    44975:   59:  }
        -:   60:
function _ZN12_GLOBAL__N_120TestPrintNestingPass10printBlockERN4mlir5BlockE called 44245 returned 100% blocks executed 100%
    44245:   61:  void printBlock(Block &block) {
        -:   62:    // Print the block intrinsics properties (basically: argument list)
    44245:   63:    printIndent()
call    0 returned 100%
    44245:   64:        << "Block with " << block.getNumArguments() << " arguments, "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    44245:   65:        << block.getNumSuccessors()
call    0 returned 100%
call    1 returned 100%
    44245:   66:        << " successors, and "
call    0 returned 100%
        -:   67:        // Note, this `.size()` is traversing a linked-list and is O(n).
    88490:   68:        << block.getOperations().size() << " operations\n";
call    0 returned 100%
call    1 returned 100%
        -:   69:
        -:   70:    // Block main role is to hold a list of Operations: let's recurse.
    88490:   71:    auto indent = pushIndent();
   834379:   72:    for (Operation &op : block.getOperations())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
   790134:   73:      printOperation(&op);
call    0 returned 100%
    44245:   74:  }
        -:   75:
        -:   76:  /// Manages the indentation as we traverse the IR nesting.
        -:   77:  int indent;
        -:   78:  struct IdentRAII {
        -:   79:    int &indent;
   879749:   80:    IdentRAII(int &indent) : indent(indent) {}
   879749:   81:    ~IdentRAII() { --indent; }
        -:   82:  };
      395:   83:  void resetIndent() { indent = 0; }
call    0 returned 100%
   879749:   84:  IdentRAII pushIndent() { return IdentRAII(++indent); }
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   85:
        -:   86:  llvm::raw_ostream &printIndent() {
        -:   87:    for (int i = 0; i < indent; ++i)
        -:   88:      llvm::outs() << "  ";
        -:   89:    return llvm::outs();
        -:   90:  }
        -:   91:};
        -:   92:} // namespace
        -:   93:
        -:   94:namespace mlir {
function _ZN4mlir28registerTestPrintNestingPassEv called 116163 returned 100% blocks executed 100%
   116163:   95:void registerTestPrintNestingPass() {
   116163:   96:  PassRegistration<TestPrintNestingPass>();
call    0 returned 100%
   116163:   97:}
        -:   98:} // namespace mlir
