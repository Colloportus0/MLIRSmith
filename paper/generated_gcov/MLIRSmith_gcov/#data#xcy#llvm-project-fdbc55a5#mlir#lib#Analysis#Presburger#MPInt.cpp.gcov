        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/Presburger/MPInt.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/MPInt.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/MPInt.cpp.gcda
        -:    0:Runs:116175
        -:    1://===- MPInt.cpp - MLIR MPInt Class ---------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/Presburger/MPInt.h"
        -:   10:#include "llvm/Support/MathExtras.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:using namespace presburger;
        -:   14:
function _ZN4mlir10presburger10hash_valueERKNS0_5MPIntE called 594776 returned 100% blocks executed 80%
   594776:   15:llvm::hash_code mlir::presburger::hash_value(const MPInt &x) {
   594776:   16:  if (x.isSmall())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   594776:   17:    return llvm::hash_value(x.getSmall());
call    0 returned 100%
    #####:   18:  return detail::hash_value(x.getLarge());
call    0 never executed
        -:   19:}
        -:   20:
        -:   21:/// ---------------------------------------------------------------------------
        -:   22:/// Printing.
        -:   23:/// ---------------------------------------------------------------------------
function _ZNK4mlir10presburger5MPInt5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   24:llvm::raw_ostream &MPInt::print(llvm::raw_ostream &os) const {
    #####:   25:  if (isSmall())
branch  0 never executed
branch  1 never executed
    #####:   26:    return os << valSmall;
call    0 never executed
    #####:   27:  return os << valLarge;
call    0 never executed
        -:   28:}
        -:   29:
function _ZNK4mlir10presburger5MPInt4dumpEv called 0 returned 0% blocks executed 0%
    #####:   30:void MPInt::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
        -:   31:
function _ZN4mlir10presburgerlsERN4llvm11raw_ostreamERKNS0_5MPIntE called 0 returned 0% blocks executed 0%
    #####:   32:llvm::raw_ostream &mlir::presburger::operator<<(llvm::raw_ostream &os,
        -:   33:                                                const MPInt &x) {
    #####:   34:  x.print(os);
call    0 never executed
    #####:   35:  return os;
        -:   36:}
