        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/LLVMIR/Transforms/LegalizeForExport.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/LLVMIR/Transforms/CMakeFiles/obj.MLIRLLVMIRTransforms.dir/LegalizeForExport.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/LLVMIR/Transforms/CMakeFiles/obj.MLIRLLVMIRTransforms.dir/LegalizeForExport.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- LegalizeForExport.cpp - Prepare for translation to LLVM IR ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/LLVMIR/Transforms/LegalizeForExport.h"
        -:   10:
        -:   11:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   12:#include "mlir/IR/Block.h"
        -:   13:#include "mlir/IR/Builders.h"
        -:   14:#include "mlir/IR/BuiltinOps.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:namespace LLVM {
        -:   19:#define GEN_PASS_DEF_LLVMLEGALIZEFOREXPORT
        -:   20:#include "mlir/Dialect/LLVMIR/Transforms/Passes.h.inc"
        -:   21:} // namespace LLVM
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:/// If the given block has the same successor with different arguments,
        -:   27:/// introduce dummy successor blocks so that all successors of the given block
        -:   28:/// are different.
function _ZL24ensureDistinctSuccessorsRN4mlir5BlockE called 45742 returned 100% blocks executed 46%
    45742:   29:static void ensureDistinctSuccessors(Block &bb) {
        -:   30:  // Early exit if the block cannot have successors.
    91479:   31:  if (bb.empty() || !bb.back().mightHaveTrait<OpTrait::IsTerminator>())
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      407:   32:    return;
        -:   33:
    45335:   34:  auto *terminator = bb.getTerminator();
call    0 returned 100%
        -:   35:
        -:   36:  // Find repeated successors with arguments.
    90670:   37:  llvm::SmallDenseMap<Block *, SmallVector<int, 4>> successorPositions;
call    0 returned 100%
   45335*:   38:  for (int i = 0, e = terminator->getNumSuccessors(); i < e; ++i) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:    Block *successor = terminator->getSuccessor(i);
call    0 never executed
        -:   40:    // Blocks with no arguments are safe even if they appear multiple times
        -:   41:    // because they don't need PHI nodes.
    #####:   42:    if (successor->getNumArguments() == 0)
branch  0 never executed
branch  1 never executed
    #####:   43:      continue;
    #####:   44:    successorPositions[successor].push_back(i);
call    0 never executed
call    1 never executed
        -:   45:  }
        -:   46:
        -:   47:  // If a successor appears for the second or more time in the terminator,
        -:   48:  // create a new dummy block that unconditionally branches to the original
        -:   49:  // destination, and retarget the terminator to branch to this new block.
        -:   50:  // There is no need to pass arguments to the dummy block because it will be
        -:   51:  // dominated by the original block and can therefore use any values defined in
        -:   52:  // the original block.
    45335:   53:  OpBuilder builder(terminator->getContext());
call    0 returned 100%
call    1 returned 100%
   45335*:   54:  for (const auto &successor : successorPositions) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
        -:   55:    // Start from the second occurrence of a block in the successor list.
    #####:   56:    for (int position : llvm::drop_begin(successor.second, 1)) {
branch  0 never executed
branch  1 never executed
    #####:   57:      Block *dummyBlock = builder.createBlock(bb.getParent());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   58:      terminator->setSuccessor(dummyBlock, position);
call    0 never executed
    #####:   59:      for (BlockArgument arg : successor.first->getArguments())
branch  0 never executed
branch  1 never executed
    #####:   60:        dummyBlock->addArgument(arg.getType(), arg.getLoc());
call    0 never executed
    #####:   61:      builder.create<LLVM::BrOp>(terminator->getLoc(),
    #####:   62:                                 dummyBlock->getArguments(), successor.first);
call    0 never executed
        -:   63:    }
        -:   64:  }
        -:   65:}
        -:   66:
function _ZN4mlir4LLVM24ensureDistinctSuccessorsEPNS_9OperationE called 0 returned 0% blocks executed 0%
     405*:   67:void mlir::LLVM::ensureDistinctSuccessors(Operation *op) {
function _ZZN4mlir4LLVM24ensureDistinctSuccessorsEPNS_9OperationEENKUlS2_E_clES2_.isra.0 called 817574 returned 100% blocks executed 88%
  817574*:   68:  op->walk([](Operation *nested) {
call    0 never executed
   912565:   69:    for (Region &region : llvm::make_early_inc_range(nested->getRegions())) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
   137952:   70:      for (Block &block : llvm::make_early_inc_range(region)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    45742:   71:        ::ensureDistinctSuccessors(block);
call    0 returned 100%
        -:   72:      }
        -:   73:    }
   817574:   74:  });
    #####:   75:}
        -:   76:
        -:   77:namespace {
  116674*:   78:struct LegalizeForExportPass
call    0 never executed
call    1 returned 100%
        -:   79:    : public LLVM::impl::LLVMLegalizeForExportBase<LegalizeForExportPass> {
function _ZN12_GLOBAL__N_121LegalizeForExportPass14runOnOperationEv called 405 returned 100% blocks executed 75%
      405:   80:  void runOnOperation() override {
      405:   81:    LLVM::ensureDistinctSuccessors(getOperation());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
      405:   82:  }
        -:   83:};
        -:   84:} // namespace
        -:   85:
function _ZN4mlir4LLVM27createLegalizeForExportPassEv called 116674 returned 100% blocks executed 100%
   116674:   86:std::unique_ptr<Pass> LLVM::createLegalizeForExportPass() {
   116674:   87:  return std::make_unique<LegalizeForExportPass>();
call    0 returned 100%
        -:   88:}
