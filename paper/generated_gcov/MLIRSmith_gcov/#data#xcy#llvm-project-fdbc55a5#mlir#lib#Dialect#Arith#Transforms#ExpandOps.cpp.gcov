        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Arith/Transforms/ExpandOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/ExpandOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/ExpandOps.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- ExpandOps.cpp - Pass to legalize Arith ops for LLVM lowering --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/IR/TypeUtilities.h"
        -:   13:#include "mlir/Transforms/DialectConversion.h"
        -:   14:
        -:   15:namespace mlir {
        -:   16:namespace arith {
        -:   17:#define GEN_PASS_DEF_ARITHEXPANDOPS
        -:   18:#include "mlir/Dialect/Arith/Transforms/Passes.h.inc"
        -:   19:} // namespace arith
        -:   20:} // namespace mlir
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:/// Create an integer or index constant.
function _ZL11createConstN4mlir8LocationENS_4TypeEiRNS_15PatternRewriterE called 11973 returned 100% blocks executed 100%
    11973:   25:static Value createConst(Location loc, Type type, int value,
        -:   26:                         PatternRewriter &rewriter) {
    23946:   27:  return rewriter.create<arith::ConstantOp>(
    11973:   28:      loc, rewriter.getIntegerAttr(type, value));
call    0 returned 100%
call    1 returned 100%
        -:   29:}
        -:   30:
        -:   31:namespace {
        -:   32:
        -:   33:/// Expands CeilDivUIOp (n, m) into
        -:   34:///  n == 0 ? 0 : ((n-1) / m) + 1
        -:   35:struct CeilDivUIOpConverter : public OpRewritePattern<arith::CeilDivUIOp> {
        -:   36:  using OpRewritePattern::OpRewritePattern;
function _ZNK12_GLOBAL__N_120CeilDivUIOpConverter15matchAndRewriteEN4mlir5arith11CeilDivUIOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   37:  LogicalResult matchAndRewrite(arith::CeilDivUIOp op,
        -:   38:                                PatternRewriter &rewriter) const final {
    #####:   39:    Location loc = op.getLoc();
call    0 never executed
    #####:   40:    Value a = op.getLhs();
call    0 never executed
    #####:   41:    Value b = op.getRhs();
call    0 never executed
    #####:   42:    Value zero = createConst(loc, a.getType(), 0, rewriter);
call    0 never executed
    #####:   43:    Value compare =
    #####:   44:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::eq, a, zero);
call    0 never executed
call    1 never executed
    #####:   45:    Value one = createConst(loc, a.getType(), 1, rewriter);
call    0 never executed
    #####:   46:    Value minusOne = rewriter.create<arith::SubIOp>(loc, a, one);
call    0 never executed
call    1 never executed
    #####:   47:    Value quotient = rewriter.create<arith::DivUIOp>(loc, minusOne, b);
call    0 never executed
call    1 never executed
    #####:   48:    Value plusOne = rewriter.create<arith::AddIOp>(loc, quotient, one);
call    0 never executed
call    1 never executed
    #####:   49:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, compare, zero, plusOne);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
        -:   52:};
        -:   53:
        -:   54:/// Expands CeilDivSIOp (n, m) into
        -:   55:///   1) x = (m > 0) ? -1 : 1
        -:   56:///   2) (n*m>0) ? ((n+x) / m) + 1 : - (-n / m)
        -:   57:struct CeilDivSIOpConverter : public OpRewritePattern<arith::CeilDivSIOp> {
        -:   58:  using OpRewritePattern::OpRewritePattern;
function _ZNK12_GLOBAL__N_120CeilDivSIOpConverter15matchAndRewriteEN4mlir5arith11CeilDivSIOpERNS1_15PatternRewriterE called 2444 returned 100% blocks executed 100%
     2444:   59:  LogicalResult matchAndRewrite(arith::CeilDivSIOp op,
        -:   60:                                PatternRewriter &rewriter) const final {
     2444:   61:    Location loc = op.getLoc();
call    0 returned 100%
     2444:   62:    Type type = op.getType();
call    0 returned 100%
     2444:   63:    Value a = op.getLhs();
call    0 returned 100%
     2444:   64:    Value b = op.getRhs();
call    0 returned 100%
     2444:   65:    Value plusOne = createConst(loc, type, 1, rewriter);
call    0 returned 100%
     2444:   66:    Value zero = createConst(loc, type, 0, rewriter);
call    0 returned 100%
     2444:   67:    Value minusOne = createConst(loc, type, -1, rewriter);
call    0 returned 100%
        -:   68:    // Compute x = (b>0) ? -1 : 1.
     2444:   69:    Value compare =
     2444:   70:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt, b, zero);
call    0 returned 100%
call    1 returned 100%
     2444:   71:    Value x = rewriter.create<arith::SelectOp>(loc, compare, minusOne, plusOne);
call    0 returned 100%
call    1 returned 100%
        -:   72:    // Compute positive res: 1 + ((x+a)/b).
     2444:   73:    Value xPlusA = rewriter.create<arith::AddIOp>(loc, x, a);
call    0 returned 100%
call    1 returned 100%
     2444:   74:    Value xPlusADivB = rewriter.create<arith::DivSIOp>(loc, xPlusA, b);
call    0 returned 100%
call    1 returned 100%
     2444:   75:    Value posRes = rewriter.create<arith::AddIOp>(loc, plusOne, xPlusADivB);
call    0 returned 100%
call    1 returned 100%
        -:   76:    // Compute negative res: - ((-a)/b).
     2444:   77:    Value minusA = rewriter.create<arith::SubIOp>(loc, zero, a);
call    0 returned 100%
call    1 returned 100%
     2444:   78:    Value minusADivB = rewriter.create<arith::DivSIOp>(loc, minusA, b);
call    0 returned 100%
call    1 returned 100%
     2444:   79:    Value negRes = rewriter.create<arith::SubIOp>(loc, zero, minusADivB);
call    0 returned 100%
call    1 returned 100%
        -:   80:    // Result is (a*b>0) ? pos result : neg result.
        -:   81:    // Note, we want to avoid using a*b because of possible overflow.
        -:   82:    // The case that matters are a>0, a==0, a<0, b>0 and b<0. We do
        -:   83:    // not particuliarly care if a*b<0 is true or false when b is zero
        -:   84:    // as this will result in an illegal divide. So `a*b<0` can be reformulated
        -:   85:    // as `(a<0 && b<0) || (a>0 && b>0)' or `(a<0 && b<0) || (a>0 && b>=0)'.
        -:   86:    // We pick the first expression here.
        -:   87:    Value aNeg =
     2444:   88:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::slt, a, zero);
call    0 returned 100%
call    1 returned 100%
     2444:   89:    Value aPos =
     2444:   90:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt, a, zero);
call    0 returned 100%
call    1 returned 100%
     2444:   91:    Value bNeg =
     2444:   92:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::slt, b, zero);
call    0 returned 100%
call    1 returned 100%
     2444:   93:    Value bPos =
     2444:   94:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt, b, zero);
call    0 returned 100%
call    1 returned 100%
     2444:   95:    Value firstTerm = rewriter.create<arith::AndIOp>(loc, aNeg, bNeg);
call    0 returned 100%
call    1 returned 100%
     2444:   96:    Value secondTerm = rewriter.create<arith::AndIOp>(loc, aPos, bPos);
call    0 returned 100%
call    1 returned 100%
     2444:   97:    Value compareRes =
     2444:   98:        rewriter.create<arith::OrIOp>(loc, firstTerm, secondTerm);
call    0 returned 100%
call    1 returned 100%
        -:   99:    // Perform substitution and return success.
     2444:  100:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, compareRes, posRes,
     2444:  101:                                                 negRes);
call    0 returned 100%
     2444:  102:    return success();
        -:  103:  }
        -:  104:};
        -:  105:
        -:  106:/// Expands FloorDivSIOp (n, m) into
        -:  107:///   1)  x = (m<0) ? 1 : -1
        -:  108:///   2)  return (n*m<0) ? - ((-n+x) / m) -1 : n / m
        -:  109:struct FloorDivSIOpConverter : public OpRewritePattern<arith::FloorDivSIOp> {
        -:  110:  using OpRewritePattern::OpRewritePattern;
function _ZNK12_GLOBAL__N_121FloorDivSIOpConverter15matchAndRewriteEN4mlir5arith12FloorDivSIOpERNS1_15PatternRewriterE called 1547 returned 100% blocks executed 100%
     1547:  111:  LogicalResult matchAndRewrite(arith::FloorDivSIOp op,
        -:  112:                                PatternRewriter &rewriter) const final {
     1547:  113:    Location loc = op.getLoc();
call    0 returned 100%
     1547:  114:    Type type = op.getType();
call    0 returned 100%
     1547:  115:    Value a = op.getLhs();
call    0 returned 100%
     1547:  116:    Value b = op.getRhs();
call    0 returned 100%
     1547:  117:    Value plusOne = createConst(loc, type, 1, rewriter);
call    0 returned 100%
     1547:  118:    Value zero = createConst(loc, type, 0, rewriter);
call    0 returned 100%
     1547:  119:    Value minusOne = createConst(loc, type, -1, rewriter);
call    0 returned 100%
        -:  120:    // Compute x = (b<0) ? 1 : -1.
     1547:  121:    Value compare =
     1547:  122:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::slt, b, zero);
call    0 returned 100%
call    1 returned 100%
     1547:  123:    Value x = rewriter.create<arith::SelectOp>(loc, compare, plusOne, minusOne);
call    0 returned 100%
call    1 returned 100%
        -:  124:    // Compute negative res: -1 - ((x-a)/b).
     1547:  125:    Value xMinusA = rewriter.create<arith::SubIOp>(loc, x, a);
call    0 returned 100%
call    1 returned 100%
     1547:  126:    Value xMinusADivB = rewriter.create<arith::DivSIOp>(loc, xMinusA, b);
call    0 returned 100%
call    1 returned 100%
     1547:  127:    Value negRes = rewriter.create<arith::SubIOp>(loc, minusOne, xMinusADivB);
call    0 returned 100%
call    1 returned 100%
        -:  128:    // Compute positive res: a/b.
     1547:  129:    Value posRes = rewriter.create<arith::DivSIOp>(loc, a, b);
call    0 returned 100%
call    1 returned 100%
        -:  130:    // Result is (a*b<0) ? negative result : positive result.
        -:  131:    // Note, we want to avoid using a*b because of possible overflow.
        -:  132:    // The case that matters are a>0, a==0, a<0, b>0 and b<0. We do
        -:  133:    // not particuliarly care if a*b<0 is true or false when b is zero
        -:  134:    // as this will result in an illegal divide. So `a*b<0` can be reformulated
        -:  135:    // as `(a>0 && b<0) || (a>0 && b<0)' or `(a>0 && b<0) || (a>0 && b<=0)'.
        -:  136:    // We pick the first expression here.
     1547:  137:    Value aNeg =
     1547:  138:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::slt, a, zero);
call    0 returned 100%
call    1 returned 100%
     1547:  139:    Value aPos =
     1547:  140:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt, a, zero);
call    0 returned 100%
call    1 returned 100%
     1547:  141:    Value bNeg =
     1547:  142:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::slt, b, zero);
call    0 returned 100%
call    1 returned 100%
     1547:  143:    Value bPos =
     1547:  144:        rewriter.create<arith::CmpIOp>(loc, arith::CmpIPredicate::sgt, b, zero);
call    0 returned 100%
call    1 returned 100%
     1547:  145:    Value firstTerm = rewriter.create<arith::AndIOp>(loc, aNeg, bPos);
call    0 returned 100%
call    1 returned 100%
     1547:  146:    Value secondTerm = rewriter.create<arith::AndIOp>(loc, aPos, bNeg);
call    0 returned 100%
call    1 returned 100%
     1547:  147:    Value compareRes =
     1547:  148:        rewriter.create<arith::OrIOp>(loc, firstTerm, secondTerm);
call    0 returned 100%
call    1 returned 100%
        -:  149:    // Perform substitution and return success.
     1547:  150:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, compareRes, negRes,
     1547:  151:                                                 posRes);
call    0 returned 100%
     1547:  152:    return success();
        -:  153:  }
        -:  154:};
        -:  155:
        -:  156:template <typename OpTy, arith::CmpFPredicate pred>
        -:  157:struct MaxMinFOpConverter : public OpRewritePattern<OpTy> {
        -:  158:public:
        -:  159:  using OpRewritePattern<OpTy>::OpRewritePattern;
        -:  160:
     2597:  161:  LogicalResult matchAndRewrite(OpTy op,
        -:  162:                                PatternRewriter &rewriter) const final {
     2597:  163:    Value lhs = op.getLhs();
     2597:  164:    Value rhs = op.getRhs();
        -:  165:
     2597:  166:    Location loc = op.getLoc();
        -:  167:    // If any operand is NaN, 'cmp' will be true (and 'select' returns 'lhs').
        -:  168:    static_assert(pred == arith::CmpFPredicate::UGT ||
        -:  169:                      pred == arith::CmpFPredicate::ULT,
        -:  170:                  "pred must be either UGT or ULT");
     2597:  171:    Value cmp = rewriter.create<arith::CmpFOp>(loc, pred, lhs, rhs);
     2597:  172:    Value select = rewriter.create<arith::SelectOp>(loc, cmp, lhs, rhs);
        -:  173:
        -:  174:    // Handle the case where rhs is NaN: 'isNaN(rhs) ? rhs : select'.
     2597:  175:    Value isNaN = rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::UNO,
        -:  176:                                                 rhs, rhs);
     2597:  177:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, isNaN, rhs, select);
     2597:  178:    return success();
        -:  179:  }
------------------
_ZNK12_GLOBAL__N_118MaxMinFOpConverterIN4mlir5arith6MaxFOpELNS2_13CmpFPredicateE9EE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118MaxMinFOpConverterIN4mlir5arith6MaxFOpELNS2_13CmpFPredicateE9EE15matchAndRewriteES3_RNS1_15PatternRewriterE called 1459 returned 100% blocks executed 100%
     1459:  161:  LogicalResult matchAndRewrite(OpTy op,
        -:  162:                                PatternRewriter &rewriter) const final {
     1459:  163:    Value lhs = op.getLhs();
call    0 returned 100%
     1459:  164:    Value rhs = op.getRhs();
call    0 returned 100%
        -:  165:
     1459:  166:    Location loc = op.getLoc();
call    0 returned 100%
        -:  167:    // If any operand is NaN, 'cmp' will be true (and 'select' returns 'lhs').
        -:  168:    static_assert(pred == arith::CmpFPredicate::UGT ||
        -:  169:                      pred == arith::CmpFPredicate::ULT,
        -:  170:                  "pred must be either UGT or ULT");
     1459:  171:    Value cmp = rewriter.create<arith::CmpFOp>(loc, pred, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
     1459:  172:    Value select = rewriter.create<arith::SelectOp>(loc, cmp, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
        -:  173:
        -:  174:    // Handle the case where rhs is NaN: 'isNaN(rhs) ? rhs : select'.
     1459:  175:    Value isNaN = rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::UNO,
call    0 returned 100%
call    1 returned 100%
        -:  176:                                                 rhs, rhs);
     1459:  177:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, isNaN, rhs, select);
call    0 returned 100%
     1459:  178:    return success();
        -:  179:  }
------------------
_ZNK12_GLOBAL__N_118MaxMinFOpConverterIN4mlir5arith6MinFOpELNS2_13CmpFPredicateE11EE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118MaxMinFOpConverterIN4mlir5arith6MinFOpELNS2_13CmpFPredicateE11EE15matchAndRewriteES3_RNS1_15PatternRewriterE called 1138 returned 100% blocks executed 100%
     1138:  161:  LogicalResult matchAndRewrite(OpTy op,
        -:  162:                                PatternRewriter &rewriter) const final {
     1138:  163:    Value lhs = op.getLhs();
call    0 returned 100%
     1138:  164:    Value rhs = op.getRhs();
call    0 returned 100%
        -:  165:
     1138:  166:    Location loc = op.getLoc();
call    0 returned 100%
        -:  167:    // If any operand is NaN, 'cmp' will be true (and 'select' returns 'lhs').
        -:  168:    static_assert(pred == arith::CmpFPredicate::UGT ||
        -:  169:                      pred == arith::CmpFPredicate::ULT,
        -:  170:                  "pred must be either UGT or ULT");
     1138:  171:    Value cmp = rewriter.create<arith::CmpFOp>(loc, pred, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
     1138:  172:    Value select = rewriter.create<arith::SelectOp>(loc, cmp, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
        -:  173:
        -:  174:    // Handle the case where rhs is NaN: 'isNaN(rhs) ? rhs : select'.
     1138:  175:    Value isNaN = rewriter.create<arith::CmpFOp>(loc, arith::CmpFPredicate::UNO,
call    0 returned 100%
call    1 returned 100%
        -:  176:                                                 rhs, rhs);
     1138:  177:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, isNaN, rhs, select);
call    0 returned 100%
     1138:  178:    return success();
        -:  179:  }
------------------
        -:  180:};
        -:  181:
        -:  182:template <typename OpTy, arith::CmpIPredicate pred>
        -:  183:struct MaxMinIOpConverter : public OpRewritePattern<OpTy> {
        -:  184:public:
        -:  185:  using OpRewritePattern<OpTy>::OpRewritePattern;
     3684:  186:  LogicalResult matchAndRewrite(OpTy op,
        -:  187:                                PatternRewriter &rewriter) const final {
     3684:  188:    Value lhs = op.getLhs();
     3684:  189:    Value rhs = op.getRhs();
        -:  190:
     3684:  191:    Location loc = op.getLoc();
     3684:  192:    Value cmp = rewriter.create<arith::CmpIOp>(loc, pred, lhs, rhs);
     3684:  193:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, cmp, lhs, rhs);
     3684:  194:    return success();
        -:  195:  }
------------------
_ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MaxSIOpELNS2_13CmpIPredicateE4EE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MaxSIOpELNS2_13CmpIPredicateE4EE15matchAndRewriteES3_RNS1_15PatternRewriterE called 1009 returned 100% blocks executed 100%
     1009:  186:  LogicalResult matchAndRewrite(OpTy op,
        -:  187:                                PatternRewriter &rewriter) const final {
     1009:  188:    Value lhs = op.getLhs();
call    0 returned 100%
     1009:  189:    Value rhs = op.getRhs();
call    0 returned 100%
        -:  190:
     1009:  191:    Location loc = op.getLoc();
call    0 returned 100%
     1009:  192:    Value cmp = rewriter.create<arith::CmpIOp>(loc, pred, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
     1009:  193:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, cmp, lhs, rhs);
call    0 returned 100%
     1009:  194:    return success();
        -:  195:  }
------------------
_ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MaxUIOpELNS2_13CmpIPredicateE8EE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MaxUIOpELNS2_13CmpIPredicateE8EE15matchAndRewriteES3_RNS1_15PatternRewriterE called 797 returned 100% blocks executed 100%
      797:  186:  LogicalResult matchAndRewrite(OpTy op,
        -:  187:                                PatternRewriter &rewriter) const final {
      797:  188:    Value lhs = op.getLhs();
call    0 returned 100%
      797:  189:    Value rhs = op.getRhs();
call    0 returned 100%
        -:  190:
      797:  191:    Location loc = op.getLoc();
call    0 returned 100%
      797:  192:    Value cmp = rewriter.create<arith::CmpIOp>(loc, pred, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
      797:  193:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, cmp, lhs, rhs);
call    0 returned 100%
      797:  194:    return success();
        -:  195:  }
------------------
_ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MinSIOpELNS2_13CmpIPredicateE2EE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MinSIOpELNS2_13CmpIPredicateE2EE15matchAndRewriteES3_RNS1_15PatternRewriterE called 968 returned 100% blocks executed 100%
      968:  186:  LogicalResult matchAndRewrite(OpTy op,
        -:  187:                                PatternRewriter &rewriter) const final {
      968:  188:    Value lhs = op.getLhs();
call    0 returned 100%
      968:  189:    Value rhs = op.getRhs();
call    0 returned 100%
        -:  190:
      968:  191:    Location loc = op.getLoc();
call    0 returned 100%
      968:  192:    Value cmp = rewriter.create<arith::CmpIOp>(loc, pred, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
      968:  193:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, cmp, lhs, rhs);
call    0 returned 100%
      968:  194:    return success();
        -:  195:  }
------------------
_ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MinUIOpELNS2_13CmpIPredicateE6EE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118MaxMinIOpConverterIN4mlir5arith7MinUIOpELNS2_13CmpIPredicateE6EE15matchAndRewriteES3_RNS1_15PatternRewriterE called 910 returned 100% blocks executed 100%
      910:  186:  LogicalResult matchAndRewrite(OpTy op,
        -:  187:                                PatternRewriter &rewriter) const final {
      910:  188:    Value lhs = op.getLhs();
call    0 returned 100%
      910:  189:    Value rhs = op.getRhs();
call    0 returned 100%
        -:  190:
      910:  191:    Location loc = op.getLoc();
call    0 returned 100%
      910:  192:    Value cmp = rewriter.create<arith::CmpIOp>(loc, pred, lhs, rhs);
call    0 returned 100%
call    1 returned 100%
      910:  193:    rewriter.replaceOpWithNewOp<arith::SelectOp>(op, cmp, lhs, rhs);
call    0 returned 100%
      910:  194:    return success();
        -:  195:  }
------------------
        -:  196:};
        -:  197:
   117458:  198:struct ArithExpandOpsPass
call    0 returned 100%
call    1 returned 100%
        -:  199:    : public arith::impl::ArithExpandOpsBase<ArithExpandOpsPass> {
function _ZN12_GLOBAL__N_118ArithExpandOpsPass14runOnOperationEv called 414 returned 100% blocks executed 88%
      414:  200:  void runOnOperation() override {
      414:  201:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      828:  202:    ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  203:
      414:  204:    arith::populateArithExpandOpsPatterns(patterns);
call    0 returned 100%
        -:  205:
      414:  206:    target.addLegalDialect<arith::ArithDialect>();
call    0 returned 100%
        -:  207:    // clang-format off
      414:  208:    target.addIllegalOp<
        -:  209:      arith::CeilDivSIOp,
        -:  210:      arith::CeilDivUIOp,
        -:  211:      arith::FloorDivSIOp,
        -:  212:      arith::MaxFOp,
        -:  213:      arith::MaxSIOp,
        -:  214:      arith::MaxUIOp,
        -:  215:      arith::MinFOp,
        -:  216:      arith::MinSIOp,
        -:  217:      arith::MinUIOp
      414:  218:    >();
call    0 returned 100%
        -:  219:    // clang-format on
      414:  220:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      414:  221:                                      std::move(patterns))))
call    0 returned 100%
    #####:  222:      signalPassFailure();
call    0 never executed
      414:  223:  }
        -:  224:};
        -:  225:
        -:  226:} // namespace
        -:  227:
function _ZN4mlir5arith37populateCeilFloorDivExpandOpsPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     414*:  228:void mlir::arith::populateCeilFloorDivExpandOpsPatterns(
        -:  229:    RewritePatternSet &patterns) {
     414*:  230:  patterns
        -:  231:      .add<CeilDivSIOpConverter, CeilDivUIOpConverter, FloorDivSIOpConverter>(
    #####:  232:          patterns.getContext());
call    0 never executed
    #####:  233:}
        -:  234:
function _ZN4mlir5arith30populateArithExpandOpsPatternsERNS_17RewritePatternSetE called 414 returned 100% blocks executed 100%
      414:  235:void mlir::arith::populateArithExpandOpsPatterns(RewritePatternSet &patterns) {
      414:  236:  populateCeilFloorDivExpandOpsPatterns(patterns);
call    0 returned 100%
        -:  237:  // clang-format off
      414:  238:  patterns.add<
        -:  239:    MaxMinFOpConverter<MaxFOp, arith::CmpFPredicate::UGT>,
        -:  240:    MaxMinFOpConverter<MinFOp, arith::CmpFPredicate::ULT>,
        -:  241:    MaxMinIOpConverter<MaxSIOp, arith::CmpIPredicate::sgt>,
        -:  242:    MaxMinIOpConverter<MaxUIOp, arith::CmpIPredicate::ugt>,
        -:  243:    MaxMinIOpConverter<MinSIOp, arith::CmpIPredicate::slt>,
        -:  244:    MaxMinIOpConverter<MinUIOp, arith::CmpIPredicate::ult>
      414:  245:   >(patterns.getContext());
call    0 returned 100%
        -:  246:  // clang-format on
      414:  247:}
        -:  248:
function _ZN4mlir5arith24createArithExpandOpsPassEv called 117098 returned 100% blocks executed 100%
   117098:  249:std::unique_ptr<Pass> mlir::arith::createArithExpandOpsPass() {
   117098:  250:  return std::make_unique<ArithExpandOpsPass>();
call    0 returned 100%
        -:  251:}
