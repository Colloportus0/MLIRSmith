        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/SPIRVToLLVM/ConvertLaunchFuncToLLVMCalls.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/SPIRVToLLVM/CMakeFiles/obj.MLIRSPIRVToLLVM.dir/ConvertLaunchFuncToLLVMCalls.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/SPIRVToLLVM/CMakeFiles/obj.MLIRSPIRVToLLVM.dir/ConvertLaunchFuncToLLVMCalls.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ConvertLaunchFuncToLLVMCalls.cpp - MLIR GPU launch to LLVM pass ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements passes to convert `gpu.launch_func` op into a sequence
        -:   10:// of LLVM calls that emulate the host and device sides.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/SPIRVToLLVM/SPIRVToLLVMPass.h"
        -:   15:
        -:   16:#include "mlir/Conversion/ArithToLLVM/ArithToLLVM.h"
        -:   17:#include "mlir/Conversion/FuncToLLVM/ConvertFuncToLLVM.h"
        -:   18:#include "mlir/Conversion/LLVMCommon/LoweringOptions.h"
        -:   19:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   20:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   21:#include "mlir/Conversion/MemRefToLLVM/MemRefToLLVM.h"
        -:   22:#include "mlir/Conversion/SPIRVToLLVM/SPIRVToLLVM.h"
        -:   23:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   24:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   25:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   26:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   27:#include "mlir/IR/BuiltinOps.h"
        -:   28:#include "mlir/IR/SymbolTable.h"
        -:   29:#include "mlir/Pass/Pass.h"
        -:   30:#include "mlir/Transforms/DialectConversion.h"
        -:   31:#include "llvm/ADT/DenseMap.h"
        -:   32:#include "llvm/ADT/StringExtras.h"
        -:   33:#include "llvm/Support/FormatVariadic.h"
        -:   34:
        -:   35:namespace mlir {
        -:   36:#define GEN_PASS_DEF_LOWERHOSTCODETOLLVM
        -:   37:#include "mlir/Conversion/Passes.h.inc"
        -:   38:} // namespace mlir
        -:   39:
        -:   40:using namespace mlir;
        -:   41:
        -:   42:static constexpr const char kSPIRVModule[] = "__spv__";
        -:   43:
        -:   44://===----------------------------------------------------------------------===//
        -:   45:// Utility functions
        -:   46://===----------------------------------------------------------------------===//
        -:   47:
        -:   48:/// Returns the string name of the `DescriptorSet` decoration.
    #####:   49:static std::string descriptorSetName() {
    #####:   50:  return llvm::convertToSnakeFromCamelCase(
    #####:   51:      stringifyDecoration(spirv::Decoration::DescriptorSet));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   52:}
        -:   53:
        -:   54:/// Returns the string name of the `Binding` decoration.
    #####:   55:static std::string bindingName() {
    #####:   56:  return llvm::convertToSnakeFromCamelCase(
    #####:   57:      stringifyDecoration(spirv::Decoration::Binding));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   58:}
        -:   59:
        -:   60:/// Calculates the index of the kernel's operand that is represented by the
        -:   61:/// given global variable with the `bind` attribute. We assume that the index of
        -:   62:/// each kernel's operand is mapped to (descriptorSet, binding) by the map:
        -:   63:///   i -> (0, i)
        -:   64:/// which is implemented under `LowerABIAttributesPass`.
function _ZL20calculateGlobalIndexN4mlir5spirv16GlobalVariableOpE called 0 returned 0% blocks executed 0%
    #####:   65:static unsigned calculateGlobalIndex(spirv::GlobalVariableOp op) {
    #####:   66:  IntegerAttr binding = op->getAttrOfType<IntegerAttr>(bindingName());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:  return binding.getInt();
call    0 never executed
        -:   68:}
        -:   69:
        -:   70:/// Copies the given number of bytes from src to dst pointers.
function _ZL4copyN4mlir8LocationENS_5ValueES1_S1_RNS_9OpBuilderE called 0 returned 0% blocks executed 0%
    #####:   71:static void copy(Location loc, Value dst, Value src, Value size,
        -:   72:                 OpBuilder &builder) {
    #####:   73:  MLIRContext *context = builder.getContext();
call    0 never executed
    #####:   74:  auto llvmI1Type = IntegerType::get(context, 1);
call    0 never executed
    #####:   75:  Value isVolatile = builder.create<LLVM::ConstantOp>(
    #####:   76:      loc, llvmI1Type, builder.getBoolAttr(false));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   77:  builder.create<LLVM::MemcpyOp>(loc, dst, src, size, isVolatile);
call    0 never executed
    #####:   78:}
        -:   79:
        -:   80:/// Encodes the binding and descriptor set numbers into a new symbolic name.
        -:   81:/// The name is specified by
        -:   82:///   {kernel_module_name}_{variable_name}_descriptor_set{ds}_binding{b}
        -:   83:/// to avoid symbolic conflicts, where 'ds' and 'b' are descriptor set and
        -:   84:/// binding numbers.
        -:   85:static std::string
function _ZL32createGlobalVariableWithBindNameN4mlir5spirv16GlobalVariableOpEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:   86:createGlobalVariableWithBindName(spirv::GlobalVariableOp op,
        -:   87:                                 StringRef kernelModuleName) {
    #####:   88:  IntegerAttr descriptorSet =
    #####:   89:      op->getAttrOfType<IntegerAttr>(descriptorSetName());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   90:  IntegerAttr binding = op->getAttrOfType<IntegerAttr>(bindingName());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   91:  return llvm::formatv("{0}_{1}_descriptor_set{2}_binding{3}",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   92:                       kernelModuleName.str(), op.getSymName().str(),
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   93:                       std::to_string(descriptorSet.getInt()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   94:                       std::to_string(binding.getInt()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   95:}
        -:   96:
        -:   97:/// Returns true if the given global variable has both a descriptor set number
        -:   98:/// and a binding number.
function _ZL26hasDescriptorSetAndBindingN4mlir5spirv16GlobalVariableOpE called 0 returned 0% blocks executed 0%
    #####:   99:static bool hasDescriptorSetAndBinding(spirv::GlobalVariableOp op) {
    #####:  100:  IntegerAttr descriptorSet =
    #####:  101:      op->getAttrOfType<IntegerAttr>(descriptorSetName());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  102:  IntegerAttr binding = op->getAttrOfType<IntegerAttr>(bindingName());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  103:  return descriptorSet && binding;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  104:}
        -:  105:
        -:  106:/// Fills `globalVariableMap` with SPIR-V global variables that represent kernel
        -:  107:/// arguments from the given SPIR-V module. We assume that the module contains a
        -:  108:/// single entry point function. Hence, all `spirv.GlobalVariable`s with a bind
        -:  109:/// attribute are kernel arguments.
function _ZL24getKernelGlobalVariablesN4mlir5spirv8ModuleOpERN4llvm8DenseMapIjNS0_16GlobalVariableOpENS2_12DenseMapInfoIjvEENS2_6detail12DenseMapPairIjS4_EEEE called 0 returned 0% blocks executed 0%
    #####:  110:static LogicalResult getKernelGlobalVariables(
        -:  111:    spirv::ModuleOp module,
        -:  112:    DenseMap<uint32_t, spirv::GlobalVariableOp> &globalVariableMap) {
    #####:  113:  auto entryPoints = module.getOps<spirv::EntryPointOp>();
call    0 never executed
    #####:  114:  if (!llvm::hasSingleElement(entryPoints)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  115:    return module.emitError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  116:        "The module must contain exactly one entry point function");
call    0 never executed
        -:  117:  }
    #####:  118:  auto globalVariables = module.getOps<spirv::GlobalVariableOp>();
call    0 never executed
    #####:  119:  for (auto globalOp : globalVariables) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  120:    if (hasDescriptorSetAndBinding(globalOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:      globalVariableMap[calculateGlobalIndex(globalOp)] = globalOp;
call    0 never executed
call    1 never executed
        -:  122:  }
    #####:  123:  return success();
        -:  124:}
        -:  125:
        -:  126:/// Encodes the SPIR-V module's symbolic name into the name of the entry point
        -:  127:/// function.
function _ZL16encodeKernelNameN4mlir5spirv8ModuleOpE called 0 returned 0% blocks executed 0%
    #####:  128:static LogicalResult encodeKernelName(spirv::ModuleOp module) {
    #####:  129:  StringRef spvModuleName = *module.getSymName();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  130:  // We already know that the module contains exactly one entry point function
        -:  131:  // based on `getKernelGlobalVariables()` call. Update this function's name
        -:  132:  // to:
        -:  133:  //   {spv_module_name}_{function_name}
    #####:  134:  auto entryPoint = *module.getOps<spirv::EntryPointOp>().begin();
call    0 never executed
call    1 never executed
    #####:  135:  StringRef funcName = entryPoint.getFn();
call    0 never executed
    #####:  136:  auto funcOp = module.lookupSymbol<spirv::FuncOp>(entryPoint.getFnAttr());
call    0 never executed
call    1 never executed
    #####:  137:  StringAttr newFuncName =
    #####:  138:      StringAttr::get(module->getContext(), spvModuleName + "_" + funcName);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  139:  if (failed(SymbolTable::replaceAllSymbolUses(funcOp, newFuncName, module)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:    return failure();
    #####:  141:  SymbolTable::setSymbolName(funcOp, newFuncName);
call    0 never executed
    #####:  142:  return success();
        -:  143:}
        -:  144:
        -:  145://===----------------------------------------------------------------------===//
        -:  146:// Conversion patterns
        -:  147://===----------------------------------------------------------------------===//
        -:  148:
        -:  149:namespace {
        -:  150:
        -:  151:/// Structure to group information about the variables being copied.
        -:  152:struct CopyInfo {
        -:  153:  Value dst;
        -:  154:  Value src;
        -:  155:  Value size;
        -:  156:};
        -:  157:
        -:  158:/// This pattern emulates a call to the kernel in LLVM dialect. For that, we
        -:  159:/// copy the data to the global variable (emulating device side), call the
        -:  160:/// kernel as a normal void LLVM function, and copy the data back (emulating the
        -:  161:/// host side).
        -:  162:class GPULaunchLowering : public ConvertOpToLLVMPattern<gpu::LaunchFuncOp> {
      407:  163:  using ConvertOpToLLVMPattern<gpu::LaunchFuncOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  164:
        -:  165:  LogicalResult
function _ZNK12_GLOBAL__N_117GPULaunchLowering15matchAndRewriteEN4mlir3gpu12LaunchFuncOpENS2_19LaunchFuncOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  166:  matchAndRewrite(gpu::LaunchFuncOp launchOp, OpAdaptor adaptor,
        -:  167:                  ConversionPatternRewriter &rewriter) const override {
    #####:  168:    auto *op = launchOp.getOperation();
call    0 never executed
    #####:  169:    MLIRContext *context = rewriter.getContext();
call    0 never executed
    #####:  170:    auto module = launchOp->getParentOfType<ModuleOp>();
call    0 never executed
        -:  171:
        -:  172:    // Get the SPIR-V module that represents the gpu kernel module. The module
        -:  173:    // is named:
        -:  174:    //   __spv__{kernel_module_name}
        -:  175:    // based on GPU to SPIR-V conversion.
    #####:  176:    StringRef kernelModuleName = launchOp.getKernelModuleName().getValue();
call    0 never executed
call    1 never executed
    #####:  177:    std::string spvModuleName = kSPIRVModule + kernelModuleName.str();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  178:    auto spvModule = module.lookupSymbol<spirv::ModuleOp>(
    #####:  179:        StringAttr::get(context, spvModuleName));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  180:    if (!spvModule) {
branch  0 never executed
branch  1 never executed
    #####:  181:      return launchOp.emitOpError("SPIR-V kernel module '")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  182:             << spvModuleName << "' is not found";
call    0 never executed
call    1 never executed
        -:  183:    }
        -:  184:
        -:  185:    // Declare kernel function in the main module so that it later can be linked
        -:  186:    // with its definition from the kernel module. We know that the kernel
        -:  187:    // function would have no arguments and the data is passed via global
        -:  188:    // variables. The name of the kernel will be
        -:  189:    //   {spv_module_name}_{kernel_function_name}
        -:  190:    // to avoid symbolic name conflicts.
    #####:  191:    StringRef kernelFuncName = launchOp.getKernelName().getValue();
call    0 never executed
call    1 never executed
    #####:  192:    std::string newKernelFuncName = spvModuleName + "_" + kernelFuncName.str();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  193:    auto kernelFunc = module.lookupSymbol<LLVM::LLVMFuncOp>(
    #####:  194:        StringAttr::get(context, newKernelFuncName));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  195:    if (!kernelFunc) {
branch  0 never executed
branch  1 never executed
    #####:  196:      OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:  197:      rewriter.setInsertionPointToStart(module.getBody());
call    0 never executed
call    1 never executed
    #####:  198:      kernelFunc = rewriter.create<LLVM::LLVMFuncOp>(
        -:  199:          rewriter.getUnknownLoc(), newKernelFuncName,
    #####:  200:          LLVM::LLVMFunctionType::get(LLVM::LLVMVoidType::get(context),
call    0 never executed
    #####:  201:                                      ArrayRef<Type>()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  202:      rewriter.setInsertionPoint(launchOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  203:    }
        -:  204:
        -:  205:    // Get all global variables associated with the kernel operands.
    #####:  206:    DenseMap<uint32_t, spirv::GlobalVariableOp> globalVariableMap;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:    if (failed(getKernelGlobalVariables(spvModule, globalVariableMap)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  208:      return failure();
        -:  209:
        -:  210:    // Traverse kernel operands that were converted to MemRefDescriptors. For
        -:  211:    // each operand, create a global variable and copy data from operand to it.
    #####:  212:    Location loc = launchOp.getLoc();
call    0 never executed
    #####:  213:    SmallVector<CopyInfo, 4> copyInfo;
call    0 never executed
call    1 never executed
    #####:  214:    auto numKernelOperands = launchOp.getNumKernelOperands();
call    0 never executed
    #####:  215:    auto kernelOperands = adaptor.getOperands().take_back(numKernelOperands);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:    for (const auto &operand : llvm::enumerate(kernelOperands)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  217:      // Check if the kernel's operand is a ranked memref.
    #####:  218:      auto memRefType = launchOp.getKernelOperand(operand.index())
call    0 never executed
    #####:  219:                            .getType()
call    0 never executed
    #####:  220:                            .dyn_cast<MemRefType>();
    #####:  221:      if (!memRefType)
branch  0 never executed
branch  1 never executed
    #####:  222:        return failure();
        -:  223:
        -:  224:      // Calculate the size of the memref and get the pointer to the allocated
        -:  225:      // buffer.
    #####:  226:      SmallVector<Value, 4> sizes;
call    0 never executed
call    1 never executed
    #####:  227:      SmallVector<Value, 4> strides;
branch  0 never executed
branch  1 never executed
    #####:  228:      Value sizeBytes;
    #####:  229:      getMemRefDescriptorSizes(loc, memRefType, {}, rewriter, sizes, strides,
call    0 never executed
call    1 never executed
        -:  230:                               sizeBytes);
    #####:  231:      MemRefDescriptor descriptor(operand.value());
call    0 never executed
call    1 never executed
    #####:  232:      Value src = descriptor.allocatedPtr(rewriter, loc);
call    0 never executed
        -:  233:
        -:  234:      // Get the global variable in the SPIR-V module that is associated with
        -:  235:      // the kernel operand. Construct its new name and create a corresponding
        -:  236:      // LLVM dialect global variable.
    #####:  237:      spirv::GlobalVariableOp spirvGlobal = globalVariableMap[operand.index()];
call    0 never executed
    #####:  238:      auto pointeeType =
    #####:  239:          spirvGlobal.getType().cast<spirv::PointerType>().getPointeeType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  240:      auto dstGlobalType = typeConverter->convertType(pointeeType);
call    0 never executed
    #####:  241:      if (!dstGlobalType)
branch  0 never executed
branch  1 never executed
    #####:  242:        return failure();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  243:      std::string name =
call    0 never executed
    #####:  244:          createGlobalVariableWithBindName(spirvGlobal, spvModuleName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  245:      // Check if this variable has already been created.
    #####:  246:      auto dstGlobal = module.lookupSymbol<LLVM::GlobalOp>(name);
call    0 never executed
    #####:  247:      if (!dstGlobal) {
branch  0 never executed
branch  1 never executed
    #####:  248:        OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:  249:        rewriter.setInsertionPointToStart(module.getBody());
call    0 never executed
call    1 never executed
    #####:  250:        dstGlobal = rewriter.create<LLVM::GlobalOp>(
        -:  251:            loc, dstGlobalType,
    #####:  252:            /*isConstant=*/false, LLVM::Linkage::Linkonce, name, Attribute(),
    #####:  253:            /*alignment=*/0);
call    0 never executed
    #####:  254:        rewriter.setInsertionPoint(launchOp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  255:      }
        -:  256:
        -:  257:      // Copy the data from src operand pointer to dst global variable. Save
        -:  258:      // src, dst and size so that we can copy data back after emulating the
        -:  259:      // kernel call.
    #####:  260:      Value dst = rewriter.create<LLVM::AddressOfOp>(loc, dstGlobal);
call    0 never executed
call    1 never executed
    #####:  261:      copy(loc, dst, src, sizeBytes, rewriter);
call    0 never executed
        -:  262:
    #####:  263:      CopyInfo info;
    #####:  264:      info.dst = dst;
    #####:  265:      info.src = src;
    #####:  266:      info.size = sizeBytes;
    #####:  267:      copyInfo.push_back(info);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:    }
        -:  269:    // Create a call to the kernel and copy the data back.
    #####:  270:    rewriter.replaceOpWithNewOp<LLVM::CallOp>(op, kernelFunc,
    #####:  271:                                              ArrayRef<Value>());
call    0 never executed
    #####:  272:    for (CopyInfo info : copyInfo)
branch  0 never executed
branch  1 never executed
    #####:  273:      copy(loc, info.src, info.dst, info.size, rewriter);
call    0 never executed
    #####:  274:    return success();
branch  0 never executed
branch  1 never executed
        -:  275:  }
        -:  276:};
        -:  277:
  116694*:  278:class LowerHostCodeToLLVM
call    0 never executed
call    1 returned 100%
        -:  279:    : public impl::LowerHostCodeToLLVMBase<LowerHostCodeToLLVM> {
        -:  280:public:
function _ZN12_GLOBAL__N_119LowerHostCodeToLLVM14runOnOperationEv called 407 returned 100% blocks executed 77%
      407:  281:  void runOnOperation() override {
      407:  282:    ModuleOp module = getOperation();
call    0 returned 100%
        -:  283:
        -:  284:    // Erase the GPU module.
    #####:  285:    for (auto gpuModule :
branch  0 never executed
branch  1 never executed
     407*:  286:         llvm::make_early_inc_range(module.getOps<gpu::GPUModuleOp>()))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
    #####:  287:      gpuModule.erase();
call    0 never executed
        -:  288:
        -:  289:    // Request C wrapper emission.
      860:  290:    for (auto func : module.getOps<func::FuncOp>()) {
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
call    3 returned 100%
      906:  291:      func->setAttr(LLVM::LLVMDialect::getEmitCWrapperAttrName(),
call    0 returned 100%
call    1 returned 100%
      906:  292:                    UnitAttr::get(&getContext()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  293:    }
        -:  294:
        -:  295:    // Specify options to lower to LLVM and pull in the conversion patterns.
      407:  296:    LowerToLLVMOptions options(module.getContext());
call    0 returned 100%
call    1 returned 100%
      407:  297:    auto *context = module.getContext();
call    0 returned 100%
      814:  298:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      814:  299:    LLVMTypeConverter typeConverter(context, options);
call    0 returned 100%
call    1 returned 100%
      407:  300:    mlir::arith::populateArithToLLVMConversionPatterns(typeConverter, patterns);
call    0 returned 100%
      407:  301:    populateMemRefToLLVMConversionPatterns(typeConverter, patterns);
call    0 returned 100%
      407:  302:    populateFuncToLLVMConversionPatterns(typeConverter, patterns);
call    0 returned 100%
      407:  303:    patterns.add<GPULaunchLowering>(typeConverter);
call    0 returned 100%
        -:  304:
        -:  305:    // Pull in SPIR-V type conversion patterns to convert SPIR-V global
        -:  306:    // variable's type to LLVM dialect type.
      407:  307:    populateSPIRVToLLVMTypeConversion(typeConverter);
call    0 returned 100%
        -:  308:
      814:  309:    ConversionTarget target(*context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      407:  310:    target.addLegalDialect<LLVM::LLVMDialect>();
call    0 returned 100%
      407:  311:    if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  312:      signalPassFailure();
call    0 never executed
        -:  313:
        -:  314:    // Finally, modify the kernel function in SPIR-V modules to avoid symbolic
        -:  315:    // conflicts.
     407*:  316:    for (auto spvModule : module.getOps<spirv::ModuleOp>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
    #####:  317:      (void)encodeKernelName(spvModule);
call    0 never executed
      407:  318:  }
        -:  319:};
        -:  320:} // namespace
        -:  321:
        -:  322:std::unique_ptr<mlir::OperationPass<mlir::ModuleOp>>
function _ZN4mlir29createLowerHostCodeToLLVMPassEv called 116694 returned 100% blocks executed 100%
   116694:  323:mlir::createLowerHostCodeToLLVMPass() {
   116694:  324:  return std::make_unique<LowerHostCodeToLLVM>();
call    0 returned 100%
        -:  325:}
