        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Affine/TestAffineLoopUnswitching.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestAffineLoopUnswitching.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Affine/CMakeFiles/MLIRAffineTransformsTestPasses.dir/TestAffineLoopUnswitching.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestAffineLoopUnswitching.cpp - Test affine if/else hoisting -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to hoist affine if/else structures.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/Affine/Utils.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/Passes.h"
        -:   18:
        -:   19:#define PASS_NAME "test-affine-loop-unswitch"
        -:   20:
        -:   21:using namespace mlir;
        -:   22:
        -:   23:namespace {
        -:   24:
        -:   25:/// This pass applies the permutation on the first maximal perfect nest.
        -:   26:struct TestAffineLoopUnswitching
        -:   27:    : public PassWrapper<TestAffineLoopUnswitching, OperationPass<>> {
function _ZN12_GLOBAL__N_125TestAffineLoopUnswitching13resolveTypeIDEv called 116705 returned 100% blocks executed 100%
   116705:   28:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestAffineLoopUnswitching)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   29:
function _ZNK12_GLOBAL__N_125TestAffineLoopUnswitching11getArgumentEv called 116180 returned 100% blocks executed 100%
   116180:   30:  StringRef getArgument() const final { return PASS_NAME; }
function _ZNK12_GLOBAL__N_125TestAffineLoopUnswitching14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   31:  StringRef getDescription() const final {
   116161:   32:    return "Tests affine loop unswitching / if/else hoisting";
        -:   33:  }
   116705:   34:  TestAffineLoopUnswitching() = default;
call    0 returned 100%
    #####:   35:  TestAffineLoopUnswitching(const TestAffineLoopUnswitching &pass) = default;
call    0 never executed
        -:   36:
        -:   37:  void runOnOperation() override;
        -:   38:
        -:   39:  /// The maximum number of iterations to run this for.
        -:   40:  constexpr static unsigned kMaxIterations = 5;
        -:   41:};
        -:   42:
        -:   43:} // namespace
        -:   44:
function _ZN12_GLOBAL__N_125TestAffineLoopUnswitching14runOnOperationEv called 443 returned 100% blocks executed 78%
      443:   45:void TestAffineLoopUnswitching::runOnOperation() {
        -:   46:  // Each hoisting invalidates a lot of IR around. Just stop the walk after the
        -:   47:  // first if/else hoisting, and repeat until no more hoisting can be done, or
        -:   48:  // the maximum number of iterations have been run.
      443:   49:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      443:   50:  unsigned i = 0;
     2215:   51:  do {
    13210:   52:    auto walkFn = [](AffineIfOp op) {
    10995:   53:      return succeeded(hoistAffineIfOp(op)) ? WalkResult::interrupt()
call    0 returned 100%
    10995:   54:                                            : WalkResult::advance();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   55:    };
     2215:   56:    if (op->walk(walkFn).wasInterrupted())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   57:      break;
     2215:   58:  } while (++i < kMaxIterations);
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      443:   59:}
        -:   60:
        -:   61:namespace mlir {
function _ZN4mlir37registerTestAffineLoopUnswitchingPassEv called 116161 returned 100% blocks executed 100%
   116161:   62:void registerTestAffineLoopUnswitchingPass() {
   116161:   63:  PassRegistration<TestAffineLoopUnswitching>();
call    0 returned 100%
   116161:   64:}
        -:   65:} // namespace mlir
