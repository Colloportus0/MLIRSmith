        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Conversion/LLVMCommon/Pattern.h
        -:    0:Graph:../tools/mlir/lib/Dialect/X86Vector/Transforms/CMakeFiles/obj.MLIRX86VectorTransforms.dir/LegalizeForLLVMExport.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/X86Vector/Transforms/CMakeFiles/obj.MLIRX86VectorTransforms.dir/LegalizeForLLVMExport.cpp.gcda
        -:    0:Runs:116171
        -:    1://===- Pattern.h - Pattern for conversion to the LLVM dialect ---*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_CONVERSION_LLVMCOMMON_PATTERN_H
        -:   10:#define MLIR_CONVERSION_LLVMCOMMON_PATTERN_H
        -:   11:
        -:   12:#include "mlir/Conversion/LLVMCommon/MemRefBuilder.h"
        -:   13:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   14:#include "mlir/Transforms/DialectConversion.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:class CallOpInterface;
        -:   18:
        -:   19:namespace LLVM {
        -:   20:namespace detail {
        -:   21:/// Replaces the given operation "op" with a new operation of type "targetOp"
        -:   22:/// and given operands.
        -:   23:LogicalResult oneToOneRewrite(Operation *op, StringRef targetOp,
        -:   24:                              ValueRange operands,
        -:   25:                              ArrayRef<NamedAttribute> targetAttrs,
        -:   26:                              LLVMTypeConverter &typeConverter,
        -:   27:                              ConversionPatternRewriter &rewriter);
        -:   28:
        -:   29:} // namespace detail
        -:   30:} // namespace LLVM
        -:   31:
        -:   32:/// Base class for operation conversions targeting the LLVM IR dialect. It
        -:   33:/// provides the conversion patterns with access to the LLVMTypeConverter and
        -:   34:/// the LowerToLLVMOptions. The class captures the LLVMTypeConverter and the
        -:   35:/// LowerToLLVMOptions by reference meaning the references have to remain alive
        -:   36:/// during the entire pattern lifetime.
        -:   37:class ConvertToLLVMPattern : public ConversionPattern {
        -:   38:public:
        -:   39:  ConvertToLLVMPattern(StringRef rootOpName, MLIRContext *context,
        -:   40:                       LLVMTypeConverter &typeConverter,
        -:   41:                       PatternBenefit benefit = 1);
        -:   42:
        -:   43:protected:
        -:   44:  /// Returns the LLVM dialect.
        -:   45:  LLVM::LLVMDialect &getDialect() const;
        -:   46:
        -:   47:  LLVMTypeConverter *getTypeConverter() const;
        -:   48:
        -:   49:  /// Gets the MLIR type wrapping the LLVM integer type whose bit width is
        -:   50:  /// defined by the used type converter.
        -:   51:  Type getIndexType() const;
        -:   52:
        -:   53:  /// Gets the MLIR type wrapping the LLVM integer type whose bit width
        -:   54:  /// corresponds to that of a LLVM pointer type.
        -:   55:  Type getIntPtrType(unsigned addressSpace = 0) const;
        -:   56:
        -:   57:  /// Gets the MLIR type wrapping the LLVM void type.
        -:   58:  Type getVoidType() const;
        -:   59:
        -:   60:  /// Get the MLIR type wrapping the LLVM i8* type.
        -:   61:  Type getVoidPtrType() const;
        -:   62:
        -:   63:  /// Create a constant Op producing a value of `resultType` from an index-typed
        -:   64:  /// integer attribute.
        -:   65:  static Value createIndexAttrConstant(OpBuilder &builder, Location loc,
        -:   66:                                       Type resultType, int64_t value);
        -:   67:
        -:   68:  /// Create an LLVM dialect operation defining the given index constant.
        -:   69:  Value createIndexConstant(ConversionPatternRewriter &builder, Location loc,
        -:   70:                            uint64_t value) const;
        -:   71:
        -:   72:  // This is a strided getElementPtr variant that linearizes subscripts as:
        -:   73:  //   `base_offset + index_0 * stride_0 + ... + index_n * stride_n`.
        -:   74:  Value getStridedElementPtr(Location loc, MemRefType type, Value memRefDesc,
        -:   75:                             ValueRange indices,
        -:   76:                             ConversionPatternRewriter &rewriter) const;
        -:   77:
        -:   78:  /// Returns if the given memref has identity maps and the element type is
        -:   79:  /// convertible to LLVM.
        -:   80:  bool isConvertibleAndHasIdentityMaps(MemRefType type) const;
        -:   81:
        -:   82:  /// Returns the type of a pointer to an element of the memref.
        -:   83:  Type getElementPtrType(MemRefType type) const;
        -:   84:
        -:   85:  /// Computes sizes, strides and buffer size in bytes of `memRefType` with
        -:   86:  /// identity layout. Emits constant ops for the static sizes of `memRefType`,
        -:   87:  /// and uses `dynamicSizes` for the others. Emits instructions to compute
        -:   88:  /// strides and buffer size from these sizes.
        -:   89:  ///
        -:   90:  /// For example, memref<4x?xf32> emits:
        -:   91:  /// `sizes[0]`   = llvm.mlir.constant(4 : index) : i64
        -:   92:  /// `sizes[1]`   = `dynamicSizes[0]`
        -:   93:  /// `strides[1]` = llvm.mlir.constant(1 : index) : i64
        -:   94:  /// `strides[0]` = `sizes[0]`
        -:   95:  /// %size        = llvm.mul `sizes[0]`, `sizes[1]` : i64
        -:   96:  /// %nullptr     = llvm.mlir.null : !llvm.ptr<f32>
        -:   97:  /// %gep         = llvm.getelementptr %nullptr[%size]
        -:   98:  ///                  : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
        -:   99:  /// `sizeBytes`  = llvm.ptrtoint %gep : !llvm.ptr<f32> to i64
        -:  100:  void getMemRefDescriptorSizes(Location loc, MemRefType memRefType,
        -:  101:                                ValueRange dynamicSizes,
        -:  102:                                ConversionPatternRewriter &rewriter,
        -:  103:                                SmallVectorImpl<Value> &sizes,
        -:  104:                                SmallVectorImpl<Value> &strides,
        -:  105:                                Value &sizeBytes) const;
        -:  106:
        -:  107:  /// Computes the size of type in bytes.
        -:  108:  Value getSizeInBytes(Location loc, Type type,
        -:  109:                       ConversionPatternRewriter &rewriter) const;
        -:  110:
        -:  111:  /// Computes total number of elements for the given shape.
        -:  112:  Value getNumElements(Location loc, ArrayRef<Value> shape,
        -:  113:                       ConversionPatternRewriter &rewriter) const;
        -:  114:
        -:  115:  /// Creates and populates a canonical memref descriptor struct.
        -:  116:  MemRefDescriptor
        -:  117:  createMemRefDescriptor(Location loc, MemRefType memRefType,
        -:  118:                         Value allocatedPtr, Value alignedPtr,
        -:  119:                         ArrayRef<Value> sizes, ArrayRef<Value> strides,
        -:  120:                         ConversionPatternRewriter &rewriter) const;
        -:  121:
        -:  122:  /// Copies the memory descriptor for any operands that were unranked
        -:  123:  /// descriptors originally to heap-allocated memory (if toDynamic is true) or
        -:  124:  /// to stack-allocated memory (otherwise). Also frees the previously used
        -:  125:  /// memory (that is assumed to be heap-allocated) if toDynamic is false.
        -:  126:  LogicalResult copyUnrankedDescriptors(OpBuilder &builder, Location loc,
        -:  127:                                        TypeRange origTypes,
        -:  128:                                        SmallVectorImpl<Value> &operands,
        -:  129:                                        bool toDynamic) const;
        -:  130:};
        -:  131:
        -:  132:/// Utility class for operation conversions targeting the LLVM dialect that
        -:  133:/// match exactly one source operation.
        -:  134:template <typename SourceOp>
        -:  135:class ConvertOpToLLVMPattern : public ConvertToLLVMPattern {
        -:  136:public:
        -:  137:  using OpAdaptor = typename SourceOp::Adaptor;
        -:  138:
    #####:  139:  explicit ConvertOpToLLVMPattern(LLVMTypeConverter &typeConverter,
        -:  140:                                  PatternBenefit benefit = 1)
    #####:  141:      : ConvertToLLVMPattern(SourceOp::getOperationName(),
    #####:  142:                             &typeConverter.getContext(), typeConverter,
    #####:  143:                             benefit) {}
------------------
_ZN4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEEC2ERNS_17LLVMTypeConverterENS_14PatternBenefitE:
function _ZN4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEEC2ERNS_17LLVMTypeConverterENS_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  139:  explicit ConvertOpToLLVMPattern(LLVMTypeConverter &typeConverter,
        -:  140:                                  PatternBenefit benefit = 1)
    #####:  141:      : ConvertToLLVMPattern(SourceOp::getOperationName(),
    #####:  142:                             &typeConverter.getContext(), typeConverter,
    #####:  143:                             benefit) {}
call    0 never executed
call    1 never executed
------------------
_ZN4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEEC2ERNS_17LLVMTypeConverterENS_14PatternBenefitE:
function _ZN4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEEC2ERNS_17LLVMTypeConverterENS_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  139:  explicit ConvertOpToLLVMPattern(LLVMTypeConverter &typeConverter,
        -:  140:                                  PatternBenefit benefit = 1)
    #####:  141:      : ConvertToLLVMPattern(SourceOp::getOperationName(),
    #####:  142:                             &typeConverter.getContext(), typeConverter,
    #####:  143:                             benefit) {}
call    0 never executed
call    1 never executed
------------------
_ZN4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEEC2ERNS_17LLVMTypeConverterENS_14PatternBenefitE:
function _ZN4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEEC2ERNS_17LLVMTypeConverterENS_14PatternBenefitE called 0 returned 0% blocks executed 0%
    #####:  139:  explicit ConvertOpToLLVMPattern(LLVMTypeConverter &typeConverter,
        -:  140:                                  PatternBenefit benefit = 1)
    #####:  141:      : ConvertToLLVMPattern(SourceOp::getOperationName(),
    #####:  142:                             &typeConverter.getContext(), typeConverter,
    #####:  143:                             benefit) {}
call    0 never executed
call    1 never executed
------------------
        -:  144:
        -:  145:  /// Wrappers around the RewritePattern methods that pass the derived op type.
    #####:  146:  void rewrite(Operation *op, ArrayRef<Value> operands,
        -:  147:               ConversionPatternRewriter &rewriter) const final {
    #####:  148:    rewrite(cast<SourceOp>(op), OpAdaptor(operands, op->getAttrDictionary()),
        -:  149:            rewriter);
    #####:  150:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE7rewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE7rewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  146:  void rewrite(Operation *op, ArrayRef<Value> operands,
        -:  147:               ConversionPatternRewriter &rewriter) const final {
    #####:  148:    rewrite(cast<SourceOp>(op), OpAdaptor(operands, op->getAttrDictionary()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  149:            rewriter);
    #####:  150:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE7rewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE7rewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  146:  void rewrite(Operation *op, ArrayRef<Value> operands,
        -:  147:               ConversionPatternRewriter &rewriter) const final {
    #####:  148:    rewrite(cast<SourceOp>(op), OpAdaptor(operands, op->getAttrDictionary()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  149:            rewriter);
    #####:  150:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE7rewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE7rewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  146:  void rewrite(Operation *op, ArrayRef<Value> operands,
        -:  147:               ConversionPatternRewriter &rewriter) const final {
    #####:  148:    rewrite(cast<SourceOp>(op), OpAdaptor(operands, op->getAttrDictionary()),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  149:            rewriter);
    #####:  150:  }
------------------
    #####:  151:  LogicalResult match(Operation *op) const final {
    #####:  152:    return match(cast<SourceOp>(op));
        -:  153:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE5matchEPNS_9OperationE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE5matchEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  151:  LogicalResult match(Operation *op) const final {
    #####:  152:    return match(cast<SourceOp>(op));
call    0 never executed
call    1 never executed
        -:  153:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE5matchEPNS_9OperationE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE5matchEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  151:  LogicalResult match(Operation *op) const final {
    #####:  152:    return match(cast<SourceOp>(op));
call    0 never executed
call    1 never executed
        -:  153:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE5matchEPNS_9OperationE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE5matchEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  151:  LogicalResult match(Operation *op) const final {
    #####:  152:    return match(cast<SourceOp>(op));
call    0 never executed
call    1 never executed
        -:  153:  }
------------------
        -:  154:  LogicalResult
    #####:  155:  matchAndRewrite(Operation *op, ArrayRef<Value> operands,
        -:  156:                  ConversionPatternRewriter &rewriter) const final {
        -:  157:    return matchAndRewrite(cast<SourceOp>(op),
        -:  158:                           OpAdaptor(operands, op->getAttrDictionary()),
    #####:  159:                           rewriter);
        -:  160:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  155:  matchAndRewrite(Operation *op, ArrayRef<Value> operands,
        -:  156:                  ConversionPatternRewriter &rewriter) const final {
        -:  157:    return matchAndRewrite(cast<SourceOp>(op),
        -:  158:                           OpAdaptor(operands, op->getAttrDictionary()),
    #####:  159:                           rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  160:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  155:  matchAndRewrite(Operation *op, ArrayRef<Value> operands,
        -:  156:                  ConversionPatternRewriter &rewriter) const final {
        -:  157:    return matchAndRewrite(cast<SourceOp>(op),
        -:  158:                           OpAdaptor(operands, op->getAttrDictionary()),
    #####:  159:                           rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  160:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  155:  matchAndRewrite(Operation *op, ArrayRef<Value> operands,
        -:  156:                  ConversionPatternRewriter &rewriter) const final {
        -:  157:    return matchAndRewrite(cast<SourceOp>(op),
        -:  158:                           OpAdaptor(operands, op->getAttrDictionary()),
    #####:  159:                           rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  160:  }
------------------
        -:  161:
        -:  162:  /// Rewrite and Match methods that operate on the SourceOp type. These must be
        -:  163:  /// overridden by the derived pattern class.
    #####:  164:  virtual LogicalResult match(SourceOp op) const {
    #####:  165:    llvm_unreachable("must override match or matchAndRewrite");
        -:  166:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE5matchES2_:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE5matchES2_ called 0 returned 0% blocks executed 0%
    #####:  164:  virtual LogicalResult match(SourceOp op) const {
    #####:  165:    llvm_unreachable("must override match or matchAndRewrite");
        -:  166:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE5matchES2_:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE5matchES2_ called 0 returned 0% blocks executed 0%
    #####:  164:  virtual LogicalResult match(SourceOp op) const {
    #####:  165:    llvm_unreachable("must override match or matchAndRewrite");
        -:  166:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE5matchES2_:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE5matchES2_ called 0 returned 0% blocks executed 0%
    #####:  164:  virtual LogicalResult match(SourceOp op) const {
    #####:  165:    llvm_unreachable("must override match or matchAndRewrite");
        -:  166:  }
------------------
    #####:  167:  virtual void rewrite(SourceOp op, OpAdaptor adaptor,
        -:  168:                       ConversionPatternRewriter &rewriter) const {
    #####:  169:    llvm_unreachable("must override rewrite or matchAndRewrite");
        -:  170:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE7rewriteES2_NS1_21MaskCompressOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector14MaskCompressOpEE7rewriteES2_NS1_21MaskCompressOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  167:  virtual void rewrite(SourceOp op, OpAdaptor adaptor,
        -:  168:                       ConversionPatternRewriter &rewriter) const {
    #####:  169:    llvm_unreachable("must override rewrite or matchAndRewrite");
        -:  170:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE7rewriteES2_NS1_14RsqrtOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector7RsqrtOpEE7rewriteES2_NS1_14RsqrtOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  167:  virtual void rewrite(SourceOp op, OpAdaptor adaptor,
        -:  168:                       ConversionPatternRewriter &rewriter) const {
    #####:  169:    llvm_unreachable("must override rewrite or matchAndRewrite");
        -:  170:  }
------------------
_ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE7rewriteES2_NS1_12DotOpAdaptorERNS_25ConversionPatternRewriterE:
function _ZNK4mlir22ConvertOpToLLVMPatternINS_9x86vector5DotOpEE7rewriteES2_NS1_12DotOpAdaptorERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  167:  virtual void rewrite(SourceOp op, OpAdaptor adaptor,
        -:  168:                       ConversionPatternRewriter &rewriter) const {
    #####:  169:    llvm_unreachable("must override rewrite or matchAndRewrite");
        -:  170:  }
------------------
        -:  171:  virtual LogicalResult
    #####:  172:  matchAndRewrite(SourceOp op, OpAdaptor adaptor,
        -:  173:                  ConversionPatternRewriter &rewriter) const {
    #####:  174:    if (failed(match(op)))
    #####:  175:      return failure();
    #####:  176:    rewrite(op, adaptor, rewriter);
    #####:  177:    return success();
        -:  178:  }
        -:  179:
        -:  180:private:
        -:  181:  using ConvertToLLVMPattern::match;
        -:  182:  using ConvertToLLVMPattern::matchAndRewrite;
        -:  183:};
        -:  184:
        -:  185:/// Generic implementation of one-to-one conversion from "SourceOp" to
        -:  186:/// "TargetOp" where the latter belongs to the LLVM dialect or an equivalent.
        -:  187:/// Upholds a convention that multi-result operations get converted into an
        -:  188:/// operation returning the LLVM IR structure type, in which case individual
        -:  189:/// values must be extracted from using LLVM::ExtractValueOp before being used.
        -:  190:template <typename SourceOp, typename TargetOp>
        -:  191:class OneToOneConvertToLLVMPattern : public ConvertOpToLLVMPattern<SourceOp> {
        -:  192:public:
        -:  193:  using ConvertOpToLLVMPattern<SourceOp>::ConvertOpToLLVMPattern;
        -:  194:  using Super = OneToOneConvertToLLVMPattern<SourceOp, TargetOp>;
        -:  195:
        -:  196:  /// Converts the type of the result to an LLVM type, pass operands as is,
        -:  197:  /// preserve attributes.
        -:  198:  LogicalResult
        -:  199:  matchAndRewrite(SourceOp op, typename SourceOp::Adaptor adaptor,
        -:  200:                  ConversionPatternRewriter &rewriter) const override {
        -:  201:    return LLVM::detail::oneToOneRewrite(op, TargetOp::getOperationName(),
        -:  202:                                         adaptor.getOperands(), op->getAttrs(),
        -:  203:                                         *this->getTypeConverter(), rewriter);
        -:  204:  }
        -:  205:};
        -:  206:
        -:  207:} // namespace mlir
        -:  208:
        -:  209:#endif // MLIR_CONVERSION_LLVMCOMMON_PATTERN_H
