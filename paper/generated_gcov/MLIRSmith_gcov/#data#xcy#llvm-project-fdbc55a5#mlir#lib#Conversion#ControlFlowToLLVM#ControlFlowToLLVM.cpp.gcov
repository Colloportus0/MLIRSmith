        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/ControlFlowToLLVM/ControlFlowToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ControlFlowToLLVM/CMakeFiles/obj.MLIRControlFlowToLLVM.dir/ControlFlowToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ControlFlowToLLVM/CMakeFiles/obj.MLIRControlFlowToLLVM.dir/ControlFlowToLLVM.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ControlFlowToLLVM.cpp - ControlFlow to LLVM dialect conversion -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert MLIR standard and builtin dialects
        -:   10:// into the LLVM IR dialect.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/ControlFlowToLLVM/ControlFlowToLLVM.h"
        -:   15:
        -:   16:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   17:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   18:#include "mlir/Conversion/LLVMCommon/VectorPattern.h"
        -:   19:#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
        -:   20:#include "mlir/Dialect/LLVMIR/FunctionCallUtils.h"
        -:   21:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   22:#include "mlir/IR/BuiltinOps.h"
        -:   23:#include "mlir/IR/PatternMatch.h"
        -:   24:#include "mlir/Pass/Pass.h"
        -:   25:#include "mlir/Transforms/DialectConversion.h"
        -:   26:#include "llvm/ADT/StringRef.h"
        -:   27:#include <functional>
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_CONVERTCONTROLFLOWTOLLVM
        -:   31:#include "mlir/Conversion/Passes.h.inc"
        -:   32:} // namespace mlir
        -:   33:
        -:   34:using namespace mlir;
        -:   35:
        -:   36:#define PASS_NAME "convert-cf-to-llvm"
        -:   37:
        -:   38:namespace {
        -:   39:/// Lower `cf.assert`. The default lowering calls the `abort` function if the
        -:   40:/// assertion is violated and has no effect otherwise. The failure message is
        -:   41:/// ignored by the default lowering but should be propagated by any custom
        -:   42:/// lowering.
        -:   43:struct AssertOpLowering : public ConvertOpToLLVMPattern<cf::AssertOp> {
     1681:   44:  using ConvertOpToLLVMPattern<cf::AssertOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   45:
        -:   46:  LogicalResult
function _ZNK12_GLOBAL__N_116AssertOpLowering15matchAndRewriteEN4mlir2cf8AssertOpENS2_15AssertOpAdaptorERNS1_25ConversionPatternRewriterE called 2 returned 100% blocks executed 95%
        2:   47:  matchAndRewrite(cf::AssertOp op, OpAdaptor adaptor,
        -:   48:                  ConversionPatternRewriter &rewriter) const override {
        2:   49:    auto loc = op.getLoc();
call    0 returned 100%
        -:   50:
        -:   51:    // Insert the `abort` declaration if necessary.
        2:   52:    auto module = op->getParentOfType<ModuleOp>();
call    0 returned 100%
        2:   53:    auto abortFunc = module.lookupSymbol<LLVM::LLVMFuncOp>("abort");
call    0 returned 100%
        2:   54:    if (!abortFunc) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   55:      OpBuilder::InsertionGuard guard(rewriter);
call    0 returned 100%
        1:   56:      rewriter.setInsertionPointToStart(module.getBody());
call    0 returned 100%
call    1 returned 100%
        1:   57:      auto abortFuncTy = LLVM::LLVMFunctionType::get(getVoidType(), {});
call    0 returned 100%
call    1 returned 100%
        1:   58:      abortFunc = rewriter.create<LLVM::LLVMFuncOp>(rewriter.getUnknownLoc(),
        1:   59:                                                    "abort", abortFuncTy);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   60:    }
        -:   61:
        -:   62:    // Split block at `assert` operation.
        2:   63:    Block *opBlock = rewriter.getInsertionBlock();
call    0 returned 100%
        2:   64:    auto opPosition = rewriter.getInsertionPoint();
call    0 returned 100%
        2:   65:    Block *continuationBlock = rewriter.splitBlock(opBlock, opPosition);
call    0 returned 100%
        -:   66:
        -:   67:    // Generate IR to call `abort`.
        2:   68:    Block *failureBlock = rewriter.createBlock(opBlock->getParent());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:   69:    rewriter.create<LLVM::CallOp>(loc, abortFunc, llvm::None);
call    0 returned 100%
        2:   70:    rewriter.create<LLVM::UnreachableOp>(loc);
call    0 returned 100%
        -:   71:
        -:   72:    // Generate assertion test.
        2:   73:    rewriter.setInsertionPointToEnd(opBlock);
call    0 returned 100%
        2:   74:    rewriter.replaceOpWithNewOp<LLVM::CondBrOp>(
        2:   75:        op, adaptor.getArg(), continuationBlock, failureBlock);
call    0 returned 100%
call    1 returned 100%
        -:   76:
        2:   77:    return success();
        -:   78:  }
        -:   79:};
        -:   80:
        -:   81:/// The cf->LLVM lowerings for branching ops require that the blocks they jump
        -:   82:/// to first have updated types which should be handled by a pattern operating
        -:   83:/// on the parent op.
function _ZN12_GLOBAL__N_1L20verifyMatchingValuesERN4mlir25ConversionPatternRewriterENS0_10ValueRangeES3_NS0_8LocationEN4llvm9StringRefE called 4 returned 100% blocks executed 20%
        4:   84:static LogicalResult verifyMatchingValues(ConversionPatternRewriter &rewriter,
        -:   85:                                          ValueRange operands,
        -:   86:                                          ValueRange blockArgs, Location loc,
        -:   87:                                          llvm::StringRef messagePrefix) {
       4*:   88:  for (const auto &idxAndTypes :
       4*:   89:       llvm::enumerate(llvm::zip(blockArgs, operands))) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:   90:    int64_t i = idxAndTypes.index();
call    0 never executed
    #####:   91:    Value argValue =
call    0 never executed
    #####:   92:        rewriter.getRemappedValue(std::get<0>(idxAndTypes.value()));
call    0 never executed
    #####:   93:    Type operandType = std::get<1>(idxAndTypes.value()).getType();
call    0 never executed
call    1 never executed
        -:   94:    // In the case of an invalid jump, the block argument will have been
        -:   95:    // remapped to an UnrealizedConversionCast. In the case of a valid jump,
        -:   96:    // there might still be a no-op conversion cast with both types being equal.
        -:   97:    // Consider both of these details to see if the jump would be invalid.
    #####:   98:    if (auto op = dyn_cast_or_null<UnrealizedConversionCastOp>(
branch  0 never executed
branch  1 never executed
    #####:   99:            argValue.getDefiningOp())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  100:      if (op.getOperandTypes().front() != operandType) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
function _ZZN12_GLOBAL__N_1L20verifyMatchingValuesERN4mlir25ConversionPatternRewriterENS0_10ValueRangeES3_NS0_8LocationEN4llvm9StringRefEENKUlRNS0_10DiagnosticEE_clES8_ called 0 returned 0% blocks executed 0%
    #####:  101:        return rewriter.notifyMatchFailure(loc, [&](Diagnostic &diag) {
    #####:  102:          diag << messagePrefix;
call    0 never executed
call    1 never executed
    #####:  103:          diag << "mismatched types from operand # " << i << " ";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  104:          diag << operandType;
call    0 never executed
    #####:  105:          diag << " not compatible with destination block argument type ";
call    0 never executed
    #####:  106:          diag << op.getOperandTypes().front();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  107:          diag << " which should be converted with the parent op.";
call    0 never executed
    #####:  108:        });
call    0 never executed
        -:  109:      }
        -:  110:    }
        -:  111:  }
        4:  112:  return success();
        -:  113:}
        -:  114:
        -:  115:/// Ensure that all block types were updated and then create an LLVM::BrOp
        -:  116:struct BranchOpLowering : public ConvertOpToLLVMPattern<cf::BranchOp> {
     1681:  117:  using ConvertOpToLLVMPattern<cf::BranchOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  118:
        -:  119:  LogicalResult
function _ZNK12_GLOBAL__N_116BranchOpLowering15matchAndRewriteEN4mlir2cf8BranchOpENS2_15BranchOpAdaptorERNS1_25ConversionPatternRewriterE called 4 returned 100% blocks executed 92%
        4:  120:  matchAndRewrite(cf::BranchOp op, typename cf::BranchOp::Adaptor adaptor,
        -:  121:                  ConversionPatternRewriter &rewriter) const override {
        8:  122:    if (failed(verifyMatchingValues(rewriter, adaptor.getDestOperands(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        4:  123:                                    op.getSuccessor()->getArguments(),
call    0 returned 100%
        -:  124:                                    op.getLoc(),
        -:  125:                                    /*messagePrefix=*/"")))
    #####:  126:      return failure();
        -:  127:
        4:  128:    rewriter.replaceOpWithNewOp<LLVM::BrOp>(
        4:  129:        op, adaptor.getOperands(), op->getSuccessors(), op->getAttrs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4:  130:    return success();
        -:  131:  }
        -:  132:};
        -:  133:
        -:  134:/// Ensure that all block types were updated and then create an LLVM::CondBrOp
        -:  135:struct CondBranchOpLowering : public ConvertOpToLLVMPattern<cf::CondBranchOp> {
     1681:  136:  using ConvertOpToLLVMPattern<cf::CondBranchOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  137:
        -:  138:  LogicalResult
function _ZNK12_GLOBAL__N_120CondBranchOpLowering15matchAndRewriteEN4mlir2cf12CondBranchOpENS2_19CondBranchOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  139:  matchAndRewrite(cf::CondBranchOp op,
        -:  140:                  typename cf::CondBranchOp::Adaptor adaptor,
        -:  141:                  ConversionPatternRewriter &rewriter) const override {
    #####:  142:    if (failed(verifyMatchingValues(rewriter, adaptor.getFalseDestOperands(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  143:                                    op.getFalseDest()->getArguments(),
call    0 never executed
call    1 never executed
        -:  144:                                    op.getLoc(), "in false case branch ")))
    #####:  145:      return failure();
    #####:  146:    if (failed(verifyMatchingValues(rewriter, adaptor.getTrueDestOperands(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  147:                                    op.getTrueDest()->getArguments(),
call    0 never executed
call    1 never executed
        -:  148:                                    op.getLoc(), "in true case branch ")))
    #####:  149:      return failure();
        -:  150:
    #####:  151:    rewriter.replaceOpWithNewOp<LLVM::CondBrOp>(
    #####:  152:        op, adaptor.getOperands(), op->getSuccessors(), op->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  153:    return success();
        -:  154:  }
        -:  155:};
        -:  156:
        -:  157:/// Ensure that all block types were updated and then create an LLVM::SwitchOp
        -:  158:struct SwitchOpLowering : public ConvertOpToLLVMPattern<cf::SwitchOp> {
     1681:  159:  using ConvertOpToLLVMPattern<cf::SwitchOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  160:
        -:  161:  LogicalResult
function _ZNK12_GLOBAL__N_116SwitchOpLowering15matchAndRewriteEN4mlir2cf8SwitchOpENS2_15SwitchOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  162:  matchAndRewrite(cf::SwitchOp op, typename cf::SwitchOp::Adaptor adaptor,
        -:  163:                  ConversionPatternRewriter &rewriter) const override {
    #####:  164:    if (failed(verifyMatchingValues(rewriter, adaptor.getDefaultOperands(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  165:                                    op.getDefaultDestination()->getArguments(),
call    0 never executed
call    1 never executed
        -:  166:                                    op.getLoc(), "in switch default case ")))
    #####:  167:      return failure();
        -:  168:
    #####:  169:    for (const auto &i : llvm::enumerate(
    #####:  170:             llvm::zip(adaptor.getCaseOperands(), op.getCaseDestinations()))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####:  171:      if (failed(verifyMatchingValues(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  172:              rewriter, std::get<0>(i.value()),
call    0 never executed
    #####:  173:              std::get<1>(i.value())->getArguments(), op.getLoc(),
call    0 never executed
    #####:  174:              "in switch case " + std::to_string(i.index()) + " "))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  175:        return failure();
branch  0 never executed
branch  1 never executed
        -:  176:      }
        -:  177:    }
        -:  178:
    #####:  179:    rewriter.replaceOpWithNewOp<LLVM::SwitchOp>(
    #####:  180:        op, adaptor.getOperands(), op->getSuccessors(), op->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  181:    return success();
        -:  182:  }
        -:  183:};
        -:  184:
        -:  185:} // namespace
        -:  186:
function _ZN4mlir2cf43populateControlFlowToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 1242 returned 100% blocks executed 100%
     1681:  187:void mlir::cf::populateControlFlowToLLVMConversionPatterns(
        -:  188:    LLVMTypeConverter &converter, RewritePatternSet &patterns) {
        -:  189:  // clang-format off
     1681:  190:  patterns.add<
        -:  191:      AssertOpLowering,
        -:  192:      BranchOpLowering,
        -:  193:      CondBranchOpLowering,
     1242:  194:      SwitchOpLowering>(converter);
call    0 returned 100%
        -:  195:  // clang-format on
     1242:  196:}
        -:  197:
        -:  198://===----------------------------------------------------------------------===//
        -:  199:// Pass Definition
        -:  200://===----------------------------------------------------------------------===//
        -:  201:
        -:  202:namespace {
        -:  203:/// A pass converting MLIR operations into the LLVM IR dialect.
    #####:  204:struct ConvertControlFlowToLLVM
call    0 never executed
        -:  205:    : public impl::ConvertControlFlowToLLVMBase<ConvertControlFlowToLLVM> {
   116699:  206:  ConvertControlFlowToLLVM() = default;
call    0 returned 100%
        -:  207:
        -:  208:  /// Run the dialect converter on the module.
function _ZN12_GLOBAL__N_124ConvertControlFlowToLLVM14runOnOperationEv called 439 returned 100% blocks executed 91%
      439:  209:  void runOnOperation() override {
      439:  210:    LLVMConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
      878:  211:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  212:
      878:  213:    LowerToLLVMOptions options(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      439:  214:    if (indexBitwidth != kDeriveIndexBitwidthFromDataLayout)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  215:      options.overrideIndexBitwidth(indexBitwidth);
        -:  216:
      878:  217:    LLVMTypeConverter converter(&getContext(), options);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      439:  218:    mlir::cf::populateControlFlowToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
        -:  219:
      439:  220:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      439:  221:                                      std::move(patterns))))
call    0 returned 100%
    #####:  222:      signalPassFailure();
call    0 never executed
      439:  223:  }
        -:  224:};
        -:  225:} // namespace
        -:  226:
function _ZN4mlir2cf34createConvertControlFlowToLLVMPassEv called 116699 returned 100% blocks executed 100%
   116699:  227:std::unique_ptr<Pass> mlir::cf::createConvertControlFlowToLLVMPass() {
   116699:  228:  return std::make_unique<ConvertControlFlowToLLVM>();
call    0 returned 100%
        -:  229:}
