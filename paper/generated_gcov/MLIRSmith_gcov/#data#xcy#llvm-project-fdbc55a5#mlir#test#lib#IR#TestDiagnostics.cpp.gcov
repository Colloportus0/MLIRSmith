        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/IR/TestDiagnostics.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestDiagnostics.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestDiagnostics.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestDiagnostics.cpp - Test Diagnostic Utilities --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains test passes for constructing and resolving dominance
        -:   10:// information.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/IR/SymbolTable.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:#include "llvm/Support/SourceMgr.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
        -:   20:namespace {
        -:   21:struct TestDiagnosticFilterPass
        -:   22:    : public PassWrapper<TestDiagnosticFilterPass,
        -:   23:                         InterfacePass<SymbolOpInterface>> {
function _ZN12_GLOBAL__N_124TestDiagnosticFilterPass13resolveTypeIDEv called 116163 returned 100% blocks executed 100%
   116163:   24:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestDiagnosticFilterPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   25:
function _ZNK12_GLOBAL__N_124TestDiagnosticFilterPass11getArgumentEv called 116163 returned 100% blocks executed 100%
   116163:   26:  StringRef getArgument() const final { return "test-diagnostic-filter"; }
function _ZNK12_GLOBAL__N_124TestDiagnosticFilterPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   27:  StringRef getDescription() const final {
   116163:   28:    return "Test diagnostic filtering support.";
        -:   29:  }
function _ZN12_GLOBAL__N_124TestDiagnosticFilterPassC2Ev called 116163 returned 100% blocks executed 100%
   116163:   30:  TestDiagnosticFilterPass() = default;
call    0 returned 100%
call    1 returned 100%
        -:   31:  TestDiagnosticFilterPass(const TestDiagnosticFilterPass &) {}
        -:   32:
function _ZN12_GLOBAL__N_124TestDiagnosticFilterPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   33:  void runOnOperation() override {
    #####:   34:    llvm::errs() << "Test '" << getOperation().getName() << "'\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   35:
        -:   36:    // Build a diagnostic handler that has filtering capabilities.
function _ZZN12_GLOBAL__N_124TestDiagnosticFilterPass14runOnOperationEvENKUlN4mlir8LocationEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   37:    auto filterFn = [&](Location loc) {
        -:   38:      // Ignore non-file locations.
    #####:   39:      FileLineColLoc fileLoc = loc.dyn_cast<FileLineColLoc>();
call    0 never executed
    #####:   40:      if (!fileLoc)
branch  0 never executed
branch  1 never executed
        -:   41:        return true;
        -:   42:
        -:   43:      // Don't show file locations if their name contains a filter.
function _ZZZN12_GLOBAL__N_124TestDiagnosticFilterPass14runOnOperationEvENKUlN4mlir8LocationEE_clES2_ENKUlN4llvm9StringRefEE_clES5_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   44:      return llvm::none_of(filters, [&](StringRef filter) {
call    0 never executed
    #####:   45:        return fileLoc.getFilename().strref().contains(filter);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   46:      });
    #####:   47:    };
    #####:   48:    llvm::SourceMgr sourceMgr;
call    0 never executed
    #####:   49:    SourceMgrDiagnosticHandler handler(sourceMgr, &getContext(), llvm::errs(),
    #####:   50:                                       filterFn);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   51:
        -:   52:    // Emit a diagnostic for every operation with a valid loc.
function _ZZN12_GLOBAL__N_124TestDiagnosticFilterPass14runOnOperationEvENKUlPN4mlir9OperationEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   53:    getOperation()->walk([&](Operation *op) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   54:      if (LocationAttr locAttr = op->getAttrOfType<LocationAttr>("test.loc"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:        emitError(locAttr, "test diagnostic");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   56:    });
    #####:   57:  }
        -:   58:
        -:   59:  ListOption<std::string> filters{
        -:   60:      *this, "filters",
        -:   61:      llvm::cl::desc("Specifies the diagnostic file name filters.")};
        -:   62:};
        -:   63:
        -:   64:} // namespace
        -:   65:
        -:   66:namespace mlir {
        -:   67:namespace test {
function _ZN4mlir4test27registerTestDiagnosticsPassEv called 116163 returned 100% blocks executed 100%
   116163:   68:void registerTestDiagnosticsPass() {
   116163:   69:  PassRegistration<TestDiagnosticFilterPass>{};
call    0 returned 100%
   116163:   70:}
        -:   71:} // namespace test
        -:   72:} // namespace mlir
