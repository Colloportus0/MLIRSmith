        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Analysis/TestMemRefBoundCheck.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMemRefBoundCheck.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMemRefBoundCheck.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestMemRefBoundCheck.cpp - Test out of bound access checks ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to check memref accesses for out of bound
        -:   10:// accesses.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   15:#include "mlir/Dialect/Affine/Analysis/AffineStructures.h"
        -:   16:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   17:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   18:#include "mlir/IR/Builders.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:#include "llvm/ADT/TypeSwitch.h"
        -:   21:#include "llvm/Support/Debug.h"
        -:   22:
        -:   23:#define DEBUG_TYPE "memref-bound-check"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:namespace {
        -:   28:
        -:   29:/// Checks for out of bound memref access subscripts..
  116672*:   30:struct TestMemRefBoundCheck
call    0 never executed
call    1 returned 100%
        -:   31:    : public PassWrapper<TestMemRefBoundCheck, OperationPass<>> {
function _ZN12_GLOBAL__N_120TestMemRefBoundCheck13resolveTypeIDEv called 116672 returned 100% blocks executed 100%
   116672:   32:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMemRefBoundCheck)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   33:
function _ZNK12_GLOBAL__N_120TestMemRefBoundCheck11getArgumentEv called 116177 returned 100% blocks executed 100%
   116177:   34:  StringRef getArgument() const final { return "test-memref-bound-check"; }
function _ZNK12_GLOBAL__N_120TestMemRefBoundCheck14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   35:  StringRef getDescription() const final {
   116161:   36:    return "Check memref access bounds";
        -:   37:  }
        -:   38:  void runOnOperation() override;
        -:   39:};
        -:   40:
        -:   41:} // namespace
        -:   42:
function _ZN12_GLOBAL__N_120TestMemRefBoundCheck14runOnOperationEv called 390 returned 100% blocks executed 75%
      390:   43:void TestMemRefBoundCheck::runOnOperation() {
function _ZZN12_GLOBAL__N_120TestMemRefBoundCheck14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 798475 returned 100% blocks executed 100%
   798865:   44:  getOperation()->walk([](Operation *opInst) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   798475:   45:    TypeSwitch<Operation *>(opInst)
call    0 returned 100%
        -:   46:        .Case<AffineReadOpInterface, AffineWriteOpInterface>(
   798475:   47:            [](auto op) { (void)boundCheckLoadOrStoreOp(op); });
        -:   48:
        -:   49:    // TODO: do this for DMA ops as well.
   798475:   50:  });
      390:   51:}
        -:   52:
        -:   53:namespace mlir {
        -:   54:namespace test {
function _ZN4mlir4test24registerMemRefBoundCheckEv called 116161 returned 100% blocks executed 100%
   116161:   55:void registerMemRefBoundCheck() { PassRegistration<TestMemRefBoundCheck>(); }
call    0 returned 100%
        -:   56:} // namespace test
        -:   57:} // namespace mlir
