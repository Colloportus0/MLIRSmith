        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/IR/OwningOpRef.h
        -:    0:Graph:../tools/mlir/lib/Tools/mlir-opt/CMakeFiles/obj.MLIROptLib.dir/MlirOptMain.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Tools/mlir-opt/CMakeFiles/obj.MLIROptLib.dir/MlirOptMain.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- OwningOpRef.h - MLIR OwningOpRef -------------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file provides a base class for owning op refs.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_IR_OWNINGOPREF_H
        -:   14:#define MLIR_IR_OWNINGOPREF_H
        -:   15:
        -:   16:#include <utility>
        -:   17:
        -:   18:namespace mlir {
        -:   19:class Operation;
        -:   20:
        -:   21:/// This class acts as an owning reference to an op, and will automatically
        -:   22:/// destroy the held op on destruction if the held op is valid.
        -:   23:///
        -:   24:/// Note that OpBuilder and related functionality should be highly preferred
        -:   25:/// instead, and this should only be used in situations where existing solutions
        -:   26:/// are not viable.
        -:   27:template <typename OpTy>
        -:   28:class OwningOpRef {
        -:   29:public:
        -:   30:  /// The underlying operation type stored in this reference.
        -:   31:  using OperationT = OpTy;
        -:   32:
    2977*:   33:  OwningOpRef(std::nullptr_t = nullptr) : op(nullptr) {}
call    0 never executed
     573*:   34:  OwningOpRef(OpTy op) : op(op) {}
branch  0 never executed
branch  1 never executed
    #####:   35:  OwningOpRef(OwningOpRef &&other) : op(other.release()) {}
  188287*:   36:  ~OwningOpRef() {
  188287*:   37:    if (op)
branch  0 never executed
branch  1 never executed
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
   91338*:   38:      op->erase();
call    0 never executed
call    1 returned 100%
   94315*:   39:  }
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        -:   40:
        -:   41:  /// Assign from another op reference.
        -:   42:  OwningOpRef &operator=(OwningOpRef &&other) {
        -:   43:    if (op)
        -:   44:      op->erase();
        -:   45:    op = other.release();
        -:   46:    return *this;
        -:   47:  }
        -:   48:
        -:   49:  /// Allow accessing the internal op.
   258403:   50:  OpTy get() const { return op; }
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
    91595:   51:  OpTy operator*() const { return op; }
call    0 returned 100%
        -:   52:  OpTy *operator->() { return &op; }
    94572:   53:  explicit operator bool() const { return op; }
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:   54:
        -:   55:  /// Downcast to generic operation.
    93972:   56:  operator OwningOpRef<Operation *>() && { return release().getOperation(); }
        -:   57:
        -:   58:  /// Release the referenced op.
   93972*:   59:  OpTy release() {
   93972*:   60:    OpTy released(nullptr);
   93972*:   61:    std::swap(released, op);
        -:   62:    return released;
        -:   63:  }
        -:   64:
        -:   65:private:
        -:   66:  OpTy op;
        -:   67:};
        -:   68:
        -:   69:} // namespace mlir
        -:   70:
        -:   71:#endif // MLIR_IR_OWNINGOPREF_H
