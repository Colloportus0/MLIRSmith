        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Tensor/Utils/Utils.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tensor/Utils/CMakeFiles/obj.MLIRTensorUtils.dir/Utils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tensor/Utils/CMakeFiles/obj.MLIRTensorUtils.dir/Utils.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Utils.cpp - Utilities to support the Tensor dialect ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements utilities for the Tensor dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Tensor/Utils/Utils.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:using namespace mlir::tensor;
        -:   20:
function _ZN4mlir6tensor15createPadHighOpENS_16RankedTensorTypeENS_5ValueES2_bNS_8LocationERNS_9OpBuilderE called 0 returned 0% blocks executed 0%
    #####:   21:PadOp mlir::tensor::createPadHighOp(RankedTensorType type, Value source,
        -:   22:                                    Value pad, bool nofold, Location loc,
        -:   23:                                    OpBuilder &b) {
    #####:   24:  auto zero = b.createOrFold<arith::ConstantIndexOp>(loc, 0);
call    0 never executed
    #####:   25:  SmallVector<OpFoldResult> low(type.getRank(), zero);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   26:  SmallVector<OpFoldResult> high(type.getRank(), zero);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   27:  for (const auto &en : enumerate(type.getShape())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   28:    // Pad only the static dimensions of the result tensor type.
    #####:   29:    if (ShapedType::isDynamic(en.value()))
branch  0 never executed
branch  1 never executed
    #####:   30:      continue;
        -:   31:    // Compute the padding width.
    #####:   32:    AffineExpr d0;
    #####:   33:    bindDims(b.getContext(), d0);
call    0 never executed
    #####:   34:    auto dimOp = b.createOrFold<tensor::DimOp>(loc, source, en.index());
call    0 never executed
    #####:   35:    high[en.index()] =
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:        makeComposedAffineApply(b, loc, en.value() - d0, {dimOp}).getResult();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   37:  }
    #####:   38:  return b.create<PadOp>(loc, type, source, low, high, pad, nofold);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   39:}
        -:   40:
function _ZN4mlir6tensor22createDynamicDimValuesERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   41:SmallVector<Value> mlir::tensor::createDynamicDimValues(OpBuilder &b,
        -:   42:                                                        Location loc,
        -:   43:                                                        Value rankedTensor) {
    #####:   44:  auto tensorTy = rankedTensor.getType().cast<RankedTensorType>();
call    0 never executed
    #####:   45:  SmallVector<Value> dynamicDims;
call    0 never executed
    #####:   46:  for (const auto &en : llvm::enumerate(tensorTy.getShape())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   47:    if (en.value() == ShapedType::kDynamicSize)
branch  0 never executed
branch  1 never executed
    #####:   48:      dynamicDims.push_back(
call    0 never executed
    #####:   49:          b.create<tensor::DimOp>(loc, rankedTensor, en.index()));
call    0 never executed
call    1 never executed
        -:   50:  }
    #####:   51:  return dynamicDims;
        -:   52:}
        -:   53:
        -:   54:SmallVector<OpFoldResult>
function _ZN4mlir6tensor15createDimValuesERNS_9OpBuilderENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   55:mlir::tensor::createDimValues(OpBuilder &b, Location loc, Value rankedTensor) {
    #####:   56:  auto tensorTy = rankedTensor.getType().cast<RankedTensorType>();
call    0 never executed
    #####:   57:  SmallVector<OpFoldResult> dims;
call    0 never executed
    #####:   58:  for (const auto &en : llvm::enumerate(tensorTy.getShape())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   59:    if (ShapedType::isDynamic(en.value())) {
branch  0 never executed
branch  1 never executed
    #####:   60:      dims.push_back(
call    0 never executed
call    1 never executed
    #####:   61:          b.createOrFold<tensor::DimOp>(loc, rankedTensor, en.index()));
call    0 never executed
        -:   62:    } else {
    #####:   63:      dims.push_back(b.getIndexAttr(en.value()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   64:    }
        -:   65:  }
    #####:   66:  return dims;
        -:   67:}
