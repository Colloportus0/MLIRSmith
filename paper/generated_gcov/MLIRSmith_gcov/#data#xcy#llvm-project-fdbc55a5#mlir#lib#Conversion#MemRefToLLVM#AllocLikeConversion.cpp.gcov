        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/MemRefToLLVM/AllocLikeConversion.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/MemRefToLLVM/CMakeFiles/obj.MLIRMemRefToLLVM.dir/AllocLikeConversion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/MemRefToLLVM/CMakeFiles/obj.MLIRMemRefToLLVM.dir/AllocLikeConversion.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- AllocLikeConversion.cpp - LLVM conversion for alloc operations -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/MemRefToLLVM/AllocLikeConversion.h"
        -:   10:#include "mlir/Analysis/DataLayoutAnalysis.h"
        -:   11:#include "mlir/Dialect/LLVMIR/FunctionCallUtils.h"
        -:   12:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:
        -:   16:namespace {
        -:   17:// TODO: Fix the LLVM utilities for looking up functions to take Operation*
        -:   18:// with SymbolTable trait instead of ModuleOp and make similar change here. This
        -:   19:// allows call sites to use getParentWithTrait<OpTrait::SymbolTable> instead
        -:   20:// of getParentOfType<ModuleOp> to pass down the operation.
function _ZN12_GLOBAL__N_120getNotalignedAllocFnEPN4mlir17LLVMTypeConverterENS0_8ModuleOpENS0_4TypeE called 138297 returned 100% blocks executed 75%
   138297:   21:LLVM::LLVMFuncOp getNotalignedAllocFn(LLVMTypeConverter *typeConverter,
        -:   22:                                      ModuleOp module, Type indexType) {
   138297:   23:  bool useGenericFn = typeConverter->getOptions().useGenericFunctions;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   24:
   138297:   25:  if (useGenericFn)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   26:    return LLVM::lookupOrCreateGenericAllocFn(module, indexType);
call    0 never executed
        -:   27:
   138297:   28:  return LLVM::lookupOrCreateMallocFn(module, indexType);
call    0 returned 100%
        -:   29:}
        -:   30:
function _ZN12_GLOBAL__N_117getAlignedAllocFnEPN4mlir17LLVMTypeConverterENS0_8ModuleOpENS0_4TypeE called 0 returned 0% blocks executed 0%
    #####:   31:LLVM::LLVMFuncOp getAlignedAllocFn(LLVMTypeConverter *typeConverter,
        -:   32:                                   ModuleOp module, Type indexType) {
    #####:   33:  bool useGenericFn = typeConverter->getOptions().useGenericFunctions;
branch  0 never executed
branch  1 never executed
        -:   34:
    #####:   35:  if (useGenericFn)
branch  0 never executed
branch  1 never executed
    #####:   36:    return LLVM::lookupOrCreateGenericAlignedAllocFn(module, indexType);
call    0 never executed
        -:   37:
    #####:   38:  return LLVM::lookupOrCreateAlignedAllocFn(module, indexType);
call    0 never executed
        -:   39:}
        -:   40:
        -:   41:} // end namespace
        -:   42:
function _ZN4mlir24AllocationOpLLVMLowering13createAlignedERNS_25ConversionPatternRewriterENS_8LocationENS_5ValueES4_ called 214 returned 100% blocks executed 100%
      214:   43:Value AllocationOpLLVMLowering::createAligned(
        -:   44:    ConversionPatternRewriter &rewriter, Location loc, Value input,
        -:   45:    Value alignment) {
      214:   46:  Value one = createIndexAttrConstant(rewriter, loc, alignment.getType(), 1);
call    0 returned 100%
      214:   47:  Value bump = rewriter.create<LLVM::SubOp>(loc, alignment, one);
call    0 returned 100%
call    1 returned 100%
      214:   48:  Value bumped = rewriter.create<LLVM::AddOp>(loc, input, bump);
call    0 returned 100%
call    1 returned 100%
      214:   49:  Value mod = rewriter.create<LLVM::URemOp>(loc, bumped, alignment);
call    0 returned 100%
call    1 returned 100%
      214:   50:  return rewriter.create<LLVM::SubOp>(loc, bumped, mod);
call    0 returned 100%
        -:   51:}
        -:   52:
function _ZNK4mlir24AllocationOpLLVMLowering27allocateBufferManuallyAlignERNS_25ConversionPatternRewriterENS_8LocationENS_5ValueEPNS_9OperationES4_ called 138297 returned 100% blocks executed 100%
   138297:   53:std::tuple<Value, Value> AllocationOpLLVMLowering::allocateBufferManuallyAlign(
        -:   54:    ConversionPatternRewriter &rewriter, Location loc, Value sizeBytes,
        -:   55:    Operation *op, Value alignment) const {
   138297:   56:  if (alignment) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        -:   57:    // Adjust the allocation size to consider alignment.
      214:   58:    sizeBytes = rewriter.create<LLVM::AddOp>(loc, sizeBytes, alignment);
call    0 returned 100%
        -:   59:  }
        -:   60:
   138297:   61:  MemRefType memRefType = getMemRefResultType(op);
call    0 returned 100%
        -:   62:  // Allocate the underlying buffer.
   138297:   63:  Type elementPtrType = this->getElementPtrType(memRefType);
call    0 returned 100%
   138297:   64:  LLVM::LLVMFuncOp allocFuncOp = getNotalignedAllocFn(
   138297:   65:      getTypeConverter(), op->getParentOfType<ModuleOp>(), getIndexType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
   138297:   66:  auto results = rewriter.create<LLVM::CallOp>(loc, allocFuncOp, sizeBytes);
call    0 returned 100%
   276594:   67:  Value allocatedPtr = rewriter.create<LLVM::BitcastOp>(loc, elementPtrType,
   138297:   68:                                                        results.getResult());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 100%
        -:   69:
   138297:   70:  Value alignedPtr = allocatedPtr;
   138297:   71:  if (alignment) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        -:   72:    // Compute the aligned pointer.
      214:   73:    Value allocatedInt =
      214:   74:        rewriter.create<LLVM::PtrToIntOp>(loc, getIndexType(), allocatedPtr);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      214:   75:    Value alignmentInt = createAligned(rewriter, loc, allocatedInt, alignment);
call    0 returned 100%
      214:   76:    alignedPtr =
      214:   77:        rewriter.create<LLVM::IntToPtrOp>(loc, elementPtrType, alignmentInt);
call    0 returned 100%
        -:   78:  }
        -:   79:
   138297:   80:  return std::make_tuple(allocatedPtr, alignedPtr);
        -:   81:}
        -:   82:
function _ZNK4mlir24AllocationOpLLVMLowering23getMemRefEltSizeInBytesENS_10MemRefTypeEPNS_9OperationEPKNS_10DataLayoutE called 0 returned 0% blocks executed 0%
    #####:   83:unsigned AllocationOpLLVMLowering::getMemRefEltSizeInBytes(
        -:   84:    MemRefType memRefType, Operation *op,
        -:   85:    const DataLayout *defaultLayout) const {
    #####:   86:  const DataLayout *layout = defaultLayout;
    #####:   87:  if (const DataLayoutAnalysis *analysis =
branch  0 never executed
branch  1 never executed
    #####:   88:          getTypeConverter()->getDataLayoutAnalysis()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:    layout = &analysis->getAbove(op);
call    0 never executed
        -:   90:  }
    #####:   91:  Type elementType = memRefType.getElementType();
call    0 never executed
    #####:   92:  if (auto memRefElementType = elementType.dyn_cast<MemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   93:    return getTypeConverter()->getMemRefDescriptorSize(memRefElementType,
call    0 never executed
    #####:   94:                                                       *layout);
call    0 never executed
    #####:   95:  if (auto memRefElementType = elementType.dyn_cast<UnrankedMemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   96:    return getTypeConverter()->getUnrankedMemRefDescriptorSize(
call    0 never executed
    #####:   97:        memRefElementType, *layout);
call    0 never executed
    #####:   98:  return layout->getTypeSize(elementType);
call    0 never executed
        -:   99:}
        -:  100:
function _ZNK4mlir24AllocationOpLLVMLowering22isMemRefSizeMultipleOfENS_10MemRefTypeEmPNS_9OperationEPKNS_10DataLayoutE called 0 returned 0% blocks executed 0%
    #####:  101:bool AllocationOpLLVMLowering::isMemRefSizeMultipleOf(
        -:  102:    MemRefType type, uint64_t factor, Operation *op,
        -:  103:    const DataLayout *defaultLayout) const {
    #####:  104:  uint64_t sizeDivisor = getMemRefEltSizeInBytes(type, op, defaultLayout);
call    0 never executed
    #####:  105:  for (unsigned i = 0, e = type.getRank(); i < e; i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:    if (ShapedType::isDynamic(type.getDimSize(i)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  107:      continue;
    #####:  108:    sizeDivisor = sizeDivisor * type.getDimSize(i);
call    0 never executed
        -:  109:  }
    #####:  110:  return sizeDivisor % factor == 0;
        -:  111:}
        -:  112:
function _ZNK4mlir24AllocationOpLLVMLowering23allocateBufferAutoAlignERNS_25ConversionPatternRewriterENS_8LocationENS_5ValueEPNS_9OperationEPKNS_10DataLayoutEl called 0 returned 0% blocks executed 0%
    #####:  113:Value AllocationOpLLVMLowering::allocateBufferAutoAlign(
        -:  114:    ConversionPatternRewriter &rewriter, Location loc, Value sizeBytes,
        -:  115:    Operation *op, const DataLayout *defaultLayout, int64_t alignment) const {
    #####:  116:  Value allocAlignment = createIndexConstant(rewriter, loc, alignment);
call    0 never executed
        -:  117:
    #####:  118:  MemRefType memRefType = getMemRefResultType(op);
call    0 never executed
        -:  119:  // Function aligned_alloc requires size to be a multiple of alignment; we pad
        -:  120:  // the size to the next multiple if necessary.
    #####:  121:  if (!isMemRefSizeMultipleOf(memRefType, alignment, op, defaultLayout))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  122:    sizeBytes = createAligned(rewriter, loc, sizeBytes, allocAlignment);
call    0 never executed
        -:  123:
    #####:  124:  Type elementPtrType = this->getElementPtrType(memRefType);
call    0 never executed
    #####:  125:  LLVM::LLVMFuncOp allocFuncOp = getAlignedAllocFn(
    #####:  126:      getTypeConverter(), op->getParentOfType<ModuleOp>(), getIndexType());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  127:  auto results = rewriter.create<LLVM::CallOp>(
    #####:  128:      loc, allocFuncOp, ValueRange({allocAlignment, sizeBytes}));
call    0 never executed
call    1 never executed
    #####:  129:  Value allocatedPtr = rewriter.create<LLVM::BitcastOp>(loc, elementPtrType,
    #####:  130:                                                        results.getResult());
call    0 never executed
call    1 never executed
        -:  131:
    #####:  132:  return allocatedPtr;
        -:  133:}
        -:  134:
function _ZNK4mlir23AllocLikeOpLLVMLowering15matchAndRewriteEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 140715 returned 100% blocks executed 81%
   140715:  135:LogicalResult AllocLikeOpLLVMLowering::matchAndRewrite(
        -:  136:    Operation *op, ArrayRef<Value> operands,
        -:  137:    ConversionPatternRewriter &rewriter) const {
   140715:  138:  MemRefType memRefType = getMemRefResultType(op);
call    0 returned 100%
   140715:  139:  if (!isConvertibleAndHasIdentityMaps(memRefType))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  140:    return rewriter.notifyMatchFailure(op, "incompatible memref type");
call    0 never executed
   140715:  141:  auto loc = op->getLoc();
call    0 returned 100%
        -:  142:
        -:  143:  // Get actual sizes of the memref as values: static sizes are constant
        -:  144:  // values and dynamic sizes are passed to 'alloc' as operands.  In case of
        -:  145:  // zero-dimensional memref, assume a scalar (size 1).
   140715:  146:  SmallVector<Value, 4> sizes;
call    0 returned 100%
   140715:  147:  SmallVector<Value, 4> strides;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   140715:  148:  Value sizeBytes;
   140715:  149:  this->getMemRefDescriptorSizes(loc, memRefType, operands, rewriter, sizes,
call    0 returned 100%
call    1 returned 100%
        -:  150:                                 strides, sizeBytes);
        -:  151:
        -:  152:  // Allocate the underlying buffer.
   140715:  153:  auto [allocatedPtr, alignedPtr] =
call    0 returned 100%
   140715:  154:      this->allocateBuffer(rewriter, loc, sizeBytes, op);
call    0 returned 100%
call    1 returned 100%
        -:  155:
        -:  156:  // Create the MemRef descriptor.
   140715:  157:  auto memRefDescriptor = this->createMemRefDescriptor(
   140715:  158:      loc, memRefType, allocatedPtr, alignedPtr, sizes, strides, rewriter);
call    0 returned 100%
        -:  159:
        -:  160:  // Return the final value of the descriptor.
   140715:  161:  rewriter.replaceOp(op, {memRefDescriptor});
call    0 returned 100%
call    1 returned 100%
   140715:  162:  return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  163:}
