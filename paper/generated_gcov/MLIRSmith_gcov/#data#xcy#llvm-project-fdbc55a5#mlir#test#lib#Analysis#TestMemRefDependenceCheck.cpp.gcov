        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Analysis/TestMemRefDependenceCheck.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMemRefDependenceCheck.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestMemRefDependenceCheck.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestMemRefDependenceCheck.cpp - Test dep analysis ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to run pair-wise memref access dependence checks.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   14:#include "mlir/Dialect/Affine/Analysis/AffineStructures.h"
        -:   15:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   16:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:#include "llvm/Support/Debug.h"
        -:   20:
        -:   21:#define DEBUG_TYPE "test-memref-dependence-check"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:
        -:   27:// TODO: Add common surrounding loop depth-wise dependence checks.
        -:   28:/// Checks dependences between all pairs of memref accesses in a Function.
   116636:   29:struct TestMemRefDependenceCheck
call    0 returned 100%
        -:   30:    : public PassWrapper<TestMemRefDependenceCheck, OperationPass<>> {
function _ZN12_GLOBAL__N_125TestMemRefDependenceCheck13resolveTypeIDEv called 116636 returned 100% blocks executed 100%
   116636:   31:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMemRefDependenceCheck)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   32:
function _ZNK12_GLOBAL__N_125TestMemRefDependenceCheck11getArgumentEv called 116176 returned 100% blocks executed 100%
   116176:   33:  StringRef getArgument() const final { return "test-memref-dependence-check"; }
function _ZNK12_GLOBAL__N_125TestMemRefDependenceCheck14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   34:  StringRef getDescription() const final {
   116161:   35:    return "Checks dependences between all pairs of memref accesses.";
        -:   36:  }
        -:   37:  SmallVector<Operation *, 4> loadsAndStores;
        -:   38:  void runOnOperation() override;
        -:   39:};
        -:   40:
        -:   41:} // namespace
        -:   42:
        -:   43:// Returns a result string which represents the direction vector (if there was
        -:   44:// a dependence), returns the string "false" otherwise.
        -:   45:static std::string
function _ZL21getDirectionVectorStrbjjN4llvm8ArrayRefIN4mlir19DependenceComponentEEE called 151893 returned 100% blocks executed 12%
   151893:   46:getDirectionVectorStr(bool ret, unsigned numCommonLoops, unsigned loopNestDepth,
        -:   47:                      ArrayRef<DependenceComponent> dependenceComponents) {
   151893:   48:  if (!ret)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   151859:   49:    return "false";
call    0 returned 100%
      34*:   50:  if (dependenceComponents.empty() || loopNestDepth > numCommonLoops)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
       34:   51:    return "true";
call    0 returned 100%
    #####:   52:  std::string result;
    #####:   53:  for (const auto &dependenceComponent : dependenceComponents) {
branch  0 never executed
branch  1 never executed
    #####:   54:    std::string lbStr = "-inf";
call    0 never executed
    #####:   55:    if (dependenceComponent.lb.has_value() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   56:        dependenceComponent.lb.value() != std::numeric_limits<int64_t>::min())
branch  0 never executed
branch  1 never executed
    #####:   57:      lbStr = std::to_string(dependenceComponent.lb.value());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   58:
    #####:   59:    std::string ubStr = "+inf";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    if (dependenceComponent.ub.has_value() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   61:        dependenceComponent.ub.value() != std::numeric_limits<int64_t>::max())
branch  0 never executed
branch  1 never executed
    #####:   62:      ubStr = std::to_string(dependenceComponent.ub.value());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   63:
    #####:   64:    result += "[" + lbStr + ", " + ubStr + "]";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
        -:   65:  }
    #####:   66:  return result;
branch  0 never executed
branch  1 never executed
        -:   67:}
        -:   68:
        -:   69:// For each access in 'loadsAndStores', runs a dependence check between this
        -:   70:// "source" access and all subsequent "destination" accesses in
        -:   71:// 'loadsAndStores'. Emits the result of the dependence check as a note with
        -:   72:// the source access.
function _ZL16checkDependencesN4llvm8ArrayRefIPN4mlir9OperationEEE called 376 returned 100% blocks executed 81%
      376:   73:static void checkDependences(ArrayRef<Operation *> loadsAndStores) {
     6563:   74:  for (unsigned i = 0, e = loadsAndStores.size(); i < e; ++i) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     6187:   75:    auto *srcOpInst = loadsAndStores[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    12374:   76:    MemRefAccess srcAccess(srcOpInst);
call    0 returned 100%
   158080:   77:    for (unsigned j = 0; j < e; ++j) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
   151893:   78:      auto *dstOpInst = loadsAndStores[j];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   303786:   79:      MemRefAccess dstAccess(dstOpInst);
call    0 returned 100%
        -:   80:
   151893:   81:      unsigned numCommonLoops =
   151893:   82:          getNumCommonSurroundingLoops(*srcOpInst, *dstOpInst);
call    0 returned 100%
   303786:   83:      for (unsigned d = 1; d <= numCommonLoops + 1; ++d) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   151893:   84:        FlatAffineValueConstraints dependenceConstraints;
call    0 returned 100%
   303786:   85:        SmallVector<DependenceComponent, 2> dependenceComponents;
call    0 returned 100%
call    1 returned 100%
   151893:   86:        DependenceResult result = checkMemrefAccessDependence(
        -:   87:            srcAccess, dstAccess, d, &dependenceConstraints,
   151893:   88:            &dependenceComponents);
call    0 returned 100%
  151893*:   89:        assert(result.value != DependenceResult::Failure);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   151893:   90:        bool ret = hasDependence(result);
call    0 returned 100%
        -:   91:        // TODO: Print dependence type (i.e. RAW, etc) and print
        -:   92:        // distance vectors as: ([2, 3], [0, 10]). Also, shorten distance
        -:   93:        // vectors from ([1, 1], [3, 3]) to (1, 3).
   303786:   94:        srcOpInst->emitRemark("dependence from ")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
   151893:   95:            << i << " to " << j << " at depth " << d << " = "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
   303786:   96:            << getDirectionVectorStr(ret, numCommonLoops, d,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   151893:   97:                                     dependenceComponents);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   98:      }
        -:   99:    }
        -:  100:  }
      376:  101:}
        -:  102:
        -:  103:/// Walks the operation adding load and store ops to 'loadsAndStores'. Runs
        -:  104:/// pair-wise dependence checks.
function _ZN12_GLOBAL__N_125TestMemRefDependenceCheck14runOnOperationEv called 376 returned 100% blocks executed 80%
      376:  105:void TestMemRefDependenceCheck::runOnOperation() {
        -:  106:  // Collect the loads and stores within the function.
      376:  107:  loadsAndStores.clear();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_125TestMemRefDependenceCheck14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 757102 returned 100% blocks executed 100%
   757478:  108:  getOperation()->walk([&](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   757102:  109:    if (isa<AffineLoadOp, AffineStoreOp>(op))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     6187:  110:      loadsAndStores.push_back(op);
call    0 returned 100%
   757102:  111:  });
        -:  112:
      376:  113:  checkDependences(loadsAndStores);
call    0 returned 100%
      376:  114:}
        -:  115:
        -:  116:namespace mlir {
        -:  117:namespace test {
function _ZN4mlir4test33registerTestMemRefDependenceCheckEv called 116161 returned 100% blocks executed 100%
   116161:  118:void registerTestMemRefDependenceCheck() {
   116161:  119:  PassRegistration<TestMemRefDependenceCheck>();
call    0 returned 100%
   116161:  120:}
        -:  121:} // namespace test
        -:  122:} // namespace mlir
