        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Linalg/TestLinalgHoisting.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgHoisting.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgHoisting.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestLinalgHoisting.cpp - Test Linalg hoisting functions ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements logic for testing Linalg hoisting functions.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/Hoisting.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:using namespace mlir::linalg;
        -:   21:
        -:   22:namespace {
        -:   23:struct TestLinalgHoisting
        -:   24:    : public PassWrapper<TestLinalgHoisting, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_118TestLinalgHoisting13resolveTypeIDEv called 116672 returned 100% blocks executed 100%
   116672:   25:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLinalgHoisting)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   26:
function _ZN12_GLOBAL__N_118TestLinalgHoistingC2Ev called 116672 returned 100% blocks executed 100%
   116672:   27:  TestLinalgHoisting() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_118TestLinalgHoistingC2ERKS0_ called 27936 returned 100% blocks executed 100%
    27936:   28:  TestLinalgHoisting(const TestLinalgHoisting &pass) : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
function _ZNK12_GLOBAL__N_118TestLinalgHoisting20getDependentDialectsERN4mlir15DialectRegistryE called 511 returned 100% blocks executed 100%
      511:   29:  void getDependentDialects(DialectRegistry &registry) const override {
      511:   30:    registry.insert<AffineDialect>();
call    0 returned 100%
      511:   31:  }
function _ZNK12_GLOBAL__N_118TestLinalgHoisting11getArgumentEv called 116181 returned 100% blocks executed 100%
   116181:   32:  StringRef getArgument() const final { return "test-linalg-hoisting"; }
function _ZNK12_GLOBAL__N_118TestLinalgHoisting14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   33:  StringRef getDescription() const final {
   116161:   34:    return "Test Linalg hoisting functions.";
        -:   35:  }
        -:   36:
        -:   37:  void runOnOperation() override;
        -:   38:
        -:   39:  Option<bool> testHoistRedundantTransfers{
        -:   40:      *this, "test-hoist-redundant-transfers",
        -:   41:      llvm::cl::desc("Test hoisting transfer_read/transfer_write pairs"),
        -:   42:      llvm::cl::init(false)};
        -:   43:};
        -:   44:} // namespace
        -:   45:
function _ZN12_GLOBAL__N_118TestLinalgHoisting14runOnOperationEv called 387 returned 100% blocks executed 29%
      387:   46:void TestLinalgHoisting::runOnOperation() {
      387:   47:  if (testHoistRedundantTransfers) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:    hoistRedundantVectorTransfers(getOperation());
call    0 never executed
call    1 never executed
    #####:   49:    hoistRedundantVectorTransfersOnTensor(getOperation());
call    0 never executed
    #####:   50:    return;
call    0 never executed
        -:   51:  }
        -:   52:}
        -:   53:
        -:   54:namespace mlir {
        -:   55:namespace test {
function _ZN4mlir4test26registerTestLinalgHoistingEv called 116161 returned 100% blocks executed 100%
   116161:   56:void registerTestLinalgHoisting() { PassRegistration<TestLinalgHoisting>(); }
call    0 returned 100%
        -:   57:} // namespace test
        -:   58:} // namespace mlir
