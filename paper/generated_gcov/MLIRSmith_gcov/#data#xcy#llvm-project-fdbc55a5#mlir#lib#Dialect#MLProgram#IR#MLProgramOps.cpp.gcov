        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/MLProgram/IR/MLProgramOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/MLProgram/IR/CMakeFiles/obj.MLIRMLProgramDialect.dir/MLProgramOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/MLProgram/IR/CMakeFiles/obj.MLIRMLProgramDialect.dir/MLProgramOps.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- MLProgramOps.cpp - MLProgram dialect ops implementation ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/MLProgram/IR/MLProgram.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/FunctionImplementation.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::ml_program;
        -:   15:
        -:   16://===----------------------------------------------------------------------===//
        -:   17:// Custom asm helpers
        -:   18://===----------------------------------------------------------------------===//
        -:   19:
        -:   20:/// Parse and print an ordering clause for a variadic of consuming tokens
        -:   21:/// and an producing token.
        -:   22:///
        -:   23:/// Syntax:
        -:   24:///   ordering(%0, %1 -> !ml_program.token)
        -:   25:///   ordering(() -> !ml_program.token)
        -:   26:///
        -:   27:/// If both the consuming and producing token are not present on the op, then
        -:   28:/// the clause prints nothing.
function _ZL18parseTokenOrderingRN4mlir11OpAsmParserERN4llvm15SmallVectorImplINS0_17UnresolvedOperandEEERNS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   29:static ParseResult parseTokenOrdering(
        -:   30:    OpAsmParser &parser,
        -:   31:    SmallVectorImpl<OpAsmParser::UnresolvedOperand> &consumeTokens,
        -:   32:    Type &produceTokenType) {
    #####:   33:  if (failed(parser.parseOptionalKeyword("ordering")) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   34:      failed(parser.parseLParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:    return success();
        -:   36:
        -:   37:  // Parse consuming token list. If there are no consuming tokens, the
        -:   38:  // '()' null list represents this.
    #####:   39:  if (succeeded(parser.parseOptionalLParen())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    if (failed(parser.parseRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   41:      return failure();
        -:   42:  } else {
    #####:   43:    if (failed(parser.parseOperandList(consumeTokens,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   44:                                       /*requiredOperandCount=*/-1)))
branch  0 never executed
branch  1 never executed
    #####:   45:      return failure();
        -:   46:  }
        -:   47:
        -:   48:  // Parse producer token.
    #####:   49:  if (failed(parser.parseArrow()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:    return failure();
    #####:   51:  if (failed(parser.parseType(produceTokenType)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    return failure();
        -:   53:
    #####:   54:  if (failed(parser.parseRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:    return failure();
        -:   56:
    #####:   57:  return success();
        -:   58:}
        -:   59:
        -:   60:static void printTokenOrdering(OpAsmPrinter &p, Operation *op,
        -:   61:                               OperandRange consumeTokens,
        -:   62:                               Type produceTokenType) {
        -:   63:  if (consumeTokens.empty() && !produceTokenType)
        -:   64:    return;
        -:   65:
        -:   66:  p << " ordering(";
        -:   67:  if (consumeTokens.empty())
        -:   68:    p << "()";
        -:   69:  else
        -:   70:    p.printOperands(consumeTokens);
        -:   71:  if (produceTokenType) {
        -:   72:    p << " -> ";
        -:   73:    p.printType(produceTokenType);
        -:   74:  }
        -:   75:  p << ")";
        -:   76:}
        -:   77:
        -:   78:/// some.op custom<TypeOrAttr>($type, $attr)
        -:   79:///
        -:   80:/// Uninitialized:
        -:   81:///   some.op : tensor<3xi32>
        -:   82:/// Initialized to narrower type than op:
        -:   83:///   some.op (dense<0> : tensor<3xi32>) : tensor<?xi32>
function _ZL22parseTypedInitialValueRN4mlir11OpAsmParserERNS_8TypeAttrERNS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   84:static ParseResult parseTypedInitialValue(OpAsmParser &parser,
        -:   85:                                          TypeAttr &typeAttr, Attribute &attr) {
    #####:   86:  if (succeeded(parser.parseOptionalLParen())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   87:    if (failed(parser.parseAttribute(attr)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:      return failure();
    #####:   89:    if (failed(parser.parseRParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   90:      return failure();
        -:   91:  }
        -:   92:
    #####:   93:  Type type;
    #####:   94:  if (failed(parser.parseColonType(type)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:    return failure();
    #####:   96:  typeAttr = TypeAttr::get(type);
call    0 never executed
    #####:   97:  return success();
        -:   98:}
        -:   99:
        -:  100:static void printTypedInitialValue(OpAsmPrinter &p, Operation *op,
        -:  101:                                   TypeAttr type, Attribute attr) {
        -:  102:  if (attr) {
        -:  103:    p << "(";
        -:  104:    p.printAttribute(attr);
        -:  105:    p << ")";
        -:  106:  }
        -:  107:
        -:  108:  p << " : ";
        -:  109:  p.printAttribute(type);
        -:  110:}
        -:  111:
        -:  112:/// some.op custom<SymbolVisibility>($sym_visibility) $sym_name
        -:  113:/// ->
        -:  114:/// some.op public @foo
        -:  115:/// some.op private @foo
function _ZL21parseSymbolVisibilityRN4mlir11OpAsmParserERNS_10StringAttrE called 0 returned 0% blocks executed 0%
    #####:  116:static ParseResult parseSymbolVisibility(OpAsmParser &parser,
        -:  117:                                         StringAttr &symVisibilityAttr) {
    #####:  118:  StringRef symVisibility;
    #####:  119:  (void)parser.parseOptionalKeyword(&symVisibility,
    #####:  120:                                    {"public", "private", "nested"});
call    0 never executed
    #####:  121:  if (symVisibility.empty())
branch  0 never executed
branch  1 never executed
    #####:  122:    return parser.emitError(parser.getCurrentLocation())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  123:           << "expected 'public', 'private', or 'nested'";
call    0 never executed
call    1 never executed
    #####:  124:  if (!symVisibility.empty())
call    0 never executed
    #####:  125:    symVisibilityAttr = parser.getBuilder().getStringAttr(symVisibility);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  126:  return success();
        -:  127:}
        -:  128:
        -:  129:static void printSymbolVisibility(OpAsmPrinter &p, Operation *op,
        -:  130:                                  StringAttr symVisibilityAttr) {
        -:  131:  if (!symVisibilityAttr)
        -:  132:    p << "public";
        -:  133:  else
        -:  134:    p << symVisibilityAttr.getValue();
        -:  135:}
        -:  136:
        -:  137://===----------------------------------------------------------------------===//
        -:  138:// TableGen'd op method definitions
        -:  139://===----------------------------------------------------------------------===//
        -:  140:
        -:  141:#define GET_OP_CLASSES
        -:  142:#include "mlir/Dialect/MLProgram/IR/MLProgramOps.cpp.inc"
        -:  143:
        -:  144://===----------------------------------------------------------------------===//
        -:  145:// FuncOp
        -:  146://===----------------------------------------------------------------------===//
        -:  147:
function _ZN4mlir10ml_program6FuncOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  148:ParseResult FuncOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  149:  auto buildFuncType =
function _ZZN4mlir10ml_program6FuncOp5parseERNS_11OpAsmParserERNS_14OperationStateEENKUlRNS_7BuilderEN4llvm8ArrayRefINS_4TypeEEESB_NS_23function_interface_impl12VariadicFlagERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_clES7_SB_SB_SD_SK_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  150:      [](Builder &builder, ArrayRef<Type> argTypes, ArrayRef<Type> results,
        -:  151:         function_interface_impl::VariadicFlag,
    #####:  152:         std::string &) { return builder.getFunctionType(argTypes, results); };
call    0 never executed
call    1 never executed
call    2 never executed
        -:  153:
    #####:  154:  return function_interface_impl::parseFunctionOp(
    #####:  155:      parser, result, /*allowVariadic=*/false, buildFuncType);
call    0 never executed
        -:  156:}
        -:  157:
function _ZN4mlir10ml_program6FuncOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  158:void FuncOp::print(OpAsmPrinter &p) {
    #####:  159:  function_interface_impl::printFunctionOp(p, *this, /*isVariadic=*/false);
call    0 never executed
call    1 never executed
    #####:  160:}
        -:  161:
        -:  162://===----------------------------------------------------------------------===//
        -:  163:// GlobalOp
        -:  164://===----------------------------------------------------------------------===//
        -:  165:
function _ZN4mlir10ml_program8GlobalOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  166:LogicalResult GlobalOp::verify() {
    #####:  167:  if (!getIsMutable() && !getValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  168:    return emitOpError() << "immutable global must have an initial value";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  169:  return success();
        -:  170:}
        -:  171:
        -:  172://===----------------------------------------------------------------------===//
        -:  173:// GlobalLoadOp
        -:  174://===----------------------------------------------------------------------===//
        -:  175:
function _ZN4mlir10ml_program12GlobalLoadOp11getGlobalOpERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  176:GlobalOp GlobalLoadOp::getGlobalOp(SymbolTableCollection &symbolTable) {
    #####:  177:  return symbolTable.lookupNearestSymbolFrom<GlobalOp>(
    #####:  178:      getOperation()->getParentOp(), getGlobalAttr());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  179:}
        -:  180:
        -:  181:LogicalResult
function _ZN4mlir10ml_program12GlobalLoadOp16verifySymbolUsesERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  182:GlobalLoadOp::verifySymbolUses(SymbolTableCollection &symbolTable) {
    #####:  183:  GlobalOp referrent = getGlobalOp(symbolTable);
call    0 never executed
    #####:  184:  if (!referrent)
branch  0 never executed
branch  1 never executed
    #####:  185:    return emitOpError() << "undefined global: " << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  186:
    #####:  187:  if (referrent.getType() != getResult().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  188:    return emitOpError() << "cannot load from global typed "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  189:                         << referrent.getType() << " as "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  190:                         << getResult().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  191:  }
        -:  192:
    #####:  193:  return success();
        -:  194:}
        -:  195:
        -:  196://===----------------------------------------------------------------------===//
        -:  197:// GlobalLoadConstOp
        -:  198://===----------------------------------------------------------------------===//
        -:  199:
function _ZN4mlir10ml_program17GlobalLoadConstOp11getGlobalOpERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  200:GlobalOp GlobalLoadConstOp::getGlobalOp(SymbolTableCollection &symbolTable) {
    #####:  201:  return symbolTable.lookupNearestSymbolFrom<GlobalOp>(
    #####:  202:      getOperation()->getParentOp(), getGlobalAttr());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  203:}
        -:  204:
        -:  205:LogicalResult
function _ZN4mlir10ml_program17GlobalLoadConstOp16verifySymbolUsesERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  206:GlobalLoadConstOp::verifySymbolUses(SymbolTableCollection &symbolTable) {
    #####:  207:  GlobalOp referrent = getGlobalOp(symbolTable);
call    0 never executed
    #####:  208:  if (!referrent)
branch  0 never executed
branch  1 never executed
    #####:  209:    return emitOpError() << "undefined global: " << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  210:
    #####:  211:  if (referrent.getIsMutable())
call    0 never executed
    #####:  212:    return emitOpError() << "cannot load as const from mutable global "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  213:                         << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  214:
    #####:  215:  if (referrent.getType() != getResult().getType())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  216:    return emitOpError() << "cannot load from global typed "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  217:                         << referrent.getType() << " as "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  218:                         << getResult().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  219:
    #####:  220:  return success();
        -:  221:}
        -:  222:
        -:  223://===----------------------------------------------------------------------===//
        -:  224:// GlobalLoadGraphOp
        -:  225://===----------------------------------------------------------------------===//
        -:  226:
function _ZN4mlir10ml_program17GlobalLoadGraphOp11getGlobalOpERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  227:GlobalOp GlobalLoadGraphOp::getGlobalOp(SymbolTableCollection &symbolTable) {
    #####:  228:  return symbolTable.lookupNearestSymbolFrom<GlobalOp>(
    #####:  229:      getOperation()->getParentOp(), getGlobalAttr());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  230:}
        -:  231:
        -:  232:LogicalResult
function _ZN4mlir10ml_program17GlobalLoadGraphOp16verifySymbolUsesERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  233:GlobalLoadGraphOp::verifySymbolUses(SymbolTableCollection &symbolTable) {
    #####:  234:  GlobalOp referrent = getGlobalOp(symbolTable);
call    0 never executed
    #####:  235:  if (!referrent)
branch  0 never executed
branch  1 never executed
    #####:  236:    return emitOpError() << "undefined global: " << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  237:
    #####:  238:  if (referrent.getType() != getResult().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  239:    return emitOpError() << "cannot load from global typed "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  240:                         << referrent.getType() << " as "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  241:                         << getResult().getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  242:  }
        -:  243:
    #####:  244:  return success();
        -:  245:}
        -:  246:
        -:  247://===----------------------------------------------------------------------===//
        -:  248:// GlobalStoreOp
        -:  249://===----------------------------------------------------------------------===//
        -:  250:
function _ZN4mlir10ml_program13GlobalStoreOp11getGlobalOpERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  251:GlobalOp GlobalStoreOp::getGlobalOp(SymbolTableCollection &symbolTable) {
    #####:  252:  return symbolTable.lookupNearestSymbolFrom<GlobalOp>(
    #####:  253:      getOperation()->getParentOp(), getGlobalAttr());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  254:}
        -:  255:
        -:  256:LogicalResult
function _ZN4mlir10ml_program13GlobalStoreOp16verifySymbolUsesERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  257:GlobalStoreOp::verifySymbolUses(SymbolTableCollection &symbolTable) {
    #####:  258:  GlobalOp referrent = getGlobalOp(symbolTable);
call    0 never executed
    #####:  259:  if (!referrent)
branch  0 never executed
branch  1 never executed
    #####:  260:    return emitOpError() << "undefined global: " << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  261:
    #####:  262:  if (!referrent.getIsMutable()) {
call    0 never executed
    #####:  263:    return emitOpError() << "cannot store to an immutable global "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  264:                         << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  265:  }
        -:  266:
    #####:  267:  if (referrent.getType() != getValue().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  268:    return emitOpError() << "cannot store to a global typed "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  269:                         << referrent.getType() << " from "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  270:                         << getValue().getType();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  271:  }
        -:  272:
    #####:  273:  return success();
        -:  274:}
        -:  275:
        -:  276://===----------------------------------------------------------------------===//
        -:  277:// GlobalStoreGraphOp
        -:  278://===----------------------------------------------------------------------===//
        -:  279:
function _ZN4mlir10ml_program18GlobalStoreGraphOp11getGlobalOpERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  280:GlobalOp GlobalStoreGraphOp::getGlobalOp(SymbolTableCollection &symbolTable) {
    #####:  281:  return symbolTable.lookupNearestSymbolFrom<GlobalOp>(
    #####:  282:      getOperation()->getParentOp(), getGlobalAttr());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  283:}
        -:  284:
        -:  285:LogicalResult
function _ZN4mlir10ml_program18GlobalStoreGraphOp16verifySymbolUsesERNS_21SymbolTableCollectionE called 0 returned 0% blocks executed 0%
    #####:  286:GlobalStoreGraphOp::verifySymbolUses(SymbolTableCollection &symbolTable) {
    #####:  287:  GlobalOp referrent = getGlobalOp(symbolTable);
call    0 never executed
    #####:  288:  if (!referrent)
branch  0 never executed
branch  1 never executed
    #####:  289:    return emitOpError() << "undefined global: " << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  290:
    #####:  291:  if (!referrent.getIsMutable()) {
call    0 never executed
    #####:  292:    return emitOpError() << "cannot store to an immutable global "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  293:                         << getGlobal();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  294:  }
        -:  295:
    #####:  296:  if (referrent.getType() != getValue().getType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  297:    return emitOpError() << "cannot store to a global typed "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  298:                         << referrent.getType() << " from "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  299:                         << getValue().getType();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  300:  }
        -:  301:
    #####:  302:  return success();
        -:  303:}
        -:  304:
        -:  305://===----------------------------------------------------------------------===//
        -:  306:// SubgraphOp
        -:  307://===----------------------------------------------------------------------===//
        -:  308:
function _ZN4mlir10ml_program10SubgraphOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  309:ParseResult SubgraphOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  310:  auto buildFuncType =
function _ZZN4mlir10ml_program10SubgraphOp5parseERNS_11OpAsmParserERNS_14OperationStateEENKUlRNS_7BuilderEN4llvm8ArrayRefINS_4TypeEEESB_NS_23function_interface_impl12VariadicFlagERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_clES7_SB_SB_SD_SK_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  311:      [](Builder &builder, ArrayRef<Type> argTypes, ArrayRef<Type> results,
        -:  312:         function_interface_impl::VariadicFlag,
    #####:  313:         std::string &) { return builder.getFunctionType(argTypes, results); };
call    0 never executed
call    1 never executed
call    2 never executed
        -:  314:
    #####:  315:  return function_interface_impl::parseFunctionOp(
    #####:  316:      parser, result, /*allowVariadic=*/false, buildFuncType);
call    0 never executed
        -:  317:}
        -:  318:
function _ZN4mlir10ml_program10SubgraphOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  319:void SubgraphOp::print(OpAsmPrinter &p) {
    #####:  320:  function_interface_impl::printFunctionOp(p, *this, /*isVariadic=*/false);
call    0 never executed
call    1 never executed
    #####:  321:}
        -:  322:
        -:  323://===----------------------------------------------------------------------===//
        -:  324:// OutputOp
        -:  325://===----------------------------------------------------------------------===//
        -:  326:
function _ZN4mlir10ml_program8OutputOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  327:LogicalResult OutputOp::verify() {
    #####:  328:  auto function = cast<SubgraphOp>((*this)->getParentOp());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  329:
        -:  330:  // The operand number and types must match the function signature.
    #####:  331:  const auto &results = function.getFunctionType().getResults();
call    0 never executed
call    1 never executed
    #####:  332:  if (getNumOperands() != results.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  333:    return emitOpError("has ")
call    0 never executed
call    1 never executed
    #####:  334:           << getNumOperands() << " operands, but enclosing function (@"
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  335:           << function.getName() << ") outputs " << results.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  336:
    #####:  337:  for (unsigned i = 0, e = results.size(); i != e; ++i)
branch  0 never executed
branch  1 never executed
    #####:  338:    if (getOperand(i).getType() != results[i])
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  339:      return emitError() << "type of output operand " << i << " ("
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  340:                         << getOperand(i).getType()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  341:                         << ") doesn't match function result type ("
    #####:  342:                         << results[i] << ")"
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  343:                         << " in function @" << function.getName();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  344:
    #####:  345:  return success();
        -:  346:}
        -:  347:
        -:  348://===----------------------------------------------------------------------===//
        -:  349:// ReturnOp
        -:  350://===----------------------------------------------------------------------===//
        -:  351:
function _ZN4mlir10ml_program8ReturnOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  352:LogicalResult ReturnOp::verify() {
    #####:  353:  auto function = cast<FuncOp>((*this)->getParentOp());
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  354:
        -:  355:  // The operand number and types must match the function signature.
    #####:  356:  const auto &results = function.getFunctionType().getResults();
call    0 never executed
call    1 never executed
    #####:  357:  if (getNumOperands() != results.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  358:    return emitOpError("has ")
call    0 never executed
call    1 never executed
    #####:  359:           << getNumOperands() << " operands, but enclosing function (@"
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  360:           << function.getName() << ") returns " << results.size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  361:
    #####:  362:  for (unsigned i = 0, e = results.size(); i != e; ++i)
branch  0 never executed
branch  1 never executed
    #####:  363:    if (getOperand(i).getType() != results[i])
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  364:      return emitError() << "type of return operand " << i << " ("
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  365:                         << getOperand(i).getType()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  366:                         << ") doesn't match function result type ("
    #####:  367:                         << results[i] << ")"
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  368:                         << " in function @" << function.getName();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  369:
    #####:  370:  return success();
        -:  371:}
