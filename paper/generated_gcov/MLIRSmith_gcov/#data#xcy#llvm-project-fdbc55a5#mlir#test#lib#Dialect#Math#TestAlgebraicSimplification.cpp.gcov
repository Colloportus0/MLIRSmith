        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Math/TestAlgebraicSimplification.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Math/CMakeFiles/MLIRMathTestPasses.dir/TestAlgebraicSimplification.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Math/CMakeFiles/MLIRMathTestPasses.dir/TestAlgebraicSimplification.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestAlgebraicSimplification.cpp - Test algebraic simplification ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains test passes for algebraic simplification patterns.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Math/IR/Math.h"
        -:   14:#include "mlir/Dialect/Math/Transforms/Passes.h"
        -:   15:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace {
  116704*:   22:struct TestMathAlgebraicSimplificationPass
call    0 never executed
call    1 returned 100%
        -:   23:    : public PassWrapper<TestMathAlgebraicSimplificationPass, OperationPass<>> {
function _ZN12_GLOBAL__N_135TestMathAlgebraicSimplificationPass13resolveTypeIDEv called 116704 returned 100% blocks executed 100%
   116704:   24:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   25:      TestMathAlgebraicSimplificationPass)
        -:   26:
        -:   27:  void runOnOperation() override;
function _ZNK12_GLOBAL__N_135TestMathAlgebraicSimplificationPass20getDependentDialectsERN4mlir15DialectRegistryE called 543 returned 100% blocks executed 100%
      543:   28:  void getDependentDialects(DialectRegistry &registry) const override {
      543:   29:    registry.insert<vector::VectorDialect, math::MathDialect>();
call    0 returned 100%
      543:   30:  }
function _ZNK12_GLOBAL__N_135TestMathAlgebraicSimplificationPass11getArgumentEv called 116187 returned 100% blocks executed 100%
   116187:   31:  StringRef getArgument() const final {
   116187:   32:    return "test-math-algebraic-simplification";
        -:   33:  }
function _ZNK12_GLOBAL__N_135TestMathAlgebraicSimplificationPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   34:  StringRef getDescription() const final {
   116161:   35:    return "Test math algebraic simplification";
        -:   36:  }
        -:   37:};
        -:   38:} // namespace
        -:   39:
function _ZN12_GLOBAL__N_135TestMathAlgebraicSimplificationPass14runOnOperationEv called 405 returned 100% blocks executed 90%
      405:   40:void TestMathAlgebraicSimplificationPass::runOnOperation() {
      405:   41:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      405:   42:  populateMathAlgebraicSimplificationPatterns(patterns);
call    0 returned 100%
      405:   43:  (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      405:   44:}
        -:   45:
        -:   46:namespace mlir {
        -:   47:namespace test {
function _ZN4mlir4test43registerTestMathAlgebraicSimplificationPassEv called 116161 returned 100% blocks executed 100%
   116161:   48:void registerTestMathAlgebraicSimplificationPass() {
   116161:   49:  PassRegistration<TestMathAlgebraicSimplificationPass>();
call    0 returned 100%
   116161:   50:}
        -:   51:} // namespace test
        -:   52:} // namespace mlir
