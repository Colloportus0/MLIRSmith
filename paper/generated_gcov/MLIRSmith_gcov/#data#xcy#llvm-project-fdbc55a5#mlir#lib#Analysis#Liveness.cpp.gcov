        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/Liveness.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/Liveness.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/Liveness.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- Liveness.cpp - Liveness analysis for MLIR --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Implementation of the liveness analysis.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Analysis/Liveness.h"
        -:   14:#include "mlir/IR/Block.h"
        -:   15:#include "mlir/IR/Operation.h"
        -:   16:#include "mlir/IR/Region.h"
        -:   17:#include "mlir/IR/Value.h"
        -:   18:#include "llvm/ADT/STLExtras.h"
        -:   19:#include "llvm/ADT/SetOperations.h"
        -:   20:#include "llvm/ADT/SetVector.h"
        -:   21:#include "llvm/Support/raw_ostream.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:/// Builds and holds block information during the construction phase.
        -:   27:struct BlockInfoBuilder {
        -:   28:  using ValueSetT = Liveness::ValueSetT;
        -:   29:
        -:   30:  /// Constructs an empty block builder.
function _ZN12_GLOBAL__N_116BlockInfoBuilderC2Ev called 0 returned 0% blocks executed 0%
    #####:   31:  BlockInfoBuilder() = default;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   32:
        -:   33:  /// Fills the block builder with initial liveness information.
function _ZN12_GLOBAL__N_116BlockInfoBuilderC2EPN4mlir5BlockE called 183940 returned 100% blocks executed 100%
   183940:   34:  BlockInfoBuilder(Block *block) : block(block) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
function _ZZN12_GLOBAL__N_116BlockInfoBuilderC4EPN4mlir5BlockEENKUlNS1_5ValueEE_clES4_.isra.0 called 3074098 returned 100% blocks executed 92%
  3074098:   35:    auto gatherOutValues = [&](Value value) {
        -:   36:      // Check whether this value will be in the outValues set (its uses escape
        -:   37:      // this block). Due to the SSA properties of the program, the uses must
        -:   38:      // occur after the definition. Therefore, we do not have to check
        -:   39:      // additional conditions to detect an escaping value.
 12269120:   40:      for (Operation *useOp : value.getUsers()) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
  9195330:   41:        Block *ownerBlock = useOp->getBlock();
call    0 returned 100%
        -:   42:        // Find an owner block in the current region. Note that a value does not
        -:   43:        // escape this block if it is used in a nested region.
  9195330:   44:        ownerBlock = block->getParent()->findAncestorBlockInRegion(*ownerBlock);
call    0 returned 100%
call    1 returned 100%
 9195330*:   45:        assert(ownerBlock && "Use leaves the current parent region");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
  9195330:   46:        if (ownerBlock != block) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      308:   47:          outValues.insert(value);
call    0 returned 100%
      308:   48:          break;
        -:   49:        }
        -:   50:      }
  3258038:   51:    };
        -:   52:
        -:   53:    // Mark all block arguments (phis) as defined.
   376635:   54:    for (BlockArgument argument : block->getArguments()) {
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   55:      // Insert value into the set of defined values.
   192696:   56:      defValues.insert(argument);
call    0 returned 100%
        -:   57:
        -:   58:      // Gather all out values of all arguments in the current block.
   192696:   59:      gatherOutValues(argument);
call    0 returned 100%
        -:   60:    }
        -:   61:
        -:   62:    // Gather out values of all operations in the current block.
  3538471:   63:    for (Operation &operation : *block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
  9094687:   64:      for (Value result : operation.getResults())
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
call    4 returned 100%
  2881422:   65:        gatherOutValues(result);
call    0 returned 100%
        -:   66:
        -:   67:    // Mark all nested operation results as defined, and nested operation
        -:   68:    // operands as used. All defined value will be removed from the used set
        -:   69:    // at the end.
function _ZZN12_GLOBAL__N_116BlockInfoBuilderC4EPN4mlir5BlockEENKUlPNS1_9OperationEE0_clES5_.isra.0 called 7825765 returned 100% blocks executed 100%
  8009700:   70:    block->walk([&](Operation *op) {
call    0 returned 100%
 21387112:   71:      for (Value result : op->getResults())
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
call    4 returned 100%
  6808354:   72:        defValues.insert(result);
call    0 returned 100%
 29740080:   73:      for (Value operand : op->getOperands())
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
call    3 returned 100%
 21914309:   74:        useValues.insert(operand);
call    0 returned 100%
  7825770:   75:    });
   183941:   76:    llvm::set_subtract(useValues, defValues);
call    0 returned 100%
   183940:   77:  }
        -:   78:
        -:   79:  /// Updates live-in information of the current block. To do so it uses the
        -:   80:  /// default liveness-computation formula: newIn = use union out \ def. The
        -:   81:  /// methods returns true, if the set has changed (newIn != in), false
        -:   82:  /// otherwise.
function _ZN12_GLOBAL__N_116BlockInfoBuilder12updateLiveInEv called 184419 returned 100% blocks executed 100%
   184419:   83:  bool updateLiveIn() {
   184419:   84:    ValueSetT newIn = useValues;
call    0 returned 100%
   184422:   85:    llvm::set_union(newIn, outValues);
call    0 returned 100%
   184422:   86:    llvm::set_subtract(newIn, defValues);
call    0 returned 100%
        -:   87:
        -:   88:    // It is sufficient to check the set sizes (instead of their contents) since
        -:   89:    // the live-in set can only grow monotonically during all update operations.
   184418:   90:    if (newIn.size() == inValues.size())
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -:   91:      return false;
        -:   92:
   148732:   93:    inValues = std::move(newIn);
call    0 returned 100%
   148732:   94:    return true;
call    0 returned 100%
        -:   95:  }
        -:   96:
        -:   97:  /// Updates live-out information of the current block. It iterates over all
        -:   98:  /// successors and unifies their live-in values with the current live-out
        -:   99:  /// values.
function _ZN12_GLOBAL__N_116BlockInfoBuilder13updateLiveOutERKN4llvm8DenseMapIPN4mlir5BlockES0_NS1_12DenseMapInfoIS5_vEENS1_6detail12DenseMapPairIS5_S0_EEEE called 480 returned 100% blocks executed 100%
      480:  100:  void updateLiveOut(const DenseMap<Block *, BlockInfoBuilder> &builders) {
     1278:  101:    for (Block *succ : block->getSuccessors()) {
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
call    3 returned 100%
      798:  102:      const BlockInfoBuilder &builder = builders.find(succ)->second;
call    0 returned 100%
call    1 returned 100%
      798:  103:      llvm::set_union(outValues, builder.inValues);
call    0 returned 100%
        -:  104:    }
      480:  105:  }
        -:  106:
        -:  107:  /// The current block.
        -:  108:  Block *block{nullptr};
        -:  109:
        -:  110:  /// The set of all live in values.
        -:  111:  ValueSetT inValues;
        -:  112:
        -:  113:  /// The set of all live out values.
        -:  114:  ValueSetT outValues;
        -:  115:
        -:  116:  /// The set of all defined values.
        -:  117:  ValueSetT defValues;
        -:  118:
        -:  119:  /// The set of all used values.
        -:  120:  ValueSetT useValues;
        -:  121:};
        -:  122:} // namespace
        -:  123:
        -:  124:/// Builds the internal liveness block mapping.
function _ZL17buildBlockMappingPN4mlir9OperationERN4llvm8DenseMapIPNS_5BlockEN12_GLOBAL__N_116BlockInfoBuilderENS2_12DenseMapInfoIS5_vEENS2_6detail12DenseMapPairIS5_S7_EEEE called 1900 returned 100% blocks executed 100%
     1900:  125:static void buildBlockMapping(Operation *operation,
        -:  126:                              DenseMap<Block *, BlockInfoBuilder> &builders) {
     3802:  127:  SetVector<Block *> toProcess;
call    0 returned 100%
call    1 returned 100%
        -:  128:
function _ZZL17buildBlockMappingPN4mlir9OperationERN4llvm8DenseMapIPNS_5BlockEN12_GLOBAL__N_116BlockInfoBuilderENS2_12DenseMapInfoIS5_vEENS2_6detail12DenseMapPairIS5_S7_EEEEENKUlS5_E_clES5_.isra.0 called 183940 returned 100% blocks executed 100%
     1900:  129:  operation->walk<WalkOrder::PreOrder>([&](Block *block) {
call    0 returned 100%
   183940:  130:    BlockInfoBuilder &builder =
   183940:  131:        builders.try_emplace(block, block).first->second;
call    0 returned 100%
call    1 returned 100%
        -:  132:
   183940:  133:    if (builder.updateLiveIn())
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
   148721:  134:      toProcess.insert(block->pred_begin(), block->pred_end());
call    0 returned 100%
   183938:  135:  });
        -:  136:
        -:  137:  // Propagate the in and out-value sets (fixpoint iteration).
     2382:  138:  while (!toProcess.empty()) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
      480:  139:    Block *current = toProcess.pop_back_val();
call    0 returned 100%
      480:  140:    BlockInfoBuilder &builder = builders[current];
call    0 returned 100%
        -:  141:
        -:  142:    // Update the current out values.
      480:  143:    builder.updateLiveOut(builders);
call    0 returned 100%
        -:  144:
        -:  145:    // Compute (potentially) updated live in values.
      480:  146:    if (builder.updateLiveIn())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       11:  147:      toProcess.insert(current->pred_begin(), current->pred_end());
call    0 returned 100%
        -:  148:  }
     1902:  149:}
        -:  150:
        -:  151://===----------------------------------------------------------------------===//
        -:  152:// Liveness
        -:  153://===----------------------------------------------------------------------===//
        -:  154:
        -:  155:/// Creates a new Liveness analysis that computes liveness information for all
        -:  156:/// associated regions.
function _ZN4mlir8LivenessC2EPNS_9OperationE called 1901 returned 100% blocks executed 100%
     1901:  157:Liveness::Liveness(Operation *op) : operation(op) { build(); }
call    0 returned 100%
call    1 returned 100%
        -:  158:
        -:  159:/// Initializes the internal mappings.
function _ZN4mlir8Liveness5buildEv called 1903 returned 100% blocks executed 100%
     1903:  160:void Liveness::build() {
        -:  161:  // Build internal block mapping.
     3806:  162:  DenseMap<Block *, BlockInfoBuilder> builders;
call    0 returned 100%
call    1 returned 100%
     1901:  163:  buildBlockMapping(operation, builders);
call    0 returned 100%
        -:  164:
        -:  165:  // Store internal block data.
   187746:  166:  for (auto &entry : builders) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
   183941:  167:    BlockInfoBuilder &builder = entry.second;
   183941:  168:    LivenessBlockInfo &info = blockMapping[entry.first];
call    0 returned 100%
        -:  169:
   183942:  170:    info.block = builder.block;
   183942:  171:    info.inValues = std::move(builder.inValues);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   367884:  172:    info.outValues = std::move(builder.outValues);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  173:  }
     1902:  174:}
        -:  175:
        -:  176:/// Gets liveness info (if any) for the given value.
function _ZNK4mlir8Liveness15resolveLivenessENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  177:Liveness::OperationListT Liveness::resolveLiveness(Value value) const {
    #####:  178:  OperationListT result;
call    0 never executed
    #####:  179:  SmallPtrSet<Block *, 32> visited;
call    0 never executed
    #####:  180:  SmallVector<Block *, 8> toProcess;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  181:
        -:  182:  // Start with the defining block
    #####:  183:  Block *currentBlock;
    #####:  184:  if (Operation *defOp = value.getDefiningOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:    currentBlock = defOp->getBlock();
        -:  186:  else
    #####:  187:    currentBlock = value.cast<BlockArgument>().getOwner();
call    0 never executed
    #####:  188:  toProcess.push_back(currentBlock);
call    0 never executed
    #####:  189:  visited.insert(currentBlock);
call    0 never executed
        -:  190:
        -:  191:  // Start with all associated blocks
    #####:  192:  for (OpOperand &use : value.getUses()) {
branch  0 never executed
branch  1 never executed
    #####:  193:    Block *useBlock = use.getOwner()->getBlock();
call    0 never executed
    #####:  194:    if (visited.insert(useBlock).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:      toProcess.push_back(useBlock);
call    0 never executed
        -:  196:  }
        -:  197:
    #####:  198:  while (!toProcess.empty()) {
branch  0 never executed
branch  1 never executed
        -:  199:    // Get block and block liveness information.
    #####:  200:    Block *block = toProcess.back();
call    0 never executed
    #####:  201:    toProcess.pop_back();
call    0 never executed
    #####:  202:    const LivenessBlockInfo *blockInfo = getLiveness(block);
call    0 never executed
        -:  203:
        -:  204:    // Note that start and end will be in the same block.
    #####:  205:    Operation *start = blockInfo->getStartOperation(value);
call    0 never executed
    #####:  206:    Operation *end = blockInfo->getEndOperation(value, start);
call    0 never executed
        -:  207:
    #####:  208:    result.push_back(start);
call    0 never executed
    #####:  209:    while (start != end) {
branch  0 never executed
branch  1 never executed
    #####:  210:      start = start->getNextNode();
branch  0 never executed
branch  1 never executed
    #####:  211:      result.push_back(start);
call    0 never executed
        -:  212:    }
        -:  213:
    #####:  214:    for (Block *successor : block->getSuccessors()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  215:      if (getLiveness(successor)->isLiveIn(value) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:          visited.insert(successor).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  217:        toProcess.push_back(successor);
call    0 never executed
        -:  218:    }
        -:  219:  }
        -:  220:
    #####:  221:  return result;
branch  0 never executed
branch  1 never executed
        -:  222:}
        -:  223:
        -:  224:/// Gets liveness info (if any) for the block.
function _ZNK4mlir8Liveness11getLivenessEPNS_5BlockE called 103447 returned 100% blocks executed 100%
   103447:  225:const LivenessBlockInfo *Liveness::getLiveness(Block *block) const {
   103447:  226:  auto it = blockMapping.find(block);
call    0 returned 100%
   103447:  227:  return it == blockMapping.end() ? nullptr : &it->second;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
        -:  228:}
        -:  229:
        -:  230:/// Returns a reference to a set containing live-in values.
function _ZNK4mlir8Liveness9getLiveInEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:  231:const Liveness::ValueSetT &Liveness::getLiveIn(Block *block) const {
    #####:  232:  return getLiveness(block)->in();
call    0 never executed
        -:  233:}
        -:  234:
        -:  235:/// Returns a reference to a set containing live-out values.
function _ZNK4mlir8Liveness10getLiveOutEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:  236:const Liveness::ValueSetT &Liveness::getLiveOut(Block *block) const {
    #####:  237:  return getLiveness(block)->out();
call    0 never executed
        -:  238:}
        -:  239:
        -:  240:/// Returns true if `value` is not live after `operation`.
function _ZNK4mlir8Liveness11isDeadAfterENS_5ValueEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  241:bool Liveness::isDeadAfter(Value value, Operation *operation) const {
    #####:  242:  Block *block = operation->getBlock();
call    0 never executed
    #####:  243:  const LivenessBlockInfo *blockInfo = getLiveness(block);
call    0 never executed
        -:  244:
        -:  245:  // The given value escapes the associated block.
    #####:  246:  if (blockInfo->isLiveOut(value))
branch  0 never executed
branch  1 never executed
        -:  247:    return false;
        -:  248:
    #####:  249:  Operation *endOperation = blockInfo->getEndOperation(value, operation);
call    0 never executed
        -:  250:  // If the operation is a real user of `value` the first check is sufficient.
        -:  251:  // If not, we will have to test whether the end operation is executed before
        -:  252:  // the given operation in the block.
    #####:  253:  return endOperation == operation || endOperation->isBeforeInBlock(operation);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  254:}
        -:  255:
        -:  256:/// Dumps the liveness information in a human readable format.
function _ZNK4mlir8Liveness4dumpEv called 0 returned 0% blocks executed 0%
    #####:  257:void Liveness::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
        -:  258:
        -:  259:/// Dumps the liveness information to the given stream.
function _ZNK4mlir8Liveness5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  260:void Liveness::print(raw_ostream &os) const {
    #####:  261:  os << "// ---- Liveness -----\n";
call    0 never executed
        -:  262:
        -:  263:  // Builds unique block/value mappings for testing purposes.
    #####:  264:  DenseMap<Block *, size_t> blockIds;
call    0 never executed
    #####:  265:  DenseMap<Operation *, size_t> operationIds;
call    0 never executed
call    1 never executed
    #####:  266:  DenseMap<Value, size_t> valueIds;
call    0 never executed
call    1 never executed
function _ZZNK4mlir8Liveness5printERN4llvm11raw_ostreamEENKUlPNS_5BlockEE_clES5_ called 0 returned 0% blocks executed 0%
    #####:  267:  operation->walk<WalkOrder::PreOrder>([&](Block *block) {
call    0 never executed
    #####:  268:    blockIds.insert({block, blockIds.size()});
call    0 never executed
    #####:  269:    for (BlockArgument argument : block->getArguments())
branch  0 never executed
branch  1 never executed
    #####:  270:      valueIds.insert({argument, valueIds.size()});
call    0 never executed
    #####:  271:    for (Operation &operation : *block) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  272:      operationIds.insert({&operation, operationIds.size()});
call    0 never executed
    #####:  273:      for (Value result : operation.getResults())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  274:        valueIds.insert({result, valueIds.size()});
call    0 never executed
        -:  275:    }
    #####:  276:  });
        -:  277:
        -:  278:  // Local printing helpers
function _ZZNK4mlir8Liveness5printERN4llvm11raw_ostreamEENKUlNS_5ValueEE0_clES4_ called 0 returned 0% blocks executed 0%
    #####:  279:  auto printValueRef = [&](Value value) {
    #####:  280:    if (value.getDefiningOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  281:      os << "val_" << valueIds[value];
call    0 never executed
call    1 never executed
call    2 never executed
        -:  282:    else {
    #####:  283:      auto blockArg = value.cast<BlockArgument>();
call    0 never executed
    #####:  284:      os << "arg" << blockArg.getArgNumber() << "@"
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  285:         << blockIds[blockArg.getOwner()];
call    0 never executed
call    1 never executed
        -:  286:    }
    #####:  287:    os << " ";
call    0 never executed
    #####:  288:  };
        -:  289:
function _ZZNK4mlir8Liveness5printERN4llvm11raw_ostreamEENKUlRKNS1_11SmallPtrSetINS_5ValueELj16EEEE1_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  290:  auto printValueRefs = [&](const ValueSetT &values) {
    #####:  291:    std::vector<Value> orderedValues(values.begin(), values.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
function _ZZZNK4mlir8Liveness5printERN4llvm11raw_ostreamEENKUlRKNS1_11SmallPtrSetINS_5ValueELj16EEEE1_clES8_ENKUlS5_S5_E_clES5_S5_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  292:    llvm::sort(orderedValues, [&](Value left, Value right) {
    #####:  293:      return valueIds[left] < valueIds[right];
call    0 never executed
call    1 never executed
call    2 never executed
        -:  294:    });
    #####:  295:    for (Value value : orderedValues)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  296:      printValueRef(value);
call    0 never executed
    #####:  297:  };
        -:  298:
        -:  299:  // Dump information about in and out values.
function _ZZNK4mlir8Liveness5printERN4llvm11raw_ostreamEENKUlPNS_5BlockEE2_clES5_ called 0 returned 0% blocks executed 0%
    #####:  300:  operation->walk<WalkOrder::PreOrder>([&](Block *block) {
call    0 never executed
    #####:  301:    os << "// - Block: " << blockIds[block] << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  302:    const auto *liveness = getLiveness(block);
call    0 never executed
    #####:  303:    os << "// --- LiveIn: ";
call    0 never executed
    #####:  304:    printValueRefs(liveness->inValues);
call    0 never executed
    #####:  305:    os << "\n// --- LiveOut: ";
call    0 never executed
    #####:  306:    printValueRefs(liveness->outValues);
call    0 never executed
    #####:  307:    os << "\n";
call    0 never executed
        -:  308:
        -:  309:    // Print liveness intervals.
    #####:  310:    os << "// --- BeginLivenessIntervals";
call    0 never executed
    #####:  311:    for (Operation &op : *block) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  312:      if (op.getNumResults() < 1)
branch  0 never executed
branch  1 never executed
    #####:  313:        continue;
    #####:  314:      os << "\n";
call    0 never executed
    #####:  315:      for (Value result : op.getResults()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  316:        os << "// ";
call    0 never executed
    #####:  317:        printValueRef(result);
call    0 never executed
    #####:  318:        os << ":";
call    0 never executed
    #####:  319:        auto liveOperations = resolveLiveness(result);
call    0 never executed
function _ZZZNK4mlir8Liveness5printERN4llvm11raw_ostreamEENKUlPNS_5BlockEE2_clES5_ENKUlPNS_9OperationES8_E_clES8_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  320:        llvm::sort(liveOperations, [&](Operation *left, Operation *right) {
    #####:  321:          return operationIds[left] < operationIds[right];
call    0 never executed
call    1 never executed
call    2 never executed
        -:  322:        });
    #####:  323:        for (Operation *operation : liveOperations) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  324:          os << "\n//     ";
call    0 never executed
    #####:  325:          operation->print(os);
call    0 never executed
call    1 never executed
        -:  326:        }
        -:  327:      }
        -:  328:    }
    #####:  329:    os << "\n// --- EndLivenessIntervals\n";
call    0 never executed
        -:  330:
        -:  331:    // Print currently live values.
    #####:  332:    os << "// --- BeginCurrentlyLive\n";
call    0 never executed
    #####:  333:    for (Operation &op : *block) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  334:      auto currentlyLive = liveness->currentlyLiveValues(&op);
call    0 never executed
    #####:  335:      if (currentlyLive.empty())
branch  0 never executed
branch  1 never executed
    #####:  336:        continue;
branch  0 never executed
branch  1 never executed
    #####:  337:      os << "//     ";
call    0 never executed
    #####:  338:      op.print(os);
call    0 never executed
call    1 never executed
    #####:  339:      os << " [";
call    0 never executed
    #####:  340:      printValueRefs(currentlyLive);
call    0 never executed
    #####:  341:      os << "\b]\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  342:    }
    #####:  343:    os << "// --- EndCurrentlyLive\n";
call    0 never executed
    #####:  344:  });
    #####:  345:  os << "// -------------------\n";
call    0 never executed
call    1 never executed
    #####:  346:}
        -:  347:
        -:  348://===----------------------------------------------------------------------===//
        -:  349:// LivenessBlockInfo
        -:  350://===----------------------------------------------------------------------===//
        -:  351:
        -:  352:/// Returns true if the given value is in the live-in set.
function _ZNK4mlir17LivenessBlockInfo8isLiveInENS_5ValueE called 0 returned 0% blocks executed 0%
   67943*:  353:bool LivenessBlockInfo::isLiveIn(Value value) const {
    #####:  354:  return inValues.count(value);
call    0 never executed
call    1 never executed
        -:  355:}
        -:  356:
        -:  357:/// Returns true if the given value is in the live-out set.
function _ZNK4mlir17LivenessBlockInfo9isLiveOutENS_5ValueE called 0 returned 0% blocks executed 0%
   38942*:  358:bool LivenessBlockInfo::isLiveOut(Value value) const {
    #####:  359:  return outValues.count(value);
call    0 never executed
call    1 never executed
        -:  360:}
        -:  361:
        -:  362:/// Gets the start operation for the given value (must be referenced in this
        -:  363:/// block).
function _ZNK4mlir17LivenessBlockInfo17getStartOperationENS_5ValueE called 67943 returned 100% blocks executed 71%
    67943:  364:Operation *LivenessBlockInfo::getStartOperation(Value value) const {
    67943:  365:  Operation *definingOp = value.getDefiningOp();
call    0 returned 100%
        -:  366:  // The given value is either live-in or is defined
        -:  367:  // in the scope of this block.
    67943:  368:  if (isLiveIn(value) || !definingOp)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  369:    return &block->front();
call    0 never executed
        -:  370:  return definingOp;
        -:  371:}
        -:  372:
        -:  373:/// Gets the end operation for the given value using the start operation
        -:  374:/// provided (must be referenced in this block).
function _ZNK4mlir17LivenessBlockInfo15getEndOperationENS_5ValueEPNS_9OperationE called 38942 returned 100% blocks executed 86%
    38942:  375:Operation *LivenessBlockInfo::getEndOperation(Value value,
        -:  376:                                              Operation *startOperation) const {
        -:  377:  // The given value is either dying in this block or live-out.
    38942:  378:  if (isLiveOut(value))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  379:    return &block->back();
call    0 never executed
        -:  380:
        -:  381:  // Resolve the last operation (must exist by definition).
    38942:  382:  Operation *endOperation = startOperation;
   137962:  383:  for (Operation *useOp : value.getUsers()) {
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:  384:    // Find the associated operation in the current block (if any).
    99020:  385:    useOp = block->findAncestorOpInBlock(*useOp);
call    0 returned 100%
        -:  386:    // Check whether the use is in our block and after the current end
        -:  387:    // operation.
    99020:  388:    if (useOp && endOperation->isBeforeInBlock(useOp))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 22% (fallthrough)
branch  4 taken 78%
        -:  389:      endOperation = useOp;
        -:  390:  }
    38942:  391:  return endOperation;
        -:  392:}
        -:  393:
        -:  394:/// Return the values that are currently live as of the given operation.
        -:  395:LivenessBlockInfo::ValueSetT
function _ZNK4mlir17LivenessBlockInfo19currentlyLiveValuesEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  396:LivenessBlockInfo::currentlyLiveValues(Operation *op) const {
    #####:  397:  ValueSetT liveSet;
call    0 never executed
        -:  398:
        -:  399:  // Given a value, check which ops are within its live range. For each of
        -:  400:  // those ops, add the value to the set of live values as-of that op.
function _ZZNK4mlir17LivenessBlockInfo19currentlyLiveValuesEPNS_9OperationEENKUlNS_5ValueEE_clES3_ called 0 returned 0% blocks executed 0%
    #####:  401:  auto addValueToCurrentlyLiveSets = [&](Value value) {
        -:  402:    // Determine the live range of this value inside this block.
    #####:  403:    Operation *startOfLiveRange = value.getDefiningOp();
call    0 never executed
    #####:  404:    Operation *endOfLiveRange = nullptr;
        -:  405:    // If it's a live in or a block argument, then the start is the beginning
        -:  406:    // of the block.
    #####:  407:    if (isLiveIn(value) || value.isa<BlockArgument>())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  408:      startOfLiveRange = &block->front();
call    0 never executed
        -:  409:    else
    #####:  410:      startOfLiveRange = block->findAncestorOpInBlock(*startOfLiveRange);
call    0 never executed
        -:  411:
        -:  412:    // If it's a live out, then the end is the back of the block.
    #####:  413:    if (isLiveOut(value))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  414:      endOfLiveRange = &block->back();
call    0 never executed
        -:  415:
        -:  416:    // We must have at least a startOfLiveRange at this point. Given this, we
        -:  417:    // can use the existing getEndOperation to find the end of the live range.
    #####:  418:    if (startOfLiveRange && !endOfLiveRange)
branch  0 never executed
branch  1 never executed
    #####:  419:      endOfLiveRange = getEndOperation(value, startOfLiveRange);
call    0 never executed
        -:  420:
    #####:  421:    assert(endOfLiveRange && "Must have endOfLiveRange at this point!");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  422:    // If this op is within the live range, insert the value into the set.
    #####:  423:    if (!(op->isBeforeInBlock(startOfLiveRange) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  424:          endOfLiveRange->isBeforeInBlock(op)))
call    0 never executed
    #####:  425:      liveSet.insert(value);
call    0 never executed
    #####:  426:  };
        -:  427:
        -:  428:  // Handle block arguments if any.
    #####:  429:  for (Value arg : block->getArguments())
branch  0 never executed
branch  1 never executed
    #####:  430:    addValueToCurrentlyLiveSets(arg);
call    0 never executed
        -:  431:
        -:  432:  // Handle live-ins. Between the live ins and all the op results that gives us
        -:  433:  // every value in the block.
    #####:  434:  for (Value in : inValues)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  435:    addValueToCurrentlyLiveSets(in);
call    0 never executed
        -:  436:
        -:  437:  // Now walk the block and handle all values used in the block and values
        -:  438:  // defined by the block.
    #####:  439:  for (Operation &walkOp :
    #####:  440:       llvm::make_range(block->begin(), ++op->getIterator()))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  441:    for (auto result : walkOp.getResults())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  442:      addValueToCurrentlyLiveSets(result);
call    0 never executed
        -:  443:
    #####:  444:  return liveSet;
        -:  445:}
