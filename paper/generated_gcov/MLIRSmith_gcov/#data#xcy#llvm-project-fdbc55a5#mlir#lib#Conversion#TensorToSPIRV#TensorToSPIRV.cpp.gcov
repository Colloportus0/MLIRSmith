        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/TensorToSPIRV/TensorToSPIRV.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TensorToSPIRV/CMakeFiles/obj.MLIRTensorToSPIRV.dir/TensorToSPIRV.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TensorToSPIRV/CMakeFiles/obj.MLIRTensorToSPIRV.dir/TensorToSPIRV.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TensorToSPIRV.cpp - Tensor to SPIR-V Patterns ----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to convert Tensor dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TensorToSPIRV/TensorToSPIRV.h"
        -:   14:#include "../SPIRVCommon/Pattern.h"
        -:   15:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   17:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   18:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   19:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   20:#include "mlir/IR/AffineMap.h"
        -:   21:#include "mlir/Support/LogicalResult.h"
        -:   22:#include "llvm/Support/Debug.h"
        -:   23:
        -:   24:#define DEBUG_TYPE "tensor-to-spirv-pattern"
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Operation conversion
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32:namespace {
        -:   33:
        -:   34:/// Converts tensor.extract into loading using access chains from SPIR-V local
        -:   35:/// variables.
        -:   36:class TensorExtractPattern final
        -:   37:    : public OpConversionPattern<tensor::ExtractOp> {
        -:   38:public:
        -:   39:  TensorExtractPattern(TypeConverter &typeConverter, MLIRContext *context,
        -:   40:                       int64_t threshold, PatternBenefit benefit = 1)
        -:   41:      : OpConversionPattern(typeConverter, context, benefit),
        -:   42:        byteCountThreshold(threshold) {}
        -:   43:
        -:   44:  LogicalResult
function _ZNK12_GLOBAL__N_120TensorExtractPattern15matchAndRewriteEN4mlir6tensor9ExtractOpENS2_16ExtractOpAdaptorERNS1_25ConversionPatternRewriterE called 34 returned 100% blocks executed 58%
       34:   45:  matchAndRewrite(tensor::ExtractOp extractOp, OpAdaptor adaptor,
        -:   46:                  ConversionPatternRewriter &rewriter) const override {
       34:   47:    TensorType tensorType = extractOp.getTensor().getType().cast<TensorType>();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   48:
       34:   49:    if (!tensorType.hasStaticShape())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   50:      return rewriter.notifyMatchFailure(extractOp, "non-static tensor");
call    0 never executed
        -:   51:
       34:   52:    if (tensorType.getNumElements() * tensorType.getElementTypeBitWidth() >
call    0 returned 100%
call    1 returned 100%
       34:   53:        byteCountThreshold * 8)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       32:   54:      return rewriter.notifyMatchFailure(extractOp,
       32:   55:                                         "exceeding byte count threshold");
call    0 returned 100%
        -:   56:
        2:   57:    Location loc = extractOp.getLoc();
call    0 returned 100%
        -:   58:
        2:   59:    int64_t rank = tensorType.getRank();
call    0 returned 100%
        2:   60:    SmallVector<int64_t, 4> strides(rank, 1);
call    0 returned 100%
       2*:   61:    for (int i = rank - 2; i >= 0; --i) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   62:      strides[i] = strides[i + 1] * tensorType.getDimSize(i + 1);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   63:    }
        -:   64:
        2:   65:    Type varType = spirv::PointerType::get(adaptor.getTensor().getType(),
call    0 returned 100%
        2:   66:                                           spirv::StorageClass::Function);
call    0 returned 100%
        -:   67:
        2:   68:    spirv::VariableOp varOp;
call    0 returned 100%
        2:   69:    if (adaptor.getTensor().getDefiningOp<spirv::ConstantOp>()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   70:      // We could use the initializer directly; but certain driver compilers
        -:   71:      // have bugs dealing with that. So for now, use spirv.Store for
        -:   72:      // initialization.
    #####:   73:      varOp = rewriter.create<spirv::VariableOp>(loc, varType,
    #####:   74:                                                 spirv::StorageClass::Function,
    #####:   75:                                                 /*initializer=*/nullptr);
call    0 never executed
    #####:   76:      rewriter.create<spirv::StoreOp>(loc, varOp, adaptor.getTensor());
call    0 never executed
call    1 never executed
        -:   77:    } else {
        -:   78:      // Need to store the value to the local variable. It's questionable
        -:   79:      // whether we want to support such case though.
        2:   80:      return failure();
        -:   81:    }
        -:   82:
    #####:   83:    auto &typeConverter = *getTypeConverter<SPIRVTypeConverter>();
call    0 never executed
    #####:   84:    auto indexType = typeConverter.getIndexType();
call    0 never executed
        -:   85:
    #####:   86:    Value index = spirv::linearizeIndex(adaptor.getIndices(), strides,
    #####:   87:                                        /*offset=*/0, indexType, loc, rewriter);
call    0 never executed
call    1 never executed
    #####:   88:    auto acOp = rewriter.create<spirv::AccessChainOp>(loc, varOp, index);
call    0 never executed
        -:   89:
    #####:   90:    rewriter.replaceOpWithNewOp<spirv::LoadOp>(extractOp, acOp);
call    0 never executed
        -:   91:
       2*:   92:    return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   93:  }
        -:   94:
        -:   95:private:
        -:   96:  int64_t byteCountThreshold;
        -:   97:};
        -:   98:
        -:   99:} // namespace
        -:  100:
        -:  101://===----------------------------------------------------------------------===//
        -:  102:// Pattern population
        -:  103://===----------------------------------------------------------------------===//
        -:  104:
function _ZN4mlir29populateTensorToSPIRVPatternsERNS_18SPIRVTypeConverterElRNS_17RewritePatternSetE called 8 returned 100% blocks executed 100%
        8:  105:void mlir::populateTensorToSPIRVPatterns(SPIRVTypeConverter &typeConverter,
        -:  106:                                         int64_t byteCountThreshold,
        -:  107:                                         RewritePatternSet &patterns) {
        8:  108:  patterns.add<TensorExtractPattern>(typeConverter, patterns.getContext(),
call    0 returned 100%
        8:  109:                                     byteCountThreshold);
call    0 returned 100%
        8:  110:}
