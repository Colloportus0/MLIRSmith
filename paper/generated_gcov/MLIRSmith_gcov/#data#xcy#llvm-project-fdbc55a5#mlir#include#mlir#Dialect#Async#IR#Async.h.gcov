        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Async/IR/Async.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Async/Transforms/CMakeFiles/obj.MLIRAsyncTransforms.dir/AsyncRuntimeRefCountingOpt.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Async/Transforms/CMakeFiles/obj.MLIRAsyncTransforms.dir/AsyncRuntimeRefCountingOpt.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- Async.h - MLIR Async dialect -----------------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the async dialect that is used for modeling asynchronous
        -:   10:// execution.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_DIALECT_ASYNC_IR_ASYNC_H
        -:   15:#define MLIR_DIALECT_ASYNC_IR_ASYNC_H
        -:   16:
        -:   17:#include "mlir/Dialect/Async/IR/AsyncTypes.h"
        -:   18:#include "mlir/IR/Builders.h"
        -:   19:#include "mlir/IR/BuiltinTypes.h"
        -:   20:#include "mlir/IR/Dialect.h"
        -:   21:#include "mlir/IR/OpDefinition.h"
        -:   22:#include "mlir/IR/OpImplementation.h"
        -:   23:#include "mlir/IR/PatternMatch.h"
        -:   24:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   25:#include "mlir/Interfaces/InferTypeOpInterface.h"
        -:   26:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Async Dialect
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32:#include "mlir/Dialect/Async/IR/AsyncOpsDialect.h.inc"
        -:   33:
        -:   34://===----------------------------------------------------------------------===//
        -:   35:// Async Dialect Operations
        -:   36://===----------------------------------------------------------------------===//
        -:   37:
        -:   38:#define GET_OP_CLASSES
        -:   39:#include "mlir/Dialect/Async/IR/AsyncOps.h.inc"
        -:   40:
        -:   41://===----------------------------------------------------------------------===//
        -:   42:// Helper functions of Async dialect transformations.
        -:   43://===----------------------------------------------------------------------===//
        -:   44:
        -:   45:namespace mlir {
        -:   46:namespace async {
        -:   47:
        -:   48:/// Returns true if the type is reference counted at runtime.
   801251:   49:inline bool isRefCounted(Type type) {
   801251:   50:  return type.isa<TokenType, ValueType, GroupType>();
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 100%
        -:   51:}
        -:   52:
        -:   53:} // namespace async
        -:   54:} // namespace mlir
        -:   55:
        -:   56:#endif // MLIR_DIALECT_ASYNC_IR_ASYNC_H
