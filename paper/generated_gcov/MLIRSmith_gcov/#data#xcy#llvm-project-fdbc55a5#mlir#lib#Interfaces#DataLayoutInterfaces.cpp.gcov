        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Interfaces/DataLayoutInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRDataLayoutInterfaces.dir/DataLayoutInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRDataLayoutInterfaces.dir/DataLayoutInterfaces.cpp.gcda
        -:    0:Runs:116177
        -:    1://===- DataLayoutInterfaces.cpp - Data Layout Interface Implementation ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/DataLayoutInterfaces.h"
        -:   10:#include "mlir/IR/BuiltinDialect.h"
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:#include "mlir/IR/BuiltinTypes.h"
        -:   13:#include "mlir/IR/Operation.h"
        -:   14:
        -:   15:#include "llvm/ADT/TypeSwitch.h"
        -:   16:#include "llvm/Support/MathExtras.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
        -:   20://===----------------------------------------------------------------------===//
        -:   21:// Default implementations
        -:   22://===----------------------------------------------------------------------===//
        -:   23:
        -:   24:/// Reports that the given type is missing the data layout information and
        -:   25:/// exits.
function _ZL23reportMissingDataLayoutN4mlir4TypeE called 0 returned 0% blocks executed 0%
    #####:   26:[[noreturn]] static void reportMissingDataLayout(Type type) {
    #####:   27:  std::string message;
call    0 never executed
    #####:   28:  llvm::raw_string_ostream os(message);
call    0 never executed
    #####:   29:  os << "neither the scoping op nor the type class provide data layout "
        -:   30:        "information for "
    #####:   31:     << type;
call    0 never executed
call    1 never executed
    #####:   32:  llvm::report_fatal_error(Twine(os.str()));
call    0 never executed
        -:   33:}
        -:   34:
        -:   35:/// Returns the bitwidth of the index type if specified in the param list.
        -:   36:/// Assumes 64-bit index otherwise.
function _ZL16getIndexBitwidthN4llvm8ArrayRefIN4mlir24DataLayoutEntryInterfaceEEE called 7595 returned 100% blocks executed 20%
     7595:   37:static unsigned getIndexBitwidth(DataLayoutEntryListRef params) {
     7595:   38:  if (params.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   39:    return 64;
    #####:   40:  auto attr = params.front().getValue().cast<IntegerAttr>();
call    0 never executed
call    1 never executed
    #####:   41:  return attr.getValue().getZExtValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   42:}
        -:   43:
        -:   44:unsigned
function _ZN4mlir6detail18getDefaultTypeSizeENS_4TypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:   45:mlir::detail::getDefaultTypeSize(Type type, const DataLayout &dataLayout,
        -:   46:                                 ArrayRef<DataLayoutEntryInterface> params) {
    #####:   47:  unsigned bits = getDefaultTypeSizeInBits(type, dataLayout, params);
call    0 never executed
    #####:   48:  return llvm::divideCeil(bits, 8);
        -:   49:}
        -:   50:
function _ZN4mlir6detail24getDefaultTypeSizeInBitsENS_4TypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 149005635 returned 100% blocks executed 36%
149005635:   51:unsigned mlir::detail::getDefaultTypeSizeInBits(Type type,
        -:   52:                                                const DataLayout &dataLayout,
        -:   53:                                                DataLayoutEntryListRef params) {
149005635:   54:  if (type.isa<IntegerType, FloatType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
148998040:   55:    return type.getIntOrFloatBitWidth();
call    0 returned 100%
        -:   56:
     7595:   57:  if (auto ctype = type.dyn_cast<ComplexType>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   58:    auto et = ctype.getElementType();
call    0 never executed
    #####:   59:    auto innerAlignment =
    #####:   60:        getDefaultPreferredAlignment(et, dataLayout, params) * 8;
call    0 never executed
    #####:   61:    auto innerSize = getDefaultTypeSizeInBits(et, dataLayout, params);
call    0 never executed
        -:   62:
        -:   63:    // Include padding required to align the imaginary value in the complex
        -:   64:    // type.
    #####:   65:    return llvm::alignTo(innerSize, innerAlignment) + innerSize;
branch  0 never executed
branch  1 never executed
        -:   66:  }
        -:   67:
        -:   68:  // Index is an integer of some bitwidth.
     7595:   69:  if (type.isa<IndexType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     7595:   70:    return dataLayout.getTypeSizeInBits(
call    0 returned 100%
    15190:   71:        IntegerType::get(type.getContext(), getIndexBitwidth(params)));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   72:
        -:   73:  // Sizes of vector types are rounded up to those of types with closest
        -:   74:  // power-of-two number of elements in the innermost dimension. We also assume
        -:   75:  // there is no bit-packing at the moment element sizes are taken in bytes and
        -:   76:  // multiplied with 8 bits.
        -:   77:  // TODO: make this extensible.
    #####:   78:  if (auto vecType = type.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:    return vecType.getNumElements() / vecType.getShape().back() *
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   80:           llvm::PowerOf2Ceil(vecType.getShape().back()) *
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:           dataLayout.getTypeSize(vecType.getElementType()) * 8;
call    0 never executed
call    1 never executed
call    2 never executed
        -:   82:
    #####:   83:  if (auto typeInterface = type.dyn_cast<DataLayoutTypeInterface>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   84:    return typeInterface.getTypeSizeInBits(dataLayout, params);
call    0 never executed
        -:   85:
    #####:   86:  reportMissingDataLayout(type);
call    0 never executed
        -:   87:}
        -:   88:
        -:   89:static DataLayoutEntryInterface
function _ZL23findEntryForIntegerTypeN4mlir11IntegerTypeEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:   90:findEntryForIntegerType(IntegerType intType,
        -:   91:                        ArrayRef<DataLayoutEntryInterface> params) {
    #####:   92:  assert(!params.empty() && "expected non-empty parameter list");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   93:  std::map<unsigned, DataLayoutEntryInterface> sortedParams;
    #####:   94:  for (DataLayoutEntryInterface entry : params) {
branch  0 never executed
branch  1 never executed
    #####:   95:    sortedParams.insert(std::make_pair(
call    0 never executed
    #####:   96:        entry.getKey().get<Type>().getIntOrFloatBitWidth(), entry));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   97:  }
    #####:   98:  auto iter = sortedParams.lower_bound(intType.getWidth());
call    0 never executed
    #####:   99:  if (iter == sortedParams.end())
branch  0 never executed
branch  1 never executed
    #####:  100:    iter = std::prev(iter);
call    0 never executed
        -:  101:
    #####:  102:  return iter->second;
call    0 never executed
        -:  103:}
        -:  104:
function _ZL19extractABIAlignmentN4mlir24DataLayoutEntryInterfaceE called 0 returned 0% blocks executed 0%
    #####:  105:static unsigned extractABIAlignment(DataLayoutEntryInterface entry) {
    #####:  106:  auto values =
call    0 never executed
    #####:  107:      entry.getValue().cast<DenseIntElementsAttr>().getValues<int32_t>();
call    0 never executed
call    1 never executed
    #####:  108:  return *values.begin() / 8u;
branch  0 never executed
branch  1 never executed
        -:  109:}
        -:  110:
        -:  111:static unsigned
function _ZL26getIntegerTypeABIAlignmentN4mlir11IntegerTypeEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  112:getIntegerTypeABIAlignment(IntegerType intType,
        -:  113:                           ArrayRef<DataLayoutEntryInterface> params) {
    #####:  114:  if (params.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  115:    return intType.getWidth() < 64
call    0 never executed
    #####:  116:               ? llvm::PowerOf2Ceil(llvm::divideCeil(intType.getWidth(), 8))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:               : 4;
branch  0 never executed
branch  1 never executed
        -:  118:  }
        -:  119:
    #####:  120:  return extractABIAlignment(findEntryForIntegerType(intType, params));
call    0 never executed
call    1 never executed
        -:  121:}
        -:  122:
        -:  123:static unsigned
function _ZL24getFloatTypeABIAlignmentN4mlir9FloatTypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  124:getFloatTypeABIAlignment(FloatType fltType, const DataLayout &dataLayout,
        -:  125:                         ArrayRef<DataLayoutEntryInterface> params) {
    #####:  126:  assert(params.size() <= 1 && "at most one data layout entry is expected for "
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  127:                               "the singleton floating-point type");
    #####:  128:  if (params.empty())
branch  0 never executed
branch  1 never executed
    #####:  129:    return llvm::PowerOf2Ceil(dataLayout.getTypeSize(fltType));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:  return extractABIAlignment(params[0]);
call    0 never executed
        -:  131:}
        -:  132:
function _ZN4mlir6detail22getDefaultABIAlignmentENS_4TypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  133:unsigned mlir::detail::getDefaultABIAlignment(
        -:  134:    Type type, const DataLayout &dataLayout,
        -:  135:    ArrayRef<DataLayoutEntryInterface> params) {
        -:  136:  // Natural alignment is the closest power-of-two number above.
    #####:  137:  if (type.isa<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:    return llvm::PowerOf2Ceil(dataLayout.getTypeSize(type));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  139:
    #####:  140:  if (auto fltType = type.dyn_cast<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  141:    return getFloatTypeABIAlignment(fltType, dataLayout, params);
call    0 never executed
        -:  142:
        -:  143:  // Index is an integer of some bitwidth.
    #####:  144:  if (type.isa<IndexType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  145:    return dataLayout.getTypeABIAlignment(
call    0 never executed
    #####:  146:        IntegerType::get(type.getContext(), getIndexBitwidth(params)));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  147:
    #####:  148:  if (auto intType = type.dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:    return getIntegerTypeABIAlignment(intType, params);
call    0 never executed
        -:  150:
    #####:  151:  if (auto ctype = type.dyn_cast<ComplexType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  152:    return getDefaultABIAlignment(ctype.getElementType(), dataLayout, params);
call    0 never executed
call    1 never executed
        -:  153:
    #####:  154:  if (auto typeInterface = type.dyn_cast<DataLayoutTypeInterface>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  155:    return typeInterface.getABIAlignment(dataLayout, params);
call    0 never executed
        -:  156:
    #####:  157:  reportMissingDataLayout(type);
call    0 never executed
        -:  158:}
        -:  159:
function _ZL25extractPreferredAlignmentN4mlir24DataLayoutEntryInterfaceE called 0 returned 0% blocks executed 0%
    #####:  160:static unsigned extractPreferredAlignment(DataLayoutEntryInterface entry) {
    #####:  161:  auto values =
call    0 never executed
    #####:  162:      entry.getValue().cast<DenseIntElementsAttr>().getValues<int32_t>();
call    0 never executed
call    1 never executed
    #####:  163:  return *std::next(values.begin(), values.size() - 1) / 8u;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  164:}
        -:  165:
        -:  166:static unsigned
function _ZL32getIntegerTypePreferredAlignmentN4mlir11IntegerTypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  167:getIntegerTypePreferredAlignment(IntegerType intType,
        -:  168:                                 const DataLayout &dataLayout,
        -:  169:                                 ArrayRef<DataLayoutEntryInterface> params) {
    #####:  170:  if (params.empty())
branch  0 never executed
branch  1 never executed
    #####:  171:    return llvm::PowerOf2Ceil(dataLayout.getTypeSize(intType));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  172:
    #####:  173:  return extractPreferredAlignment(findEntryForIntegerType(intType, params));
call    0 never executed
call    1 never executed
        -:  174:}
        -:  175:
        -:  176:static unsigned
function _ZL30getFloatTypePreferredAlignmentN4mlir9FloatTypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  177:getFloatTypePreferredAlignment(FloatType fltType, const DataLayout &dataLayout,
        -:  178:                               ArrayRef<DataLayoutEntryInterface> params) {
    #####:  179:  assert(params.size() <= 1 && "at most one data layout entry is expected for "
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  180:                               "the singleton floating-point type");
    #####:  181:  if (params.empty())
branch  0 never executed
branch  1 never executed
    #####:  182:    return dataLayout.getTypeABIAlignment(fltType);
call    0 never executed
    #####:  183:  return extractPreferredAlignment(params[0]);
call    0 never executed
        -:  184:}
        -:  185:
function _ZN4mlir6detail28getDefaultPreferredAlignmentENS_4TypeERKNS_10DataLayoutEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEE called 0 returned 0% blocks executed 0%
    #####:  186:unsigned mlir::detail::getDefaultPreferredAlignment(
        -:  187:    Type type, const DataLayout &dataLayout,
        -:  188:    ArrayRef<DataLayoutEntryInterface> params) {
        -:  189:  // Preferred alignment is same as natural for floats and vectors.
    #####:  190:  if (type.isa<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  191:    return dataLayout.getTypeABIAlignment(type);
call    0 never executed
        -:  192:
    #####:  193:  if (auto fltType = type.dyn_cast<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  194:    return getFloatTypePreferredAlignment(fltType, dataLayout, params);
call    0 never executed
        -:  195:
        -:  196:  // Preferred alignment is the closest power-of-two number above for integers
        -:  197:  // (ABI alignment may be smaller).
    #####:  198:  if (auto intType = type.dyn_cast<IntegerType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:    return getIntegerTypePreferredAlignment(intType, dataLayout, params);
call    0 never executed
        -:  200:
    #####:  201:  if (type.isa<IndexType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  202:    return dataLayout.getTypePreferredAlignment(
call    0 never executed
    #####:  203:        IntegerType::get(type.getContext(), getIndexBitwidth(params)));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  204:  }
        -:  205:
    #####:  206:  if (auto ctype = type.dyn_cast<ComplexType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:    return getDefaultPreferredAlignment(ctype.getElementType(), dataLayout,
call    0 never executed
call    1 never executed
    #####:  208:                                        params);
        -:  209:
    #####:  210:  if (auto typeInterface = type.dyn_cast<DataLayoutTypeInterface>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  211:    return typeInterface.getPreferredAlignment(dataLayout, params);
call    0 never executed
        -:  212:
    #####:  213:  reportMissingDataLayout(type);
call    0 never executed
        -:  214:}
        -:  215:
        -:  216:DataLayoutEntryList
function _ZN4mlir6detail20filterEntriesForTypeEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_6TypeIDE called 0 returned 0% blocks executed 0%
    #####:  217:mlir::detail::filterEntriesForType(DataLayoutEntryListRef entries,
        -:  218:                                   TypeID typeID) {
    #####:  219:  return llvm::to_vector<4>(llvm::make_filter_range(
function _ZZN4mlir6detail20filterEntriesForTypeEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_6TypeIDEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  220:      entries, [typeID](DataLayoutEntryInterface entry) {
    #####:  221:        auto type = entry.getKey().dyn_cast<Type>();
call    0 never executed
call    1 never executed
    #####:  222:        return type && type.getTypeID() == typeID;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  223:      }));
call    0 never executed
call    1 never executed
        -:  224:}
        -:  225:
        -:  226:DataLayoutEntryInterface
function _ZN4mlir6detail24filterEntryForIdentifierEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_10StringAttrE called 0 returned 0% blocks executed 0%
    #####:  227:mlir::detail::filterEntryForIdentifier(DataLayoutEntryListRef entries,
        -:  228:                                       StringAttr id) {
function _ZZN4mlir6detail24filterEntryForIdentifierEN4llvm8ArrayRefINS_24DataLayoutEntryInterfaceEEENS_10StringAttrEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  229:  const auto *it = llvm::find_if(entries, [id](DataLayoutEntryInterface entry) {
call    0 never executed
    #####:  230:    if (!entry.getKey().is<StringAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  231:      return false;
    #####:  232:    return entry.getKey().get<StringAttr>() == id;
call    0 never executed
call    1 never executed
        -:  233:  });
    #####:  234:  return it == entries.end() ? DataLayoutEntryInterface() : *it;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  235:}
        -:  236:
function _ZL7getSpecPN4mlir9OperationE called 431230442 returned 100% blocks executed 100%
431230442:  237:static DataLayoutSpecInterface getSpec(Operation *operation) {
431230442:  238:  return llvm::TypeSwitch<Operation *, DataLayoutSpecInterface>(operation)
call    0 returned 100%
        -:  239:      .Case<ModuleOp, DataLayoutOpInterface>(
862460874:  240:          [&](auto op) { return op.getDataLayoutSpec(); })
function _ZZL7getSpecPN4mlir9OperationEENKUlS1_E0_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  241:      .Default([](Operation *) {
    #####:  242:        llvm_unreachable("expected an op with data layout spec");
        -:  243:        return DataLayoutSpecInterface();
431230437:  244:      });
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  245:}
        -:  246:
        -:  247:/// Populates `opsWithLayout` with the list of proper ancestors of `leaf` that
        -:  248:/// are either modules or implement the `DataLayoutOpInterface`.
        -:  249:static void
function _ZL20collectParentLayoutsPN4mlir9OperationERN4llvm15SmallVectorImplINS_23DataLayoutSpecInterfaceEEEPNS3_INS_8LocationEEE called 862482353 returned 100% blocks executed 82%
862482353:  250:collectParentLayouts(Operation *leaf,
        -:  251:                     SmallVectorImpl<DataLayoutSpecInterface> &specs,
        -:  252:                     SmallVectorImpl<Location> *opLocations = nullptr) {
862482353:  253:  if (!leaf)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:  254:    return;
        -:  255:
1724921752:  256:  for (Operation *parent = leaf->getParentOp(); parent != nullptr;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
    #####:  257:       parent = parent->getParentOp()) {
call    0 never executed
 25357576:  258:    llvm::TypeSwitch<Operation *>(parent)
call    0 returned 100%
function _ZZL20collectParentLayoutsPN4mlir9OperationERN4llvm15SmallVectorImplINS_23DataLayoutSpecInterfaceEEEPNS3_INS_8LocationEEEENKUlNS_8ModuleOpEE_clESA_.isra.0 called 25357578 returned 100% blocks executed 45%
 25357578:  259:        .Case<ModuleOp>([&](ModuleOp op) {
        -:  260:          // Skip top-level module op unless it has a layout. Top-level module
        -:  261:          // without layout is most likely the one implicitly added by the
        -:  262:          // parser and it doesn't have location. Top-level null specification
        -:  263:          // would have had the same effect as not having a specification at all
        -:  264:          // (using type defaults).
25357578*:  265:          if (!op->getParentOp() && !op.getDataLayoutSpec())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
 25357578:  266:            return;
    #####:  267:          specs.push_back(op.getDataLayoutSpec());
call    0 never executed
call    1 never executed
    #####:  268:          if (opLocations)
branch  0 never executed
branch  1 never executed
    #####:  269:            opLocations->push_back(op.getLoc());
call    0 never executed
 25357576:  270:        })
call    0 returned 100%
function _ZZL20collectParentLayoutsPN4mlir9OperationERN4llvm15SmallVectorImplINS_23DataLayoutSpecInterfaceEEEPNS3_INS_8LocationEEEENKUlNS_21DataLayoutOpInterfaceEE0_clESA_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  271:        .Case<DataLayoutOpInterface>([&](DataLayoutOpInterface op) {
    #####:  272:          specs.push_back(op.getDataLayoutSpec());
call    0 never executed
call    1 never executed
    #####:  273:          if (opLocations)
branch  0 never executed
branch  1 never executed
    #####:  274:            opLocations->push_back(op.getLoc());
call    0 never executed
25357578*:  275:        });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  276:  }
        -:  277:}
        -:  278:
        -:  279:/// Returns a layout spec that is a combination of the layout specs attached
        -:  280:/// to the given operation and all its ancestors.
function _ZL21getCombinedDataLayoutPN4mlir9OperationE called 431238471 returned 100% blocks executed 34%
431238471:  281:static DataLayoutSpecInterface getCombinedDataLayout(Operation *leaf) {
431238471:  282:  if (!leaf)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     8022:  283:    return {};
call    0 returned 100%
        -:  284:
431230449*:  285:  assert((isa<ModuleOp, DataLayoutOpInterface>(leaf)) &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  286:         "expected an op with data layout spec");
        -:  287:
431230450:  288:  SmallVector<DataLayoutOpInterface> opsWithLayout;
call    0 returned 100%
431230437:  289:  SmallVector<DataLayoutSpecInterface> specs;
431230450:  290:  collectParentLayouts(leaf, specs);
call    0 returned 100%
        -:  291:
        -:  292:  // Fast track if there are no ancestors.
431230445:  293:  if (specs.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
431230445:  294:    return getSpec(leaf);
call    0 returned 100%
        -:  295:
        -:  296:  // Create the list of non-null specs (null/missing specs can be safely
        -:  297:  // ignored) from the outermost to the innermost.
    #####:  298:  auto nonNullSpecs = llvm::to_vector<2>(llvm::make_filter_range(
call    0 never executed
    #####:  299:      llvm::reverse(specs),
431230437*:  300:      [](DataLayoutSpecInterface iface) { return iface != nullptr; }));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  301:
        -:  302:  // Combine the specs using the innermost as anchor.
    #####:  303:  if (DataLayoutSpecInterface current = getSpec(leaf))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  304:    return current.combineWith(nonNullSpecs);
call    0 never executed
    #####:  305:  if (nonNullSpecs.empty())
branch  0 never executed
branch  1 never executed
    #####:  306:    return {};
call    0 never executed
    #####:  307:  return nonNullSpecs.back().combineWith(
call    0 never executed
call    1 never executed
    #####:  308:      llvm::makeArrayRef(nonNullSpecs).drop_back());
call    0 never executed
call    1 never executed
        -:  309:}
        -:  310:
function _ZN4mlir6detail18verifyDataLayoutOpEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  311:LogicalResult mlir::detail::verifyDataLayoutOp(Operation *op) {
    #####:  312:  DataLayoutSpecInterface spec = getSpec(op);
call    0 never executed
        -:  313:  // The layout specification may be missing and it's fine.
    #####:  314:  if (!spec)
branch  0 never executed
branch  1 never executed
    #####:  315:    return success();
        -:  316:
    #####:  317:  if (failed(spec.verifySpec(op->getLoc())))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:    return failure();
    #####:  319:  if (!getCombinedDataLayout(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  320:    InFlightDiagnostic diag =
    #####:  321:        op->emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  322:        << "data layout does not combine with layouts of enclosing ops";
call    0 never executed
    #####:  323:    SmallVector<DataLayoutSpecInterface> specs;
call    0 never executed
call    1 never executed
    #####:  324:    SmallVector<Location> opLocations;
branch  0 never executed
branch  1 never executed
    #####:  325:    collectParentLayouts(op, specs, &opLocations);
call    0 never executed
    #####:  326:    for (Location loc : opLocations)
branch  0 never executed
branch  1 never executed
    #####:  327:      diag.attachNote(loc) << "enclosing op with data layout";
call    0 never executed
call    1 never executed
    #####:  328:    return diag;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  329:  }
    #####:  330:  return success();
        -:  331:}
        -:  332:
        -:  333://===----------------------------------------------------------------------===//
        -:  334:// DataLayout
        -:  335://===----------------------------------------------------------------------===//
        -:  336:
        -:  337:template <typename OpTy>
        -:  338:void checkMissingLayout(DataLayoutSpecInterface originalLayout, OpTy op) {
        -:  339:  if (!originalLayout) {
        -:  340:    assert((!op || !op.getDataLayoutSpec()) &&
        -:  341:           "could not compute layout information for an op (failed to "
        -:  342:           "combine attributes?)");
        -:  343:  }
        -:  344:}
        -:  345:
function _ZN4mlir10DataLayoutC2Ev called 6728 returned 100% blocks executed 100%
    6728*:  346:mlir::DataLayout::DataLayout() : DataLayout(ModuleOp()) {}
call    0 returned 100%
        -:  347:
function _ZN4mlir10DataLayoutC2ENS_21DataLayoutOpInterfaceE called 1294 returned 100% blocks executed 100%
     1294:  348:mlir::DataLayout::DataLayout(DataLayoutOpInterface op)
     1294:  349:    : originalLayout(getCombinedDataLayout(op)), scope(op) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  350:#if LLVM_ENABLE_ABI_BREAKING_CHECKS
     1294:  351:  checkMissingLayout(originalLayout, op);
call    0 returned 100%
     1294:  352:  collectParentLayouts(op, layoutStack);
call    0 returned 100%
        -:  353:#endif
     1294:  354:}
        -:  355:
function _ZN4mlir10DataLayoutC2ENS_8ModuleOpE called 143758013 returned 100% blocks executed 100%
143758013:  356:mlir::DataLayout::DataLayout(ModuleOp op)
143758013:  357:    : originalLayout(getCombinedDataLayout(op)), scope(op) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  358:#if LLVM_ENABLE_ABI_BREAKING_CHECKS
143758014:  359:  checkMissingLayout(originalLayout, op);
call    0 returned 100%
143758009:  360:  collectParentLayouts(op, layoutStack);
call    0 returned 100%
        -:  361:#endif
143758010:  362:}
        -:  363:
function _ZN4mlir10DataLayout7closestEPNS_9OperationE called 143749981 returned 100% blocks executed 75%
143749981:  364:mlir::DataLayout mlir::DataLayout::closest(Operation *op) {
        -:  365:  // Search the closest parent either being a module operation or implementing
        -:  366:  // the data layout interface.
645038331:  367:  while (op) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
645038331:  368:    if (auto module = dyn_cast<ModuleOp>(op))
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
143749987:  369:      return DataLayout(module);
call    0 returned 100%
501288344:  370:    if (auto iface = dyn_cast<DataLayoutOpInterface>(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  371:      return DataLayout(iface);
call    0 never executed
501288346:  372:    op = op->getParentOp();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  373:  }
    #####:  374:  return DataLayout();
call    0 never executed
        -:  375:}
        -:  376:
function _ZNK4mlir10DataLayout10checkValidEv called 287492641 returned 100% blocks executed 65%
287492641:  377:void mlir::DataLayout::checkValid() const {
        -:  378:#if LLVM_ENABLE_ABI_BREAKING_CHECKS
287492641:  379:  SmallVector<DataLayoutSpecInterface> specs;
call    0 returned 100%
287492641:  380:  collectParentLayouts(scope, specs);
call    0 returned 100%
287492644*:  381:  assert(specs.size() == layoutStack.size() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  382:         "data layout object used, but no longer valid due to the change in "
        -:  383:         "number of nested layouts");
287492644*:  384:  for (auto pair : llvm::zip(specs, layoutStack)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  385:    Attribute newLayout = std::get<0>(pair);
branch  0 never executed
branch  1 never executed
    #####:  386:    Attribute origLayout = std::get<1>(pair);
branch  0 never executed
branch  1 never executed
    #####:  387:    assert(newLayout == origLayout &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  388:           "data layout object used, but no longer valid "
        -:  389:           "due to the change in layout attributes");
        -:  390:  }
        -:  391:#endif
287492644*:  392:  assert(((!scope && !this->originalLayout) ||
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  393:          (scope && this->originalLayout == getCombinedDataLayout(scope))) &&
        -:  394:         "data layout object used, but no longer valid due to the change in "
        -:  395:         "layout spec");
287492635:  396:}
        -:  397:
        -:  398:/// Looks up the value for the given type key in the given cache. If there is no
        -:  399:/// such value in the cache, compute it using the given callback and put it in
        -:  400:/// the cache before returning.
function _ZL12cachedLookupN4mlir4TypeERN4llvm8DenseMapIS0_jNS1_12DenseMapInfoIS0_vEENS1_6detail12DenseMapPairIS0_jEEEENS1_12function_refIFjS0_EEE called 287492634 returned 100% blocks executed 100%
287492634:  401:static unsigned cachedLookup(Type t, DenseMap<Type, unsigned> &cache,
        -:  402:                             function_ref<unsigned(Type)> compute) {
287492634:  403:  auto it = cache.find(t);
call    0 returned 100%
287492632:  404:  if (it != cache.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
138487010:  405:    return it->second;
call    0 returned 100%
        -:  406:
149005633:  407:  auto result = cache.try_emplace(t, compute(t));
call    0 returned 100%
call    1 returned 100%
149005644:  408:  return result.first->second;
call    0 returned 100%
        -:  409:}
        -:  410:
function _ZNK4mlir10DataLayout11getTypeSizeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  411:unsigned mlir::DataLayout::getTypeSize(Type t) const {
    #####:  412:  checkValid();
call    0 never executed
function _ZZNK4mlir10DataLayout11getTypeSizeENS_4TypeEENKUlS1_E_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  413:  return cachedLookup(t, sizes, [&](Type ty) {
call    0 never executed
    #####:  414:    DataLayoutEntryList list;
branch  0 never executed
branch  1 never executed
    #####:  415:    if (originalLayout)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  416:      list = originalLayout.getSpecForType(ty.getTypeID());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  417:    if (auto iface = dyn_cast_or_null<DataLayoutOpInterface>(scope))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  418:      return iface.getTypeSize(ty, *this, list);
call    0 never executed
    #####:  419:    return detail::getDefaultTypeSize(ty, *this, list);
call    0 never executed
    #####:  420:  });
        -:  421:}
        -:  422:
function _ZNK4mlir10DataLayout17getTypeSizeInBitsENS_4TypeE called 287492643 returned 100% blocks executed 100%
287492643:  423:unsigned mlir::DataLayout::getTypeSizeInBits(Type t) const {
287492643:  424:  checkValid();
call    0 returned 100%
function _ZZNK4mlir10DataLayout17getTypeSizeInBitsENS_4TypeEENKUlS1_E_clES1_.isra.0 called 149005633 returned 100% blocks executed 50%
436498268:  425:  return cachedLookup(t, bitsizes, [&](Type ty) {
call    0 returned 100%
149005633:  426:    DataLayoutEntryList list;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
298011268*:  427:    if (originalLayout)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
    #####:  428:      list = originalLayout.getSpecForType(ty.getTypeID());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
297997812:  429:    if (auto iface = dyn_cast_or_null<DataLayoutOpInterface>(scope))
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  430:      return iface.getTypeSizeInBits(ty, *this, list);
call    0 never executed
149005635:  431:    return detail::getDefaultTypeSizeInBits(ty, *this, list);
call    0 returned 100%
287492646:  432:  });
        -:  433:}
        -:  434:
function _ZNK4mlir10DataLayout19getTypeABIAlignmentENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  435:unsigned mlir::DataLayout::getTypeABIAlignment(Type t) const {
    #####:  436:  checkValid();
call    0 never executed
function _ZZNK4mlir10DataLayout19getTypeABIAlignmentENS_4TypeEENKUlS1_E_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  437:  return cachedLookup(t, abiAlignments, [&](Type ty) {
call    0 never executed
    #####:  438:    DataLayoutEntryList list;
branch  0 never executed
branch  1 never executed
    #####:  439:    if (originalLayout)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  440:      list = originalLayout.getSpecForType(ty.getTypeID());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  441:    if (auto iface = dyn_cast_or_null<DataLayoutOpInterface>(scope))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  442:      return iface.getTypeABIAlignment(ty, *this, list);
call    0 never executed
    #####:  443:    return detail::getDefaultABIAlignment(ty, *this, list);
call    0 never executed
    #####:  444:  });
        -:  445:}
        -:  446:
function _ZNK4mlir10DataLayout25getTypePreferredAlignmentENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  447:unsigned mlir::DataLayout::getTypePreferredAlignment(Type t) const {
    #####:  448:  checkValid();
call    0 never executed
function _ZZNK4mlir10DataLayout25getTypePreferredAlignmentENS_4TypeEENKUlS1_E_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  449:  return cachedLookup(t, preferredAlignments, [&](Type ty) {
call    0 never executed
    #####:  450:    DataLayoutEntryList list;
branch  0 never executed
branch  1 never executed
    #####:  451:    if (originalLayout)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  452:      list = originalLayout.getSpecForType(ty.getTypeID());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  453:    if (auto iface = dyn_cast_or_null<DataLayoutOpInterface>(scope))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  454:      return iface.getTypePreferredAlignment(ty, *this, list);
call    0 never executed
    #####:  455:    return detail::getDefaultPreferredAlignment(ty, *this, list);
call    0 never executed
    #####:  456:  });
        -:  457:}
        -:  458:
        -:  459://===----------------------------------------------------------------------===//
        -:  460:// DataLayoutSpecInterface
        -:  461://===----------------------------------------------------------------------===//
        -:  462:
function _ZN4mlir23DataLayoutSpecInterface19bucketEntriesByTypeERN4llvm8DenseMapINS_6TypeIDENS1_11SmallVectorINS_24DataLayoutEntryInterfaceELj4EEENS1_12DenseMapInfoIS3_vEENS1_6detail12DenseMapPairIS3_S6_EEEERNS2_INS_10StringAttrES5_NS7_ISE_vEENSA_ISE_S5_EEEE called 0 returned 0% blocks executed 0%
    #####:  463:void DataLayoutSpecInterface::bucketEntriesByType(
        -:  464:    DenseMap<TypeID, DataLayoutEntryList> &types,
        -:  465:    DenseMap<StringAttr, DataLayoutEntryInterface> &ids) {
    #####:  466:  for (DataLayoutEntryInterface entry : getEntries()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  467:    if (auto type = entry.getKey().dyn_cast<Type>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  468:      types[type.getTypeID()].push_back(entry);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  469:    else
    #####:  470:      ids[entry.getKey().get<StringAttr>()] = entry;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  471:  }
    #####:  472:}
        -:  473:
function _ZN4mlir6detail20verifyDataLayoutSpecENS_23DataLayoutSpecInterfaceENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  474:LogicalResult mlir::detail::verifyDataLayoutSpec(DataLayoutSpecInterface spec,
        -:  475:                                                 Location loc) {
        -:  476:  // First, verify individual entries.
    #####:  477:  for (DataLayoutEntryInterface entry : spec.getEntries())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  478:    if (failed(entry.verifyEntry(loc)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  479:      return failure();
        -:  480:
        -:  481:  // Second, dispatch verifications of entry groups to types or dialects they
        -:  482:  // are are associated with.
    #####:  483:  DenseMap<TypeID, DataLayoutEntryList> types;
call    0 never executed
    #####:  484:  DenseMap<StringAttr, DataLayoutEntryInterface> ids;
call    0 never executed
call    1 never executed
    #####:  485:  spec.bucketEntriesByType(types, ids);
call    0 never executed
        -:  486:
    #####:  487:  for (const auto &kvp : types) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  488:    auto sampleType = kvp.second.front().getKey().get<Type>();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  489:    if (sampleType.isa<IndexType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  490:      assert(kvp.second.size() == 1 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  491:             "expected one data layout entry for non-parametric 'index' type");
    #####:  492:      if (!kvp.second.front().getValue().isa<IntegerAttr>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  493:        return emitError(loc)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  494:               << "expected integer attribute in the data layout entry for "
call    0 never executed
    #####:  495:               << sampleType;
call    0 never executed
    #####:  496:      continue;
        -:  497:    }
        -:  498:
    #####:  499:    if (sampleType.isa<IntegerType, FloatType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  500:      for (DataLayoutEntryInterface entry : kvp.second) {
branch  0 never executed
branch  1 never executed
    #####:  501:        auto value = entry.getValue().dyn_cast<DenseIntElementsAttr>();
call    0 never executed
call    1 never executed
    #####:  502:        if (!value || !value.getElementType().isSignlessInteger(32)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  503:          emitError(loc) << "expected a dense i32 elements attribute in the "
call    0 never executed
call    1 never executed
    #####:  504:                            "data layout entry "
call    0 never executed
    #####:  505:                         << entry;
call    0 never executed
    #####:  506:          return failure();
        -:  507:        }
        -:  508:
    #####:  509:        auto elements = llvm::to_vector<2>(value.getValues<int32_t>());
call    0 never executed
call    1 never executed
    #####:  510:        unsigned numElements = elements.size();
branch  0 never executed
branch  1 never executed
    #####:  511:        if (numElements < 1 || numElements > 2) {
branch  0 never executed
branch  1 never executed
    #####:  512:          emitError(loc) << "expected 1 or 2 elements in the data layout entry "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  513:                         << entry;
call    0 never executed
    #####:  514:          return failure();
        -:  515:        }
        -:  516:
    #####:  517:        int32_t abi = elements[0];
branch  0 never executed
branch  1 never executed
    #####:  518:        int32_t preferred = numElements == 2 ? elements[1] : abi;
branch  0 never executed
branch  1 never executed
    #####:  519:        if (preferred < abi) {
branch  0 never executed
branch  1 never executed
    #####:  520:          emitError(loc)
call    0 never executed
call    1 never executed
        -:  521:              << "preferred alignment is expected to be greater than or equal "
    #####:  522:                 "to the abi alignment in data layout entry "
call    0 never executed
    #####:  523:              << entry;
call    0 never executed
    #####:  524:          return failure();
branch  0 never executed
branch  1 never executed
        -:  525:        }
        -:  526:      }
    #####:  527:      continue;
        -:  528:    }
        -:  529:
    #####:  530:    if (isa<BuiltinDialect>(&sampleType.getDialect()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  531:      return emitError(loc) << "unexpected data layout for a built-in type";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  532:
    #####:  533:    auto dlType = sampleType.dyn_cast<DataLayoutTypeInterface>();
call    0 never executed
    #####:  534:    if (!dlType)
branch  0 never executed
branch  1 never executed
    #####:  535:      return emitError(loc)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  536:             << "data layout specified for a type that does not support it";
call    0 never executed
    #####:  537:    if (failed(dlType.verifyEntries(kvp.second, loc)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  538:      return failure();
        -:  539:  }
        -:  540:
    #####:  541:  for (const auto &kvp : ids) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  542:    StringAttr identifier = kvp.second.getKey().get<StringAttr>();
call    0 never executed
call    1 never executed
    #####:  543:    Dialect *dialect = identifier.getReferencedDialect();
call    0 never executed
        -:  544:
        -:  545:    // Ignore attributes that belong to an unknown dialect, the dialect may
        -:  546:    // actually implement the relevant interface but we don't know about that.
    #####:  547:    if (!dialect)
branch  0 never executed
branch  1 never executed
    #####:  548:      continue;
        -:  549:
    #####:  550:    const auto *iface = dyn_cast<DataLayoutDialectInterface>(dialect);
call    0 never executed
    #####:  551:    if (!iface) {
branch  0 never executed
branch  1 never executed
    #####:  552:      return emitError(loc)
call    0 never executed
call    1 never executed
    #####:  553:             << "the '" << dialect->getNamespace()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  554:             << "' dialect does not support identifier data layout entries";
call    0 never executed
        -:  555:    }
    #####:  556:    if (failed(iface->verifyEntry(kvp.second, loc)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  557:      return failure();
        -:  558:  }
        -:  559:
    #####:  560:  return success();
call    0 never executed
        -:  561:}
        -:  562:
        -:  563:#include "mlir/Interfaces/DataLayoutAttrInterface.cpp.inc"
        -:  564:#include "mlir/Interfaces/DataLayoutOpInterface.cpp.inc"
        -:  565:#include "mlir/Interfaces/DataLayoutTypeInterface.cpp.inc"
