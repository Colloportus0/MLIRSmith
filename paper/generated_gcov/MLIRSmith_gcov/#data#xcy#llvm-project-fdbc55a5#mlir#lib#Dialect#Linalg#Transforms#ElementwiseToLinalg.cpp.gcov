        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Linalg/Transforms/ElementwiseToLinalg.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/ElementwiseToLinalg.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/ElementwiseToLinalg.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- ElementwiseToLinalg.cpp - conversion of elementwise to linalg ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Linalg/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   12:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   13:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   14:#include "mlir/Dialect/Linalg/Utils/Utils.h"
        -:   15:#include "mlir/Transforms/DialectConversion.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:#define GEN_PASS_DEF_CONVERTELEMENTWISETOLINALG
        -:   19:#include "mlir/Dialect/Linalg/Passes.h.inc"
        -:   20:} // namespace mlir
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
function _ZL38isElementwiseMappableOpOnRankedTensorsPN4mlir9OperationE called 2250936 returned 100% blocks executed 100%
  2250936:   24:static bool isElementwiseMappableOpOnRankedTensors(Operation *op) {
  2250936:   25:  if (!OpTrait::hasElementwiseMappableTraits(op))
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        -:   26:    return false;
        -:   27:
        -:   28:  // TODO: The conversion pattern can be made to work for `any_of` here, but
        -:   29:  // it's more complex as it requires tracking which operands are scalars.
   906728:   30:  return llvm::all_of(op->getOperandTypes(),
call    0 returned 100%
call    1 returned 100%
        -:   31:                      [](Type type) { return type.isa<RankedTensorType>(); });
        -:   32:}
        -:   33:
        -:   34:/// Given `op` assumed `isElementwiseMappableOpOnRankedTensors`, iterate over
        -:   35:/// the result types and return a list of values such that, for each result type
        -:   36:/// `t` and value `v` at the same index `idx`:
        -:   37:///   1. `v.getType() == t`
        -:   38:///   2. If an operand of `op` has type `t`, let `operand_first` be the first
        -:   39:///      such operand. Then`v == operand_first`.
        -:   40:///   3. Otherwise, v is a newly created `tensor::EmptyOp` with:
        -:   41:///        a. Static and dynamic dims extracted from the first operand of `op`.
        -:   42:///        b. Elemental type equal to the elemental type of `t`.
        -:   43:///
        -:   44:/// This is sufficient because ElementwiseMappable guarantees that "The static
        -:   45:/// types of all vector (resp. tensor) operands and results must have the same
        -:   46:/// shape".
        -:   47:static SmallVector<Value, 4>
function _ZL38getOrCreateOperandsMatchingResultTypesRN4mlir9OpBuilderEPNS_9OperationE called 95810 returned 100% blocks executed 55%
    95810:   48:getOrCreateOperandsMatchingResultTypes(OpBuilder &b, Operation *op) {
   95810*:   49:  assert(isElementwiseMappableOpOnRankedTensors(op));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
    95810:   50:  Location loc = op->getLoc();
call    0 returned 100%
    95810:   51:  ValueRange operands = op->getOperands();
call    0 returned 100%
call    1 returned 100%
   191620:   52:  TypeRange rankedTensorTypes = op->getResultTypes();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    95810:   53:  SmallVector<Value, 4> res;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    95810:   54:  res.reserve(rankedTensorTypes.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   191620:   55:  for (Type t : rankedTensorTypes) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:   56:    // Try to find an operand with type matching the result tensor.
    95810:   57:    bool found = false;
  191620*:   58:    for (Value v : operands) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    95810:   59:      if (v.getType() == t) {
branch  0 taken 100%
branch  1 taken 0%
    95810:   60:        found = true;
    95810:   61:        res.push_back(v);
call    0 returned 100%
    95810:   62:        break;
        -:   63:      }
        -:   64:    }
   95810*:   65:    if (found)
    95810:   66:      continue;
        -:   67:
        -:   68:    // Extract static / dynamic shape mix from the first operand.
    #####:   69:    Value firstOperand = operands.front();
call    0 never executed
    #####:   70:    auto rankedTensorType = t.cast<RankedTensorType>();
call    0 never executed
    #####:   71:    auto staticShape = llvm::to_vector<4>(rankedTensorType.getShape());
call    0 never executed
call    1 never executed
    #####:   72:    auto dynamicShape = linalg::getDynOperands(loc, firstOperand, b);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   73:
    #####:   74:    res.push_back(b.create<tensor::EmptyOp>(
call    0 never executed
    #####:   75:        loc, staticShape, rankedTensorType.getElementType(), dynamicShape));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   76:  }
    95810:   77:  return res;
        -:   78:}
        -:   79:
        -:   80:namespace {
        -:   81:struct ConvertAnyElementwiseMappableOpOnRankedTensors : public RewritePattern {
function _ZN12_GLOBAL__N_146ConvertAnyElementwiseMappableOpOnRankedTensorsC2EPN4mlir11MLIRContextE called 437 returned 100% blocks executed 100%
      437:   82:  ConvertAnyElementwiseMappableOpOnRankedTensors(MLIRContext *context)
      437:   83:      : RewritePattern(MatchAnyOpTypeTag(), /*benefit=*/1, context) {}
call    0 returned 100%
call    1 returned 100%
function _ZNK12_GLOBAL__N_146ConvertAnyElementwiseMappableOpOnRankedTensors15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterE called 95810 returned 100% blocks executed 85%
    95810:   84:  LogicalResult matchAndRewrite(Operation *op,
        -:   85:                                PatternRewriter &rewriter) const final {
    95810:   86:    if (!isElementwiseMappableOpOnRankedTensors(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   87:      return rewriter.notifyMatchFailure(
    #####:   88:          op, "requires elementwise op on ranked tensors");
call    0 never executed
        -:   89:
    95810:   90:    auto rank = op->getResult(0).getType().cast<RankedTensorType>().getRank();
call    0 returned 100%
call    1 returned 100%
    95810:   91:    SmallVector<AffineMap, 3> indexingMaps(
    95810:   92:        op->getNumResults() + op->getNumOperands(),
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   191620:   93:        rewriter.getMultiDimIdentityMap(rank));
call    0 returned 100%
call    1 returned 100%
    95810:   94:    SmallVector<StringRef, 6> iteratorTypes(rank,
call    0 returned 100%
   191620:   95:                                            getParallelIteratorTypeName());
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
   191620:   96:    auto outputs = getOrCreateOperandsMatchingResultTypes(rewriter, op);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    95810:   97:    rewriter.replaceOpWithNewOp<linalg::GenericOp>(
   287430:   98:        op, /*resultTensorTypes=*/op->getResultTypes(),
    95810:   99:        /*inputs=*/op->getOperands(),
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  100:        /*outputs=*/outputs,
        -:  101:        /*indexingMaps=*/indexingMaps,
        -:  102:        /*iteratorTypes=*/iteratorTypes,
        -:  103:        /*bodyBuilder=*/
function _ZZNK12_GLOBAL__N_146ConvertAnyElementwiseMappableOpOnRankedTensors15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES7_S8_S9_.isra.0 called 95810 returned 100% blocks executed 89%
    95810:  104:        [&](OpBuilder &builder, Location loc, ValueRange regionArgs) {
    95810:  105:          auto resultTypes = llvm::to_vector<6>(
function _ZZZNK12_GLOBAL__N_146ConvertAnyElementwiseMappableOpOnRankedTensors15matchAndRewriteEPN4mlir9OperationERNS1_15PatternRewriterEENKUlRNS1_9OpBuilderENS1_8LocationENS1_10ValueRangeEE_clES7_S8_S9_ENKUlNS1_4TypeEE_clESB_.isra.0 called 95810 returned 100% blocks executed 100%
   191620:  106:              llvm::map_range(op->getResultTypes(), [](Type type) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    95810:  107:                return type.cast<TensorType>().getElementType();
call    0 returned 100%
call    1 returned 100%
    95810:  108:              }));
call    0 returned 100%
    95810:  109:          auto *scalarOp =
   191620:  110:              builder.create(loc, op->getName().getIdentifier(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
   191620:  111:                             regionArgs.take_front(op->getNumOperands()),
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  112:                             resultTypes, op->getAttrs());
   191620:  113:          builder.create<linalg::YieldOp>(loc, scalarOp->getResults());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
   191620:  114:        });
call    0 returned 100%
call    1 returned 100%
    95810:  115:    return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  116:  }
        -:  117:};
        -:  118:} // namespace
        -:  119:
function _ZN4mlir6linalg45populateElementwiseToLinalgConversionPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     437*:  120:void mlir::linalg::populateElementwiseToLinalgConversionPatterns(
        -:  121:    RewritePatternSet &patterns) {
     437*:  122:  patterns.add<ConvertAnyElementwiseMappableOpOnRankedTensors>(
    #####:  123:      patterns.getContext());
call    0 never executed
    #####:  124:}
        -:  125:
        -:  126:namespace {
  116709*:  127:class ConvertElementwiseToLinalgPass
call    0 never executed
call    1 returned 100%
        -:  128:    : public impl::ConvertElementwiseToLinalgBase<
        -:  129:          ConvertElementwiseToLinalgPass> {
        -:  130:
function _ZN12_GLOBAL__N_130ConvertElementwiseToLinalgPass14runOnOperationEv called 437 returned 100% blocks executed 88%
      437:  131:  void runOnOperation() final {
      437:  132:    auto *func = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      437:  133:    auto *context = &getContext();
call    0 returned 100%
      437:  134:    ConversionTarget target(*context);
call    0 returned 100%
      874:  135:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
        -:  136:
      437:  137:    mlir::linalg::populateElementwiseToLinalgConversionPatterns(patterns);
call    0 returned 100%
      437:  138:    target.markUnknownOpDynamicallyLegal([](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
  2059316:  139:      return !isElementwiseMappableOpOnRankedTensors(op);
call    0 returned 100%
        -:  140:    });
        -:  141:
      437:  142:    if (failed(applyPartialConversion(func, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  143:      signalPassFailure();
call    0 never executed
      437:  144:  }
        -:  145:};
        -:  146:} // namespace
        -:  147:
function _ZN4mlir36createConvertElementwiseToLinalgPassEv called 116709 returned 100% blocks executed 100%
   116709:  148:std::unique_ptr<Pass> mlir::createConvertElementwiseToLinalgPass() {
   116709:  149:  return std::make_unique<ConvertElementwiseToLinalgPass>();
call    0 returned 100%
        -:  150:}
