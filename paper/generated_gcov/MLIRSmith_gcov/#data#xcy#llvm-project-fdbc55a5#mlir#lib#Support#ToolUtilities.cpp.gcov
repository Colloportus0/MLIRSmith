        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Support/ToolUtilities.cpp
        -:    0:Graph:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/ToolUtilities.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/ToolUtilities.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- ToolUtilities.cpp - MLIR Tool Utilities ----------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines common utilities for implementing MLIR tools.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Support/ToolUtilities.h"
        -:   14:#include "mlir/Support/LLVM.h"
        -:   15:#include "mlir/Support/LogicalResult.h"
        -:   16:#include "llvm/Support/SourceMgr.h"
        -:   17:#include "llvm/Support/raw_ostream.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:LogicalResult
function _ZN4mlir21splitAndProcessBufferESt10unique_ptrIN4llvm12MemoryBufferESt14default_deleteIS2_EENS1_12function_refIFNS_13LogicalResultES5_RNS1_11raw_ostreamEEEES9_bb called 94572 returned 100% blocks executed 53%
    94572:   22:mlir::splitAndProcessBuffer(std::unique_ptr<llvm::MemoryBuffer> originalBuffer,
        -:   23:                            ChunkBufferHandler processChunkBuffer,
        -:   24:                            raw_ostream &os, bool enableSplitting,
        -:   25:                            bool insertMarkerInOutput) {
        -:   26:  // If splitting is disabled, we process the full input buffer.
    94572:   27:  if (!enableSplitting)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   187926:   28:    return processChunkBuffer(std::move(originalBuffer), os);
call    0 returned 100%
        -:   29:
      483:   30:  const char splitMarkerConst[] = "// -----";
      483:   31:  StringRef splitMarker(splitMarkerConst);
call    0 returned 100%
      483:   32:  const int splitMarkerLen = splitMarker.size();
call    0 returned 100%
        -:   33:
      483:   34:  auto *origMemBuffer = originalBuffer.get();
call    0 returned 100%
      483:   35:  SmallVector<StringRef, 8> rawSourceBuffers;
call    0 returned 100%
      483:   36:  const int checkLen = 2;
        -:   37:  // Split dropping the last checkLen chars to enable flagging near misses.
      483:   38:  origMemBuffer->getBuffer().split(rawSourceBuffers,
call    0 returned 100%
call    1 returned 100%
        -:   39:                                   splitMarker.drop_back(checkLen));
      483:   40:  if (rawSourceBuffers.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:    return success();
        -:   42:
        -:   43:  // Add the original buffer to the source manager.
      961:   44:  llvm::SourceMgr fileSourceMgr;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      483:   45:  fileSourceMgr.AddNewSourceBuffer(std::move(originalBuffer), SMLoc());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   46:
        -:   47:  // Flag near misses by iterating over all the sub-buffers found when splitting
        -:   48:  // with the prefix of the splitMarker. Use a sliding window where we only add
        -:   49:  // a buffer as a sourceBuffer if terminated by a full match of the
        -:   50:  // splitMarker, else flag a warning (if near miss) and extend the size of the
        -:   51:  // buffer under consideration.
      961:   52:  SmallVector<StringRef, 8> sourceBuffers;
call    0 returned 100%
      483:   53:  StringRef prev;
      966:   54:  for (auto buffer : rawSourceBuffers) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      483:   55:    if (prev.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      483:   56:      prev = buffer;
      483:   57:      continue;
        -:   58:    }
        -:   59:
        -:   60:    // Check that suffix is as expected and doesn't have any dash post.
    #####:   61:    bool expectedSuffix = buffer.startswith(splitMarker.take_back(checkLen)) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   62:                          buffer.size() > checkLen && buffer[checkLen] != '0';
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   63:    if (expectedSuffix) {
    #####:   64:      sourceBuffers.push_back(prev);
call    0 never executed
    #####:   65:      prev = buffer.drop_front(checkLen);
call    0 never executed
        -:   66:    } else {
        -:   67:      // TODO: Consider making this a failure.
    #####:   68:      auto splitLoc = SMLoc::getFromPointer(buffer.data());
call    0 never executed
    #####:   69:      fileSourceMgr.PrintMessage(llvm::errs(), splitLoc,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   70:                                 llvm::SourceMgr::DK_Warning,
        -:   71:                                 "near miss with file split marker");
    #####:   72:      prev = StringRef(prev.data(),
    #####:   73:                       prev.size() + splitMarkerLen - checkLen + buffer.size());
        -:   74:    }
        -:   75:  }
      483:   76:  if (!prev.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      483:   77:    sourceBuffers.push_back(prev);
call    0 returned 100%
        -:   78:
        -:   79:  // Process each chunk in turn.
      483:   80:  bool hadFailure = false;
function _ZZN4mlir21splitAndProcessBufferESt10unique_ptrIN4llvm12MemoryBufferESt14default_deleteIS2_EENS1_12function_refIFNS_13LogicalResultES5_RNS1_11raw_ostreamEEEES9_bbENKUlNS1_9StringRefEE_clESC_ called 483 returned 99% blocks executed 81%
      966:   81:  auto interleaveFn = [&](StringRef subBuffer) {
      483:   82:    auto splitLoc = SMLoc::getFromPointer(subBuffer.data());
call    0 returned 100%
      483:   83:    unsigned splitLine = fileSourceMgr.getLineAndColumn(splitLoc).first;
call    0 returned 100%
      483:   84:    auto subMemBuffer = llvm::MemoryBuffer::getMemBufferCopy(
      483:   85:        subBuffer, Twine("within split at ") +
call    0 returned 100%
call    1 returned 100%
      966:   86:                       origMemBuffer->getBufferIdentifier() + ":" +
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      966:   87:                       Twine(splitLine) + " offset ");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      961:   88:    if (failed(processChunkBuffer(std::move(subMemBuffer), os)))
call    0 returned 99%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
      173:   89:      hadFailure = true;
      961:   90:  };
      483:   91:  llvm::interleave(sourceBuffers, os, interleaveFn,
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 99%
        -:   92:                   insertMarkerInOutput ? "\n// -----\n" : "");
        -:   93:
        -:   94:  // If any fails, then return a failure of the tool.
      478:   95:  return failure(hadFailure);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   96:}
