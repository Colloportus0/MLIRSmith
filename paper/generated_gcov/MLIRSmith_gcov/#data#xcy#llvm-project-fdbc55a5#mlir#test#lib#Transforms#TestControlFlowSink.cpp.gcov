        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Transforms/TestControlFlowSink.cpp
        -:    0:Graph:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestControlFlowSink.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestControlFlowSink.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestControlFlowSink.cpp - Test control-flow sink pass --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This pass tests the control-flow sink utilities by implementing an example
        -:   10:// control-flow sink pass.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/IR/Dominance.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/ControlFlowSinkUtils.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace {
        -:   22:/// An example control-flow sink pass to test the control-flow sink utilites.
        -:   23:/// This pass will sink ops named `test.sink_me` and tag them with an attribute
        -:   24:/// `was_sunk` into the first region of `test.sink_target` ops.
   145765:   25:struct TestControlFlowSinkPass
call    0 returned 100%
call    1 returned 100%
        -:   26:    : public PassWrapper<TestControlFlowSinkPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_123TestControlFlowSinkPass13resolveTypeIDEv called 116677 returned 100% blocks executed 100%
   116677:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestControlFlowSinkPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:
        -:   29:  /// Get the command-line argument of the test pass.
function _ZNK12_GLOBAL__N_123TestControlFlowSinkPass11getArgumentEv called 116185 returned 100% blocks executed 100%
   116185:   30:  StringRef getArgument() const final { return "test-control-flow-sink"; }
        -:   31:  /// Get the description of the test pass.
function _ZNK12_GLOBAL__N_123TestControlFlowSinkPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   32:  StringRef getDescription() const final {
   116163:   33:    return "Test control-flow sink pass";
        -:   34:  }
        -:   35:
        -:   36:  /// Runs the pass on the function.
function _ZN12_GLOBAL__N_123TestControlFlowSinkPass14runOnOperationEv called 403 returned 100% blocks executed 100%
      403:   37:  void runOnOperation() override {
      403:   38:    auto &domInfo = getAnalysis<DominanceInfo>();
call    0 returned 100%
function _ZZN12_GLOBAL__N_123TestControlFlowSinkPass14runOnOperationEvENKUlPN4mlir9OperationEPNS1_6RegionEE_clES3_S5_.isra.0 called 0 returned 0% blocks executed 0%
     403*:   39:    auto shouldMoveIntoRegion = [](Operation *op, Region *region) {
    #####:   40:      return region->getRegionNumber() == 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   41:             op->getName().getStringRef() == "test.sink_me";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   42:    };
function _ZZN12_GLOBAL__N_123TestControlFlowSinkPass14runOnOperationEvENKUlPN4mlir9OperationEPNS1_6RegionEE0_clES3_S5_.isra.0 called 0 returned 0% blocks executed 0%
     403*:   43:    auto moveIntoRegion = [](Operation *op, Region *region) {
    #####:   44:      Block &entry = region->front();
call    0 never executed
    #####:   45:      op->moveBefore(&entry, entry.begin());
call    0 never executed
    #####:   46:      op->setAttr("was_sunk",
call    0 never executed
call    1 never executed
    #####:   47:                  Builder(op).getI32IntegerAttr(region->getRegionNumber()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   48:    };
        -:   49:
function _ZZN12_GLOBAL__N_123TestControlFlowSinkPass14runOnOperationEvENKUlPN4mlir9OperationEE1_clES3_ called 825631 returned 100% blocks executed 31%
      403:   50:    getOperation()->walk([&](Operation *op) {
call    0 returned 100%
call    1 returned 100%
   825631:   51:      if (op->getName().getStringRef() != "test.sink_target")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   825630:   52:        return;
    #####:   53:      SmallVector<Region *> regions =
branch  0 never executed
branch  1 never executed
    #####:   54:          llvm::to_vector(RegionRange(op->getRegions()));
call    0 never executed
call    1 never executed
    #####:   55:      controlFlowSink(regions, domInfo, shouldMoveIntoRegion, moveIntoRegion);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   56:    });
      403:   57:  }
        -:   58:};
        -:   59:} // end anonymous namespace
        -:   60:
        -:   61:namespace mlir {
        -:   62:namespace test {
function _ZN4mlir4test27registerTestControlFlowSinkEv called 116163 returned 100% blocks executed 100%
   116163:   63:void registerTestControlFlowSink() {
   116163:   64:  PassRegistration<TestControlFlowSinkPass>();
call    0 returned 100%
   116163:   65:}
        -:   66:} // end namespace test
        -:   67:} // end namespace mlir
