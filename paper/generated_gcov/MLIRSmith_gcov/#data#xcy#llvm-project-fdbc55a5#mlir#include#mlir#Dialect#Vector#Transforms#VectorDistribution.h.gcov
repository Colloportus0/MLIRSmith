        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Vector/Transforms/VectorDistribution.h
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Vector/CMakeFiles/MLIRVectorTestPasses.dir/TestVectorTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Vector/CMakeFiles/MLIRVectorTestPasses.dir/TestVectorTransforms.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- VectorDistribution.h - Vector distribution patterns --*- C++------*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_DIALECT_VECTOR_TRANSFORMS_VECTORDISTRIBUTION_H_
        -:   10:#define MLIR_DIALECT_VECTOR_TRANSFORMS_VECTORDISTRIBUTION_H_
        -:   11:
        -:   12:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   13:
        -:   14:namespace mlir {
        -:   15:class RewritePatternSet;
        -:   16:namespace vector {
        -:   17:
      415:   18:struct WarpExecuteOnLane0LoweringOptions {
call    0 returned 100%
        -:   19:  /// Lamdba function to let users allocate memory needed for the lowering of
        -:   20:  /// WarpExecuteOnLane0Op.
        -:   21:  /// The function needs to return an allocation that the lowering can use as
        -:   22:  /// temporary memory. The allocation needs to match the shape of the type (the
        -:   23:  /// type may be VectorType or a scalar) and be availble for the current warp.
        -:   24:  /// If there are several warps running in parallel the allocation needs to be
        -:   25:  /// split so that each warp has its own allocation.
        -:   26:  using WarpAllocationFn =
        -:   27:      std::function<Value(Location, OpBuilder &, WarpExecuteOnLane0Op, Type)>;
        -:   28:  WarpAllocationFn warpAllocationFn = nullptr;
        -:   29:
        -:   30:  /// Lamdba function to let user emit operation to syncronize all the thread
        -:   31:  /// within a warp. After this operation all the threads can see any memory
        -:   32:  /// written before the operation.
        -:   33:  using WarpSyncronizationFn =
        -:   34:      std::function<void(Location, OpBuilder &, WarpExecuteOnLane0Op)>;
        -:   35:  WarpSyncronizationFn warpSyncronizationFn = nullptr;
        -:   36:};
        -:   37:
        -:   38:void populateWarpExecuteOnLane0OpToScfForPattern(
        -:   39:    RewritePatternSet &patterns,
        -:   40:    const WarpExecuteOnLane0LoweringOptions &options,
        -:   41:    PatternBenefit benefit = 1);
        -:   42:
        -:   43:using DistributionMapFn = std::function<AffineMap(vector::TransferWriteOp)>;
        -:   44:
        -:   45:/// Distribute transfer_write ops based on the affine map returned by
        -:   46:/// `distributionMapFn`.
        -:   47:/// Example:
        -:   48:/// ```
        -:   49:/// %0 = vector.warp_execute_on_lane_0(%id){
        -:   50:///   ...
        -:   51:///   vector.transfer_write %v, %A[%c0] : vector<32xf32>, memref<128xf32>
        -:   52:///   vector.yield
        -:   53:/// }
        -:   54:/// ```
        -:   55:/// To
        -:   56:/// ```
        -:   57:/// %r:3 = vector.warp_execute_on_lane_0(%id) -> (vector<1xf32>) {
        -:   58:///   ...
        -:   59:///   vector.yield %v : vector<32xf32>
        -:   60:/// }
        -:   61:/// vector.transfer_write %v, %A[%id] : vector<1xf32>, memref<128xf32>
        -:   62:void populateDistributeTransferWriteOpPatterns(
        -:   63:    RewritePatternSet &patterns, const DistributionMapFn &distributionMapFn,
        -:   64:    PatternBenefit benefit = 1);
        -:   65:
        -:   66:/// Move scalar operations with no dependency on the warp op outside of the
        -:   67:/// region.
        -:   68:void moveScalarUniformCode(WarpExecuteOnLane0Op op);
        -:   69:
        -:   70:/// Collect patterns to propagate warp distribution.
        -:   71:void populatePropagateWarpVectorDistributionPatterns(
        -:   72:    RewritePatternSet &pattern, PatternBenefit benefit = 1);
        -:   73:
        -:   74:/// Lambda signature to compute a reduction of a distributed value for the given
        -:   75:/// reduction kind and size.
        -:   76:using DistributedReductionFn =
        -:   77:    std::function<Value(Location, OpBuilder &, Value, CombiningKind, uint32_t)>;
        -:   78:
        -:   79:/// Collect patterns to distribute vector reduction ops using given lamdba to
        -:   80:/// distribute reduction op.
        -:   81:void populateDistributeReduction(
        -:   82:    RewritePatternSet &pattern,
        -:   83:    const DistributedReductionFn &distributedReductionFn,
        -:   84:    PatternBenefit benefit = 1);
        -:   85:
        -:   86:} // namespace vector
        -:   87:} // namespace mlir
        -:   88:#endif // MLIR_DIALECT_VECTOR_TRANSFORMS_VECTORDISTRIBUTION_H_
