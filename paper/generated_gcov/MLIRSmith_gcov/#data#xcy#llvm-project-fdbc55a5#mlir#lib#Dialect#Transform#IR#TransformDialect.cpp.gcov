        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Transform/IR/TransformDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Transform/IR/CMakeFiles/obj.MLIRTransformDialect.dir/TransformDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Transform/IR/CMakeFiles/obj.MLIRTransformDialect.dir/TransformDialect.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TransformDialect.cpp - Transform Dialect Definition ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Transform/IR/TransformDialect.h"
        -:   10:#include "mlir/Dialect/PDL/IR/PDL.h"
        -:   11:#include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
        -:   12:#include "mlir/Dialect/Transform/IR/TransformInterfaces.h"
        -:   13:#include "mlir/Dialect/Transform/IR/TransformOps.h"
        -:   14:#include "mlir/Dialect/Transform/IR/TransformTypes.h"
        -:   15:#include "mlir/IR/DialectImplementation.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:#include "mlir/Dialect/Transform/IR/TransformDialect.cpp.inc"
        -:   20:
        -:   21:#ifndef NDEBUG
function _ZN4mlir9transform6detail35checkImplementsTransformOpInterfaceEN4llvm9StringRefEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:   22:void transform::detail::checkImplementsTransformOpInterface(
        -:   23:    StringRef name, MLIRContext *context) {
        -:   24:  // Since the operation is being inserted into the Transform dialect and the
        -:   25:  // dialect does not implement the interface fallback, only check for the op
        -:   26:  // itself having the interface implementation.
    #####:   27:  RegisteredOperationName opName =
    #####:   28:      *RegisteredOperationName::lookup(name, context);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   29:  assert((opName.hasInterface<TransformOpInterface>() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:   30:          opName.hasTrait<OpTrait::IsTerminator>()) &&
        -:   31:         "non-terminator ops injected into the transform dialect must "
        -:   32:         "implement TransformOpInterface");
    #####:   33:  assert(opName.hasInterface<MemoryEffectOpInterface>() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   34:         "ops injected into the transform dialect must implement "
        -:   35:         "MemoryEffectsOpInterface");
    #####:   36:}
        -:   37:
function _ZN4mlir9transform6detail37checkImplementsTransformTypeInterfaceENS_6TypeIDEPNS_11MLIRContextE called 0 returned 0% blocks executed 0%
    #####:   38:void transform::detail::checkImplementsTransformTypeInterface(
        -:   39:    TypeID typeID, MLIRContext *context) {
    #####:   40:  const auto &abstractType = AbstractType::lookup(typeID, context);
call    0 never executed
    #####:   41:  assert(abstractType.hasInterface(TransformTypeInterface::getInterfaceID()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   42:}
        -:   43:#endif // NDEBUG
        -:   44:
        -:   45:namespace {
    #####:   46:struct PDLOperationTypeTransformTypeInterfaceImpl
call    0 never executed
        -:   47:    : public transform::TransformTypeInterface::ExternalModel<
        -:   48:          PDLOperationTypeTransformTypeInterfaceImpl, pdl::OperationType> {
        -:   49:  DiagnosedSilenceableFailure
    #####:   50:  checkPayload(Type type, Location loc, ArrayRef<Operation *> payload) const {
    #####:   51:    return DiagnosedSilenceableFailure::success();
        -:   52:  }
        -:   53:};
        -:   54:} // namespace
        -:   55:
function _ZN4mlir9transform16TransformDialect10initializeEv called 0 returned 0% blocks executed 0%
    #####:   56:void transform::TransformDialect::initialize() {
        -:   57:  // Using the checked versions to enable the same assertions as for the ops
        -:   58:  // from extensions.
    #####:   59:  addOperationsChecked<
        -:   60:#define GET_OP_LIST
        -:   61:#include "mlir/Dialect/Transform/IR/TransformOps.cpp.inc"
    #####:   62:      >();
call    0 never executed
    #####:   63:  initializeTypes();
call    0 never executed
        -:   64:
    #####:   65:  pdl::OperationType::attachInterface<
    #####:   66:      PDLOperationTypeTransformTypeInterfaceImpl>(*getContext());
call    0 never executed
    #####:   67:}
        -:   68:
function _ZN4mlir9transform16TransformDialect20mergeInPDLMatchHooksEON4llvm9StringMapISt8functionIFNS_13LogicalResultERNS_15PatternRewriterENS2_8ArrayRefINS_8PDLValueEEEEENS2_15MallocAllocatorEEE called 0 returned 0% blocks executed 0%
    #####:   69:void transform::TransformDialect::mergeInPDLMatchHooks(
        -:   70:    llvm::StringMap<PDLConstraintFunction> &&constraintFns) {
        -:   71:  // Steal the constraint functions form the given map.
    #####:   72:  for (auto &it : constraintFns)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   73:    pdlMatchHooks.registerConstraintFunction(it.getKey(), std::move(it.second));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:}
        -:   75:
        -:   76:const llvm::StringMap<PDLConstraintFunction> &
function _ZNK4mlir9transform16TransformDialect21getPDLConstraintHooksEv called 0 returned 0% blocks executed 0%
    #####:   77:transform::TransformDialect::getPDLConstraintHooks() const {
    #####:   78:  return pdlMatchHooks.getConstraintFunctions();
        -:   79:}
        -:   80:
function _ZNK4mlir9transform16TransformDialect9parseTypeERNS_16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:   81:Type transform::TransformDialect::parseType(DialectAsmParser &parser) const {
    #####:   82:  StringRef keyword;
    #####:   83:  SMLoc loc = parser.getCurrentLocation();
call    0 never executed
    #####:   84:  if (failed(parser.parseKeyword(&keyword)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:    return nullptr;
        -:   86:
    #####:   87:  auto it = typeParsingHooks.find(keyword);
call    0 never executed
    #####:   88:  if (it == typeParsingHooks.end()) {
branch  0 never executed
branch  1 never executed
    #####:   89:    parser.emitError(loc) << "unknown type mnemonic: " << keyword;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   90:    return nullptr;
        -:   91:  }
        -:   92:
    #####:   93:  return it->getValue()(parser);
call    0 never executed
        -:   94:}
        -:   95:
function _ZNK4mlir9transform16TransformDialect9printTypeENS_4TypeERNS_17DialectAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   96:void transform::TransformDialect::printType(Type type,
        -:   97:                                            DialectAsmPrinter &printer) const {
    #####:   98:  auto it = typePrintingHooks.find(type.getTypeID());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   99:  assert(it != typePrintingHooks.end() && "printing unknown type");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  100:  it->getSecond()(type, printer);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:}
        -:  102:
function _ZN4mlir9transform16TransformDialect31reportDuplicateTypeRegistrationEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  103:void transform::TransformDialect::reportDuplicateTypeRegistration(
        -:  104:    StringRef mnemonic) {
    #####:  105:  std::string buffer;
call    0 never executed
    #####:  106:  llvm::raw_string_ostream msg(buffer);
call    0 never executed
    #####:  107:  msg << "extensible dialect type '" << mnemonic
call    0 never executed
call    1 never executed
    #####:  108:      << "' is already registered with a different implementation";
call    0 never executed
    #####:  109:  msg.flush();
branch  0 never executed
branch  1 never executed
    #####:  110:  llvm::report_fatal_error(StringRef(buffer));
        -:  111:}
        -:  112:
function _ZN4mlir9transform16TransformDialect29reportDuplicateOpRegistrationEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:  113:void transform::TransformDialect::reportDuplicateOpRegistration(
        -:  114:    StringRef opName) {
    #####:  115:  std::string buffer;
call    0 never executed
    #####:  116:  llvm::raw_string_ostream msg(buffer);
call    0 never executed
    #####:  117:  msg << "extensible dialect operation '" << opName
call    0 never executed
call    1 never executed
    #####:  118:      << "' is already registered with a mismatching TypeID";
call    0 never executed
    #####:  119:  msg.flush();
branch  0 never executed
branch  1 never executed
    #####:  120:  llvm::report_fatal_error(StringRef(buffer));
        -:  121:}
        -:  122:
        -:  123:#include "mlir/Dialect/Transform/IR/TransformDialectEnums.cpp.inc"
