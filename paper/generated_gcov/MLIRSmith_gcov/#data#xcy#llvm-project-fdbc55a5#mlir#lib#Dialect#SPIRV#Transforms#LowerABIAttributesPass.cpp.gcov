        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SPIRV/Transforms/LowerABIAttributesPass.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/LowerABIAttributesPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/Transforms/CMakeFiles/obj.MLIRSPIRVTransforms.dir/LowerABIAttributesPass.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- LowerABIAttributesPass.cpp - Decorate composite type ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to lower attributes that specify the shader ABI
        -:   10:// for the functions in the generated SPIR-V module.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/SPIRV/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   18:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   19:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   20:#include "mlir/Transforms/DialectConversion.h"
        -:   21:#include "llvm/ADT/SetVector.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:namespace spirv {
        -:   25:#define GEN_PASS_DEF_SPIRVLOWERABIATTRIBUTES
        -:   26:#include "mlir/Dialect/SPIRV/Transforms/Passes.h.inc"
        -:   27:} // namespace spirv
        -:   28:} // namespace mlir
        -:   29:
        -:   30:using namespace mlir;
        -:   31:
        -:   32:/// Creates a global variable for an argument based on the ABI info.
        -:   33:static spirv::GlobalVariableOp
function _ZL36createGlobalVarForEntryPointArgumentRN4mlir9OpBuilderENS_5spirv6FuncOpEjNS2_19InterfaceVarABIAttrE called 0 returned 0% blocks executed 0%
    #####:   34:createGlobalVarForEntryPointArgument(OpBuilder &builder, spirv::FuncOp funcOp,
        -:   35:                                     unsigned argIndex,
        -:   36:                                     spirv::InterfaceVarABIAttr abiInfo) {
    #####:   37:  auto spirvModule = funcOp->getParentOfType<spirv::ModuleOp>();
call    0 never executed
    #####:   38:  if (!spirvModule)
branch  0 never executed
branch  1 never executed
    #####:   39:    return nullptr;
        -:   40:
    #####:   41:  OpBuilder::InsertionGuard moduleInsertionGuard(builder);
call    0 never executed
    #####:   42:  builder.setInsertionPoint(funcOp.getOperation());
call    0 never executed
    #####:   43:  std::string varName =
call    0 never executed
    #####:   44:      funcOp.getName().str() + "_arg_" + std::to_string(argIndex);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -:   45:
        -:   46:  // Get the type of variable. If this is a scalar/vector type and has an ABI
        -:   47:  // info create a variable of type !spirv.ptr<!spirv.struct<elementType>>. If
        -:   48:  // not it must already be a !spirv.ptr<!spirv.struct<...>>.
    #####:   49:  auto varType = funcOp.getFunctionType().getInput(argIndex);
call    0 never executed
call    1 never executed
    #####:   50:  if (varType.cast<spirv::SPIRVType>().isScalarOrVector()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   51:    auto storageClass = abiInfo.getStorageClass();
call    0 never executed
    #####:   52:    if (!storageClass)
branch  0 never executed
branch  1 never executed
    #####:   53:      return nullptr;
    #####:   54:    varType =
call    0 never executed
    #####:   55:        spirv::PointerType::get(spirv::StructType::get(varType), *storageClass);
call    0 never executed
call    1 never executed
        -:   56:  }
    #####:   57:  auto varPtrType = varType.cast<spirv::PointerType>();
call    0 never executed
    #####:   58:  auto varPointeeType = varPtrType.getPointeeType().cast<spirv::StructType>();
call    0 never executed
call    1 never executed
        -:   59:
        -:   60:  // Set the offset information.
    #####:   61:  varPointeeType =
    #####:   62:      VulkanLayoutUtils::decorateType(varPointeeType).cast<spirv::StructType>();
call    0 never executed
call    1 never executed
        -:   63:
    #####:   64:  if (!varPointeeType)
branch  0 never executed
branch  1 never executed
    #####:   65:    return nullptr;
        -:   66:
    #####:   67:  varType =
    #####:   68:      spirv::PointerType::get(varPointeeType, varPtrType.getStorageClass());
call    0 never executed
call    1 never executed
        -:   69:
    #####:   70:  return builder.create<spirv::GlobalVariableOp>(
    #####:   71:      funcOp.getLoc(), varType, varName, abiInfo.getDescriptorSet(),
    #####:   72:      abiInfo.getBinding());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   73:}
        -:   74:
        -:   75:/// Gets the global variables that need to be specified as interface variable
        -:   76:/// with an spirv.EntryPointOp. Traverses the body of a entry function to do so.
        -:   77:static LogicalResult
function _ZL21getInterfaceVariablesN4mlir5spirv6FuncOpERN4llvm15SmallVectorImplINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:   78:getInterfaceVariables(spirv::FuncOp funcOp,
        -:   79:                      SmallVectorImpl<Attribute> &interfaceVars) {
    #####:   80:  auto module = funcOp->getParentOfType<spirv::ModuleOp>();
call    0 never executed
    #####:   81:  if (!module) {
branch  0 never executed
branch  1 never executed
    #####:   82:    return failure();
        -:   83:  }
    #####:   84:  SetVector<Operation *> interfaceVarSet;
call    0 never executed
call    1 never executed
        -:   85:
        -:   86:  // TODO: This should in reality traverse the entry function
        -:   87:  // call graph and collect all the interfaces. For now, just traverse the
        -:   88:  // instructions in this function.
function _ZZL21getInterfaceVariablesN4mlir5spirv6FuncOpERN4llvm15SmallVectorImplINS_9AttributeEEEENKUlNS0_11AddressOfOpEE_clES7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   89:  funcOp.walk([&](spirv::AddressOfOp addressOfOp) {
call    0 never executed
    #####:   90:    auto var =
    #####:   91:        module.lookupSymbol<spirv::GlobalVariableOp>(addressOfOp.getVariable());
call    0 never executed
call    1 never executed
        -:   92:    // TODO: Per SPIR-V spec: "Before version 1.4, the interface’s
        -:   93:    // storage classes are limited to the Input and Output storage classes.
        -:   94:    // Starting with version 1.4, the interface’s storage classes are all
        -:   95:    // storage classes used in declaring all global variables referenced by the
        -:   96:    // entry point’s call tree." We should consider the target environment here.
    #####:   97:    switch (var.getType().cast<spirv::PointerType>().getStorageClass()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   98:    case spirv::StorageClass::Input:
    #####:   99:    case spirv::StorageClass::Output:
    #####:  100:      interfaceVarSet.insert(var.getOperation());
call    0 never executed
    #####:  101:      break;
        -:  102:    default:
        -:  103:      break;
        -:  104:    }
    #####:  105:  });
    #####:  106:  for (auto &var : interfaceVarSet) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  107:    interfaceVars.push_back(SymbolRefAttr::get(
call    0 never executed
    #####:  108:        funcOp.getContext(), cast<spirv::GlobalVariableOp>(var).getSymName()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  109:  }
    #####:  110:  return success();
call    0 never executed
        -:  111:}
        -:  112:
        -:  113:/// Lowers the entry point attribute.
function _ZL22lowerEntryPointABIAttrN4mlir5spirv6FuncOpERNS_9OpBuilderE called 0 returned 0% blocks executed 0%
    #####:  114:static LogicalResult lowerEntryPointABIAttr(spirv::FuncOp funcOp,
        -:  115:                                            OpBuilder &builder) {
    #####:  116:  auto entryPointAttrName = spirv::getEntryPointABIAttrName();
call    0 never executed
    #####:  117:  auto entryPointAttr =
    #####:  118:      funcOp->getAttrOfType<spirv::EntryPointABIAttr>(entryPointAttrName);
call    0 never executed
    #####:  119:  if (!entryPointAttr) {
branch  0 never executed
branch  1 never executed
    #####:  120:    return failure();
        -:  121:  }
        -:  122:
    #####:  123:  OpBuilder::InsertionGuard moduleInsertionGuard(builder);
call    0 never executed
    #####:  124:  auto spirvModule = funcOp->getParentOfType<spirv::ModuleOp>();
call    0 never executed
    #####:  125:  builder.setInsertionPointToEnd(spirvModule.getBody());
call    0 never executed
call    1 never executed
        -:  126:
        -:  127:  // Adds the spirv.EntryPointOp after collecting all the interface variables
        -:  128:  // needed.
    #####:  129:  SmallVector<Attribute, 1> interfaceVars;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:  if (failed(getInterfaceVariables(funcOp, interfaceVars))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  131:    return failure();
        -:  132:  }
        -:  133:
    #####:  134:  spirv::TargetEnvAttr targetEnv = spirv::lookupTargetEnv(funcOp);
call    0 never executed
    #####:  135:  FailureOr<spirv::ExecutionModel> executionModel =
    #####:  136:      spirv::getExecutionModel(targetEnv);
call    0 never executed
    #####:  137:  if (failed(executionModel))
branch  0 never executed
branch  1 never executed
    #####:  138:    return funcOp.emitRemark("lower entry point failure: could not select "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  139:                             "execution model based on 'spirv.target_env'");
call    0 never executed
        -:  140:
    #####:  141:  builder.create<spirv::EntryPointOp>(funcOp.getLoc(), executionModel.value(),
call    0 never executed
    #####:  142:                                      funcOp, interfaceVars);
call    0 never executed
        -:  143:
        -:  144:  // Specifies the spirv.ExecutionModeOp.
    #####:  145:  auto localSizeAttr = entryPointAttr.getLocalSize();
call    0 never executed
    #####:  146:  if (localSizeAttr) {
branch  0 never executed
branch  1 never executed
    #####:  147:    auto values = localSizeAttr.getValues<int32_t>();
call    0 never executed
    #####:  148:    SmallVector<int32_t, 3> localSize(values);
call    0 never executed
    #####:  149:    builder.create<spirv::ExecutionModeOp>(
    #####:  150:        funcOp.getLoc(), funcOp, spirv::ExecutionMode::LocalSize, localSize);
call    0 never executed
    #####:  151:    funcOp->removeAttr(entryPointAttrName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  152:  }
    #####:  153:  return success();
branch  0 never executed
branch  1 never executed
        -:  154:}
        -:  155:
        -:  156:namespace {
        -:  157:/// A pattern to convert function signature according to interface variable ABI
        -:  158:/// attributes.
        -:  159:///
        -:  160:/// Specifically, this pattern creates global variables according to interface
        -:  161:/// variable ABI attributes attached to function arguments and converts all
        -:  162:/// function argument uses to those global variables. This is necessary because
        -:  163:/// Vulkan requires all shader entry points to be of void(void) type.
        -:  164:class ProcessInterfaceVarABI final : public OpConversionPattern<spirv::FuncOp> {
        -:  165:public:
        -:  166:  using OpConversionPattern<spirv::FuncOp>::OpConversionPattern;
        -:  167:
        -:  168:  LogicalResult
        -:  169:  matchAndRewrite(spirv::FuncOp funcOp, OpAdaptor adaptor,
        -:  170:                  ConversionPatternRewriter &rewriter) const override;
        -:  171:};
        -:  172:
        -:  173:/// Pass to implement the ABI information specified as attributes.
   145779:  174:class LowerABIAttributesPass final
call    0 returned 100%
call    1 returned 100%
        -:  175:    : public spirv::impl::SPIRVLowerABIAttributesBase<LowerABIAttributesPass> {
        -:  176:  void runOnOperation() override;
        -:  177:};
        -:  178:} // namespace
        -:  179:
function _ZNK12_GLOBAL__N_122ProcessInterfaceVarABI15matchAndRewriteEN4mlir5spirv6FuncOpENS2_13FuncOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  180:LogicalResult ProcessInterfaceVarABI::matchAndRewrite(
        -:  181:    spirv::FuncOp funcOp, OpAdaptor adaptor,
        -:  182:    ConversionPatternRewriter &rewriter) const {
    #####:  183:  if (!funcOp->getAttrOfType<spirv::EntryPointABIAttr>(
branch  0 never executed
branch  1 never executed
    #####:  184:          spirv::getEntryPointABIAttrName())) {
call    0 never executed
call    1 never executed
        -:  185:    // TODO: Non-entry point functions are not handled.
    #####:  186:    return failure();
        -:  187:  }
    #####:  188:  TypeConverter::SignatureConversion signatureConverter(
    #####:  189:      funcOp.getFunctionType().getNumInputs());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  190:
    #####:  191:  auto &typeConverter = *getTypeConverter<SPIRVTypeConverter>();
call    0 never executed
    #####:  192:  auto indexType = typeConverter.getIndexType();
call    0 never executed
        -:  193:
    #####:  194:  auto attrName = spirv::getInterfaceVarABIAttrName();
call    0 never executed
    #####:  195:  for (const auto &argType :
    #####:  196:       llvm::enumerate(funcOp.getFunctionType().getInputs())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  197:    auto abiInfo = funcOp.getArgAttrOfType<spirv::InterfaceVarABIAttr>(
    #####:  198:        argType.index(), attrName);
call    0 never executed
    #####:  199:    if (!abiInfo) {
branch  0 never executed
branch  1 never executed
        -:  200:      // TODO: For non-entry point functions, it should be legal
        -:  201:      // to pass around scalar/vector values and return a scalar/vector. For now
        -:  202:      // non-entry point functions are not handled in this ABI lowering and will
        -:  203:      // produce an error.
    #####:  204:      return failure();
        -:  205:    }
    #####:  206:    spirv::GlobalVariableOp var = createGlobalVarForEntryPointArgument(
    #####:  207:        rewriter, funcOp, argType.index(), abiInfo);
call    0 never executed
    #####:  208:    if (!var)
branch  0 never executed
branch  1 never executed
    #####:  209:      return failure();
        -:  210:
    #####:  211:    OpBuilder::InsertionGuard funcInsertionGuard(rewriter);
call    0 never executed
call    1 never executed
    #####:  212:    rewriter.setInsertionPointToStart(&funcOp.front());
call    0 never executed
call    1 never executed
        -:  213:    // Insert spirv::AddressOf and spirv::AccessChain operations.
    #####:  214:    Value replacement =
    #####:  215:        rewriter.create<spirv::AddressOfOp>(funcOp.getLoc(), var);
call    0 never executed
call    1 never executed
        -:  216:    // Check if the arg is a scalar or vector type. In that case, the value
        -:  217:    // needs to be loaded into registers.
        -:  218:    // TODO: This is loading value of the scalar into registers
        -:  219:    // at the start of the function. It is probably better to do the load just
        -:  220:    // before the use. There might be multiple loads and currently there is no
        -:  221:    // easy way to replace all uses with a sequence of operations.
    #####:  222:    if (argType.value().cast<spirv::SPIRVType>().isScalarOrVector()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  223:      auto zero =
    #####:  224:          spirv::ConstantOp::getZero(indexType, funcOp.getLoc(), rewriter);
call    0 never executed
    #####:  225:      auto loadPtr = rewriter.create<spirv::AccessChainOp>(
    #####:  226:          funcOp.getLoc(), replacement, zero.getConstant());
call    0 never executed
call    1 never executed
    #####:  227:      replacement = rewriter.create<spirv::LoadOp>(funcOp.getLoc(), loadPtr);
call    0 never executed
        -:  228:    }
    #####:  229:    signatureConverter.remapInput(argType.index(), replacement);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  230:  }
    #####:  231:  if (failed(rewriter.convertRegionTypes(&funcOp.getBody(), *getTypeConverter(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  232:                                         &signatureConverter)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  233:    return failure();
        -:  234:
        -:  235:  // Creates a new function with the update signature.
function _ZZNK12_GLOBAL__N_122ProcessInterfaceVarABI15matchAndRewriteEN4mlir5spirv6FuncOpENS2_13FuncOpAdaptorERNS1_25ConversionPatternRewriterEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  236:  rewriter.updateRootInPlace(funcOp, [&] {
call    0 never executed
    #####:  237:    funcOp.setType(rewriter.getFunctionType(
    #####:  238:        signatureConverter.getConvertedTypes(), llvm::None));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  239:  });
    #####:  240:  return success();
call    0 never executed
        -:  241:}
        -:  242:
function _ZN12_GLOBAL__N_122LowerABIAttributesPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  243:void LowerABIAttributesPass::runOnOperation() {
        -:  244:  // Uses the signature conversion methodology of the dialect conversion
        -:  245:  // framework to implement the conversion.
    #####:  246:  spirv::ModuleOp module = getOperation();
call    0 never executed
    #####:  247:  MLIRContext *context = &getContext();
call    0 never executed
        -:  248:
    #####:  249:  spirv::TargetEnv targetEnv(spirv::lookupTargetEnv(module));
call    0 never executed
call    1 never executed
        -:  250:
    #####:  251:  SPIRVTypeConverter typeConverter(targetEnv);
call    0 never executed
call    1 never executed
        -:  252:
        -:  253:  // Insert a bitcast in the case of a pointer type change.
function _ZZN12_GLOBAL__N_122LowerABIAttributesPass14runOnOperationEvENKUlRN4mlir9OpBuilderENS1_5spirv11PointerTypeENS1_10ValueRangeENS1_8LocationEE_clES3_S5_S6_S7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  254:  typeConverter.addSourceMaterialization([](OpBuilder &builder,
call    0 never executed
        -:  255:                                            spirv::PointerType type,
        -:  256:                                            ValueRange inputs, Location loc) {
    #####:  257:    if (inputs.size() != 1 || !inputs[0].getType().isa<spirv::PointerType>())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  258:      return Value();
    #####:  259:    return builder.create<spirv::BitcastOp>(loc, type, inputs[0]).getResult();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  260:  });
        -:  261:
    #####:  262:  RewritePatternSet patterns(context);
call    0 never executed
call    1 never executed
    #####:  263:  patterns.add<ProcessInterfaceVarABI>(typeConverter, context);
call    0 never executed
        -:  264:
    #####:  265:  ConversionTarget target(*context);
call    0 never executed
call    1 never executed
        -:  266:  // "Legal" function ops should have no interface variable ABI attributes.
function _ZZN12_GLOBAL__N_122LowerABIAttributesPass14runOnOperationEvENKUlN4mlir5spirv6FuncOpEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  267:  target.addDynamicallyLegalOp<spirv::FuncOp>([&](spirv::FuncOp op) {
call    0 never executed
    #####:  268:    StringRef attrName = spirv::getInterfaceVarABIAttrName();
call    0 never executed
    #####:  269:    for (unsigned i = 0, e = op.getNumArguments(); i < e; ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  270:      if (op.getArgAttr(i, attrName))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  271:        return false;
        -:  272:    return true;
        -:  273:  });
        -:  274:  // All other SPIR-V ops are legal.
function _ZZN12_GLOBAL__N_122LowerABIAttributesPass14runOnOperationEvENKUlPN4mlir9OperationEE1_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  275:  target.markUnknownOpDynamicallyLegal([](Operation *op) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  276:    return op->getDialect()->getNamespace() ==
branch  0 never executed
branch  1 never executed
    #####:  277:           spirv::SPIRVDialect::getDialectNamespace();
branch  0 never executed
branch  1 never executed
        -:  278:  });
    #####:  279:  if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  280:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  281:
        -:  282:  // Walks over all the FuncOps in spirv::ModuleOp to lower the entry point
        -:  283:  // attributes.
    #####:  284:  OpBuilder builder(context);
call    0 never executed
    #####:  285:  SmallVector<spirv::FuncOp, 1> entryPointFns;
call    0 never executed
call    1 never executed
    #####:  286:  auto entryPointAttrName = spirv::getEntryPointABIAttrName();
call    0 never executed
function _ZZN12_GLOBAL__N_122LowerABIAttributesPass14runOnOperationEvENKUlN4mlir5spirv6FuncOpEE2_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  287:  module.walk([&](spirv::FuncOp funcOp) {
call    0 never executed
    #####:  288:    if (funcOp->getAttrOfType<spirv::EntryPointABIAttr>(entryPointAttrName)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  289:      entryPointFns.push_back(funcOp);
call    0 never executed
        -:  290:    }
    #####:  291:  });
    #####:  292:  for (auto fn : entryPointFns) {
branch  0 never executed
branch  1 never executed
    #####:  293:    if (failed(lowerEntryPointABIAttr(fn, builder))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  294:      return signalPassFailure();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  295:    }
        -:  296:  }
        -:  297:}
        -:  298:
        -:  299:std::unique_ptr<OperationPass<spirv::ModuleOp>>
function _ZN4mlir5spirv28createLowerABIAttributesPassEv called 116691 returned 100% blocks executed 100%
   116691:  300:mlir::spirv::createLowerABIAttributesPass() {
   116691:  301:  return std::make_unique<LowerABIAttributesPass>();
call    0 returned 100%
        -:  302:}
