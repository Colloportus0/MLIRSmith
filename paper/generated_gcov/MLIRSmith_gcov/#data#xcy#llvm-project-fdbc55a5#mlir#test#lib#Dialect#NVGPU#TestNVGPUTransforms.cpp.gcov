        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/NVGPU/TestNVGPUTransforms.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/NVGPU/CMakeFiles/MLIRNVGPUTestPasses.dir/TestNVGPUTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/NVGPU/CMakeFiles/MLIRNVGPUTestPasses.dir/TestNVGPUTransforms.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestNVGPUTransforms.cpp - Test NVGPU transforms and lowerings ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include <type_traits>
        -:   10:
        -:   11:#include "mlir/Analysis/SliceAnalysis.h"
        -:   12:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   15:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   16:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   17:#include "mlir/Dialect/Linalg/Passes.h"
        -:   18:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   19:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   20:#include "mlir/Dialect/NVGPU/Transforms/Transforms.h"
        -:   21:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   22:#include "mlir/Pass/Pass.h"
        -:   23:#include "mlir/Pass/PassManager.h"
        -:   24:#include "mlir/Support/LLVM.h"
        -:   25:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   26:
        -:   27:using namespace mlir;
        -:   28:using namespace mlir::nvgpu;
        -:   29:
        -:   30:namespace {
        -:   31:
        -:   32:struct TestMmaSyncF32ToTF32Patterns
        -:   33:    : public PassWrapper<TestMmaSyncF32ToTF32Patterns,
        -:   34:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_128TestMmaSyncF32ToTF32Patterns13resolveTypeIDEv called 116677 returned 100% blocks executed 100%
   116677:   35:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestMmaSyncF32ToTF32Patterns)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   36:
function _ZNK12_GLOBAL__N_128TestMmaSyncF32ToTF32Patterns11getArgumentEv called 116181 returned 100% blocks executed 100%
   116181:   37:  StringRef getArgument() const final {
   116181:   38:    return "test-nvgpu-mmasync-f32-to-tf32-patterns";
        -:   39:  }
function _ZNK12_GLOBAL__N_128TestMmaSyncF32ToTF32Patterns14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   40:  StringRef getDescription() const final {
   116161:   41:    return "Test patterns to convert mma.sync on f32 with tf32 precision";
        -:   42:  }
function _ZN12_GLOBAL__N_128TestMmaSyncF32ToTF32PatternsC2Ev called 116677 returned 100% blocks executed 100%
   116677:   43:  TestMmaSyncF32ToTF32Patterns() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
function _ZN12_GLOBAL__N_128TestMmaSyncF32ToTF32PatternsC2ERKS0_ called 27936 returned 100% blocks executed 100%
    27936:   44:  TestMmaSyncF32ToTF32Patterns(const TestMmaSyncF32ToTF32Patterns &pass)
    27936:   45:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   46:
        -:   47:  Option<std::string> precision{
        -:   48:      *this, "precision",
        -:   49:      llvm::cl::desc(
        -:   50:          "Target nvgpu.mma.sync on f32 input with tf32 or tf32x3 precision"),
        -:   51:      llvm::cl::init("tf32")};
        -:   52:
        -:   53:  MmaSyncF32Lowering tf32Precision =
        -:   54:      llvm::StringSwitch<MmaSyncF32Lowering>(precision)
        -:   55:          .Case("tf32", MmaSyncF32Lowering::TF32)
        -:   56:          .Case("tf32x3", MmaSyncF32Lowering::TF32x3)
        -:   57:          .Default(MmaSyncF32Lowering::Unkown);
        -:   58:
function _ZN12_GLOBAL__N_128TestMmaSyncF32ToTF32Patterns14runOnOperationEv called 451 returned 100% blocks executed 100%
      451:   59:  void runOnOperation() override {
      451:   60:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 98%
        -:   61:
      449:   62:    populateMmaSyncF32ToTF32Patterns(patterns, tf32Precision);
call    0 returned 98%
      441:   63:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 102%
call    1 returned 100%
call    2 returned 101%
call    3 returned 100%
call    4 returned 100%
      451:   64:  }
        -:   65:};
        -:   66:
        -:   67:} // namespace
        -:   68:
        -:   69:namespace mlir {
        -:   70:namespace test {
function _ZN4mlir4test26registerTestNvgpuLoweringsEv called 116161 returned 100% blocks executed 100%
   116161:   71:void registerTestNvgpuLowerings() {
   116161:   72:  PassRegistration<TestMmaSyncF32ToTF32Patterns>();
call    0 returned 100%
   116161:   73:}
        -:   74:
        -:   75:} // namespace test
        -:   76:} // namespace mlir
