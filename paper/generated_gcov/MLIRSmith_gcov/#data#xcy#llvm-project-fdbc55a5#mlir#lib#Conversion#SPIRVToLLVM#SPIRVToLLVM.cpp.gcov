        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/SPIRVToLLVM/SPIRVToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/SPIRVToLLVM/CMakeFiles/obj.MLIRSPIRVToLLVM.dir/SPIRVToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/SPIRVToLLVM/CMakeFiles/obj.MLIRSPIRVToLLVM.dir/SPIRVToLLVM.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- SPIRVToLLVM.cpp - SPIR-V to LLVM Patterns --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to convert SPIR-V dialect to LLVM dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/SPIRVToLLVM/SPIRVToLLVM.h"
        -:   14:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   15:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   16:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVEnums.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   20:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   21:#include "mlir/IR/BuiltinOps.h"
        -:   22:#include "mlir/IR/PatternMatch.h"
        -:   23:#include "mlir/Support/LogicalResult.h"
        -:   24:#include "mlir/Transforms/DialectConversion.h"
        -:   25:#include "llvm/Support/Debug.h"
        -:   26:#include "llvm/Support/FormatVariadic.h"
        -:   27:
        -:   28:#define DEBUG_TYPE "spirv-to-llvm-pattern"
        -:   29:
        -:   30:using namespace mlir;
        -:   31:
        -:   32://===----------------------------------------------------------------------===//
        -:   33:// Utility functions
        -:   34://===----------------------------------------------------------------------===//
        -:   35:
        -:   36:/// Returns true if the given type is a signed integer or vector type.
function _ZL23isSignedIntegerOrVectorN4mlir4TypeE called 0 returned 0% blocks executed 0%
    #####:   37:static bool isSignedIntegerOrVector(Type type) {
    #####:   38:  if (type.isSignedInteger())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   39:    return true;
    #####:   40:  if (auto vecType = type.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   41:    return vecType.getElementType().isSignedInteger();
call    0 never executed
call    1 never executed
    #####:   42:  return false;
        -:   43:}
        -:   44:
        -:   45:/// Returns true if the given type is an unsigned integer or vector type
function _ZL25isUnsignedIntegerOrVectorN4mlir4TypeE called 0 returned 0% blocks executed 0%
    #####:   46:static bool isUnsignedIntegerOrVector(Type type) {
    #####:   47:  if (type.isUnsignedInteger())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   48:    return true;
    #####:   49:  if (auto vecType = type.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:    return vecType.getElementType().isUnsignedInteger();
call    0 never executed
call    1 never executed
    #####:   51:  return false;
        -:   52:}
        -:   53:
        -:   54:/// Returns the bit width of integer, float or vector of float or integer values
function _ZL11getBitWidthN4mlir4TypeE called 0 returned 0% blocks executed 0%
    #####:   55:static unsigned getBitWidth(Type type) {
    #####:   56:  assert((type.isIntOrFloat() || type.isa<VectorType>()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   57:         "bitwidth is not supported for this type");
    #####:   58:  if (type.isIntOrFloat())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:    return type.getIntOrFloatBitWidth();
call    0 never executed
    #####:   60:  auto vecType = type.dyn_cast<VectorType>();
call    0 never executed
    #####:   61:  auto elementType = vecType.getElementType();
call    0 never executed
    #####:   62:  assert(elementType.isIntOrFloat() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   63:         "only integers and floats have a bitwidth");
    #####:   64:  return elementType.getIntOrFloatBitWidth();
call    0 never executed
        -:   65:}
        -:   66:
        -:   67:/// Returns the bit width of LLVMType integer or vector.
function _ZL19getLLVMTypeBitWidthN4mlir4TypeE called 0 returned 0% blocks executed 0%
    #####:   68:static unsigned getLLVMTypeBitWidth(Type type) {
    #####:   69:  return (LLVM::isCompatibleVectorType(type) ? LLVM::getVectorElementType(type)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   70:                                             : type)
    #####:   71:      .cast<IntegerType>()
    #####:   72:      .getWidth();
call    0 never executed
        -:   73:}
        -:   74:
        -:   75:/// Creates `IntegerAttribute` with all bits set for given type
function _ZL24minusOneIntegerAttributeN4mlir4TypeENS_7BuilderE called 0 returned 0% blocks executed 0%
    #####:   76:static IntegerAttr minusOneIntegerAttribute(Type type, Builder builder) {
    #####:   77:  if (auto vecType = type.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:    auto integerType = vecType.getElementType().cast<IntegerType>();
call    0 never executed
call    1 never executed
    #####:   79:    return builder.getIntegerAttr(integerType, -1);
call    0 never executed
        -:   80:  }
    #####:   81:  auto integerType = type.cast<IntegerType>();
call    0 never executed
    #####:   82:  return builder.getIntegerAttr(integerType, -1);
call    0 never executed
        -:   83:}
        -:   84:
        -:   85:/// Creates `llvm.mlir.constant` with all bits set for the given type.
function _ZL24createConstantAllBitsSetN4mlir8LocationENS_4TypeES1_RNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   86:static Value createConstantAllBitsSet(Location loc, Type srcType, Type dstType,
        -:   87:                                      PatternRewriter &rewriter) {
    #####:   88:  if (srcType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:    return rewriter.create<LLVM::ConstantOp>(
        -:   90:        loc, dstType,
    #####:   91:        SplatElementsAttr::get(srcType.cast<ShapedType>(),
    #####:   92:                               minusOneIntegerAttribute(srcType, rewriter)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   93:  }
    #####:   94:  return rewriter.create<LLVM::ConstantOp>(
    #####:   95:      loc, dstType, minusOneIntegerAttribute(srcType, rewriter));
call    0 never executed
call    1 never executed
        -:   96:}
        -:   97:
        -:   98:/// Creates `llvm.mlir.constant` with a floating-point scalar or vector value.
function _ZL16createFPConstantN4mlir8LocationENS_4TypeES1_RNS_15PatternRewriterEd called 0 returned 0% blocks executed 0%
    #####:   99:static Value createFPConstant(Location loc, Type srcType, Type dstType,
        -:  100:                              PatternRewriter &rewriter, double value) {
    #####:  101:  if (auto vecType = srcType.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:    auto floatType = vecType.getElementType().cast<FloatType>();
call    0 never executed
call    1 never executed
    #####:  103:    return rewriter.create<LLVM::ConstantOp>(
        -:  104:        loc, dstType,
    #####:  105:        SplatElementsAttr::get(vecType,
    #####:  106:                               rewriter.getFloatAttr(floatType, value)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  107:  }
    #####:  108:  auto floatType = srcType.cast<FloatType>();
call    0 never executed
    #####:  109:  return rewriter.create<LLVM::ConstantOp>(
    #####:  110:      loc, dstType, rewriter.getFloatAttr(floatType, value));
call    0 never executed
call    1 never executed
        -:  111:}
        -:  112:
        -:  113:/// Utility function for bitfield ops:
        -:  114:///   - `BitFieldInsert`
        -:  115:///   - `BitFieldSExtract`
        -:  116:///   - `BitFieldUExtract`
        -:  117:/// Truncates or extends the value. If the bitwidth of the value is the same as
        -:  118:/// `llvmType` bitwidth, the value remains unchanged.
function _ZL26optionallyTruncateOrExtendN4mlir8LocationENS_5ValueENS_4TypeERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  119:static Value optionallyTruncateOrExtend(Location loc, Value value,
        -:  120:                                        Type llvmType,
        -:  121:                                        PatternRewriter &rewriter) {
    #####:  122:  auto srcType = value.getType();
call    0 never executed
    #####:  123:  unsigned targetBitWidth = getLLVMTypeBitWidth(llvmType);
call    0 never executed
    #####:  124:  unsigned valueBitWidth = LLVM::isCompatibleType(srcType)
call    0 never executed
    #####:  125:                               ? getLLVMTypeBitWidth(srcType)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  126:                               : getBitWidth(srcType);
call    0 never executed
        -:  127:
    #####:  128:  if (valueBitWidth < targetBitWidth)
branch  0 never executed
branch  1 never executed
    #####:  129:    return rewriter.create<LLVM::ZExtOp>(loc, llvmType, value);
call    0 never executed
        -:  130:  // If the bit widths of `Count` and `Offset` are greater than the bit width
        -:  131:  // of the target type, they are truncated. Truncation is safe since `Count`
        -:  132:  // and `Offset` must be no more than 64 for op behaviour to be defined. Hence,
        -:  133:  // both values can be expressed in 8 bits.
    #####:  134:  if (valueBitWidth > targetBitWidth)
branch  0 never executed
branch  1 never executed
    #####:  135:    return rewriter.create<LLVM::TruncOp>(loc, llvmType, value);
call    0 never executed
    #####:  136:  return value;
        -:  137:}
        -:  138:
        -:  139:/// Broadcasts the value to vector with `numElements` number of elements.
function _ZL9broadcastN4mlir8LocationENS_5ValueEjRNS_17LLVMTypeConverterERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  140:static Value broadcast(Location loc, Value toBroadcast, unsigned numElements,
        -:  141:                       LLVMTypeConverter &typeConverter,
        -:  142:                       ConversionPatternRewriter &rewriter) {
    #####:  143:  auto vectorType = VectorType::get(numElements, toBroadcast.getType());
call    0 never executed
    #####:  144:  auto llvmVectorType = typeConverter.convertType(vectorType);
call    0 never executed
    #####:  145:  auto llvmI32Type = typeConverter.convertType(rewriter.getIntegerType(32));
call    0 never executed
call    1 never executed
    #####:  146:  Value broadcasted = rewriter.create<LLVM::UndefOp>(loc, llvmVectorType);
call    0 never executed
    #####:  147:  for (unsigned i = 0; i < numElements; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  148:    auto index = rewriter.create<LLVM::ConstantOp>(
    #####:  149:        loc, llvmI32Type, rewriter.getI32IntegerAttr(i));
call    0 never executed
call    1 never executed
    #####:  150:    broadcasted = rewriter.create<LLVM::InsertElementOp>(
    #####:  151:        loc, llvmVectorType, broadcasted, toBroadcast, index);
call    0 never executed
        -:  152:  }
    #####:  153:  return broadcasted;
        -:  154:}
        -:  155:
        -:  156:/// Broadcasts the value. If `srcType` is a scalar, the value remains unchanged.
function _ZL19optionallyBroadcastN4mlir8LocationENS_5ValueENS_4TypeERNS_17LLVMTypeConverterERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  157:static Value optionallyBroadcast(Location loc, Value value, Type srcType,
        -:  158:                                 LLVMTypeConverter &typeConverter,
        -:  159:                                 ConversionPatternRewriter &rewriter) {
    #####:  160:  if (auto vectorType = srcType.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  161:    unsigned numElements = vectorType.getNumElements();
call    0 never executed
    #####:  162:    return broadcast(loc, value, numElements, typeConverter, rewriter);
call    0 never executed
        -:  163:  }
    #####:  164:  return value;
        -:  165:}
        -:  166:
        -:  167:/// Utility function for bitfield ops: `BitFieldInsert`, `BitFieldSExtract` and
        -:  168:/// `BitFieldUExtract`.
        -:  169:/// Broadcast `Offset` and `Count` to match the type of `Base`. If `Base` is of
        -:  170:/// a vector type, construct a vector that has:
        -:  171:///  - same number of elements as `Base`
        -:  172:///  - each element has the type that is the same as the type of `Offset` or
        -:  173:///    `Count`
        -:  174:///  - each element has the same value as `Offset` or `Count`
        -:  175:/// Then cast `Offset` and `Count` if their bit width is different
        -:  176:/// from `Base` bit width.
function _ZL20processCountOrOffsetN4mlir8LocationENS_5ValueENS_4TypeES2_RNS_17LLVMTypeConverterERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  177:static Value processCountOrOffset(Location loc, Value value, Type srcType,
        -:  178:                                  Type dstType, LLVMTypeConverter &converter,
        -:  179:                                  ConversionPatternRewriter &rewriter) {
    #####:  180:  Value broadcasted =
    #####:  181:      optionallyBroadcast(loc, value, srcType, converter, rewriter);
call    0 never executed
    #####:  182:  return optionallyTruncateOrExtend(loc, broadcasted, dstType, rewriter);
call    0 never executed
        -:  183:}
        -:  184:
        -:  185:/// Converts SPIR-V struct with a regular (according to `VulkanLayoutUtils`)
        -:  186:/// offset to LLVM struct. Otherwise, the conversion is not supported.
        -:  187:static Optional<Type>
function _ZL27convertStructTypeWithOffsetN4mlir5spirv10StructTypeERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:  188:convertStructTypeWithOffset(spirv::StructType type,
        -:  189:                            LLVMTypeConverter &converter) {
    #####:  190:  if (type != VulkanLayoutUtils::decorateType(type))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  191:    return llvm::None;
        -:  192:
    #####:  193:  auto elementsVector = llvm::to_vector<8>(
    #####:  194:      llvm::map_range(type.getElementTypes(), [&](Type elementType) {
call    0 never executed
call    1 never executed
    #####:  195:        return converter.convertType(elementType);
call    0 never executed
    #####:  196:      }));
call    0 never executed
    #####:  197:  return LLVM::LLVMStructType::getLiteral(type.getContext(), elementsVector,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:                                          /*isPacked=*/false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  199:}
        -:  200:
        -:  201:/// Converts SPIR-V struct with no offset to packed LLVM struct.
function _ZL23convertStructTypePackedN4mlir5spirv10StructTypeERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:  202:static Type convertStructTypePacked(spirv::StructType type,
        -:  203:                                    LLVMTypeConverter &converter) {
    #####:  204:  auto elementsVector = llvm::to_vector<8>(
    #####:  205:      llvm::map_range(type.getElementTypes(), [&](Type elementType) {
call    0 never executed
call    1 never executed
    #####:  206:        return converter.convertType(elementType);
call    0 never executed
    #####:  207:      }));
call    0 never executed
    #####:  208:  return LLVM::LLVMStructType::getLiteral(type.getContext(), elementsVector,
call    0 never executed
    #####:  209:                                          /*isPacked=*/true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  210:}
        -:  211:
        -:  212:/// Creates LLVM dialect constant with the given value.
function _ZL19createI32ConstantOfN4mlir8LocationERNS_15PatternRewriterEj called 0 returned 0% blocks executed 0%
    #####:  213:static Value createI32ConstantOf(Location loc, PatternRewriter &rewriter,
        -:  214:                                 unsigned value) {
    #####:  215:  return rewriter.create<LLVM::ConstantOp>(
    #####:  216:      loc, IntegerType::get(rewriter.getContext(), 32),
call    0 never executed
    #####:  217:      rewriter.getIntegerAttr(rewriter.getI32Type(), value));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  218:}
        -:  219:
        -:  220:/// Utility for `spirv.Load` and `spirv.Store` conversion.
function _ZL22replaceWithLoadOrStorePN4mlir9OperationENS_10ValueRangeERNS_25ConversionPatternRewriterERNS_17LLVMTypeConverterEjbb called 0 returned 0% blocks executed 0%
    #####:  221:static LogicalResult replaceWithLoadOrStore(Operation *op, ValueRange operands,
        -:  222:                                            ConversionPatternRewriter &rewriter,
        -:  223:                                            LLVMTypeConverter &typeConverter,
        -:  224:                                            unsigned alignment, bool isVolatile,
        -:  225:                                            bool isNonTemporal) {
    #####:  226:  if (auto loadOp = dyn_cast<spirv::LoadOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  227:    auto dstType = typeConverter.convertType(loadOp.getType());
call    0 never executed
    #####:  228:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  229:      return failure();
    #####:  230:    rewriter.replaceOpWithNewOp<LLVM::LoadOp>(
    #####:  231:        loadOp, dstType, spirv::LoadOpAdaptor(operands).getPtr(), alignment,
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  232:        isVolatile, isNonTemporal);
call    0 never executed
call    1 never executed
    #####:  233:    return success();
        -:  234:  }
    #####:  235:  auto storeOp = cast<spirv::StoreOp>(op);
call    0 never executed
    #####:  236:  spirv::StoreOpAdaptor adaptor(operands);
call    0 never executed
call    1 never executed
    #####:  237:  rewriter.replaceOpWithNewOp<LLVM::StoreOp>(storeOp, adaptor.getValue(),
call    0 never executed
    #####:  238:                                             adaptor.getPtr(), alignment,
    #####:  239:                                             isVolatile, isNonTemporal);
call    0 never executed
call    1 never executed
    #####:  240:  return success();
        -:  241:}
        -:  242:
        -:  243://===----------------------------------------------------------------------===//
        -:  244:// Type conversion
        -:  245://===----------------------------------------------------------------------===//
        -:  246:
        -:  247:/// Converts SPIR-V array type to LLVM array. Natural stride (according to
        -:  248:/// `VulkanLayoutUtils`) is also mapped to LLVM array. This has to be respected
        -:  249:/// when converting ops that manipulate array types.
function _ZL16convertArrayTypeN4mlir5spirv9ArrayTypeERNS_13TypeConverterE called 0 returned 0% blocks executed 0%
    #####:  250:static Optional<Type> convertArrayType(spirv::ArrayType type,
        -:  251:                                       TypeConverter &converter) {
    #####:  252:  unsigned stride = type.getArrayStride();
call    0 never executed
    #####:  253:  Type elementType = type.getElementType();
call    0 never executed
    #####:  254:  auto sizeInBytes = elementType.cast<spirv::SPIRVType>().getSizeInBytes();
call    0 never executed
call    1 never executed
    #####:  255:  if (stride != 0 && (!sizeInBytes || *sizeInBytes != stride))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  256:    return llvm::None;
        -:  257:
    #####:  258:  auto llvmElementType = converter.convertType(elementType);
call    0 never executed
    #####:  259:  unsigned numElements = type.getNumElements();
call    0 never executed
    #####:  260:  return LLVM::LLVMArrayType::get(llvmElementType, numElements);
call    0 never executed
        -:  261:}
        -:  262:
        -:  263:/// Converts SPIR-V pointer type to LLVM pointer. Pointer's storage class is not
        -:  264:/// modelled at the moment.
function _ZL18convertPointerTypeN4mlir5spirv11PointerTypeERNS_13TypeConverterE called 0 returned 0% blocks executed 0%
    #####:  265:static Type convertPointerType(spirv::PointerType type,
        -:  266:                               TypeConverter &converter) {
    #####:  267:  auto pointeeType = converter.convertType(type.getPointeeType());
call    0 never executed
call    1 never executed
    #####:  268:  return LLVM::LLVMPointerType::get(pointeeType);
call    0 never executed
        -:  269:}
        -:  270:
        -:  271:/// Converts SPIR-V runtime array to LLVM array. Since LLVM allows indexing over
        -:  272:/// the bounds, the runtime array is converted to a 0-sized LLVM array. There is
        -:  273:/// no modelling of array stride at the moment.
function _ZL23convertRuntimeArrayTypeN4mlir5spirv16RuntimeArrayTypeERNS_13TypeConverterE called 0 returned 0% blocks executed 0%
    #####:  274:static Optional<Type> convertRuntimeArrayType(spirv::RuntimeArrayType type,
        -:  275:                                              TypeConverter &converter) {
    #####:  276:  if (type.getArrayStride() != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  277:    return llvm::None;
    #####:  278:  auto elementType = converter.convertType(type.getElementType());
call    0 never executed
call    1 never executed
    #####:  279:  return LLVM::LLVMArrayType::get(elementType, 0);
call    0 never executed
        -:  280:}
        -:  281:
        -:  282:/// Converts SPIR-V struct to LLVM struct. There is no support of structs with
        -:  283:/// member decorations. Also, only natural offset is supported.
function _ZL17convertStructTypeN4mlir5spirv10StructTypeERNS_17LLVMTypeConverterE called 0 returned 0% blocks executed 0%
    #####:  284:static Optional<Type> convertStructType(spirv::StructType type,
        -:  285:                                        LLVMTypeConverter &converter) {
    #####:  286:  SmallVector<spirv::StructType::MemberDecorationInfo, 4> memberDecorations;
call    0 never executed
    #####:  287:  type.getMemberDecorations(memberDecorations);
call    0 never executed
    #####:  288:  if (!memberDecorations.empty())
branch  0 never executed
branch  1 never executed
    #####:  289:    return llvm::None;
    #####:  290:  if (type.hasOffset())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    return convertStructTypeWithOffset(type, converter);
call    0 never executed
    #####:  292:  return convertStructTypePacked(type, converter);
call    0 never executed
        -:  293:}
        -:  294:
        -:  295://===----------------------------------------------------------------------===//
        -:  296:// Operation conversion
        -:  297://===----------------------------------------------------------------------===//
        -:  298:
        -:  299:namespace {
        -:  300:
        -:  301:class AccessChainPattern : public SPIRVToLLVMConversion<spirv::AccessChainOp> {
        -:  302:public:
        -:  303:  using SPIRVToLLVMConversion<spirv::AccessChainOp>::SPIRVToLLVMConversion;
        -:  304:
        -:  305:  LogicalResult
function _ZNK12_GLOBAL__N_118AccessChainPattern15matchAndRewriteEN4mlir5spirv13AccessChainOpENS2_20AccessChainOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  306:  matchAndRewrite(spirv::AccessChainOp op, OpAdaptor adaptor,
        -:  307:                  ConversionPatternRewriter &rewriter) const override {
    #####:  308:    auto dstType = typeConverter.convertType(op.getComponentPtr().getType());
call    0 never executed
call    1 never executed
    #####:  309:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  310:      return failure();
        -:  311:    // To use GEP we need to add a first 0 index to go through the pointer.
    #####:  312:    auto indices = llvm::to_vector<4>(adaptor.getIndices());
call    0 never executed
call    1 never executed
    #####:  313:    Type indexType = op.getIndices().front().getType();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  314:    auto llvmIndexType = typeConverter.convertType(indexType);
call    0 never executed
    #####:  315:    if (!llvmIndexType)
branch  0 never executed
branch  1 never executed
    #####:  316:      return failure();
    #####:  317:    Value zero = rewriter.create<LLVM::ConstantOp>(
    #####:  318:        op.getLoc(), llvmIndexType, rewriter.getIntegerAttr(indexType, 0));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  319:    indices.insert(indices.begin(), zero);
call    0 never executed
    #####:  320:    rewriter.replaceOpWithNewOp<LLVM::GEPOp>(op, dstType, adaptor.getBasePtr(),
    #####:  321:                                             indices);
call    0 never executed
call    1 never executed
    #####:  322:    return success();
branch  0 never executed
branch  1 never executed
        -:  323:  }
        -:  324:};
        -:  325:
        -:  326:class AddressOfPattern : public SPIRVToLLVMConversion<spirv::AddressOfOp> {
        -:  327:public:
        -:  328:  using SPIRVToLLVMConversion<spirv::AddressOfOp>::SPIRVToLLVMConversion;
        -:  329:
        -:  330:  LogicalResult
function _ZNK12_GLOBAL__N_116AddressOfPattern15matchAndRewriteEN4mlir5spirv11AddressOfOpENS2_18AddressOfOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  331:  matchAndRewrite(spirv::AddressOfOp op, OpAdaptor adaptor,
        -:  332:                  ConversionPatternRewriter &rewriter) const override {
    #####:  333:    auto dstType = typeConverter.convertType(op.getPointer().getType());
call    0 never executed
call    1 never executed
    #####:  334:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  335:      return failure();
    #####:  336:    rewriter.replaceOpWithNewOp<LLVM::AddressOfOp>(op, dstType, op.getVariable());
call    0 never executed
call    1 never executed
    #####:  337:    return success();
        -:  338:  }
        -:  339:};
        -:  340:
        -:  341:class BitFieldInsertPattern
        -:  342:    : public SPIRVToLLVMConversion<spirv::BitFieldInsertOp> {
        -:  343:public:
        -:  344:  using SPIRVToLLVMConversion<spirv::BitFieldInsertOp>::SPIRVToLLVMConversion;
        -:  345:
        -:  346:  LogicalResult
function _ZNK12_GLOBAL__N_121BitFieldInsertPattern15matchAndRewriteEN4mlir5spirv16BitFieldInsertOpENS2_23BitFieldInsertOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  347:  matchAndRewrite(spirv::BitFieldInsertOp op, OpAdaptor adaptor,
        -:  348:                  ConversionPatternRewriter &rewriter) const override {
    #####:  349:    auto srcType = op.getType();
call    0 never executed
    #####:  350:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####:  351:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  352:      return failure();
    #####:  353:    Location loc = op.getLoc();
call    0 never executed
        -:  354:
        -:  355:    // Process `Offset` and `Count`: broadcast and extend/truncate if needed.
    #####:  356:    Value offset = processCountOrOffset(loc, op.getOffset(), srcType, dstType,
    #####:  357:                                        typeConverter, rewriter);
call    0 never executed
call    1 never executed
    #####:  358:    Value count = processCountOrOffset(loc, op.getCount(), srcType, dstType,
    #####:  359:                                       typeConverter, rewriter);
call    0 never executed
call    1 never executed
        -:  360:
        -:  361:    // Create a mask with bits set outside [Offset, Offset + Count - 1].
    #####:  362:    Value minusOne = createConstantAllBitsSet(loc, srcType, dstType, rewriter);
call    0 never executed
    #####:  363:    Value maskShiftedByCount =
    #####:  364:        rewriter.create<LLVM::ShlOp>(loc, dstType, minusOne, count);
call    0 never executed
call    1 never executed
    #####:  365:    Value negated = rewriter.create<LLVM::XOrOp>(loc, dstType,
    #####:  366:                                                 maskShiftedByCount, minusOne);
call    0 never executed
call    1 never executed
    #####:  367:    Value maskShiftedByCountAndOffset =
    #####:  368:        rewriter.create<LLVM::ShlOp>(loc, dstType, negated, offset);
call    0 never executed
call    1 never executed
    #####:  369:    Value mask = rewriter.create<LLVM::XOrOp>(
    #####:  370:        loc, dstType, maskShiftedByCountAndOffset, minusOne);
call    0 never executed
call    1 never executed
        -:  371:
        -:  372:    // Extract unchanged bits from the `Base`  that are outside of
        -:  373:    // [Offset, Offset + Count - 1]. Then `or` with shifted `Insert`.
    #####:  374:    Value baseAndMask =
    #####:  375:        rewriter.create<LLVM::AndOp>(loc, dstType, op.getBase(), mask);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  376:    Value insertShiftedByOffset =
    #####:  377:        rewriter.create<LLVM::ShlOp>(loc, dstType, op.getInsert(), offset);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  378:    rewriter.replaceOpWithNewOp<LLVM::OrOp>(op, dstType, baseAndMask,
    #####:  379:                                            insertShiftedByOffset);
call    0 never executed
    #####:  380:    return success();
        -:  381:  }
        -:  382:};
        -:  383:
        -:  384:/// Converts SPIR-V ConstantOp with scalar or vector type.
        -:  385:class ConstantScalarAndVectorPattern
        -:  386:    : public SPIRVToLLVMConversion<spirv::ConstantOp> {
        -:  387:public:
        -:  388:  using SPIRVToLLVMConversion<spirv::ConstantOp>::SPIRVToLLVMConversion;
        -:  389:
        -:  390:  LogicalResult
function _ZNK12_GLOBAL__N_130ConstantScalarAndVectorPattern15matchAndRewriteEN4mlir5spirv10ConstantOpENS2_17ConstantOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  391:  matchAndRewrite(spirv::ConstantOp constOp, OpAdaptor adaptor,
        -:  392:                  ConversionPatternRewriter &rewriter) const override {
    #####:  393:    auto srcType = constOp.getType();
call    0 never executed
    #####:  394:    if (!srcType.isa<VectorType>() && !srcType.isIntOrFloat())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  395:      return failure();
        -:  396:
    #####:  397:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####:  398:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  399:      return failure();
        -:  400:
        -:  401:    // SPIR-V constant can be a signed/unsigned integer, which has to be
        -:  402:    // casted to signless integer when converting to LLVM dialect. Removing the
        -:  403:    // sign bit may have unexpected behaviour. However, it is better to handle
        -:  404:    // it case-by-case, given that the purpose of the conversion is not to
        -:  405:    // cover all possible corner cases.
    #####:  406:    if (isSignedIntegerOrVector(srcType) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  407:        isUnsignedIntegerOrVector(srcType)) {
call    0 never executed
    #####:  408:      auto signlessType = rewriter.getIntegerType(getBitWidth(srcType));
call    0 never executed
call    1 never executed
        -:  409:
    #####:  410:      if (srcType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  411:        auto dstElementsAttr = constOp.getValue().cast<DenseIntElementsAttr>();
call    0 never executed
call    1 never executed
    #####:  412:        rewriter.replaceOpWithNewOp<LLVM::ConstantOp>(
        -:  413:            constOp, dstType,
    #####:  414:            dstElementsAttr.mapValues(
    #####:  415:                signlessType, [&](const APInt &value) { return value; }));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  416:        return success();
        -:  417:      }
    #####:  418:      auto srcAttr = constOp.getValue().cast<IntegerAttr>();
call    0 never executed
call    1 never executed
    #####:  419:      auto dstAttr = rewriter.getIntegerAttr(signlessType, srcAttr.getValue());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  420:      rewriter.replaceOpWithNewOp<LLVM::ConstantOp>(constOp, dstType, dstAttr);
call    0 never executed
    #####:  421:      return success();
        -:  422:    }
    #####:  423:    rewriter.replaceOpWithNewOp<LLVM::ConstantOp>(
    #####:  424:        constOp, dstType, adaptor.getOperands(), constOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  425:    return success();
        -:  426:  }
        -:  427:};
        -:  428:
        -:  429:class BitFieldSExtractPattern
        -:  430:    : public SPIRVToLLVMConversion<spirv::BitFieldSExtractOp> {
        -:  431:public:
        -:  432:  using SPIRVToLLVMConversion<spirv::BitFieldSExtractOp>::SPIRVToLLVMConversion;
        -:  433:
        -:  434:  LogicalResult
function _ZNK12_GLOBAL__N_123BitFieldSExtractPattern15matchAndRewriteEN4mlir5spirv18BitFieldSExtractOpENS2_25BitFieldSExtractOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  435:  matchAndRewrite(spirv::BitFieldSExtractOp op, OpAdaptor adaptor,
        -:  436:                  ConversionPatternRewriter &rewriter) const override {
    #####:  437:    auto srcType = op.getType();
call    0 never executed
    #####:  438:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####:  439:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  440:      return failure();
    #####:  441:    Location loc = op.getLoc();
call    0 never executed
        -:  442:
        -:  443:    // Process `Offset` and `Count`: broadcast and extend/truncate if needed.
    #####:  444:    Value offset = processCountOrOffset(loc, op.getOffset(), srcType, dstType,
    #####:  445:                                        typeConverter, rewriter);
call    0 never executed
call    1 never executed
    #####:  446:    Value count = processCountOrOffset(loc, op.getCount(), srcType, dstType,
    #####:  447:                                       typeConverter, rewriter);
call    0 never executed
call    1 never executed
        -:  448:
        -:  449:    // Create a constant that holds the size of the `Base`.
    #####:  450:    IntegerType integerType;
    #####:  451:    if (auto vecType = srcType.dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  452:      integerType = vecType.getElementType().cast<IntegerType>();
call    0 never executed
call    1 never executed
        -:  453:    else
    #####:  454:      integerType = srcType.cast<IntegerType>();
call    0 never executed
        -:  455:
    #####:  456:    auto baseSize = rewriter.getIntegerAttr(integerType, getBitWidth(srcType));
call    0 never executed
call    1 never executed
    #####:  457:    Value size =
call    0 never executed
    #####:  458:        srcType.isa<VectorType>()
    #####:  459:            ? rewriter.create<LLVM::ConstantOp>(
branch  0 never executed
branch  1 never executed
        -:  460:                  loc, dstType,
    #####:  461:                  SplatElementsAttr::get(srcType.cast<ShapedType>(), baseSize))
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  462:            : rewriter.create<LLVM::ConstantOp>(loc, dstType, baseSize);
call    0 never executed
        -:  463:
        -:  464:    // Shift `Base` left by [sizeof(Base) - (Count + Offset)], so that the bit
        -:  465:    // at Offset + Count - 1 is the most significant bit now.
    #####:  466:    Value countPlusOffset =
    #####:  467:        rewriter.create<LLVM::AddOp>(loc, dstType, count, offset);
call    0 never executed
call    1 never executed
    #####:  468:    Value amountToShiftLeft =
    #####:  469:        rewriter.create<LLVM::SubOp>(loc, dstType, size, countPlusOffset);
call    0 never executed
call    1 never executed
    #####:  470:    Value baseShiftedLeft = rewriter.create<LLVM::ShlOp>(
    #####:  471:        loc, dstType, op.getBase(), amountToShiftLeft);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  472:
        -:  473:    // Shift the result right, filling the bits with the sign bit.
    #####:  474:    Value amountToShiftRight =
    #####:  475:        rewriter.create<LLVM::AddOp>(loc, dstType, offset, amountToShiftLeft);
call    0 never executed
call    1 never executed
    #####:  476:    rewriter.replaceOpWithNewOp<LLVM::AShrOp>(op, dstType, baseShiftedLeft,
    #####:  477:                                              amountToShiftRight);
call    0 never executed
    #####:  478:    return success();
        -:  479:  }
        -:  480:};
        -:  481:
        -:  482:class BitFieldUExtractPattern
        -:  483:    : public SPIRVToLLVMConversion<spirv::BitFieldUExtractOp> {
        -:  484:public:
        -:  485:  using SPIRVToLLVMConversion<spirv::BitFieldUExtractOp>::SPIRVToLLVMConversion;
        -:  486:
        -:  487:  LogicalResult
function _ZNK12_GLOBAL__N_123BitFieldUExtractPattern15matchAndRewriteEN4mlir5spirv18BitFieldUExtractOpENS2_25BitFieldUExtractOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  488:  matchAndRewrite(spirv::BitFieldUExtractOp op, OpAdaptor adaptor,
        -:  489:                  ConversionPatternRewriter &rewriter) const override {
    #####:  490:    auto srcType = op.getType();
call    0 never executed
    #####:  491:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####:  492:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  493:      return failure();
    #####:  494:    Location loc = op.getLoc();
call    0 never executed
        -:  495:
        -:  496:    // Process `Offset` and `Count`: broadcast and extend/truncate if needed.
    #####:  497:    Value offset = processCountOrOffset(loc, op.getOffset(), srcType, dstType,
    #####:  498:                                        typeConverter, rewriter);
call    0 never executed
call    1 never executed
    #####:  499:    Value count = processCountOrOffset(loc, op.getCount(), srcType, dstType,
    #####:  500:                                       typeConverter, rewriter);
call    0 never executed
call    1 never executed
        -:  501:
        -:  502:    // Create a mask with bits set at [0, Count - 1].
    #####:  503:    Value minusOne = createConstantAllBitsSet(loc, srcType, dstType, rewriter);
call    0 never executed
    #####:  504:    Value maskShiftedByCount =
    #####:  505:        rewriter.create<LLVM::ShlOp>(loc, dstType, minusOne, count);
call    0 never executed
call    1 never executed
    #####:  506:    Value mask = rewriter.create<LLVM::XOrOp>(loc, dstType, maskShiftedByCount,
    #####:  507:                                              minusOne);
call    0 never executed
call    1 never executed
        -:  508:
        -:  509:    // Shift `Base` by `Offset` and apply the mask on it.
    #####:  510:    Value shiftedBase =
    #####:  511:        rewriter.create<LLVM::LShrOp>(loc, dstType, op.getBase(), offset);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  512:    rewriter.replaceOpWithNewOp<LLVM::AndOp>(op, dstType, shiftedBase, mask);
call    0 never executed
    #####:  513:    return success();
        -:  514:  }
        -:  515:};
        -:  516:
        -:  517:class BranchConversionPattern : public SPIRVToLLVMConversion<spirv::BranchOp> {
        -:  518:public:
        -:  519:  using SPIRVToLLVMConversion<spirv::BranchOp>::SPIRVToLLVMConversion;
        -:  520:
        -:  521:  LogicalResult
function _ZNK12_GLOBAL__N_123BranchConversionPattern15matchAndRewriteEN4mlir5spirv8BranchOpENS2_15BranchOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  522:  matchAndRewrite(spirv::BranchOp branchOp, OpAdaptor adaptor,
        -:  523:                  ConversionPatternRewriter &rewriter) const override {
    #####:  524:    rewriter.replaceOpWithNewOp<LLVM::BrOp>(branchOp, adaptor.getOperands(),
    #####:  525:                                            branchOp.getTarget());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  526:    return success();
        -:  527:  }
        -:  528:};
        -:  529:
        -:  530:class BranchConditionalConversionPattern
        -:  531:    : public SPIRVToLLVMConversion<spirv::BranchConditionalOp> {
        -:  532:public:
        -:  533:  using SPIRVToLLVMConversion<
        -:  534:      spirv::BranchConditionalOp>::SPIRVToLLVMConversion;
        -:  535:
        -:  536:  LogicalResult
function _ZNK12_GLOBAL__N_134BranchConditionalConversionPattern15matchAndRewriteEN4mlir5spirv19BranchConditionalOpENS2_26BranchConditionalOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  537:  matchAndRewrite(spirv::BranchConditionalOp op, OpAdaptor adaptor,
        -:  538:                  ConversionPatternRewriter &rewriter) const override {
        -:  539:    // If branch weights exist, map them to 32-bit integer vector.
    #####:  540:    ElementsAttr branchWeights = nullptr;
call    0 never executed
    #####:  541:    if (auto weights = op.getBranchWeights()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  542:      VectorType weightType = VectorType::get(2, rewriter.getI32Type());
call    0 never executed
call    1 never executed
    #####:  543:      branchWeights = DenseElementsAttr::get(weightType, weights->getValue());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  544:    }
        -:  545:
    #####:  546:    rewriter.replaceOpWithNewOp<LLVM::CondBrOp>(
    #####:  547:        op, op.getCondition(), op.getTrueBlockArguments(),
call    0 never executed
    #####:  548:        op.getFalseBlockArguments(), branchWeights, op.getTrueBlock(),
call    0 never executed
call    1 never executed
    #####:  549:        op.getFalseBlock());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  550:    return success();
        -:  551:  }
        -:  552:};
        -:  553:
        -:  554:/// Converts `spirv.getCompositeExtract` to `llvm.extractvalue` if the container
        -:  555:/// type is an aggregate type (struct or array). Otherwise, converts to
        -:  556:/// `llvm.extractelement` that operates on vectors.
        -:  557:class CompositeExtractPattern
        -:  558:    : public SPIRVToLLVMConversion<spirv::CompositeExtractOp> {
        -:  559:public:
        -:  560:  using SPIRVToLLVMConversion<spirv::CompositeExtractOp>::SPIRVToLLVMConversion;
        -:  561:
        -:  562:  LogicalResult
function _ZNK12_GLOBAL__N_123CompositeExtractPattern15matchAndRewriteEN4mlir5spirv18CompositeExtractOpENS2_25CompositeExtractOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  563:  matchAndRewrite(spirv::CompositeExtractOp op, OpAdaptor adaptor,
        -:  564:                  ConversionPatternRewriter &rewriter) const override {
    #####:  565:    auto dstType = this->typeConverter.convertType(op.getType());
call    0 never executed
    #####:  566:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  567:      return failure();
        -:  568:
    #####:  569:    Type containerType = op.getComposite().getType();
call    0 never executed
call    1 never executed
    #####:  570:    if (containerType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  571:      Location loc = op.getLoc();
call    0 never executed
    #####:  572:      IntegerAttr value = op.getIndices()[0].cast<IntegerAttr>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  573:      Value index = createI32ConstantOf(loc, rewriter, value.getInt());
call    0 never executed
call    1 never executed
    #####:  574:      rewriter.replaceOpWithNewOp<LLVM::ExtractElementOp>(
    #####:  575:          op, dstType, adaptor.getComposite(), index);
call    0 never executed
call    1 never executed
    #####:  576:      return success();
        -:  577:    }
        -:  578:
    #####:  579:    rewriter.replaceOpWithNewOp<LLVM::ExtractValueOp>(
    #####:  580:        op, adaptor.getComposite(), LLVM::convertArrayToIndices(op.getIndices()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  581:    return success();
        -:  582:  }
        -:  583:};
        -:  584:
        -:  585:/// Converts `spirv.getCompositeInsert` to `llvm.insertvalue` if the container
        -:  586:/// type is an aggregate type (struct or array). Otherwise, converts to
        -:  587:/// `llvm.insertelement` that operates on vectors.
        -:  588:class CompositeInsertPattern
        -:  589:    : public SPIRVToLLVMConversion<spirv::CompositeInsertOp> {
        -:  590:public:
        -:  591:  using SPIRVToLLVMConversion<spirv::CompositeInsertOp>::SPIRVToLLVMConversion;
        -:  592:
        -:  593:  LogicalResult
function _ZNK12_GLOBAL__N_122CompositeInsertPattern15matchAndRewriteEN4mlir5spirv17CompositeInsertOpENS2_24CompositeInsertOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  594:  matchAndRewrite(spirv::CompositeInsertOp op, OpAdaptor adaptor,
        -:  595:                  ConversionPatternRewriter &rewriter) const override {
    #####:  596:    auto dstType = this->typeConverter.convertType(op.getType());
call    0 never executed
    #####:  597:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  598:      return failure();
        -:  599:
    #####:  600:    Type containerType = op.getComposite().getType();
call    0 never executed
call    1 never executed
    #####:  601:    if (containerType.isa<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  602:      Location loc = op.getLoc();
call    0 never executed
    #####:  603:      IntegerAttr value = op.getIndices()[0].cast<IntegerAttr>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  604:      Value index = createI32ConstantOf(loc, rewriter, value.getInt());
call    0 never executed
call    1 never executed
    #####:  605:      rewriter.replaceOpWithNewOp<LLVM::InsertElementOp>(
    #####:  606:          op, dstType, adaptor.getComposite(), adaptor.getObject(), index);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  607:      return success();
        -:  608:    }
        -:  609:
    #####:  610:    rewriter.replaceOpWithNewOp<LLVM::InsertValueOp>(
    #####:  611:        op, adaptor.getComposite(), adaptor.getObject(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  612:        LLVM::convertArrayToIndices(op.getIndices()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  613:    return success();
        -:  614:  }
        -:  615:};
        -:  616:
        -:  617:/// Converts SPIR-V operations that have straightforward LLVM equivalent
        -:  618:/// into LLVM dialect operations.
        -:  619:template <typename SPIRVOp, typename LLVMOp>
        -:  620:class DirectConversionPattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  621:public:
        -:  622:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  623:
        -:  624:  LogicalResult
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
    #####:  628:    if (!dstType)
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLFMinOpENS1_4LLVM8MinNumOpEE15matchAndRewriteES3_NS2_15GLFMinOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLFMinOpENS1_4LLVM8MinNumOpEE15matchAndRewriteES3_NS2_15GLFMinOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertFToUOpENS1_4LLVM8FPToUIOpEE15matchAndRewriteES3_NS2_20ConvertFToUOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertFToUOpENS1_4LLVM8FPToUIOpEE15matchAndRewriteES3_NS2_20ConvertFToUOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertSToFOpENS1_4LLVM8SIToFPOpEE15matchAndRewriteES3_NS2_20ConvertSToFOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertSToFOpENS1_4LLVM8SIToFPOpEE15matchAndRewriteES3_NS2_20ConvertSToFOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertUToFOpENS1_4LLVM8UIToFPOpEE15matchAndRewriteES3_NS2_20ConvertUToFOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertUToFOpENS1_4LLVM8UIToFPOpEE15matchAndRewriteES3_NS2_20ConvertUToFOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLCeilOpENS1_4LLVM7FCeilOpEE15matchAndRewriteES3_NS2_15GLCeilOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLCeilOpENS1_4LLVM7FCeilOpEE15matchAndRewriteES3_NS2_15GLCeilOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLCosOpENS1_4LLVM5CosOpEE15matchAndRewriteES3_NS2_14GLCosOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLCosOpENS1_4LLVM5CosOpEE15matchAndRewriteES3_NS2_14GLCosOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLExpOpENS1_4LLVM5ExpOpEE15matchAndRewriteES3_NS2_14GLExpOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLExpOpENS1_4LLVM5ExpOpEE15matchAndRewriteES3_NS2_14GLExpOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLFAbsOpENS1_4LLVM6FAbsOpEE15matchAndRewriteES3_NS2_15GLFAbsOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLFAbsOpENS1_4LLVM6FAbsOpEE15matchAndRewriteES3_NS2_15GLFAbsOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv9GLFloorOpENS1_4LLVM8FFloorOpEE15matchAndRewriteES3_NS2_16GLFloorOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv9GLFloorOpENS1_4LLVM8FFloorOpEE15matchAndRewriteES3_NS2_16GLFloorOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLFMaxOpENS1_4LLVM8MaxNumOpEE15matchAndRewriteES3_NS2_15GLFMaxOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLFMaxOpENS1_4LLVM8MaxNumOpEE15matchAndRewriteES3_NS2_15GLFMaxOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertFToSOpENS1_4LLVM8FPToSIOpEE15matchAndRewriteES3_NS2_20ConvertFToSOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv13ConvertFToSOpENS1_4LLVM8FPToSIOpEE15matchAndRewriteES3_NS2_20ConvertFToSOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLLogOpENS1_4LLVM5LogOpEE15matchAndRewriteES3_NS2_14GLLogOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLLogOpENS1_4LLVM5LogOpEE15matchAndRewriteES3_NS2_14GLLogOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLSinOpENS1_4LLVM5SinOpEE15matchAndRewriteES3_NS2_14GLSinOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7GLSinOpENS1_4LLVM5SinOpEE15matchAndRewriteES3_NS2_14GLSinOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLSMaxOpENS1_4LLVM6SMaxOpEE15matchAndRewriteES3_NS2_15GLSMaxOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLSMaxOpENS1_4LLVM6SMaxOpEE15matchAndRewriteES3_NS2_15GLSMaxOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLSMinOpENS1_4LLVM6SMinOpEE15matchAndRewriteES3_NS2_15GLSMinOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLSMinOpENS1_4LLVM6SMinOpEE15matchAndRewriteES3_NS2_15GLSMinOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLSqrtOpENS1_4LLVM6SqrtOpEE15matchAndRewriteES3_NS2_15GLSqrtOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8GLSqrtOpENS1_4LLVM6SqrtOpEE15matchAndRewriteES3_NS2_15GLSqrtOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12LogicalAndOpENS1_4LLVM5AndOpEE15matchAndRewriteES3_NS2_19LogicalAndOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12LogicalAndOpENS1_4LLVM5AndOpEE15matchAndRewriteES3_NS2_19LogicalAndOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv11LogicalOrOpENS1_4LLVM4OrOpEE15matchAndRewriteES3_NS2_18LogicalOrOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv11LogicalOrOpENS1_4LLVM4OrOpEE15matchAndRewriteES3_NS2_18LogicalOrOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8SelectOpENS1_4LLVM8SelectOpEE15matchAndRewriteES3_NS2_15SelectOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv8SelectOpENS1_4LLVM8SelectOpEE15matchAndRewriteES3_NS2_15SelectOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7UndefOpENS1_4LLVM7UndefOpEE15matchAndRewriteES3_NS2_14UndefOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv7UndefOpENS1_4LLVM7UndefOpEE15matchAndRewriteES3_NS2_14UndefOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6SRemOpENS1_4LLVM6SRemOpEE15matchAndRewriteES3_NS2_13SRemOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6SRemOpENS1_4LLVM6SRemOpEE15matchAndRewriteES3_NS2_13SRemOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6IMulOpENS1_4LLVM5MulOpEE15matchAndRewriteES3_NS2_13IMulOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6IMulOpENS1_4LLVM5MulOpEE15matchAndRewriteES3_NS2_13IMulOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6ISubOpENS1_4LLVM5SubOpEE15matchAndRewriteES3_NS2_13ISubOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6ISubOpENS1_4LLVM5SubOpEE15matchAndRewriteES3_NS2_13ISubOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FAddOpENS1_4LLVM6FAddOpEE15matchAndRewriteES3_NS2_13FAddOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FAddOpENS1_4LLVM6FAddOpEE15matchAndRewriteES3_NS2_13FAddOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FDivOpENS1_4LLVM6FDivOpEE15matchAndRewriteES3_NS2_13FDivOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FDivOpENS1_4LLVM6FDivOpEE15matchAndRewriteES3_NS2_13FDivOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FMulOpENS1_4LLVM6FMulOpEE15matchAndRewriteES3_NS2_13FMulOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FMulOpENS1_4LLVM6FMulOpEE15matchAndRewriteES3_NS2_13FMulOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv9FNegateOpENS1_4LLVM6FNegOpEE15matchAndRewriteES3_NS2_16FNegateOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv9FNegateOpENS1_4LLVM6FNegOpEE15matchAndRewriteES3_NS2_16FNegateOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FRemOpENS1_4LLVM6FRemOpEE15matchAndRewriteES3_NS2_13FRemOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FRemOpENS1_4LLVM6FRemOpEE15matchAndRewriteES3_NS2_13FRemOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FSubOpENS1_4LLVM6FSubOpEE15matchAndRewriteES3_NS2_13FSubOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6FSubOpENS1_4LLVM6FSubOpEE15matchAndRewriteES3_NS2_13FSubOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6SDivOpENS1_4LLVM6SDivOpEE15matchAndRewriteES3_NS2_13SDivOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6SDivOpENS1_4LLVM6SDivOpEE15matchAndRewriteES3_NS2_13SDivOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6IAddOpENS1_4LLVM5AddOpEE15matchAndRewriteES3_NS2_13IAddOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6IAddOpENS1_4LLVM5AddOpEE15matchAndRewriteES3_NS2_13IAddOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6UDivOpENS1_4LLVM6UDivOpEE15matchAndRewriteES3_NS2_13UDivOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6UDivOpENS1_4LLVM6UDivOpEE15matchAndRewriteES3_NS2_13UDivOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6UModOpENS1_4LLVM6URemOpEE15matchAndRewriteES3_NS2_13UModOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv6UModOpENS1_4LLVM6URemOpEE15matchAndRewriteES3_NS2_13UModOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv10BitCountOpENS1_4LLVM7CtPopOpEE15matchAndRewriteES3_NS2_17BitCountOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv10BitCountOpENS1_4LLVM7CtPopOpEE15matchAndRewriteES3_NS2_17BitCountOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12BitReverseOpENS1_4LLVM12BitReverseOpEE15matchAndRewriteES3_NS2_19BitReverseOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12BitReverseOpENS1_4LLVM12BitReverseOpEE15matchAndRewriteES3_NS2_19BitReverseOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12BitwiseAndOpENS1_4LLVM5AndOpEE15matchAndRewriteES3_NS2_19BitwiseAndOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12BitwiseAndOpENS1_4LLVM5AndOpEE15matchAndRewriteES3_NS2_19BitwiseAndOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv11BitwiseOrOpENS1_4LLVM4OrOpEE15matchAndRewriteES3_NS2_18BitwiseOrOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv11BitwiseOrOpENS1_4LLVM4OrOpEE15matchAndRewriteES3_NS2_18BitwiseOrOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12BitwiseXorOpENS1_4LLVM5XOrOpEE15matchAndRewriteES3_NS2_19BitwiseXorOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv12BitwiseXorOpENS1_4LLVM5XOrOpEE15matchAndRewriteES3_NS2_19BitwiseXorOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
_ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv9BitcastOpENS1_4LLVM9BitcastOpEE15matchAndRewriteES3_NS2_16BitcastOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_123DirectConversionPatternIN4mlir5spirv9BitcastOpENS1_4LLVM9BitcastOpEE15matchAndRewriteES3_NS2_16BitcastOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  625:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  626:                  ConversionPatternRewriter &rewriter) const override {
    #####:  627:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  628:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  629:      return failure();
    #####:  630:    rewriter.template replaceOpWithNewOp<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  631:        operation, dstType, adaptor.getOperands(), operation->getAttrs());
    #####:  632:    return success();
        -:  633:  }
------------------
        -:  634:};
        -:  635:
        -:  636:/// Converts `spirv.ExecutionMode` into a global struct constant that holds
        -:  637:/// execution mode information.
        -:  638:class ExecutionModePattern
        -:  639:    : public SPIRVToLLVMConversion<spirv::ExecutionModeOp> {
        -:  640:public:
        -:  641:  using SPIRVToLLVMConversion<spirv::ExecutionModeOp>::SPIRVToLLVMConversion;
        -:  642:
        -:  643:  LogicalResult
function _ZNK12_GLOBAL__N_120ExecutionModePattern15matchAndRewriteEN4mlir5spirv15ExecutionModeOpENS2_22ExecutionModeOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  644:  matchAndRewrite(spirv::ExecutionModeOp op, OpAdaptor adaptor,
        -:  645:                  ConversionPatternRewriter &rewriter) const override {
        -:  646:    // First, create the global struct's name that would be associated with
        -:  647:    // this entry point's execution mode. We set it to be:
        -:  648:    //   __spv__{SPIR-V module name}_{function name}_execution_mode_info_{mode}
    #####:  649:    ModuleOp module = op->getParentOfType<ModuleOp>();
call    0 never executed
    #####:  650:    spirv::ExecutionModeAttr executionModeAttr = op.getExecutionModeAttr();
call    0 never executed
    #####:  651:    std::string moduleName;
call    0 never executed
    #####:  652:    if (module.getName().has_value())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  653:      moduleName = "_" + module.getName()->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  654:    else
    #####:  655:      moduleName = "";
call    0 never executed
    #####:  656:    std::string executionModeInfoName = llvm::formatv(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  657:        "__spv_{0}_{1}_execution_mode_info_{2}", moduleName, op.getFn().str(),
branch  0 never executed
branch  1 never executed
    #####:  658:        static_cast<uint32_t>(executionModeAttr.getValue()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  659:
    #####:  660:    MLIRContext *context = rewriter.getContext();
call    0 never executed
    #####:  661:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  662:    rewriter.setInsertionPointToStart(module.getBody());
call    0 never executed
call    1 never executed
        -:  663:
        -:  664:    // Create a struct type, corresponding to the C struct below.
        -:  665:    // struct {
        -:  666:    //   int32_t executionMode;
        -:  667:    //   int32_t values[];          // optional values
        -:  668:    // };
    #####:  669:    auto llvmI32Type = IntegerType::get(context, 32);
call    0 never executed
    #####:  670:    SmallVector<Type, 2> fields;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  671:    fields.push_back(llvmI32Type);
call    0 never executed
    #####:  672:    ArrayAttr values = op.getValues();
call    0 never executed
    #####:  673:    if (!values.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  674:      auto arrayType = LLVM::LLVMArrayType::get(llvmI32Type, values.size());
call    0 never executed
call    1 never executed
    #####:  675:      fields.push_back(arrayType);
call    0 never executed
        -:  676:    }
    #####:  677:    auto structType = LLVM::LLVMStructType::getLiteral(context, fields);
call    0 never executed
        -:  678:
        -:  679:    // Create `llvm.mlir.global` with initializer region containing one block.
    #####:  680:    auto global = rewriter.create<LLVM::GlobalOp>(
    #####:  681:        UnknownLoc::get(context), structType, /*isConstant=*/true,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  682:        LLVM::Linkage::External, executionModeInfoName, Attribute(),
    #####:  683:        /*alignment=*/0);
call    0 never executed
call    1 never executed
    #####:  684:    Location loc = global.getLoc();
call    0 never executed
    #####:  685:    Region &region = global.getInitializerRegion();
call    0 never executed
    #####:  686:    Block *block = rewriter.createBlock(&region);
call    0 never executed
call    1 never executed
        -:  687:
        -:  688:    // Initialize the struct and set the execution mode value.
    #####:  689:    rewriter.setInsertionPoint(block, block->begin());
call    0 never executed
    #####:  690:    Value structValue = rewriter.create<LLVM::UndefOp>(loc, structType);
call    0 never executed
call    1 never executed
    #####:  691:    Value executionMode = rewriter.create<LLVM::ConstantOp>(
        -:  692:        loc, llvmI32Type,
    #####:  693:        rewriter.getI32IntegerAttr(
    #####:  694:            static_cast<uint32_t>(executionModeAttr.getValue())));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  695:    structValue = rewriter.create<LLVM::InsertValueOp>(loc, structValue,
    #####:  696:                                                       executionMode, 0);
call    0 never executed
call    1 never executed
        -:  697:
        -:  698:    // Insert extra operands if they exist into execution mode info struct.
    #####:  699:    for (unsigned i = 0, e = values.size(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:      auto attr = values.getValue()[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  701:      Value entry = rewriter.create<LLVM::ConstantOp>(loc, llvmI32Type, attr);
call    0 never executed
call    1 never executed
    #####:  702:      structValue = rewriter.create<LLVM::InsertValueOp>(
    #####:  703:          loc, structValue, entry, ArrayRef<int64_t>({1, i}));
call    0 never executed
        -:  704:    }
    #####:  705:    rewriter.create<LLVM::ReturnOp>(loc, ArrayRef<Value>({structValue}));
call    0 never executed
    #####:  706:    rewriter.eraseOp(op);
call    0 never executed
    #####:  707:    return success();
branch  0 never executed
branch  1 never executed
        -:  708:  }
        -:  709:};
        -:  710:
        -:  711:/// Converts `spirv.GlobalVariable` to `llvm.mlir.global`. Note that SPIR-V
        -:  712:/// global returns a pointer, whereas in LLVM dialect the global holds an actual
        -:  713:/// value. This difference is handled by `spirv.mlir.addressof` and
        -:  714:/// `llvm.mlir.addressof`ops that both return a pointer.
        -:  715:class GlobalVariablePattern
        -:  716:    : public SPIRVToLLVMConversion<spirv::GlobalVariableOp> {
        -:  717:public:
        -:  718:  using SPIRVToLLVMConversion<spirv::GlobalVariableOp>::SPIRVToLLVMConversion;
        -:  719:
        -:  720:  LogicalResult
function _ZNK12_GLOBAL__N_121GlobalVariablePattern15matchAndRewriteEN4mlir5spirv16GlobalVariableOpENS2_23GlobalVariableOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  721:  matchAndRewrite(spirv::GlobalVariableOp op, OpAdaptor adaptor,
        -:  722:                  ConversionPatternRewriter &rewriter) const override {
        -:  723:    // Currently, there is no support of initialization with a constant value in
        -:  724:    // SPIR-V dialect. Specialization constants are not considered as well.
    #####:  725:    if (op.getInitializer())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  726:      return failure();
        -:  727:
    #####:  728:    auto srcType = op.getType().cast<spirv::PointerType>();
call    0 never executed
call    1 never executed
    #####:  729:    auto dstType = typeConverter.convertType(srcType.getPointeeType());
call    0 never executed
call    1 never executed
    #####:  730:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  731:      return failure();
        -:  732:
        -:  733:    // Limit conversion to the current invocation only or `StorageBuffer`
        -:  734:    // required by SPIR-V runner.
        -:  735:    // This is okay because multiple invocations are not supported yet.
    #####:  736:    auto storageClass = srcType.getStorageClass();
call    0 never executed
    #####:  737:    switch (storageClass) {
branch  0 never executed
branch  1 never executed
    #####:  738:    case spirv::StorageClass::Input:
    #####:  739:    case spirv::StorageClass::Private:
    #####:  740:    case spirv::StorageClass::Output:
    #####:  741:    case spirv::StorageClass::StorageBuffer:
    #####:  742:    case spirv::StorageClass::UniformConstant:
    #####:  743:      break;
    #####:  744:    default:
    #####:  745:      return failure();
        -:  746:    }
        -:  747:
        -:  748:    // LLVM dialect spec: "If the global value is a constant, storing into it is
        -:  749:    // not allowed.". This corresponds to SPIR-V 'Input' and 'UniformConstant'
        -:  750:    // storage class that is read-only.
    #####:  751:    bool isConstant = (storageClass == spirv::StorageClass::Input) ||
        -:  752:                      (storageClass == spirv::StorageClass::UniformConstant);
        -:  753:    // SPIR-V spec: "By default, functions and global variables are private to a
        -:  754:    // module and cannot be accessed by other modules. However, a module may be
        -:  755:    // written to export or import functions and global (module scope)
        -:  756:    // variables.". Therefore, map 'Private' storage class to private linkage,
        -:  757:    // 'Input' and 'Output' to external linkage.
    #####:  758:    auto linkage = storageClass == spirv::StorageClass::Private
    #####:  759:                       ? LLVM::Linkage::Private
branch  0 never executed
branch  1 never executed
        -:  760:                       : LLVM::Linkage::External;
    #####:  761:    auto newGlobalOp = rewriter.replaceOpWithNewOp<LLVM::GlobalOp>(
    #####:  762:        op, dstType, isConstant, linkage, op.getSymName(), Attribute(),
    #####:  763:        /*alignment=*/0);
call    0 never executed
call    1 never executed
        -:  764:
        -:  765:    // Attach location attribute if applicable
    #####:  766:    if (op.getLocationAttr())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  767:      newGlobalOp->setAttr(op.getLocationAttrName(), op.getLocationAttr());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  768:
    #####:  769:    return success();
        -:  770:  }
        -:  771:};
        -:  772:
        -:  773:/// Converts SPIR-V cast ops that do not have straightforward LLVM
        -:  774:/// equivalent in LLVM dialect.
        -:  775:template <typename SPIRVOp, typename LLVMExtOp, typename LLVMTruncOp>
        -:  776:class IndirectCastPattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  777:public:
        -:  778:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  779:
        -:  780:  LogicalResult
    #####:  781:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  782:                  ConversionPatternRewriter &rewriter) const override {
        -:  783:
    #####:  784:    Type fromType = operation.getOperand().getType();
    #####:  785:    Type toType = operation.getType();
        -:  786:
    #####:  787:    auto dstType = this->typeConverter.convertType(toType);
    #####:  788:    if (!dstType)
    #####:  789:      return failure();
        -:  790:
    #####:  791:    if (getBitWidth(fromType) < getBitWidth(toType)) {
    #####:  792:      rewriter.template replaceOpWithNewOp<LLVMExtOp>(operation, dstType,
        -:  793:                                                      adaptor.getOperands());
    #####:  794:      return success();
        -:  795:    }
    #####:  796:    if (getBitWidth(fromType) > getBitWidth(toType)) {
    #####:  797:      rewriter.template replaceOpWithNewOp<LLVMTruncOp>(operation, dstType,
        -:  798:                                                        adaptor.getOperands());
    #####:  799:      return success();
        -:  800:    }
    #####:  801:    return failure();
        -:  802:  }
------------------
_ZNK12_GLOBAL__N_119IndirectCastPatternIN4mlir5spirv10FConvertOpENS1_4LLVM7FPExtOpENS4_9FPTruncOpEE15matchAndRewriteES3_NS2_17FConvertOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119IndirectCastPatternIN4mlir5spirv10FConvertOpENS1_4LLVM7FPExtOpENS4_9FPTruncOpEE15matchAndRewriteES3_NS2_17FConvertOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  781:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  782:                  ConversionPatternRewriter &rewriter) const override {
        -:  783:
    #####:  784:    Type fromType = operation.getOperand().getType();
call    0 never executed
call    1 never executed
    #####:  785:    Type toType = operation.getType();
        -:  786:
    #####:  787:    auto dstType = this->typeConverter.convertType(toType);
call    0 never executed
    #####:  788:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  789:      return failure();
        -:  790:
    #####:  791:    if (getBitWidth(fromType) < getBitWidth(toType)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  792:      rewriter.template replaceOpWithNewOp<LLVMExtOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -:  793:                                                      adaptor.getOperands());
    #####:  794:      return success();
        -:  795:    }
    #####:  796:    if (getBitWidth(fromType) > getBitWidth(toType)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  797:      rewriter.template replaceOpWithNewOp<LLVMTruncOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -:  798:                                                        adaptor.getOperands());
    #####:  799:      return success();
        -:  800:    }
    #####:  801:    return failure();
        -:  802:  }
------------------
_ZNK12_GLOBAL__N_119IndirectCastPatternIN4mlir5spirv10SConvertOpENS1_4LLVM6SExtOpENS4_7TruncOpEE15matchAndRewriteES3_NS2_17SConvertOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119IndirectCastPatternIN4mlir5spirv10SConvertOpENS1_4LLVM6SExtOpENS4_7TruncOpEE15matchAndRewriteES3_NS2_17SConvertOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  781:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  782:                  ConversionPatternRewriter &rewriter) const override {
        -:  783:
    #####:  784:    Type fromType = operation.getOperand().getType();
call    0 never executed
call    1 never executed
    #####:  785:    Type toType = operation.getType();
        -:  786:
    #####:  787:    auto dstType = this->typeConverter.convertType(toType);
call    0 never executed
    #####:  788:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  789:      return failure();
        -:  790:
    #####:  791:    if (getBitWidth(fromType) < getBitWidth(toType)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  792:      rewriter.template replaceOpWithNewOp<LLVMExtOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -:  793:                                                      adaptor.getOperands());
    #####:  794:      return success();
        -:  795:    }
    #####:  796:    if (getBitWidth(fromType) > getBitWidth(toType)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  797:      rewriter.template replaceOpWithNewOp<LLVMTruncOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -:  798:                                                        adaptor.getOperands());
    #####:  799:      return success();
        -:  800:    }
    #####:  801:    return failure();
        -:  802:  }
------------------
_ZNK12_GLOBAL__N_119IndirectCastPatternIN4mlir5spirv10UConvertOpENS1_4LLVM6ZExtOpENS4_7TruncOpEE15matchAndRewriteES3_NS2_17UConvertOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_119IndirectCastPatternIN4mlir5spirv10UConvertOpENS1_4LLVM6ZExtOpENS4_7TruncOpEE15matchAndRewriteES3_NS2_17UConvertOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  781:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  782:                  ConversionPatternRewriter &rewriter) const override {
        -:  783:
    #####:  784:    Type fromType = operation.getOperand().getType();
call    0 never executed
call    1 never executed
    #####:  785:    Type toType = operation.getType();
        -:  786:
    #####:  787:    auto dstType = this->typeConverter.convertType(toType);
call    0 never executed
    #####:  788:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  789:      return failure();
        -:  790:
    #####:  791:    if (getBitWidth(fromType) < getBitWidth(toType)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  792:      rewriter.template replaceOpWithNewOp<LLVMExtOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -:  793:                                                      adaptor.getOperands());
    #####:  794:      return success();
        -:  795:    }
    #####:  796:    if (getBitWidth(fromType) > getBitWidth(toType)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  797:      rewriter.template replaceOpWithNewOp<LLVMTruncOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -:  798:                                                        adaptor.getOperands());
    #####:  799:      return success();
        -:  800:    }
    #####:  801:    return failure();
        -:  802:  }
------------------
        -:  803:};
        -:  804:
        -:  805:class FunctionCallPattern
        -:  806:    : public SPIRVToLLVMConversion<spirv::FunctionCallOp> {
        -:  807:public:
        -:  808:  using SPIRVToLLVMConversion<spirv::FunctionCallOp>::SPIRVToLLVMConversion;
        -:  809:
        -:  810:  LogicalResult
function _ZNK12_GLOBAL__N_119FunctionCallPattern15matchAndRewriteEN4mlir5spirv14FunctionCallOpENS2_21FunctionCallOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  811:  matchAndRewrite(spirv::FunctionCallOp callOp, OpAdaptor adaptor,
        -:  812:                  ConversionPatternRewriter &rewriter) const override {
    #####:  813:    if (callOp.getNumResults() == 0) {
branch  0 never executed
branch  1 never executed
    #####:  814:      rewriter.replaceOpWithNewOp<LLVM::CallOp>(
    #####:  815:          callOp, llvm::None, adaptor.getOperands(), callOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  816:      return success();
        -:  817:    }
        -:  818:
        -:  819:    // Function returns a single result.
    #####:  820:    auto dstType = typeConverter.convertType(callOp.getType(0));
call    0 never executed
    #####:  821:    rewriter.replaceOpWithNewOp<LLVM::CallOp>(
    #####:  822:        callOp, dstType, adaptor.getOperands(), callOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  823:    return success();
        -:  824:  }
        -:  825:};
        -:  826:
        -:  827:/// Converts SPIR-V floating-point comparisons to llvm.fcmp "predicate"
        -:  828:template <typename SPIRVOp, LLVM::FCmpPredicate predicate>
        -:  829:class FComparePattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  830:public:
        -:  831:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  832:
        -:  833:  LogicalResult
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
    #####:  838:    if (!dstType)
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv11FOrdEqualOpELNS1_4LLVM13FCmpPredicateE1EE15matchAndRewriteES3_NS2_18FOrdEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv11FOrdEqualOpELNS1_4LLVM13FCmpPredicateE1EE15matchAndRewriteES3_NS2_18FOrdEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv17FOrdGreaterThanOpELNS1_4LLVM13FCmpPredicateE2EE15matchAndRewriteES3_NS2_24FOrdGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv17FOrdGreaterThanOpELNS1_4LLVM13FCmpPredicateE2EE15matchAndRewriteES3_NS2_24FOrdGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv22FOrdGreaterThanEqualOpELNS1_4LLVM13FCmpPredicateE3EE15matchAndRewriteES3_NS2_29FOrdGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv22FOrdGreaterThanEqualOpELNS1_4LLVM13FCmpPredicateE3EE15matchAndRewriteES3_NS2_29FOrdGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv19FOrdLessThanEqualOpELNS1_4LLVM13FCmpPredicateE5EE15matchAndRewriteES3_NS2_26FOrdLessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv19FOrdLessThanEqualOpELNS1_4LLVM13FCmpPredicateE5EE15matchAndRewriteES3_NS2_26FOrdLessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv14FOrdLessThanOpELNS1_4LLVM13FCmpPredicateE4EE15matchAndRewriteES3_NS2_21FOrdLessThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv14FOrdLessThanOpELNS1_4LLVM13FCmpPredicateE4EE15matchAndRewriteES3_NS2_21FOrdLessThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv14FOrdNotEqualOpELNS1_4LLVM13FCmpPredicateE6EE15matchAndRewriteES3_NS2_21FOrdNotEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv14FOrdNotEqualOpELNS1_4LLVM13FCmpPredicateE6EE15matchAndRewriteES3_NS2_21FOrdNotEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv13FUnordEqualOpELNS1_4LLVM13FCmpPredicateE8EE15matchAndRewriteES3_NS2_20FUnordEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv13FUnordEqualOpELNS1_4LLVM13FCmpPredicateE8EE15matchAndRewriteES3_NS2_20FUnordEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv19FUnordGreaterThanOpELNS1_4LLVM13FCmpPredicateE9EE15matchAndRewriteES3_NS2_26FUnordGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv19FUnordGreaterThanOpELNS1_4LLVM13FCmpPredicateE9EE15matchAndRewriteES3_NS2_26FUnordGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv24FUnordGreaterThanEqualOpELNS1_4LLVM13FCmpPredicateE10EE15matchAndRewriteES3_NS2_31FUnordGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv24FUnordGreaterThanEqualOpELNS1_4LLVM13FCmpPredicateE10EE15matchAndRewriteES3_NS2_31FUnordGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv21FUnordLessThanEqualOpELNS1_4LLVM13FCmpPredicateE12EE15matchAndRewriteES3_NS2_28FUnordLessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv21FUnordLessThanEqualOpELNS1_4LLVM13FCmpPredicateE12EE15matchAndRewriteES3_NS2_28FUnordLessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv16FUnordLessThanOpELNS1_4LLVM13FCmpPredicateE11EE15matchAndRewriteES3_NS2_23FUnordLessThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv16FUnordLessThanOpELNS1_4LLVM13FCmpPredicateE11EE15matchAndRewriteES3_NS2_23FUnordLessThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
_ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv16FUnordNotEqualOpELNS1_4LLVM13FCmpPredicateE13EE15matchAndRewriteES3_NS2_23FUnordNotEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115FComparePatternIN4mlir5spirv16FUnordNotEqualOpELNS1_4LLVM13FCmpPredicateE13EE15matchAndRewriteES3_NS2_23FUnordNotEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  834:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  835:                  ConversionPatternRewriter &rewriter) const override {
        -:  836:
    #####:  837:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  838:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  839:      return failure();
        -:  840:
    #####:  841:    rewriter.template replaceOpWithNewOp<LLVM::FCmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  842:        operation, dstType, predicate, operation.getOperand1(),
        -:  843:        operation.getOperand2());
    #####:  844:    return success();
        -:  845:  }
------------------
        -:  846:};
        -:  847:
        -:  848:/// Converts SPIR-V integer comparisons to llvm.icmp "predicate"
        -:  849:template <typename SPIRVOp, LLVM::ICmpPredicate predicate>
        -:  850:class IComparePattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  851:public:
        -:  852:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  853:
        -:  854:  LogicalResult
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
    #####:  859:    if (!dstType)
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv8IEqualOpELNS1_4LLVM13ICmpPredicateE0EE15matchAndRewriteES3_NS2_15IEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv8IEqualOpELNS1_4LLVM13ICmpPredicateE0EE15matchAndRewriteES3_NS2_15IEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv11INotEqualOpELNS1_4LLVM13ICmpPredicateE1EE15matchAndRewriteES3_NS2_18INotEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv11INotEqualOpELNS1_4LLVM13ICmpPredicateE1EE15matchAndRewriteES3_NS2_18INotEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv14SGreaterThanOpELNS1_4LLVM13ICmpPredicateE4EE15matchAndRewriteES3_NS2_21SGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv14SGreaterThanOpELNS1_4LLVM13ICmpPredicateE4EE15matchAndRewriteES3_NS2_21SGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv19SGreaterThanEqualOpELNS1_4LLVM13ICmpPredicateE5EE15matchAndRewriteES3_NS2_26SGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv19SGreaterThanEqualOpELNS1_4LLVM13ICmpPredicateE5EE15matchAndRewriteES3_NS2_26SGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv16SLessThanEqualOpELNS1_4LLVM13ICmpPredicateE3EE15matchAndRewriteES3_NS2_23SLessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv16SLessThanEqualOpELNS1_4LLVM13ICmpPredicateE3EE15matchAndRewriteES3_NS2_23SLessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv11SLessThanOpELNS1_4LLVM13ICmpPredicateE2EE15matchAndRewriteES3_NS2_18SLessThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv11SLessThanOpELNS1_4LLVM13ICmpPredicateE2EE15matchAndRewriteES3_NS2_18SLessThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv14UGreaterThanOpELNS1_4LLVM13ICmpPredicateE8EE15matchAndRewriteES3_NS2_21UGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv14UGreaterThanOpELNS1_4LLVM13ICmpPredicateE8EE15matchAndRewriteES3_NS2_21UGreaterThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv19UGreaterThanEqualOpELNS1_4LLVM13ICmpPredicateE9EE15matchAndRewriteES3_NS2_26UGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv19UGreaterThanEqualOpELNS1_4LLVM13ICmpPredicateE9EE15matchAndRewriteES3_NS2_26UGreaterThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv16ULessThanEqualOpELNS1_4LLVM13ICmpPredicateE7EE15matchAndRewriteES3_NS2_23ULessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv16ULessThanEqualOpELNS1_4LLVM13ICmpPredicateE7EE15matchAndRewriteES3_NS2_23ULessThanEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv11ULessThanOpELNS1_4LLVM13ICmpPredicateE6EE15matchAndRewriteES3_NS2_18ULessThanOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv11ULessThanOpELNS1_4LLVM13ICmpPredicateE6EE15matchAndRewriteES3_NS2_18ULessThanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv14LogicalEqualOpELNS1_4LLVM13ICmpPredicateE0EE15matchAndRewriteES3_NS2_21LogicalEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv14LogicalEqualOpELNS1_4LLVM13ICmpPredicateE0EE15matchAndRewriteES3_NS2_21LogicalEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
_ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv17LogicalNotEqualOpELNS1_4LLVM13ICmpPredicateE1EE15matchAndRewriteES3_NS2_24LogicalNotEqualOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_115IComparePatternIN4mlir5spirv17LogicalNotEqualOpELNS1_4LLVM13ICmpPredicateE1EE15matchAndRewriteES3_NS2_24LogicalNotEqualOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  855:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -:  856:                  ConversionPatternRewriter &rewriter) const override {
        -:  857:
    #####:  858:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####:  859:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  860:      return failure();
        -:  861:
    #####:  862:    rewriter.template replaceOpWithNewOp<LLVM::ICmpOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  863:        operation, dstType, predicate, operation.getOperand1(),
        -:  864:        operation.getOperand2());
    #####:  865:    return success();
        -:  866:  }
------------------
        -:  867:};
        -:  868:
        -:  869:class InverseSqrtPattern
        -:  870:    : public SPIRVToLLVMConversion<spirv::GLInverseSqrtOp> {
        -:  871:public:
        -:  872:  using SPIRVToLLVMConversion<spirv::GLInverseSqrtOp>::SPIRVToLLVMConversion;
        -:  873:
        -:  874:  LogicalResult
function _ZNK12_GLOBAL__N_118InverseSqrtPattern15matchAndRewriteEN4mlir5spirv15GLInverseSqrtOpENS2_22GLInverseSqrtOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  875:  matchAndRewrite(spirv::GLInverseSqrtOp op, OpAdaptor adaptor,
        -:  876:                  ConversionPatternRewriter &rewriter) const override {
    #####:  877:    auto srcType = op.getType();
call    0 never executed
    #####:  878:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####:  879:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  880:      return failure();
        -:  881:
    #####:  882:    Location loc = op.getLoc();
call    0 never executed
    #####:  883:    Value one = createFPConstant(loc, srcType, dstType, rewriter, 1.0);
call    0 never executed
    #####:  884:    Value sqrt = rewriter.create<LLVM::SqrtOp>(loc, dstType, op.getOperand());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  885:    rewriter.replaceOpWithNewOp<LLVM::FDivOp>(op, dstType, one, sqrt);
call    0 never executed
    #####:  886:    return success();
        -:  887:  }
        -:  888:};
        -:  889:
        -:  890:/// Converts `spirv.Load` and `spirv.Store` to LLVM dialect.
        -:  891:template <typename SPIRVOp>
        -:  892:class LoadStorePattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  893:public:
        -:  894:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  895:
        -:  896:  LogicalResult
    #####:  897:  matchAndRewrite(SPIRVOp op, typename SPIRVOp::Adaptor adaptor,
        -:  898:                  ConversionPatternRewriter &rewriter) const override {
    #####:  899:    if (!op.getMemoryAccess()) {
    #####:  900:      return replaceWithLoadOrStore(op, adaptor.getOperands(), rewriter,
        -:  901:                                    this->typeConverter, /*alignment=*/0,
        -:  902:                                    /*isVolatile=*/false,
    #####:  903:                                    /*isNonTemporal=*/false);
        -:  904:    }
    #####:  905:    auto memoryAccess = *op.getMemoryAccess();
    #####:  906:    switch (memoryAccess) {
    #####:  907:    case spirv::MemoryAccess::Aligned:
        -:  908:    case spirv::MemoryAccess::None:
        -:  909:    case spirv::MemoryAccess::Nontemporal:
        -:  910:    case spirv::MemoryAccess::Volatile: {
    #####:  911:      unsigned alignment =
    #####:  912:          memoryAccess == spirv::MemoryAccess::Aligned ? *op.getAlignment() : 0;
    #####:  913:      bool isNonTemporal = memoryAccess == spirv::MemoryAccess::Nontemporal;
    #####:  914:      bool isVolatile = memoryAccess == spirv::MemoryAccess::Volatile;
    #####:  915:      return replaceWithLoadOrStore(op, adaptor.getOperands(), rewriter,
        -:  916:                                    this->typeConverter, alignment, isVolatile,
    #####:  917:                                    isNonTemporal);
        -:  918:    }
    #####:  919:    default:
        -:  920:      // There is no support of other memory access attributes.
    #####:  921:      return failure();
        -:  922:    }
        -:  923:  }
------------------
_ZNK12_GLOBAL__N_116LoadStorePatternIN4mlir5spirv6LoadOpEE15matchAndRewriteES3_NS2_13LoadOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116LoadStorePatternIN4mlir5spirv6LoadOpEE15matchAndRewriteES3_NS2_13LoadOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  897:  matchAndRewrite(SPIRVOp op, typename SPIRVOp::Adaptor adaptor,
        -:  898:                  ConversionPatternRewriter &rewriter) const override {
    #####:  899:    if (!op.getMemoryAccess()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:      return replaceWithLoadOrStore(op, adaptor.getOperands(), rewriter,
call    0 never executed
call    1 never executed
        -:  901:                                    this->typeConverter, /*alignment=*/0,
        -:  902:                                    /*isVolatile=*/false,
    #####:  903:                                    /*isNonTemporal=*/false);
        -:  904:    }
    #####:  905:    auto memoryAccess = *op.getMemoryAccess();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:    switch (memoryAccess) {
branch  0 never executed
branch  1 never executed
    #####:  907:    case spirv::MemoryAccess::Aligned:
        -:  908:    case spirv::MemoryAccess::None:
        -:  909:    case spirv::MemoryAccess::Nontemporal:
        -:  910:    case spirv::MemoryAccess::Volatile: {
    #####:  911:      unsigned alignment =
    #####:  912:          memoryAccess == spirv::MemoryAccess::Aligned ? *op.getAlignment() : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  913:      bool isNonTemporal = memoryAccess == spirv::MemoryAccess::Nontemporal;
    #####:  914:      bool isVolatile = memoryAccess == spirv::MemoryAccess::Volatile;
    #####:  915:      return replaceWithLoadOrStore(op, adaptor.getOperands(), rewriter,
call    0 never executed
call    1 never executed
        -:  916:                                    this->typeConverter, alignment, isVolatile,
    #####:  917:                                    isNonTemporal);
        -:  918:    }
    #####:  919:    default:
        -:  920:      // There is no support of other memory access attributes.
    #####:  921:      return failure();
        -:  922:    }
        -:  923:  }
------------------
_ZNK12_GLOBAL__N_116LoadStorePatternIN4mlir5spirv7StoreOpEE15matchAndRewriteES3_NS2_14StoreOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116LoadStorePatternIN4mlir5spirv7StoreOpEE15matchAndRewriteES3_NS2_14StoreOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  897:  matchAndRewrite(SPIRVOp op, typename SPIRVOp::Adaptor adaptor,
        -:  898:                  ConversionPatternRewriter &rewriter) const override {
    #####:  899:    if (!op.getMemoryAccess()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:      return replaceWithLoadOrStore(op, adaptor.getOperands(), rewriter,
call    0 never executed
call    1 never executed
        -:  901:                                    this->typeConverter, /*alignment=*/0,
        -:  902:                                    /*isVolatile=*/false,
    #####:  903:                                    /*isNonTemporal=*/false);
        -:  904:    }
    #####:  905:    auto memoryAccess = *op.getMemoryAccess();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:    switch (memoryAccess) {
branch  0 never executed
branch  1 never executed
    #####:  907:    case spirv::MemoryAccess::Aligned:
        -:  908:    case spirv::MemoryAccess::None:
        -:  909:    case spirv::MemoryAccess::Nontemporal:
        -:  910:    case spirv::MemoryAccess::Volatile: {
    #####:  911:      unsigned alignment =
    #####:  912:          memoryAccess == spirv::MemoryAccess::Aligned ? *op.getAlignment() : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  913:      bool isNonTemporal = memoryAccess == spirv::MemoryAccess::Nontemporal;
    #####:  914:      bool isVolatile = memoryAccess == spirv::MemoryAccess::Volatile;
    #####:  915:      return replaceWithLoadOrStore(op, adaptor.getOperands(), rewriter,
call    0 never executed
call    1 never executed
        -:  916:                                    this->typeConverter, alignment, isVolatile,
    #####:  917:                                    isNonTemporal);
        -:  918:    }
    #####:  919:    default:
        -:  920:      // There is no support of other memory access attributes.
    #####:  921:      return failure();
        -:  922:    }
        -:  923:  }
------------------
        -:  924:};
        -:  925:
        -:  926:/// Converts `spirv.Not` and `spirv.LogicalNot` into LLVM dialect.
        -:  927:template <typename SPIRVOp>
        -:  928:class NotPattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  929:public:
        -:  930:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  931:
        -:  932:  LogicalResult
    #####:  933:  matchAndRewrite(SPIRVOp notOp, typename SPIRVOp::Adaptor adaptor,
        -:  934:                  ConversionPatternRewriter &rewriter) const override {
    #####:  935:    auto srcType = notOp.getType();
    #####:  936:    auto dstType = this->typeConverter.convertType(srcType);
    #####:  937:    if (!dstType)
    #####:  938:      return failure();
        -:  939:
    #####:  940:    Location loc = notOp.getLoc();
    #####:  941:    IntegerAttr minusOne = minusOneIntegerAttribute(srcType, rewriter);
    #####:  942:    auto mask = srcType.template isa<VectorType>()
    #####:  943:                    ? rewriter.create<LLVM::ConstantOp>(
        -:  944:                          loc, dstType,
    #####:  945:                          SplatElementsAttr::get(
        -:  946:                              srcType.template cast<VectorType>(), minusOne))
        -:  947:                    : rewriter.create<LLVM::ConstantOp>(loc, dstType, minusOne);
    #####:  948:    rewriter.template replaceOpWithNewOp<LLVM::XOrOp>(notOp, dstType,
        -:  949:                                                      notOp.getOperand(), mask);
    #####:  950:    return success();
        -:  951:  }
------------------
_ZNK12_GLOBAL__N_110NotPatternIN4mlir5spirv5NotOpEE15matchAndRewriteES3_NS2_12NotOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_110NotPatternIN4mlir5spirv5NotOpEE15matchAndRewriteES3_NS2_12NotOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  933:  matchAndRewrite(SPIRVOp notOp, typename SPIRVOp::Adaptor adaptor,
call    0 never executed
        -:  934:                  ConversionPatternRewriter &rewriter) const override {
    #####:  935:    auto srcType = notOp.getType();
    #####:  936:    auto dstType = this->typeConverter.convertType(srcType);
call    0 never executed
    #####:  937:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  938:      return failure();
        -:  939:
    #####:  940:    Location loc = notOp.getLoc();
call    0 never executed
    #####:  941:    IntegerAttr minusOne = minusOneIntegerAttribute(srcType, rewriter);
call    0 never executed
call    1 never executed
    #####:  942:    auto mask = srcType.template isa<VectorType>()
    #####:  943:                    ? rewriter.create<LLVM::ConstantOp>(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  944:                          loc, dstType,
    #####:  945:                          SplatElementsAttr::get(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  946:                              srcType.template cast<VectorType>(), minusOne))
        -:  947:                    : rewriter.create<LLVM::ConstantOp>(loc, dstType, minusOne);
    #####:  948:    rewriter.template replaceOpWithNewOp<LLVM::XOrOp>(notOp, dstType,
call    0 never executed
call    1 never executed
        -:  949:                                                      notOp.getOperand(), mask);
    #####:  950:    return success();
        -:  951:  }
------------------
_ZNK12_GLOBAL__N_110NotPatternIN4mlir5spirv12LogicalNotOpEE15matchAndRewriteES3_NS2_19LogicalNotOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_110NotPatternIN4mlir5spirv12LogicalNotOpEE15matchAndRewriteES3_NS2_19LogicalNotOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  933:  matchAndRewrite(SPIRVOp notOp, typename SPIRVOp::Adaptor adaptor,
call    0 never executed
        -:  934:                  ConversionPatternRewriter &rewriter) const override {
    #####:  935:    auto srcType = notOp.getType();
    #####:  936:    auto dstType = this->typeConverter.convertType(srcType);
call    0 never executed
    #####:  937:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####:  938:      return failure();
        -:  939:
    #####:  940:    Location loc = notOp.getLoc();
call    0 never executed
    #####:  941:    IntegerAttr minusOne = minusOneIntegerAttribute(srcType, rewriter);
call    0 never executed
call    1 never executed
    #####:  942:    auto mask = srcType.template isa<VectorType>()
    #####:  943:                    ? rewriter.create<LLVM::ConstantOp>(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  944:                          loc, dstType,
    #####:  945:                          SplatElementsAttr::get(
call    0 never executed
call    1 never executed
call    2 never executed
        -:  946:                              srcType.template cast<VectorType>(), minusOne))
        -:  947:                    : rewriter.create<LLVM::ConstantOp>(loc, dstType, minusOne);
    #####:  948:    rewriter.template replaceOpWithNewOp<LLVM::XOrOp>(notOp, dstType,
call    0 never executed
call    1 never executed
        -:  949:                                                      notOp.getOperand(), mask);
    #####:  950:    return success();
        -:  951:  }
------------------
        -:  952:};
        -:  953:
        -:  954:/// A template pattern that erases the given `SPIRVOp`.
        -:  955:template <typename SPIRVOp>
        -:  956:class ErasePattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -:  957:public:
        -:  958:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -:  959:
        -:  960:  LogicalResult
    #####:  961:  matchAndRewrite(SPIRVOp op, typename SPIRVOp::Adaptor adaptor,
        -:  962:                  ConversionPatternRewriter &rewriter) const override {
    #####:  963:    rewriter.eraseOp(op);
    #####:  964:    return success();
        -:  965:  }
------------------
_ZNK12_GLOBAL__N_112ErasePatternIN4mlir5spirv7MergeOpEE15matchAndRewriteES3_NS2_14MergeOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_112ErasePatternIN4mlir5spirv7MergeOpEE15matchAndRewriteES3_NS2_14MergeOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  961:  matchAndRewrite(SPIRVOp op, typename SPIRVOp::Adaptor adaptor,
        -:  962:                  ConversionPatternRewriter &rewriter) const override {
    #####:  963:    rewriter.eraseOp(op);
call    0 never executed
    #####:  964:    return success();
        -:  965:  }
------------------
_ZNK12_GLOBAL__N_112ErasePatternIN4mlir5spirv12EntryPointOpEE15matchAndRewriteES3_NS2_19EntryPointOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_112ErasePatternIN4mlir5spirv12EntryPointOpEE15matchAndRewriteES3_NS2_19EntryPointOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  961:  matchAndRewrite(SPIRVOp op, typename SPIRVOp::Adaptor adaptor,
        -:  962:                  ConversionPatternRewriter &rewriter) const override {
    #####:  963:    rewriter.eraseOp(op);
call    0 never executed
    #####:  964:    return success();
        -:  965:  }
------------------
        -:  966:};
        -:  967:
        -:  968:class ReturnPattern : public SPIRVToLLVMConversion<spirv::ReturnOp> {
        -:  969:public:
        -:  970:  using SPIRVToLLVMConversion<spirv::ReturnOp>::SPIRVToLLVMConversion;
        -:  971:
        -:  972:  LogicalResult
function _ZNK12_GLOBAL__N_113ReturnPattern15matchAndRewriteEN4mlir5spirv8ReturnOpENS2_15ReturnOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  973:  matchAndRewrite(spirv::ReturnOp returnOp, OpAdaptor adaptor,
        -:  974:                  ConversionPatternRewriter &rewriter) const override {
    #####:  975:    rewriter.replaceOpWithNewOp<LLVM::ReturnOp>(returnOp, ArrayRef<Type>(),
    #####:  976:                                                ArrayRef<Value>());
call    0 never executed
    #####:  977:    return success();
        -:  978:  }
        -:  979:};
        -:  980:
        -:  981:class ReturnValuePattern : public SPIRVToLLVMConversion<spirv::ReturnValueOp> {
        -:  982:public:
        -:  983:  using SPIRVToLLVMConversion<spirv::ReturnValueOp>::SPIRVToLLVMConversion;
        -:  984:
        -:  985:  LogicalResult
function _ZNK12_GLOBAL__N_118ReturnValuePattern15matchAndRewriteEN4mlir5spirv13ReturnValueOpENS2_20ReturnValueOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  986:  matchAndRewrite(spirv::ReturnValueOp returnValueOp, OpAdaptor adaptor,
        -:  987:                  ConversionPatternRewriter &rewriter) const override {
    #####:  988:    rewriter.replaceOpWithNewOp<LLVM::ReturnOp>(returnValueOp, ArrayRef<Type>(),
call    0 never executed
    #####:  989:                                                adaptor.getOperands());
call    0 never executed
call    1 never executed
    #####:  990:    return success();
        -:  991:  }
        -:  992:};
        -:  993:
        -:  994:/// Converts `spirv.mlir.loop` to LLVM dialect. All blocks within selection
        -:  995:/// should be reachable for conversion to succeed. The structure of the loop in
        -:  996:/// LLVM dialect will be the following:
        -:  997:///
        -:  998:///      +------------------------------------+
        -:  999:///      | <code before spirv.mlir.loop>        |
        -: 1000:///      | llvm.br ^header                    |
        -: 1001:///      +------------------------------------+
        -: 1002:///                           |
        -: 1003:///   +----------------+      |
        -: 1004:///   |                |      |
        -: 1005:///   |                V      V
        -: 1006:///   |  +------------------------------------+
        -: 1007:///   |  | ^header:                           |
        -: 1008:///   |  |   <header code>                    |
        -: 1009:///   |  |   llvm.cond_br %cond, ^body, ^exit |
        -: 1010:///   |  +------------------------------------+
        -: 1011:///   |                    |
        -: 1012:///   |                    |----------------------+
        -: 1013:///   |                    |                      |
        -: 1014:///   |                    V                      |
        -: 1015:///   |  +------------------------------------+   |
        -: 1016:///   |  | ^body:                             |   |
        -: 1017:///   |  |   <body code>                      |   |
        -: 1018:///   |  |   llvm.br ^continue                |   |
        -: 1019:///   |  +------------------------------------+   |
        -: 1020:///   |                    |                      |
        -: 1021:///   |                    V                      |
        -: 1022:///   |  +------------------------------------+   |
        -: 1023:///   |  | ^continue:                         |   |
        -: 1024:///   |  |   <continue code>                  |   |
        -: 1025:///   |  |   llvm.br ^header                  |   |
        -: 1026:///   |  +------------------------------------+   |
        -: 1027:///   |               |                           |
        -: 1028:///   +---------------+    +----------------------+
        -: 1029:///                        |
        -: 1030:///                        V
        -: 1031:///      +------------------------------------+
        -: 1032:///      | ^exit:                             |
        -: 1033:///      |   llvm.br ^remaining               |
        -: 1034:///      +------------------------------------+
        -: 1035:///                        |
        -: 1036:///                        V
        -: 1037:///      +------------------------------------+
        -: 1038:///      | ^remaining:                        |
        -: 1039:///      |   <code after spirv.mlir.loop>       |
        -: 1040:///      +------------------------------------+
        -: 1041:///
        -: 1042:class LoopPattern : public SPIRVToLLVMConversion<spirv::LoopOp> {
        -: 1043:public:
        -: 1044:  using SPIRVToLLVMConversion<spirv::LoopOp>::SPIRVToLLVMConversion;
        -: 1045:
        -: 1046:  LogicalResult
function _ZNK12_GLOBAL__N_111LoopPattern15matchAndRewriteEN4mlir5spirv6LoopOpENS2_13LoopOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1047:  matchAndRewrite(spirv::LoopOp loopOp, OpAdaptor adaptor,
        -: 1048:                  ConversionPatternRewriter &rewriter) const override {
        -: 1049:    // There is no support of loop control at the moment.
    #####: 1050:    if (loopOp.getLoopControl() != spirv::LoopControl::None)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1051:      return failure();
        -: 1052:
    #####: 1053:    Location loc = loopOp.getLoc();
call    0 never executed
        -: 1054:
        -: 1055:    // Split the current block after `spirv.mlir.loop`. The remaining ops will
        -: 1056:    // be used in `endBlock`.
    #####: 1057:    Block *currentBlock = rewriter.getBlock();
call    0 never executed
    #####: 1058:    auto position = Block::iterator(loopOp);
call    0 never executed
    #####: 1059:    Block *endBlock = rewriter.splitBlock(currentBlock, position);
call    0 never executed
        -: 1060:
        -: 1061:    // Remove entry block and create a branch in the current block going to the
        -: 1062:    // header block.
    #####: 1063:    Block *entryBlock = loopOp.getEntryBlock();
call    0 never executed
    #####: 1064:    assert(entryBlock->getOperations().size() == 1);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1065:    auto brOp = dyn_cast<spirv::BranchOp>(entryBlock->getOperations().front());
call    0 never executed
call    1 never executed
    #####: 1066:    if (!brOp)
branch  0 never executed
branch  1 never executed
    #####: 1067:      return failure();
    #####: 1068:    Block *headerBlock = loopOp.getHeaderBlock();
call    0 never executed
    #####: 1069:    rewriter.setInsertionPointToEnd(currentBlock);
call    0 never executed
    #####: 1070:    rewriter.create<LLVM::BrOp>(loc, brOp.getBlockArguments(), headerBlock);
call    0 never executed
call    1 never executed
    #####: 1071:    rewriter.eraseBlock(entryBlock);
call    0 never executed
        -: 1072:
        -: 1073:    // Branch from merge block to end block.
    #####: 1074:    Block *mergeBlock = loopOp.getMergeBlock();
call    0 never executed
    #####: 1075:    Operation *terminator = mergeBlock->getTerminator();
call    0 never executed
    #####: 1076:    ValueRange terminatorOperands = terminator->getOperands();
call    0 never executed
call    1 never executed
    #####: 1077:    rewriter.setInsertionPointToEnd(mergeBlock);
call    0 never executed
    #####: 1078:    rewriter.create<LLVM::BrOp>(loc, terminatorOperands, endBlock);
call    0 never executed
        -: 1079:
    #####: 1080:    rewriter.inlineRegionBefore(loopOp.getBody(), endBlock);
call    0 never executed
call    1 never executed
    #####: 1081:    rewriter.replaceOp(loopOp, endBlock->getArguments());
call    0 never executed
call    1 never executed
    #####: 1082:    return success();
        -: 1083:  }
        -: 1084:};
        -: 1085:
        -: 1086:/// Converts `spirv.mlir.selection` with `spirv.BranchConditional` in its header
        -: 1087:/// block. All blocks within selection should be reachable for conversion to
        -: 1088:/// succeed.
        -: 1089:class SelectionPattern : public SPIRVToLLVMConversion<spirv::SelectionOp> {
        -: 1090:public:
        -: 1091:  using SPIRVToLLVMConversion<spirv::SelectionOp>::SPIRVToLLVMConversion;
        -: 1092:
        -: 1093:  LogicalResult
function _ZNK12_GLOBAL__N_116SelectionPattern15matchAndRewriteEN4mlir5spirv11SelectionOpENS2_18SelectionOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1094:  matchAndRewrite(spirv::SelectionOp op, OpAdaptor adaptor,
        -: 1095:                  ConversionPatternRewriter &rewriter) const override {
        -: 1096:    // There is no support for `Flatten` or `DontFlatten` selection control at
        -: 1097:    // the moment. This are just compiler hints and can be performed during the
        -: 1098:    // optimization passes.
    #####: 1099:    if (op.getSelectionControl() != spirv::SelectionControl::None)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1100:      return failure();
        -: 1101:
        -: 1102:    // `spirv.mlir.selection` should have at least two blocks: one selection
        -: 1103:    // header block and one merge block. If no blocks are present, or control
        -: 1104:    // flow branches straight to merge block (two blocks are present), the op is
        -: 1105:    // redundant and it is erased.
    #####: 1106:    if (op.getBody().getBlocks().size() <= 2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1107:      rewriter.eraseOp(op);
call    0 never executed
    #####: 1108:      return success();
        -: 1109:    }
        -: 1110:
    #####: 1111:    Location loc = op.getLoc();
call    0 never executed
        -: 1112:
        -: 1113:    // Split the current block after `spirv.mlir.selection`. The remaining ops
        -: 1114:    // will be used in `continueBlock`.
    #####: 1115:    auto *currentBlock = rewriter.getInsertionBlock();
call    0 never executed
    #####: 1116:    rewriter.setInsertionPointAfter(op);
call    0 never executed
    #####: 1117:    auto position = rewriter.getInsertionPoint();
call    0 never executed
    #####: 1118:    auto *continueBlock = rewriter.splitBlock(currentBlock, position);
call    0 never executed
        -: 1119:
        -: 1120:    // Extract conditional branch information from the header block. By SPIR-V
        -: 1121:    // dialect spec, it should contain `spirv.BranchConditional` or
        -: 1122:    // `spirv.Switch` op. Note that `spirv.Switch op` is not supported at the
        -: 1123:    // moment in the SPIR-V dialect. Remove this block when finished.
    #####: 1124:    auto *headerBlock = op.getHeaderBlock();
call    0 never executed
    #####: 1125:    assert(headerBlock->getOperations().size() == 1);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1126:    auto condBrOp = dyn_cast<spirv::BranchConditionalOp>(
call    0 never executed
    #####: 1127:        headerBlock->getOperations().front());
call    0 never executed
call    1 never executed
    #####: 1128:    if (!condBrOp)
branch  0 never executed
branch  1 never executed
    #####: 1129:      return failure();
    #####: 1130:    rewriter.eraseBlock(headerBlock);
call    0 never executed
        -: 1131:
        -: 1132:    // Branch from merge block to continue block.
    #####: 1133:    auto *mergeBlock = op.getMergeBlock();
call    0 never executed
    #####: 1134:    Operation *terminator = mergeBlock->getTerminator();
call    0 never executed
    #####: 1135:    ValueRange terminatorOperands = terminator->getOperands();
call    0 never executed
call    1 never executed
    #####: 1136:    rewriter.setInsertionPointToEnd(mergeBlock);
call    0 never executed
    #####: 1137:    rewriter.create<LLVM::BrOp>(loc, terminatorOperands, continueBlock);
call    0 never executed
        -: 1138:
        -: 1139:    // Link current block to `true` and `false` blocks within the selection.
    #####: 1140:    Block *trueBlock = condBrOp.getTrueBlock();
call    0 never executed
    #####: 1141:    Block *falseBlock = condBrOp.getFalseBlock();
call    0 never executed
    #####: 1142:    rewriter.setInsertionPointToEnd(currentBlock);
call    0 never executed
    #####: 1143:    rewriter.create<LLVM::CondBrOp>(loc, condBrOp.getCondition(), trueBlock,
call    0 never executed
    #####: 1144:                                    condBrOp.getTrueTargetOperands(), falseBlock,
call    0 never executed
    #####: 1145:                                    condBrOp.getFalseTargetOperands());
call    0 never executed
call    1 never executed
        -: 1146:
    #####: 1147:    rewriter.inlineRegionBefore(op.getBody(), continueBlock);
call    0 never executed
call    1 never executed
    #####: 1148:    rewriter.replaceOp(op, continueBlock->getArguments());
call    0 never executed
call    1 never executed
    #####: 1149:    return success();
        -: 1150:  }
        -: 1151:};
        -: 1152:
        -: 1153:/// Converts SPIR-V shift ops to LLVM shift ops. Since LLVM dialect
        -: 1154:/// puts a restriction on `Shift` and `Base` to have the same bit width,
        -: 1155:/// `Shift` is zero or sign extended to match this specification. Cases when
        -: 1156:/// `Shift` bit width > `Base` bit width are considered to be illegal.
        -: 1157:template <typename SPIRVOp, typename LLVMOp>
        -: 1158:class ShiftPattern : public SPIRVToLLVMConversion<SPIRVOp> {
        -: 1159:public:
        -: 1160:  using SPIRVToLLVMConversion<SPIRVOp>::SPIRVToLLVMConversion;
        -: 1161:
        -: 1162:  LogicalResult
    #####: 1163:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -: 1164:                  ConversionPatternRewriter &rewriter) const override {
        -: 1165:
    #####: 1166:    auto dstType = this->typeConverter.convertType(operation.getType());
    #####: 1167:    if (!dstType)
    #####: 1168:      return failure();
        -: 1169:
    #####: 1170:    Type op1Type = operation.getOperand1().getType();
    #####: 1171:    Type op2Type = operation.getOperand2().getType();
        -: 1172:
    #####: 1173:    if (op1Type == op2Type) {
    #####: 1174:      rewriter.template replaceOpWithNewOp<LLVMOp>(operation, dstType,
        -: 1175:                                                   adaptor.getOperands());
    #####: 1176:      return success();
        -: 1177:    }
        -: 1178:
    #####: 1179:    Location loc = operation.getLoc();
    #####: 1180:    Value extended;
    #####: 1181:    if (isUnsignedIntegerOrVector(op2Type)) {
    #####: 1182:      extended = rewriter.template create<LLVM::ZExtOp>(loc, dstType,
        -: 1183:                                                        adaptor.getOperand2());
        -: 1184:    } else {
    #####: 1185:      extended = rewriter.template create<LLVM::SExtOp>(loc, dstType,
        -: 1186:                                                        adaptor.getOperand2());
        -: 1187:    }
    #####: 1188:    Value result = rewriter.template create<LLVMOp>(
        -: 1189:        loc, dstType, adaptor.getOperand1(), extended);
    #####: 1190:    rewriter.replaceOp(operation, result);
    #####: 1191:    return success();
        -: 1192:  }
------------------
_ZNK12_GLOBAL__N_112ShiftPatternIN4mlir5spirv22ShiftRightArithmeticOpENS1_4LLVM6AShrOpEE15matchAndRewriteES3_NS2_29ShiftRightArithmeticOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_112ShiftPatternIN4mlir5spirv22ShiftRightArithmeticOpENS1_4LLVM6AShrOpEE15matchAndRewriteES3_NS2_29ShiftRightArithmeticOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1163:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -: 1164:                  ConversionPatternRewriter &rewriter) const override {
        -: 1165:
    #####: 1166:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####: 1167:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####: 1168:      return failure();
        -: 1169:
    #####: 1170:    Type op1Type = operation.getOperand1().getType();
call    0 never executed
call    1 never executed
    #####: 1171:    Type op2Type = operation.getOperand2().getType();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1172:
    #####: 1173:    if (op1Type == op2Type) {
branch  0 never executed
branch  1 never executed
    #####: 1174:      rewriter.template replaceOpWithNewOp<LLVMOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -: 1175:                                                   adaptor.getOperands());
    #####: 1176:      return success();
        -: 1177:    }
        -: 1178:
    #####: 1179:    Location loc = operation.getLoc();
call    0 never executed
    #####: 1180:    Value extended;
    #####: 1181:    if (isUnsignedIntegerOrVector(op2Type)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1182:      extended = rewriter.template create<LLVM::ZExtOp>(loc, dstType,
call    0 never executed
call    1 never executed
        -: 1183:                                                        adaptor.getOperand2());
        -: 1184:    } else {
    #####: 1185:      extended = rewriter.template create<LLVM::SExtOp>(loc, dstType,
call    0 never executed
call    1 never executed
        -: 1186:                                                        adaptor.getOperand2());
        -: 1187:    }
    #####: 1188:    Value result = rewriter.template create<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1189:        loc, dstType, adaptor.getOperand1(), extended);
    #####: 1190:    rewriter.replaceOp(operation, result);
call    0 never executed
    #####: 1191:    return success();
        -: 1192:  }
------------------
_ZNK12_GLOBAL__N_112ShiftPatternIN4mlir5spirv19ShiftRightLogicalOpENS1_4LLVM6LShrOpEE15matchAndRewriteES3_NS2_26ShiftRightLogicalOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_112ShiftPatternIN4mlir5spirv19ShiftRightLogicalOpENS1_4LLVM6LShrOpEE15matchAndRewriteES3_NS2_26ShiftRightLogicalOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1163:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -: 1164:                  ConversionPatternRewriter &rewriter) const override {
        -: 1165:
    #####: 1166:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####: 1167:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####: 1168:      return failure();
        -: 1169:
    #####: 1170:    Type op1Type = operation.getOperand1().getType();
call    0 never executed
call    1 never executed
    #####: 1171:    Type op2Type = operation.getOperand2().getType();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1172:
    #####: 1173:    if (op1Type == op2Type) {
branch  0 never executed
branch  1 never executed
    #####: 1174:      rewriter.template replaceOpWithNewOp<LLVMOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -: 1175:                                                   adaptor.getOperands());
    #####: 1176:      return success();
        -: 1177:    }
        -: 1178:
    #####: 1179:    Location loc = operation.getLoc();
call    0 never executed
    #####: 1180:    Value extended;
    #####: 1181:    if (isUnsignedIntegerOrVector(op2Type)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1182:      extended = rewriter.template create<LLVM::ZExtOp>(loc, dstType,
call    0 never executed
call    1 never executed
        -: 1183:                                                        adaptor.getOperand2());
        -: 1184:    } else {
    #####: 1185:      extended = rewriter.template create<LLVM::SExtOp>(loc, dstType,
call    0 never executed
call    1 never executed
        -: 1186:                                                        adaptor.getOperand2());
        -: 1187:    }
    #####: 1188:    Value result = rewriter.template create<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1189:        loc, dstType, adaptor.getOperand1(), extended);
    #####: 1190:    rewriter.replaceOp(operation, result);
call    0 never executed
    #####: 1191:    return success();
        -: 1192:  }
------------------
_ZNK12_GLOBAL__N_112ShiftPatternIN4mlir5spirv18ShiftLeftLogicalOpENS1_4LLVM5ShlOpEE15matchAndRewriteES3_NS2_25ShiftLeftLogicalOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_112ShiftPatternIN4mlir5spirv18ShiftLeftLogicalOpENS1_4LLVM5ShlOpEE15matchAndRewriteES3_NS2_25ShiftLeftLogicalOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1163:  matchAndRewrite(SPIRVOp operation, typename SPIRVOp::Adaptor adaptor,
        -: 1164:                  ConversionPatternRewriter &rewriter) const override {
        -: 1165:
    #####: 1166:    auto dstType = this->typeConverter.convertType(operation.getType());
call    0 never executed
    #####: 1167:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####: 1168:      return failure();
        -: 1169:
    #####: 1170:    Type op1Type = operation.getOperand1().getType();
call    0 never executed
call    1 never executed
    #####: 1171:    Type op2Type = operation.getOperand2().getType();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1172:
    #####: 1173:    if (op1Type == op2Type) {
branch  0 never executed
branch  1 never executed
    #####: 1174:      rewriter.template replaceOpWithNewOp<LLVMOp>(operation, dstType,
call    0 never executed
call    1 never executed
        -: 1175:                                                   adaptor.getOperands());
    #####: 1176:      return success();
        -: 1177:    }
        -: 1178:
    #####: 1179:    Location loc = operation.getLoc();
call    0 never executed
    #####: 1180:    Value extended;
    #####: 1181:    if (isUnsignedIntegerOrVector(op2Type)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1182:      extended = rewriter.template create<LLVM::ZExtOp>(loc, dstType,
call    0 never executed
call    1 never executed
        -: 1183:                                                        adaptor.getOperand2());
        -: 1184:    } else {
    #####: 1185:      extended = rewriter.template create<LLVM::SExtOp>(loc, dstType,
call    0 never executed
call    1 never executed
        -: 1186:                                                        adaptor.getOperand2());
        -: 1187:    }
    #####: 1188:    Value result = rewriter.template create<LLVMOp>(
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1189:        loc, dstType, adaptor.getOperand1(), extended);
    #####: 1190:    rewriter.replaceOp(operation, result);
call    0 never executed
    #####: 1191:    return success();
        -: 1192:  }
------------------
        -: 1193:};
        -: 1194:
        -: 1195:class TanPattern : public SPIRVToLLVMConversion<spirv::GLTanOp> {
        -: 1196:public:
        -: 1197:  using SPIRVToLLVMConversion<spirv::GLTanOp>::SPIRVToLLVMConversion;
        -: 1198:
        -: 1199:  LogicalResult
function _ZNK12_GLOBAL__N_110TanPattern15matchAndRewriteEN4mlir5spirv7GLTanOpENS2_14GLTanOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1200:  matchAndRewrite(spirv::GLTanOp tanOp, OpAdaptor adaptor,
        -: 1201:                  ConversionPatternRewriter &rewriter) const override {
    #####: 1202:    auto dstType = typeConverter.convertType(tanOp.getType());
call    0 never executed
    #####: 1203:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####: 1204:      return failure();
        -: 1205:
    #####: 1206:    Location loc = tanOp.getLoc();
call    0 never executed
    #####: 1207:    Value sin = rewriter.create<LLVM::SinOp>(loc, dstType, tanOp.getOperand());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1208:    Value cos = rewriter.create<LLVM::CosOp>(loc, dstType, tanOp.getOperand());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1209:    rewriter.replaceOpWithNewOp<LLVM::FDivOp>(tanOp, dstType, sin, cos);
call    0 never executed
    #####: 1210:    return success();
        -: 1211:  }
        -: 1212:};
        -: 1213:
        -: 1214:/// Convert `spirv.Tanh` to
        -: 1215:///
        -: 1216:///   exp(2x) - 1
        -: 1217:///   -----------
        -: 1218:///   exp(2x) + 1
        -: 1219:///
        -: 1220:class TanhPattern : public SPIRVToLLVMConversion<spirv::GLTanhOp> {
        -: 1221:public:
        -: 1222:  using SPIRVToLLVMConversion<spirv::GLTanhOp>::SPIRVToLLVMConversion;
        -: 1223:
        -: 1224:  LogicalResult
function _ZNK12_GLOBAL__N_111TanhPattern15matchAndRewriteEN4mlir5spirv8GLTanhOpENS2_15GLTanhOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1225:  matchAndRewrite(spirv::GLTanhOp tanhOp, OpAdaptor adaptor,
        -: 1226:                  ConversionPatternRewriter &rewriter) const override {
    #####: 1227:    auto srcType = tanhOp.getType();
call    0 never executed
    #####: 1228:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####: 1229:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####: 1230:      return failure();
        -: 1231:
    #####: 1232:    Location loc = tanhOp.getLoc();
call    0 never executed
    #####: 1233:    Value two = createFPConstant(loc, srcType, dstType, rewriter, 2.0);
call    0 never executed
    #####: 1234:    Value multiplied =
    #####: 1235:        rewriter.create<LLVM::FMulOp>(loc, dstType, two, tanhOp.getOperand());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1236:    Value exponential = rewriter.create<LLVM::ExpOp>(loc, dstType, multiplied);
call    0 never executed
call    1 never executed
    #####: 1237:    Value one = createFPConstant(loc, srcType, dstType, rewriter, 1.0);
call    0 never executed
    #####: 1238:    Value numerator =
    #####: 1239:        rewriter.create<LLVM::FSubOp>(loc, dstType, exponential, one);
call    0 never executed
call    1 never executed
    #####: 1240:    Value denominator =
    #####: 1241:        rewriter.create<LLVM::FAddOp>(loc, dstType, exponential, one);
call    0 never executed
call    1 never executed
    #####: 1242:    rewriter.replaceOpWithNewOp<LLVM::FDivOp>(tanhOp, dstType, numerator,
    #####: 1243:                                              denominator);
call    0 never executed
    #####: 1244:    return success();
        -: 1245:  }
        -: 1246:};
        -: 1247:
        -: 1248:class VariablePattern : public SPIRVToLLVMConversion<spirv::VariableOp> {
        -: 1249:public:
        -: 1250:  using SPIRVToLLVMConversion<spirv::VariableOp>::SPIRVToLLVMConversion;
        -: 1251:
        -: 1252:  LogicalResult
function _ZNK12_GLOBAL__N_115VariablePattern15matchAndRewriteEN4mlir5spirv10VariableOpENS2_17VariableOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1253:  matchAndRewrite(spirv::VariableOp varOp, OpAdaptor adaptor,
        -: 1254:                  ConversionPatternRewriter &rewriter) const override {
    #####: 1255:    auto srcType = varOp.getType();
call    0 never executed
        -: 1256:    // Initialization is supported for scalars and vectors only.
    #####: 1257:    auto pointerTo = srcType.cast<spirv::PointerType>().getPointeeType();
call    0 never executed
call    1 never executed
    #####: 1258:    auto init = varOp.getInitializer();
call    0 never executed
    #####: 1259:    if (init && !pointerTo.isIntOrFloat() && !pointerTo.isa<VectorType>())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1260:      return failure();
        -: 1261:
    #####: 1262:    auto dstType = typeConverter.convertType(srcType);
call    0 never executed
    #####: 1263:    if (!dstType)
branch  0 never executed
branch  1 never executed
    #####: 1264:      return failure();
        -: 1265:
    #####: 1266:    Location loc = varOp.getLoc();
call    0 never executed
    #####: 1267:    Value size = createI32ConstantOf(loc, rewriter, 1);
call    0 never executed
    #####: 1268:    if (!init) {
branch  0 never executed
branch  1 never executed
    #####: 1269:      rewriter.replaceOpWithNewOp<LLVM::AllocaOp>(varOp, dstType, size);
call    0 never executed
    #####: 1270:      return success();
        -: 1271:    }
    #####: 1272:    Value allocated = rewriter.create<LLVM::AllocaOp>(loc, dstType, size);
call    0 never executed
call    1 never executed
    #####: 1273:    rewriter.create<LLVM::StoreOp>(loc, adaptor.getInitializer(), allocated);
call    0 never executed
call    1 never executed
    #####: 1274:    rewriter.replaceOp(varOp, allocated);
call    0 never executed
call    1 never executed
    #####: 1275:    return success();
        -: 1276:  }
        -: 1277:};
        -: 1278:
        -: 1279://===----------------------------------------------------------------------===//
        -: 1280:// FuncOp conversion
        -: 1281://===----------------------------------------------------------------------===//
        -: 1282:
        -: 1283:class FuncConversionPattern : public SPIRVToLLVMConversion<spirv::FuncOp> {
        -: 1284:public:
        -: 1285:  using SPIRVToLLVMConversion<spirv::FuncOp>::SPIRVToLLVMConversion;
        -: 1286:
        -: 1287:  LogicalResult
function _ZNK12_GLOBAL__N_121FuncConversionPattern15matchAndRewriteEN4mlir5spirv6FuncOpENS2_13FuncOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1288:  matchAndRewrite(spirv::FuncOp funcOp, OpAdaptor adaptor,
        -: 1289:                  ConversionPatternRewriter &rewriter) const override {
        -: 1290:
        -: 1291:    // Convert function signature. At the moment LLVMType converter is enough
        -: 1292:    // for currently supported types.
    #####: 1293:    auto funcType = funcOp.getFunctionType();
call    0 never executed
    #####: 1294:    TypeConverter::SignatureConversion signatureConverter(
    #####: 1295:        funcType.getNumInputs());
call    0 never executed
call    1 never executed
    #####: 1296:    auto llvmType = typeConverter.convertFunctionSignature(
    #####: 1297:        funcType, /*isVariadic=*/false, signatureConverter);
call    0 never executed
    #####: 1298:    if (!llvmType)
branch  0 never executed
branch  1 never executed
    #####: 1299:      return failure();
        -: 1300:
        -: 1301:    // Create a new `LLVMFuncOp`
    #####: 1302:    Location loc = funcOp.getLoc();
call    0 never executed
    #####: 1303:    StringRef name = funcOp.getName();
call    0 never executed
    #####: 1304:    auto newFuncOp = rewriter.create<LLVM::LLVMFuncOp>(loc, name, llvmType);
call    0 never executed
        -: 1305:
        -: 1306:    // Convert SPIR-V Function Control to equivalent LLVM function attribute
    #####: 1307:    MLIRContext *context = funcOp.getContext();
call    0 never executed
    #####: 1308:    switch (funcOp.getFunctionControl()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1309:#define DISPATCH(functionControl, llvmAttr)                                    \
        -: 1310:  case functionControl:                                                        \
        -: 1311:    newFuncOp->setAttr("passthrough", ArrayAttr::get(context, {llvmAttr}));    \
        -: 1312:    break;
        -: 1313:
    #####: 1314:      DISPATCH(spirv::FunctionControl::Inline,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1315:               StringAttr::get(context, "alwaysinline"));
    #####: 1316:      DISPATCH(spirv::FunctionControl::DontInline,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1317:               StringAttr::get(context, "noinline"));
    #####: 1318:      DISPATCH(spirv::FunctionControl::Pure,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1319:               StringAttr::get(context, "readonly"));
    #####: 1320:      DISPATCH(spirv::FunctionControl::Const,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1321:               StringAttr::get(context, "readnone"));
        -: 1322:
        -: 1323:#undef DISPATCH
        -: 1324:
        -: 1325:    // Default: if `spirv::FunctionControl::None`, then no attributes are
        -: 1326:    // needed.
        -: 1327:    default:
        -: 1328:      break;
        -: 1329:    }
        -: 1330:
    #####: 1331:    rewriter.inlineRegionBefore(funcOp.getBody(), newFuncOp.getBody(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1332:                                newFuncOp.end());
    #####: 1333:    if (failed(rewriter.convertRegionTypes(&newFuncOp.getBody(), typeConverter,
branch  0 never executed
branch  1 never executed
    #####: 1334:                                           &signatureConverter))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1335:      return failure();
        -: 1336:    }
    #####: 1337:    rewriter.eraseOp(funcOp);
call    0 never executed
    #####: 1338:    return success();
call    0 never executed
        -: 1339:  }
        -: 1340:};
        -: 1341:
        -: 1342://===----------------------------------------------------------------------===//
        -: 1343:// ModuleOp conversion
        -: 1344://===----------------------------------------------------------------------===//
        -: 1345:
        -: 1346:class ModuleConversionPattern : public SPIRVToLLVMConversion<spirv::ModuleOp> {
        -: 1347:public:
        -: 1348:  using SPIRVToLLVMConversion<spirv::ModuleOp>::SPIRVToLLVMConversion;
        -: 1349:
        -: 1350:  LogicalResult
function _ZNK12_GLOBAL__N_123ModuleConversionPattern15matchAndRewriteEN4mlir5spirv8ModuleOpENS2_15ModuleOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1351:  matchAndRewrite(spirv::ModuleOp spvModuleOp, OpAdaptor adaptor,
        -: 1352:                  ConversionPatternRewriter &rewriter) const override {
        -: 1353:
    #####: 1354:    auto newModuleOp =
    #####: 1355:        rewriter.create<ModuleOp>(spvModuleOp.getLoc(), spvModuleOp.getName());
call    0 never executed
call    1 never executed
    #####: 1356:    rewriter.inlineRegionBefore(spvModuleOp.getRegion(), newModuleOp.getBody());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1357:
        -: 1358:    // Remove the terminator block that was automatically added by builder
    #####: 1359:    rewriter.eraseBlock(&newModuleOp.getBodyRegion().back());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1360:    rewriter.eraseOp(spvModuleOp);
call    0 never executed
    #####: 1361:    return success();
        -: 1362:  }
        -: 1363:};
        -: 1364:
        -: 1365://===----------------------------------------------------------------------===//
        -: 1366:// VectorShuffleOp conversion
        -: 1367://===----------------------------------------------------------------------===//
        -: 1368:
        -: 1369:class VectorShufflePattern
        -: 1370:    : public SPIRVToLLVMConversion<spirv::VectorShuffleOp> {
        -: 1371:public:
        -: 1372:  using SPIRVToLLVMConversion<spirv::VectorShuffleOp>::SPIRVToLLVMConversion;
        -: 1373:  LogicalResult
function _ZNK12_GLOBAL__N_120VectorShufflePattern15matchAndRewriteEN4mlir5spirv15VectorShuffleOpENS2_22VectorShuffleOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####: 1374:  matchAndRewrite(spirv::VectorShuffleOp op, OpAdaptor adaptor,
        -: 1375:                  ConversionPatternRewriter &rewriter) const override {
    #####: 1376:    Location loc = op.getLoc();
call    0 never executed
    #####: 1377:    auto components = adaptor.getComponents();
call    0 never executed
    #####: 1378:    auto vector1 = adaptor.getVector1();
call    0 never executed
    #####: 1379:    auto vector2 = adaptor.getVector2();
call    0 never executed
    #####: 1380:    int vector1Size = vector1.getType().cast<VectorType>().getNumElements();
call    0 never executed
call    1 never executed
    #####: 1381:    int vector2Size = vector2.getType().cast<VectorType>().getNumElements();
call    0 never executed
call    1 never executed
    #####: 1382:    if (vector1Size == vector2Size) {
branch  0 never executed
branch  1 never executed
    #####: 1383:      rewriter.replaceOpWithNewOp<LLVM::ShuffleVectorOp>(
        -: 1384:          op, vector1, vector2,
    #####: 1385:          LLVM::convertArrayToIndices<int32_t>(components));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1386:      return success();
        -: 1387:    }
        -: 1388:
    #####: 1389:    auto dstType = typeConverter.convertType(op.getType());
call    0 never executed
call    1 never executed
    #####: 1390:    auto scalarType = dstType.cast<VectorType>().getElementType();
call    0 never executed
call    1 never executed
    #####: 1391:    auto componentsArray = components.getValue();
call    0 never executed
    #####: 1392:    auto *context = rewriter.getContext();
call    0 never executed
    #####: 1393:    auto llvmI32Type = IntegerType::get(context, 32);
call    0 never executed
    #####: 1394:    Value targetOp = rewriter.create<LLVM::UndefOp>(loc, dstType);
call    0 never executed
    #####: 1395:    for (unsigned i = 0; i < componentsArray.size(); i++) {
branch  0 never executed
branch  1 never executed
    #####: 1396:      if (!componentsArray[i].isa<IntegerAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1397:        return op.emitError("unable to support non-constant component");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1398:
    #####: 1399:      int indexVal = componentsArray[i].cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
    #####: 1400:      if (indexVal == -1)
branch  0 never executed
branch  1 never executed
    #####: 1401:        continue;
        -: 1402:
    #####: 1403:      int offsetVal = 0;
    #####: 1404:      Value baseVector = vector1;
    #####: 1405:      if (indexVal >= vector1Size) {
branch  0 never executed
branch  1 never executed
    #####: 1406:        offsetVal = vector1Size;
    #####: 1407:        baseVector = vector2;
        -: 1408:      }
        -: 1409:
    #####: 1410:      Value dstIndex = rewriter.create<LLVM::ConstantOp>(
    #####: 1411:          loc, llvmI32Type, rewriter.getIntegerAttr(rewriter.getI32Type(), i));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1412:      Value index = rewriter.create<LLVM::ConstantOp>(
        -: 1413:          loc, llvmI32Type,
    #####: 1414:          rewriter.getIntegerAttr(rewriter.getI32Type(), indexVal - offsetVal));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1415:
    #####: 1416:      auto extractOp = rewriter.create<LLVM::ExtractElementOp>(
    #####: 1417:          loc, scalarType, baseVector, index);
call    0 never executed
    #####: 1418:      targetOp = rewriter.create<LLVM::InsertElementOp>(loc, dstType, targetOp,
    #####: 1419:                                                        extractOp, dstIndex);
call    0 never executed
        -: 1420:    }
    #####: 1421:    rewriter.replaceOp(op, targetOp);
call    0 never executed
call    1 never executed
    #####: 1422:    return success();
        -: 1423:  }
        -: 1424:};
        -: 1425:} // namespace
        -: 1426:
        -: 1427://===----------------------------------------------------------------------===//
        -: 1428:// Pattern population
        -: 1429://===----------------------------------------------------------------------===//
        -: 1430:
function _ZN4mlir33populateSPIRVToLLVMTypeConversionERNS_17LLVMTypeConverterE called 829 returned 100% blocks executed 100%
      829: 1431:void mlir::populateSPIRVToLLVMTypeConversion(LLVMTypeConverter &typeConverter) {
     829*: 1432:  typeConverter.addConversion([&](spirv::ArrayType type) {
call    0 returned 100%
    #####: 1433:    return convertArrayType(type, typeConverter);
call    0 never executed
        -: 1434:  });
     829*: 1435:  typeConverter.addConversion([&](spirv::PointerType type) {
call    0 returned 100%
    #####: 1436:    return convertPointerType(type, typeConverter);
call    0 never executed
        -: 1437:  });
     829*: 1438:  typeConverter.addConversion([&](spirv::RuntimeArrayType type) {
call    0 returned 100%
    #####: 1439:    return convertRuntimeArrayType(type, typeConverter);
call    0 never executed
        -: 1440:  });
     829*: 1441:  typeConverter.addConversion([&](spirv::StructType type) {
call    0 returned 100%
    #####: 1442:    return convertStructType(type, typeConverter);
call    0 never executed
        -: 1443:  });
      829: 1444:}
        -: 1445:
function _ZN4mlir37populateSPIRVToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 422 returned 100% blocks executed 100%
      422: 1446:void mlir::populateSPIRVToLLVMConversionPatterns(
        -: 1447:    LLVMTypeConverter &typeConverter, RewritePatternSet &patterns) {
      422: 1448:  patterns.add<
        -: 1449:      // Arithmetic ops
        -: 1450:      DirectConversionPattern<spirv::IAddOp, LLVM::AddOp>,
        -: 1451:      DirectConversionPattern<spirv::IMulOp, LLVM::MulOp>,
        -: 1452:      DirectConversionPattern<spirv::ISubOp, LLVM::SubOp>,
        -: 1453:      DirectConversionPattern<spirv::FAddOp, LLVM::FAddOp>,
        -: 1454:      DirectConversionPattern<spirv::FDivOp, LLVM::FDivOp>,
        -: 1455:      DirectConversionPattern<spirv::FMulOp, LLVM::FMulOp>,
        -: 1456:      DirectConversionPattern<spirv::FNegateOp, LLVM::FNegOp>,
        -: 1457:      DirectConversionPattern<spirv::FRemOp, LLVM::FRemOp>,
        -: 1458:      DirectConversionPattern<spirv::FSubOp, LLVM::FSubOp>,
        -: 1459:      DirectConversionPattern<spirv::SDivOp, LLVM::SDivOp>,
        -: 1460:      DirectConversionPattern<spirv::SRemOp, LLVM::SRemOp>,
        -: 1461:      DirectConversionPattern<spirv::UDivOp, LLVM::UDivOp>,
        -: 1462:      DirectConversionPattern<spirv::UModOp, LLVM::URemOp>,
        -: 1463:
        -: 1464:      // Bitwise ops
        -: 1465:      BitFieldInsertPattern, BitFieldUExtractPattern, BitFieldSExtractPattern,
        -: 1466:      DirectConversionPattern<spirv::BitCountOp, LLVM::CtPopOp>,
        -: 1467:      DirectConversionPattern<spirv::BitReverseOp, LLVM::BitReverseOp>,
        -: 1468:      DirectConversionPattern<spirv::BitwiseAndOp, LLVM::AndOp>,
        -: 1469:      DirectConversionPattern<spirv::BitwiseOrOp, LLVM::OrOp>,
        -: 1470:      DirectConversionPattern<spirv::BitwiseXorOp, LLVM::XOrOp>,
        -: 1471:      NotPattern<spirv::NotOp>,
        -: 1472:
        -: 1473:      // Cast ops
        -: 1474:      DirectConversionPattern<spirv::BitcastOp, LLVM::BitcastOp>,
        -: 1475:      DirectConversionPattern<spirv::ConvertFToSOp, LLVM::FPToSIOp>,
        -: 1476:      DirectConversionPattern<spirv::ConvertFToUOp, LLVM::FPToUIOp>,
        -: 1477:      DirectConversionPattern<spirv::ConvertSToFOp, LLVM::SIToFPOp>,
        -: 1478:      DirectConversionPattern<spirv::ConvertUToFOp, LLVM::UIToFPOp>,
        -: 1479:      IndirectCastPattern<spirv::FConvertOp, LLVM::FPExtOp, LLVM::FPTruncOp>,
        -: 1480:      IndirectCastPattern<spirv::SConvertOp, LLVM::SExtOp, LLVM::TruncOp>,
        -: 1481:      IndirectCastPattern<spirv::UConvertOp, LLVM::ZExtOp, LLVM::TruncOp>,
        -: 1482:
        -: 1483:      // Comparison ops
        -: 1484:      IComparePattern<spirv::IEqualOp, LLVM::ICmpPredicate::eq>,
        -: 1485:      IComparePattern<spirv::INotEqualOp, LLVM::ICmpPredicate::ne>,
        -: 1486:      FComparePattern<spirv::FOrdEqualOp, LLVM::FCmpPredicate::oeq>,
        -: 1487:      FComparePattern<spirv::FOrdGreaterThanOp, LLVM::FCmpPredicate::ogt>,
        -: 1488:      FComparePattern<spirv::FOrdGreaterThanEqualOp, LLVM::FCmpPredicate::oge>,
        -: 1489:      FComparePattern<spirv::FOrdLessThanEqualOp, LLVM::FCmpPredicate::ole>,
        -: 1490:      FComparePattern<spirv::FOrdLessThanOp, LLVM::FCmpPredicate::olt>,
        -: 1491:      FComparePattern<spirv::FOrdNotEqualOp, LLVM::FCmpPredicate::one>,
        -: 1492:      FComparePattern<spirv::FUnordEqualOp, LLVM::FCmpPredicate::ueq>,
        -: 1493:      FComparePattern<spirv::FUnordGreaterThanOp, LLVM::FCmpPredicate::ugt>,
        -: 1494:      FComparePattern<spirv::FUnordGreaterThanEqualOp,
        -: 1495:                      LLVM::FCmpPredicate::uge>,
        -: 1496:      FComparePattern<spirv::FUnordLessThanEqualOp, LLVM::FCmpPredicate::ule>,
        -: 1497:      FComparePattern<spirv::FUnordLessThanOp, LLVM::FCmpPredicate::ult>,
        -: 1498:      FComparePattern<spirv::FUnordNotEqualOp, LLVM::FCmpPredicate::une>,
        -: 1499:      IComparePattern<spirv::SGreaterThanOp, LLVM::ICmpPredicate::sgt>,
        -: 1500:      IComparePattern<spirv::SGreaterThanEqualOp, LLVM::ICmpPredicate::sge>,
        -: 1501:      IComparePattern<spirv::SLessThanEqualOp, LLVM::ICmpPredicate::sle>,
        -: 1502:      IComparePattern<spirv::SLessThanOp, LLVM::ICmpPredicate::slt>,
        -: 1503:      IComparePattern<spirv::UGreaterThanOp, LLVM::ICmpPredicate::ugt>,
        -: 1504:      IComparePattern<spirv::UGreaterThanEqualOp, LLVM::ICmpPredicate::uge>,
        -: 1505:      IComparePattern<spirv::ULessThanEqualOp, LLVM::ICmpPredicate::ule>,
        -: 1506:      IComparePattern<spirv::ULessThanOp, LLVM::ICmpPredicate::ult>,
        -: 1507:
        -: 1508:      // Constant op
        -: 1509:      ConstantScalarAndVectorPattern,
        -: 1510:
        -: 1511:      // Control Flow ops
        -: 1512:      BranchConversionPattern, BranchConditionalConversionPattern,
        -: 1513:      FunctionCallPattern, LoopPattern, SelectionPattern,
        -: 1514:      ErasePattern<spirv::MergeOp>,
        -: 1515:
        -: 1516:      // Entry points and execution mode are handled separately.
        -: 1517:      ErasePattern<spirv::EntryPointOp>, ExecutionModePattern,
        -: 1518:
        -: 1519:      // GLSL extended instruction set ops
        -: 1520:      DirectConversionPattern<spirv::GLCeilOp, LLVM::FCeilOp>,
        -: 1521:      DirectConversionPattern<spirv::GLCosOp, LLVM::CosOp>,
        -: 1522:      DirectConversionPattern<spirv::GLExpOp, LLVM::ExpOp>,
        -: 1523:      DirectConversionPattern<spirv::GLFAbsOp, LLVM::FAbsOp>,
        -: 1524:      DirectConversionPattern<spirv::GLFloorOp, LLVM::FFloorOp>,
        -: 1525:      DirectConversionPattern<spirv::GLFMaxOp, LLVM::MaxNumOp>,
        -: 1526:      DirectConversionPattern<spirv::GLFMinOp, LLVM::MinNumOp>,
        -: 1527:      DirectConversionPattern<spirv::GLLogOp, LLVM::LogOp>,
        -: 1528:      DirectConversionPattern<spirv::GLSinOp, LLVM::SinOp>,
        -: 1529:      DirectConversionPattern<spirv::GLSMaxOp, LLVM::SMaxOp>,
        -: 1530:      DirectConversionPattern<spirv::GLSMinOp, LLVM::SMinOp>,
        -: 1531:      DirectConversionPattern<spirv::GLSqrtOp, LLVM::SqrtOp>,
        -: 1532:      InverseSqrtPattern, TanPattern, TanhPattern,
        -: 1533:
        -: 1534:      // Logical ops
        -: 1535:      DirectConversionPattern<spirv::LogicalAndOp, LLVM::AndOp>,
        -: 1536:      DirectConversionPattern<spirv::LogicalOrOp, LLVM::OrOp>,
        -: 1537:      IComparePattern<spirv::LogicalEqualOp, LLVM::ICmpPredicate::eq>,
        -: 1538:      IComparePattern<spirv::LogicalNotEqualOp, LLVM::ICmpPredicate::ne>,
        -: 1539:      NotPattern<spirv::LogicalNotOp>,
        -: 1540:
        -: 1541:      // Memory ops
        -: 1542:      AccessChainPattern, AddressOfPattern, GlobalVariablePattern,
        -: 1543:      LoadStorePattern<spirv::LoadOp>, LoadStorePattern<spirv::StoreOp>,
        -: 1544:      VariablePattern,
        -: 1545:
        -: 1546:      // Miscellaneous ops
        -: 1547:      CompositeExtractPattern, CompositeInsertPattern,
        -: 1548:      DirectConversionPattern<spirv::SelectOp, LLVM::SelectOp>,
        -: 1549:      DirectConversionPattern<spirv::UndefOp, LLVM::UndefOp>,
        -: 1550:      VectorShufflePattern,
        -: 1551:
        -: 1552:      // Shift ops
        -: 1553:      ShiftPattern<spirv::ShiftRightArithmeticOp, LLVM::AShrOp>,
        -: 1554:      ShiftPattern<spirv::ShiftRightLogicalOp, LLVM::LShrOp>,
        -: 1555:      ShiftPattern<spirv::ShiftLeftLogicalOp, LLVM::ShlOp>,
        -: 1556:
        -: 1557:      // Return ops
      422: 1558:      ReturnPattern, ReturnValuePattern>(patterns.getContext(), typeConverter);
call    0 returned 100%
      422: 1559:}
        -: 1560:
function _ZN4mlir45populateSPIRVToLLVMFunctionConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 422 returned 100% blocks executed 100%
      422: 1561:void mlir::populateSPIRVToLLVMFunctionConversionPatterns(
        -: 1562:    LLVMTypeConverter &typeConverter, RewritePatternSet &patterns) {
      422: 1563:  patterns.add<FuncConversionPattern>(patterns.getContext(), typeConverter);
call    0 returned 100%
      422: 1564:}
        -: 1565:
function _ZN4mlir43populateSPIRVToLLVMModuleConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 422 returned 100% blocks executed 100%
      422: 1566:void mlir::populateSPIRVToLLVMModuleConversionPatterns(
        -: 1567:    LLVMTypeConverter &typeConverter, RewritePatternSet &patterns) {
      422: 1568:  patterns.add<ModuleConversionPattern>(patterns.getContext(), typeConverter);
call    0 returned 100%
      422: 1569:}
        -: 1570:
        -: 1571://===----------------------------------------------------------------------===//
        -: 1572:// Pre-conversion hooks
        -: 1573://===----------------------------------------------------------------------===//
        -: 1574:
        -: 1575:/// Hook for descriptor set and binding number encoding.
        -: 1576:static constexpr StringRef kBinding = "binding";
        -: 1577:static constexpr StringRef kDescriptorSet = "descriptor_set";
function _ZN4mlir19encodeBindAttributeENS_8ModuleOpE called 422 returned 100% blocks executed 44%
      422: 1578:void mlir::encodeBindAttribute(ModuleOp module) {
      422: 1579:  auto spvModules = module.getOps<spirv::ModuleOp>();
call    0 returned 100%
     422*: 1580:  for (auto spvModule : spvModules) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
function _ZZN4mlir19encodeBindAttributeENS_8ModuleOpEENKUlNS_5spirv16GlobalVariableOpEE_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####: 1581:    spvModule.walk([&](spirv::GlobalVariableOp op) {
call    0 never executed
call    1 never executed
    #####: 1582:      IntegerAttr descriptorSet =
    #####: 1583:          op->getAttrOfType<IntegerAttr>(kDescriptorSet);
call    0 never executed
    #####: 1584:      IntegerAttr binding = op->getAttrOfType<IntegerAttr>(kBinding);
call    0 never executed
        -: 1585:      // For every global variable in the module, get the ones with descriptor
        -: 1586:      // set and binding numbers.
    #####: 1587:      if (descriptorSet && binding) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1588:        // Encode these numbers into the variable's symbolic name. If the
        -: 1589:        // SPIR-V module has a name, add it at the beginning.
    #####: 1590:        auto moduleAndName =
    #####: 1591:            spvModule.getName().has_value()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1592:                ? spvModule.getName()->str() + "_" + op.getSymName().str()
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1593:                : op.getSymName().str();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1594:        std::string name =
    #####: 1595:            llvm::formatv("{0}_descriptor_set{1}_binding{2}", moduleAndName,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1596:                          std::to_string(descriptorSet.getInt()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1597:                          std::to_string(binding.getInt()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1598:        auto nameAttr = StringAttr::get(op->getContext(), name);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1599:
        -: 1600:        // Replace all symbol uses and set the new symbol name. Finally, remove
        -: 1601:        // descriptor set and binding attributes.
    #####: 1602:        if (failed(SymbolTable::replaceAllSymbolUses(op, nameAttr, spvModule)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1603:          op.emitError("unable to replace all symbol uses for ") << name;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1604:        SymbolTable::setSymbolName(op, nameAttr);
call    0 never executed
    #####: 1605:        op->removeAttr(kDescriptorSet);
call    0 never executed
    #####: 1606:        op->removeAttr(kBinding);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1607:      }
    #####: 1608:    });
        -: 1609:  }
      422: 1610:}
