        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/LLVMIR/LLVMDialect.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:116169
        -:    1://===- LLVMDialect.h - MLIR LLVM IR dialect ---------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the LLVM IR dialect in MLIR, containing LLVM operations and
        -:   10:// LLVM type system.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_DIALECT_LLVMIR_LLVMDIALECT_H_
        -:   15:#define MLIR_DIALECT_LLVMIR_LLVMDIALECT_H_
        -:   16:
        -:   17:#include "mlir/Dialect/LLVMIR/LLVMAttrs.h"
        -:   18:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   19:#include "mlir/IR/BuiltinOps.h"
        -:   20:#include "mlir/IR/Dialect.h"
        -:   21:#include "mlir/IR/FunctionInterfaces.h"
        -:   22:#include "mlir/IR/OpDefinition.h"
        -:   23:#include "mlir/IR/OpImplementation.h"
        -:   24:#include "mlir/IR/TypeSupport.h"
        -:   25:#include "mlir/IR/Types.h"
        -:   26:#include "mlir/Interfaces/CallInterfaces.h"
        -:   27:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   28:#include "mlir/Interfaces/InferTypeOpInterface.h"
        -:   29:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   30:#include "mlir/Support/ThreadLocalCache.h"
        -:   31:#include "llvm/ADT/PointerEmbeddedInt.h"
        -:   32:#include "llvm/IR/DerivedTypes.h"
        -:   33:#include "llvm/IR/LLVMContext.h"
        -:   34:#include "llvm/IR/Module.h"
        -:   35:#include "llvm/IR/Type.h"
        -:   36:
        -:   37:#include "mlir/Dialect/LLVMIR/LLVMOpsInterfaces.h.inc"
        -:   38:
        -:   39:namespace llvm {
        -:   40:class Type;
        -:   41:class LLVMContext;
        -:   42:namespace sys {
        -:   43:template <bool mt_only>
        -:   44:class SmartMutex;
        -:   45:} // namespace sys
        -:   46:} // namespace llvm
        -:   47:
        -:   48:namespace mlir {
        -:   49:namespace LLVM {
        -:   50:class LLVMDialect;
        -:   51:
        -:   52:namespace detail {
        -:   53:struct LLVMTypeStorage;
        -:   54:struct LLVMDialectImpl;
        -:   55:} // namespace detail
        -:   56:} // namespace LLVM
        -:   57:} // namespace mlir
        -:   58:
        -:   59:namespace mlir {
        -:   60:namespace LLVM {
        -:   61:template <typename Values>
        -:   62:class GEPIndicesAdaptor;
        -:   63:
        -:   64:/// Bit-width of a 'GEPConstantIndex' within GEPArg.
        -:   65:constexpr int kGEPConstantBitWidth = 29;
        -:   66:/// Wrapper around a int32_t for use in a PointerUnion.
        -:   67:using GEPConstantIndex =
        -:   68:    llvm::PointerEmbeddedInt<int32_t, kGEPConstantBitWidth>;
        -:   69:
        -:   70:/// Class used for building a 'llvm.getelementptr'. A single instance represents
        -:   71:/// a sum type that is either a 'Value' or a constant 'GEPConstantIndex' index.
        -:   72:/// The former represents a dynamic index in a GEP operation, while the later is
        -:   73:/// a constant index as is required for indices into struct types.
        -:   74:class GEPArg : public PointerUnion<Value, GEPConstantIndex> {
        -:   75:  using BaseT = PointerUnion<Value, GEPConstantIndex>;
        -:   76:
        -:   77:public:
        -:   78:  /// Constructs a GEPArg with a constant index.
        -:   79:  /*implicit*/ GEPArg(int32_t integer) : BaseT(integer) {}
        -:   80:
        -:   81:  /// Constructs a GEPArg with a dynamic index.
        -:   82:  /*implicit*/ GEPArg(Value value) : BaseT(value) {}
        -:   83:
        -:   84:  using BaseT::operator=;
        -:   85:};
        -:   86:} // namespace LLVM
        -:   87:} // namespace mlir
        -:   88:
        -:   89:///// Ops /////
        -:   90:#define GET_OP_CLASSES
        -:   91:#include "mlir/Dialect/LLVMIR/LLVMOps.h.inc"
        -:   92:#define GET_OP_CLASSES
        -:   93:#include "mlir/Dialect/LLVMIR/LLVMIntrinsicOps.h.inc"
        -:   94:
        -:   95:#include "mlir/Dialect/LLVMIR/LLVMOpsDialect.h.inc"
        -:   96:
        -:   97:namespace mlir {
        -:   98:namespace LLVM {
        -:   99:
        -:  100:/// Class used for convenient access and iteration over GEP indices.
        -:  101:/// This class is templated to support not only retrieving the dynamic operands
        -:  102:/// of a GEP operation, but also as an adaptor during folding or conversion to
        -:  103:/// LLVM IR.
        -:  104:///
        -:  105:/// GEP indices may either be constant indices or dynamic indices. The
        -:  106:/// 'rawConstantIndices' is specially encoded by GEPOp and contains either the
        -:  107:/// constant index or the information that an index is a dynamic index.
        -:  108:///
        -:  109:/// When an access to such an index is made it is done through the
        -:  110:/// 'DynamicRange' of this class. This way it can be used as getter in GEPOp via
        -:  111:/// 'GEPIndicesAdaptor<ValueRange>' or during folding via
        -:  112:/// 'GEPIndicesAdaptor<ArrayRef<Attribute>>'.
        -:  113:template <typename DynamicRange>
    #####:  114:class GEPIndicesAdaptor {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  115:public:
        -:  116:  /// Return type of 'operator[]' and the iterators 'operator*'. It is depended
        -:  117:  /// upon the value type of 'DynamicRange'. If 'DynamicRange' contains
        -:  118:  /// Attributes or subclasses thereof, then value_type is 'Attribute'. In
        -:  119:  /// all other cases it is a pointer union between the value type of
        -:  120:  /// 'DynamicRange' and IntegerAttr.
        -:  121:  using value_type = std::conditional_t<
        -:  122:      std::is_base_of<Attribute,
        -:  123:                      llvm::detail::ValueOfRange<DynamicRange>>::value,
        -:  124:      Attribute,
        -:  125:      PointerUnion<IntegerAttr, llvm::detail::ValueOfRange<DynamicRange>>>;
        -:  126:
        -:  127:  /// Constructs a GEPIndicesAdaptor with the raw constant indices of a GEPOp
        -:  128:  /// and the range that is indexed into for retrieving dynamic indices.
    #####:  129:  GEPIndicesAdaptor(DenseI32ArrayAttr rawConstantIndices, DynamicRange values)
    #####:  130:      : rawConstantIndices(rawConstantIndices), values(std::move(values)) {}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  131:
        -:  132:  /// Returns the GEP index at the given position. Note that this operation has
        -:  133:  /// a linear complexity in regards to the accessed position. To iterate over
        -:  134:  /// all indices, use the iterators.
        -:  135:  ///
        -:  136:  /// This operation is invalid if the index is out of bounds.
        -:  137:  value_type operator[](size_t index) const {
        -:  138:    assert(index < size() && "index out of bounds");
        -:  139:    return *std::next(begin(), index);
        -:  140:  }
        -:  141:
        -:  142:  /// Returns whether the GEP index at the given position is a dynamic index.
        -:  143:  bool isDynamicIndex(size_t index) const {
        -:  144:    return rawConstantIndices[index] == GEPOp::kDynamicIndex;
        -:  145:  }
        -:  146:
        -:  147:  /// Returns the amount of indices of the GEPOp.
        -:  148:  size_t size() const { return rawConstantIndices.size(); }
        -:  149:
        -:  150:  /// Returns true if this GEPOp does not have any indices.
        -:  151:  bool empty() const { return rawConstantIndices.empty(); }
        -:  152:
        -:  153:  class iterator
        -:  154:      : public llvm::iterator_facade_base<iterator, std::forward_iterator_tag,
        -:  155:                                          value_type, std::ptrdiff_t,
        -:  156:                                          value_type *, value_type> {
        -:  157:  public:
    #####:  158:    iterator(const GEPIndicesAdaptor *base,
        -:  159:             ArrayRef<int32_t>::iterator rawConstantIter,
        -:  160:             llvm::detail::IterOfRange<const DynamicRange> valuesIter)
    #####:  161:        : base(base), rawConstantIter(rawConstantIter), valuesIter(valuesIter) {
        -:  162:    }
        -:  163:
function _ZNK4mlir4LLVM17GEPIndicesAdaptorIN4llvm11SmallVectorIPNS2_5ValueELj6EEEE8iteratordeEv called 0 returned 0% blocks executed 0%
    #####:  164:    value_type operator*() const {
    #####:  165:      if (*rawConstantIter == GEPOp::kDynamicIndex)
branch  0 never executed
branch  1 never executed
    #####:  166:        return *valuesIter;
call    0 never executed
        -:  167:
        -:  168:      return IntegerAttr::get(
    #####:  169:          ElementsAttr::getElementType(base->rawConstantIndices),
    #####:  170:          *rawConstantIter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  171:    }
        -:  172:
    #####:  173:    iterator &operator++() {
    #####:  174:      if (*rawConstantIter == GEPOp::kDynamicIndex)
branch  0 never executed
branch  1 never executed
    #####:  175:        valuesIter++;
    #####:  176:      rawConstantIter++;
    #####:  177:      return *this;
        -:  178:    }
        -:  179:
        -:  180:    bool operator==(const iterator &rhs) const {
    #####:  181:      return base == rhs.base && rawConstantIter == rhs.rawConstantIter &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  182:             valuesIter == rhs.valuesIter;
branch  0 never executed
branch  1 never executed
        -:  183:    }
        -:  184:
        -:  185:  private:
        -:  186:    const GEPIndicesAdaptor *base;
        -:  187:    ArrayRef<int32_t>::const_iterator rawConstantIter;
        -:  188:    llvm::detail::IterOfRange<const DynamicRange> valuesIter;
        -:  189:  };
        -:  190:
        -:  191:  /// Returns the begin iterator, iterating over all GEP indices.
    #####:  192:  iterator begin() const {
    #####:  193:    return iterator(this, rawConstantIndices.asArrayRef().begin(),
call    0 never executed
call    1 never executed
    #####:  194:                    values.begin());
call    0 never executed
call    1 never executed
        -:  195:  }
        -:  196:
        -:  197:  /// Returns the end iterator, iterating over all GEP indices.
function _ZNK4mlir4LLVM17GEPIndicesAdaptorIN4llvm11SmallVectorIPNS2_5ValueELj6EEEE3endEv called 0 returned 0% blocks executed 0%
    #####:  198:  iterator end() const {
    #####:  199:    return iterator(this, rawConstantIndices.asArrayRef().end(), values.end());
call    0 never executed
        -:  200:  }
        -:  201:
        -:  202:private:
        -:  203:  DenseI32ArrayAttr rawConstantIndices;
        -:  204:  DynamicRange values;
        -:  205:};
        -:  206:
        -:  207:/// Create an LLVM global containing the string "value" at the module containing
        -:  208:/// surrounding the insertion point of builder. Obtain the address of that
        -:  209:/// global and use it to compute the address of the first character in the
        -:  210:/// string (operations inserted at the builder insertion point).
        -:  211:Value createGlobalString(Location loc, OpBuilder &builder, StringRef name,
        -:  212:                         StringRef value, Linkage linkage);
        -:  213:
        -:  214:/// LLVM requires some operations to be inside of a Module operation. This
        -:  215:/// function confirms that the Operation has the desired properties.
        -:  216:bool satisfiesLLVMModule(Operation *op);
        -:  217:
        -:  218:/// Convert an array of integer attributes to a vector of integers that can be
        -:  219:/// used as indices in LLVM operations.
        -:  220:template <typename IntT = int64_t>
        -:  221:SmallVector<IntT> convertArrayToIndices(ArrayRef<Attribute> attrs) {
        -:  222:  SmallVector<IntT> indices;
        -:  223:  indices.reserve(attrs.size());
        -:  224:  for (Attribute attr : attrs)
        -:  225:    indices.push_back(attr.cast<IntegerAttr>().getInt());
        -:  226:  return indices;
        -:  227:}
        -:  228:
        -:  229:/// Convert an `ArrayAttr` of integer attributes to a vector of integers that
        -:  230:/// can be used as indices in LLVM operations.
        -:  231:template <typename IntT = int64_t>
        -:  232:SmallVector<IntT> convertArrayToIndices(ArrayAttr attrs) {
        -:  233:  return convertArrayToIndices<IntT>(attrs.getValue());
        -:  234:}
        -:  235:
        -:  236:} // namespace LLVM
        -:  237:} // namespace mlir
        -:  238:
        -:  239:#endif // MLIR_DIALECT_LLVMIR_LLVMDIALECT_H_
