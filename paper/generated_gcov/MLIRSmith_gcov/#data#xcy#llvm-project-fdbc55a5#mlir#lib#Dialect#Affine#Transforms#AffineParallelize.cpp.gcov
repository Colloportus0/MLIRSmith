        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Affine/Transforms/AffineParallelize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineParallelize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineParallelize.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- AffineParallelize.cpp - Affineparallelize Pass---------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a parallelizer for affine loop nests that is able to
        -:   10:// perform inner or outer loop parallelization.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   17:#include "mlir/Dialect/Affine/Analysis/AffineStructures.h"
        -:   18:#include "mlir/Dialect/Affine/Analysis/LoopAnalysis.h"
        -:   19:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   20:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   21:#include "mlir/Dialect/Affine/IR/AffineValueMap.h"
        -:   22:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   23:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   24:#include "mlir/Dialect/Affine/Utils.h"
        -:   25:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   26:#include "llvm/Support/Debug.h"
        -:   27:#include <deque>
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_AFFINEPARALLELIZE
        -:   31:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   32:} // namespace mlir
        -:   33:
        -:   34:#define DEBUG_TYPE "affine-parallel"
        -:   35:
        -:   36:using namespace mlir;
        -:   37:
        -:   38:namespace {
        -:   39:/// Convert all parallel affine.for op into 1-D affine.parallel op.
   147815:   40:struct AffineParallelize
call    0 returned 100%
call    1 returned 100%
        -:   41:    : public impl::AffineParallelizeBase<AffineParallelize> {
        -:   42:  void runOnOperation() override;
        -:   43:};
        -:   44:
        -:   45:/// Descriptor of a potentially parallelizable loop.
     3094:   46:struct ParallelizationCandidate {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1086:   47:  ParallelizationCandidate(AffineForOp l, SmallVector<LoopReduction> &&r)
     1086:   48:      : loop(l), reductions(std::move(r)) {}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   49:
        -:   50:  /// The potentially parallelizable loop.
        -:   51:  AffineForOp loop;
        -:   52:  /// Desciprtors of reductions that can be parallelized in the loop.
        -:   53:  SmallVector<LoopReduction> reductions;
        -:   54:};
        -:   55:} // namespace
        -:   56:
function _ZN12_GLOBAL__N_117AffineParallelize14runOnOperationEv called 450 returned 100% blocks executed 65%
      450:   57:void AffineParallelize::runOnOperation() {
      450:   58:  func::FuncOp f = getOperation();
call    0 returned 100%
        -:   59:
        -:   60:  // The walker proceeds in pre-order to process the outer loops first
        -:   61:  // and control the number of outer parallel loops.
      902:   62:  std::vector<ParallelizationCandidate> parallelizableLoops;
call    0 returned 100%
call    1 returned 100%
function _ZZN12_GLOBAL__N_117AffineParallelize14runOnOperationEvENKUlN4mlir11AffineForOpEE_clES2_.isra.0 called 2127 returned 100% blocks executed 89%
     2577:   63:  f.walk<WalkOrder::PreOrder>([&](AffineForOp loop) {
call    0 returned 100%
     2127:   64:    SmallVector<LoopReduction> reductions;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4254:   65:    if (isLoopParallel(loop, parallelReductions ? &reductions : nullptr))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
     1086:   66:      parallelizableLoops.emplace_back(loop, std::move(reductions));
call    0 returned 100%
     2127:   67:  });
        -:   68:
     1538:   69:  for (const ParallelizationCandidate &candidate : parallelizableLoops) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     1086:   70:    unsigned numParentParallelOps = 0;
     1086:   71:    AffineForOp loop = candidate.loop;
     1086:   72:    for (Operation *op = loop->getParentOp();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1850:   73:         op != nullptr && !op->hasTrait<OpTrait::AffineScope>();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
      764:   74:         op = op->getParentOp()) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
      764:   75:      if (isa<AffineParallelOp>(op))
call    0 returned 100%
branch  1 taken 1%
branch  2 taken 100%
        2:   76:        ++numParentParallelOps;
        -:   77:    }
        -:   78:
     1086:   79:    if (numParentParallelOps < maxNested) {
branch  0 taken 100%
branch  1 taken 0%
     1086:   80:      if (failed(affineParallelize(loop, candidate.reductions))) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   81:        LLVM_DEBUG(llvm::dbgs() << "[" DEBUG_TYPE "] failed to parallelize\n"
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:   82:                                << loop);
        -:   83:      }
        -:   84:    } else {
    #####:   85:      LLVM_DEBUG(llvm::dbgs() << "[" DEBUG_TYPE "] too many nested loops\n"
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:   86:                              << loop);
        -:   87:    }
        -:   88:  }
      451:   89:}
        -:   90:
        -:   91:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir27createAffineParallelizePassEv called 116711 returned 100% blocks executed 100%
   116711:   92:mlir::createAffineParallelizePass() {
   116711:   93:  return std::make_unique<AffineParallelize>();
call    0 returned 100%
        -:   94:}
