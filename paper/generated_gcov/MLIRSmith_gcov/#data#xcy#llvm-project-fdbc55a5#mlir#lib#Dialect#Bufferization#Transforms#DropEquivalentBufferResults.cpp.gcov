        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Bufferization/Transforms/DropEquivalentBufferResults.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/DropEquivalentBufferResults.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/DropEquivalentBufferResults.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- DropEquivalentBufferResults.cpp - Calling convention conversion ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This pass drops return values from functions if they are equivalent to one of
        -:   10:// their arguments. E.g.:
        -:   11://
        -:   12:// ```
        -:   13:// func.func @foo(%m : memref<?xf32>) -> (memref<?xf32>) {
        -:   14://   return %m : memref<?xf32>
        -:   15:// }
        -:   16:// ```
        -:   17://
        -:   18:// This functions is rewritten to:
        -:   19://
        -:   20:// ```
        -:   21:// func.func @foo(%m : memref<?xf32>) {
        -:   22://   return
        -:   23:// }
        -:   24:// ```
        -:   25://
        -:   26:// All call sites are updated accordingly. If a function returns a cast of a
        -:   27:// function argument, it is also considered equivalent. A cast is inserted at
        -:   28:// the call site in that case.
        -:   29:
        -:   30:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   31:
        -:   32:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   33:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   34:#include "mlir/IR/Operation.h"
        -:   35:#include "mlir/Pass/Pass.h"
        -:   36:
        -:   37:namespace mlir {
        -:   38:namespace bufferization {
        -:   39:#define GEN_PASS_DEF_DROPEQUIVALENTBUFFERRESULTS
        -:   40:#include "mlir/Dialect/Bufferization/Transforms/Passes.h.inc"
        -:   41:} // namespace bufferization
        -:   42:} // namespace mlir
        -:   43:
        -:   44:using namespace mlir;
        -:   45:
        -:   46:/// Return the unique ReturnOp that terminates `funcOp`.
        -:   47:/// Return nullptr if there is no such unique ReturnOp.
function _ZL24getAssumedUniqueReturnOpN4mlir4func6FuncOpE called 419 returned 100% blocks executed 85%
      419:   48:static func::ReturnOp getAssumedUniqueReturnOp(func::FuncOp funcOp) {
      419:   49:  func::ReturnOp returnOp;
call    0 returned 100%
      852:   50:  for (Block &b : funcOp.getBody()) {
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      433:   51:    if (auto candidateOp = dyn_cast<func::ReturnOp>(b.getTerminator())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
      418:   52:      if (returnOp)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:        return nullptr;
        -:   54:      returnOp = candidateOp;
        -:   55:    }
        -:   56:  }
      419:   57:  return returnOp;
        -:   58:}
        -:   59:
        -:   60:/// Return the func::FuncOp called by `callOp`.
function _ZL17getCalledFunctionN4mlir15CallOpInterfaceE called 72 returned 100% blocks executed 91%
       72:   61:static func::FuncOp getCalledFunction(CallOpInterface callOp) {
       72:   62:  SymbolRefAttr sym = callOp.getCallableForCallee().dyn_cast<SymbolRefAttr>();
call    0 returned 100%
call    1 returned 100%
       72:   63:  if (!sym)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   64:    return nullptr;
       72:   65:  return dyn_cast_or_null<func::FuncOp>(
       72:   66:      SymbolTable::lookupNearestSymbolFrom(callOp, sym));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   67:}
        -:   68:
        -:   69:LogicalResult
function _ZN4mlir13bufferization27dropEquivalentBufferResultsENS_8ModuleOpE called 415 returned 100% blocks executed 90%
      415:   70:mlir::bufferization::dropEquivalentBufferResults(ModuleOp module) {
      415:   71:  IRRewriter rewriter(module.getContext());
call    0 returned 100%
call    1 returned 100%
        -:   72:
     1297:   73:  for (auto funcOp : module.getOps<func::FuncOp>()) {
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
call    3 returned 100%
call    4 returned 100%
      441:   74:    if (funcOp.isExternal())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       23:   75:      continue;
      419:   76:    func::ReturnOp returnOp = getAssumedUniqueReturnOp(funcOp);
call    0 returned 100%
        -:   77:    // TODO: Support functions with multiple blocks.
      419:   78:    if (!returnOp)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        1:   79:      continue;
        -:   80:
        -:   81:    // Compute erased results.
      836:   82:    SmallVector<Value> newReturnValues;
call    0 returned 100%
      836:   83:    BitVector erasedResultIndices(funcOp.getFunctionType().getNumResults());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      836:   84:    DenseMap<int64_t, int64_t> resultToArgs;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      844:   85:    for (const auto &it : llvm::enumerate(returnOp.operands())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
      213:   86:      bool erased = false;
      494:   87:      for (BlockArgument bbArg : funcOp.getArguments()) {
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
      285:   88:        Value val = it.value();
     285*:   89:        while (auto castOp = val.getDefiningOp<memref::CastOp>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   90:          val = castOp.getSource();
call    0 never executed
        -:   91:
      285:   92:        if (val == bbArg) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4:   93:          resultToArgs[it.index()] = bbArg.getArgNumber();
call    0 returned 100%
        4:   94:          erased = true;
        4:   95:          break;
        -:   96:        }
        -:   97:      }
        -:   98:
      213:   99:      if (erased) {
        4:  100:        erasedResultIndices.set(it.index());
call    0 returned 100%
        -:  101:      } else {
      209:  102:        newReturnValues.push_back(it.value());
call    0 returned 100%
        -:  103:      }
        -:  104:    }
        -:  105:
        -:  106:    // Update function.
      418:  107:    funcOp.eraseResults(erasedResultIndices);
call    0 returned 100%
      418:  108:    returnOp.operandsMutable().assign(newReturnValues);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0%
branch  4 taken 100%
        -:  109:
        -:  110:    // Update function calls.
function _ZZN4mlir13bufferization27dropEquivalentBufferResultsENS_8ModuleOpEENKUlNS_4func6CallOpEE_clES3_ called 72 returned 100% blocks executed 73%
      490:  111:    module.walk([&](func::CallOp callOp) {
       72:  112:      if (getCalledFunction(callOp) != funcOp)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
       64:  113:        return WalkResult::skip();
        -:  114:
       8*:  115:      rewriter.setInsertionPoint(callOp);
call    0 returned 100%
        8:  116:      auto newCallOp = rewriter.create<func::CallOp>(callOp.getLoc(), funcOp,
        8:  117:                                                     callOp.operands());
call    0 returned 100%
call    1 returned 100%
        8:  118:      SmallVector<Value> newResults;
        8:  119:      int64_t nextResult = 0;
       12:  120:      for (int64_t i = 0; i < callOp.getNumResults(); ++i) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       4*:  121:        if (!resultToArgs.count(i)) {
call    0 returned 100%
        -:  122:          // This result was not erased.
    #####:  123:          newResults.push_back(newCallOp.getResult(nextResult++));
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  124:          continue;
        -:  125:        }
        -:  126:
        -:  127:        // This result was erased.
        4:  128:        Value replacement = callOp.getOperand(resultToArgs[i]);
call    0 returned 100%
call    1 returned 100%
        8:  129:        Type expectedType = callOp.getResult(i).getType();
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        4:  130:        if (replacement.getType() != expectedType) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  131:          // A cast must be inserted at the call site.
    #####:  132:          replacement = rewriter.create<memref::CastOp>(
    #####:  133:              callOp.getLoc(), expectedType, replacement);
call    0 never executed
        -:  134:        }
        4:  135:        newResults.push_back(replacement);
call    0 returned 100%
        -:  136:      }
        8:  137:      rewriter.replaceOp(callOp, newResults);
call    0 returned 100%
call    1 returned 100%
        8:  138:      return WalkResult::advance();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      418:  139:    });
call    0 returned 100%
call    1 returned 100%
        -:  140:  }
        -:  141:
      415:  142:  return success();
call    0 returned 100%
        -:  143:}
        -:  144:
        -:  145:namespace {
  116696*:  146:struct DropEquivalentBufferResultsPass
call    0 never executed
call    1 returned 100%
        -:  147:    : bufferization::impl::DropEquivalentBufferResultsBase<
        -:  148:          DropEquivalentBufferResultsPass> {
function _ZN12_GLOBAL__N_131DropEquivalentBufferResultsPass14runOnOperationEv called 415 returned 100% blocks executed 80%
      415:  149:  void runOnOperation() override {
      415:  150:    if (failed(bufferization::dropEquivalentBufferResults(getOperation())))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  151:      return signalPassFailure();
call    0 never executed
        -:  152:  }
        -:  153:};
        -:  154:} // namespace
        -:  155:
        -:  156:std::unique_ptr<Pass>
function _ZN4mlir13bufferization37createDropEquivalentBufferResultsPassEv called 116696 returned 100% blocks executed 100%
   116696:  157:mlir::bufferization::createDropEquivalentBufferResultsPass() {
   116696:  158:  return std::make_unique<DropEquivalentBufferResultsPass>();
call    0 returned 100%
        -:  159:}
