        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Complex/IR/ComplexDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Complex/IR/CMakeFiles/obj.MLIRComplexDialect.dir/ComplexDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Complex/IR/CMakeFiles/obj.MLIRComplexDialect.dir/ComplexDialect.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- ComplexDialect.cpp - MLIR Complex Dialect --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   11:#include "mlir/IR/Builders.h"
        -:   12:#include "mlir/IR/DialectImplementation.h"
        -:   13:#include "llvm/ADT/StringExtras.h"
        -:   14:#include "llvm/ADT/TypeSwitch.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:#include "mlir/Dialect/Complex/IR/ComplexOpsDialect.cpp.inc"
        -:   19:
function _ZN4mlir7complex14ComplexDialect10initializeEv called 0 returned 0% blocks executed 0%
   91592*:   20:void complex::ComplexDialect::initialize() {
   91592*:   21:  addOperations<
        -:   22:#define GET_OP_LIST
        -:   23:#include "mlir/Dialect/Complex/IR/ComplexOps.cpp.inc"
   91592*:   24:      >();
call    0 never executed
call    1 returned 100%
   91592*:   25:  addAttributes<
        -:   26:#define GET_ATTRDEF_LIST
        -:   27:#include "mlir/Dialect/Complex/IR/ComplexAttributes.cpp.inc"
   91592*:   28:      >();
call    0 never executed
call    1 returned 100%
    #####:   29:}
        -:   30:
function _ZN4mlir7complex14ComplexDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   31:Operation *complex::ComplexDialect::materializeConstant(OpBuilder &builder,
        -:   32:                                                        Attribute value,
        -:   33:                                                        Type type,
        -:   34:                                                        Location loc) {
    #####:   35:  if (complex::ConstantOp::isBuildableWith(value, type)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:    return builder.create<complex::ConstantOp>(loc, type,
call    0 never executed
    #####:   37:                                               value.cast<ArrayAttr>());
call    0 never executed
        -:   38:  }
    #####:   39:  if (arith::ConstantOp::isBuildableWith(value, type))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    return builder.create<arith::ConstantOp>(loc, type, value);
call    0 never executed
        -:   41:  return nullptr;
        -:   42:}
        -:   43:
        -:   44:#define GET_ATTRDEF_CLASSES
        -:   45:#include "mlir/Dialect/Complex/IR/ComplexAttributes.cpp.inc"
        -:   46:
function _ZN4mlir7complex10NumberAttr6verifyEN4llvm12function_refIFNS_18InFlightDiagnosticEvEEENS2_7APFloatES7_NS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   47:LogicalResult complex::NumberAttr::verify(
        -:   48:    ::llvm::function_ref<::mlir::InFlightDiagnostic()> emitError,
        -:   49:    ::llvm::APFloat real, ::llvm::APFloat imag, ::mlir::Type type) {
        -:   50:
    #####:   51:  if (!type.isa<ComplexType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    return emitError() << "complex attribute must be a complex type.";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   53:
    #####:   54:  Type elementType = type.cast<ComplexType>().getElementType();
call    0 never executed
call    1 never executed
    #####:   55:  if (!elementType.isa<FloatType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:    return emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   57:           << "element type of the complex attribute must be float like type.";
call    0 never executed
        -:   58:
    #####:   59:  const auto &typeFloatSemantics =
call    0 never executed
    #####:   60:      elementType.cast<FloatType>().getFloatSemantics();
call    0 never executed
    #####:   61:  if (&real.getSemantics() != &typeFloatSemantics)
branch  0 never executed
branch  1 never executed
    #####:   62:    return emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   63:           << "type doesn't match the type implied by its `real` value";
call    0 never executed
    #####:   64:  if (&imag.getSemantics() != &typeFloatSemantics)
branch  0 never executed
branch  1 never executed
    #####:   65:    return emitError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   66:           << "type doesn't match the type implied by its `imag` value";
call    0 never executed
        -:   67:
    #####:   68:  return success();
        -:   69:}
        -:   70:
function _ZNK4mlir7complex10NumberAttr5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   71:void complex::NumberAttr::print(AsmPrinter &printer) const {
    #####:   72:  printer << "<:" << getType().cast<ComplexType>().getElementType() << " "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   73:          << getReal() << ", " << getImag() << ">";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:   74:}
        -:   75:
function _ZN4mlir7complex10NumberAttr5parseERNS_9AsmParserENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   76:Attribute complex::NumberAttr::parse(AsmParser &parser, Type odsType) {
    #####:   77:  Type type;
    #####:   78:  double real, imag;
    #####:   79:  if (parser.parseLess() || parser.parseColon() || parser.parseType(type) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   80:      parser.parseFloat(real) || parser.parseComma() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   81:      parser.parseFloat(imag) || parser.parseGreater())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:   82:    return {};
        -:   83:
    #####:   84:  return NumberAttr::get(ComplexType::get(type), real, imag);
call    0 never executed
call    1 never executed
        -:   85:}
