        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Target/SPIRV/SPIRVBinaryUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Target/SPIRV/CMakeFiles/obj.MLIRSPIRVBinaryUtils.dir/SPIRVBinaryUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/SPIRV/CMakeFiles/obj.MLIRSPIRVBinaryUtils.dir/SPIRVBinaryUtils.cpp.gcda
        -:    0:Runs:116164
        -:    1://===- SPIRVBinaryUtils.cpp - MLIR SPIR-V Binary Module Utilities ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines common utilities for SPIR-V binary module.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Target/SPIRV/SPIRVBinaryUtils.h"
        -:   14:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
function _ZN4mlir5spirv18appendModuleHeaderERN4llvm15SmallVectorImplIjEENS0_7VersionEj called 0 returned 0% blocks executed 0%
    #####:   18:void spirv::appendModuleHeader(SmallVectorImpl<uint32_t> &header,
        -:   19:                               spirv::Version version, uint32_t idBound) {
    #####:   20:  uint32_t majorVersion = 1;
    #####:   21:  uint32_t minorVersion = 0;
    #####:   22:  switch (version) {
branch  0 never executed
branch  1 never executed
        -:   23:#define MIN_VERSION_CASE(v)                                                    \
        -:   24:  case spirv::Version::V_1_##v:                                                \
        -:   25:    minorVersion = v;                                                          \
        -:   26:    break
        -:   27:
        -:   28:    MIN_VERSION_CASE(0);
        -:   29:    MIN_VERSION_CASE(1);
        -:   30:    MIN_VERSION_CASE(2);
        -:   31:    MIN_VERSION_CASE(3);
        -:   32:    MIN_VERSION_CASE(4);
        -:   33:    MIN_VERSION_CASE(5);
        -:   34:    MIN_VERSION_CASE(6);
        -:   35:#undef MIN_VERSION_CASE
        -:   36:  }
        -:   37:
        -:   38:  // See "2.3. Physical Layout of a SPIR-V Module and Instruction" in the SPIR-V
        -:   39:  // spec for the definition of the binary module header.
        -:   40:  //
        -:   41:  // The first five words of a SPIR-V module must be:
        -:   42:  // +-------------------------------------------------------------------------+
        -:   43:  // | Magic number                                                            |
        -:   44:  // +-------------------------------------------------------------------------+
        -:   45:  // | Version number (bytes: 0 | major number | minor number | 0)             |
        -:   46:  // +-------------------------------------------------------------------------+
        -:   47:  // | Generator magic number                                                  |
        -:   48:  // +-------------------------------------------------------------------------+
        -:   49:  // | Bound (all result <id>s in the module guaranteed to be less than it)    |
        -:   50:  // +-------------------------------------------------------------------------+
        -:   51:  // | 0 (reserved for instruction schema)                                     |
        -:   52:  // +-------------------------------------------------------------------------+
    #####:   53:  header.push_back(spirv::kMagicNumber);
call    0 never executed
    #####:   54:  header.push_back((majorVersion << 16) | (minorVersion << 8));
call    0 never executed
    #####:   55:  header.push_back(kGeneratorNumber);
call    0 never executed
    #####:   56:  header.push_back(idBound); // <id> bound
call    0 never executed
    #####:   57:  header.push_back(0);       // Schema (reserved word)
call    0 never executed
    #####:   58:}
        -:   59:
        -:   60:/// Returns the word-count-prefixed opcode for an SPIR-V instruction.
function _ZN4mlir5spirv17getPrefixedOpcodeEjNS0_6OpcodeE called 0 returned 0% blocks executed 0%
    #####:   61:uint32_t spirv::getPrefixedOpcode(uint32_t wordCount, spirv::Opcode opcode) {
    #####:   62:  assert(((wordCount >> 16) == 0) && "word count out of range!");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   63:  return (wordCount << 16) | static_cast<uint32_t>(opcode);
        -:   64:}
        -:   65:
function _ZN4mlir5spirv23encodeStringLiteralIntoERN4llvm15SmallVectorImplIjEENS1_9StringRefE called 0 returned 0% blocks executed 0%
    #####:   66:void spirv::encodeStringLiteralInto(SmallVectorImpl<uint32_t> &binary,
        -:   67:                                    StringRef literal) {
        -:   68:  // We need to encode the literal and the null termination.
    #####:   69:  auto encodingSize = literal.size() / 4 + 1;
call    0 never executed
    #####:   70:  auto bufferStartSize = binary.size();
call    0 never executed
    #####:   71:  binary.resize(bufferStartSize + encodingSize, 0);
call    0 never executed
    #####:   72:  std::memcpy(binary.data() + bufferStartSize, literal.data(), literal.size());
    #####:   73:}
