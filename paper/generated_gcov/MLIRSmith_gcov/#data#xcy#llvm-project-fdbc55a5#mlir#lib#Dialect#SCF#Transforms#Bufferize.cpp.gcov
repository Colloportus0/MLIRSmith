        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SCF/Transforms/Bufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/Bufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/Bufferize.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Bufferize.cpp - scf bufferize pass ---------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   12:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   13:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   14:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   15:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   16:#include "mlir/Transforms/DialectConversion.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_SCFBUFFERIZE
        -:   20:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::scf;
        -:   25:
        -:   26:namespace {
  116709*:   27:struct SCFBufferizePass : public impl::SCFBufferizeBase<SCFBufferizePass> {
call    0 never executed
call    1 returned 100%
function _ZN12_GLOBAL__N_116SCFBufferizePass14runOnOperationEv called 421 returned 100% blocks executed 70%
      421:   28:  void runOnOperation() override {
      421:   29:    auto *func = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      421:   30:    auto *context = &getContext();
call    0 returned 100%
        -:   31:
      842:   32:    bufferization::BufferizeTypeConverter typeConverter;
call    0 returned 100%
     1263:   33:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      842:   34:    ConversionTarget target(*context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   35:
      421:   36:    bufferization::populateBufferizeMaterializationLegality(target);
call    0 returned 100%
      421:   37:    populateSCFStructuralTypeConversionsAndLegality(typeConverter, patterns,
call    0 returned 100%
        -:   38:                                                    target);
      421:   39:    if (failed(applyPartialConversion(func, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   40:      return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   41:  };
        -:   42:};
        -:   43:} // namespace
        -:   44:
function _ZN4mlir22createSCFBufferizePassEv called 116709 returned 100% blocks executed 100%
   116709:   45:std::unique_ptr<Pass> mlir::createSCFBufferizePass() {
   116709:   46:  return std::make_unique<SCFBufferizePass>();
call    0 returned 100%
        -:   47:}
