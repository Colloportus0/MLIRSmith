        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Transform/TestTransformDialectExtension.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Transform/CMakeFiles/MLIRTestTransformDialect.dir/TestTransformDialectExtension.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Transform/CMakeFiles/MLIRTestTransformDialect.dir/TestTransformDialectExtension.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestTransformDialectExtension.cpp ----------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines an extension of the MLIR Transform dialect for testing
        -:   10:// purposes.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "TestTransformDialectExtension.h"
        -:   15:#include "TestTransformStateExtension.h"
        -:   16:#include "mlir/Dialect/PDL/IR/PDL.h"
        -:   17:#include "mlir/Dialect/Transform/IR/TransformDialect.h"
        -:   18:#include "mlir/Dialect/Transform/IR/TransformInterfaces.h"
        -:   19:#include "mlir/IR/OpImplementation.h"
        -:   20:#include "llvm/ADT/TypeSwitch.h"
        -:   21:#include "llvm/Support/Compiler.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:/// Simple transform op defined outside of the dialect. Just emits a remark when
        -:   27:/// applied. This op is defined in C++ to test that C++ definitions also work
        -:   28:/// for op injection into the Transform dialect.
        -:   29:class TestTransformOp
        -:   30:    : public Op<TestTransformOp, transform::TransformOpInterface::Trait,
        -:   31:                MemoryEffectOpInterface::Trait> {
        -:   32:public:
function _ZN12_GLOBAL__N_115TestTransformOp13resolveTypeIDEv called 0 returned 0% blocks executed 0%
    #####:   33:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestTransformOp)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   34:
    #####:   35:  using Op::Op;
        -:   36:
    #####:   37:  static ArrayRef<StringRef> getAttributeNames() { return {}; }
call    0 never executed
        -:   38:
        -:   39:  static constexpr llvm::StringLiteral getOperationName() {
        -:   40:    return llvm::StringLiteral("transform.test_transform_op");
        -:   41:  }
        -:   42:
        -:   43:  DiagnosedSilenceableFailure apply(transform::TransformResults &results,
        -:   44:                                    transform::TransformState &state) {
        -:   45:    InFlightDiagnostic remark = emitRemark() << "applying transformation";
        -:   46:    if (Attribute message = getMessage())
        -:   47:      remark << " " << message;
        -:   48:
        -:   49:    return DiagnosedSilenceableFailure::success();
        -:   50:  }
        -:   51:
    #####:   52:  Attribute getMessage() { return getOperation()->getAttr("message"); }
        -:   53:
function _ZN12_GLOBAL__N_115TestTransformOp5parseERN4mlir11OpAsmParserERNS1_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:   54:  static ParseResult parse(OpAsmParser &parser, OperationState &state) {
    #####:   55:    StringAttr message;
    #####:   56:    OptionalParseResult result = parser.parseOptionalAttribute(message);
call    0 never executed
    #####:   57:    if (!result.has_value())
branch  0 never executed
branch  1 never executed
    #####:   58:      return success();
        -:   59:
    #####:   60:    if (result.value().succeeded())
branch  0 never executed
branch  1 never executed
    #####:   61:      state.addAttribute("message", message);
call    0 never executed
    #####:   62:    return result.value();
        -:   63:  }
        -:   64:
function _ZN12_GLOBAL__N_115TestTransformOp5printERN4mlir12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:   65:  void print(OpAsmPrinter &printer) {
    #####:   66:    if (getMessage())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:      printer << " " << getMessage();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:  }
        -:   69:
        -:   70:  // No side effects.
    #####:   71:  void getEffects(SmallVectorImpl<MemoryEffects::EffectInstance> &effects) {}
        -:   72:};
        -:   73:
        -:   74:/// A test op to exercise the verifier of the PossibleTopLevelTransformOpTrait
        -:   75:/// in cases where it is attached to ops that do not comply with the trait
        -:   76:/// requirements. This op cannot be defined in ODS because ODS generates strict
        -:   77:/// verifiers that overalp with those in the trait and run earlier.
        -:   78:class TestTransformUnrestrictedOpNoInterface
        -:   79:    : public Op<TestTransformUnrestrictedOpNoInterface,
        -:   80:                transform::PossibleTopLevelTransformOpTrait,
        -:   81:                transform::TransformOpInterface::Trait,
        -:   82:                MemoryEffectOpInterface::Trait> {
        -:   83:public:
function _ZN12_GLOBAL__N_138TestTransformUnrestrictedOpNoInterface13resolveTypeIDEv called 0 returned 0% blocks executed 0%
    #####:   84:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   85:      TestTransformUnrestrictedOpNoInterface)
        -:   86:
    #####:   87:  using Op::Op;
        -:   88:
    #####:   89:  static ArrayRef<StringRef> getAttributeNames() { return {}; }
call    0 never executed
        -:   90:
        -:   91:  static constexpr llvm::StringLiteral getOperationName() {
        -:   92:    return llvm::StringLiteral(
        -:   93:        "transform.test_transform_unrestricted_op_no_interface");
        -:   94:  }
        -:   95:
    #####:   96:  DiagnosedSilenceableFailure apply(transform::TransformResults &results,
        -:   97:                                    transform::TransformState &state) {
    #####:   98:    return DiagnosedSilenceableFailure::success();
        -:   99:  }
        -:  100:
        -:  101:  // No side effects.
    #####:  102:  void getEffects(SmallVectorImpl<MemoryEffects::EffectInstance> &effects) {}
        -:  103:};
        -:  104:} // namespace
        -:  105:
        -:  106:DiagnosedSilenceableFailure
function _ZN4mlir4test34TestProduceParamOrForwardOperandOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  107:mlir::test::TestProduceParamOrForwardOperandOp::apply(
        -:  108:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  109:  if (getOperation()->getNumOperands() != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  110:    results.set(getResult().cast<OpResult>(),
call    0 never executed
call    1 never executed
    #####:  111:                getOperation()->getOperand(0).getDefiningOp());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  112:  } else {
    #####:  113:    results.set(getResult().cast<OpResult>(),
call    0 never executed
call    1 never executed
    #####:  114:                reinterpret_cast<Operation *>(*getParameter()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  115:  }
    #####:  116:  return DiagnosedSilenceableFailure::success();
        -:  117:}
        -:  118:
function _ZN4mlir4test34TestProduceParamOrForwardOperandOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  119:LogicalResult mlir::test::TestProduceParamOrForwardOperandOp::verify() {
    #####:  120:  if (getParameter().has_value() ^ (getNumOperands() != 1))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  121:    return emitOpError() << "expects either a parameter or an operand";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  122:  return success();
        -:  123:}
        -:  124:
        -:  125:DiagnosedSilenceableFailure
function _ZN4mlir4test18TestConsumeOperand5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  126:mlir::test::TestConsumeOperand::apply(transform::TransformResults &results,
        -:  127:                                      transform::TransformState &state) {
    #####:  128:  return DiagnosedSilenceableFailure::success();
        -:  129:}
        -:  130:
        -:  131:DiagnosedSilenceableFailure
function _ZN4mlir4test38TestConsumeOperandIfMatchesParamOrFail5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  132:mlir::test::TestConsumeOperandIfMatchesParamOrFail::apply(
        -:  133:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  134:  ArrayRef<Operation *> payload = state.getPayloadOps(getOperand());
call    0 never executed
call    1 never executed
    #####:  135:  assert(payload.size() == 1 && "expected a single target op");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  136:  auto value = reinterpret_cast<intptr_t>(payload[0]);
call    0 never executed
    #####:  137:  if (static_cast<uint64_t>(value) != getParameter()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:    return emitSilenceableError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  139:           << "op expected the operand to be associated with " << getParameter()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  140:           << " got " << value;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  141:  }
        -:  142:
    #####:  143:  emitRemark() << "succeeded";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  144:  return DiagnosedSilenceableFailure::success();
        -:  145:}
        -:  146:
function _ZN4mlir4test26TestPrintRemarkAtOperandOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  147:DiagnosedSilenceableFailure mlir::test::TestPrintRemarkAtOperandOp::apply(
        -:  148:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  149:  ArrayRef<Operation *> payload = state.getPayloadOps(getOperand());
call    0 never executed
call    1 never executed
    #####:  150:  for (Operation *op : payload)
branch  0 never executed
branch  1 never executed
    #####:  151:    op->emitRemark() << getMessage();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  152:
    #####:  153:  return DiagnosedSilenceableFailure::success();
        -:  154:}
        -:  155:
        -:  156:DiagnosedSilenceableFailure
function _ZN4mlir4test22TestAddTestExtensionOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  157:mlir::test::TestAddTestExtensionOp::apply(transform::TransformResults &results,
        -:  158:                                          transform::TransformState &state) {
    #####:  159:  state.addExtension<TestTransformStateExtension>(getMessageAttr());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  160:  return DiagnosedSilenceableFailure::success();
        -:  161:}
        -:  162:
        -:  163:DiagnosedSilenceableFailure
function _ZN4mlir4test33TestCheckIfTestExtensionPresentOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  164:mlir::test::TestCheckIfTestExtensionPresentOp::apply(
        -:  165:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  166:  auto *extension = state.getExtension<TestTransformStateExtension>();
call    0 never executed
    #####:  167:  if (!extension) {
branch  0 never executed
branch  1 never executed
    #####:  168:    emitRemark() << "extension absent";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  169:    return DiagnosedSilenceableFailure::success();
        -:  170:  }
        -:  171:
    #####:  172:  InFlightDiagnostic diag = emitRemark()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  173:                            << "extension present, " << extension->getMessage();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  174:  for (Operation *payload : state.getPayloadOps(getOperand())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  175:    diag.attachNote(payload->getLoc()) << "associated payload op";
call    0 never executed
call    1 never executed
        -:  176:#ifndef NDEBUG
    #####:  177:    SmallVector<Value> handles;
call    0 never executed
    #####:  178:    assert(succeeded(state.getHandlesForPayloadOp(payload, handles)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  179:    assert(llvm::is_contained(handles, getOperand()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  180:           "inconsistent mapping between transform IR handles and payload IR "
        -:  181:           "operations");
        -:  182:#endif // NDEBUG
        -:  183:  }
        -:  184:
    #####:  185:  return DiagnosedSilenceableFailure::success();
call    0 never executed
        -:  186:}
        -:  187:
function _ZN4mlir4test31TestRemapOperandPayloadToSelfOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  188:DiagnosedSilenceableFailure mlir::test::TestRemapOperandPayloadToSelfOp::apply(
        -:  189:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  190:  auto *extension = state.getExtension<TestTransformStateExtension>();
call    0 never executed
    #####:  191:  if (!extension)
branch  0 never executed
branch  1 never executed
    #####:  192:    return emitDefiniteFailure("TestTransformStateExtension missing");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  193:
    #####:  194:  if (failed(extension->updateMapping(state.getPayloadOps(getOperand()).front(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  195:                                      getOperation())))
    #####:  196:    return DiagnosedSilenceableFailure::definiteFailure();
    #####:  197:  return DiagnosedSilenceableFailure::success();
        -:  198:}
        -:  199:
function _ZN4mlir4test25TestRemoveTestExtensionOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  200:DiagnosedSilenceableFailure mlir::test::TestRemoveTestExtensionOp::apply(
        -:  201:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  202:  state.removeExtension<TestTransformStateExtension>();
call    0 never executed
call    1 never executed
    #####:  203:  return DiagnosedSilenceableFailure::success();
        -:  204:}
        -:  205:
        -:  206:DiagnosedSilenceableFailure
function _ZN4mlir4test23TestReversePayloadOpsOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  207:mlir::test::TestReversePayloadOpsOp::apply(transform::TransformResults &results,
        -:  208:                                           transform::TransformState &state) {
    #####:  209:  ArrayRef<Operation *> payloadOps = state.getPayloadOps(getTarget());
call    0 never executed
call    1 never executed
    #####:  210:  auto reversedOps = llvm::to_vector(llvm::reverse(payloadOps));
call    0 never executed
    #####:  211:  results.set(getResult().cast<OpResult>(), reversedOps);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  212:  return DiagnosedSilenceableFailure::success();
branch  0 never executed
branch  1 never executed
        -:  213:}
        -:  214:
function _ZN4mlir4test26TestTransformOpWithRegions5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  215:DiagnosedSilenceableFailure mlir::test::TestTransformOpWithRegions::apply(
        -:  216:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  217:  return DiagnosedSilenceableFailure::success();
        -:  218:}
        -:  219:
function _ZN4mlir4test26TestTransformOpWithRegions10getEffectsERN4llvm15SmallVectorImplINS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEEE called 0 returned 0% blocks executed 0%
    #####:  220:void mlir::test::TestTransformOpWithRegions::getEffects(
    #####:  221:    SmallVectorImpl<MemoryEffects::EffectInstance> &effects) {}
        -:  222:
        -:  223:DiagnosedSilenceableFailure
function _ZN4mlir4test34TestBranchingTransformOpTerminator5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  224:mlir::test::TestBranchingTransformOpTerminator::apply(
        -:  225:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  226:  return DiagnosedSilenceableFailure::success();
        -:  227:}
        -:  228:
function _ZN4mlir4test34TestBranchingTransformOpTerminator10getEffectsERN4llvm15SmallVectorImplINS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEEE called 0 returned 0% blocks executed 0%
    #####:  229:void mlir::test::TestBranchingTransformOpTerminator::getEffects(
    #####:  230:    SmallVectorImpl<MemoryEffects::EffectInstance> &effects) {}
        -:  231:
function _ZN4mlir4test31TestEmitRemarkAndEraseOperandOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  232:DiagnosedSilenceableFailure mlir::test::TestEmitRemarkAndEraseOperandOp::apply(
        -:  233:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  234:  emitRemark() << getRemark();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  235:  for (Operation *op : state.getPayloadOps(getTarget()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  236:    op->erase();
call    0 never executed
        -:  237:
    #####:  238:  if (getFailAfterErase())
call    0 never executed
    #####:  239:    return emitSilenceableError() << "silenceable error";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  240:  return DiagnosedSilenceableFailure::success();
        -:  241:}
        -:  242:
function _ZN4mlir4test26TestWrongNumberOfResultsOp10applyToOneEPNS_9OperationERN4llvm15SmallVectorImplIS3_EERNS_9transform14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  243:DiagnosedSilenceableFailure mlir::test::TestWrongNumberOfResultsOp::applyToOne(
        -:  244:    Operation *target, SmallVectorImpl<Operation *> &results,
        -:  245:    transform::TransformState &state) {
    #####:  246:  OperationState opState(target->getLoc(), "foo");
call    0 never executed
call    1 never executed
    #####:  247:  results.push_back(OpBuilder(target).create(opState));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  248:  return DiagnosedSilenceableFailure::success();
call    0 never executed
        -:  249:}
        -:  250:
        -:  251:DiagnosedSilenceableFailure
function _ZN4mlir4test31TestWrongNumberOfMultiResultsOp10applyToOneEPNS_9OperationERN4llvm15SmallVectorImplIS3_EERNS_9transform14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  252:mlir::test::TestWrongNumberOfMultiResultsOp::applyToOne(
        -:  253:    Operation *target, SmallVectorImpl<Operation *> &results,
        -:  254:    transform::TransformState &state) {
    #####:  255:  static int count = 0;
    #####:  256:  if (count++ == 0) {
branch  0 never executed
branch  1 never executed
    #####:  257:    OperationState opState(target->getLoc(), "foo");
call    0 never executed
    #####:  258:    results.push_back(OpBuilder(target).create(opState));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  259:  }
    #####:  260:  return DiagnosedSilenceableFailure::success();
        -:  261:}
        -:  262:
        -:  263:DiagnosedSilenceableFailure
function _ZN4mlir4test33TestCorrectNumberOfMultiResultsOp10applyToOneEPNS_9OperationERN4llvm15SmallVectorImplIS3_EERNS_9transform14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  264:mlir::test::TestCorrectNumberOfMultiResultsOp::applyToOne(
        -:  265:    Operation *target, SmallVectorImpl<Operation *> &results,
        -:  266:    transform::TransformState &state) {
    #####:  267:  OperationState opState(target->getLoc(), "foo");
call    0 never executed
call    1 never executed
    #####:  268:  results.push_back(OpBuilder(target).create(opState));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  269:  results.push_back(OpBuilder(target).create(opState));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  270:  return DiagnosedSilenceableFailure::success();
call    0 never executed
        -:  271:}
        -:  272:
        -:  273:DiagnosedSilenceableFailure
function _ZN4mlir4test32TestMixedNullAndNonNullResultsOp10applyToOneEPNS_9OperationERN4llvm15SmallVectorImplIS3_EERNS_9transform14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  274:mlir::test::TestMixedNullAndNonNullResultsOp::applyToOne(
        -:  275:    Operation *target, SmallVectorImpl<Operation *> &results,
        -:  276:    transform::TransformState &state) {
    #####:  277:  OperationState opState(target->getLoc(), "foo");
call    0 never executed
call    1 never executed
    #####:  278:  results.push_back(nullptr);
call    0 never executed
    #####:  279:  results.push_back(OpBuilder(target).create(opState));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  280:  return DiagnosedSilenceableFailure::success();
call    0 never executed
        -:  281:}
        -:  282:
        -:  283:DiagnosedSilenceableFailure
function _ZN4mlir4test32TestMixedSuccessAndSilenceableOp10applyToOneEPNS_9OperationERN4llvm15SmallVectorImplIS3_EERNS_9transform14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  284:mlir::test::TestMixedSuccessAndSilenceableOp::applyToOne(
        -:  285:    Operation *target, SmallVectorImpl<Operation *> &results,
        -:  286:    transform::TransformState &state) {
    #####:  287:  if (target->hasAttr("target_me"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  288:    return DiagnosedSilenceableFailure::success();
    #####:  289:  return emitDefaultSilenceableFailure(target);
call    0 never executed
        -:  290:}
        -:  291:
        -:  292:DiagnosedSilenceableFailure
function _ZN4mlir4test39TestPrintNumberOfAssociatedPayloadIROps5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  293:mlir::test::TestPrintNumberOfAssociatedPayloadIROps::apply(
        -:  294:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  295:  if (!getHandle())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  296:    emitRemark() << 0;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  297:  emitRemark() << state.getPayloadOps(getHandle()).size();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  298:  return DiagnosedSilenceableFailure::success();
        -:  299:}
        -:  300:
function _ZN4mlir4test39TestPrintNumberOfAssociatedPayloadIROps10getEffectsERN4llvm15SmallVectorImplINS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEEE called 0 returned 0% blocks executed 0%
    #####:  301:void mlir::test::TestPrintNumberOfAssociatedPayloadIROps::getEffects(
        -:  302:    SmallVectorImpl<MemoryEffects::EffectInstance> &effects) {
    #####:  303:  transform::onlyReadsHandle(getHandle(), effects);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  304:}
        -:  305:
        -:  306:DiagnosedSilenceableFailure
function _ZN4mlir4test17TestCopyPayloadOp5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  307:mlir::test::TestCopyPayloadOp::apply(transform::TransformResults &results,
        -:  308:                                     transform::TransformState &state) {
    #####:  309:  results.set(getCopy().cast<OpResult>(), state.getPayloadOps(getHandle()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  310:  return DiagnosedSilenceableFailure::success();
        -:  311:}
        -:  312:
function _ZNK4mlir9transform17TestDialectOpType12checkPayloadENS_8LocationEN4llvm8ArrayRefIPNS_9OperationEEE called 0 returned 0% blocks executed 0%
    #####:  313:DiagnosedSilenceableFailure mlir::transform::TestDialectOpType::checkPayload(
        -:  314:    Location loc, ArrayRef<Operation *> payload) const {
    #####:  315:  if (payload.empty())
branch  0 never executed
branch  1 never executed
    #####:  316:    return DiagnosedSilenceableFailure::success();
        -:  317:
    #####:  318:  for (Operation *op : payload) {
branch  0 never executed
branch  1 never executed
    #####:  319:    if (op->getName().getDialectNamespace() != "test") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  320:      Diagnostic diag(loc, DiagnosticSeverity::Error);
call    0 never executed
    #####:  321:      diag << "expected the payload operation to belong to the 'test' dialect";
call    0 never executed
    #####:  322:      return DiagnosedSilenceableFailure::silenceableFailure(std::move(diag));
call    0 never executed
call    1 never executed
        -:  323:    }
        -:  324:  }
        -:  325:
    #####:  326:  return DiagnosedSilenceableFailure::success();
        -:  327:}
        -:  328:
function _ZN4mlir4test43TestReportNumberOfTrackedHandlesNestedUnder10getEffectsERN4llvm15SmallVectorImplINS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEEE called 0 returned 0% blocks executed 0%
    #####:  329:void mlir::test::TestReportNumberOfTrackedHandlesNestedUnder::getEffects(
        -:  330:    SmallVectorImpl<MemoryEffects::EffectInstance> &effects) {
    #####:  331:  transform::onlyReadsHandle(getTarget(), effects);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  332:}
        -:  333:
        -:  334:DiagnosedSilenceableFailure
function _ZN4mlir4test43TestReportNumberOfTrackedHandlesNestedUnder5applyERNS_9transform16TransformResultsERNS2_14TransformStateE called 0 returned 0% blocks executed 0%
    #####:  335:mlir::test::TestReportNumberOfTrackedHandlesNestedUnder::apply(
        -:  336:    transform::TransformResults &results, transform::TransformState &state) {
    #####:  337:  int64_t count = 0;
    #####:  338:  for (Operation *op : state.getPayloadOps(getTarget())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
function _ZZN4mlir4test43TestReportNumberOfTrackedHandlesNestedUnder5applyERNS_9transform16TransformResultsERNS2_14TransformStateEENKUlPNS_9OperationEE_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  339:    op->walk([&](Operation *nested) {
call    0 never executed
    #####:  340:      SmallVector<Value> handles;
call    0 never executed
    #####:  341:      (void)state.getHandlesForPayloadOp(nested, handles);
call    0 never executed
    #####:  342:      count += handles.size();
branch  0 never executed
branch  1 never executed
    #####:  343:    });
        -:  344:  }
    #####:  345:  emitRemark() << count << " handles nested under";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  346:  return DiagnosedSilenceableFailure::success();
        -:  347:}
        -:  348:
        -:  349:namespace {
        -:  350:/// Test extension of the Transform dialect. Registers additional ops and
        -:  351:/// declares PDL as dependent dialect since the additional ops are using PDL
        -:  352:/// types for operands and results.
   210735:  353:class TestTransformDialectExtension
call    0 returned 100%
call    1 returned 100%
        -:  354:    : public transform::TransformDialectExtension<
        -:  355:          TestTransformDialectExtension> {
        -:  356:public:
        -:  357:  using Base::Base;
        -:  358:
function _ZN12_GLOBAL__N_129TestTransformDialectExtension4initEv called 116163 returned 100% blocks executed 100%
   116163:  359:  void init() {
   116163:  360:    declareDependentDialect<pdl::PDLDialect>();
call    0 returned 100%
   116163:  361:    registerTransformOps<TestTransformOp,
        -:  362:                         TestTransformUnrestrictedOpNoInterface,
        -:  363:#define GET_OP_LIST
        -:  364:#include "TestTransformDialectExtension.cpp.inc"
   116163:  365:                         >();
call    0 returned 100%
   116163:  366:    registerTypes<
        -:  367:#define GET_TYPEDEF_LIST
        -:  368:#include "TestTransformDialectExtensionTypes.cpp.inc"
   116163:  369:        >();
call    0 returned 100%
   116163:  370:  }
        -:  371:};
        -:  372:} // namespace
        -:  373:
        -:  374:#define GET_OP_CLASSES
        -:  375:#include "TestTransformDialectExtension.cpp.inc"
        -:  376:
        -:  377:// These are automatically generated by ODS but are not used as the Transform
        -:  378:// dialect uses a different dispatch mechanism to support dialect extensions.
        -:  379:LLVM_ATTRIBUTE_UNUSED static OptionalParseResult
        -:  380:generatedTypeParser(AsmParser &parser, StringRef *mnemonic, Type &value);
        -:  381:LLVM_ATTRIBUTE_UNUSED static LogicalResult
        -:  382:generatedTypePrinter(Type def, AsmPrinter &printer);
        -:  383:
        -:  384:#define GET_TYPEDEF_CLASSES
        -:  385:#include "TestTransformDialectExtensionTypes.cpp.inc"
        -:  386:
function _ZN4test37registerTestTransformDialectExtensionERN4mlir15DialectRegistryE called 116163 returned 100% blocks executed 100%
   116163:  387:void ::test::registerTestTransformDialectExtension(DialectRegistry &registry) {
   116163:  388:  registry.addExtensions<TestTransformDialectExtension>();
call    0 returned 100%
   116163:  389:}
