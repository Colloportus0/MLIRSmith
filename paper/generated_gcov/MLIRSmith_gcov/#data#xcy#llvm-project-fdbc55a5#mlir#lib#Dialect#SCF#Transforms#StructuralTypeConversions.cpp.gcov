        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SCF/Transforms/StructuralTypeConversions.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/StructuralTypeConversions.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/StructuralTypeConversions.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- StructuralTypeConversions.cpp - scf structural type conversions ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   10:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   11:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   12:#include "mlir/Transforms/DialectConversion.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::scf;
        -:   16:
        -:   17:namespace {
        -:   18:
        -:   19:// Unpacks the single unrealized_conversion_cast using the list of inputs
        -:   20:// e.g., return [%b, %c, %d] for %a = unrealized_conversion_cast(%b, %c, %d)
function _ZN12_GLOBAL__N_1L30unpackUnrealizedConversionCastEN4mlir5ValueERN4llvm15SmallVectorImplIS1_EE called 0 returned 0% blocks executed 0%
    #####:   21:static void unpackUnrealizedConversionCast(Value v,
        -:   22:                                           SmallVectorImpl<Value> &unpacked) {
    #####:   23:  if (auto cast =
branch  0 never executed
branch  1 never executed
    #####:   24:          dyn_cast_or_null<UnrealizedConversionCastOp>(v.getDefiningOp())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   25:    if (cast.getInputs().size() != 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   26:      // 1 : N type conversion.
    #####:   27:      unpacked.append(cast.getInputs().begin(), cast.getInputs().end());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   28:      return;
        -:   29:    }
        -:   30:  }
        -:   31:  // 1 : 1 type conversion.
    #####:   32:  unpacked.push_back(v);
call    0 never executed
        -:   33:}
        -:   34:
        -:   35:class ConvertForOpTypes : public OpConversionPattern<ForOp> {
        -:   36:public:
        -:   37:  using OpConversionPattern::OpConversionPattern;
        -:   38:  LogicalResult
function _ZNK12_GLOBAL__N_117ConvertForOpTypes15matchAndRewriteEN4mlir3scf5ForOpENS2_12ForOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(ForOp op, OpAdaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    SmallVector<Type> newResultTypes;
call    0 never executed
    #####:   42:    SmallVector<unsigned> offsets;
branch  0 never executed
branch  1 never executed
    #####:   43:    offsets.push_back(0);
call    0 never executed
        -:   44:    // Do the type conversion and record the offsets.
    #####:   45:    for (Type type : op.getResultTypes()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   46:      if (failed(typeConverter->convertTypes(type, newResultTypes)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   47:        return rewriter.notifyMatchFailure(op, "could not convert result");
call    0 never executed
    #####:   48:      offsets.push_back(newResultTypes.size());
call    0 never executed
        -:   49:    }
        -:   50:
        -:   51:    // Create a empty new op and inline the regions from the old op.
        -:   52:    //
        -:   53:    // This is a little bit tricky. We have two concerns here:
        -:   54:    //
        -:   55:    // 1. We cannot update the op in place because the dialect conversion
        -:   56:    // framework does not track type changes for ops updated in place, so it
        -:   57:    // won't insert appropriate materializations on the changed result types.
        -:   58:    // PR47938 tracks this issue, but it seems hard to fix. Instead, we need
        -:   59:    // to clone the op.
        -:   60:    //
        -:   61:    // 2. We need to resue the original region instead of cloning it, otherwise
        -:   62:    // the dialect conversion framework thinks that we just inserted all the
        -:   63:    // cloned child ops. But what we want is to "take" the child regions and let
        -:   64:    // the dialect conversion framework continue recursively into ops inside
        -:   65:    // those regions (which are already in its worklist; inlining them into the
        -:   66:    // new op's regions doesn't remove the child ops from the worklist).
        -:   67:
        -:   68:    // convertRegionTypes already takes care of 1:N conversion.
    #####:   69:    if (failed(rewriter.convertRegionTypes(&op.getLoopBody(), *typeConverter)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   70:      return failure();
        -:   71:
        -:   72:    // Unpacked the iteration arguments.
    #####:   73:    SmallVector<Value> flatArgs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:    for (Value arg : adaptor.getInitArgs())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   75:      unpackUnrealizedConversionCast(arg, flatArgs);
call    0 never executed
        -:   76:
        -:   77:    // We can not do clone as the number of result types after conversion might
        -:   78:    // be different.
    #####:   79:    ForOp newOp = rewriter.create<ForOp>(op.getLoc(), adaptor.getLowerBound(),
call    0 never executed
    #####:   80:                                         adaptor.getUpperBound(),
call    0 never executed
    #####:   81:                                         adaptor.getStep(), flatArgs);
call    0 never executed
call    1 never executed
        -:   82:
        -:   83:    // Reserve whatever attributes in the original op.
    #####:   84:    newOp->setAttrs(op->getAttrs());
call    0 never executed
call    1 never executed
        -:   85:
        -:   86:    // We do not need the empty block created by rewriter.
    #####:   87:    rewriter.eraseBlock(newOp.getBody(0));
call    0 never executed
call    1 never executed
        -:   88:    // Inline the type converted region from the original operation.
    #####:   89:    rewriter.inlineRegionBefore(op.getLoopBody(), newOp.getLoopBody(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   90:                                newOp.getLoopBody().end());
call    0 never executed
call    1 never executed
        -:   91:
        -:   92:    // Pack the return value.
    #####:   93:    SmallVector<Value, 6> packedRets;
branch  0 never executed
branch  1 never executed
    #####:   94:    for (unsigned i = 1, e = offsets.size(); i < e; i++) {
branch  0 never executed
branch  1 never executed
    #####:   95:      unsigned start = offsets[i - 1], end = offsets[i];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   96:      unsigned len = end - start;
    #####:   97:      ValueRange mappedValue = newOp.getResults().slice(start, len);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   98:      if (len != 1) {
branch  0 never executed
branch  1 never executed
        -:   99:        // 1 : N type conversion.
    #####:  100:        Type origType = op.getResultTypes()[i - 1];
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  101:        Value mat = typeConverter->materializeSourceConversion(
    #####:  102:            rewriter, op.getLoc(), origType, mappedValue);
call    0 never executed
    #####:  103:        if (!mat)
branch  0 never executed
branch  1 never executed
    #####:  104:          return rewriter.notifyMatchFailure(
    #####:  105:              op, "Failed to materialize 1:N type conversion");
call    0 never executed
    #####:  106:        packedRets.push_back(mat);
call    0 never executed
        -:  107:      } else {
        -:  108:        // 1 : 1 type conversion.
    #####:  109:        packedRets.push_back(mappedValue.front());
call    0 never executed
call    1 never executed
        -:  110:      }
        -:  111:    }
        -:  112:
    #####:  113:    rewriter.replaceOp(op, packedRets);
call    0 never executed
call    1 never executed
    #####:  114:    return success();
branch  0 never executed
branch  1 never executed
        -:  115:  }
        -:  116:};
        -:  117:} // namespace
        -:  118:
        -:  119:namespace {
        -:  120:class ConvertIfOpTypes : public OpConversionPattern<IfOp> {
        -:  121:public:
        -:  122:  using OpConversionPattern::OpConversionPattern;
        -:  123:  LogicalResult
function _ZNK12_GLOBAL__N_116ConvertIfOpTypes15matchAndRewriteEN4mlir3scf4IfOpENS2_11IfOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  124:  matchAndRewrite(IfOp op, OpAdaptor adaptor,
        -:  125:                  ConversionPatternRewriter &rewriter) const override {
        -:  126:    // TODO: Generalize this to any type conversion, not just 1:1.
        -:  127:    //
        -:  128:    // We need to implement something more sophisticated here that tracks
        -:  129:    // which types convert to which other types and does the appropriate
        -:  130:    // materialization logic.
        -:  131:    // For example, it's possible that one result type converts to 0 types and
        -:  132:    // another to 2 types, so newResultTypes would at least be the right size
        -:  133:    // to not crash in the llvm::zip call below, but then we would set the the
        -:  134:    // wrong type on the SSA values! These edge cases are also why we cannot
        -:  135:    // safely use the TypeConverter::convertTypes helper here.
    #####:  136:    SmallVector<Type, 6> newResultTypes;
branch  0 never executed
branch  1 never executed
    #####:  137:    for (auto type : op.getResultTypes()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  138:      Type newType = typeConverter->convertType(type);
call    0 never executed
    #####:  139:      if (!newType)
branch  0 never executed
branch  1 never executed
    #####:  140:        return rewriter.notifyMatchFailure(op, "not a 1:1 type conversion");
call    0 never executed
    #####:  141:      newResultTypes.push_back(newType);
call    0 never executed
        -:  142:    }
        -:  143:
        -:  144:    // See comments in the ForOp pattern for why we clone without regions and
        -:  145:    // then inline.
    #####:  146:    IfOp newOp = cast<IfOp>(rewriter.cloneWithoutRegions(*op.getOperation()));
call    0 never executed
call    1 never executed
    #####:  147:    rewriter.inlineRegionBefore(op.getThenRegion(), newOp.getThenRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  148:                                newOp.getThenRegion().end());
call    0 never executed
call    1 never executed
    #####:  149:    rewriter.inlineRegionBefore(op.getElseRegion(), newOp.getElseRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  150:                                newOp.getElseRegion().end());
call    0 never executed
call    1 never executed
        -:  151:
        -:  152:    // Update the operands and types.
    #####:  153:    newOp->setOperands(adaptor.getOperands());
call    0 never executed
call    1 never executed
    #####:  154:    for (auto t : llvm::zip(newOp.getResults(), newResultTypes))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  155:      std::get<0>(t).setType(std::get<1>(t));
call    0 never executed
    #####:  156:    rewriter.replaceOp(op, newOp.getResults());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  157:    return success();
branch  0 never executed
branch  1 never executed
        -:  158:  }
        -:  159:};
        -:  160:} // namespace
        -:  161:
        -:  162:namespace {
        -:  163:// When the result types of a ForOp/IfOp get changed, the operand types of the
        -:  164:// corresponding yield op need to be changed. In order to trigger the
        -:  165:// appropriate type conversions / materializations, we need a dummy pattern.
        -:  166:class ConvertYieldOpTypes : public OpConversionPattern<scf::YieldOp> {
        -:  167:public:
        -:  168:  using OpConversionPattern::OpConversionPattern;
        -:  169:  LogicalResult
function _ZNK12_GLOBAL__N_119ConvertYieldOpTypes15matchAndRewriteEN4mlir3scf7YieldOpENS2_14YieldOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  170:  matchAndRewrite(scf::YieldOp op, OpAdaptor adaptor,
        -:  171:                  ConversionPatternRewriter &rewriter) const override {
    #####:  172:    SmallVector<Value> unpackedYield;
call    0 never executed
    #####:  173:    for (Value operand : adaptor.getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  174:      unpackUnrealizedConversionCast(operand, unpackedYield);
call    0 never executed
        -:  175:
    #####:  176:    rewriter.replaceOpWithNewOp<scf::YieldOp>(op, unpackedYield);
call    0 never executed
    #####:  177:    return success();
branch  0 never executed
branch  1 never executed
        -:  178:  }
        -:  179:};
        -:  180:} // namespace
        -:  181:
        -:  182:namespace {
        -:  183:class ConvertWhileOpTypes : public OpConversionPattern<WhileOp> {
        -:  184:public:
        -:  185:  using OpConversionPattern<WhileOp>::OpConversionPattern;
        -:  186:
        -:  187:  LogicalResult
function _ZNK12_GLOBAL__N_119ConvertWhileOpTypes15matchAndRewriteEN4mlir3scf7WhileOpENS2_14WhileOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  188:  matchAndRewrite(WhileOp op, OpAdaptor adaptor,
        -:  189:                  ConversionPatternRewriter &rewriter) const override {
    #####:  190:    auto *converter = getTypeConverter();
branch  0 never executed
branch  1 never executed
    #####:  191:    assert(converter);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  192:    SmallVector<Type> newResultTypes;
branch  0 never executed
branch  1 never executed
    #####:  193:    if (failed(converter->convertTypes(op.getResultTypes(), newResultTypes)))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  194:      return failure();
        -:  195:
    #####:  196:    auto newOp = rewriter.create<WhileOp>(op.getLoc(), newResultTypes,
    #####:  197:                                          adaptor.getOperands());
call    0 never executed
call    1 never executed
    #####:  198:    for (auto i : {0u, 1u}) {
branch  0 never executed
branch  1 never executed
    #####:  199:      auto &dstRegion = newOp.getRegion(i);
call    0 never executed
    #####:  200:      rewriter.inlineRegionBefore(op.getRegion(i), dstRegion, dstRegion.end());
call    0 never executed
call    1 never executed
    #####:  201:      if (failed(rewriter.convertRegionTypes(&dstRegion, *converter)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  202:        return rewriter.notifyMatchFailure(op, "could not convert body types");
call    0 never executed
        -:  203:    }
    #####:  204:    rewriter.replaceOp(op, newOp.getResults());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  205:    return success();
branch  0 never executed
branch  1 never executed
        -:  206:  }
        -:  207:};
        -:  208:} // namespace
        -:  209:
        -:  210:namespace {
        -:  211:class ConvertConditionOpTypes : public OpConversionPattern<ConditionOp> {
        -:  212:public:
        -:  213:  using OpConversionPattern<ConditionOp>::OpConversionPattern;
        -:  214:  LogicalResult
function _ZNK12_GLOBAL__N_123ConvertConditionOpTypes15matchAndRewriteEN4mlir3scf11ConditionOpENS2_18ConditionOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  215:  matchAndRewrite(ConditionOp op, OpAdaptor adaptor,
        -:  216:                  ConversionPatternRewriter &rewriter) const override {
    #####:  217:    rewriter.updateRootInPlace(
call    0 never executed
    #####:  218:        op, [&]() { op->setOperands(adaptor.getOperands()); });
call    0 never executed
call    1 never executed
    #####:  219:    return success();
        -:  220:  }
        -:  221:};
        -:  222:} // namespace
        -:  223:
function _ZN4mlir3scf47populateSCFStructuralTypeConversionsAndLegalityERNS_13TypeConverterERNS_17RewritePatternSetERNS_16ConversionTargetE called 1403 returned 100% blocks executed 100%
     1403:  224:void mlir::scf::populateSCFStructuralTypeConversionsAndLegality(
        -:  225:    TypeConverter &typeConverter, RewritePatternSet &patterns,
        -:  226:    ConversionTarget &target) {
     1403:  227:  patterns.add<ConvertForOpTypes, ConvertIfOpTypes, ConvertYieldOpTypes,
        -:  228:               ConvertWhileOpTypes, ConvertConditionOpTypes>(
     1403:  229:      typeConverter, patterns.getContext());
call    0 returned 100%
function _ZZN4mlir3scf47populateSCFStructuralTypeConversionsAndLegalityERNS_13TypeConverterERNS_17RewritePatternSetERNS_16ConversionTargetEENKUlPNS_9OperationEE_clES8_.isra.0 called 17338 returned 100% blocks executed 100%
    20144:  230:  target.addDynamicallyLegalOp<ForOp, IfOp>([&](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    34676:  231:    return typeConverter.isLegal(op->getResultTypes());
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
call    2 returned 100%
        -:  232:  });
function _ZZN4mlir3scf47populateSCFStructuralTypeConversionsAndLegalityERNS_13TypeConverterERNS_17RewritePatternSetERNS_16ConversionTargetEENKUlNS0_7YieldOpEE0_clES7_.isra.0 called 127444 returned 100% blocks executed 100%
     1403:  233:  target.addDynamicallyLegalOp<scf::YieldOp>([&](scf::YieldOp op) {
call    0 returned 100%
        -:  234:    // We only have conversions for a subset of ops that use scf.yield
        -:  235:    // terminators.
   254888:  236:    if (!isa<ForOp, IfOp, WhileOp>(op->getParentOp()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 36% (fallthrough)
branch  4 taken 64%
        -:  237:      return true;
    46426:  238:    return typeConverter.isLegal(op.getOperandTypes());
call    0 returned 100%
call    1 returned 100%
        -:  239:  });
     2806:  240:  target.addDynamicallyLegalOp<WhileOp, ConditionOp>(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    32572:  241:      [&](Operation *op) { return typeConverter.isLegal(op); });
call    0 returned 100%
     1403:  242:}
