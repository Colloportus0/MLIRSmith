        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/IR/TestClone.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestClone.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestClone.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestClone.cpp - Pass to test operation cloning  --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "mlir/IR/BuiltinOps.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15:namespace {
        -:   16:
        -:   17:/// This is a test pass which clones the body of a function. Specifically
        -:   18:/// this pass replaces f(x) to instead return f(f(x)) in which the cloned body
        -:   19:/// takes the result of the first operation return as an input.
  116691*:   20:struct ClonePass
call    0 never executed
call    1 returned 100%
        -:   21:    : public PassWrapper<ClonePass, InterfacePass<FunctionOpInterface>> {
function _ZN12_GLOBAL__N_19ClonePass13resolveTypeIDEv called 116691 returned 100% blocks executed 100%
   116691:   22:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ClonePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   23:
function _ZNK12_GLOBAL__N_19ClonePass11getArgumentEv called 116170 returned 100% blocks executed 100%
   116170:   24:  StringRef getArgument() const final { return "test-clone"; }
function _ZNK12_GLOBAL__N_19ClonePass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   25:  StringRef getDescription() const final { return "Test clone of op"; }
function _ZN12_GLOBAL__N_19ClonePass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   26:  void runOnOperation() override {
    #####:   27:    FunctionOpInterface op = getOperation();
call    0 never executed
        -:   28:
        -:   29:    // Limit testing to ops with only one region.
    #####:   30:    if (op->getNumRegions() != 1)
branch  0 never executed
branch  1 never executed
    #####:   31:      return;
        -:   32:
    #####:   33:    Region &region = op->getRegion(0);
call    0 never executed
    #####:   34:    if (!region.hasOneBlock())
branch  0 never executed
branch  1 never executed
        -:   35:      return;
        -:   36:
    #####:   37:    Block &regionEntry = region.front();
call    0 never executed
    #####:   38:    Operation *terminator = regionEntry.getTerminator();
call    0 never executed
        -:   39:
        -:   40:    // Only handle functions whose returns match the inputs.
    #####:   41:    if (terminator->getNumOperands() != regionEntry.getNumArguments())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   42:      return;
        -:   43:
    #####:   44:    BlockAndValueMapping map;
call    0 never executed
    #####:   45:    for (auto tup :
call    0 never executed
    #####:   46:         llvm::zip(terminator->getOperands(), regionEntry.getArguments())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   47:      if (std::get<0>(tup).getType() != std::get<1>(tup).getType())
branch  0 never executed
branch  1 never executed
    #####:   48:        return;
call    0 never executed
    #####:   49:      map.map(std::get<1>(tup), std::get<0>(tup));
call    0 never executed
        -:   50:    }
        -:   51:
    #####:   52:    OpBuilder builder(op->getContext());
call    0 never executed
    #####:   53:    builder.setInsertionPointToEnd(&regionEntry);
    #####:   54:    SmallVector<Operation *> toClone;
call    0 never executed
    #####:   55:    for (Operation &inst : regionEntry)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   56:      toClone.push_back(&inst);
call    0 never executed
    #####:   57:    for (Operation *inst : toClone)
branch  0 never executed
branch  1 never executed
    #####:   58:      builder.clone(*inst, map);
call    0 never executed
    #####:   59:    terminator->erase();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   60:  }
        -:   61:};
        -:   62:} // namespace
        -:   63:
        -:   64:namespace mlir {
function _ZN4mlir23registerCloneTestPassesEv called 116163 returned 100% blocks executed 100%
   116163:   65:void registerCloneTestPasses() { PassRegistration<ClonePass>(); }
call    0 returned 100%
        -:   66:} // namespace mlir
