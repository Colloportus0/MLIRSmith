        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/LLVMIR/IR/LLVMTypeSyntax.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMDialect.dir/IR/LLVMTypeSyntax.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMDialect.dir/IR/LLVMTypeSyntax.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- LLVMTypeSyntax.cpp - Parsing/printing for MLIR LLVM Dialect types --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/DialectImplementation.h"
        -:   12:#include "llvm/ADT/ScopeExit.h"
        -:   13:#include "llvm/ADT/SetVector.h"
        -:   14:#include "llvm/ADT/TypeSwitch.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::LLVM;
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// Printing.
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
        -:   23:/// If the given type is compatible with the LLVM dialect, prints it using
        -:   24:/// internal functions to avoid getting a verbose `!llvm` prefix. Otherwise
        -:   25:/// prints it as usual.
function _ZL13dispatchPrintRN4mlir10AsmPrinterENS_4TypeE called 1698471 returned 100% blocks executed 100%
  1698471:   26:static void dispatchPrint(AsmPrinter &printer, Type type) {
  3396942:   27:  if (isCompatibleType(type) && !type.isa<IntegerType, FloatType, VectorType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 35% (fallthrough)
branch  4 taken 65%
   600473:   28:    return mlir::LLVM::detail::printType(type, printer);
call    0 returned 100%
  1097998:   29:  printer.printType(type);
call    0 returned 100%
        -:   30:}
        -:   31:
        -:   32:/// Returns the keyword to use for the given type.
function _ZL14getTypeKeywordN4mlir4TypeE called 1241755 returned 100% blocks executed 100%
  1241755:   33:static StringRef getTypeKeyword(Type type) {
  1241755:   34:  return TypeSwitch<Type, StringRef>(type)
call    0 returned 100%
  1241755:   35:      .Case<LLVMVoidType>([&](Type) { return "void"; })
call    0 returned 100%
  1241755:   36:      .Case<LLVMPPCFP128Type>([&](Type) { return "ppc_fp128"; })
call    0 returned 100%
  1241755:   37:      .Case<LLVMX86MMXType>([&](Type) { return "x86_mmx"; })
call    0 returned 100%
  1241755:   38:      .Case<LLVMTokenType>([&](Type) { return "token"; })
call    0 returned 100%
  1241755:   39:      .Case<LLVMLabelType>([&](Type) { return "label"; })
call    0 returned 100%
  1241755:   40:      .Case<LLVMMetadataType>([&](Type) { return "metadata"; })
call    0 returned 100%
  1241755:   41:      .Case<LLVMFunctionType>([&](Type) { return "func"; })
call    0 returned 100%
  1241755:   42:      .Case<LLVMPointerType>([&](Type) { return "ptr"; })
call    0 returned 100%
        -:   43:      .Case<LLVMFixedVectorType, LLVMScalableVectorType>(
  1241755:   44:          [&](Type) { return "vec"; })
call    0 returned 100%
  1241755:   45:      .Case<LLVMArrayType>([&](Type) { return "array"; })
call    0 returned 100%
  1241755:   46:      .Case<LLVMStructType>([&](Type) { return "struct"; })
call    0 returned 100%
function _ZZL14getTypeKeywordN4mlir4TypeEENKUlS0_E10_clES0_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   47:      .Default([](Type) -> StringRef {
    #####:   48:        llvm_unreachable("unexpected 'llvm' type kind");
  1241755:   49:      });
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   50:}
        -:   51:
        -:   52:/// Prints a structure type. Keeps track of known struct names to handle self-
        -:   53:/// or mutually-referring structs without falling into infinite recursion.
function _ZL15printStructTypeRN4mlir10AsmPrinterENS_4LLVM14LLVMStructTypeE called 114734 returned 100% blocks executed 45%
   114734:   54:static void printStructType(AsmPrinter &printer, LLVMStructType type) {
        -:   55:  // This keeps track of the names of identified structure types that are
        -:   56:  // currently being printed. Since such types can refer themselves, this
        -:   57:  // tracking is necessary to stop the recursion: the current function may be
        -:   58:  // called recursively from AsmPrinter::printType after the appropriate
        -:   59:  // dispatch. We maintain the invariant of this storage being modified
        -:   60:  // exclusively in this function, and at most one name being added per call.
        -:   61:  // TODO: consider having such functionality inside AsmPrinter.
   115622:   62:  thread_local SetVector<StringRef> knownStructNames;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
   114734:   63:  unsigned stackSize = knownStructNames.size();
call    0 returned 100%
   114734:   64:  (void)stackSize;
function _ZZL15printStructTypeRN4mlir10AsmPrinterENS_4LLVM14LLVMStructTypeEENKUlvE_clEv.isra.0 called 114734 returned 100% blocks executed 75%
   114734:   65:  auto guard = llvm::make_scope_exit([&]() {
  114734*:   66:    assert(knownStructNames.size() == stackSize &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   67:           "malformed identified stack when printing recursive structs");
   229468:   68:  });
call    0 returned 100%
        -:   69:
   114734:   70:  printer << "<";
call    0 returned 100%
   114734:   71:  if (type.isIdentified()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   72:    printer << '"' << type.getName() << '"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   73:    // If we are printing a reference to one of the enclosing structs, just
        -:   74:    // print the name and stop to avoid infinitely long output.
    #####:   75:    if (knownStructNames.count(type.getName())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   76:      printer << '>';
call    0 never executed
    #####:   77:      return;
        -:   78:    }
    #####:   79:    printer << ", ";
call    0 never executed
        -:   80:  }
        -:   81:
  114734*:   82:  if (type.isIdentified() && type.isOpaque()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   83:    printer << "opaque>";
call    0 never executed
    #####:   84:    return;
call    0 never executed
        -:   85:  }
        -:   86:
   114734:   87:  if (type.isPacked())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   88:    printer << "packed ";
call    0 never executed
        -:   89:
        -:   90:  // Put the current type on stack to avoid infinite recursion.
   114734:   91:  printer << '(';
call    0 returned 100%
   114734:   92:  if (type.isIdentified())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   93:    knownStructNames.insert(type.getName());
call    0 never executed
call    1 never executed
   114734:   94:  llvm::interleaveComma(type.getBody(), printer.getStream(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
   571428:   95:                        [&](Type subtype) { dispatchPrint(printer, subtype); });
call    0 returned 100%
call    1 returned 100%
   114734:   96:  if (type.isIdentified())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   97:    knownStructNames.pop_back();
call    0 never executed
   114734:   98:  printer << ')';
call    0 returned 100%
   114734:   99:  printer << '>';
call    0 returned 100%
call    1 returned 100%
        -:  100:}
        -:  101:
        -:  102:/// Prints the given LLVM dialect type recursively. This leverages closedness of
        -:  103:/// the LLVM dialect type system to avoid printing the dialect prefix
        -:  104:/// repeatedly. For recursive structures, only prints the name of the structure
        -:  105:/// when printing a self-reference. Note that this does not apply to sibling
        -:  106:/// references. For example,
        -:  107:///   struct<"a", (ptr<struct<"a">>)>
        -:  108:///   struct<"c", (ptr<struct<"b", (ptr<struct<"c">>)>>,
        -:  109:///                ptr<struct<"b", (ptr<struct<"c">>)>>)>
        -:  110:/// note that "b" is printed twice.
function _ZN4mlir4LLVM6detail9printTypeENS_4TypeERNS_10AsmPrinterE called 1241755 returned 100% blocks executed 80%
  1241755:  111:void mlir::LLVM::detail::printType(Type type, AsmPrinter &printer) {
  1241755:  112:  if (!type) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  113:    printer << "<<NULL-TYPE>>";
call    0 never executed
    #####:  114:    return;
call    0 never executed
        -:  115:  }
        -:  116:
  1241755:  117:  printer << getTypeKeyword(type);
call    0 returned 100%
call    1 returned 100%
        -:  118:
  1241755:  119:  llvm::TypeSwitch<Type>(type)
call    0 returned 100%
        -:  120:      .Case<LLVMPointerType, LLVMArrayType, LLVMFixedVectorType,
        -:  121:            LLVMScalableVectorType, LLVMFunctionType>(
 2366924*:  122:          [&](auto type) { type.print(printer); })
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
   114734:  123:      .Case([&](LLVMStructType structType) {
   114734:  124:        printStructType(printer, structType);
call    0 returned 100%
  1241755:  125:      });
call    0 returned 100%
        -:  126:}
        -:  127:
        -:  128://===----------------------------------------------------------------------===//
        -:  129:// Parsing.
        -:  130://===----------------------------------------------------------------------===//
        -:  131:
        -:  132:static ParseResult dispatchParse(AsmParser &parser, Type &type);
        -:  133:
        -:  134:/// Parses an LLVM dialect vector type.
        -:  135:///   llvm-type ::= `vec<` `? x`? integer `x` llvm-type `>`
        -:  136:/// Supports both fixed and scalable vectors.
function _ZL15parseVectorTypeRN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  137:static Type parseVectorType(AsmParser &parser) {
    #####:  138:  SmallVector<int64_t, 2> dims;
call    0 never executed
    #####:  139:  SMLoc dimPos, typePos;
    #####:  140:  Type elementType;
    #####:  141:  SMLoc loc = parser.getCurrentLocation();
call    0 never executed
    #####:  142:  if (parser.parseLess() || parser.getCurrentLocation(&dimPos) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  143:      parser.parseDimensionList(dims, /*allowDynamic=*/true) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:      parser.getCurrentLocation(&typePos) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  145:      dispatchParse(parser, elementType) || parser.parseGreater())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  146:    return Type();
        -:  147:
        -:  148:  // We parsed a generic dimension list, but vectors only support two forms:
        -:  149:  //  - single non-dynamic entry in the list (fixed vector);
        -:  150:  //  - two elements, the first dynamic (indicated by ShapedType::kDynamicSize)
        -:  151:  //  and the second
        -:  152:  //    non-dynamic (scalable vector).
    #####:  153:  if (dims.empty() || dims.size() > 2 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  154:      ((dims.size() == 2) ^ (ShapedType::isDynamic(dims[0]))) ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  155:      (dims.size() == 2 && ShapedType::isDynamic(dims[1]))) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  156:    parser.emitError(dimPos)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  157:        << "expected '? x <integer> x <type>' or '<integer> x <type>'";
call    0 never executed
    #####:  158:    return Type();
        -:  159:  }
        -:  160:
    #####:  161:  bool isScalable = dims.size() == 2;
branch  0 never executed
branch  1 never executed
    #####:  162:  if (isScalable)
branch  0 never executed
branch  1 never executed
    #####:  163:    return parser.getChecked<LLVMScalableVectorType>(loc, elementType, dims[1]);
call    0 never executed
    #####:  164:  if (elementType.isSignlessIntOrFloat()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:    parser.emitError(typePos)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  166:        << "cannot use !llvm.vec for built-in primitives, use 'vector' instead";
call    0 never executed
    #####:  167:    return Type();
        -:  168:  }
    #####:  169:  return parser.getChecked<LLVMFixedVectorType>(loc, elementType, dims[0]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  170:}
        -:  171:
        -:  172:/// Attempts to set the body of an identified structure type. Reports a parsing
        -:  173:/// error at `subtypesLoc` in case of failure.
function _ZL16trySetStructBodyN4mlir4LLVM14LLVMStructTypeEN4llvm8ArrayRefINS_4TypeEEEbRNS_9AsmParserENS2_5SMLocE called 0 returned 0% blocks executed 0%
    #####:  174:static LLVMStructType trySetStructBody(LLVMStructType type,
        -:  175:                                       ArrayRef<Type> subtypes, bool isPacked,
        -:  176:                                       AsmParser &parser, SMLoc subtypesLoc) {
    #####:  177:  for (Type t : subtypes) {
branch  0 never executed
branch  1 never executed
    #####:  178:    if (!LLVMStructType::isValidElementType(t)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  179:      parser.emitError(subtypesLoc)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  180:          << "invalid LLVM structure element type: " << t;
call    0 never executed
call    1 never executed
    #####:  181:      return LLVMStructType();
        -:  182:    }
        -:  183:  }
        -:  184:
    #####:  185:  if (succeeded(type.setBody(subtypes, isPacked)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:    return type;
        -:  187:
    #####:  188:  parser.emitError(subtypesLoc)
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  189:      << "identified type already used with a different body";
call    0 never executed
    #####:  190:  return LLVMStructType();
        -:  191:}
        -:  192:
        -:  193:/// Parses an LLVM dialect structure type.
        -:  194:///   llvm-type ::= `struct<` (string-literal `,`)? `packed`?
        -:  195:///                 `(` llvm-type-list `)` `>`
        -:  196:///               | `struct<` string-literal `>`
        -:  197:///               | `struct<` string-literal `, opaque>`
function _ZL15parseStructTypeRN4mlir9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  198:static LLVMStructType parseStructType(AsmParser &parser) {
        -:  199:  // This keeps track of the names of identified structure types that are
        -:  200:  // currently being parsed. Since such types can refer themselves, this
        -:  201:  // tracking is necessary to stop the recursion: the current function may be
        -:  202:  // called recursively from AsmParser::parseType after the appropriate
        -:  203:  // dispatch. We maintain the invariant of this storage being modified
        -:  204:  // exclusively in this function, and at most one name being added per call.
        -:  205:  // TODO: consider having such functionality inside AsmParser.
    #####:  206:  thread_local SetVector<StringRef> knownStructNames;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  207:  unsigned stackSize = knownStructNames.size();
call    0 never executed
    #####:  208:  (void)stackSize;
function _ZZL15parseStructTypeRN4mlir9AsmParserEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  209:  auto guard = llvm::make_scope_exit([&]() {
    #####:  210:    assert(knownStructNames.size() == stackSize &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  211:           "malformed identified stack when parsing recursive structs");
    #####:  212:  });
call    0 never executed
        -:  213:
    #####:  214:  Location loc = parser.getEncodedSourceLoc(parser.getCurrentLocation());
call    0 never executed
call    1 never executed
        -:  215:
    #####:  216:  if (failed(parser.parseLess()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  217:    return LLVMStructType();
        -:  218:
        -:  219:  // If we are parsing a self-reference to a recursive struct, i.e. the parsing
        -:  220:  // stack already contains a struct with the same identifier, bail out after
        -:  221:  // the name.
    #####:  222:  std::string name;
call    0 never executed
call    1 never executed
    #####:  223:  bool isIdentified = succeeded(parser.parseOptionalString(&name));
call    0 never executed
    #####:  224:  if (isIdentified) {
branch  0 never executed
branch  1 never executed
    #####:  225:    if (knownStructNames.count(name)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  226:      if (failed(parser.parseGreater()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  227:        return LLVMStructType();
    #####:  228:      return LLVMStructType::getIdentifiedChecked(
call    0 never executed
    #####:  229:          [loc] { return emitError(loc); }, loc.getContext(), name);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  230:    }
    #####:  231:    if (failed(parser.parseComma()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  232:      return LLVMStructType();
        -:  233:  }
        -:  234:
        -:  235:  // Handle intentionally opaque structs.
    #####:  236:  SMLoc kwLoc = parser.getCurrentLocation();
call    0 never executed
    #####:  237:  if (succeeded(parser.parseOptionalKeyword("opaque"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  238:    if (!isIdentified)
branch  0 never executed
branch  1 never executed
    #####:  239:      return parser.emitError(kwLoc, "only identified structs can be opaque"),
    #####:  240:             LLVMStructType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  241:    if (failed(parser.parseGreater()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  242:      return LLVMStructType();
    #####:  243:    auto type = LLVMStructType::getOpaqueChecked(
call    0 never executed
    #####:  244:        [loc] { return emitError(loc); }, loc.getContext(), name);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  245:    if (!type.isOpaque()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  246:      parser.emitError(kwLoc, "redeclaring defined struct as opaque");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  247:      return LLVMStructType();
        -:  248:    }
    #####:  249:    return type;
        -:  250:  }
        -:  251:
        -:  252:  // Check for packedness.
    #####:  253:  bool isPacked = succeeded(parser.parseOptionalKeyword("packed"));
call    0 never executed
    #####:  254:  if (failed(parser.parseLParen()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  255:    return LLVMStructType();
        -:  256:
        -:  257:  // Fast pass for structs with zero subtypes.
    #####:  258:  if (succeeded(parser.parseOptionalRParen())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  259:    if (failed(parser.parseGreater()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  260:      return LLVMStructType();
    #####:  261:    if (!isIdentified)
branch  0 never executed
branch  1 never executed
    #####:  262:      return LLVMStructType::getLiteralChecked([loc] { return emitError(loc); },
call    0 never executed
    #####:  263:                                               loc.getContext(), {}, isPacked);
call    0 never executed
call    1 never executed
    #####:  264:    auto type = LLVMStructType::getIdentifiedChecked(
call    0 never executed
    #####:  265:        [loc] { return emitError(loc); }, loc.getContext(), name);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  266:    return trySetStructBody(type, {}, isPacked, parser, kwLoc);
call    0 never executed
        -:  267:  }
        -:  268:
        -:  269:  // Parse subtypes. For identified structs, put the identifier of the struct on
        -:  270:  // the stack to support self-references in the recursive calls.
    #####:  271:  SmallVector<Type, 4> subtypes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  272:  SMLoc subtypesLoc = parser.getCurrentLocation();
call    0 never executed
    #####:  273:  do {
    #####:  274:    if (isIdentified)
branch  0 never executed
branch  1 never executed
    #####:  275:      knownStructNames.insert(name);
call    0 never executed
    #####:  276:    Type type;
    #####:  277:    if (dispatchParse(parser, type))
branch  0 never executed
branch  1 never executed
    #####:  278:      return LLVMStructType();
    #####:  279:    subtypes.push_back(type);
call    0 never executed
    #####:  280:    if (isIdentified)
branch  0 never executed
branch  1 never executed
    #####:  281:      knownStructNames.pop_back();
call    0 never executed
    #####:  282:  } while (succeeded(parser.parseOptionalComma()));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  283:
    #####:  284:  if (parser.parseRParen() || parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  285:    return LLVMStructType();
        -:  286:
        -:  287:  // Construct the struct with body.
    #####:  288:  if (!isIdentified)
branch  0 never executed
branch  1 never executed
    #####:  289:    return LLVMStructType::getLiteralChecked(
    #####:  290:        [loc] { return emitError(loc); }, loc.getContext(), subtypes, isPacked);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  291:  auto type = LLVMStructType::getIdentifiedChecked(
call    0 never executed
    #####:  292:      [loc] { return emitError(loc); }, loc.getContext(), name);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  293:  return trySetStructBody(type, subtypes, isPacked, parser, subtypesLoc);
call    0 never executed
        -:  294:}
        -:  295:
        -:  296:/// Parses a type appearing inside another LLVM dialect-compatible type. This
        -:  297:/// will try to parse any type in full form (including types with the `!llvm`
        -:  298:/// prefix), and on failure fall back to parsing the short-hand version of the
        -:  299:/// LLVM dialect types without the `!llvm` prefix.
function _ZL13dispatchParseRN4mlir9AsmParserEb called 0 returned 0% blocks executed 0%
    #####:  300:static Type dispatchParse(AsmParser &parser, bool allowAny = true) {
    #####:  301:  SMLoc keyLoc = parser.getCurrentLocation();
call    0 never executed
        -:  302:
        -:  303:  // Try parsing any MLIR type.
    #####:  304:  Type type;
    #####:  305:  OptionalParseResult result = parser.parseOptionalType(type);
call    0 never executed
    #####:  306:  if (result.has_value()) {
branch  0 never executed
branch  1 never executed
    #####:  307:    if (failed(result.value()))
branch  0 never executed
branch  1 never executed
    #####:  308:      return nullptr;
    #####:  309:    if (!allowAny) {
branch  0 never executed
branch  1 never executed
    #####:  310:      parser.emitError(keyLoc) << "unexpected type, expected keyword";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  311:      return nullptr;
        -:  312:    }
    #####:  313:    return type;
        -:  314:  }
        -:  315:
        -:  316:  // If no type found, fallback to the shorthand form.
    #####:  317:  StringRef key;
    #####:  318:  if (failed(parser.parseKeyword(&key)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  319:    return Type();
        -:  320:
    #####:  321:  MLIRContext *ctx = parser.getContext();
call    0 never executed
    #####:  322:  return StringSwitch<function_ref<Type()>>(key)
call    0 never executed
    #####:  323:      .Case("void", [&] { return LLVMVoidType::get(ctx); })
call    0 never executed
call    1 never executed
    #####:  324:      .Case("ppc_fp128", [&] { return LLVMPPCFP128Type::get(ctx); })
call    0 never executed
call    1 never executed
    #####:  325:      .Case("x86_mmx", [&] { return LLVMX86MMXType::get(ctx); })
call    0 never executed
call    1 never executed
    #####:  326:      .Case("token", [&] { return LLVMTokenType::get(ctx); })
call    0 never executed
call    1 never executed
    #####:  327:      .Case("label", [&] { return LLVMLabelType::get(ctx); })
call    0 never executed
call    1 never executed
    #####:  328:      .Case("metadata", [&] { return LLVMMetadataType::get(ctx); })
call    0 never executed
call    1 never executed
    #####:  329:      .Case("func", [&] { return LLVMFunctionType::parse(parser); })
call    0 never executed
call    1 never executed
    #####:  330:      .Case("ptr", [&] { return LLVMPointerType::parse(parser); })
call    0 never executed
call    1 never executed
    #####:  331:      .Case("vec", [&] { return parseVectorType(parser); })
call    0 never executed
call    1 never executed
    #####:  332:      .Case("array", [&] { return LLVMArrayType::parse(parser); })
call    0 never executed
call    1 never executed
    #####:  333:      .Case("struct", [&] { return parseStructType(parser); })
call    0 never executed
call    1 never executed
function _ZZL13dispatchParseRN4mlir9AsmParserEbENKUlvE10_clEv called 0 returned 0% blocks executed 0%
    #####:  334:      .Default([&] {
    #####:  335:        parser.emitError(keyLoc) << "unknown LLVM type: " << key;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  336:        return Type();
    #####:  337:      })();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  338:}
        -:  339:
        -:  340:/// Helper to use in parse lists.
    #####:  341:static ParseResult dispatchParse(AsmParser &parser, Type &type) {
    #####:  342:  type = dispatchParse(parser);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  343:  return success(type != nullptr);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  344:}
        -:  345:
        -:  346:/// Parses one of the LLVM dialect types.
function _ZN4mlir4LLVM6detail9parseTypeERNS_16DialectAsmParserE called 0 returned 0% blocks executed 0%
    #####:  347:Type mlir::LLVM::detail::parseType(DialectAsmParser &parser) {
    #####:  348:  SMLoc loc = parser.getCurrentLocation();
call    0 never executed
    #####:  349:  Type type = dispatchParse(parser, /*allowAny=*/false);
call    0 never executed
    #####:  350:  if (!type)
branch  0 never executed
branch  1 never executed
    #####:  351:    return type;
    #####:  352:  if (!isCompatibleOuterType(type)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  353:    parser.emitError(loc) << "unexpected type, expected keyword";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  354:    return nullptr;
        -:  355:  }
    #####:  356:  return type;
        -:  357:}
        -:  358:
function _ZN4mlir4LLVM19parsePrettyLLVMTypeERNS_9AsmParserERNS_9FailureOrINS_4TypeEEE called 0 returned 0% blocks executed 0%
    #####:  359:ParseResult LLVM::parsePrettyLLVMType(AsmParser &p, FailureOr<Type> &type) {
    #####:  360:  type.emplace();
call    0 never executed
    #####:  361:  return dispatchParse(p, *type);
call    0 never executed
        -:  362:}
        -:  363:
function _ZN4mlir4LLVM19printPrettyLLVMTypeERNS_10AsmPrinterENS_4TypeE called 1127043 returned 100% blocks executed 100%
  1127043:  364:void LLVM::printPrettyLLVMType(AsmPrinter &p, Type type) {
  1127043:  365:  return dispatchPrint(p, type);
call    0 returned 100%
        -:  366:}
