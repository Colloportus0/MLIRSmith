        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Utils/IndexingUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Interchange.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Interchange.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- IndexingUtils.h - Helpers related to index computations --*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This header file defines utilities and common canonicalization patterns for
        -:   10:// reshape operations.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_DIALECT_UTILS_INDEXINGUTILS_H
        -:   15:#define MLIR_DIALECT_UTILS_INDEXINGUTILS_H
        -:   16:
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/Support/LLVM.h"
        -:   19:#include "llvm/ADT/ArrayRef.h"
        -:   20:#include "llvm/ADT/SmallVector.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:class ArrayAttr;
        -:   24:
        -:   25:/// Computes and returns the linearized index of 'offsets' w.r.t. 'basis'.
        -:   26:int64_t linearize(ArrayRef<int64_t> offsets, ArrayRef<int64_t> basis);
        -:   27:
        -:   28:/// Given the strides together with a linear index in the dimension
        -:   29:/// space, returns the vector-space offsets in each dimension for a
        -:   30:/// de-linearized index.
        -:   31:SmallVector<int64_t, 4> delinearize(ArrayRef<int64_t> strides,
        -:   32:                                    int64_t linearIndex);
        -:   33:
        -:   34:/// Apply the permutation defined by `permutation` to `inVec`.
        -:   35:/// Element `i` in `inVec` is mapped to location `j = permutation[i]`.
        -:   36:/// E.g.: for an input vector `inVec = ['a', 'b', 'c']` and a permutation vector
        -:   37:/// `permutation = [2, 0, 1]`, this function leaves `inVec = ['c', 'a', 'b']`.
        -:   38:template <typename T, unsigned N>
function _ZN4mlir24applyPermutationToVectorINS_9AttributeELj6EEEvRN4llvm11SmallVectorIT_XT0_EEENS2_8ArrayRefIlEE called 0 returned 0% blocks executed 0%
    #####:   39:void applyPermutationToVector(SmallVector<T, N> &inVec,
        -:   40:                              ArrayRef<int64_t> permutation) {
    #####:   41:  SmallVector<T, N> auxVec(inVec.size());
call    0 never executed
    #####:   42:  for (const auto &en : enumerate(permutation))
branch  0 never executed
branch  1 never executed
    #####:   43:    auxVec[en.index()] = inVec[en.value()];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   44:  inVec = auxVec;
branch  0 never executed
branch  1 never executed
    #####:   45:}
        -:   46:
        -:   47:/// Helper that returns a subset of `arrayAttr` as a vector of int64_t.
        -:   48:SmallVector<int64_t, 4> getI64SubArray(ArrayAttr arrayAttr,
        -:   49:                                       unsigned dropFront = 0,
        -:   50:                                       unsigned dropBack = 0);
        -:   51:
        -:   52:/// Computes and returns linearized affine expression w.r.t. `basis`.
        -:   53:mlir::AffineExpr getLinearAffineExpr(ArrayRef<int64_t> basis, mlir::Builder &b);
        -:   54:
        -:   55:/// Given the strides in the dimension space, returns the affine expressions for
        -:   56:/// vector-space offsets in each dimension for a de-linearized index.
        -:   57:SmallVector<mlir::AffineExpr, 4>
        -:   58:getDelinearizedAffineExpr(ArrayRef<int64_t> strides, mlir::Builder &b);
        -:   59:
        -:   60:} // namespace mlir
        -:   61:
        -:   62:#endif // MLIR_DIALECT_UTILS_INDEXINGUTILS_H
