        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Linalg/Transforms/Interchange.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Interchange.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Interchange.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- Interchange.cpp - Linalg interchange transformation ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the linalg interchange transformation.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/Linalg/Analysis/DependenceAnalysis.h"
        -:   15:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   17:#include "mlir/Dialect/Linalg/Utils/Utils.h"
        -:   18:#include "mlir/Dialect/Utils/IndexingUtils.h"
        -:   19:#include "mlir/Dialect/Utils/StructuredOpsUtils.h"
        -:   20:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   21:#include "mlir/IR/AffineExpr.h"
        -:   22:#include "mlir/IR/Matchers.h"
        -:   23:#include "mlir/IR/PatternMatch.h"
        -:   24:#include "mlir/Pass/Pass.h"
        -:   25:#include "mlir/Support/LLVM.h"
        -:   26:#include "llvm/ADT/ScopeExit.h"
        -:   27:#include "llvm/Support/Debug.h"
        -:   28:#include "llvm/Support/raw_ostream.h"
        -:   29:#include <type_traits>
        -:   30:
        -:   31:#define DEBUG_TYPE "linalg-interchange"
        -:   32:
        -:   33:using namespace mlir;
        -:   34:using namespace mlir::linalg;
        -:   35:
        -:   36:static LogicalResult
function _ZL32interchangeGenericOpPreconditionN4mlir6linalg9GenericOpEN4llvm8ArrayRefIjEE called 0 returned 0% blocks executed 0%
    #####:   37:interchangeGenericOpPrecondition(GenericOp genericOp,
        -:   38:                                 ArrayRef<unsigned> interchangeVector) {
        -:   39:  // Interchange vector must be non-empty and match the number of loops.
    #####:   40:  if (interchangeVector.empty() ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   41:      genericOp.getNumLoops() != interchangeVector.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:    return failure();
        -:   43:  // Permutation map must be invertible.
    #####:   44:  if (!inversePermutation(AffineMap::getPermutationMap(interchangeVector,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:                                                       genericOp.getContext())))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:    return failure();
    #####:   47:  return success();
        -:   48:}
        -:   49:
        -:   50:FailureOr<GenericOp>
function _ZN4mlir6linalg20interchangeGenericOpERNS_12RewriterBaseENS0_9GenericOpEN4llvm8ArrayRefIjEE called 0 returned 0% blocks executed 0%
    #####:   51:mlir::linalg::interchangeGenericOp(RewriterBase &rewriter, GenericOp genericOp,
        -:   52:                                   ArrayRef<unsigned> interchangeVector) {
    #####:   53:  if (failed(interchangeGenericOpPrecondition(genericOp, interchangeVector)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    return rewriter.notifyMatchFailure(genericOp, "preconditions not met");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   55:
        -:   56:  // 1. Compute the inverse permutation map, it must be non-null since the
        -:   57:  // preconditions are satisfied.
    #####:   58:  MLIRContext *context = genericOp.getContext();
call    0 never executed
    #####:   59:  AffineMap permutationMap = inversePermutation(
    #####:   60:      AffineMap::getPermutationMap(interchangeVector, context));
call    0 never executed
call    1 never executed
    #####:   61:  assert(permutationMap && "unexpected null map");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   62:
        -:   63:  // Start a guarded inplace update.
    #####:   64:  rewriter.startRootUpdate(genericOp);
call    0 never executed
    #####:   65:  auto guard =
    #####:   66:      llvm::make_scope_exit([&]() { rewriter.finalizeRootUpdate(genericOp); });
call    0 never executed
call    1 never executed
        -:   67:
        -:   68:  // 2. Compute the interchanged indexing maps.
    #####:   69:  SmallVector<AffineMap> newIndexingMaps;
call    0 never executed
call    1 never executed
    #####:   70:  for (OpOperand &opOperand : genericOp->getOpOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:    AffineMap m = genericOp.getMatchingIndexingMap(&opOperand);
call    0 never executed
    #####:   72:    if (!permutationMap.isEmpty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:      m = m.compose(permutationMap);
call    0 never executed
    #####:   74:    newIndexingMaps.push_back(m);
call    0 never executed
        -:   75:  }
    #####:   76:  genericOp->setAttr(getIndexingMapsAttrName(),
call    0 never executed
call    1 never executed
    #####:   77:                     rewriter.getAffineMapArrayAttr(newIndexingMaps));
call    0 never executed
        -:   78:
        -:   79:  // 3. Compute the interchanged iterator types.
    #####:   80:  ArrayRef<Attribute> itTypes = genericOp.getIteratorTypes().getValue();
call    0 never executed
call    1 never executed
    #####:   81:  SmallVector<Attribute> itTypesVector;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:  llvm::append_range(itTypesVector, itTypes);
call    0 never executed
    #####:   83:  SmallVector<int64_t> permutation(interchangeVector.begin(),
    #####:   84:                                   interchangeVector.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:  applyPermutationToVector(itTypesVector, permutation);
call    0 never executed
    #####:   86:  genericOp->setAttr(getIteratorTypesAttrName(),
call    0 never executed
call    1 never executed
    #####:   87:                     ArrayAttr::get(context, itTypesVector));
call    0 never executed
        -:   88:
        -:   89:  // 4. Transform the index operations by applying the permutation map.
    #####:   90:  if (genericOp.hasIndexSemantics()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   91:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   92:    for (IndexOp indexOp :
    #####:   93:         llvm::make_early_inc_range(genericOp.getBody()->getOps<IndexOp>())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:   94:      rewriter.setInsertionPoint(indexOp);
call    0 never executed
    #####:   95:      SmallVector<Value> allIndices;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:      allIndices.reserve(genericOp.getNumLoops());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   97:      llvm::transform(llvm::seq<uint64_t>(0, genericOp.getNumLoops()),
call    0 never executed
call    1 never executed
    #####:   98:                      std::back_inserter(allIndices), [&](uint64_t dim) {
    #####:   99:                        return rewriter.create<IndexOp>(indexOp->getLoc(), dim);
call    0 never executed
    #####:  100:                      });
call    0 never executed
    #####:  101:      rewriter.replaceOpWithNewOp<AffineApplyOp>(
    #####:  102:          indexOp, permutationMap.getSubMap(indexOp.getDim()), allIndices);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  103:    }
        -:  104:  }
        -:  105:
    #####:  106:  return genericOp;
branch  0 never executed
branch  1 never executed
        -:  107:}
