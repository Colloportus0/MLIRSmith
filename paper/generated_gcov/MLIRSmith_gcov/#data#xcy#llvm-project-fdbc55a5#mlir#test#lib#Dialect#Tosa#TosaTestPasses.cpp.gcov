        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Tosa/TosaTestPasses.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Tosa/CMakeFiles/MLIRTosaTestPasses.dir/TosaTestPasses.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Tosa/CMakeFiles/MLIRTosaTestPasses.dir/TosaTestPasses.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TosaTestPasses.cpp -------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Test passes to exercise TOSA helper functions.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   15:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   16:#include "mlir/Dialect/Tosa/Transforms/Passes.h"
        -:   17:#include "mlir/Dialect/Tosa/Utils/QuantUtils.h"
        -:   18:#include "mlir/IR/BuiltinTypes.h"
        -:   19:#include "mlir/IR/Matchers.h"
        -:   20:#include "mlir/Pass/Pass.h"
        -:   21:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   22:
        -:   23:#define PASS_NAME "tosa-test-quant-utils"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace mlir::tosa;
        -:   27:
        -:   28:// This transformation converts quantized uint8 to quantized int8. The
        -:   29:// construction of the new type invokes buildQTypeFromMinMax. Extracted from
        -:   30:// TOSA legalization infrastructure.
        -:   31:struct ConvertTosaNegateOp : public RewritePattern {
function _ZN19ConvertTosaNegateOpC2EPN4mlir11MLIRContextE called 466 returned 100% blocks executed 100%
      466:   32:  explicit ConvertTosaNegateOp(MLIRContext *context)
      466:   33:      : RewritePattern(tosa::NegateOp::getOperationName(), 1, context) {}
call    0 returned 100%
call    1 returned 100%
        -:   34:  LogicalResult matchAndRewrite(Operation *op,
        -:   35:                                PatternRewriter &rewriter) const override;
        -:   36:};
        -:   37:
        -:   38:LogicalResult
function _ZNK19ConvertTosaNegateOp15matchAndRewriteEPN4mlir9OperationERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:ConvertTosaNegateOp::matchAndRewrite(Operation *op,
        -:   40:                                     PatternRewriter &rewriter) const {
        -:   41:
    #####:   42:  auto tosaNegateOp = cast<tosa::NegateOp>(op);
call    0 never executed
        -:   43:
    #####:   44:  auto inputType =
    #####:   45:      tosaNegateOp.getInput1().getType().dyn_cast<mlir::RankedTensorType>();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   46:  // skip if input is not ranked tensor type
    #####:   47:  if (!inputType)
branch  0 never executed
branch  1 never executed
    #####:   48:    return failure();
        -:   49:
        -:   50:  // skip if it's not ranked tensor type.
    #####:   51:  auto outputType =
call    0 never executed
    #####:   52:      tosaNegateOp.getResult().getType().dyn_cast<mlir::RankedTensorType>();
call    0 never executed
    #####:   53:  if (!outputType)
branch  0 never executed
branch  1 never executed
    #####:   54:    return failure();
        -:   55:
        -:   56:  // skip if output is not per-tensor quantized type.
    #####:   57:  auto outputElementType =
    #####:   58:      outputType.getElementType().dyn_cast<mlir::quant::UniformQuantizedType>();
call    0 never executed
call    1 never executed
    #####:   59:  if (!outputElementType)
branch  0 never executed
branch  1 never executed
    #####:   60:    return failure();
        -:   61:
        -:   62:  // skip if output is not uint8.
    #####:   63:  if (outputElementType.isSigned() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   64:      outputElementType.getStorageTypeIntegralWidth() != 8)
call    0 never executed
    #####:   65:    return failure();
        -:   66:
    #####:   67:  double typeRangeMin = double(outputElementType.getStorageTypeMin() -
call    0 never executed
    #####:   68:                               outputElementType.getZeroPoint()) *
call    0 never executed
    #####:   69:                        outputElementType.getScale();
call    0 never executed
    #####:   70:  double typeRangeMax = double(outputElementType.getStorageTypeMax() -
call    0 never executed
    #####:   71:                               outputElementType.getZeroPoint()) *
call    0 never executed
    #####:   72:                        outputElementType.getScale();
call    0 never executed
    #####:   73:  bool narrowRange = outputElementType.getStorageTypeMin() == 1;
call    0 never executed
        -:   74:
    #####:   75:  auto dstQConstType = RankedTensorType::get(
        -:   76:      outputType.getShape(),
        -:   77:      buildQTypeFromMinMax(rewriter, outputElementType.getExpressedType(),
    #####:   78:                           rewriter.getF64FloatAttr(typeRangeMin),
call    0 never executed
    #####:   79:                           rewriter.getF64FloatAttr(typeRangeMax),
call    0 never executed
        -:   80:                           rewriter.getI32IntegerAttr(
    #####:   81:                               outputElementType.getStorageTypeIntegralWidth()),
call    0 never executed
        -:   82:                           0, true /* signed */,
    #####:   83:                           rewriter.getBoolAttr(narrowRange)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   84:
    #####:   85:  ElementsAttr inputElems;
call    0 never executed
    #####:   86:  if (!matchPattern(tosaNegateOp.getInput1(), m_Constant(&inputElems)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    return failure();
        -:   88:
    #####:   89:  auto newConstOp =
    #####:   90:      rewriter.create<tosa::ConstOp>(op->getLoc(), dstQConstType, inputElems);
call    0 never executed
    #####:   91:  auto newNegateOp = rewriter.create<tosa::NegateOp>(
    #####:   92:      op->getLoc(), dstQConstType, newConstOp.getResult());
call    0 never executed
        -:   93:
    #####:   94:  rewriter.replaceOp(op, {newNegateOp.getResult()});
call    0 never executed
call    1 never executed
    #####:   95:  return success();
        -:   96:}
        -:   97:
        -:   98:// This transformation modifies the quantized output of a test conv2d input and
        -:   99:// appends a TOSA rescale after it. The rescale op requires the invocation of
        -:  100:// computeMultiplierAndShift. From TOSA legalization infrastructure.
        -:  101:struct ConvertTosaConv2DOp : public RewritePattern {
function _ZN19ConvertTosaConv2DOpC2EPN4mlir11MLIRContextE called 458 returned 101% blocks executed 100%
      458:  102:  explicit ConvertTosaConv2DOp(MLIRContext *context)
      458:  103:      : RewritePattern(tosa::Conv2DOp::getOperationName(), 1, context) {}
call    0 returned 100%
call    1 returned 100%
        -:  104:  LogicalResult matchAndRewrite(Operation *op,
        -:  105:                                PatternRewriter &rewriter) const override;
        -:  106:};
        -:  107:
        -:  108:LogicalResult
function _ZNK19ConvertTosaConv2DOp15matchAndRewriteEPN4mlir9OperationERNS0_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  109:ConvertTosaConv2DOp::matchAndRewrite(Operation *op,
        -:  110:                                     PatternRewriter &rewriter) const {
        -:  111:
    #####:  112:  auto tosaConv2DOp = cast<tosa::Conv2DOp>(op);
call    0 never executed
        -:  113:
    #####:  114:  auto inputType =
    #####:  115:      tosaConv2DOp.getInput().getType().dyn_cast<mlir::RankedTensorType>();
call    0 never executed
call    1 never executed
        -:  116:
        -:  117:  // skip if input is not ranked tensor type
    #####:  118:  if (!inputType)
branch  0 never executed
branch  1 never executed
    #####:  119:    return failure();
        -:  120:
    #####:  121:  auto weightType =
    #####:  122:      tosaConv2DOp.getWeight().getType().dyn_cast<mlir::RankedTensorType>();
call    0 never executed
call    1 never executed
        -:  123:
        -:  124:  // skip if wt is not ranked tensor type
    #####:  125:  if (!weightType)
branch  0 never executed
branch  1 never executed
    #####:  126:    return failure();
        -:  127:
        -:  128:  // skip if it's not ranked tensor type.
    #####:  129:  auto outputType =
call    0 never executed
    #####:  130:      tosaConv2DOp.getResult().getType().dyn_cast<mlir::RankedTensorType>();
call    0 never executed
    #####:  131:  if (!outputType)
branch  0 never executed
branch  1 never executed
    #####:  132:    return failure();
        -:  133:
    #####:  134:  auto inputQType =
    #####:  135:      inputType.getElementType().dyn_cast<mlir::quant::UniformQuantizedType>();
call    0 never executed
call    1 never executed
    #####:  136:  auto weightQType =
    #####:  137:      weightType.getElementType().dyn_cast<mlir::quant::UniformQuantizedType>();
call    0 never executed
call    1 never executed
    #####:  138:  auto outputQType =
    #####:  139:      outputType.getElementType().dyn_cast<mlir::quant::UniformQuantizedType>();
call    0 never executed
call    1 never executed
        -:  140:
        -:  141:  // Works on quantized type only.
    #####:  142:  if (!(inputQType && weightQType && outputQType))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  143:    return failure();
        -:  144:
    #####:  145:  auto newTosaConv2DOpType =
    #####:  146:      RankedTensorType::get(outputType.getShape(), rewriter.getIntegerType(32));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  147:
    #####:  148:  auto newTosaConv2DOp = rewriter.create<tosa::Conv2DOp>(
    #####:  149:      op->getLoc(), newTosaConv2DOpType, tosaConv2DOp.getInput(),
call    0 never executed
    #####:  150:      tosaConv2DOp.getWeight(), tosaConv2DOp.getBias(), tosaConv2DOp.getPad(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  151:      tosaConv2DOp.getStride(), tosaConv2DOp.getDilation());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  152:
        -:  153:  // Create rescale to quantized type
    #####:  154:  double inputScale = inputQType.getScale();
call    0 never executed
    #####:  155:  double weightScale = weightQType.getScale();
call    0 never executed
    #####:  156:  double outputScale = outputQType.getScale();
call    0 never executed
    #####:  157:  int64_t outputZp = outputQType.getZeroPoint();
call    0 never executed
        -:  158:
    #####:  159:  double opTensorScale = (inputScale * weightScale) / outputScale;
        -:  160:
    #####:  161:  int32_t multiplier;
    #####:  162:  int32_t shift;
        -:  163:
        -:  164:  // Obtain the quantized scale = multiplier and shift.
    #####:  165:  computeMultiplierAndShift(opTensorScale, multiplier, shift, 32);
call    0 never executed
        -:  166:
    #####:  167:  auto newTosaRescaleOp = rewriter.create<tosa::RescaleOp>(
    #####:  168:      op->getLoc(), outputType, newTosaConv2DOp.getResult(),
    #####:  169:      rewriter.getI32IntegerAttr(0), rewriter.getI32IntegerAttr(outputZp),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  170:      rewriter.getI32ArrayAttr({multiplier}), rewriter.getI32ArrayAttr({shift}),
call    0 never executed
call    1 never executed
    #####:  171:      rewriter.getBoolAttr(true), rewriter.getBoolAttr(true),
call    0 never executed
call    1 never executed
    #####:  172:      rewriter.getBoolAttr(false));
call    0 never executed
call    1 never executed
        -:  173:
    #####:  174:  rewriter.replaceOp(op, {newTosaRescaleOp.getResult()});
call    0 never executed
call    1 never executed
    #####:  175:  return success();
        -:  176:}
        -:  177:
        -:  178:namespace {
        -:  179:
   142219:  180:struct TosaTestQuantUtilAPI
call    0 returned 100%
call    1 returned 100%
        -:  181:    : public PassWrapper<TosaTestQuantUtilAPI, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_120TosaTestQuantUtilAPI13resolveTypeIDEv called 116659 returned 100% blocks executed 100%
   116659:  182:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TosaTestQuantUtilAPI)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  183:
function _ZNK12_GLOBAL__N_120TosaTestQuantUtilAPI11getArgumentEv called 116175 returned 100% blocks executed 100%
   116175:  184:  StringRef getArgument() const final { return PASS_NAME; }
function _ZNK12_GLOBAL__N_120TosaTestQuantUtilAPI14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:  185:  StringRef getDescription() const final {
   116161:  186:    return "TOSA Test: Exercise the APIs in QuantUtils.cpp.";
        -:  187:  }
        -:  188:  void runOnOperation() override;
        -:  189:};
        -:  190:
function _ZN12_GLOBAL__N_120TosaTestQuantUtilAPI14runOnOperationEv called 467 returned 97% blocks executed 100%
      467:  191:void TosaTestQuantUtilAPI::runOnOperation() {
      467:  192:  auto *ctx = &getContext();
call    0 returned 100%
      465:  193:  RewritePatternSet patterns(ctx);
call    0 returned 100%
      465:  194:  auto func = getOperation();
call    0 returned 100%
        -:  195:
      465:  196:  patterns.add<ConvertTosaNegateOp>(ctx);
call    0 returned 98%
      454:  197:  patterns.add<ConvertTosaConv2DOp>(ctx);
call    0 returned 102%
      463:  198:  (void)applyPatternsAndFoldGreedily(func, std::move(patterns));
call    0 returned 100%
call    1 returned 99%
call    2 returned 101%
call    3 returned 99%
      455:  199:}
        -:  200:
        -:  201:} // namespace
        -:  202:
        -:  203:namespace mlir {
function _ZN4mlir32registerTosaTestQuantUtilAPIPassEv called 116161 returned 100% blocks executed 100%
   116161:  204:void registerTosaTestQuantUtilAPIPass() {
   116161:  205:  PassRegistration<TosaTestQuantUtilAPI>();
call    0 returned 100%
   116161:  206:}
        -:  207:} // namespace mlir
