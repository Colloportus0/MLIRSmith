        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/Presburger/Matrix.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/Matrix.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/Matrix.cpp.gcda
        -:    0:Runs:116175
        -:    1://===- Matrix.cpp - MLIR Matrix Class -------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/Presburger/Matrix.h"
        -:   10:#include "mlir/Analysis/Presburger/Utils.h"
        -:   11:#include "llvm/Support/MathExtras.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace presburger;
        -:   15:
function _ZN4mlir10presburger6MatrixC2Ejjjj called 811830 returned 100% blocks executed 62%
   811830:   16:Matrix::Matrix(unsigned rows, unsigned columns, unsigned reservedRows,
   811830:   17:               unsigned reservedColumns)
        -:   18:    : nRows(rows), nColumns(columns),
  1623660:   19:      nReservedColumns(std::max(nColumns, reservedColumns)),
   811830:   20:      data(nRows * nReservedColumns) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
   828240:   21:  data.reserve(std::max(nRows, reservedRows) * nReservedColumns);
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 1% (fallthrough)
branch  3 taken 100%
   811830:   22:}
        -:   23:
function _ZN4mlir10presburger6Matrix8identityEj called 0 returned 0% blocks executed 0%
    #####:   24:Matrix Matrix::identity(unsigned dimension) {
    #####:   25:  Matrix matrix(dimension, dimension);
    #####:   26:  for (unsigned i = 0; i < dimension; ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   27:    matrix(i, i) = 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   28:  return matrix;
        -:   29:}
        -:   30:
function _ZNK4mlir10presburger6Matrix18getNumReservedRowsEv called 0 returned 0% blocks executed 0%
    #####:   31:unsigned Matrix::getNumReservedRows() const {
    #####:   32:  return data.capacity() / nReservedColumns;
        -:   33:}
        -:   34:
function _ZN4mlir10presburger6Matrix11reserveRowsEj called 56438 returned 100% blocks executed 100%
    56438:   35:void Matrix::reserveRows(unsigned rows) {
    56438:   36:  data.reserve(rows * nReservedColumns);
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
    56438:   37:}
        -:   38:
function _ZN4mlir10presburger6Matrix14appendExtraRowEv called 290182 returned 100% blocks executed 100%
  290182*:   39:unsigned Matrix::appendExtraRow() {
  580363*:   40:  resizeVertically(nRows + 1);
  290181*:   41:  return nRows - 1;
        -:   42:}
        -:   43:
function _ZN4mlir10presburger6Matrix14appendExtraRowEN4llvm8ArrayRefINS0_5MPIntEEE called 0 returned 0% blocks executed 0%
    #####:   44:unsigned Matrix::appendExtraRow(ArrayRef<MPInt> elems) {
    #####:   45:  assert(elems.size() == nColumns && "elems must match row length!");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   46:  unsigned row = appendExtraRow();
    #####:   47:  for (unsigned col = 0; col < nColumns; ++col)
branch  0 never executed
branch  1 never executed
    #####:   48:    at(row, col) = elems[col];
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   49:  return row;
        -:   50:}
        -:   51:
function _ZN4mlir10presburger6Matrix18resizeHorizontallyEj called 0 returned 0% blocks executed 0%
    #####:   52:void Matrix::resizeHorizontally(unsigned newNColumns) {
    #####:   53:  if (newNColumns < nColumns)
branch  0 never executed
branch  1 never executed
    #####:   54:    removeColumns(newNColumns, nColumns - newNColumns);
call    0 never executed
    #####:   55:  if (newNColumns > nColumns)
branch  0 never executed
branch  1 never executed
    #####:   56:    insertColumns(nColumns, newNColumns - nColumns);
call    0 never executed
    #####:   57:}
        -:   58:
function _ZN4mlir10presburger6Matrix6resizeEjj called 0 returned 0% blocks executed 0%
    #####:   59:void Matrix::resize(unsigned newNRows, unsigned newNColumns) {
    #####:   60:  resizeHorizontally(newNColumns);
call    0 never executed
    #####:   61:  resizeVertically(newNRows);
    #####:   62:}
        -:   63:
function _ZN4mlir10presburger6Matrix16resizeVerticallyEj called 69131 returned 100% blocks executed 100%
  443382*:   64:void Matrix::resizeVertically(unsigned newNRows) {
  443382*:   65:  nRows = newNRows;
  359313*:   66:  data.resize(nRows * nReservedColumns);
call    0 returned 100%
call    1 never executed
call    2 never executed
call    3 returned 100%
    84069:   67:}
        -:   68:
function _ZN4mlir10presburger6Matrix8swapRowsEjj called 0 returned 0% blocks executed 0%
    #####:   69:void Matrix::swapRows(unsigned row, unsigned otherRow) {
    #####:   70:  assert((row < getNumRows() && otherRow < getNumRows()) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   71:         "Given row out of bounds");
    #####:   72:  if (row == otherRow)
branch  0 never executed
branch  1 never executed
        -:   73:    return;
    #####:   74:  for (unsigned col = 0; col < nColumns; col++)
branch  0 never executed
branch  1 never executed
    #####:   75:    std::swap(at(row, col), at(otherRow, col));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   76:}
        -:   77:
function _ZN4mlir10presburger6Matrix11swapColumnsEjj called 80608 returned 100% blocks executed 90%
    80608:   78:void Matrix::swapColumns(unsigned column, unsigned otherColumn) {
   80608*:   79:  assert((column < getNumColumns() && otherColumn < getNumColumns()) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   80:         "Given column out of bounds");
    80608:   81:  if (column == otherColumn)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   82:    return;
   184699:   83:  for (unsigned row = 0; row < nRows; row++)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
   104091:   84:    std::swap(at(row, column), at(row, otherColumn));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   85:}
        -:   86:
function _ZN4mlir10presburger6Matrix6getRowEj called 895805 returned 100% blocks executed 67%
   895805:   87:MutableArrayRef<MPInt> Matrix::getRow(unsigned row) {
   895805:   88:  return {&data[row * nReservedColumns], nColumns};
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   89:}
        -:   90:
function _ZNK4mlir10presburger6Matrix6getRowEj called 383295 returned 100% blocks executed 67%
   383295:   91:ArrayRef<MPInt> Matrix::getRow(unsigned row) const {
   383295:   92:  return {&data[row * nReservedColumns], nColumns};
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   93:}
        -:   94:
function _ZN4mlir10presburger6Matrix6setRowEjN4llvm8ArrayRefINS0_5MPIntEEE called 626 returned 100% blocks executed 36%
      626:   95:void Matrix::setRow(unsigned row, ArrayRef<MPInt> elems) {
     626*:   96:  assert(elems.size() == getNumColumns() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   97:         "elems size must match row length!");
     3850:   98:  for (unsigned i = 0, e = getNumColumns(); i < e; ++i)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
     6448:   99:    at(row, i) = elems[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      626:  100:}
        -:  101:
function _ZN4mlir10presburger6Matrix12insertColumnEj called 0 returned 0% blocks executed 0%
    #####:  102:void Matrix::insertColumn(unsigned pos) { insertColumns(pos, 1); }
call    0 never executed
function _ZN4mlir10presburger6Matrix13insertColumnsEjj called 268300 returned 100% blocks executed 41%
   268300:  103:void Matrix::insertColumns(unsigned pos, unsigned count) {
   268300:  104:  if (count == 0)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -:  105:    return;
  182802*:  106:  assert(pos <= nColumns);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   182802:  107:  unsigned oldNReservedColumns = nReservedColumns;
   182802:  108:  if (nColumns + count > nReservedColumns) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
   147038:  109:    nReservedColumns = llvm::NextPowerOf2(nColumns + count);
call    0 returned 100%
   147038:  110:    data.resize(nRows * nReservedColumns);
call    0 returned 100%
        -:  111:  }
   182802:  112:  nColumns += count;
        -:  113:
   240269:  114:  for (int ri = nRows - 1; ri >= 0; --ri) {
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
   434604:  115:    for (int ci = nReservedColumns - 1; ci >= 0; --ci) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
   411244:  116:      unsigned r = ri;
   411244:  117:      unsigned c = ci;
   411244:  118:      MPInt &dest = data[r * nReservedColumns + c];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   411244:  119:      if (c >= nColumns) { // NOLINT
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:  120:        // Out of bounds columns are zero-initialized. NOLINT because clang-tidy
        -:  121:        // complains about this branch being the same as the c >= pos one.
        -:  122:        //
        -:  123:        // TODO: this case can be skipped if the number of reserved columns
        -:  124:        // didn't change.
   124284:  125:        dest = 0;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   286960:  126:      } else if (c >= pos + count) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  127:        // Shift the data occuring after the inserted columns.
    73137:  128:        dest = data[r * oldNReservedColumns + c - count];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   213823:  129:      } else if (c >= pos) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        -:  130:        // The inserted columns are also zero-initialized.
   122443:  131:        dest = 0;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  132:      } else {
        -:  133:        // The columns before the inserted columns stay at the same (row, col)
        -:  134:        // but this corresponds to a different location in the linearized array
        -:  135:        // if the number of reserved columns changed.
    91380:  136:        if (nReservedColumns == oldNReservedColumns)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
        -:  137:          break;
   434410:  138:        dest = data[r * oldNReservedColumns + c];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  139:      }
        -:  140:    }
        -:  141:  }
        -:  142:}
        -:  143:
function _ZN4mlir10presburger6Matrix12removeColumnEj called 0 returned 0% blocks executed 0%
    #####:  144:void Matrix::removeColumn(unsigned pos) { removeColumns(pos, 1); }
call    0 never executed
function _ZN4mlir10presburger6Matrix13removeColumnsEjj called 152200 returned 100% blocks executed 47%
   152200:  145:void Matrix::removeColumns(unsigned pos, unsigned count) {
   152200:  146:  if (count == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  147:    return;
  152200*:  148:  assert(pos + count - 1 < nColumns);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   318967:  149:  for (unsigned r = 0; r < nRows; ++r) {
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
   655934:  150:    for (unsigned c = pos; c < nColumns - count; ++c)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
   978334:  151:      at(r, c) = at(r, c + count);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   524047:  152:    for (unsigned c = nColumns - count; c < nColumns; ++c)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
   357280:  153:      at(r, c) = 0;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  154:  }
   152200:  155:  nColumns -= count;
        -:  156:}
        -:  157:
function _ZN4mlir10presburger6Matrix9insertRowEj called 0 returned 0% blocks executed 0%
    #####:  158:void Matrix::insertRow(unsigned pos) { insertRows(pos, 1); }
call    0 never executed
function _ZN4mlir10presburger6Matrix10insertRowsEjj called 0 returned 0% blocks executed 0%
    #####:  159:void Matrix::insertRows(unsigned pos, unsigned count) {
    #####:  160:  if (count == 0)
branch  0 never executed
branch  1 never executed
        -:  161:    return;
        -:  162:
    #####:  163:  assert(pos <= nRows);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  164:  resizeVertically(nRows + count);
call    0 never executed
    #####:  165:  for (int r = nRows - 1; r >= int(pos + count); --r)
branch  0 never executed
branch  1 never executed
    #####:  166:    copyRow(r - count, r);
call    0 never executed
    #####:  167:  for (int r = pos + count - 1; r >= int(pos); --r)
branch  0 never executed
branch  1 never executed
    #####:  168:    for (unsigned c = 0; c < nColumns; ++c)
branch  0 never executed
branch  1 never executed
    #####:  169:      at(r, c) = 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  170:}
        -:  171:
function _ZN4mlir10presburger6Matrix9removeRowEj called 84069 returned 100% blocks executed 100%
    84069:  172:void Matrix::removeRow(unsigned pos) { removeRows(pos, 1); }
call    0 returned 100%
function _ZN4mlir10presburger6Matrix10removeRowsEjj called 84069 returned 100% blocks executed 89%
    84069:  173:void Matrix::removeRows(unsigned pos, unsigned count) {
    84069:  174:  if (count == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  175:    return;
   84069*:  176:  assert(pos + count - 1 <= nRows);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   156698:  177:  for (unsigned r = pos; r + count < nRows; ++r)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
    72629:  178:    copyRow(r + count, r);
call    0 returned 100%
    84069:  179:  resizeVertically(nRows - count);
call    0 returned 100%
        -:  180:}
        -:  181:
function _ZN4mlir10presburger6Matrix7copyRowEjj called 133065 returned 100% blocks executed 39%
   133065:  182:void Matrix::copyRow(unsigned sourceRow, unsigned targetRow) {
   133065:  183:  if (sourceRow == targetRow)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -:  184:    return;
   409839:  185:  for (unsigned c = 0; c < nColumns; ++c)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
   646280:  186:    at(targetRow, c) = at(sourceRow, c);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  187:}
        -:  188:
function _ZN4mlir10presburger6Matrix7fillRowEjRKNS0_5MPIntE called 500 returned 100% blocks executed 36%
      500:  189:void Matrix::fillRow(unsigned row, const MPInt &value) {
     5682:  190:  for (unsigned col = 0; col < nColumns; ++col)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
    10364:  191:    at(row, col) = value;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      500:  192:}
        -:  193:
function _ZN4mlir10presburger6Matrix8addToRowEjjRKNS0_5MPIntE called 0 returned 0% blocks executed 0%
    #####:  194:void Matrix::addToRow(unsigned sourceRow, unsigned targetRow,
        -:  195:                      const MPInt &scale) {
    #####:  196:  addToRow(targetRow, getRow(sourceRow), scale);
call    0 never executed
call    1 never executed
    #####:  197:}
        -:  198:
function _ZN4mlir10presburger6Matrix8addToRowEjN4llvm8ArrayRefINS0_5MPIntEEERKS4_ called 0 returned 0% blocks executed 0%
    #####:  199:void Matrix::addToRow(unsigned row, ArrayRef<MPInt> rowVec,
        -:  200:                      const MPInt &scale) {
    #####:  201:  if (scale == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  202:    return;
    #####:  203:  for (unsigned col = 0; col < nColumns; ++col)
branch  0 never executed
branch  1 never executed
    #####:  204:    at(row, col) += scale * rowVec[col];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  205:}
        -:  206:
function _ZN4mlir10presburger6Matrix11addToColumnEjjRKNS0_5MPIntE called 0 returned 0% blocks executed 0%
    #####:  207:void Matrix::addToColumn(unsigned sourceColumn, unsigned targetColumn,
        -:  208:                         const MPInt &scale) {
    #####:  209:  if (scale == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  210:    return;
    #####:  211:  for (unsigned row = 0, e = getNumRows(); row < e; ++row)
branch  0 never executed
branch  1 never executed
    #####:  212:    at(row, targetColumn) += scale * at(row, sourceColumn);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  213:}
        -:  214:
function _ZN4mlir10presburger6Matrix12negateColumnEj called 0 returned 0% blocks executed 0%
    #####:  215:void Matrix::negateColumn(unsigned column) {
    #####:  216:  for (unsigned row = 0, e = getNumRows(); row < e; ++row)
branch  0 never executed
branch  1 never executed
    #####:  217:    at(row, column) = -at(row, column);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  218:}
        -:  219:
function _ZN4mlir10presburger6Matrix9negateRowEj called 1386 returned 100% blocks executed 25%
     1386:  220:void Matrix::negateRow(unsigned row) {
    15169:  221:  for (unsigned column = 0, e = getNumColumns(); column < e; ++column)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
    41349:  222:    at(row, column) = -at(row, column);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
     1386:  223:}
        -:  224:
function _ZN4mlir10presburger6Matrix12normalizeRowEjj called 892429 returned 100% blocks executed 80%
   892429:  225:MPInt Matrix::normalizeRow(unsigned row, unsigned cols) {
   892429:  226:  return normalizeRange(getRow(row).slice(0, cols));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
        -:  227:}
        -:  228:
function _ZN4mlir10presburger6Matrix12normalizeRowEj called 497749 returned 100% blocks executed 100%
   497749:  229:MPInt Matrix::normalizeRow(unsigned row) {
   497749:  230:  return normalizeRow(row, getNumColumns());
call    0 returned 100%
        -:  231:}
        -:  232:
function _ZNK4mlir10presburger6Matrix18preMultiplyWithRowEN4llvm8ArrayRefINS0_5MPIntEEE called 0 returned 0% blocks executed 0%
    #####:  233:SmallVector<MPInt, 8> Matrix::preMultiplyWithRow(ArrayRef<MPInt> rowVec) const {
    #####:  234:  assert(rowVec.size() == getNumRows() && "Invalid row vector dimension!");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  235:
    #####:  236:  SmallVector<MPInt, 8> result(getNumColumns(), MPInt(0));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:  for (unsigned col = 0, e = getNumColumns(); col < e; ++col)
branch  0 never executed
branch  1 never executed
    #####:  238:    for (unsigned i = 0, e = getNumRows(); i < e; ++i)
branch  0 never executed
branch  1 never executed
    #####:  239:      result[col] += rowVec[i] * at(i, col);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  240:  return result;
        -:  241:}
        -:  242:
        -:  243:SmallVector<MPInt, 8>
function _ZNK4mlir10presburger6Matrix22postMultiplyWithColumnEN4llvm8ArrayRefINS0_5MPIntEEE called 0 returned 0% blocks executed 0%
    #####:  244:Matrix::postMultiplyWithColumn(ArrayRef<MPInt> colVec) const {
    #####:  245:  assert(getNumColumns() == colVec.size() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  246:         "Invalid column vector dimension!");
        -:  247:
    #####:  248:  SmallVector<MPInt, 8> result(getNumRows(), MPInt(0));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  249:  for (unsigned row = 0, e = getNumRows(); row < e; row++)
branch  0 never executed
branch  1 never executed
    #####:  250:    for (unsigned i = 0, e = getNumColumns(); i < e; i++)
branch  0 never executed
branch  1 never executed
    #####:  251:      result[row] += at(row, i) * colVec[i];
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  252:  return result;
        -:  253:}
        -:  254:
        -:  255:/// Set M(row, targetCol) to its remainder on division by M(row, sourceCol)
        -:  256:/// by subtracting from column targetCol an appropriate integer multiple of
        -:  257:/// sourceCol. This brings M(row, targetCol) to the range [0, M(row,
        -:  258:/// sourceCol)). Apply the same column operation to otherMatrix, with the same
        -:  259:/// integer multiple.
function _ZL23modEntryColumnOperationRN4mlir10presburger6MatrixEjjjS2_ called 0 returned 0% blocks executed 0%
    #####:  260:static void modEntryColumnOperation(Matrix &m, unsigned row, unsigned sourceCol,
        -:  261:                                    unsigned targetCol, Matrix &otherMatrix) {
    #####:  262:  assert(m(row, sourceCol) != 0 && "Cannot divide by zero!");
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  263:  assert(m(row, sourceCol) > 0 && "Source must be positive!");
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  264:  MPInt ratio = -floorDiv(m(row, targetCol), m(row, sourceCol));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  265:  m.addToColumn(sourceCol, targetCol, ratio);
call    0 never executed
    #####:  266:  otherMatrix.addToColumn(sourceCol, targetCol, ratio);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  267:}
        -:  268:
function _ZNK4mlir10presburger6Matrix24computeHermiteNormalFormEv called 0 returned 0% blocks executed 0%
    #####:  269:std::pair<Matrix, Matrix> Matrix::computeHermiteNormalForm() const {
        -:  270:  // We start with u as an identity matrix and perform operations on h until h
        -:  271:  // is in hermite normal form. We apply the same sequence of operations on u to
        -:  272:  // obtain a transform that takes h to hermite normal form.
    #####:  273:  Matrix h = *this;
branch  0 never executed
branch  1 never executed
    #####:  274:  Matrix u = Matrix::identity(h.getNumColumns());
call    0 never executed
call    1 never executed
        -:  275:
    #####:  276:  unsigned echelonCol = 0;
        -:  277:  // Invariant: in all rows above row, all columns from echelonCol onwards
        -:  278:  // are all zero elements. In an iteration, if the curent row has any non-zero
        -:  279:  // elements echelonCol onwards, we bring one to echelonCol and use it to
        -:  280:  // make all elements echelonCol + 1 onwards zero.
    #####:  281:  for (unsigned row = 0; row < h.getNumRows(); ++row) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  282:    // Search row for a non-empty entry, starting at echelonCol.
    #####:  283:    unsigned nonZeroCol = echelonCol;
    #####:  284:    for (unsigned e = h.getNumColumns(); nonZeroCol < e; ++nonZeroCol) {
branch  0 never executed
branch  1 never executed
    #####:  285:      if (h(row, nonZeroCol) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  286:        continue;
        -:  287:      break;
        -:  288:    }
        -:  289:
        -:  290:    // Continue to the next row with the same echelonCol if this row is all
        -:  291:    // zeros from echelonCol onwards.
    #####:  292:    if (nonZeroCol == h.getNumColumns())
branch  0 never executed
branch  1 never executed
    #####:  293:      continue;
        -:  294:
        -:  295:    // Bring the non-zero column to echelonCol. This doesn't affect rows
        -:  296:    // above since they are all zero at these columns.
    #####:  297:    if (nonZeroCol != echelonCol) {
branch  0 never executed
branch  1 never executed
    #####:  298:      h.swapColumns(nonZeroCol, echelonCol);
call    0 never executed
    #####:  299:      u.swapColumns(nonZeroCol, echelonCol);
call    0 never executed
        -:  300:    }
        -:  301:
        -:  302:    // Make h(row, echelonCol) non-negative.
    #####:  303:    if (h(row, echelonCol) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  304:      h.negateColumn(echelonCol);
call    0 never executed
    #####:  305:      u.negateColumn(echelonCol);
call    0 never executed
        -:  306:    }
        -:  307:
        -:  308:    // Make all the entries in row after echelonCol zero.
    #####:  309:    for (unsigned i = echelonCol + 1, e = h.getNumColumns(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
        -:  310:      // We make h(row, i) non-negative, and then apply the Euclidean GCD
        -:  311:      // algorithm to (row, i) and (row, echelonCol). At the end, one of them
        -:  312:      // has value equal to the gcd of the two entries, and the other is zero.
        -:  313:
    #####:  314:      if (h(row, i) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  315:        h.negateColumn(i);
call    0 never executed
    #####:  316:        u.negateColumn(i);
call    0 never executed
        -:  317:      }
        -:  318:
        -:  319:      unsigned targetCol = i, sourceCol = echelonCol;
        -:  320:      // At every step, we set h(row, targetCol) %= h(row, sourceCol), and
        -:  321:      // swap the indices sourceCol and targetCol. (not the columns themselves)
        -:  322:      // This modulo is implemented as a subtraction
        -:  323:      // h(row, targetCol) -= quotient * h(row, sourceCol),
        -:  324:      // where quotient = floor(h(row, targetCol) / h(row, sourceCol)),
        -:  325:      // which brings h(row, targetCol) to the range [0, h(row, sourceCol)).
        -:  326:      //
        -:  327:      // We are only allowed column operations; we perform the above
        -:  328:      // for every row, i.e., the above subtraction is done as a column
        -:  329:      // operation. This does not affect any rows above us since they are
        -:  330:      // guaranteed to be zero at these columns.
    #####:  331:      while (h(row, targetCol) != 0 && h(row, sourceCol) != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  332:        modEntryColumnOperation(h, row, sourceCol, targetCol, u);
    #####:  333:        std::swap(targetCol, sourceCol);
call    0 never executed
call    1 never executed
        -:  334:      }
        -:  335:
        -:  336:      // One of (row, echelonCol) and (row, i) is zero and the other is the gcd.
        -:  337:      // Make it so that (row, echelonCol) holds the non-zero value.
    #####:  338:      if (h(row, echelonCol) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  339:        h.swapColumns(i, echelonCol);
call    0 never executed
    #####:  340:        u.swapColumns(i, echelonCol);
call    0 never executed
        -:  341:      }
        -:  342:    }
        -:  343:
        -:  344:    // Make all entries before echelonCol non-negative and strictly smaller
        -:  345:    // than the pivot entry.
    #####:  346:    for (unsigned i = 0; i < echelonCol; ++i)
branch  0 never executed
branch  1 never executed
    #####:  347:      modEntryColumnOperation(h, row, echelonCol, i, u);
call    0 never executed
        -:  348:
        -:  349:    ++echelonCol;
        -:  350:  }
        -:  351:
    #####:  352:  return {h, u};
call    0 never executed
call    1 never executed
        -:  353:}
        -:  354:
function _ZNK4mlir10presburger6Matrix5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  355:void Matrix::print(raw_ostream &os) const {
    #####:  356:  for (unsigned row = 0; row < nRows; ++row) {
branch  0 never executed
branch  1 never executed
    #####:  357:    for (unsigned column = 0; column < nColumns; ++column)
branch  0 never executed
branch  1 never executed
    #####:  358:      os << at(row, column) << ' ';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  359:    os << '\n';
branch  0 never executed
branch  1 never executed
        -:  360:  }
    #####:  361:}
        -:  362:
function _ZNK4mlir10presburger6Matrix4dumpEv called 0 returned 0% blocks executed 0%
    #####:  363:void Matrix::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
        -:  364:
function _ZNK4mlir10presburger6Matrix18hasConsistentStateEv called 595090 returned 100% blocks executed 72%
   595090:  365:bool Matrix::hasConsistentState() const {
   595090:  366:  if (data.size() != nRows * nReservedColumns)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  367:    return false;
   595090:  368:  if (nColumns > nReservedColumns)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  369:    return false;
  1546719:  370:  for (unsigned r = 0; r < nRows; ++r)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
  4671520:  371:    for (unsigned c = nColumns; c < nReservedColumns; ++c)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
  7439782:  372:      if (data[r * nReservedColumns + c] != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  373:        return false;
        -:  374:  return true;
        -:  375:}
