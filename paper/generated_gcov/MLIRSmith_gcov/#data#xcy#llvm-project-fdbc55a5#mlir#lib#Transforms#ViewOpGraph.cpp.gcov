        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/ViewOpGraph.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/ViewOpGraph.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/ViewOpGraph.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- ViewOpGraph.cpp - View/write op graphviz graphs --------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Transforms/ViewOpGraph.h"
        -:   10:
        -:   11:#include "mlir/IR/Block.h"
        -:   12:#include "mlir/IR/BuiltinTypes.h"
        -:   13:#include "mlir/IR/Operation.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:#include "mlir/Support/IndentedOstream.h"
        -:   16:#include "llvm/ADT/StringMap.h"
        -:   17:#include "llvm/Support/Format.h"
        -:   18:#include "llvm/Support/GraphWriter.h"
        -:   19:#include <utility>
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_VIEWOPGRAPH
        -:   23:#include "mlir/Transforms/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28:static const StringRef kLineStyleControlFlow = "dashed";
        -:   29:static const StringRef kLineStyleDataFlow = "solid";
        -:   30:static const StringRef kShapeNode = "ellipse";
        -:   31:static const StringRef kShapeNone = "plain";
        -:   32:
        -:   33:/// Return the size limits for eliding large attributes.
function _ZL26getLargeAttributeSizeLimitv called 287319 returned 100% blocks executed 83%
   287319:   34:static int64_t getLargeAttributeSizeLimit() {
        -:   35:  // Use the default from the printer flags if possible.
   287319:   36:  if (Optional<int64_t> limit = OpPrintingFlags().getLargeElementsAttrLimit())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   37:    return *limit;
   287319:   38:  return 16;
        -:   39:}
        -:   40:
        -:   41:/// Return all values printed onto a stream as a string.
function _ZL9strFromOsN4llvm12function_refIFvRNS_11raw_ostreamEEEE called 5274087 returned 100% blocks executed 100%
  5274087:   42:static std::string strFromOs(function_ref<void(raw_ostream &)> func) {
  5274087:   43:  std::string buf;
call    0 returned 100%
 10548174:   44:  llvm::raw_string_ostream os(buf);
call    0 returned 100%
branch  1 taken 63% (fallthrough)
branch  2 taken 37%
  5274087:   45:  func(os);
call    0 returned 100%
  5274087:   46:  return os.str();
call    0 returned 100%
call    1 returned 100%
        -:   47:}
        -:   48:
        -:   49:/// Escape special characters such as '\n' and quotation marks.
  2659229:   50:static std::string escapeString(std::string str) {
  2659229:   51:  return strFromOs([&](raw_ostream &os) { os.write_escaped(str); });
call    0 returned 100%
        -:   52:}
        -:   53:
        -:   54:/// Put quotation marks around a given string.
function _ZL11quoteStringRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2659229 returned 100% blocks executed 67%
  2659229:   55:static std::string quoteString(const std::string &str) {
  2659229:   56:  return "\"" + str + "\"";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   57:}
        -:   58:
        -:   59:using AttributeMap = llvm::StringMap<std::string>;
        -:   60:
        -:   61:namespace {
        -:   62:
        -:   63:/// This struct represents a node in the DOT language. Each node has an
        -:   64:/// identifier and an optional identifier for the cluster (subgraph) that
        -:   65:/// contains the node.
        -:   66:/// Note: In the DOT language, edges can be drawn only from nodes to nodes, but
        -:   67:/// not between clusters. However, edges can be clipped to the boundary of a
        -:   68:/// cluster with `lhead` and `ltail` attributes. Therefore, when creating a new
        -:   69:/// cluster, an invisible "anchor" node is created.
        -:   70:struct Node {
        -:   71:public:
 2226070*:   72:  Node(int id = 0, Optional<int> clusterId = llvm::None)
  649735*:   73:      : id(id), clusterId(clusterId) {}
        -:   74:
        -:   75:  int id;
        -:   76:  Optional<int> clusterId;
        -:   77:};
        -:   78:
        -:   79:/// This pass generates a Graphviz dataflow visualization of an MLIR operation.
        -:   80:/// Note: See https://www.graphviz.org/doc/info/lang.html for more information
        -:   81:/// about the Graphviz DOT language.
        -:   82:class PrintOpPass : public impl::ViewOpGraphBase<PrintOpPass> {
        -:   83:public:
function _ZN12_GLOBAL__N_111PrintOpPassC2ERN4llvm11raw_ostreamE called 116632 returned 100% blocks executed 100%
   116632:   84:  PrintOpPass(raw_ostream &os) : os(os) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    #####:   85:  PrintOpPass(const PrintOpPass &o) : PrintOpPass(o.os.getOStream()) {}
call    0 never executed
        -:   86:
function _ZN12_GLOBAL__N_111PrintOpPass14runOnOperationEv called 367 returned 100% blocks executed 100%
      367:   87:  void runOnOperation() override {
function _ZZN12_GLOBAL__N_111PrintOpPass14runOnOperationEvENKUlvE_clEv.isra.0 called 367 returned 100% blocks executed 83%
      734:   88:    emitGraph([&]() {
call    0 returned 100%
      367:   89:      processOperation(getOperation());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
      367:   90:      emitAllEdgeStmts();
call    0 returned 100%
      367:   91:    });
      367:   92:  }
        -:   93:
        -:   94:  /// Create a CFG graph for a region. Used in `Region::viewGraph`.
function _ZN12_GLOBAL__N_111PrintOpPass13emitRegionCFGERN4mlir6RegionE called 0 returned 0% blocks executed 0%
    #####:   95:  void emitRegionCFG(Region &region) {
    #####:   96:    printControlFlowEdges = true;
branch  0 never executed
branch  1 never executed
    #####:   97:    printDataFlowEdges = false;
branch  0 never executed
branch  1 never executed
    #####:   98:    emitGraph([&]() { processRegion(region); });
call    0 never executed
call    1 never executed
    #####:   99:  }
        -:  100:
        -:  101:private:
        -:  102:  /// Emit all edges. This function should be called after all nodes have been
        -:  103:  /// emitted.
function _ZN12_GLOBAL__N_111PrintOpPass16emitAllEdgeStmtsEv called 367 returned 100% blocks executed 100%
      367:  104:  void emitAllEdgeStmts() {
  1903852:  105:    for (const std::string &edge : edges)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
  1903485:  106:      os << edge << ";\n";
call    0 returned 100%
call    1 returned 100%
      367:  107:    edges.clear();
call    0 returned 100%
      367:  108:  }
        -:  109:
        -:  110:  /// Emit a cluster (subgraph). The specified builder generates the body of the
        -:  111:  /// cluster. Return the anchor node of the cluster.
function _ZN12_GLOBAL__N_111PrintOpPass15emitClusterStmtEN4llvm12function_refIFvvEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 70459 returned 100% blocks executed 94%
    70459:  112:  Node emitClusterStmt(function_ref<void()> builder, std::string label = "") {
    70459:  113:    int clusterId = ++counter;
    70459:  114:    os << "subgraph cluster_" << clusterId << " {\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    70459:  115:    os.indent();
call    0 returned 100%
        -:  116:    // Emit invisible anchor node from/to which arrows can be drawn.
    70459:  117:    Node anchorNode = emitNodeStmt(" ", kShapeNone);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   269877:  118:    os << attrStmt("label", quoteString(escapeString(std::move(label))))
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 42% (fallthrough)
branch  9 taken 58%
branch 10 taken 41% (fallthrough)
branch 11 taken 59%
branch 12 taken 41% (fallthrough)
branch 13 taken 59%
    70459:  119:       << ";\n";
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
    70459:  120:    builder();
call    0 returned 100%
    70459:  121:    os.unindent();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    70459:  122:    os << "}\n";
call    0 returned 100%
    70459:  123:    return Node(anchorNode.id, clusterId);
        -:  124:  }
        -:  125:
        -:  126:  /// Generate an attribute statement.
        -:  127:  std::string attrStmt(const Twine &key, const Twine &value) {
        -:  128:    return (key + " = " + value).str();
        -:  129:  }
        -:  130:
        -:  131:  /// Emit an attribute list.
        -:  132:  void emitAttrList(raw_ostream &os, const AttributeMap &map) {
        -:  133:    os << "[";
function _ZZN12_GLOBAL__N_111PrintOpPass12emitAttrListERN4llvm11raw_ostreamERKNS1_9StringMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_15MallocAllocatorEEEENKUlRKT_E_clINS1_14StringMapEntryISA_EEEEDaSH_.isra.0 called 5396873 returned 100% blocks executed 100%
  5396873:  134:    interleaveComma(map, os, [&](const auto &it) {
  5396873:  135:      os << this->attrStmt(it.getKey(), it.getValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
  5396873:  136:    });
        -:  137:    os << "]";
        -:  138:  }
        -:  139:
        -:  140:  // Print an MLIR attribute to `os`. Large attributes are truncated.
function _ZN12_GLOBAL__N_111PrintOpPass12emitMlirAttrERN4llvm11raw_ostreamEN4mlir9AttributeE called 287319 returned 100% blocks executed 92%
   287319:  141:  void emitMlirAttr(raw_ostream &os, Attribute attr) {
        -:  142:    // A value used to elide large container attribute.
   287319:  143:    int64_t largeAttrLimit = getLargeAttributeSizeLimit();
call    0 returned 100%
        -:  144:
        -:  145:    // Always emit splat attributes.
   287319:  146:    if (attr.isa<SplatElementsAttr>()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     2761:  147:      attr.print(os);
     5828:  148:      return;
call    0 returned 100%
        -:  149:    }
        -:  150:
        -:  151:    // Elide "big" elements attributes.
   284558:  152:    auto elements = attr.dyn_cast<ElementsAttr>();
call    0 returned 100%
   284558:  153:    if (elements && elements.getNumElements() > largeAttrLimit) {
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 100%
       83:  154:      os << std::string(elements.getType().getRank(), '[') << "..."
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      166:  155:         << std::string(elements.getType().getRank(), ']') << " : "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       83:  156:         << elements.getType();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0%
branch  4 taken 100%
       83:  157:      return;
        -:  158:    }
        -:  159:
   284475:  160:    auto array = attr.dyn_cast<ArrayAttr>();
call    0 returned 100%
   342486:  161:    if (array && static_cast<int64_t>(array.size()) > largeAttrLimit) {
branch  0 taken 20%
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
      223:  162:      os << "[...]";
      223:  163:      return;
call    0 returned 100%
        -:  164:    }
        -:  165:
        -:  166:    // Print all other attributes.
   568504:  167:    std::string buf;
call    0 returned 100%
   568504:  168:    llvm::raw_string_ostream ss(buf);
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
   284252:  169:    attr.print(ss);
call    0 returned 100%
   560239:  170:    os << truncateString(ss.str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 61%
branch  4 taken 39%
branch  5 taken 36% (fallthrough)
branch  6 taken 64%
call    7 returned 100%
        -:  171:  }
        -:  172:
        -:  173:  /// Append an edge to the list of edges.
        -:  174:  /// Note: Edges are written to the output stream via `emitAllEdgeStmts`.
function _ZN12_GLOBAL__N_111PrintOpPass12emitEdgeStmtENS_4NodeES1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN4llvm9StringRefE called 1903485 returned 100% blocks executed 66%
  1903485:  175:  void emitEdgeStmt(Node n1, Node n2, std::string label, StringRef style) {
  1903485:  176:    AttributeMap attrs;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
  3806970:  177:    attrs["style"] = style.str();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  178:    // Do not label edges that start/end at a cluster boundary. Such edges are
        -:  179:    // clipped at the boundary, but labels are not. This can lead to labels
        -:  180:    // floating around without any edge next to them.
  1903485:  181:    if (!n1.clusterId && !n2.clusterId)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
  3588534:  182:      attrs["label"] = quoteString(escapeString(std::move(label)));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  183:    // Use `ltail` and `lhead` to draw edges between clusters.
  1903485:  184:    if (n1.clusterId)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    60658:  185:      attrs["ltail"] = "cluster_" + std::to_string(*n1.clusterId);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
  1903485:  186:    if (n2.clusterId)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    49457:  187:      attrs["lhead"] = "cluster_" + std::to_string(*n2.clusterId);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  188:
function _ZZN12_GLOBAL__N_111PrintOpPass12emitEdgeStmtENS_4NodeES1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN4llvm9StringRefEENKUlRNS8_11raw_ostreamEE_clESB_ called 1903485 returned 100% blocks executed 100%
  1903485:  189:    edges.push_back(strFromOs([&](raw_ostream &os) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
  1903485:  190:      os << llvm::format("v%i -> v%i ", n1.id, n2.id);
call    0 returned 100%
  1903485:  191:      emitAttrList(os, attrs);
call    0 returned 100%
  1903485:  192:    }));
  1903485:  193:  }
        -:  194:
        -:  195:  /// Emit a graph. The specified builder generates the body of the graph.
function _ZN12_GLOBAL__N_111PrintOpPass9emitGraphEN4llvm12function_refIFvvEEE called 367 returned 100% blocks executed 79%
      367:  196:  void emitGraph(function_ref<void()> builder) {
      367:  197:    os << "digraph G {\n";
call    0 returned 100%
      367:  198:    os.indent();
call    0 returned 100%
        -:  199:    // Edges between clusters are allowed only in compound mode.
      367:  200:    os << attrStmt("compound", "true") << ";\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      367:  201:    builder();
call    0 returned 100%
      367:  202:    os.unindent();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      367:  203:    os << "}\n";
call    0 returned 100%
      367:  204:  }
        -:  205:
        -:  206:  /// Emit a node statement.
function _ZN12_GLOBAL__N_111PrintOpPass12emitNodeStmtENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN4llvm9StringRefE called 794503 returned 100% blocks executed 83%
   794503:  207:  Node emitNodeStmt(std::string label, StringRef shape = kShapeNode) {
   794503:  208:    int nodeId = ++counter;
  1589006:  209:    AttributeMap attrs;
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
call    2 returned 100%
  2270635:  210:    attrs["label"] = quoteString(escapeString(std::move(label)));
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 86% (fallthrough)
branch  9 taken 14%
branch 10 taken 86% (fallthrough)
branch 11 taken 14%
  1589006:  211:    attrs["shape"] = shape.str();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
   794503:  212:    os << llvm::format("v%i ", nodeId);
call    0 returned 100%
   794503:  213:    emitAttrList(os, attrs);
call    0 returned 100%
   794503:  214:    os << ";\n";
call    0 returned 100%
   794503:  215:    return Node(nodeId);
call    0 returned 100%
        -:  216:  }
        -:  217:
        -:  218:  /// Generate a label for an operation.
   711373:  219:  std::string getLabel(Operation *op) {
function _ZZN12_GLOBAL__N_111PrintOpPass8getLabelEPN4mlir9OperationEENKUlRN4llvm11raw_ostreamEE_clES6_.isra.0 called 711373 returned 100% blocks executed 98%
   711373:  220:    return strFromOs([&](raw_ostream &os) {
        -:  221:      // Print operation name and type.
   711373:  222:      os << op->getName();
call    0 returned 100%
   711373:  223:      if (printResultTypes) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   711373:  224:        os << " : (";
call    0 returned 100%
  1422746:  225:        std::string buf;
call    0 returned 100%
  1422746:  226:        llvm::raw_string_ostream ss(buf);
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
  1422746:  227:        interleaveComma(op->getResultTypes(), ss);
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
call    2 returned 100%
   848003:  228:        os << truncateString(ss.str()) << ")";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 19% (fallthrough)
branch  5 taken 81%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
   711373:  229:        os << ")";
call    0 returned 100%
call    1 returned 100%
        -:  230:      }
        -:  231:
        -:  232:      // Print attributes.
   711373:  233:      if (printAttrs) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   711373:  234:        os << "\n";
call    0 returned 100%
   998692:  235:        for (const NamedAttribute &attr : op->getAttrs()) {
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
   574638:  236:          os << '\n' << attr.getName().getValue() << ": ";
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
   287319:  237:          emitMlirAttr(os, attr.getValue());
call    0 returned 100%
        -:  238:        }
        -:  239:      }
  2134119:  240:    });
        -:  241:  }
        -:  242:
        -:  243:  /// Generate a label for a block argument.
        -:  244:  std::string getLabel(BlockArgument arg) {
        -:  245:    return "arg" + std::to_string(arg.getArgNumber());
        -:  246:  }
        -:  247:
        -:  248:  /// Process a block. Emit a cluster and one node per block argument and
        -:  249:  /// operation inside the cluster.
function _ZN12_GLOBAL__N_111PrintOpPass12processBlockERN4mlir5BlockE called 40715 returned 100% blocks executed 67%
    40715:  250:  void processBlock(Block &block) {
function _ZZN12_GLOBAL__N_111PrintOpPass12processBlockERN4mlir5BlockEENKUlvE_clEv.isra.0 called 40715 returned 100% blocks executed 67%
    40715:  251:    emitClusterStmt([&]() {
    83130:  252:      for (BlockArgument &blockArg : block.getArguments())
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
    42415:  253:        valueToNode[blockArg] = emitNodeStmt(getLabel(blockArg));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  254:
        -:  255:      // Emit a node for each operation.
    40715:  256:      Optional<Node> prevNode;
   751721:  257:      for (Operation &op : block) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
   711006:  258:        Node nextNode = processOperation(&op);
call    0 returned 100%
  711006*:  259:        if (printControlFlowEdges && prevNode)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  260:          emitEdgeStmt(*prevNode, nextNode, /*label=*/"",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  261:                       kLineStyleControlFlow);
  1422012:  262:        prevNode = nextNode;
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
        -:  263:      }
    40715:  264:    });
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    40715:  265:  }
        -:  266:
        -:  267:  /// Process an operation. If the operation has regions, emit a cluster.
        -:  268:  /// Otherwise, emit a node.
function _ZN12_GLOBAL__N_111PrintOpPass16processOperationEPN4mlir9OperationE called 711373 returned 100% blocks executed 82%
   711373:  269:  Node processOperation(Operation *op) {
   711373:  270:    Node node;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   711373:  271:    if (op->getNumRegions() > 0) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  272:      // Emit cluster for op with regions.
    29744:  273:      node = emitClusterStmt(
function _ZZN12_GLOBAL__N_111PrintOpPass16processOperationEPN4mlir9OperationEENKUlvE_clEv.isra.0 called 29744 returned 100% blocks executed 100%
    29744:  274:          [&]() {
    76291:  275:            for (Region &region : op->getRegions())
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
    41349:  276:              processRegion(region);
call    0 returned 100%
    29744:  277:          },
    29744:  278:          getLabel(op));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  279:    } else {
   681629:  280:      node = emitNodeStmt(getLabel(op));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  281:    }
        -:  282:
        -:  283:    // Insert data flow edges originating from each operand.
   711373:  284:    if (printDataFlowEdges) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   711373:  285:      unsigned numOperands = op->getNumOperands();
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
  2614858:  286:      for (unsigned i = 0; i < numOperands; i++)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
  1903485:  287:        emitEdgeStmt(valueToNode[op->getOperand(i)], node,
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  5421134:  288:                     /*label=*/numOperands == 1 ? "" : std::to_string(i),
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
call    2 returned 100%
call    3 returned 100%
        -:  289:                     kLineStyleDataFlow);
        -:  290:    }
        -:  291:
  1921265:  292:    for (Value result : op->getResults())
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
call    4 returned 100%
   607320:  293:      valueToNode[result] = node;
call    0 returned 100%
        -:  294:
   711373:  295:    return node;
        -:  296:  }
        -:  297:
        -:  298:  /// Process a region.
function _ZN12_GLOBAL__N_111PrintOpPass13processRegionERN4mlir6RegionE called 41349 returned 100% blocks executed 86%
    41349:  299:  void processRegion(Region &region) {
    82064:  300:    for (Block &block : region.getBlocks())
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    40715:  301:      processBlock(block);
call    0 returned 100%
    41349:  302:  }
        -:  303:
        -:  304:  /// Truncate long strings.
function _ZN12_GLOBAL__N_111PrintOpPass14truncateStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 995625 returned 100% blocks executed 83%
   995625:  305:  std::string truncateString(std::string str) {
   995625:  306:    if (str.length() <= maxLabelLen)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
   886424:  307:      return str;
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
   109201:  308:    return str.substr(0, maxLabelLen) + "...";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  309:  }
        -:  310:
        -:  311:  /// Output stream to write DOT file to.
        -:  312:  raw_indented_ostream os;
        -:  313:  /// A list of edges. For simplicity, should be emitted after all nodes were
        -:  314:  /// emitted.
        -:  315:  std::vector<std::string> edges;
        -:  316:  /// Mapping of SSA values to Graphviz nodes/clusters.
        -:  317:  DenseMap<Value, Node> valueToNode;
        -:  318:  /// Counter for generating unique node/subgraph identifiers.
        -:  319:  int counter = 0;
        -:  320:};
        -:  321:
        -:  322:} // namespace
        -:  323:
function _ZN4mlir22createPrintOpGraphPassERN4llvm11raw_ostreamE called 116632 returned 100% blocks executed 100%
   116632:  324:std::unique_ptr<Pass> mlir::createPrintOpGraphPass(raw_ostream &os) {
   116632:  325:  return std::make_unique<PrintOpPass>(os);
call    0 returned 100%
        -:  326:}
        -:  327:
        -:  328:/// Generate a CFG for a region and show it in a window.
function _ZL13llvmViewGraphRN4mlir6RegionERKN4llvm5TwineE called 0 returned 0% blocks executed 0%
    #####:  329:static void llvmViewGraph(Region &region, const Twine &name) {
    #####:  330:  int fd;
    #####:  331:  std::string filename = llvm::createGraphFilename(name.str(), fd);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  332:  {
    #####:  333:    llvm::raw_fd_ostream os(fd, /*shouldClose=*/true);
call    0 never executed
call    1 never executed
    #####:  334:    if (fd == -1) {
branch  0 never executed
branch  1 never executed
    #####:  335:      llvm::errs() << "error opening file '" << filename << "' for writing\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  336:      return;
call    0 never executed
        -:  337:    }
    #####:  338:    PrintOpPass pass(os);
call    0 never executed
call    1 never executed
    #####:  339:    pass.emitRegionCFG(region);
call    0 never executed
        -:  340:  }
    #####:  341:  llvm::DisplayGraph(filename, /*wait=*/false, llvm::GraphProgram::DOT);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  342:}
        -:  343:
function _ZN4mlir6Region9viewGraphERKN4llvm5TwineE called 0 returned 0% blocks executed 0%
    #####:  344:void mlir::Region::viewGraph(const Twine &regionName) {
    #####:  345:  llvmViewGraph(*this, regionName);
call    0 never executed
    #####:  346:}
        -:  347:
function _ZN4mlir6Region9viewGraphEv called 0 returned 0% blocks executed 0%
    #####:  348:void mlir::Region::viewGraph() { viewGraph("region"); }
call    0 never executed
call    1 never executed
