        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/AMDGPU/IR/AMDGPUDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/AMDGPU/IR/CMakeFiles/obj.MLIRAMDGPUDialect.dir/AMDGPUDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/AMDGPU/IR/CMakeFiles/obj.MLIRAMDGPUDialect.dir/AMDGPUDialect.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- AMDGPUDialect.cpp - MLIR AMDGPU dialect implementation --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the AMDGPU dialect and its operations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/AMDGPU/AMDGPUDialect.h"
        -:   14:
        -:   15:#include "mlir/IR/Builders.h"
        -:   16:#include "mlir/IR/BuiltinTypes.h"
        -:   17:#include "mlir/IR/Diagnostics.h"
        -:   18:#include "mlir/IR/DialectImplementation.h"
        -:   19:#include "mlir/IR/OpImplementation.h"
        -:   20:#include "mlir/IR/TypeUtilities.h"
        -:   21:#include "llvm/ADT/TypeSwitch.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::amdgpu;
        -:   25:
        -:   26:#include "mlir/Dialect/AMDGPU/AMDGPUDialect.cpp.inc"
        -:   27:
function _ZN4mlir6amdgpu13AMDGPUDialect10initializeEv called 0 returned 0% blocks executed 0%
    #####:   28:void AMDGPUDialect::initialize() {
    #####:   29:  addOperations<
        -:   30:#define GET_OP_LIST
        -:   31:#include "mlir/Dialect/AMDGPU/AMDGPU.cpp.inc"
    #####:   32:      >();
call    0 never executed
call    1 never executed
    #####:   33:  addAttributes<
        -:   34:#define GET_ATTRDEF_LIST
        -:   35:#include "mlir/Dialect/AMDGPU/AMDGPUAttributes.cpp.inc"
    #####:   36:      >();
call    0 never executed
call    1 never executed
    #####:   37:}
        -:   38:
        -:   39://===----------------------------------------------------------------------===//
        -:   40:// RawBuffer*Op
        -:   41://===----------------------------------------------------------------------===//
        -:   42:template <typename T>
    #####:   43:static LogicalResult verifyRawBufferOp(T &op) {
    #####:   44:  MemRefType bufferType = op.getMemref().getType().template cast<MemRefType>();
    #####:   45:  if (bufferType.getMemorySpaceAsInt() != 0)
        -:   46:    return op.emitOpError(
    #####:   47:        "Buffer ops must operate on a memref in global memory");
    #####:   48:  if (!bufferType.hasRank())
        -:   49:    return op.emitOpError(
    #####:   50:        "Cannot meaningfully buffer_store to an unranked memref");
    #####:   51:  if (static_cast<int64_t>(op.getIndices().size()) != bufferType.getRank())
    #####:   52:    return op.emitOpError("Expected " + Twine(bufferType.getRank()) +
    #####:   53:                          " indices to memref");
    #####:   54:  return success();
        -:   55:}
------------------
_Z17verifyRawBufferOpIN4mlir6amdgpu21RawBufferAtomicFaddOpEENS0_13LogicalResultERT_:
function _Z17verifyRawBufferOpIN4mlir6amdgpu21RawBufferAtomicFaddOpEENS0_13LogicalResultERT_ called 0 returned 0% blocks executed 0%
    #####:   43:static LogicalResult verifyRawBufferOp(T &op) {
    #####:   44:  MemRefType bufferType = op.getMemref().getType().template cast<MemRefType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   45:  if (bufferType.getMemorySpaceAsInt() != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   46:    return op.emitOpError(
    #####:   47:        "Buffer ops must operate on a memref in global memory");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   48:  if (!bufferType.hasRank())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   49:    return op.emitOpError(
    #####:   50:        "Cannot meaningfully buffer_store to an unranked memref");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   51:  if (static_cast<int64_t>(op.getIndices().size()) != bufferType.getRank())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    return op.emitOpError("Expected " + Twine(bufferType.getRank()) +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   53:                          " indices to memref");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   54:  return success();
        -:   55:}
------------------
_Z17verifyRawBufferOpIN4mlir6amdgpu16RawBufferStoreOpEENS0_13LogicalResultERT_:
function _Z17verifyRawBufferOpIN4mlir6amdgpu16RawBufferStoreOpEENS0_13LogicalResultERT_ called 0 returned 0% blocks executed 0%
    #####:   43:static LogicalResult verifyRawBufferOp(T &op) {
    #####:   44:  MemRefType bufferType = op.getMemref().getType().template cast<MemRefType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   45:  if (bufferType.getMemorySpaceAsInt() != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   46:    return op.emitOpError(
    #####:   47:        "Buffer ops must operate on a memref in global memory");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   48:  if (!bufferType.hasRank())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   49:    return op.emitOpError(
    #####:   50:        "Cannot meaningfully buffer_store to an unranked memref");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   51:  if (static_cast<int64_t>(op.getIndices().size()) != bufferType.getRank())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    return op.emitOpError("Expected " + Twine(bufferType.getRank()) +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   53:                          " indices to memref");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   54:  return success();
        -:   55:}
------------------
_Z17verifyRawBufferOpIN4mlir6amdgpu15RawBufferLoadOpEENS0_13LogicalResultERT_:
function _Z17verifyRawBufferOpIN4mlir6amdgpu15RawBufferLoadOpEENS0_13LogicalResultERT_ called 0 returned 0% blocks executed 0%
    #####:   43:static LogicalResult verifyRawBufferOp(T &op) {
    #####:   44:  MemRefType bufferType = op.getMemref().getType().template cast<MemRefType>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   45:  if (bufferType.getMemorySpaceAsInt() != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   46:    return op.emitOpError(
    #####:   47:        "Buffer ops must operate on a memref in global memory");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   48:  if (!bufferType.hasRank())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   49:    return op.emitOpError(
    #####:   50:        "Cannot meaningfully buffer_store to an unranked memref");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   51:  if (static_cast<int64_t>(op.getIndices().size()) != bufferType.getRank())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:    return op.emitOpError("Expected " + Twine(bufferType.getRank()) +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   53:                          " indices to memref");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   54:  return success();
        -:   55:}
------------------
        -:   56:
function _ZN4mlir6amdgpu15RawBufferLoadOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   57:LogicalResult RawBufferLoadOp::verify() { return verifyRawBufferOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:   58:
function _ZN4mlir6amdgpu16RawBufferStoreOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   59:LogicalResult RawBufferStoreOp::verify() { return verifyRawBufferOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:   60:
function _ZN4mlir6amdgpu21RawBufferAtomicFaddOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   61:LogicalResult RawBufferAtomicFaddOp::verify() {
    #####:   62:  return verifyRawBufferOp(*this);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:}
        -:   64:
        -:   65://===----------------------------------------------------------------------===//
        -:   66:// MFMAOp
        -:   67://===----------------------------------------------------------------------===//
function _ZN4mlir6amdgpu6MFMAOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   68:LogicalResult MFMAOp::verify() {
    #####:   69:  constexpr uint32_t waveSize = 64;
    #####:   70:  Builder b(getContext());
call    0 never executed
call    1 never executed
        -:   71:
    #####:   72:  Type sourceType = getSourceA().getType();
call    0 never executed
call    1 never executed
    #####:   73:  Type destType = getDestC().getType();
call    0 never executed
call    1 never executed
        -:   74:
    #####:   75:  Type sourceElem = sourceType, destElem = destType;
    #####:   76:  uint32_t sourceLen = 1, destLen = 1;
    #####:   77:  if (auto sourceVector = sourceType.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:    sourceLen = sourceVector.getNumElements();
call    0 never executed
    #####:   79:    sourceElem = sourceVector.getElementType();
call    0 never executed
        -:   80:  }
    #####:   81:  if (auto destVector = destType.dyn_cast<VectorType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:    destLen = destVector.getNumElements();
call    0 never executed
    #####:   83:    destElem = destVector.getElementType();
call    0 never executed
        -:   84:  }
        -:   85:
        -:   86:  // Normalize the wider integer types the compiler expects to i8
    #####:   87:  if (sourceElem.isInteger(32)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:    sourceLen *= 4;
    #####:   89:    sourceElem = b.getI8Type();
call    0 never executed
        -:   90:  }
    #####:   91:  if (sourceElem.isInteger(64)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   92:    sourceLen *= 8;
    #####:   93:    sourceElem = b.getI8Type();
call    0 never executed
        -:   94:  }
        -:   95:
    #####:   96:  int64_t numSourceElems = (getM() * getK() * getBlocks()) / waveSize;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   97:  if (sourceLen != numSourceElems)
branch  0 never executed
branch  1 never executed
    #####:   98:    return emitOpError("expected " + Twine(numSourceElems) +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   99:                       " source values for this operation but got " +
call    0 never executed
call    1 never executed
    #####:  100:                       Twine(sourceLen));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  101:
    #####:  102:  int64_t numDestElems = (getM() * getN() * getBlocks()) / waveSize;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  103:  if (destLen != numDestElems)
branch  0 never executed
branch  1 never executed
    #####:  104:    return emitOpError("expected " + Twine(numDestElems) +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  105:                       " result values for this operation but got " +
call    0 never executed
call    1 never executed
    #####:  106:                       Twine(destLen));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  107:
    #####:  108:  if (destElem.isF64() && getBlgp() != MFMAPermB::none)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  109:    return emitOpError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  110:        "double-precision ops do not support permuting lanes of B");
call    0 never executed
    #####:  111:  if (destElem.isF64() && getCbsz() != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  112:    return emitOpError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  113:        "double-precision ops do not support permuting lanes of A");
call    0 never executed
    #####:  114:  if (getAbid() >= (1u << getCbsz()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  115:    return emitOpError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  116:        "block ID for permuting A (abid) must be below 2 ** cbsz");
call    0 never executed
        -:  117:
    #####:  118:  if ((getNegateA() || getNegateB() || getNegateC()) && !destElem.isF64())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  119:    return emitOpError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  120:        "negation flags only available for double-precision operations");
call    0 never executed
        -:  121:
    #####:  122:  return success();
        -:  123:}
        -:  124:
        -:  125:#include "mlir/Dialect/AMDGPU/AMDGPUEnums.cpp.inc"
        -:  126:
        -:  127:#define GET_ATTRDEF_CLASSES
        -:  128:#include "mlir/Dialect/AMDGPU/AMDGPUAttributes.cpp.inc"
        -:  129:
        -:  130:#define GET_OP_CLASSES
        -:  131:#include "mlir/Dialect/AMDGPU/AMDGPU.cpp.inc"
