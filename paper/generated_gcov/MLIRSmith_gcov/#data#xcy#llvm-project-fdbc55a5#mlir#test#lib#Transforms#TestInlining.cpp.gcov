        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Transforms/TestInlining.cpp
        -:    0:Graph:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestInlining.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestInlining.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestInlining.cpp - Pass to inline calls in the test dialect --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// TODO: This pass is only necessary because the main inlining pass
        -:   10:// has not abstracted away the call+callee relationship. When the inlining
        -:   11:// interface has this support, this pass should be removed.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "TestDialect.h"
        -:   16:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   17:#include "mlir/IR/BlockAndValueMapping.h"
        -:   18:#include "mlir/IR/BuiltinOps.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:#include "mlir/Transforms/InliningUtils.h"
        -:   21:#include "llvm/ADT/StringSet.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace test;
        -:   25:
        -:   26:namespace {
   147226:   27:struct Inliner : public PassWrapper<Inliner, OperationPass<func::FuncOp>> {
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_17Inliner13resolveTypeIDEv called 116698 returned 100% blocks executed 100%
   116698:   28:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(Inliner)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   29:
function _ZNK12_GLOBAL__N_17Inliner11getArgumentEv called 116176 returned 100% blocks executed 100%
   116176:   30:  StringRef getArgument() const final { return "test-inline"; }
function _ZNK12_GLOBAL__N_17Inliner14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   31:  StringRef getDescription() const final {
   116163:   32:    return "Test inlining region calls";
        -:   33:  }
        -:   34:
function _ZN12_GLOBAL__N_17Inliner14runOnOperationEv called 511 returned 99% blocks executed 26%
      511:   35:  void runOnOperation() override {
      511:   36:    auto function = getOperation();
call    0 returned 100%
        -:   37:
        -:   38:    // Collect each of the direct function calls within the module.
      511:   39:    SmallVector<func::CallIndirectOp, 16> callers;
call    0 returned 99%
      511:   40:    function.walk(
call    0 returned 99%
    #####:   41:        [&](func::CallIndirectOp caller) { callers.push_back(caller); });
call    0 never executed
        -:   42:
        -:   43:    // Build the inliner interface.
     1013:   44:    InlinerInterface interface(&getContext());
call    0 returned 100%
call    1 returned 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   45:
        -:   46:    // Try to inline each of the call operations.
     500*:   47:    for (auto caller : callers) {
branch  0 taken -0% (fallthrough)
branch  1 taken 100%
    #####:   48:      auto callee = dyn_cast_or_null<FunctionalRegionOp>(
    #####:   49:          caller.getCallee().getDefiningOp());
call    0 returned -0%
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   50:      if (!callee)
branch  0 never executed
branch  1 never executed
    #####:   51:        continue;
        -:   52:
        -:   53:      // Inline the functional region operation, but only clone the internal
        -:   54:      // region if there is more than one use.
    #####:   55:      if (failed(inlineRegion(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   56:              interface, &callee.getBody(), caller, caller.getArgOperands(),
call    0 never executed
    #####:   57:              caller.getResults(), caller.getLoc(),
    #####:   58:              /*shouldCloneInlinedRegion=*/!callee.getResult().hasOneUse())))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   59:        continue;
        -:   60:
        -:   61:      // If the inlining was successful then erase the call and callee if
        -:   62:      // possible.
    #####:   63:      caller.erase();
call    0 never executed
    #####:   64:      if (callee.use_empty())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   65:        callee.erase();
call    0 never executed
        -:   66:    }
      507:   67:  }
        -:   68:};
        -:   69:} // namespace
        -:   70:
        -:   71:namespace mlir {
        -:   72:namespace test {
function _ZN4mlir4test15registerInlinerEv called 116163 returned 100% blocks executed 100%
   116163:   73:void registerInliner() { PassRegistration<Inliner>(); }
call    0 returned 100%
        -:   74:} // namespace test
        -:   75:} // namespace mlir
