        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/IR/TestPrintInvalid.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestPrintInvalid.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestPrintInvalid.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestPrintInvalid.cpp - Test printing invalid ops -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This pass creates and prints to the standard output an invalid operation and
        -:   10:// a valid operation.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   15:#include "mlir/IR/BuiltinOps.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "llvm/Support/raw_ostream.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace {
  116691*:   22:struct TestPrintInvalidPass
call    0 never executed
call    1 returned 100%
        -:   23:    : public PassWrapper<TestPrintInvalidPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_120TestPrintInvalidPass13resolveTypeIDEv called 116691 returned 100% blocks executed 100%
   116691:   24:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestPrintInvalidPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   25:
function _ZNK12_GLOBAL__N_120TestPrintInvalidPass11getArgumentEv called 116176 returned 100% blocks executed 100%
   116176:   26:  StringRef getArgument() const final { return "test-print-invalid"; }
function _ZNK12_GLOBAL__N_120TestPrintInvalidPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   27:  StringRef getDescription() const final {
   116163:   28:    return "Test printing invalid ops.";
        -:   29:  }
function _ZNK12_GLOBAL__N_120TestPrintInvalidPass20getDependentDialectsERN4mlir15DialectRegistryE called 528 returned 100% blocks executed 100%
      528:   30:  void getDependentDialects(DialectRegistry &registry) const override {
      528:   31:    registry.insert<func::FuncDialect>();
call    0 returned 100%
      528:   32:  }
        -:   33:
function _ZN12_GLOBAL__N_120TestPrintInvalidPass14runOnOperationEv called 392 returned 100% blocks executed 100%
      392:   34:  void runOnOperation() override {
      392:   35:    Location loc = getOperation().getLoc();
call    0 returned 100%
call    1 returned 100%
      392:   36:    OpBuilder builder(getOperation().getBodyRegion());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      392:   37:    auto funcOp = builder.create<func::FuncOp>(
call    0 returned 100%
      392:   38:        loc, "test", FunctionType::get(getOperation().getContext(), {}, {}));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      392:   39:    funcOp.addEntryBlock();
call    0 returned 100%
        -:   40:    // The created function is invalid because there is no return op.
      392:   41:    llvm::outs() << "Invalid operation:\n" << funcOp << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      392:   42:    builder.setInsertionPointToEnd(&funcOp.getBody().front());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      392:   43:    builder.create<func::ReturnOp>(loc);
call    0 returned 100%
        -:   44:    // Now this function is valid.
      392:   45:    llvm::outs() << "Valid operation:\n" << funcOp << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      392:   46:    funcOp.erase();
call    0 returned 100%
      392:   47:  }
        -:   48:};
        -:   49:} // namespace
        -:   50:
        -:   51:namespace mlir {
function _ZN4mlir28registerTestPrintInvalidPassEv called 116163 returned 100% blocks executed 100%
   116163:   52:void registerTestPrintInvalidPass() {
   116163:   53:  PassRegistration<TestPrintInvalidPass>{};
call    0 returned 100%
   116163:   54:}
        -:   55:} // namespace mlir
