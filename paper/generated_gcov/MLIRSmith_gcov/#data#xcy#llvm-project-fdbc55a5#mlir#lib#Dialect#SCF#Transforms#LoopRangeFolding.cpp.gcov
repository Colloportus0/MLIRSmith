        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SCF/Transforms/LoopRangeFolding.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/LoopRangeFolding.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/LoopRangeFolding.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- LoopRangeFolding.cpp - Code to perform loop range folding-----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop range folding.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   17:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   18:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   19:#include "mlir/IR/BlockAndValueMapping.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_SCFFORLOOPRANGEFOLDING
        -:   23:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace mlir::scf;
        -:   28:
        -:   29:namespace {
  116691*:   30:struct ForLoopRangeFolding
call    0 never executed
call    1 returned 100%
        -:   31:    : public impl::SCFForLoopRangeFoldingBase<ForLoopRangeFolding> {
        -:   32:  void runOnOperation() override;
        -:   33:};
        -:   34:} // namespace
        -:   35:
function _ZN12_GLOBAL__N_119ForLoopRangeFolding14runOnOperationEv called 405 returned 100% blocks executed 75%
      405:   36:void ForLoopRangeFolding::runOnOperation() {
function _ZZN12_GLOBAL__N_119ForLoopRangeFolding14runOnOperationEvENKUlN4mlir3scf5ForOpEE_clES3_.isra.0 called 9 returned 100% blocks executed 12%
      405:   37:  getOperation()->walk([&](ForOp op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        9:   38:    Value indVar = op.getInductionVar();
call    0 returned 100%
        -:   39:
       9*:   40:    auto canBeFolded = [&](Value value) {
    #####:   41:      return op.isDefinedOutsideOfLoop(value) || value == indVar;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        9:   42:    };
        -:   43:
        -:   44:    // Fold until a fixed point is reached
       9*:   45:    while (true) {
        -:   46:
        -:   47:      // If the induction variable is used more than once, we can't fold its
        -:   48:      // arith ops into the loop range
        9:   49:      if (!indVar.hasOneUse())
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -:   50:        break;
        -:   51:
    #####:   52:      Operation *user = *indVar.getUsers().begin();
call    0 never executed
    #####:   53:      if (!isa<arith::AddIOp, arith::MulIOp>(user))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   54:        break;
        -:   55:
    #####:   56:      if (!llvm::all_of(user->getOperands(), canBeFolded))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   57:        break;
        -:   58:
    #####:   59:      OpBuilder b(op);
call    0 never executed
    #####:   60:      BlockAndValueMapping lbMap;
call    0 never executed
call    1 never executed
    #####:   61:      lbMap.map(indVar, op.getLowerBound());
call    0 never executed
call    1 never executed
    #####:   62:      BlockAndValueMapping ubMap;
call    0 never executed
call    1 never executed
    #####:   63:      ubMap.map(indVar, op.getUpperBound());
call    0 never executed
call    1 never executed
    #####:   64:      BlockAndValueMapping stepMap;
call    0 never executed
call    1 never executed
    #####:   65:      stepMap.map(indVar, op.getStep());
call    0 never executed
call    1 never executed
        -:   66:
    #####:   67:      if (isa<arith::AddIOp>(user)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:        Operation *lbFold = b.clone(*user, lbMap);
call    0 never executed
    #####:   69:        Operation *ubFold = b.clone(*user, ubMap);
call    0 never executed
        -:   70:
    #####:   71:        op.setLowerBound(lbFold->getResult(0));
call    0 never executed
    #####:   72:        op.setUpperBound(ubFold->getResult(0));
call    0 never executed
        -:   73:
    #####:   74:      } else if (isa<arith::MulIOp>(user)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:        Operation *ubFold = b.clone(*user, ubMap);
call    0 never executed
    #####:   76:        Operation *stepFold = b.clone(*user, stepMap);
call    0 never executed
        -:   77:
    #####:   78:        op.setUpperBound(ubFold->getResult(0));
call    0 never executed
    #####:   79:        op.setStep(stepFold->getResult(0));
call    0 never executed
        -:   80:      }
        -:   81:
    #####:   82:      ValueRange wrapIndvar(indVar);
call    0 never executed
    #####:   83:      user->replaceAllUsesWith(wrapIndvar);
branch  0 never executed
branch  1 never executed
    #####:   84:      user->erase();
call    0 never executed
    #####:   85:    }
        9:   86:  });
      405:   87:}
        -:   88:
function _ZN4mlir29createForLoopRangeFoldingPassEv called 116691 returned 100% blocks executed 100%
   116691:   89:std::unique_ptr<Pass> mlir::createForLoopRangeFoldingPass() {
   116691:   90:  return std::make_unique<ForLoopRangeFolding>();
call    0 returned 100%
        -:   91:}
