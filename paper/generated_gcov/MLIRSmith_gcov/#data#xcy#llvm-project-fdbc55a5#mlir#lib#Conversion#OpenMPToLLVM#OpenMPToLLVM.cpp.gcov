        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/OpenMPToLLVM/OpenMPToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/OpenMPToLLVM/CMakeFiles/obj.MLIROpenMPToLLVM.dir/OpenMPToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/OpenMPToLLVM/CMakeFiles/obj.MLIROpenMPToLLVM.dir/OpenMPToLLVM.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- OpenMPToLLVM.cpp - conversion from OpenMP to LLVM dialect ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/OpenMPToLLVM/ConvertOpenMPToLLVM.h"
        -:   10:
        -:   11:#include "mlir/Conversion/ArithToLLVM/ArithToLLVM.h"
        -:   12:#include "mlir/Conversion/ControlFlowToLLVM/ControlFlowToLLVM.h"
        -:   13:#include "mlir/Conversion/FuncToLLVM/ConvertFuncToLLVM.h"
        -:   14:#include "mlir/Conversion/FuncToLLVM/ConvertFuncToLLVMPass.h"
        -:   15:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   16:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   17:#include "mlir/Conversion/MemRefToLLVM/MemRefToLLVM.h"
        -:   18:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   19:#include "mlir/Dialect/OpenMP/OpenMPDialect.h"
        -:   20:#include "mlir/Pass/Pass.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:#define GEN_PASS_DEF_CONVERTOPENMPTOLLVM
        -:   24:#include "mlir/Conversion/Passes.h.inc"
        -:   25:} // namespace mlir
        -:   26:
        -:   27:using namespace mlir;
        -:   28:
        -:   29:namespace {
        -:   30:/// A pattern that converts the region arguments in a single-region OpenMP
        -:   31:/// operation to the LLVM dialect. The body of the region is not modified and is
        -:   32:/// expected to either be processed by the conversion infrastructure or already
        -:   33:/// contain ops compatible with LLVM dialect types.
        -:   34:template <typename OpType>
        -:   35:struct RegionOpConversion : public ConvertOpToLLVMPattern<OpType> {
     3472:   36:  using ConvertOpToLLVMPattern<OpType>::ConvertOpToLLVMPattern;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:   37:
        -:   38:  LogicalResult
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
    #####:   44:                                newOp.getRegion().end());
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
    #####:   46:                                           *this->getTypeConverter())))
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10CriticalOpEE15matchAndRewriteES3_NS2_17CriticalOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10CriticalOpEE15matchAndRewriteES3_NS2_17CriticalOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp8MasterOpEE15matchAndRewriteES3_NS2_15MasterOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp8MasterOpEE15matchAndRewriteES3_NS2_15MasterOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10ParallelOpEE15matchAndRewriteES3_NS2_17ParallelOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10ParallelOpEE15matchAndRewriteES3_NS2_17ParallelOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp8WsLoopOpEE15matchAndRewriteES3_NS2_15WsLoopOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp8WsLoopOpEE15matchAndRewriteES3_NS2_15WsLoopOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10SectionsOpEE15matchAndRewriteES3_NS2_17SectionsOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10SectionsOpEE15matchAndRewriteES3_NS2_17SectionsOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10SimdLoopOpEE15matchAndRewriteES3_NS2_17SimdLoopOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp10SimdLoopOpEE15matchAndRewriteES3_NS2_17SimdLoopOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
_ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp8SingleOpEE15matchAndRewriteES3_NS2_15SingleOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_118RegionOpConversionIN4mlir3omp8SingleOpEE15matchAndRewriteES3_NS2_15SingleOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(OpType curOp, typename OpType::Adaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    auto newOp = rewriter.create<OpType>(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   42:        curOp.getLoc(), TypeRange(), adaptor.getOperands(), curOp->getAttrs());
    #####:   43:    rewriter.inlineRegionBefore(curOp.getRegion(), newOp.getRegion(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   44:                                newOp.getRegion().end());
call    0 never executed
call    1 never executed
    #####:   45:    if (failed(rewriter.convertRegionTypes(&newOp.getRegion(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   46:                                           *this->getTypeConverter())))
call    0 never executed
    #####:   47:      return failure();
        -:   48:
    #####:   49:    rewriter.eraseOp(curOp);
call    0 never executed
    #####:   50:    return success();
        -:   51:  }
------------------
        -:   52:};
        -:   53:
        -:   54:template <typename T>
        -:   55:struct RegionLessOpWithVarOperandsConversion
        -:   56:    : public ConvertOpToLLVMPattern<T> {
     1736:   57:  using ConvertOpToLLVMPattern<T>::ConvertOpToLLVMPattern;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   58:  LogicalResult
    #####:   59:  matchAndRewrite(T curOp, typename T::Adaptor adaptor,
        -:   60:                  ConversionPatternRewriter &rewriter) const override {
    #####:   61:    TypeConverter *converter = ConvertToLLVMPattern::getTypeConverter();
    #####:   62:    SmallVector<Type> resTypes;
    #####:   63:    if (failed(converter->convertTypes(curOp->getResultTypes(), resTypes)))
    #####:   64:      return failure();
    #####:   65:    SmallVector<Value> convertedOperands;
    #####:   66:    assert(curOp.getNumVariableOperands() ==
        -:   67:               curOp.getOperation()->getNumOperands() &&
        -:   68:           "unexpected non-variable operands");
    #####:   69:    for (unsigned idx = 0; idx < curOp.getNumVariableOperands(); ++idx) {
    #####:   70:      Value originalVariableOperand = curOp.getVariableOperand(idx);
    #####:   71:      if (!originalVariableOperand)
    #####:   72:        return failure();
    #####:   73:      if (originalVariableOperand.getType().isa<MemRefType>()) {
        -:   74:        // TODO: Support memref type in variable operands
        -:   75:        return rewriter.notifyMatchFailure(curOp,
    #####:   76:                                           "memref is not supported yet");
        -:   77:      }
    #####:   78:      convertedOperands.emplace_back(adaptor.getOperands()[idx]);
        -:   79:    }
    #####:   80:    rewriter.replaceOpWithNewOp<T>(curOp, resTypes, convertedOperands,
        -:   81:                                   curOp->getAttrs());
    #####:   82:    return success();
        -:   83:  }
------------------
_ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp12AtomicReadOpEE15matchAndRewriteES3_NS2_19AtomicReadOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp12AtomicReadOpEE15matchAndRewriteES3_NS2_19AtomicReadOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   59:  matchAndRewrite(T curOp, typename T::Adaptor adaptor,
        -:   60:                  ConversionPatternRewriter &rewriter) const override {
    #####:   61:    TypeConverter *converter = ConvertToLLVMPattern::getTypeConverter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    SmallVector<Type> resTypes;
    #####:   63:    if (failed(converter->convertTypes(curOp->getResultTypes(), resTypes)))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   64:      return failure();
    #####:   65:    SmallVector<Value> convertedOperands;
branch  0 never executed
branch  1 never executed
    #####:   66:    assert(curOp.getNumVariableOperands() ==
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   67:               curOp.getOperation()->getNumOperands() &&
        -:   68:           "unexpected non-variable operands");
    #####:   69:    for (unsigned idx = 0; idx < curOp.getNumVariableOperands(); ++idx) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:      Value originalVariableOperand = curOp.getVariableOperand(idx);
call    0 never executed
    #####:   71:      if (!originalVariableOperand)
branch  0 never executed
branch  1 never executed
    #####:   72:        return failure();
    #####:   73:      if (originalVariableOperand.getType().isa<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:        // TODO: Support memref type in variable operands
        -:   75:        return rewriter.notifyMatchFailure(curOp,
    #####:   76:                                           "memref is not supported yet");
call    0 never executed
        -:   77:      }
    #####:   78:      convertedOperands.emplace_back(adaptor.getOperands()[idx]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   79:    }
    #####:   80:    rewriter.replaceOpWithNewOp<T>(curOp, resTypes, convertedOperands,
call    0 never executed
call    1 never executed
        -:   81:                                   curOp->getAttrs());
    #####:   82:    return success();
branch  0 never executed
branch  1 never executed
        -:   83:  }
------------------
_ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp13AtomicWriteOpEE15matchAndRewriteES3_NS2_20AtomicWriteOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp13AtomicWriteOpEE15matchAndRewriteES3_NS2_20AtomicWriteOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   59:  matchAndRewrite(T curOp, typename T::Adaptor adaptor,
        -:   60:                  ConversionPatternRewriter &rewriter) const override {
    #####:   61:    TypeConverter *converter = ConvertToLLVMPattern::getTypeConverter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    SmallVector<Type> resTypes;
    #####:   63:    if (failed(converter->convertTypes(curOp->getResultTypes(), resTypes)))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   64:      return failure();
    #####:   65:    SmallVector<Value> convertedOperands;
branch  0 never executed
branch  1 never executed
    #####:   66:    assert(curOp.getNumVariableOperands() ==
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   67:               curOp.getOperation()->getNumOperands() &&
        -:   68:           "unexpected non-variable operands");
    #####:   69:    for (unsigned idx = 0; idx < curOp.getNumVariableOperands(); ++idx) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:      Value originalVariableOperand = curOp.getVariableOperand(idx);
call    0 never executed
    #####:   71:      if (!originalVariableOperand)
branch  0 never executed
branch  1 never executed
    #####:   72:        return failure();
    #####:   73:      if (originalVariableOperand.getType().isa<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:        // TODO: Support memref type in variable operands
        -:   75:        return rewriter.notifyMatchFailure(curOp,
    #####:   76:                                           "memref is not supported yet");
call    0 never executed
        -:   77:      }
    #####:   78:      convertedOperands.emplace_back(adaptor.getOperands()[idx]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   79:    }
    #####:   80:    rewriter.replaceOpWithNewOp<T>(curOp, resTypes, convertedOperands,
call    0 never executed
call    1 never executed
        -:   81:                                   curOp->getAttrs());
    #####:   82:    return success();
branch  0 never executed
branch  1 never executed
        -:   83:  }
------------------
_ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp7FlushOpEE15matchAndRewriteES3_NS2_14FlushOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp7FlushOpEE15matchAndRewriteES3_NS2_14FlushOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   59:  matchAndRewrite(T curOp, typename T::Adaptor adaptor,
        -:   60:                  ConversionPatternRewriter &rewriter) const override {
    #####:   61:    TypeConverter *converter = ConvertToLLVMPattern::getTypeConverter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    SmallVector<Type> resTypes;
    #####:   63:    if (failed(converter->convertTypes(curOp->getResultTypes(), resTypes)))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   64:      return failure();
    #####:   65:    SmallVector<Value> convertedOperands;
branch  0 never executed
branch  1 never executed
    #####:   66:    assert(curOp.getNumVariableOperands() ==
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   67:               curOp.getOperation()->getNumOperands() &&
        -:   68:           "unexpected non-variable operands");
    #####:   69:    for (unsigned idx = 0; idx < curOp.getNumVariableOperands(); ++idx) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:      Value originalVariableOperand = curOp.getVariableOperand(idx);
    #####:   71:      if (!originalVariableOperand)
branch  0 never executed
branch  1 never executed
    #####:   72:        return failure();
    #####:   73:      if (originalVariableOperand.getType().isa<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:        // TODO: Support memref type in variable operands
        -:   75:        return rewriter.notifyMatchFailure(curOp,
    #####:   76:                                           "memref is not supported yet");
call    0 never executed
        -:   77:      }
    #####:   78:      convertedOperands.emplace_back(adaptor.getOperands()[idx]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   79:    }
    #####:   80:    rewriter.replaceOpWithNewOp<T>(curOp, resTypes, convertedOperands,
call    0 never executed
call    1 never executed
        -:   81:                                   curOp->getAttrs());
    #####:   82:    return success();
branch  0 never executed
branch  1 never executed
        -:   83:  }
------------------
_ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp15ThreadprivateOpEE15matchAndRewriteES3_NS2_22ThreadprivateOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_137RegionLessOpWithVarOperandsConversionIN4mlir3omp15ThreadprivateOpEE15matchAndRewriteES3_NS2_22ThreadprivateOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   59:  matchAndRewrite(T curOp, typename T::Adaptor adaptor,
        -:   60:                  ConversionPatternRewriter &rewriter) const override {
    #####:   61:    TypeConverter *converter = ConvertToLLVMPattern::getTypeConverter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    SmallVector<Type> resTypes;
    #####:   63:    if (failed(converter->convertTypes(curOp->getResultTypes(), resTypes)))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   64:      return failure();
    #####:   65:    SmallVector<Value> convertedOperands;
branch  0 never executed
branch  1 never executed
    #####:   66:    assert(curOp.getNumVariableOperands() ==
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   67:               curOp.getOperation()->getNumOperands() &&
        -:   68:           "unexpected non-variable operands");
    #####:   69:    for (unsigned idx = 0; idx < curOp.getNumVariableOperands(); ++idx) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:      Value originalVariableOperand = curOp.getVariableOperand(idx);
call    0 never executed
    #####:   71:      if (!originalVariableOperand)
branch  0 never executed
branch  1 never executed
    #####:   72:        return failure();
    #####:   73:      if (originalVariableOperand.getType().isa<MemRefType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:        // TODO: Support memref type in variable operands
        -:   75:        return rewriter.notifyMatchFailure(curOp,
    #####:   76:                                           "memref is not supported yet");
call    0 never executed
        -:   77:      }
    #####:   78:      convertedOperands.emplace_back(adaptor.getOperands()[idx]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   79:    }
    #####:   80:    rewriter.replaceOpWithNewOp<T>(curOp, resTypes, convertedOperands,
call    0 never executed
call    1 never executed
        -:   81:                                   curOp->getAttrs());
    #####:   82:    return success();
branch  0 never executed
branch  1 never executed
        -:   83:  }
------------------
        -:   84:};
        -:   85:
        -:   86:struct ReductionOpConversion : public ConvertOpToLLVMPattern<omp::ReductionOp> {
      868:   87:  using ConvertOpToLLVMPattern<omp::ReductionOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   88:  LogicalResult
function _ZNK12_GLOBAL__N_121ReductionOpConversion15matchAndRewriteEN4mlir3omp11ReductionOpENS2_18ReductionOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   89:  matchAndRewrite(omp::ReductionOp curOp, OpAdaptor adaptor,
        -:   90:                  ConversionPatternRewriter &rewriter) const override {
    #####:   91:    if (curOp.getAccumulator().getType().isa<MemRefType>()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   92:      // TODO: Support memref type in variable operands
    #####:   93:      return rewriter.notifyMatchFailure(curOp, "memref is not supported yet");
call    0 never executed
        -:   94:    }
    #####:   95:    rewriter.replaceOpWithNewOp<omp::ReductionOp>(
    #####:   96:        curOp, TypeRange(), adaptor.getOperands(), curOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   97:    return success();
        -:   98:  }
        -:   99:};
        -:  100:} // namespace
        -:  101:
function _ZN4mlir39configureOpenMPToLLVMConversionLegalityERNS_16ConversionTargetERNS_17LLVMTypeConverterE called 434 returned 100% blocks executed 100%
      434:  102:void mlir::configureOpenMPToLLVMConversionLegality(
        -:  103:    ConversionTarget &target, LLVMTypeConverter &typeConverter) {
      434:  104:  target.addDynamicallyLegalOp<mlir::omp::CriticalOp, mlir::omp::ParallelOp,
        -:  105:                               mlir::omp::WsLoopOp, mlir::omp::SimdLoopOp,
        -:  106:                               mlir::omp::MasterOp, mlir::omp::SectionsOp,
function _ZZN4mlir39configureOpenMPToLLVMConversionLegalityERNS_16ConversionTargetERNS_17LLVMTypeConverterEENKUlPNS_9OperationEE_clES5_.isra.0 called 0 returned 0% blocks executed 0%
     434*:  107:                               mlir::omp::SingleOp>([&](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:  108:    return typeConverter.isLegal(&op->getRegion(0)) &&
call    0 never executed
call    1 never executed
    #####:  109:           typeConverter.isLegal(op->getOperandTypes()) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  110:           typeConverter.isLegal(op->getResultTypes());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  111:  });
      434:  112:  target
        -:  113:      .addDynamicallyLegalOp<mlir::omp::AtomicReadOp, mlir::omp::AtomicWriteOp,
      868:  114:                             mlir::omp::FlushOp, mlir::omp::ThreadprivateOp>(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
function _ZZN4mlir39configureOpenMPToLLVMConversionLegalityERNS_16ConversionTargetERNS_17LLVMTypeConverterEENKUlPNS_9OperationEE0_clES5_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  115:          [&](Operation *op) {
    #####:  116:            return typeConverter.isLegal(op->getOperandTypes()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  117:                   typeConverter.isLegal(op->getResultTypes());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  118:          });
function _ZZN4mlir39configureOpenMPToLLVMConversionLegalityERNS_16ConversionTargetERNS_17LLVMTypeConverterEENKUlPNS_9OperationEE1_clES5_.isra.0 called 0 returned 0% blocks executed 0%
     434*:  119:  target.addDynamicallyLegalOp<mlir::omp::ReductionOp>([&](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:  120:    return typeConverter.isLegal(op->getOperandTypes());
call    0 never executed
call    1 never executed
        -:  121:  });
      434:  122:}
        -:  123:
function _ZN4mlir38populateOpenMPToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     434*:  124:void mlir::populateOpenMPToLLVMConversionPatterns(LLVMTypeConverter &converter,
        -:  125:                                                  RewritePatternSet &patterns) {
     434*:  126:  patterns.add<
        -:  127:      ReductionOpConversion, RegionOpConversion<omp::CriticalOp>,
        -:  128:      RegionOpConversion<omp::MasterOp>, ReductionOpConversion,
        -:  129:      RegionOpConversion<omp::MasterOp>, RegionOpConversion<omp::ParallelOp>,
        -:  130:      RegionOpConversion<omp::WsLoopOp>, RegionOpConversion<omp::SectionsOp>,
        -:  131:      RegionOpConversion<omp::SimdLoopOp>, RegionOpConversion<omp::SingleOp>,
        -:  132:      RegionLessOpWithVarOperandsConversion<omp::AtomicReadOp>,
        -:  133:      RegionLessOpWithVarOperandsConversion<omp::AtomicWriteOp>,
        -:  134:      RegionLessOpWithVarOperandsConversion<omp::FlushOp>,
    #####:  135:      RegionLessOpWithVarOperandsConversion<omp::ThreadprivateOp>>(converter);
call    0 never executed
    #####:  136:}
        -:  137:
        -:  138:namespace {
  116725*:  139:struct ConvertOpenMPToLLVMPass
call    0 never executed
call    1 returned 100%
        -:  140:    : public impl::ConvertOpenMPToLLVMBase<ConvertOpenMPToLLVMPass> {
        -:  141:  void runOnOperation() override;
        -:  142:};
        -:  143:} // namespace
        -:  144:
function _ZN12_GLOBAL__N_123ConvertOpenMPToLLVMPass14runOnOperationEv called 434 returned 100% blocks executed 96%
      434:  145:void ConvertOpenMPToLLVMPass::runOnOperation() {
      434:  146:  auto module = getOperation();
call    0 returned 100%
        -:  147:
        -:  148:  // Convert to OpenMP operations with LLVM IR dialect
      434:  149:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      868:  150:  LLVMTypeConverter converter(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      434:  151:  arith::populateArithToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
      434:  152:  cf::populateControlFlowToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
      434:  153:  populateMemRefToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
      434:  154:  populateFuncToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
      434:  155:  populateOpenMPToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
        -:  156:
      868:  157:  LLVMConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      434:  158:  target.addLegalOp<omp::TerminatorOp, omp::TaskyieldOp, omp::FlushOp,
      434:  159:                    omp::BarrierOp, omp::TaskwaitOp>();
call    0 returned 100%
      434:  160:  configureOpenMPToLLVMConversionLegality(target, converter);
call    0 returned 100%
      434:  161:  if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  162:    signalPassFailure();
call    0 never executed
      434:  163:}
        -:  164:
function _ZN4mlir29createConvertOpenMPToLLVMPassEv called 116725 returned 100% blocks executed 100%
   116725:  165:std::unique_ptr<OperationPass<ModuleOp>> mlir::createConvertOpenMPToLLVMPass() {
   116725:  166:  return std::make_unique<ConvertOpenMPToLLVMPass>();
call    0 returned 100%
        -:  167:}
