        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Support/IndentedOstream.cpp
        -:    0:Graph:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/IndentedOstream.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/IndentedOstream.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- IndentedOstream.cpp - raw ostream wrapper to indent ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// raw_ostream subclass that keeps track of indentation for textual output
        -:   10:// where indentation helps readability.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Support/IndentedOstream.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:raw_indented_ostream &
function _ZN4mlir20raw_indented_ostream15printReindentedEN4llvm9StringRefES2_ called 0 returned 0% blocks executed 0%
    #####:   19:mlir::raw_indented_ostream::printReindented(StringRef str,
        -:   20:                                            StringRef extraPrefix) {
    #####:   21:  StringRef output = str;
        -:   22:  // Skip empty lines.
    #####:   23:  while (!output.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   24:    auto split = output.split('\n');
call    0 never executed
    #####:   25:    size_t indent = split.first.find_first_not_of(" \t");
call    0 never executed
    #####:   26:    if (indent != StringRef::npos) {
branch  0 never executed
branch  1 never executed
        -:   27:      // Set an initial value.
    #####:   28:      leadingWs = indent;
    #####:   29:      break;
        -:   30:    }
    #####:   31:    output = split.second;
        -:   32:  }
        -:   33:  // Determine the maximum indent.
    #####:   34:  StringRef remaining = output;
    #####:   35:  while (!remaining.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   36:    auto split = remaining.split('\n');
call    0 never executed
    #####:   37:    size_t indent = split.first.find_first_not_of(" \t");
call    0 never executed
    #####:   38:    if (indent != StringRef::npos)
branch  0 never executed
branch  1 never executed
    #####:   39:      leadingWs = std::min(leadingWs, static_cast<int>(indent));
branch  0 never executed
branch  1 never executed
    #####:   40:    remaining = split.second;
        -:   41:  }
        -:   42:  // Print, skipping the empty lines.
    #####:   43:  std::swap(currentExtraPrefix, extraPrefix);
call    0 never executed
    #####:   44:  *this << output;
call    0 never executed
    #####:   45:  std::swap(currentExtraPrefix, extraPrefix);
    #####:   46:  leadingWs = 0;
    #####:   47:  return *this;
        -:   48:}
        -:   49:
function _ZN4mlir20raw_indented_ostream10write_implEPKcm called 9792713 returned 100% blocks executed 81%
  9792713:   50:void mlir::raw_indented_ostream::write_impl(const char *ptr, size_t size) {
  9792713:   51:  StringRef str(ptr, size);
        -:   52:  // Print out indented.
function _ZZN4mlir20raw_indented_ostream10write_implEPKcmENKUlN4llvm9StringRefEE_clES4_.isra.0 called 9792713 returned 100% blocks executed 87%
  9792713:   53:  auto print = [this](StringRef str) {
  9792713:   54:    if (atStartOfLine)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
  5820932:   55:      os.indent(currentIndent) << currentExtraPrefix << str.substr(leadingWs);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
        -:   56:    else
 13764494:   57:      os << str.substr(leadingWs);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
  9792713:   58:  };
        -:   59:
 12703179:   60:  while (!str.empty()) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
  9792713:   61:    size_t idx = str.find('\n');
  9792713:   62:    if (idx == StringRef::npos) {
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
 13764494:   63:      if (!str.substr(leadingWs).empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
  6882247:   64:        print(str);
call    0 returned 100%
  6882247:   65:        atStartOfLine = false;
        -:   66:      }
  6882247:   67:      break;
        -:   68:    }
        -:   69:
  2910466:   70:    auto split =
  8731398:   71:        std::make_pair(str.slice(0, idx), str.slice(idx + 1, StringRef::npos));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
        -:   72:    // Print empty new line without spaces if line only has spaces and no extra
        -:   73:    // prefix is requested.
 2910466*:   74:    if (!split.first.ltrim().empty() || !currentExtraPrefix.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
  2910466:   75:      print(split.first);
call    0 returned 100%
  2910466:   76:    os << '\n';
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  2910466:   77:    atStartOfLine = true;
  2910466:   78:    str = split.second;
        -:   79:  }
  9792713:   80:}
