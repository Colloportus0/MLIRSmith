        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Transform/Transforms/CheckUses.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Transform/Transforms/CMakeFiles/obj.MLIRTransformDialectTransforms.dir/CheckUses.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Transform/Transforms/CMakeFiles/obj.MLIRTransformDialectTransforms.dir/CheckUses.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- CheckUses.cpp - Expensive transform value validity checks ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines a pass that performs expensive opt-in checks for Transform
        -:   10:// dialect values being potentially used after they have been consumed.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Transform/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Transform/IR/TransformInterfaces.h"
        -:   17:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:#include "llvm/ADT/SetOperations.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace transform {
        -:   23:#define GEN_PASS_DEF_CHECKUSESPASS
        -:   24:#include "mlir/Dialect/Transform/Transforms/Passes.h.inc"
        -:   25:} // namespace transform
        -:   26:} // namespace mlir
        -:   27:
        -:   28:using namespace mlir;
        -:   29:
        -:   30:namespace {
        -:   31:
        -:   32:/// Returns a reference to a cached set of blocks that are reachable from the
        -:   33:/// given block via edges computed by the `getNextNodes` function. For example,
        -:   34:/// if `getNextNodes` returns successors of a block, this will return the set of
        -:   35:/// reachable blocks; if it returns predecessors of a block, this will return
        -:   36:/// the set of blocks from which the given block can be reached. The block is
        -:   37:/// considered reachable form itself only if there is a cycle.
        -:   38:template <typename FnTy>
        -:   39:const llvm::SmallPtrSet<Block *, 4> &
        -:   40:getReachableImpl(Block *block, FnTy getNextNodes,
        -:   41:                 DenseMap<Block *, llvm::SmallPtrSet<Block *, 4>> &cache) {
        -:   42:  auto it = cache.find(block);
        -:   43:  if (it != cache.end())
        -:   44:    return it->getSecond();
        -:   45:
        -:   46:  llvm::SmallPtrSet<Block *, 4> &reachable = cache[block];
        -:   47:  SmallVector<Block *> worklist;
        -:   48:  worklist.push_back(block);
        -:   49:  while (!worklist.empty()) {
        -:   50:    Block *current = worklist.pop_back_val();
        -:   51:    for (Block *predecessor : getNextNodes(current)) {
        -:   52:      // The block is reachable from its transitive predecessors. Only add
        -:   53:      // them to the worklist if they weren't already visited.
        -:   54:      if (reachable.insert(predecessor).second)
        -:   55:        worklist.push_back(predecessor);
        -:   56:    }
        -:   57:  }
        -:   58:  return reachable;
        -:   59:}
        -:   60:
        -:   61:/// An analysis that identifies whether a value allocated by a Transform op may
        -:   62:/// be used by another such op after it may have been freed by a third op on
        -:   63:/// some control flow path. This is conceptually similar to a data flow
        -:   64:/// analysis, but relies on side effects related to particular values that
        -:   65:/// currently cannot be modeled by the MLIR data flow analysis framework (also,
        -:   66:/// the lattice element would be rather expensive as it would need to include
        -:   67:/// live and/or freed values for each operation).
        -:   68:///
        -:   69:/// This analysis is conservatively pessimisic: it will consider that a value
        -:   70:/// may be freed if it is freed on any possible control flow path between its
        -:   71:/// allocation and a relevant use, even if the control never actually flows
        -:   72:/// through the operation that frees the value. It also does not differentiate
        -:   73:/// between may- (freed on at least one control flow path) and must-free (freed
        -:   74:/// on all possible control flow paths) because it would require expensive graph
        -:   75:/// algorithms.
        -:   76:///
        -:   77:/// It is intended as an additional non-blocking verification or debugging aid
        -:   78:/// for ops in the Transform dialect. It leverages the requirement for Transform
        -:   79:/// dialect ops to implement the MemoryEffectsOpInterface, and expects the
        -:   80:/// values in the Transform IR to have an allocation effect on the
        -:   81:/// TransformMappingResource when defined.
        -:   82:class TransformOpMemFreeAnalysis {
        -:   83:public:
function _ZN12_GLOBAL__N_126TransformOpMemFreeAnalysis13resolveTypeIDEv called 1053 returned 100% blocks executed 100%
     1053:   84:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TransformOpMemFreeAnalysis)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   85:
        -:   86:  /// Computes the analysis for Transform ops nested in the given operation.
function _ZN12_GLOBAL__N_126TransformOpMemFreeAnalysisC2EPN4mlir9OperationE called 351 returned 100% blocks executed 100%
      351:   87:  explicit TransformOpMemFreeAnalysis(Operation *root) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZZN12_GLOBAL__N_126TransformOpMemFreeAnalysisC4EPN4mlir9OperationEENKUlS3_E_clES3_.isra.0 called 676905 returned 100% blocks executed 71%
   676905:   88:    root->walk([&](Operation *op) {
   676905:   89:      if (isa<transform::TransformOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   90:        collectFreedValues(op);
call    0 never executed
    #####:   91:        return WalkResult::skip();
        -:   92:      }
   676905:   93:      return WalkResult::advance();
      351:   94:    });
call    0 returned 100%
      351:   95:  }
        -:   96:
        -:   97:  /// A list of operations that may be deleting a value. Non-empty list
        -:   98:  /// contextually converts to boolean "true" value.
    #####:   99:  class PotentialDeleters {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  100:  public:
        -:  101:    /// Creates an empty list that corresponds to the value being live.
 3762134*:  102:    static PotentialDeleters live() { return PotentialDeleters({}); }
        -:  103:
        -:  104:    /// Creates a list from the operations that may be deleting the value.
    #####:  105:    static PotentialDeleters maybeFreed(ArrayRef<Operation *> deleters) {
    #####:  106:      return PotentialDeleters(deleters);
        -:  107:    }
        -:  108:
        -:  109:    /// Converts to "true" if there are operations that may be deleting the
        -:  110:    /// value.
 1881067*:  111:    explicit operator bool() const { return !deleters.empty(); }
        -:  112:
        -:  113:    /// Concatenates the lists of operations that may be deleting the value. The
        -:  114:    /// value is known to be live if the reuslting list is still empty.
    #####:  115:    PotentialDeleters &operator|=(const PotentialDeleters &other) {
    #####:  116:      llvm::append_range(deleters, other.deleters);
    #####:  117:      return *this;
        -:  118:    }
        -:  119:
        -:  120:    /// Returns the list of ops that may be deleting the value.
    #####:  121:    ArrayRef<Operation *> getOps() const { return deleters; }
        -:  122:
        -:  123:  private:
        -:  124:    /// Constructs the list from the given operations.
 1881067*:  125:    explicit PotentialDeleters(ArrayRef<Operation *> ops) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 never executed
 1881067*:  126:      llvm::append_range(deleters, ops);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 never executed
        -:  127:    }
        -:  128:
        -:  129:    /// The list of operations that may be deleting the value.
        -:  130:    SmallVector<Operation *> deleters;
        -:  131:  };
        -:  132:
        -:  133:  /// Returns the list of operations that may be deleting the operand value on
        -:  134:  /// any control flow path between the definition of the value and its use as
        -:  135:  /// the given operand. For the purposes of this analysis, the value is
        -:  136:  /// considered to be allocated at its definition point and never re-allocated.
function _ZN12_GLOBAL__N_126TransformOpMemFreeAnalysis9isUseLiveERN4mlir9OpOperandE called 1881067 returned 100% blocks executed 6%
  1881067:  137:  PotentialDeleters isUseLive(OpOperand &operand) {
  1881067:  138:    const llvm::SmallPtrSet<Operation *, 2> &deleters = freedBy[operand.get()];
call    0 returned 100%
  1881067:  139:    if (deleters.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1881067:  140:      return live();
        -:  141:
        -:  142:#ifndef NDEBUG
        -:  143:    // Check that the definition point actually allcoates the value.
    #####:  144:    Operation *valueSource =
    #####:  145:        operand.get().isa<OpResult>()
call    0 never executed
    #####:  146:            ? operand.get().getDefiningOp()
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  147:            : operand.get().getParentBlock()->getParentOp();
call    0 never executed
call    1 never executed
    #####:  148:    auto iface = cast<MemoryEffectOpInterface>(valueSource);
call    0 never executed
    #####:  149:    SmallVector<MemoryEffects::EffectInstance> instances;
call    0 never executed
    #####:  150:    iface.getEffectsOnResource(transform::TransformMappingResource::get(),
call    0 never executed
call    1 never executed
        -:  151:                               instances);
    #####:  152:    assert(hasEffect<MemoryEffects::Allocate>(instances, operand.get()) &&
call    0 never executed
call    1 never executed
        -:  153:           "expected the op defining the value to have an allocation effect "
        -:  154:           "on it");
        -:  155:#endif
        -:  156:
        -:  157:    // Collect ancestors of the use operation.
    #####:  158:    Block *defBlock = operand.get().getParentBlock();
call    0 never executed
    #####:  159:    SmallVector<Operation *> ancestors;
branch  0 never executed
branch  1 never executed
    #####:  160:    Operation *ancestor = operand.getOwner();
    #####:  161:    do {
    #####:  162:      ancestors.push_back(ancestor);
call    0 never executed
    #####:  163:      if (ancestor->getParentRegion() == defBlock->getParent())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  164:        break;
    #####:  165:      ancestor = ancestor->getParentOp();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  166:    } while (true);
    #####:  167:    std::reverse(ancestors.begin(), ancestors.end());
branch  0 never executed
branch  1 never executed
        -:  168:
        -:  169:    // Consider the control flow from the definition point of the value to its
        -:  170:    // use point. If the use is located in some nested region, consider the path
        -:  171:    // from the entry block of the region to the use.
    #####:  172:    for (Operation *ancestor : ancestors) {
branch  0 never executed
branch  1 never executed
        -:  173:      // The block should be considered partially if it is the block that
        -:  174:      // contains the definition (allocation) of the value being used, and the
        -:  175:      // value is defined in the middle of the block, i.e., is not a block
        -:  176:      // argument.
    #####:  177:      bool isOutermost = ancestor == ancestors.front();
branch  0 never executed
branch  1 never executed
    #####:  178:      bool isFromBlockPartial = isOutermost && operand.get().isa<OpResult>();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  179:
        -:  180:      // Check if the value may be freed by operations between its definition
        -:  181:      // (allocation) point in its block and the terminator of the block or the
        -:  182:      // ancestor of the use if it is located in the same block. This is only
        -:  183:      // done for partial blocks here, full blocks will be considered below
        -:  184:      // similarly to other blocks.
    #####:  185:      if (isFromBlockPartial) {
    #####:  186:        bool defUseSameBlock = ancestor->getBlock() == defBlock;
branch  0 never executed
branch  1 never executed
        -:  187:        // Consider all ops from the def to its block terminator, except the
        -:  188:        // when the use is in the same block, in which case only consider the
        -:  189:        // ops until the user.
    #####:  190:        if (PotentialDeleters potentialDeleters = isFreedInBlockAfter(
branch  0 never executed
branch  1 never executed
    #####:  191:                operand.get().getDefiningOp(), operand.get(),
call    0 never executed
    #####:  192:                defUseSameBlock ? ancestor : nullptr))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  193:          return potentialDeleters;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  194:      }
        -:  195:
        -:  196:      // Check if the value may be freed by opeations preceding the ancestor in
        -:  197:      // its block. Skip the check for partial blocks that contain both the
        -:  198:      // definition and the use point, as this has been already checked above.
    #####:  199:      if (!isFromBlockPartial || ancestor->getBlock() != defBlock) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  200:        if (PotentialDeleters potentialDeleters =
branch  0 never executed
branch  1 never executed
    #####:  201:                isFreedInBlockBefore(ancestor, operand.get()))
call    0 never executed
    #####:  202:          return potentialDeleters;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  203:      }
        -:  204:
        -:  205:      // Check if the value may be freed by operations in any of the blocks
        -:  206:      // between the definition point (in the outermost region) or the entry
        -:  207:      // block of the region (in other regions) and the operand or its ancestor
        -:  208:      // in the region. This includes the entire "form" block if (1) the block
        -:  209:      // has not been considered as partial above and (2) the block can be
        -:  210:      // reached again through some control-flow loop. This includes the entire
        -:  211:      // "to" block if it can be reached form itself through some control-flow
        -:  212:      // cycle, regardless of whether it has been visited before.
    #####:  213:      Block *ancestorBlock = ancestor->getBlock();
branch  0 never executed
branch  1 never executed
    #####:  214:      Block *from =
    #####:  215:          isOutermost ? defBlock : &ancestorBlock->getParent()->front();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  216:      if (PotentialDeleters potentialDeleters =
branch  0 never executed
branch  1 never executed
        -:  217:              isMaybeFreedOnPaths(from, ancestorBlock, operand.get(),
    #####:  218:                                  /*alwaysIncludeFrom=*/!isFromBlockPartial))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:        return potentialDeleters;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  220:    }
    #####:  221:    return live();
        -:  222:  }
        -:  223:
        -:  224:private:
        -:  225:  /// Make PotentialDeleters constructors available with shorter names.
    #####:  226:  static PotentialDeleters maybeFreed(ArrayRef<Operation *> deleters) {
    #####:  227:    return PotentialDeleters::maybeFreed(deleters);
call    0 never executed
call    1 never executed
        -:  228:  }
 1881067*:  229:  static PotentialDeleters live() { return PotentialDeleters::live(); }
call    0 returned 100%
call    1 never executed
        -:  230:
        -:  231:  /// Returns the list of operations that may be deleting the given value betwen
        -:  232:  /// the first and last operations, non-inclusive. `getNext` indicates the
        -:  233:  /// direction of the traversal.
        -:  234:  PotentialDeleters
function _ZNK12_GLOBAL__N_126TransformOpMemFreeAnalysis14isFreedBetweenEN4mlir5ValueEPNS1_9OperationES4_N4llvm12function_refIFS4_S4_EEE called 0 returned 0% blocks executed 0%
    #####:  235:  isFreedBetween(Value value, Operation *first, Operation *last,
        -:  236:                 llvm::function_ref<Operation *(Operation *)> getNext) const {
    #####:  237:    auto it = freedBy.find(value);
call    0 never executed
    #####:  238:    if (it == freedBy.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  239:      return live();
call    0 never executed
    #####:  240:    const llvm::SmallPtrSet<Operation *, 2> &deleters = it->getSecond();
call    0 never executed
call    1 never executed
    #####:  241:    for (Operation *op = getNext(first); op != last; op = getNext(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  242:      if (deleters.contains(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:        return maybeFreed(op);
call    0 never executed
        -:  244:    }
    #####:  245:    return live();
call    0 never executed
        -:  246:  }
        -:  247:
        -:  248:  /// Returns the list of operations that may be deleting the given value
        -:  249:  /// between `root` and `before` values. `root` is expected to be in the same
        -:  250:  /// block as `before` and precede it. If `before` is null, consider all
        -:  251:  /// operations until the end of the block including the terminator.
    #####:  252:  PotentialDeleters isFreedInBlockAfter(Operation *root, Value value,
        -:  253:                                        Operation *before = nullptr) const {
    #####:  254:    return isFreedBetween(value, root, before,
    #####:  255:                          [](Operation *op) { return op->getNextNode(); });
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  256:  }
        -:  257:
        -:  258:  /// Returns the list of operations that may be deleting the given value
        -:  259:  /// between the entry of the block and the `root` operation.
    #####:  260:  PotentialDeleters isFreedInBlockBefore(Operation *root, Value value) const {
    #####:  261:    return isFreedBetween(value, root, nullptr,
    #####:  262:                          [](Operation *op) { return op->getPrevNode(); });
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  263:  }
        -:  264:
        -:  265:  /// Returns the list of operations that may be deleting the given value on
        -:  266:  /// any of the control flow paths between the "form" and the "to" block. The
        -:  267:  /// operations from any block visited on any control flow path are
        -:  268:  /// consdiered. The "from" block is considered if there is a control flow
        -:  269:  /// cycle going through it, i.e., if there is a possibility that all
        -:  270:  /// operations in this block are visited or if the `alwaysIncludeFrom` flag is
        -:  271:  /// set. The "to" block is considered only if there is a control flow cycle
        -:  272:  /// going through it.
function _ZN12_GLOBAL__N_126TransformOpMemFreeAnalysis19isMaybeFreedOnPathsEPN4mlir5BlockES3_NS1_5ValueEb called 0 returned 0% blocks executed 0%
    #####:  273:  PotentialDeleters isMaybeFreedOnPaths(Block *from, Block *to, Value value,
        -:  274:                                        bool alwaysIncludeFrom) {
        -:  275:    // Find all blocks that lie on any path between "from" and "to", i.e., the
        -:  276:    // intersection of blocks reachable from "from" and blocks from which "to"
        -:  277:    // is rechable.
    #####:  278:    const llvm::SmallPtrSet<Block *, 4> &sources = getReachableFrom(to);
    #####:  279:    if (!sources.contains(from))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:      return live();
call    0 never executed
        -:  281:
    #####:  282:    llvm::SmallPtrSet<Block *, 4> reachable(getReachable(from));
call    0 never executed
    #####:  283:    llvm::set_intersect(reachable, sources);
call    0 never executed
        -:  284:
        -:  285:    // If requested, include the "from" block that may not be present in the set
        -:  286:    // of visited blocks when there is no cycle going through it.
    #####:  287:    if (alwaysIncludeFrom)
branch  0 never executed
branch  1 never executed
    #####:  288:      reachable.insert(from);
call    0 never executed
        -:  289:
        -:  290:    // Join potential deleters from all blocks as we don't know here which of
        -:  291:    // the paths through the control flow is taken.
    #####:  292:    PotentialDeleters potentialDeleters = live();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:    for (Block *block : reachable) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  294:      for (Operation &op : *block) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  295:        if (freedBy[value].count(&op))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  296:          potentialDeleters |= maybeFreed(&op);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  297:      }
        -:  298:    }
    #####:  299:    return potentialDeleters;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  300:  }
        -:  301:
        -:  302:  /// Popualtes `reachable` with the set of blocks that are rechable from the
        -:  303:  /// given block. A block is considered reachable from itself if there is a
        -:  304:  /// cycle in the control-flow graph that invovles the block.
    #####:  305:  const llvm::SmallPtrSet<Block *, 4> &getReachable(Block *block) {
    #####:  306:    return getReachableImpl(
    #####:  307:        block, [](Block *b) { return b->getSuccessors(); }, reachableCache);
call    0 never executed
        -:  308:  }
        -:  309:
        -:  310:  /// Populates `sources` with the set of blocks from which the given block is
        -:  311:  /// reachable.
    #####:  312:  const llvm::SmallPtrSet<Block *, 4> &getReachableFrom(Block *block) {
    #####:  313:    return getReachableImpl(
        -:  314:        block, [](Block *b) { return b->getPredecessors(); },
    #####:  315:        reachableFromCache);
call    0 never executed
        -:  316:  }
        -:  317:
        -:  318:  /// Returns true of `instances` contains an effect of `EffectTy` on `value`.
        -:  319:  template <typename EffectTy>
    #####:  320:  static bool hasEffect(ArrayRef<MemoryEffects::EffectInstance> instances,
        -:  321:                        Value value) {
    #####:  322:    return llvm::any_of(instances,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  323:                        [&](const MemoryEffects::EffectInstance &instance) {
------------------
_ZZN12_GLOBAL__N_126TransformOpMemFreeAnalysis9hasEffectIN4mlir13MemoryEffects4FreeEEEbN4llvm8ArrayRefINS2_11SideEffects14EffectInstanceINS3_6EffectEEEEENS2_5ValueEENKUlRKSA_E_clESE_.isra.0:
function _ZZN12_GLOBAL__N_126TransformOpMemFreeAnalysis9hasEffectIN4mlir13MemoryEffects4FreeEEEbN4llvm8ArrayRefINS2_11SideEffects14EffectInstanceINS3_6EffectEEEEENS2_5ValueEENKUlRKSA_E_clESE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  323:                        [&](const MemoryEffects::EffectInstance &instance) {
branch  0 never executed
branch  1 never executed
------------------
_ZZN12_GLOBAL__N_126TransformOpMemFreeAnalysis9hasEffectIN4mlir13MemoryEffects8AllocateEEEbN4llvm8ArrayRefINS2_11SideEffects14EffectInstanceINS3_6EffectEEEEENS2_5ValueEENKUlRKSA_E_clESE_.isra.0:
function _ZZN12_GLOBAL__N_126TransformOpMemFreeAnalysis9hasEffectIN4mlir13MemoryEffects8AllocateEEEbN4llvm8ArrayRefINS2_11SideEffects14EffectInstanceINS3_6EffectEEEEENS2_5ValueEENKUlRKSA_E_clESE_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  323:                        [&](const MemoryEffects::EffectInstance &instance) {
branch  0 never executed
branch  1 never executed
------------------
    #####:  324:                          return instance.getValue() == value &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  325:                                 isa<EffectTy>(instance.getEffect());
call    0 never executed
call    1 never executed
        -:  326:                        });
        -:  327:  }
        -:  328:
        -:  329:  /// Records the values that are being freed by an operation or any of its
        -:  330:  /// children in `freedBy`.
function _ZN12_GLOBAL__N_126TransformOpMemFreeAnalysis18collectFreedValuesEPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:  331:  void collectFreedValues(Operation *root) {
    #####:  332:    SmallVector<MemoryEffects::EffectInstance> instances;
call    0 never executed
function _ZZN12_GLOBAL__N_126TransformOpMemFreeAnalysis18collectFreedValuesEPN4mlir9OperationEENKUlS3_E_clES3_ called 0 returned 0% blocks executed 0%
    #####:  333:    root->walk([&](Operation *child) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  334:      // TODO: extend this to conservatively handle operations with undeclared
        -:  335:      // side effects as maybe freeing the operands.
    #####:  336:      auto iface = cast<MemoryEffectOpInterface>(child);
call    0 never executed
    #####:  337:      instances.clear();
call    0 never executed
    #####:  338:      iface.getEffectsOnResource(transform::TransformMappingResource::get(),
call    0 never executed
call    1 never executed
        -:  339:                                 instances);
    #####:  340:      for (Value operand : child->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  341:        if (hasEffect<MemoryEffects::Free>(instances, operand)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  342:          // All parents of the operation that frees a value should be
        -:  343:          // considered as potentially freeing the value as well.
        -:  344:          //
        -:  345:          // TODO: differentiate between must-free/may-free as well as between
        -:  346:          // this op having the effect and children having the effect. This may
        -:  347:          // require some analysis of all control flow paths through the nested
        -:  348:          // regions as well as a mechanism to separate proper side effects from
        -:  349:          // those obtained by nesting.
        -:  350:          Operation *parent = child;
    #####:  351:          do {
    #####:  352:            freedBy[operand].insert(parent);
call    0 never executed
call    1 never executed
    #####:  353:            if (parent == root)
branch  0 never executed
branch  1 never executed
        -:  354:              break;
    #####:  355:            parent = parent->getParentOp();
branch  0 never executed
branch  1 never executed
        -:  356:          } while (true);
        -:  357:        }
        -:  358:      }
    #####:  359:    });
    #####:  360:  }
        -:  361:
        -:  362:  /// The mapping from a value to operations that have a Free memory effect on
        -:  363:  /// the TransformMappingResource and associated with this value, or to
        -:  364:  /// Transform operations transitively containing such operations.
        -:  365:  DenseMap<Value, llvm::SmallPtrSet<Operation *, 2>> freedBy;
        -:  366:
        -:  367:  /// Caches for sets of reachable blocks.
        -:  368:  DenseMap<Block *, llvm::SmallPtrSet<Block *, 4>> reachableCache;
        -:  369:  DenseMap<Block *, llvm::SmallPtrSet<Block *, 4>> reachableFromCache;
        -:  370:};
        -:  371:
        -:  372://// A simple pass that warns about any use of a value by a transform operation
        -:  373:// that may be using the value after it has been freed.
  116651*:  374:class CheckUsesPass : public transform::impl::CheckUsesPassBase<CheckUsesPass> {
call    0 never executed
call    1 returned 100%
        -:  375:public:
function _ZN12_GLOBAL__N_113CheckUsesPass14runOnOperationEv called 351 returned 100% blocks executed 80%
      351:  376:  void runOnOperation() override {
      351:  377:    auto &analysis = getAnalysis<TransformOpMemFreeAnalysis>();
call    0 returned 100%
        -:  378:
function _ZZN12_GLOBAL__N_113CheckUsesPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 676905 returned 100% blocks executed 32%
   677256:  379:    getOperation()->walk([&](Operation *child) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
  2557972:  380:      for (OpOperand &operand : child->getOpOperands()) {
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
  1881067:  381:        TransformOpMemFreeAnalysis::PotentialDeleters deleters =
 1881067*:  382:            analysis.isUseLive(operand);
call    0 returned 100%
  1881067:  383:        if (!deleters)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1881067:  384:          continue;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  385:
    #####:  386:        InFlightDiagnostic diag = child->emitWarning()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  387:                                  << "operand #" << operand.getOperandNumber()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  388:                                  << " may be used after free";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  389:        diag.attachNote(operand.get().getLoc()) << "allocated here";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  390:        for (Operation *d : deleters.getOps()) {
branch  0 never executed
branch  1 never executed
    #####:  391:          diag.attachNote(d->getLoc()) << "freed here";
call    0 never executed
call    1 never executed
        -:  392:        }
        -:  393:      }
   676905:  394:    });
      351:  395:  }
        -:  396:};
        -:  397:
        -:  398:} // namespace
        -:  399:
