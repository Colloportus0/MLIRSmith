        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Bufferization/Transforms/TensorCopyInsertion.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/TensorCopyInsertion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/TensorCopyInsertion.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- TensorCopyInsertion.cpp - Resolve Bufferization Conflicts w/ Copies ===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   12:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   14:#include "mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h"
        -:   15:#include "mlir/Dialect/Bufferization/Transforms/OneShotModuleBufferize.h"
        -:   16:#include "mlir/Dialect/Bufferization/Transforms/TensorCopyInsertion.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:namespace bufferization {
        -:   21:#define GEN_PASS_DEF_TENSORCOPYINSERTION
        -:   22:#include "mlir/Dialect/Bufferization/Transforms/Passes.h.inc"
        -:   23:} // namespace bufferization
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:using namespace mlir::bufferization;
        -:   28:
        -:   29:/// Resolve all operands that are also used inside of repetitive regions of the
        -:   30:/// same op. Such cases are not fully supported by One-Shot Bufferize.
        -:   31:///
        -:   32:/// E.g.:
        -:   33:/// %r = scf.for ... iter_args(%t = %tensor) -> tensor<?xf32> {
        -:   34:///   "some_use"(%tensor)
        -:   35:///   ...
        -:   36:/// }
        -:   37:///
        -:   38:/// Is converted to:
        -:   39:/// %tensor_copy = bufferization.alloc_tensor copy(%tensor)
        -:   40:/// %r = scf.for ... iter_args(%t = %tensor) -> tensor<?xf32> {
        -:   41:///   "some_use"(%tensor_copy)
        -:   42:///   ...
        -:   43:/// }
        -:   44:static void
function _ZL30resolveUsesInRepetitiveRegionsPN4mlir9OperationERKNS_13bufferization20BufferizationOptionsE called 716 returned 100% blocks executed 100%
      716:   45:resolveUsesInRepetitiveRegions(Operation *op,
        -:   46:                               const BufferizationOptions &options) {
      716:   47:  IRRewriter rewriter(op->getContext());
call    0 returned 100%
call    1 returned 100%
     1432:   48:  AnalysisState state(options);
call    0 returned 100%
call    1 returned 100%
        -:   49:
        -:   50:  // Look for repetitive ops (loops).
function _ZZL30resolveUsesInRepetitiveRegionsPN4mlir9OperationERKNS_13bufferization20BufferizationOptionsEENKUlNS2_23BufferizableOpInterfaceEE_clES6_ called 182952 returned 100% blocks executed 64%
   183668:   51:  op->walk([&](BufferizableOpInterface bufferizableOp) {
        -:   52:    // Skip filtered ops.
   182952:   53:    if (!options.isOpAllowed(bufferizableOp.getOperation()))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
      817:   54:      return WalkResult::advance();
        -:   55:
        -:   56:    // Find all operands that are also used inside of a repetitive region of
        -:   57:    // this op.
  1331791:   58:    for (OpOperand &opOperand : bufferizableOp->getOpOperands()) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
  1149656:   59:      Value operand = opOperand.get();
call    0 returned 100%
        -:   60:      // Skip non-tensor operands.
  1149656:   61:      if (!operand.getType().isa<TensorType>())
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
  1068323:   62:        continue;
        -:   63:      // Skip operands that do not bufferize to memory writes.
    81333:   64:      if (!bufferizableOp.bufferizesToMemoryWrite(opOperand, state))
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
    57336:   65:        continue;
        -:   66:
        -:   67:      // Gather all uses inside repetitive regions.
   23997*:   68:      SmallVector<OpOperand *> usesInsideRegion;
   337021:   69:      for (OpOperand &use : operand.getUses()) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
   313024:   70:        Operation *owner = use.getOwner();
call    0 returned 100%
   313024:   71:        if (!bufferizableOp->isProperAncestor(owner))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
   311385:   72:          continue;
     3278:   73:        for (Region &r : bufferizableOp->getRegions()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
     3278:   74:          if (r.findAncestorOpInRegion(*owner) &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     1639:   75:              bufferizableOp.isRepetitiveRegion(r.getRegionNumber())) {
call    0 returned 100%
call    1 returned 100%
    #####:   76:            usesInsideRegion.push_back(&use);
    #####:   77:            break;
call    0 never executed
        -:   78:          }
        -:   79:        }
        -:   80:      }
        -:   81:      // Nothing to do if the operand is not used inside a repetitive region.
    23997:   82:      if (usesInsideRegion.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1173653:   83:        continue;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   84:
        -:   85:      // Insert a tensor copy and replace all uses inside of repetitive regions.
    #####:   86:      rewriter.setInsertionPoint(bufferizableOp);
call    0 never executed
    #####:   87:      auto tensorCopy = rewriter.create<AllocTensorOp>(
    #####:   88:          bufferizableOp->getLoc(), operand.getType().cast<TensorType>(),
call    0 never executed
    #####:   89:          /*dynamicSizes=*/ValueRange(),
call    0 never executed
    #####:   90:          /*copy=*/operand, /*memory_space=*/IntegerAttr());
call    0 never executed
call    1 never executed
    #####:   91:      for (OpOperand *use : usesInsideRegion)
branch  0 never executed
branch  1 never executed
    #####:   92:        use->set(tensorCopy);
branch  0 never executed
branch  1 never executed
        -:   93:    }
        -:   94:
   182135:   95:    return WalkResult::advance();
      716:   96:  });
call    0 returned 100%
call    1 returned 100%
      716:   97:}
        -:   98:
function _ZN4mlir13bufferization18insertTensorCopiesEPNS_9OperationERKNS0_27OneShotBufferizationOptionsE called 716 returned 100% blocks executed 93%
      716:   99:LogicalResult mlir::bufferization::insertTensorCopies(
        -:  100:    Operation *op, const OneShotBufferizationOptions &options) {
        -:  101:  // Preprocessing: Resolve currently unsupported bufferization cases.
      716:  102:  resolveUsesInRepetitiveRegions(op, options);
call    0 returned 100%
        -:  103:
      716:  104:  OneShotAnalysisState state(op, options);
call    0 returned 100%
        -:  105:  // Run normal One-Shot Bufferize analysis or One-Shot Module Bufferize
        -:  106:  // analysis depending on whether function boundary bufferization is enabled or
        -:  107:  // not.
      716:  108:  if (options.bufferizeFunctionBoundaries) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
      307:  109:    if (failed(analyzeModuleOp(cast<ModuleOp>(op), state)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 46% (fallthrough)
branch  3 taken 54%
      142:  110:      return failure();
        -:  111:  } else {
      409:  112:    if (failed(analyzeOp(op, state)))
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
      370:  113:      return failure();
        -:  114:  }
        -:  115:
      204:  116:  if (options.testAnalysisOnly)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     716*:  117:    return success();
call    0 returned 100%
        -:  118:
      204:  119:  return insertTensorCopies(op, state);
call    0 returned 100%
        -:  120:}
        -:  121:
        -:  122:LogicalResult
function _ZN4mlir13bufferization18insertTensorCopiesEPNS_9OperationERKNS0_13AnalysisStateE called 3015 returned 100% blocks executed 100%
     3015:  123:mlir::bufferization::insertTensorCopies(Operation *op,
        -:  124:                                        const AnalysisState &state) {
     3015:  125:  IRRewriter rewriter(op->getContext());
call    0 returned 100%
call    1 returned 99%
     3013:  126:  StringRef escapeAttrName = BufferizationDialect::kEscapeAttrName;
        -:  127:
function _ZZN4mlir13bufferization18insertTensorCopiesEPNS_9OperationERKNS0_13AnalysisStateEENKUlS2_E_clES2_ called 5296941 returned 100% blocks executed 91%
  5299954:  128:  WalkResult result = op->walk([&](Operation *op) {
  5296941:  129:    auto bufferizableOp = state.getOptions().dynCastBufferizableOp(op);
call    0 returned 100%
  5296937:  130:    if (!bufferizableOp)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
  5092140:  131:      return WalkResult::skip();
        -:  132:
        -:  133:    // Find allocations without an `escape` attribute and add the attribute
        -:  134:    // based on analysis results.
   204797:  135:    if (!op->hasAttr(escapeAttrName)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   409594:  136:      SmallVector<bool> escapeAttrValue;
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
   204797:  137:      bool foundTensorResult = false;
   521509:  138:      for (OpResult opResult : op->getOpResults()) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
call    4 returned 100%
   225593:  139:        if (!opResult.getType().isa<TensorType>() ||
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
    67237:  140:            !bufferizableOp.bufferizesToAllocation(opResult)) {
call    0 returned 100%
   150254:  141:          escapeAttrValue.push_back(false);
call    0 returned 100%
   150254:  142:          continue;
        -:  143:        }
     8102:  144:        foundTensorResult = true;
     8502:  145:        bool escape = !state.getOptions().createDeallocs ||
branch  0 taken 5%
branch  1 taken 95%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      400:  146:                      state.isTensorYielded(opResult);
call    0 returned 100%
     8102:  147:        escapeAttrValue.push_back(escape);
call    0 returned 100%
        -:  148:      }
   204797:  149:      if (foundTensorResult)
branch  0 taken 4%
branch  1 taken 96%
     8102:  150:        op->setAttr(escapeAttrName, rewriter.getBoolArrayAttr(escapeAttrValue));
call    0 returned 100%
call    1 returned 100%
        -:  151:    }
        -:  152:
        -:  153:    // Find inplacability conflicts and resolve them. (Typically with explicit
        -:  154:    // tensor copies in the form of AllocTensorOps.)
   204797:  155:    rewriter.setInsertionPoint(op);
call    0 returned 100%
   204797:  156:    if (failed(bufferizableOp.resolveConflicts(rewriter, state)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  157:      return WalkResult::interrupt();
        -:  158:
   204796:  159:    return WalkResult::advance();
     3013:  160:  });
call    0 returned 99%
        -:  161:
     2990:  162:  return failure(result.wasInterrupted());
call    0 returned 100%
        -:  163:}
        -:  164:
        -:  165:namespace {
        -:  166:struct TensorCopyInsertionPass
        -:  167:    : public bufferization::impl::TensorCopyInsertionBase<
        -:  168:          TensorCopyInsertionPass> {
   116157:  169:  TensorCopyInsertionPass() : options(llvm::None) {}
call    0 returned 100%
function _ZN12_GLOBAL__N_123TensorCopyInsertionPassC2ERKN4mlir13bufferization27OneShotBufferizationOptionsE called 389 returned 100% blocks executed 100%
      389:  170:  TensorCopyInsertionPass(const OneShotBufferizationOptions &options)
      389:  171:      : options(options) {}
call    0 returned 100%
call    1 returned 100%
        -:  172:
function _ZNK12_GLOBAL__N_123TensorCopyInsertionPass20getDependentDialectsERN4mlir15DialectRegistryE called 389 returned 100% blocks executed 100%
      389:  173:  void getDependentDialects(DialectRegistry &registry) const override {
      389:  174:    registry.insert<bufferization::BufferizationDialect>();
call    0 returned 100%
      389:  175:  }
        -:  176:
function _ZN12_GLOBAL__N_123TensorCopyInsertionPass14runOnOperationEv called 307 returned 100% blocks executed 35%
      307:  177:  void runOnOperation() override {
      307:  178:    if (options) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      307:  179:      if (failed(insertTensorCopies(getOperation(), *options)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 46% (fallthrough)
branch  4 taken 54%
      142:  180:        signalPassFailure();
call    0 returned 100%
        -:  181:    } else {
    #####:  182:      OneShotBufferizationOptions options;
call    0 never executed
    #####:  183:      options.allowReturnAllocs = allowReturnAllocs;
branch  0 never executed
branch  1 never executed
    #####:  184:      options.bufferizeFunctionBoundaries = bufferizeFunctionBoundaries;
    #####:  185:      options.createDeallocs = createDeallocs;
    #####:  186:      if (mustInferMemorySpace)
branch  0 never executed
branch  1 never executed
    #####:  187:        options.defaultMemorySpace = None;
    #####:  188:      if (failed(insertTensorCopies(getOperation(), options)))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  189:        signalPassFailure();
call    0 never executed
        -:  190:    }
      307:  191:  }
        -:  192:
        -:  193:private:
        -:  194:  Optional<OneShotBufferizationOptions> options;
        -:  195:};
        -:  196:} // namespace
        -:  197:
function _ZN4mlir13bufferization29createTensorCopyInsertionPassEv called 116157 returned 100% blocks executed 100%
   116157:  198:std::unique_ptr<Pass> mlir::bufferization::createTensorCopyInsertionPass() {
   116157:  199:  return std::make_unique<TensorCopyInsertionPass>();
call    0 returned 100%
        -:  200:}
        -:  201:
function _ZN4mlir13bufferization29createTensorCopyInsertionPassERKNS0_27OneShotBufferizationOptionsE called 389 returned 100% blocks executed 100%
      389:  202:std::unique_ptr<Pass> mlir::bufferization::createTensorCopyInsertionPass(
        -:  203:    const OneShotBufferizationOptions &options) {
      389:  204:  return std::make_unique<TensorCopyInsertionPass>(options);
call    0 returned 100%
        -:  205:}
