        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Bufferization/Transforms/BufferViewFlowAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferViewFlowAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferViewFlowAnalysis.cpp.gcda
        -:    0:Runs:116157
        -:    1://======- BufferViewFlowAnalysis.cpp - Buffer alias analysis -*- C++ -*-======//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Bufferization/Transforms/BufferViewFlowAnalysis.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:#include "mlir/Interfaces/ViewLikeInterface.h"
        -:   14:#include "llvm/ADT/SetOperations.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:/// Constructs a new alias analysis using the op provided.
function _ZN4mlir22BufferViewFlowAnalysisC2EPNS_9OperationE called 1754 returned 100% blocks executed 100%
     1754:   19:BufferViewFlowAnalysis::BufferViewFlowAnalysis(Operation *op) { build(op); }
call    0 returned 100%
call    1 returned 100%
        -:   20:
        -:   21:/// Find all immediate and indirect dependent buffers this value could
        -:   22:/// potentially have. Note that the resulting set will also contain the value
        -:   23:/// provided as it is a dependent alias of itself.
        -:   24:BufferViewFlowAnalysis::ValueSetT
function _ZNK4mlir22BufferViewFlowAnalysis7resolveENS_5ValueE called 136753 returned 100% blocks executed 96%
   136753:   25:BufferViewFlowAnalysis::resolve(Value rootValue) const {
   136753:   26:  ValueSetT result;
call    0 returned 100%
   136753:   27:  SmallVector<Value, 8> queue;
call    0 returned 100%
   136753:   28:  queue.push_back(rootValue);
call    0 returned 100%
   301000:   29:  while (!queue.empty()) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
   164247:   30:    Value currentValue = queue.pop_back_val();
call    0 returned 100%
   164247:   31:    if (result.insert(currentValue).second) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
   163291:   32:      auto it = dependencies.find(currentValue);
call    0 returned 100%
   163291:   33:      if (it != dependencies.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
    48541:   34:        for (Value aliasValue : it->second)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 57% (fallthrough)
branch  4 taken 43%
call    5 returned 100%
call    6 returned 100%
    27494:   35:          queue.push_back(aliasValue);
call    0 returned 100%
        -:   36:      }
        -:   37:    }
        -:   38:  }
   136753:   39:  return result;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   40:}
        -:   41:
        -:   42:/// Removes the given values from all alias sets.
function _ZN4mlir22BufferViewFlowAnalysis6removeERKN4llvm15SmallPtrSetImplINS_5ValueEEE called 430 returned 100% blocks executed 100%
      430:   43:void BufferViewFlowAnalysis::remove(const SmallPtrSetImpl<Value> &aliasValues) {
    14581:   44:  for (auto &entry : dependencies)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
call    5 returned 100%
call    6 returned 100%
    13721:   45:    llvm::set_subtract(entry.second, aliasValues);
call    0 returned 100%
      430:   46:}
        -:   47:
        -:   48:/// This function constructs a mapping from values to its immediate
        -:   49:/// dependencies. It iterates over all blocks, gets their predecessors,
        -:   50:/// determines the values that will be passed to the corresponding block
        -:   51:/// arguments and inserts them into the underlying map. Furthermore, it wires
        -:   52:/// successor regions and branch-like return operations from nested regions.
function _ZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationE called 1754 returned 100% blocks executed 100%
     1754:   53:void BufferViewFlowAnalysis::build(Operation *op) {
        -:   54:  // Registers all dependencies of the given values.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_10ValueRangeES3_E_clES3_S3_.isra.0 called 208860 returned 100% blocks executed 100%
   210614:   55:  auto registerDependencies = [&](ValueRange values, ValueRange dependencies) {
   390176:   56:    for (auto [value, dep] : llvm::zip(values, dependencies))
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
call    2 returned 100%
    90656:   57:      this->dependencies[value].insert(dep);
call    0 returned 100%
call    1 returned 100%
   210614:   58:  };
        -:   59:
        -:   60:  // Add additional dependencies created by view changes to the alias list.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_19ViewLikeOpInterfaceEE0_clES3_.isra.0 called 52 returned 100% blocks executed 100%
     1806:   61:  op->walk([&](ViewLikeOpInterface viewInterface) {
call    0 returned 100%
       52:   62:    dependencies[viewInterface.getViewSource()].insert(
call    0 returned 100%
call    1 returned 100%
       52:   63:        viewInterface->getResult(0));
call    0 returned 100%
       52:   64:  });
        -:   65:
        -:   66:  // Query all branch interfaces to link block argument dependencies.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_17BranchOpInterfaceEE1_clES3_.isra.0 called 12 returned 100% blocks executed 94%
     1762:   67:  op->walk([&](BranchOpInterface branchInterface) {
call    0 returned 100%
       12:   68:    Block *parentBlock = branchInterface->getBlock();
call    0 returned 100%
       12:   69:    for (auto it = parentBlock->succ_begin(), e = parentBlock->succ_end();
call    0 returned 100%
call    1 returned 100%
       30:   70:         it != e; ++it) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   71:      // Query the branch op interface to get the successor operands.
       18:   72:      auto successorOperands =
       18:   73:          branchInterface.getSuccessorOperands(it.getIndex());
call    0 returned 100%
        -:   74:      // Build the actual mapping of values to their immediate dependencies.
       36:   75:      registerDependencies(successorOperands.getForwardedOperands(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       54:   76:                           (*it)->getArguments().drop_front(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       18:   77:                               successorOperands.getProducedOperandCount()));
call    0 returned 100%
call    1 returned 100%
        -:   78:    }
       12:   79:  });
        -:   80:
        -:   81:  // Query the RegionBranchOpInterface to find potential successor regions.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_23RegionBranchOpInterfaceEE2_clES3_.isra.0 called 110162 returned 100% blocks executed 92%
   111908:   82:  op->walk([&](RegionBranchOpInterface regionInterface) {
call    0 returned 100%
        -:   83:    // Extract all entry regions and wire all initial entry successor inputs.
   110162:   84:    SmallVector<RegionSuccessor, 2> entrySuccessors;
call    0 returned 100%
   110162:   85:    regionInterface.getSuccessorRegions(/*index=*/llvm::None, entrySuccessors);
call    0 returned 100%
   200512:   86:    for (RegionSuccessor &entrySuccessor : entrySuccessors) {
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:   87:      // Wire the entry region's successor arguments with the initial
        -:   88:      // successor inputs.
   90349*:   89:      assert(entrySuccessor.getSuccessor() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   90:             "Invalid entry region without an attached successor region");
    90349:   91:      registerDependencies(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   92:          regionInterface.getSuccessorEntryOperands(
    90349:   93:              entrySuccessor.getSuccessor()->getRegionNumber()),
call    0 returned 100%
call    1 returned 100%
        -:   94:          entrySuccessor.getSuccessorInputs());
        -:   95:    }
        -:   96:
        -:   97:    // Wire flow between regions and from region exits.
   285153:   98:    for (Region &region : regionInterface->getRegions()) {
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
        -:   99:      // Iterate over all successor region entries that are reachable from the
        -:  100:      // current region.
   308782:  101:      SmallVector<RegionSuccessor, 2> successorRegions;
call    0 returned 100%
   154391:  102:      regionInterface.getSuccessorRegions(region.getRegionNumber(),
call    0 returned 100%
call    1 returned 100%
        -:  103:                                          successorRegions);
   275028:  104:      for (RegionSuccessor &successorRegion : successorRegions) {
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -:  105:        // Determine the current region index (if any).
   120637:  106:        Optional<unsigned> regionIndex;
   120637:  107:        Region *regionSuccessor = successorRegion.getSuccessor();
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
   120637:  108:        if (regionSuccessor)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
    27458:  109:          regionIndex = regionSuccessor->getRegionNumber();
call    0 returned 100%
        -:  110:        // Iterate over all immediate terminator operations and wire the
        -:  111:        // successor inputs with the successor operands of each terminator.
   238445:  112:        for (Block &block : region) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   117805:  113:          auto successorOperands = getRegionBranchSuccessorOperands(
   117805:  114:              block.getTerminator(), regionIndex);
call    0 returned 100%
call    1 returned 100%
   117806:  115:          if (successorOperands) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   117805:  116:            registerDependencies(*successorOperands,
call    0 returned 100%
call    1 returned 100%
        -:  117:                                 successorRegion.getSuccessorInputs());
        -:  118:          }
        -:  119:        }
        -:  120:      }
        -:  121:    }
   110163:  122:  });
        -:  123:
        -:  124:  // TODO: This should be an interface.
function _ZZN4mlir22BufferViewFlowAnalysis5buildEPNS_9OperationEENKUlNS_5arith8SelectOpEE3_clES4_.isra.0 called 343 returned 100% blocks executed 100%
     1750:  125:  op->walk([&](arith::SelectOp selectOp) {
call    0 returned 100%
      343:  126:    registerDependencies({selectOp.getOperand(1)}, {selectOp.getResult()});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      343:  127:    registerDependencies({selectOp.getOperand(2)}, {selectOp.getResult()});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      343:  128:  });
     1749:  129:}
