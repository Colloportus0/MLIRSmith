        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Transforms/TestTopologicalSort.cpp
        -:    0:Graph:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestTopologicalSort.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Transforms/CMakeFiles/MLIRTestTransforms.dir/TestTopologicalSort.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestTopologicalSort.cpp - Pass to test topological sort analysis ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Builders.h"
        -:   10:#include "mlir/IR/BuiltinOps.h"
        -:   11:#include "mlir/Pass/Pass.h"
        -:   12:#include "mlir/Transforms/TopologicalSortUtils.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:
        -:   16:namespace {
  116651*:   17:struct TestTopologicalSortAnalysisPass
call    0 never executed
call    1 returned 100%
        -:   18:    : public PassWrapper<TestTopologicalSortAnalysisPass,
        -:   19:                         OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_131TestTopologicalSortAnalysisPass13resolveTypeIDEv called 116651 returned 100% blocks executed 100%
   116651:   20:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestTopologicalSortAnalysisPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   21:
function _ZNK12_GLOBAL__N_131TestTopologicalSortAnalysisPass11getArgumentEv called 116183 returned 100% blocks executed 100%
   116183:   22:  StringRef getArgument() const final {
   116183:   23:    return "test-topological-sort-analysis";
        -:   24:  }
function _ZNK12_GLOBAL__N_131TestTopologicalSortAnalysisPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   25:  StringRef getDescription() const final {
   116163:   26:    return "Test topological sorting of ops";
        -:   27:  }
        -:   28:
function _ZN12_GLOBAL__N_131TestTopologicalSortAnalysisPass14runOnOperationEv called 353 returned 100% blocks executed 83%
      353:   29:  void runOnOperation() override {
      353:   30:    Operation *op = getOperation();
call    0 returned 100%
call    1 returned 100%
      353:   31:    OpBuilder builder(op->getContext());
call    0 returned 100%
call    1 returned 100%
        -:   32:
function _ZZN12_GLOBAL__N_131TestTopologicalSortAnalysisPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 685071 returned 100% blocks executed 16%
   685424:   33:    WalkResult result = op->walk([&](Operation *root) {
   685071:   34:      if (!root->hasAttr("root"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   685071:   35:        return WalkResult::advance();
        -:   36:
    #####:   37:      SmallVector<Operation *> selectedOps;
call    0 never executed
function _ZZZN12_GLOBAL__N_131TestTopologicalSortAnalysisPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_ENKUlS3_E_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   38:      root->walk([&](Operation *selected) {
    #####:   39:        if (!selected->hasAttr("selected"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:          return WalkResult::advance();
    #####:   41:        if (root->hasAttr("ordered")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   42:          // If the root has an "ordered" attribute, we fill the selectedOps
        -:   43:          // vector in a certain order.
    #####:   44:          int64_t pos =
call    0 never executed
    #####:   45:              selected->getAttr("selected").cast<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   46:          if (pos >= static_cast<int64_t>(selectedOps.size()))
branch  0 never executed
branch  1 never executed
    #####:   47:            selectedOps.append(pos + 1 - selectedOps.size(), nullptr);
call    0 never executed
    #####:   48:          selectedOps[pos] = selected;
branch  0 never executed
branch  1 never executed
        -:   49:        } else {
    #####:   50:          selectedOps.push_back(selected);
call    0 never executed
        -:   51:        }
    #####:   52:        return WalkResult::advance();
    #####:   53:      });
call    0 never executed
        -:   54:
    #####:   55:      if (llvm::find(selectedOps, nullptr) != selectedOps.end()) {
branch  0 never executed
branch  1 never executed
    #####:   56:        root->emitError("invalid test case: some indices are missing among the "
call    0 never executed
call    1 never executed
call    2 never executed
        -:   57:                        "selected ops");
    #####:   58:        return WalkResult::skip();
        -:   59:      }
        -:   60:
    #####:   61:      if (!computeTopologicalSorting(selectedOps)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:        root->emitError("could not schedule all ops");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   63:        return WalkResult::skip();
        -:   64:      }
        -:   65:
    #####:   66:      for (const auto &it : llvm::enumerate(selectedOps))
branch  0 never executed
branch  1 never executed
    #####:   67:        it.value()->setAttr("pos", builder.getIndexAttr(it.index()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   68:
    #####:   69:      return WalkResult::advance();
      353:   70:    });
call    0 returned 100%
        -:   71:
      353:   72:    if (result.wasSkipped())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   73:      signalPassFailure();
call    0 never executed
      353:   74:  }
        -:   75:};
        -:   76:} // namespace
        -:   77:
        -:   78:namespace mlir {
        -:   79:namespace test {
function _ZN4mlir4test39registerTestTopologicalSortAnalysisPassEv called 116163 returned 100% blocks executed 100%
   116163:   80:void registerTestTopologicalSortAnalysisPass() {
   116163:   81:  PassRegistration<TestTopologicalSortAnalysisPass>();
call    0 returned 100%
   116163:   82:}
        -:   83:} // namespace test
        -:   84:} // namespace mlir
