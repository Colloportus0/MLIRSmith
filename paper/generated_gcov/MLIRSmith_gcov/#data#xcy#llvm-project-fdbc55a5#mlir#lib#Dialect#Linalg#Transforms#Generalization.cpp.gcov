        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Linalg/Transforms/Generalization.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Generalization.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Generalization.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- Generalization.cpp - linalg named ops to generic ops  --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the Linalg generalization pass. It converts named
        -:   10:// Linalg ops to linalg.generic ops.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Linalg/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   17:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   18:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   19:#include "mlir/IR/AffineMap.h"
        -:   20:#include "mlir/IR/Attributes.h"
        -:   21:#include "mlir/IR/Builders.h"
        -:   22:#include "mlir/IR/ImplicitLocOpBuilder.h"
        -:   23:#include "mlir/IR/PatternMatch.h"
        -:   24:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   25:#include "llvm/ADT/SmallVector.h"
        -:   26:#include "llvm/Support/Debug.h"
        -:   27:
        -:   28:namespace mlir {
        -:   29:#define GEN_PASS_DEF_LINALGGENERALIZATION
        -:   30:#include "mlir/Dialect/Linalg/Passes.h.inc"
        -:   31:} // namespace mlir
        -:   32:
        -:   33:#define DEBUG_TYPE "linalg-generalization"
        -:   34:
        -:   35:using namespace mlir;
        -:   36:using namespace mlir::linalg;
        -:   37:
function _ZL29generalizeNamedOpPreconditionN4mlir6linalg8LinalgOpE called 4584 returned 100% blocks executed 100%
     4584:   38:static LogicalResult generalizeNamedOpPrecondition(LinalgOp linalgOp) {
        -:   39:  // Check if the operation is a LinalgOp but not a GenericOp.
     4584:   40:  if (isa<GenericOp>(linalgOp))
call    0 returned 100%
branch  1 taken 44% (fallthrough)
branch  2 taken 56%
     2035:   41:    return failure();
        -:   42:  // Check if the operation has a region builder.
     3551:   43:  if (!linalgOp.getRegionBuilder())
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
branch  3 taken 61% (fallthrough)
branch  4 taken 39%
     1547:   44:    return failure();
     1002:   45:  return success();
        -:   46:}
        -:   47:
function _ZN4mlir6linalg17generalizeNamedOpERNS_12RewriterBaseENS0_8LinalgOpE called 4584 returned 100% blocks executed 83%
     4584:   48:FailureOr<GenericOp> mlir::linalg::generalizeNamedOp(RewriterBase &rewriter,
        -:   49:                                                     LinalgOp linalgOp) {
     4584:   50:  if (failed(generalizeNamedOpPrecondition(linalgOp)))
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
     3582:   51:    return rewriter.notifyMatchFailure(linalgOp, "preconditions not met");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   52:
     2004:   53:  SmallVector<Value> inputs = linalgOp.getDpsInputOperands();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     3006:   54:  SmallVector<Value> outputs = linalgOp.getDpsInitOperands();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2004:   55:  SmallVector<AffineMap> indexingMaps = linalgOp.getIndexingMapsArray();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     2004:   56:  SmallVector<StringRef> iterators = linalgOp.getIteratorTypesArray();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     1002:   57:  SmallVector<Type> resultTypes = linalgOp.hasTensorSemantics()
call    0 returned 100%
     1397:   58:                                      ? TypeRange(ValueRange(outputs))
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
call    2 returned 100%
call    3 returned 100%
     1002:   59:                                      : TypeRange{};
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   60:
        -:   61:  // All named ops have a region attached that can be inlined.
    1002*:   62:  assert(linalgOp->getNumRegions() == 1 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   63:         "expect named op to have one region attached");
     1002:   64:  GenericOp genericOp = rewriter.create<GenericOp>(
     1002:   65:      linalgOp.getLoc(), resultTypes, inputs, outputs, indexingMaps, iterators);
call    0 returned 100%
     1002:   66:  rewriter.inlineRegionBefore(linalgOp->getRegion(0), genericOp.getRegion(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     1002:   67:                              genericOp.getRegion().begin());
call    0 returned 100%
call    1 returned 100%
     1397:   68:  rewriter.replaceOp(linalgOp, genericOp->getResults());
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
call    2 returned 100%
call    3 returned 100%
     1002:   69:  return genericOp;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   70:}
        -:   71:
        -:   72:namespace {
        -:   73:
   162570:   74:struct LinalgGeneralizationPass
call    0 returned 100%
call    1 returned 100%
        -:   75:    : public impl::LinalgGeneralizationBase<LinalgGeneralizationPass> {
        -:   76:  void runOnOperation() override;
        -:   77:};
        -:   78:
        -:   79:} // namespace
        -:   80:
function _ZN12_GLOBAL__N_124LinalgGeneralizationPass14runOnOperationEv called 679 returned 100% blocks executed 100%
      679:   81:void LinalgGeneralizationPass::runOnOperation() {
      679:   82:  func::FuncOp func = getOperation();
call    0 returned 100%
      679:   83:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
     1359:   84:  populateLinalgNamedOpsGeneralizationPatterns(patterns);
      679:   85:  (void)applyPatternsAndFoldGreedily(func.getBody(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      680:   86:}
        -:   87:
function _ZN4mlir6linalg44populateLinalgNamedOpsGeneralizationPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     679*:   88:void mlir::linalg::populateLinalgNamedOpsGeneralizationPatterns(
        -:   89:    RewritePatternSet &patterns) {
     679*:   90:  patterns.add<LinalgGeneralizationPattern>(patterns.getContext());
call    0 never executed
call    1 returned 100%
call    2 returned 100%
    #####:   91:}
        -:   92:
        -:   93:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir30createLinalgGeneralizationPassEv called 116994 returned 100% blocks executed 100%
   116994:   94:mlir::createLinalgGeneralizationPass() {
   116994:   95:  return std::make_unique<LinalgGeneralizationPass>();
call    0 returned 100%
        -:   96:}
