        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/TypeRange.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/TypeRange.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/TypeRange.cpp.gcda
        -:    0:Runs:116164
        -:    1://===- TypeRange.cpp ------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/TypeRange.h"
        -:   10:#include "mlir/IR/Operation.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14://===----------------------------------------------------------------------===//
        -:   15:// TypeRange
        -:   16:
function _ZN4mlir9TypeRangeC2EN4llvm8ArrayRefINS_4TypeEEE called 10020414484 returned 100% blocks executed 75%
10020414484:   17:TypeRange::TypeRange(ArrayRef<Type> types)
10020414484:   18:    : TypeRange(types.data(), types.size()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
10020414521*:   19:  assert(llvm::all_of(types, [](Type t) { return t; }) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   20:         "attempting to construct a TypeRange with null types");
10020414521:   21:}
function _ZN4mlir9TypeRangeC2ENS_12OperandRangeE called 22586937 returned 100% blocks executed 100%
 22586937:   22:TypeRange::TypeRange(OperandRange values)
 22586937:   23:    : TypeRange(values.begin().getBase(), values.size()) {}
call    0 returned 100%
function _ZN4mlir9TypeRangeC2ENS_11ResultRangeE called 1211 returned 100% blocks executed 100%
     1211:   24:TypeRange::TypeRange(ResultRange values)
     1211:   25:    : TypeRange(values.getBase(), values.size()) {}
call    0 returned 100%
function _ZN4mlir9TypeRangeC2ENS_10ValueRangeE called 1769264245 returned 100% blocks executed 100%
1769264245:   26:TypeRange::TypeRange(ValueRange values) : TypeRange(OwnerT(), values.size()) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
1769264245:   27:  if (count == 0)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
600822824:   28:    return;
1168441421:   29:  ValueRange::OwnerT owner = values.begin().getBase();
call    0 returned 100%
1168441421:   30:  if (auto *result = owner.dyn_cast<detail::OpResultImpl *>())
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
446360039:   31:    this->base = result;
call    0 returned 100%
722081430:   32:  else if (auto *operand = owner.dyn_cast<OpOperand *>())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
631503875:   33:    this->base = operand;
call    0 returned 100%
        -:   34:  else
1259019072:   35:    this->base = owner.get<const Value *>();
call    0 returned 100%
call    1 returned 100%
        -:   36:}
        -:   37:
        -:   38:/// See `llvm::detail::indexed_accessor_range_base` for details.
function _ZN4mlir9TypeRange11offset_baseEN4llvm12PointerUnionIJPKNS_5ValueEPKNS_4TypeEPNS_9OpOperandEPNS_6detail12OpResultImplEEEEl called 0 returned 0% blocks executed 0%
    #####:   39:TypeRange::OwnerT TypeRange::offset_base(OwnerT object, ptrdiff_t index) {
    #####:   40:  if (const auto *value = object.dyn_cast<const Value *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   41:    return {value + index};
call    0 never executed
    #####:   42:  if (auto *operand = object.dyn_cast<OpOperand *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:    return {operand + index};
call    0 never executed
    #####:   44:  if (auto *result = object.dyn_cast<detail::OpResultImpl *>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:    return {result->getNextResultAtOffset(index)};
call    0 never executed
call    1 never executed
    #####:   46:  return {object.dyn_cast<const Type *>() + index};
call    0 never executed
call    1 never executed
        -:   47:}
        -:   48:
        -:   49:/// See `llvm::detail::indexed_accessor_range_base` for details.
function _ZN4mlir9TypeRange20dereference_iteratorEN4llvm12PointerUnionIJPKNS_5ValueEPKNS_4TypeEPNS_9OpOperandEPNS_6detail12OpResultImplEEEEl called 16929347269 returned 100% blocks executed 100%
16929347269:   50:Type TypeRange::dereference_iterator(OwnerT object, ptrdiff_t index) {
16929347269:   51:  if (const auto *value = object.dyn_cast<const Value *>())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
181161848:   52:    return (value + index)->getType();
16748183235:   53:  if (auto *operand = object.dyn_cast<OpOperand *>())
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
1380283627:   54:    return (operand + index)->get().getType();
15367901777:   55:  if (auto *result = object.dyn_cast<detail::OpResultImpl *>())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
745491939:   56:    return result->getNextResultAtOffset(index)->getType();
call    0 returned 100%
14622409692:   57:  return object.dyn_cast<const Type *>()[index];
call    0 returned 100%
        -:   58:}
