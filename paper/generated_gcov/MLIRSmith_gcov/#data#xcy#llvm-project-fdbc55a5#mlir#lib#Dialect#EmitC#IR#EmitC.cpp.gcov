        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/EmitC/IR/EmitC.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/EmitC/IR/CMakeFiles/obj.MLIREmitCDialect.dir/EmitC.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/EmitC/IR/CMakeFiles/obj.MLIREmitCDialect.dir/EmitC.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- EmitC.cpp - EmitC Dialect ------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/EmitC/IR/EmitC.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/DialectImplementation.h"
        -:   12:#include "llvm/ADT/StringExtras.h"
        -:   13:#include "llvm/ADT/TypeSwitch.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::emitc;
        -:   17:
        -:   18:#include "mlir/Dialect/EmitC/IR/EmitCDialect.cpp.inc"
        -:   19:
        -:   20://===----------------------------------------------------------------------===//
        -:   21:// EmitCDialect
        -:   22://===----------------------------------------------------------------------===//
        -:   23:
function _ZN4mlir5emitc12EmitCDialect10initializeEv called 0 returned 0% blocks executed 0%
    #####:   24:void EmitCDialect::initialize() {
    #####:   25:  addOperations<
        -:   26:#define GET_OP_LIST
        -:   27:#include "mlir/Dialect/EmitC/IR/EmitC.cpp.inc"
    #####:   28:      >();
call    0 never executed
    #####:   29:  addTypes<
        -:   30:#define GET_TYPEDEF_LIST
        -:   31:#include "mlir/Dialect/EmitC/IR/EmitCTypes.cpp.inc"
    #####:   32:      >();
call    0 never executed
    #####:   33:  addAttributes<
        -:   34:#define GET_ATTRDEF_LIST
        -:   35:#include "mlir/Dialect/EmitC/IR/EmitCAttributes.cpp.inc"
    #####:   36:      >();
call    0 never executed
    #####:   37:}
        -:   38:
        -:   39:/// Materialize a single constant operation from a given attribute value with
        -:   40:/// the desired resultant type.
function _ZN4mlir5emitc12EmitCDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:   41:Operation *EmitCDialect::materializeConstant(OpBuilder &builder,
        -:   42:                                             Attribute value, Type type,
        -:   43:                                             Location loc) {
    #####:   44:  return builder.create<emitc::ConstantOp>(loc, type, value);
call    0 never executed
        -:   45:}
        -:   46:
        -:   47://===----------------------------------------------------------------------===//
        -:   48:// ApplyOp
        -:   49://===----------------------------------------------------------------------===//
        -:   50:
function _ZN4mlir5emitc7ApplyOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   51:LogicalResult ApplyOp::verify() {
    #####:   52:  StringRef applicableOperatorStr = getApplicableOperator();
call    0 never executed
        -:   53:
        -:   54:  // Applicable operator must not be empty.
    #####:   55:  if (applicableOperatorStr.empty())
branch  0 never executed
branch  1 never executed
    #####:   56:    return emitOpError("applicable operator must not be empty");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   57:
        -:   58:  // Only `*` and `&` are supported.
    #####:   59:  if (applicableOperatorStr != "&" && applicableOperatorStr != "*")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   60:    return emitOpError("applicable operator is illegal");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   61:
    #####:   62:  return success();
        -:   63:}
        -:   64:
        -:   65://===----------------------------------------------------------------------===//
        -:   66:// CastOp
        -:   67://===----------------------------------------------------------------------===//
        -:   68:
function _ZN4mlir5emitc6CastOp17areCastCompatibleENS_9TypeRangeES2_ called 0 returned 0% blocks executed 0%
    #####:   69:bool CastOp::areCastCompatible(TypeRange inputs, TypeRange outputs) {
    #####:   70:  Type input = inputs.front(), output = outputs.front();
call    0 never executed
call    1 never executed
        -:   71:
    #####:   72:  return ((input.isa<IntegerType, FloatType, IndexType, emitc::OpaqueType,
call    0 never executed
    #####:   73:                     emitc::PointerType>()) &&
branch  0 never executed
branch  1 never executed
        -:   74:          (output.isa<IntegerType, FloatType, IndexType, emitc::OpaqueType,
    #####:   75:                      emitc::PointerType>()));
branch  0 never executed
branch  1 never executed
        -:   76:}
        -:   77:
        -:   78://===----------------------------------------------------------------------===//
        -:   79:// CallOp
        -:   80://===----------------------------------------------------------------------===//
        -:   81:
function _ZN4mlir5emitc6CallOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   82:LogicalResult emitc::CallOp::verify() {
        -:   83:  // Callee must not be empty.
    #####:   84:  if (getCallee().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:    return emitOpError("callee must not be empty");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   86:
    #####:   87:  if (Optional<ArrayAttr> argsAttr = getArgs()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:    for (Attribute arg : *argsAttr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   89:      auto intAttr = arg.dyn_cast<IntegerAttr>();
call    0 never executed
    #####:   90:      if (intAttr && intAttr.getType().isa<IndexType>()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   91:        int64_t index = intAttr.getInt();
call    0 never executed
        -:   92:        // Args with elements of type index must be in range
        -:   93:        // [0..operands.size).
    #####:   94:        if ((index < 0) || (index >= static_cast<int64_t>(getNumOperands())))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   95:          return emitOpError("index argument is out of range");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   96:
        -:   97:        // Args with elements of type ArrayAttr must have a type.
    #####:   98:      } else if (arg.isa<ArrayAttr>() /*&& arg.getType().isa<NoneType>()*/) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   99:        // FIXME: Array attributes never have types
    #####:  100:        return emitOpError("array argument has no type");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  101:      }
        -:  102:    }
        -:  103:  }
        -:  104:
    #####:  105:  if (Optional<ArrayAttr> templateArgsAttr = getTemplateArgs()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:    for (Attribute tArg : *templateArgsAttr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  107:      if (!tArg.isa<TypeAttr, IntegerAttr, FloatAttr, emitc::OpaqueAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:        return emitOpError("template argument has invalid type");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  109:    }
        -:  110:  }
        -:  111:
    #####:  112:  return success();
        -:  113:}
        -:  114:
        -:  115://===----------------------------------------------------------------------===//
        -:  116:// ConstantOp
        -:  117://===----------------------------------------------------------------------===//
        -:  118:
        -:  119:/// The constant op requires that the attribute's type matches the return type.
function _ZN4mlir5emitc10ConstantOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  120:LogicalResult emitc::ConstantOp::verify() {
    #####:  121:  if (getValueAttr().isa<emitc::OpaqueAttr>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  122:    return success();
        -:  123:
    #####:  124:  TypedAttr value = getValueAttr();
call    0 never executed
call    1 never executed
    #####:  125:  Type type = getType();
call    0 never executed
    #####:  126:  if (!value.getType().isa<NoneType>() && type != value.getType())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  127:    return emitOpError() << "requires attribute's type (" << value.getType()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  128:                         << ") to match op's return type (" << type << ")";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  129:  return success();
        -:  130:}
        -:  131:
function _ZN4mlir5emitc10ConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  132:OpFoldResult emitc::ConstantOp::fold(ArrayRef<Attribute> operands) {
    #####:  133:  assert(operands.empty() && "constant has no operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  134:  return getValue();
call    0 never executed
call    1 never executed
        -:  135:}
        -:  136:
        -:  137://===----------------------------------------------------------------------===//
        -:  138:// IncludeOp
        -:  139://===----------------------------------------------------------------------===//
        -:  140:
function _ZN4mlir5emitc9IncludeOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  141:void IncludeOp::print(OpAsmPrinter &p) {
    #####:  142:  bool standardInclude = getIsStandardInclude();
call    0 never executed
        -:  143:
    #####:  144:  p << " ";
call    0 never executed
    #####:  145:  if (standardInclude)
branch  0 never executed
branch  1 never executed
    #####:  146:    p << "<";
call    0 never executed
    #####:  147:  p << "\"" << getInclude() << "\"";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  148:  if (standardInclude)
branch  0 never executed
branch  1 never executed
    #####:  149:    p << ">";
call    0 never executed
    #####:  150:}
        -:  151:
function _ZN4mlir5emitc9IncludeOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  152:ParseResult IncludeOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  153:  bool standardInclude = !parser.parseOptionalLess();
call    0 never executed
call    1 never executed
        -:  154:
    #####:  155:  StringAttr include;
    #####:  156:  OptionalParseResult includeParseResult =
    #####:  157:      parser.parseOptionalAttribute(include, "include", result.attributes);
call    0 never executed
    #####:  158:  if (!includeParseResult.has_value())
branch  0 never executed
branch  1 never executed
    #####:  159:    return parser.emitError(parser.getNameLoc()) << "expected string attribute";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  160:
    #####:  161:  if (standardInclude && parser.parseOptionalGreater())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  162:    return parser.emitError(parser.getNameLoc())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  163:           << "expected trailing '>' for standard include";
call    0 never executed
call    1 never executed
        -:  164:
    #####:  165:  if (standardInclude)
branch  0 never executed
branch  1 never executed
    #####:  166:    result.addAttribute("is_standard_include",
call    0 never executed
    #####:  167:                        UnitAttr::get(parser.getContext()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  168:
    #####:  169:  return success();
        -:  170:}
        -:  171:
        -:  172://===----------------------------------------------------------------------===//
        -:  173:// VariableOp
        -:  174://===----------------------------------------------------------------------===//
        -:  175:
        -:  176:/// The variable op requires that the attribute's type matches the return type.
function _ZN4mlir5emitc10VariableOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  177:LogicalResult emitc::VariableOp::verify() {
    #####:  178:  if (getValueAttr().isa<emitc::OpaqueAttr>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  179:    return success();
        -:  180:
    #####:  181:  TypedAttr value = getValueAttr();
call    0 never executed
call    1 never executed
    #####:  182:  Type type = getType();
call    0 never executed
    #####:  183:  if (!value.getType().isa<NoneType>() && type != value.getType())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  184:    return emitOpError() << "requires attribute's type (" << value.getType()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  185:                         << ") to match op's return type (" << type << ")";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  186:  return success();
        -:  187:}
        -:  188:
        -:  189://===----------------------------------------------------------------------===//
        -:  190:// TableGen'd op method definitions
        -:  191://===----------------------------------------------------------------------===//
        -:  192:
        -:  193:#define GET_OP_CLASSES
        -:  194:#include "mlir/Dialect/EmitC/IR/EmitC.cpp.inc"
        -:  195:
        -:  196://===----------------------------------------------------------------------===//
        -:  197:// EmitC Attributes
        -:  198://===----------------------------------------------------------------------===//
        -:  199:
        -:  200:#define GET_ATTRDEF_CLASSES
        -:  201:#include "mlir/Dialect/EmitC/IR/EmitCAttributes.cpp.inc"
        -:  202:
function _ZN4mlir5emitc10OpaqueAttr5parseERNS_9AsmParserENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:  203:Attribute emitc::OpaqueAttr::parse(AsmParser &parser, Type type) {
    #####:  204:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  205:    return Attribute();
    #####:  206:  std::string value;
call    0 never executed
    #####:  207:  SMLoc loc = parser.getCurrentLocation();
call    0 never executed
    #####:  208:  if (parser.parseOptionalString(&value)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  209:    parser.emitError(loc) << "expected string";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  210:    return Attribute();
        -:  211:  }
    #####:  212:  if (parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  213:    return Attribute();
        -:  214:
    #####:  215:  return get(parser.getContext(), value);
call    0 never executed
call    1 never executed
        -:  216:}
        -:  217:
function _ZNK4mlir5emitc10OpaqueAttr5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  218:void emitc::OpaqueAttr::print(AsmPrinter &printer) const {
    #####:  219:  printer << "<\"";
call    0 never executed
    #####:  220:  llvm::printEscapedString(getValue(), printer.getStream());
call    0 never executed
call    1 never executed
    #####:  221:  printer << "\">";
call    0 never executed
    #####:  222:}
        -:  223:
        -:  224://===----------------------------------------------------------------------===//
        -:  225:// EmitC Types
        -:  226://===----------------------------------------------------------------------===//
        -:  227:
        -:  228:#define GET_TYPEDEF_CLASSES
        -:  229:#include "mlir/Dialect/EmitC/IR/EmitCTypes.cpp.inc"
        -:  230:
        -:  231://===----------------------------------------------------------------------===//
        -:  232:// OpaqueType
        -:  233://===----------------------------------------------------------------------===//
        -:  234:
function _ZN4mlir5emitc10OpaqueType5parseERNS_9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  235:Type emitc::OpaqueType::parse(AsmParser &parser) {
    #####:  236:  if (parser.parseLess())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:    return Type();
    #####:  238:  std::string value;
call    0 never executed
    #####:  239:  SMLoc loc = parser.getCurrentLocation();
call    0 never executed
    #####:  240:  if (parser.parseOptionalString(&value) || value.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  241:    parser.emitError(loc) << "expected non empty string in !emitc.opaque type";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  242:    return Type();
        -:  243:  }
    #####:  244:  if (value.back() == '*') {
branch  0 never executed
branch  1 never executed
    #####:  245:    parser.emitError(loc) << "pointer not allowed as outer type with "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  246:                             "!emitc.opaque, use !emitc.ptr instead";
call    0 never executed
    #####:  247:    return Type();
        -:  248:  }
    #####:  249:  if (parser.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  250:    return Type();
    #####:  251:  return get(parser.getContext(), value);
call    0 never executed
call    1 never executed
        -:  252:}
        -:  253:
function _ZNK4mlir5emitc10OpaqueType5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  254:void emitc::OpaqueType::print(AsmPrinter &printer) const {
    #####:  255:  printer << "<\"";
call    0 never executed
    #####:  256:  llvm::printEscapedString(getValue(), printer.getStream());
call    0 never executed
call    1 never executed
    #####:  257:  printer << "\">";
call    0 never executed
    #####:  258:}
