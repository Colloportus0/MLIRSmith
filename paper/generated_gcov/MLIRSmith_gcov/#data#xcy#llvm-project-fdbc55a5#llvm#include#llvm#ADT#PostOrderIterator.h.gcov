        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/llvm/include/llvm/ADT/PostOrderIterator.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/ModuleTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/CMakeFiles/obj.MLIRTargetLLVMIRExport.dir/ModuleTranslation.cpp.gcda
        -:    0:Runs:116169
        -:    1://===- llvm/ADT/PostOrderIterator.h - PostOrder iterator --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:///
        -:    9:/// \file
        -:   10:/// This file builds on the ADT/GraphTraits.h file to build a generic graph
        -:   11:/// post order iterator.  This should work over any graph type that has a
        -:   12:/// GraphTraits specialization.
        -:   13:///
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#ifndef LLVM_ADT_POSTORDERITERATOR_H
        -:   17:#define LLVM_ADT_POSTORDERITERATOR_H
        -:   18:
        -:   19:#include "llvm/ADT/GraphTraits.h"
        -:   20:#include "llvm/ADT/Optional.h"
        -:   21:#include "llvm/ADT/SmallPtrSet.h"
        -:   22:#include "llvm/ADT/SmallVector.h"
        -:   23:#include "llvm/ADT/iterator_range.h"
        -:   24:#include <iterator>
        -:   25:#include <set>
        -:   26:#include <utility>
        -:   27:#include <vector>
        -:   28:
        -:   29:namespace llvm {
        -:   30:
        -:   31:// The po_iterator_storage template provides access to the set of already
        -:   32:// visited nodes during the po_iterator's depth-first traversal.
        -:   33://
        -:   34:// The default implementation simply contains a set of visited nodes, while
        -:   35:// the External=true version uses a reference to an external set.
        -:   36://
        -:   37:// It is possible to prune the depth-first traversal in several ways:
        -:   38://
        -:   39:// - When providing an external set that already contains some graph nodes,
        -:   40://   those nodes won't be visited again. This is useful for restarting a
        -:   41://   post-order traversal on a graph with nodes that aren't dominated by a
        -:   42://   single node.
        -:   43://
        -:   44:// - By providing a custom SetType class, unwanted graph nodes can be excluded
        -:   45://   by having the insert() function return false. This could for example
        -:   46://   confine a CFG traversal to blocks in a specific loop.
        -:   47://
        -:   48:// - Finally, by specializing the po_iterator_storage template itself, graph
        -:   49://   edges can be pruned by returning false in the insertEdge() function. This
        -:   50://   could be used to remove loop back-edges from the CFG seen by po_iterator.
        -:   51://
        -:   52:// A specialized po_iterator_storage class can observe both the pre-order and
        -:   53:// the post-order. The insertEdge() function is called in a pre-order, while
        -:   54:// the finishPostorder() function is called just before the po_iterator moves
        -:   55:// on to the next node.
        -:   56:
        -:   57:/// Default po_iterator_storage implementation with an internal set object.
        -:   58:template<class SetType, bool External>
    #####:   59:class po_iterator_storage {
        -:   60:  SetType Visited;
        -:   61:
        -:   62:public:
        -:   63:  // Return true if edge destination should be visited.
        -:   64:  template <typename NodeRef>
    #####:   65:  bool insertEdge(Optional<NodeRef> From, NodeRef To) {
    #####:   66:    return Visited.insert(To).second;
call    0 never executed
call    1 never executed
        -:   67:  }
        -:   68:
        -:   69:  // Called after all children of BB have been visited.
    #####:   70:  template <typename NodeRef> void finishPostorder(NodeRef BB) {}
        -:   71:};
        -:   72:
        -:   73:/// Specialization of po_iterator_storage that references an external set.
        -:   74:template<class SetType>
        -:   75:class po_iterator_storage<SetType, true> {
        -:   76:  SetType &Visited;
        -:   77:
        -:   78:public:
        -:   79:  po_iterator_storage(SetType &VSet) : Visited(VSet) {}
        -:   80:  po_iterator_storage(const po_iterator_storage &S) : Visited(S.Visited) {}
        -:   81:
        -:   82:  // Return true if edge destination should be visited, called with From = 0 for
        -:   83:  // the root node.
        -:   84:  // Graph edges can be pruned by specializing this function.
        -:   85:  template <class NodeRef> bool insertEdge(Optional<NodeRef> From, NodeRef To) {
        -:   86:    return Visited.insert(To).second;
        -:   87:  }
        -:   88:
        -:   89:  // Called after all children of BB have been visited.
        -:   90:  template <class NodeRef> void finishPostorder(NodeRef BB) {}
        -:   91:};
        -:   92:
        -:   93:template <class GraphT,
        -:   94:          class SetType = SmallPtrSet<typename GraphTraits<GraphT>::NodeRef, 8>,
        -:   95:          bool ExtStorage = false, class GT = GraphTraits<GraphT>>
        -:   96:class po_iterator : public po_iterator_storage<SetType, ExtStorage> {
        -:   97:public:
        -:   98:  using iterator_category = std::forward_iterator_tag;
        -:   99:  using value_type = typename GT::NodeRef;
        -:  100:  using difference_type = std::ptrdiff_t;
        -:  101:  using pointer = value_type *;
        -:  102:  using reference = value_type &;
        -:  103:
        -:  104:private:
        -:  105:  using NodeRef = typename GT::NodeRef;
        -:  106:  using ChildItTy = typename GT::ChildIteratorType;
        -:  107:
        -:  108:  // VisitStack - Used to maintain the ordering.  Top = current block
        -:  109:  // First element is basic block pointer, second is the 'next child' to visit
        -:  110:  SmallVector<std::pair<NodeRef, ChildItTy>, 8> VisitStack;
        -:  111:
function _ZN4llvm11po_iteratorIPN4mlir5BlockENS_11SmallPtrSetIS3_Lj8EEELb0ENS_11GraphTraitsIS3_EEEC2ES3_ called 0 returned 0% blocks executed 0%
    #####:  112:  po_iterator(NodeRef BB) {
call    0 never executed
call    1 never executed
    #####:  113:    this->insertEdge(Optional<NodeRef>(), BB);
call    0 never executed
    #####:  114:    VisitStack.push_back(std::make_pair(BB, GT::child_begin(BB)));
call    0 never executed
call    1 never executed
    #####:  115:    traverseChild();
call    0 never executed
    #####:  116:  }
        -:  117:
    #####:  118:  po_iterator() = default; // End is when stack is empty.
call    0 never executed
        -:  119:
        -:  120:  po_iterator(NodeRef BB, SetType &S)
        -:  121:      : po_iterator_storage<SetType, ExtStorage>(S) {
        -:  122:    if (this->insertEdge(Optional<NodeRef>(), BB)) {
        -:  123:      VisitStack.push_back(std::make_pair(BB, GT::child_begin(BB)));
        -:  124:      traverseChild();
        -:  125:    }
        -:  126:  }
        -:  127:
        -:  128:  po_iterator(SetType &S)
        -:  129:      : po_iterator_storage<SetType, ExtStorage>(S) {
        -:  130:  } // End is when stack is empty.
        -:  131:
function _ZN4llvm11po_iteratorIPN4mlir5BlockENS_11SmallPtrSetIS3_Lj8EEELb0ENS_11GraphTraitsIS3_EEE13traverseChildEv called 0 returned 0% blocks executed 0%
    #####:  132:  void traverseChild() {
    #####:  133:    while (VisitStack.back().second != GT::child_end(VisitStack.back().first)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  134:      NodeRef BB = *VisitStack.back().second++;
call    0 never executed
    #####:  135:      if (this->insertEdge(Optional<NodeRef>(VisitStack.back().first), BB)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  136:        // If the block is not visited...
    #####:  137:        VisitStack.push_back(std::make_pair(BB, GT::child_begin(BB)));
call    0 never executed
call    1 never executed
        -:  138:      }
        -:  139:    }
    #####:  140:  }
        -:  141:
        -:  142:public:
        -:  143:  // Provide static "constructors"...
    #####:  144:  static po_iterator begin(const GraphT &G) {
    #####:  145:    return po_iterator(GT::getEntryNode(G));
        -:  146:  }
    #####:  147:  static po_iterator end(const GraphT &G) { return po_iterator(); }
        -:  148:
        -:  149:  static po_iterator begin(const GraphT &G, SetType &S) {
        -:  150:    return po_iterator(GT::getEntryNode(G), S);
        -:  151:  }
        -:  152:  static po_iterator end(const GraphT &G, SetType &S) { return po_iterator(S); }
        -:  153:
    #####:  154:  bool operator==(const po_iterator &x) const {
    #####:  155:    return VisitStack == x.VisitStack;
        -:  156:  }
    #####:  157:  bool operator!=(const po_iterator &x) const { return !(*this == x); }
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  158:
    #####:  159:  const NodeRef &operator*() const { return VisitStack.back().first; }
call    0 never executed
call    1 never executed
        -:  160:
        -:  161:  // This is a nonstandard operator-> that dereferences the pointer an extra
        -:  162:  // time... so that you can actually call methods ON the BasicBlock, because
        -:  163:  // the contained type is a pointer.  This allows BBIt->getTerminator() f.e.
        -:  164:  //
        -:  165:  NodeRef operator->() const { return **this; }
        -:  166:
function _ZN4llvm11po_iteratorIPN4mlir5BlockENS_11SmallPtrSetIS3_Lj8EEELb0ENS_11GraphTraitsIS3_EEEppEv called 0 returned 0% blocks executed 0%
    #####:  167:  po_iterator &operator++() { // Preincrement
    #####:  168:    this->finishPostorder(VisitStack.back().first);
call    0 never executed
    #####:  169:    VisitStack.pop_back();
call    0 never executed
    #####:  170:    if (!VisitStack.empty())
branch  0 never executed
branch  1 never executed
    #####:  171:      traverseChild();
call    0 never executed
    #####:  172:    return *this;
        -:  173:  }
        -:  174:
        -:  175:  po_iterator operator++(int) { // Postincrement
        -:  176:    po_iterator tmp = *this;
        -:  177:    ++*this;
        -:  178:    return tmp;
        -:  179:  }
        -:  180:};
        -:  181:
        -:  182:// Provide global constructors that automatically figure out correct types...
        -:  183://
        -:  184:template <class T>
    #####:  185:po_iterator<T> po_begin(const T &G) { return po_iterator<T>::begin(G); }
        -:  186:template <class T>
    #####:  187:po_iterator<T> po_end  (const T &G) { return po_iterator<T>::end(G); }
call    0 never executed
        -:  188:
        -:  189:template <class T> iterator_range<po_iterator<T>> post_order(const T &G) {
        -:  190:  return make_range(po_begin(G), po_end(G));
        -:  191:}
        -:  192:
        -:  193:// Provide global definitions of external postorder iterators...
        -:  194:template <class T, class SetType = std::set<typename GraphTraits<T>::NodeRef>>
        -:  195:struct po_ext_iterator : public po_iterator<T, SetType, true> {
        -:  196:  po_ext_iterator(const po_iterator<T, SetType, true> &V) :
        -:  197:  po_iterator<T, SetType, true>(V) {}
        -:  198:};
        -:  199:
        -:  200:template<class T, class SetType>
        -:  201:po_ext_iterator<T, SetType> po_ext_begin(T G, SetType &S) {
        -:  202:  return po_ext_iterator<T, SetType>::begin(G, S);
        -:  203:}
        -:  204:
        -:  205:template<class T, class SetType>
        -:  206:po_ext_iterator<T, SetType> po_ext_end(T G, SetType &S) {
        -:  207:  return po_ext_iterator<T, SetType>::end(G, S);
        -:  208:}
        -:  209:
        -:  210:template <class T, class SetType>
        -:  211:iterator_range<po_ext_iterator<T, SetType>> post_order_ext(const T &G, SetType &S) {
        -:  212:  return make_range(po_ext_begin(G, S), po_ext_end(G, S));
        -:  213:}
        -:  214:
        -:  215:// Provide global definitions of inverse post order iterators...
        -:  216:template <class T, class SetType = std::set<typename GraphTraits<T>::NodeRef>,
        -:  217:          bool External = false>
        -:  218:struct ipo_iterator : public po_iterator<Inverse<T>, SetType, External> {
        -:  219:  ipo_iterator(const po_iterator<Inverse<T>, SetType, External> &V) :
        -:  220:     po_iterator<Inverse<T>, SetType, External> (V) {}
        -:  221:};
        -:  222:
        -:  223:template <class T>
        -:  224:ipo_iterator<T> ipo_begin(const T &G) {
        -:  225:  return ipo_iterator<T>::begin(G);
        -:  226:}
        -:  227:
        -:  228:template <class T>
        -:  229:ipo_iterator<T> ipo_end(const T &G){
        -:  230:  return ipo_iterator<T>::end(G);
        -:  231:}
        -:  232:
        -:  233:template <class T>
        -:  234:iterator_range<ipo_iterator<T>> inverse_post_order(const T &G) {
        -:  235:  return make_range(ipo_begin(G), ipo_end(G));
        -:  236:}
        -:  237:
        -:  238:// Provide global definitions of external inverse postorder iterators...
        -:  239:template <class T, class SetType = std::set<typename GraphTraits<T>::NodeRef>>
        -:  240:struct ipo_ext_iterator : public ipo_iterator<T, SetType, true> {
        -:  241:  ipo_ext_iterator(const ipo_iterator<T, SetType, true> &V) :
        -:  242:    ipo_iterator<T, SetType, true>(V) {}
        -:  243:  ipo_ext_iterator(const po_iterator<Inverse<T>, SetType, true> &V) :
        -:  244:    ipo_iterator<T, SetType, true>(V) {}
        -:  245:};
        -:  246:
        -:  247:template <class T, class SetType>
        -:  248:ipo_ext_iterator<T, SetType> ipo_ext_begin(const T &G, SetType &S) {
        -:  249:  return ipo_ext_iterator<T, SetType>::begin(G, S);
        -:  250:}
        -:  251:
        -:  252:template <class T, class SetType>
        -:  253:ipo_ext_iterator<T, SetType> ipo_ext_end(const T &G, SetType &S) {
        -:  254:  return ipo_ext_iterator<T, SetType>::end(G, S);
        -:  255:}
        -:  256:
        -:  257:template <class T, class SetType>
        -:  258:iterator_range<ipo_ext_iterator<T, SetType>>
        -:  259:inverse_post_order_ext(const T &G, SetType &S) {
        -:  260:  return make_range(ipo_ext_begin(G, S), ipo_ext_end(G, S));
        -:  261:}
        -:  262:
        -:  263://===--------------------------------------------------------------------===//
        -:  264:// Reverse Post Order CFG iterator code
        -:  265://===--------------------------------------------------------------------===//
        -:  266://
        -:  267:// This is used to visit basic blocks in a method in reverse post order.  This
        -:  268:// class is awkward to use because I don't know a good incremental algorithm to
        -:  269:// computer RPO from a graph.  Because of this, the construction of the
        -:  270:// ReversePostOrderTraversal object is expensive (it must walk the entire graph
        -:  271:// with a postorder iterator to build the data structures).  The moral of this
        -:  272:// story is: Don't create more ReversePostOrderTraversal classes than necessary.
        -:  273://
        -:  274:// Because it does the traversal in its constructor, it won't invalidate when
        -:  275:// BasicBlocks are removed, *but* it may contain erased blocks. Some places
        -:  276:// rely on this behavior (i.e. GVN).
        -:  277://
        -:  278:// This class should be used like this:
        -:  279:// {
        -:  280://   ReversePostOrderTraversal<Function*> RPOT(FuncPtr); // Expensive to create
        -:  281://   for (rpo_iterator I = RPOT.begin(); I != RPOT.end(); ++I) {
        -:  282://      ...
        -:  283://   }
        -:  284://   for (rpo_iterator I = RPOT.begin(); I != RPOT.end(); ++I) {
        -:  285://      ...
        -:  286://   }
        -:  287:// }
        -:  288://
        -:  289:
        -:  290:template<class GraphT, class GT = GraphTraits<GraphT>>
    #####:  291:class ReversePostOrderTraversal {
branch  0 never executed
branch  1 never executed
        -:  292:  using NodeRef = typename GT::NodeRef;
        -:  293:
        -:  294:  std::vector<NodeRef> Blocks; // Block list in normal PO order
        -:  295:
function _ZN4llvm25ReversePostOrderTraversalIPN4mlir5BlockENS_11GraphTraitsIS3_EEE10InitializeERKS3_ called 0 returned 0% blocks executed 0%
    #####:  296:  void Initialize(const GraphT &G) {
    #####:  297:    std::copy(po_begin(G), po_end(G), std::back_inserter(Blocks));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  298:  }
        -:  299:
        -:  300:public:
        -:  301:  using rpo_iterator = typename std::vector<NodeRef>::reverse_iterator;
        -:  302:  using const_rpo_iterator = typename std::vector<NodeRef>::const_reverse_iterator;
        -:  303:
    #####:  304:  ReversePostOrderTraversal(const GraphT &G) { Initialize(G); }
call    0 never executed
        -:  305:
        -:  306:  // Because we want a reverse post order, use reverse iterators from the vector
    #####:  307:  rpo_iterator begin() { return Blocks.rbegin(); }
call    0 never executed
        -:  308:  const_rpo_iterator begin() const { return Blocks.crbegin(); }
    #####:  309:  rpo_iterator end() { return Blocks.rend(); }
call    0 never executed
        -:  310:  const_rpo_iterator end() const { return Blocks.crend(); }
        -:  311:};
        -:  312:
        -:  313:} // end namespace llvm
        -:  314:
        -:  315:#endif // LLVM_ADT_POSTORDERITERATOR_H
