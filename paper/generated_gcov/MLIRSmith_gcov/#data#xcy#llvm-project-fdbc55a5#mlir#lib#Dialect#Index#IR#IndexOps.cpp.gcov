        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Index/IR/IndexOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Index/IR/CMakeFiles/obj.MLIRIndexDialect.dir/IndexOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Index/IR/CMakeFiles/obj.MLIRIndexDialect.dir/IndexOps.cpp.gcda
        -:    0:Runs:116158
        -:    1://===- IndexOps.cpp - Index operation definitions --------------------------==//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Index/IR/IndexOps.h"
        -:   10:#include "mlir/Dialect/Index/IR/IndexAttrs.h"
        -:   11:#include "mlir/Dialect/Index/IR/IndexDialect.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/IR/OpImplementation.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::index;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// IndexDialect
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
function _ZN4mlir5index12IndexDialect18registerOperationsEv called 91592 returned 100% blocks executed 100%
    91592:   22:void IndexDialect::registerOperations() {
    91592:   23:  addOperations<
        -:   24:#define GET_OP_LIST
        -:   25:#include "mlir/Dialect/Index/IR/IndexOps.cpp.inc"
    91592:   26:      >();
call    0 returned 100%
    91592:   27:}
        -:   28:
function _ZN4mlir5index12IndexDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 769701 returned 100% blocks executed 87%
   769701:   29:Operation *IndexDialect::materializeConstant(OpBuilder &b, Attribute value,
        -:   30:                                             Type type, Location loc) {
        -:   31:  // Materialize bool constants as `i1`.
   769701:   32:  if (auto boolValue = dyn_cast<BoolAttr>(value)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
      917:   33:    if (!type.isSignlessInteger(1))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      917:   34:      return nullptr;
      917:   35:    return b.create<BoolConstantOp>(loc, type, boolValue);
call    0 returned 100%
        -:   36:  }
        -:   37:
        -:   38:  // Materialize integer attributes as `index`.
   768784:   39:  if (auto indexValue = dyn_cast<IntegerAttr>(value)) {
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
 1537568*:   40:    if (!indexValue.getType().isa<IndexType>() || !type.isa<IndexType>())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
  768784*:   41:      return nullptr;
  768784*:   42:    assert(indexValue.getValue().getBitWidth() ==
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   43:           IndexType::kInternalStorageBitWidth);
   768784:   44:    return b.create<ConstantOp>(loc, indexValue);
call    0 returned 100%
        -:   45:  }
        -:   46:
    #####:   47:  return nullptr;
        -:   48:}
        -:   49:
        -:   50://===----------------------------------------------------------------------===//
        -:   51:// Fold Utilities
        -:   52://===----------------------------------------------------------------------===//
        -:   53:
        -:   54:/// Fold an index operation irrespective of the target bitwidth. The
        -:   55:/// operation must satisfy the property:
        -:   56:///
        -:   57:/// ```
        -:   58:/// trunc(f(a, b)) = f(trunc(a), trunc(b))
        -:   59:/// ```
        -:   60:///
        -:   61:/// For all values of `a` and `b`. The function accepts a lambda that computes
        -:   62:/// the integer result, which in turn must satisfy the above property.
function _ZL21foldBinaryOpUncheckedN4llvm8ArrayRefIN4mlir9AttributeEEENS_12function_refIFNS_5APIntERKS5_S7_EEE called 679510 returned 100% blocks executed 64%
   679510:   63:static OpFoldResult foldBinaryOpUnchecked(
        -:   64:    ArrayRef<Attribute> operands,
        -:   65:    function_ref<APInt(const APInt &, const APInt &)> calculate) {
  679510*:   66:  assert(operands.size() == 2 && "binary operation expected 2 operands");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   679510:   67:  auto lhs = dyn_cast_if_present<IntegerAttr>(operands[0]);
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
   679510:   68:  auto rhs = dyn_cast_if_present<IntegerAttr>(operands[1]);
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
   679510:   69:  if (!lhs || !rhs)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
branch  2 taken 35% (fallthrough)
branch  3 taken 65%
   424884:   70:    return {};
        -:   71:
   254626:   72:  APInt result = calculate(lhs.getValue(), rhs.getValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
  509252*:   73:  assert(result.trunc(32) ==
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
        -:   74:         calculate(lhs.getValue().trunc(32), rhs.getValue().trunc(32)));
   254626:   75:  return IntegerAttr::get(IndexType::get(lhs.getContext()), std::move(result));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   76:}
        -:   77:
        -:   78:/// Fold an index operation only if the truncated 64-bit result matches the
        -:   79:/// 32-bit result for operations that don't satisfy the above property. These
        -:   80:/// are operations where the upper bits of the operands can affect the lower
        -:   81:/// bits of the results.
        -:   82:///
        -:   83:/// The function accepts a lambda that computes the integer result in both
        -:   84:/// 64-bit and 32-bit. If either call returns `None`, the operation is not
        -:   85:/// folded.
function _ZL19foldBinaryOpCheckedN4llvm8ArrayRefIN4mlir9AttributeEEENS_12function_refIFNS_8OptionalINS_5APIntEEERKS6_S9_EEE called 1726515 returned 100% blocks executed 71%
  1726515:   86:static OpFoldResult foldBinaryOpChecked(
        -:   87:    ArrayRef<Attribute> operands,
        -:   88:    function_ref<Optional<APInt>(const APInt &, const APInt &lhs)> calculate) {
 1726515*:   89:  assert(operands.size() == 2 && "binary operation expected 2 operands");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
  1726515:   90:  auto lhs = dyn_cast_if_present<IntegerAttr>(operands[0]);
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
  1726515:   91:  auto rhs = dyn_cast_if_present<IntegerAttr>(operands[1]);
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -:   92:  // Only fold index operands.
  1726515:   93:  if (!lhs || !rhs)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
  1101057:   94:    return {};
        -:   95:
        -:   96:  // Compute the 64-bit result and the 32-bit result.
   625458:   97:  Optional<APInt> result64 = calculate(lhs.getValue(), rhs.getValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
   625458:   98:  if (!result64)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
    47708:   99:    return {};
   577750:  100:  Optional<APInt> result32 =
  1203208:  101:      calculate(lhs.getValue().trunc(32), rhs.getValue().trunc(32));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 returned 100%
   577750:  102:  if (!result32)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  103:    return {};
        -:  104:  // Compare the truncated 64-bit result to the 32-bit result.
   577750:  105:  if (result64->trunc(32) != *result32)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 100%
     1240:  106:    return {};
        -:  107:  // The operation can be folded for these particular operands.
   576510:  108:  return IntegerAttr::get(IndexType::get(lhs.getContext()),
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
  1153020:  109:                          std::move(*result64));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  110:}
        -:  111:
        -:  112://===----------------------------------------------------------------------===//
        -:  113:// AddOp
        -:  114://===----------------------------------------------------------------------===//
        -:  115:
function _ZN4mlir5index5AddOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  211881*:  116:OpFoldResult AddOp::fold(ArrayRef<Attribute> operands) {
  211881*:  117:  return foldBinaryOpUnchecked(
function _ZZN4mlir5index5AddOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 160320 returned 100% blocks executed 67%
  532521*:  118:      operands, [](const APInt &lhs, const APInt &rhs) { return lhs + rhs; });
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
branch  6 taken 38% (fallthrough)
branch  7 taken 62%
call    8 never executed
        -:  119:}
        -:  120:
        -:  121://===----------------------------------------------------------------------===//
        -:  122:// SubOp
        -:  123://===----------------------------------------------------------------------===//
        -:  124:
function _ZN4mlir5index5SubOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  242775*:  125:OpFoldResult SubOp::fold(ArrayRef<Attribute> operands) {
  242775*:  126:  return foldBinaryOpUnchecked(
function _ZZN4mlir5index5SubOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 170530 returned 100% blocks executed 67%
  583835*:  127:      operands, [](const APInt &lhs, const APInt &rhs) { return lhs - rhs; });
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
branch  6 taken 35% (fallthrough)
branch  7 taken 65%
call    8 never executed
        -:  128:}
        -:  129:
        -:  130://===----------------------------------------------------------------------===//
        -:  131:// MulOp
        -:  132://===----------------------------------------------------------------------===//
        -:  133:
function _ZN4mlir5index5MulOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  224854*:  134:OpFoldResult MulOp::fold(ArrayRef<Attribute> operands) {
  224854*:  135:  return foldBinaryOpUnchecked(
  403256*:  136:      operands, [](const APInt &lhs, const APInt &rhs) { return lhs * rhs; });
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
call    3 returned 100%
call    4 never executed
        -:  137:}
        -:  138:
        -:  139://===----------------------------------------------------------------------===//
        -:  140:// DivSOp
        -:  141://===----------------------------------------------------------------------===//
        -:  142:
function _ZN4mlir5index6DivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  282947*:  143:OpFoldResult DivSOp::fold(ArrayRef<Attribute> operands) {
  282947*:  144:  return foldBinaryOpChecked(
function _ZZN4mlir5index6DivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 188386 returned 100% blocks executed 88%
   188386:  145:      operands, [](const APInt &lhs, const APInt &rhs) -> Optional<APInt> {
        -:  146:        // Don't fold division by zero.
   376772:  147:        if (rhs.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
    18604:  148:          return None;
   169782:  149:        return lhs.sdiv(rhs);
call    0 returned 100%
  282947*:  150:      });
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
call    3 never executed
        -:  151:}
        -:  152:
        -:  153://===----------------------------------------------------------------------===//
        -:  154:// DivUOp
        -:  155://===----------------------------------------------------------------------===//
        -:  156:
function _ZN4mlir5index6DivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  221571*:  157:OpFoldResult DivUOp::fold(ArrayRef<Attribute> operands) {
  221571*:  158:  return foldBinaryOpChecked(
function _ZZN4mlir5index6DivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 164117 returned 100% blocks executed 88%
   164117:  159:      operands, [](const APInt &lhs, const APInt &rhs) -> Optional<APInt> {
        -:  160:        // Don't fold division by zero.
   328234:  161:        if (rhs.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
     8713:  162:          return None;
   155404:  163:        return lhs.udiv(rhs);
call    0 returned 100%
  221571*:  164:      });
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
call    3 never executed
        -:  165:}
        -:  166:
        -:  167://===----------------------------------------------------------------------===//
        -:  168:// CeilDivSOp
        -:  169://===----------------------------------------------------------------------===//
        -:  170:
        -:  171:/// Compute `ceildivs(n, m)` as `x = m > 0 ? -1 : 1` and then
        -:  172:/// `n*m > 0 ? (n+x)/m + 1 : -(-n/m)`.
function _ZL17calculateCeilDivSRKN4llvm5APIntES2_ called 166934 returned 100% blocks executed 67%
   166934:  173:static Optional<APInt> calculateCeilDivS(const APInt &n, const APInt &m) {
        -:  174:  // Don't fold division by zero.
   333868:  175:  if (m.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     6880:  176:    return None;
        -:  177:  // Short-circuit the zero case.
   320108:  178:  if (n.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
    12622:  179:    return n;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  180:
   147432:  181:  bool mGtZ = m.sgt(0);
call    0 returned 100%
   147432:  182:  if (n.sgt(0) != mGtZ) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  183:    // If the operands have different signs, compute the negative result. Signed
        -:  184:    // division overflow is not possible, since if `m == -1`, `n` can be at most
        -:  185:    // `INT_MAX`, and `-INT_MAX != INT_MIN` in two's complement.
     4196:  186:    return -(-n).sdiv(m);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -:  187:  }
        -:  188:  // Otherwise, compute the positive result. Signed division overflow is not
        -:  189:  // possible since if `m == -1`, `x` will be `1`.
   145334:  190:  int64_t x = mGtZ ? -1 : 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
   290668:  191:  return (n + x).sdiv(m) + 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -:  192:}
        -:  193:
function _ZN4mlir5index10CeilDivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  231653*:  194:OpFoldResult CeilDivSOp::fold(ArrayRef<Attribute> operands) {
  231653*:  195:  return foldBinaryOpChecked(operands, calculateCeilDivS);
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
call    3 never executed
        -:  196:}
        -:  197:
        -:  198://===----------------------------------------------------------------------===//
        -:  199:// CeilDivUOp
        -:  200://===----------------------------------------------------------------------===//
        -:  201:
function _ZN4mlir5index10CeilDivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  232207*:  202:OpFoldResult CeilDivUOp::fold(ArrayRef<Attribute> operands) {
        -:  203:  // Compute `ceildivu(n, m)` as `n == 0 ? 0 : (n-1)/m + 1`.
  232207*:  204:  return foldBinaryOpChecked(
function _ZZN4mlir5index10CeilDivUOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 147252 returned 100% blocks executed 67%
   147252:  205:      operands, [](const APInt &n, const APInt &m) -> Optional<APInt> {
        -:  206:        // Don't fold division by zero.
   294504:  207:        if (m.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
     7062:  208:          return None;
        -:  209:        // Short-circuit the zero case.
   280380:  210:        if (n.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
    11320:  211:          return n;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  212:
   257740:  213:        return (n - 1).udiv(m) + 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
  232207*:  214:      });
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
call    3 never executed
        -:  215:}
        -:  216:
        -:  217://===----------------------------------------------------------------------===//
        -:  218:// FloorDivSOp
        -:  219://===----------------------------------------------------------------------===//
        -:  220:
        -:  221:/// Compute `floordivs(n, m)` as `x = m < 0 ? 1 : -1` and then
        -:  222:/// `n*m < 0 ? -1 - (x-n)/m : n/m`.
function _ZL18calculateFloorDivSRKN4llvm5APIntES2_ called 155383 returned 100% blocks executed 73%
   155383:  223:static Optional<APInt> calculateFloorDivS(const APInt &n, const APInt &m) {
        -:  224:  // Don't fold division by zero.
   310766:  225:  if (m.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     6449:  226:    return None;
        -:  227:  // Short-circuit the zero case.
   297868:  228:  if (n.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
    10264:  229:    return n;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  230:
   138670:  231:  bool mLtZ = m.slt(0);
call    0 returned 100%
   138670:  232:  if (n.slt(0) == mLtZ) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
        -:  233:    // If the operands have the same sign, compute the positive result.
   134666:  234:    return n.sdiv(m);
call    0 returned 100%
        -:  235:  }
        -:  236:  // If the operands have different signs, compute the negative result. Signed
        -:  237:  // division overflow is not possible since if `m == -1`, `x` will be 1 and
        -:  238:  // `n` can be at most `INT_MAX`.
     4004:  239:  int64_t x = mLtZ ? 1 : -1;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     8008:  240:  return -1 - (x - n).sdiv(m);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -:  241:}
        -:  242:
function _ZN4mlir5index11FloorDivSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  218443*:  243:OpFoldResult FloorDivSOp::fold(ArrayRef<Attribute> operands) {
  218443*:  244:  return foldBinaryOpChecked(operands, calculateFloorDivS);
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
call    3 never executed
        -:  245:}
        -:  246:
        -:  247://===----------------------------------------------------------------------===//
        -:  248:// RemSOp
        -:  249://===----------------------------------------------------------------------===//
        -:  250:
function _ZN4mlir5index6RemSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  251:OpFoldResult RemSOp::fold(ArrayRef<Attribute> operands) {
    #####:  252:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
    #####:  253:    return lhs.srem(rhs);
call    0 never executed
    #####:  254:  });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  255:}
        -:  256:
        -:  257://===----------------------------------------------------------------------===//
        -:  258:// RemUOp
        -:  259://===----------------------------------------------------------------------===//
        -:  260:
function _ZN4mlir5index6RemUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  261:OpFoldResult RemUOp::fold(ArrayRef<Attribute> operands) {
    #####:  262:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
    #####:  263:    return lhs.urem(rhs);
call    0 never executed
    #####:  264:  });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  265:}
        -:  266:
        -:  267://===----------------------------------------------------------------------===//
        -:  268:// MaxSOp
        -:  269://===----------------------------------------------------------------------===//
        -:  270:
function _ZN4mlir5index6MaxSOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  308449*:  271:OpFoldResult MaxSOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir5index6MaxSOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 226784 returned 100% blocks executed 83%
  535233*:  272:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
   226784:  273:    return lhs.sgt(rhs) ? lhs : rhs;
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
  308449*:  274:  });
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
call    3 never executed
        -:  275:}
        -:  276:
        -:  277://===----------------------------------------------------------------------===//
        -:  278:// MaxUOp
        -:  279://===----------------------------------------------------------------------===//
        -:  280:
function _ZN4mlir5index6MaxUOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
  231245*:  281:OpFoldResult MaxUOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir5index6MaxUOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 154352 returned 100% blocks executed 83%
  385597*:  282:  return foldBinaryOpChecked(operands, [](const APInt &lhs, const APInt &rhs) {
   154352:  283:    return lhs.ugt(rhs) ? lhs : rhs;
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
  231245*:  284:  });
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 never executed
        -:  285:}
        -:  286:
        -:  287://===----------------------------------------------------------------------===//
        -:  288:// CastSOp
        -:  289://===----------------------------------------------------------------------===//
        -:  290:
function _ZN4mlir5index7CastSOp17areCastCompatibleENS_9TypeRangeES2_ called 54968660 returned 100% blocks executed 100%
 54968660:  291:bool CastSOp::areCastCompatible(TypeRange lhsTypes, TypeRange rhsTypes) {
 54968660:  292:  return lhsTypes.front().isa<IndexType>() != rhsTypes.front().isa<IndexType>();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  293:}
        -:  294:
        -:  295://===----------------------------------------------------------------------===//
        -:  296:// CastUOp
        -:  297://===----------------------------------------------------------------------===//
        -:  298:
function _ZN4mlir5index7CastUOp17areCastCompatibleENS_9TypeRangeES2_ called 42305702 returned 100% blocks executed 100%
 42305702:  299:bool CastUOp::areCastCompatible(TypeRange lhsTypes, TypeRange rhsTypes) {
 42305702:  300:  return lhsTypes.front().isa<IndexType>() != rhsTypes.front().isa<IndexType>();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  301:}
        -:  302:
        -:  303://===----------------------------------------------------------------------===//
        -:  304:// CmpOp
        -:  305://===----------------------------------------------------------------------===//
        -:  306:
        -:  307:/// Compare two integers according to the comparison predicate.
function _Z14compareIndicesRKN4llvm5APIntES2_N4mlir5index17IndexCmpPredicateE called 0 returned 0% blocks executed 0%
    #####:  308:bool compareIndices(const APInt &lhs, const APInt &rhs,
        -:  309:                    IndexCmpPredicate pred) {
    #####:  310:  switch (pred) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  311:  case IndexCmpPredicate::EQ:
    #####:  312:    return lhs.eq(rhs);
call    0 never executed
    #####:  313:  case IndexCmpPredicate::NE:
    #####:  314:    return lhs.ne(rhs);
call    0 never executed
    #####:  315:  case IndexCmpPredicate::SGE:
    #####:  316:    return lhs.sge(rhs);
    #####:  317:  case IndexCmpPredicate::SGT:
    #####:  318:    return lhs.sgt(rhs);
    #####:  319:  case IndexCmpPredicate::SLE:
    #####:  320:    return lhs.sle(rhs);
    #####:  321:  case IndexCmpPredicate::SLT:
    #####:  322:    return lhs.slt(rhs);
    #####:  323:  case IndexCmpPredicate::UGE:
    #####:  324:    return lhs.uge(rhs);
    #####:  325:  case IndexCmpPredicate::UGT:
    #####:  326:    return lhs.ugt(rhs);
    #####:  327:  case IndexCmpPredicate::ULE:
    #####:  328:    return lhs.ule(rhs);
    #####:  329:  case IndexCmpPredicate::ULT:
    #####:  330:    return lhs.ult(rhs);
        -:  331:  }
    #####:  332:  llvm_unreachable("unhandled IndexCmpPredicate predicate");
call    0 never executed
        -:  333:}
        -:  334:
function _ZN4mlir5index5CmpOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  335:OpFoldResult CmpOp::fold(ArrayRef<Attribute> operands) {
    #####:  336:  assert(operands.size() == 2 && "compare expected 2 operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  337:  auto lhs = dyn_cast_if_present<IntegerAttr>(operands[0]);
branch  0 never executed
branch  1 never executed
    #####:  338:  auto rhs = dyn_cast_if_present<IntegerAttr>(operands[1]);
branch  0 never executed
branch  1 never executed
    #####:  339:  if (!lhs || !rhs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  340:    return {};
        -:  341:
        -:  342:  // Perform the comparison in 64-bit and 32-bit.
    #####:  343:  bool result64 = compareIndices(lhs.getValue(), rhs.getValue(), getPred());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  344:  bool result32 = compareIndices(lhs.getValue().trunc(32),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  345:                                 rhs.getValue().trunc(32), getPred());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  346:  if (result64 != result32)
branch  0 never executed
branch  1 never executed
    #####:  347:    return {};
    #####:  348:  return BoolAttr::get(getContext(), result64);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  349:}
        -:  350:
        -:  351://===----------------------------------------------------------------------===//
        -:  352:// ConstantOp
        -:  353://===----------------------------------------------------------------------===//
        -:  354:
function _ZN4mlir5index10ConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 722168 returned 100% blocks executed 100%
   722168:  355:OpFoldResult ConstantOp::fold(ArrayRef<Attribute> operands) {
   722168:  356:  return getValueAttr();
call    0 returned 100%
call    1 returned 100%
        -:  357:}
        -:  358:
function _ZN4mlir5index10ConstantOp5buildERNS_9OpBuilderERNS_14OperationStateEl called 0 returned 0% blocks executed 0%
    #####:  359:void ConstantOp::build(OpBuilder &b, OperationState &state, int64_t value) {
    #####:  360:  build(b, state, b.getIndexType(), b.getIndexAttr(value));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  361:}
        -:  362:
        -:  363://===----------------------------------------------------------------------===//
        -:  364:// BoolConstantOp
        -:  365://===----------------------------------------------------------------------===//
        -:  366:
function _ZN4mlir5index14BoolConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 3282476 returned 100% blocks executed 100%
  3282476:  367:OpFoldResult BoolConstantOp::fold(ArrayRef<Attribute> operands) {
  3282476:  368:  return getValueAttr();
call    0 returned 100%
call    1 returned 100%
        -:  369:}
        -:  370:
        -:  371://===----------------------------------------------------------------------===//
        -:  372:// ODS-Generated Definitions
        -:  373://===----------------------------------------------------------------------===//
        -:  374:
        -:  375:#define GET_OP_CLASSES
        -:  376:#include "mlir/Dialect/Index/IR/IndexOps.cpp.inc"
