        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Arith/TestEmulateWideInt.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Arith/CMakeFiles/MLIRArithTestPasses.dir/TestEmulateWideInt.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Arith/CMakeFiles/MLIRArithTestPasses.dir/TestEmulateWideInt.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestWideIntEmulation.cpp - Test Wide Int Emulation  ------*- c++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass for integration testing of wide integer
        -:   10:// emulation patterns. Applies conversion patterns only to functions whose
        -:   11:// names start with a specified prefix.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   17:#include "mlir/Dialect/Arith/Transforms/WideIntEmulationConverter.h"
        -:   18:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   19:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   20:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   21:#include "mlir/Pass/Pass.h"
        -:   22:#include "mlir/Transforms/DialectConversion.h"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:struct TestEmulateWideIntPass
        -:   28:    : public PassWrapper<TestEmulateWideIntPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_122TestEmulateWideIntPass13resolveTypeIDEv called 116666 returned 100% blocks executed 100%
   116666:   29:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestEmulateWideIntPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   30:
function _ZN12_GLOBAL__N_122TestEmulateWideIntPassC2Ev called 116666 returned 100% blocks executed 100%
   116666:   31:  TestEmulateWideIntPass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN12_GLOBAL__N_122TestEmulateWideIntPassC2ERKS0_ called 29088 returned 100% blocks executed 100%
    29088:   32:  TestEmulateWideIntPass(const TestEmulateWideIntPass &pass)
    29088:   33:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   34:
function _ZNK12_GLOBAL__N_122TestEmulateWideIntPass20getDependentDialectsERN4mlir15DialectRegistryE called 505 returned 100% blocks executed 100%
      505:   35:  void getDependentDialects(DialectRegistry &registry) const override {
      505:   36:    registry.insert<arith::ArithDialect, func::FuncDialect, LLVM::LLVMDialect,
call    0 returned 100%
      505:   37:                    vector::VectorDialect>();
      505:   38:  }
function _ZNK12_GLOBAL__N_122TestEmulateWideIntPass11getArgumentEv called 116176 returned 100% blocks executed 100%
   116176:   39:  StringRef getArgument() const final { return "test-arith-emulate-wide-int"; }
function _ZNK12_GLOBAL__N_122TestEmulateWideIntPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   40:  StringRef getDescription() const final {
   116161:   41:    return "Function pass to test Wide Integer Emulation";
        -:   42:  }
        -:   43:
function _ZN12_GLOBAL__N_122TestEmulateWideIntPass14runOnOperationEv called 429 returned 99% blocks executed 28%
      429:   44:  void runOnOperation() override {
     858*:   45:    if (!llvm::isPowerOf2_32(widestIntSupported) || widestIntSupported < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    #####:   46:      signalPassFailure();
     425*:   47:      return;
call    0 never executed
        -:   48:    }
        -:   49:
      429:   50:    func::FuncOp op = getOperation();
call    0 returned 100%
      428:   51:    if (!op.getSymName().startswith(testFunctionPrefix))
call    0 returned 99%
branch  1 taken 0%
branch  2 taken 100%
        -:   52:      return;
        -:   53:
    #####:   54:    MLIRContext *ctx = op.getContext();
call    0 never executed
    #####:   55:    arith::WideIntEmulationConverter typeConverter(widestIntSupported);
call    0 never executed
        -:   56:
        -:   57:    // Use `llvm.bitcast` as the bridge so that we can use preserve the
        -:   58:    // function argument and return types of the processed function.
        -:   59:    // TODO: Consider extending `arith.bitcast` to support scalar-to-1D-vector
        -:   60:    // casts (and vice versa) and using it insted of `llvm.bitcast`.
    #####:   61:    auto addBitcast = [](OpBuilder &builder, Type type, ValueRange inputs,
        -:   62:                         Location loc) -> Optional<Value> {
    #####:   63:      auto cast = builder.create<LLVM::BitcastOp>(loc, type, inputs);
call    0 never executed
    #####:   64:      return cast->getResult(0);
        -:   65:    };
    #####:   66:    typeConverter.addSourceMaterialization(addBitcast);
call    0 never executed
    #####:   67:    typeConverter.addTargetMaterialization(addBitcast);
call    0 never executed
        -:   68:
    #####:   69:    ConversionTarget target(*ctx);
call    0 never executed
call    1 never executed
    #####:   70:    target
    #####:   71:        .addDynamicallyLegalDialect<arith::ArithDialect, vector::VectorDialect>(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:            [&typeConverter](Operation *op) {
    #####:   73:              return typeConverter.isLegal(op);
call    0 never executed
        -:   74:            });
        -:   75:
    #####:   76:    RewritePatternSet patterns(ctx);
call    0 never executed
call    1 never executed
    #####:   77:    arith::populateArithWideIntEmulationPatterns(typeConverter, patterns);
call    0 never executed
    #####:   78:    if (failed(applyPartialConversion(op, target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   79:      signalPassFailure();
call    0 never executed
        -:   80:  }
        -:   81:
        -:   82:  Option<std::string> testFunctionPrefix{
        -:   83:      *this, "function-prefix",
        -:   84:      llvm::cl::desc("Prefix of functions to run the emulation pass on"),
        -:   85:      llvm::cl::init("emulate_")};
        -:   86:  Option<unsigned> widestIntSupported{
        -:   87:      *this, "widest-int-supported",
        -:   88:      llvm::cl::desc("Maximum integer bit width supported by the target"),
        -:   89:      llvm::cl::init(32)};
        -:   90:};
        -:   91:} // namespace
        -:   92:
        -:   93:namespace mlir::test {
function _ZN4mlir4test35registerTestArithEmulateWideIntPassEv called 116161 returned 100% blocks executed 100%
   116161:   94:void registerTestArithEmulateWideIntPass() {
   116161:   95:  PassRegistration<TestEmulateWideIntPass>();
call    0 returned 100%
   116161:   96:}
        -:   97:} // namespace mlir::test
