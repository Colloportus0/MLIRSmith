        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/Presburger/PresburgerSpace.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PresburgerSpace.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PresburgerSpace.cpp.gcda
        -:    0:Runs:116175
        -:    1://===- PresburgerSpace.cpp - MLIR PresburgerSpace Class -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/Presburger/PresburgerSpace.h"
        -:   10:#include <algorithm>
        -:   11:#include <cassert>
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace presburger;
        -:   15:
function _ZNK4mlir10presburger15PresburgerSpace14getDomainSpaceEv called 0 returned 0% blocks executed 0%
    #####:   16:PresburgerSpace PresburgerSpace::getDomainSpace() const {
        -:   17:  // TODO: Preserve identifiers here.
    #####:   18:  return PresburgerSpace::getSetSpace(numDomain, numSymbols, numLocals);
        -:   19:}
        -:   20:
function _ZNK4mlir10presburger15PresburgerSpace13getRangeSpaceEv called 0 returned 0% blocks executed 0%
    #####:   21:PresburgerSpace PresburgerSpace::getRangeSpace() const {
    #####:   22:  return PresburgerSpace::getSetSpace(numRange, numSymbols, numLocals);
        -:   23:}
        -:   24:
function _ZNK4mlir10presburger15PresburgerSpace13getNumVarKindENS0_7VarKindE called 1144819 returned 100% blocks executed 90%
  1144819:   25:unsigned PresburgerSpace::getNumVarKind(VarKind kind) const {
  1144819:   26:  if (kind == VarKind::Domain)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
   243246:   27:    return getNumDomainVars();
   901573:   28:  if (kind == VarKind::Range)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
   543895:   29:    return getNumRangeVars();
   357678:   30:  if (kind == VarKind::Symbol)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
   135588:   31:    return getNumSymbolVars();
   222090:   32:  if (kind == VarKind::Local)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   222090:   33:    return numLocals;
    #####:   34:  llvm_unreachable("VarKind does not exist!");
call    0 never executed
        -:   35:}
        -:   36:
function _ZNK4mlir10presburger15PresburgerSpace16getVarKindOffsetENS0_7VarKindE called 929441 returned 100% blocks executed 89%
   929441:   37:unsigned PresburgerSpace::getVarKindOffset(VarKind kind) const {
   929441:   38:  if (kind == VarKind::Domain)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:   39:    return 0;
   739302:   40:  if (kind == VarKind::Range)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
   428322:   41:    return getNumDomainVars();
   310980:   42:  if (kind == VarKind::Symbol)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
   147366:   43:    return getNumDimVars();
   163614:   44:  if (kind == VarKind::Local)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   163614:   45:    return getNumDimAndSymbolVars();
    #####:   46:  llvm_unreachable("VarKind does not exist!");
call    0 never executed
        -:   47:}
        -:   48:
function _ZNK4mlir10presburger15PresburgerSpace13getVarKindEndENS0_7VarKindE called 428871 returned 100% blocks executed 100%
   428871:   49:unsigned PresburgerSpace::getVarKindEnd(VarKind kind) const {
   428871:   50:  return getVarKindOffset(kind) + getNumVarKind(kind);
call    0 returned 100%
call    1 returned 100%
        -:   51:}
        -:   52:
function _ZNK4mlir10presburger15PresburgerSpace17getVarKindOverlapENS0_7VarKindEjj called 0 returned 0% blocks executed 0%
    #####:   53:unsigned PresburgerSpace::getVarKindOverlap(VarKind kind, unsigned varStart,
        -:   54:                                            unsigned varLimit) const {
    #####:   55:  unsigned varRangeStart = getVarKindOffset(kind);
call    0 never executed
    #####:   56:  unsigned varRangeEnd = getVarKindEnd(kind);
call    0 never executed
        -:   57:
        -:   58:  // Compute number of elements in intersection of the ranges [varStart,
        -:   59:  // varLimit) and [varRangeStart, varRangeEnd).
    #####:   60:  unsigned overlapStart = std::max(varStart, varRangeStart);
branch  0 never executed
branch  1 never executed
    #####:   61:  unsigned overlapEnd = std::min(varLimit, varRangeEnd);
branch  0 never executed
branch  1 never executed
        -:   62:
    #####:   63:  if (overlapStart > overlapEnd)
branch  0 never executed
branch  1 never executed
        -:   64:    return 0;
    #####:   65:  return overlapEnd - overlapStart;
        -:   66:}
        -:   67:
function _ZNK4mlir10presburger15PresburgerSpace12getVarKindAtEj called 137020 returned 100% blocks executed 83%
   137020:   68:VarKind PresburgerSpace::getVarKindAt(unsigned pos) const {
  137020*:   69:  assert(pos < getNumVars() && "`pos` should represent a valid var position");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   137020:   70:  if (pos < getVarKindEnd(VarKind::Domain))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   71:    return VarKind::Domain;
   137020:   72:  if (pos < getVarKindEnd(VarKind::Range))
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
        -:   73:    return VarKind::Range;
    52062:   74:  if (pos < getVarKindEnd(VarKind::Symbol))
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
        -:   75:    return VarKind::Symbol;
    43663:   76:  if (pos < getVarKindEnd(VarKind::Local))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   77:    return VarKind::Local;
    #####:   78:  llvm_unreachable("`pos` should represent a valid var position");
call    0 never executed
        -:   79:}
        -:   80:
function _ZN4mlir10presburger15PresburgerSpace9insertVarENS0_7VarKindEjj called 134150 returned 100% blocks executed 73%
   134150:   81:unsigned PresburgerSpace::insertVar(VarKind kind, unsigned pos, unsigned num) {
  134150*:   82:  assert(pos <= getNumVarKind(kind));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   83:
   134150:   84:  unsigned absolutePos = getVarKindOffset(kind) + pos;
call    0 returned 100%
        -:   85:
   134150:   86:  if (kind == VarKind::Domain)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   87:    numDomain += num;
   134150:   88:  else if (kind == VarKind::Range)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
    70729:   89:    numRange += num;
    63421:   90:  else if (kind == VarKind::Symbol)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     1830:   91:    numSymbols += num;
        -:   92:  else
    61591:   93:    numLocals += num;
        -:   94:
        -:   95:  // Insert NULL identifiers if `usingIds` and variables inserted are
        -:   96:  // not locals.
  134150*:   97:  if (usingIds && kind != VarKind::Local)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   98:    identifiers.insert(identifiers.begin() + absolutePos, num, nullptr);
call    0 never executed
        -:   99:
   134150:  100:  return absolutePos;
        -:  101:}
        -:  102:
function _ZN4mlir10presburger15PresburgerSpace14removeVarRangeENS0_7VarKindEjj called 92204 returned 100% blocks executed 69%
    92204:  103:void PresburgerSpace::removeVarRange(VarKind kind, unsigned varStart,
        -:  104:                                     unsigned varLimit) {
   92204*:  105:  assert(varLimit <= getNumVarKind(kind) && "invalid var limit");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  106:
    92204:  107:  if (varStart >= varLimit)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  108:    return;
        -:  109:
    92204:  110:  unsigned numVarsEliminated = varLimit - varStart;
    92204:  111:  if (kind == VarKind::Domain)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:    numDomain -= numVarsEliminated;
    92204:  113:  else if (kind == VarKind::Range)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
    64233:  114:    numRange -= numVarsEliminated;
    27971:  115:  else if (kind == VarKind::Symbol)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
    17201:  116:    numSymbols -= numVarsEliminated;
        -:  117:  else
    10770:  118:    numLocals -= numVarsEliminated;
        -:  119:
        -:  120:  // Remove identifiers if `usingIds` and variables removed are not
        -:  121:  // locals.
   92204*:  122:  if (usingIds && kind != VarKind::Local)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  123:    identifiers.erase(identifiers.begin() + getVarKindOffset(kind) + varStart,
    #####:  124:                      identifiers.begin() + getVarKindOffset(kind) + varLimit);
call    0 never executed
call    1 never executed
        -:  125:}
        -:  126:
function _ZN4mlir10presburger15PresburgerSpace7swapVarENS0_7VarKindES2_jj called 0 returned 0% blocks executed 0%
    #####:  127:void PresburgerSpace::swapVar(VarKind kindA, VarKind kindB, unsigned posA,
        -:  128:                              unsigned posB) {
        -:  129:
    #####:  130:  if (!usingIds)
branch  0 never executed
branch  1 never executed
        -:  131:    return;
        -:  132:
    #####:  133:  if (kindA == VarKind::Local && kindB == VarKind::Local)
branch  0 never executed
branch  1 never executed
        -:  134:    return;
        -:  135:
    #####:  136:  if (kindA == VarKind::Local) {
branch  0 never executed
branch  1 never executed
    #####:  137:    atId(kindB, posB) = nullptr;
call    0 never executed
    #####:  138:    return;
        -:  139:  }
        -:  140:
    #####:  141:  if (kindB == VarKind::Local) {
branch  0 never executed
branch  1 never executed
    #####:  142:    atId(kindA, posA) = nullptr;
call    0 never executed
    #####:  143:    return;
        -:  144:  }
        -:  145:
    #####:  146:  std::swap(atId(kindA, posA), atId(kindB, posB));
call    0 never executed
call    1 never executed
        -:  147:}
        -:  148:
function _ZNK4mlir10presburger15PresburgerSpace12isCompatibleERKS1_ called 17864 returned 100% blocks executed 80%
   53401*:  149:bool PresburgerSpace::isCompatible(const PresburgerSpace &other) const {
   53401*:  150:  return getNumDomainVars() == other.getNumDomainVars() &&
branch  0 never executed
branch  1 never executed
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
   53401*:  151:         getNumRangeVars() == other.getNumRangeVars() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
   53401*:  152:         getNumSymbolVars() == other.getNumSymbolVars();
branch  0 never executed
branch  1 never executed
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  153:}
        -:  154:
function _ZNK4mlir10presburger15PresburgerSpace7isEqualERKS1_ called 35537 returned 100% blocks executed 83%
    35537:  155:bool PresburgerSpace::isEqual(const PresburgerSpace &other) const {
    71074:  156:  return isCompatible(other) && getNumLocalVars() == other.getNumLocalVars();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  157:}
        -:  158:
function _ZNK4mlir10presburger15PresburgerSpace9isAlignedERKS1_ called 0 returned 0% blocks executed 0%
    #####:  159:bool PresburgerSpace::isAligned(const PresburgerSpace &other) const {
    #####:  160:  assert(isUsingIds() && other.isUsingIds() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  161:         "Both spaces should be using identifiers to check for "
        -:  162:         "alignment.");
    #####:  163:  return isCompatible(other) && identifiers == other.identifiers;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  164:}
        -:  165:
function _ZNK4mlir10presburger15PresburgerSpace9isAlignedERKS1_NS0_7VarKindE called 0 returned 0% blocks executed 0%
    #####:  166:bool PresburgerSpace::isAligned(const PresburgerSpace &other,
        -:  167:                                VarKind kind) const {
    #####:  168:  assert(isUsingIds() && other.isUsingIds() &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  169:         "Both spaces should be using identifiers to check for "
        -:  170:         "alignment.");
        -:  171:
    #####:  172:  ArrayRef<void *> kindAttachments =
    #####:  173:      makeArrayRef(identifiers)
call    0 never executed
    #####:  174:          .slice(getVarKindOffset(kind), getNumVarKind(kind));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  175:  ArrayRef<void *> otherKindAttachments =
    #####:  176:      makeArrayRef(other.identifiers)
call    0 never executed
    #####:  177:          .slice(other.getVarKindOffset(kind), other.getNumVarKind(kind));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  178:  return kindAttachments == otherKindAttachments;
        -:  179:}
        -:  180:
function _ZN4mlir10presburger15PresburgerSpace22setVarSymbolSeperationEj called 29553 returned 100% blocks executed 67%
    29553:  181:void PresburgerSpace::setVarSymbolSeperation(unsigned newSymbolCount) {
   29553*:  182:  assert(newSymbolCount <= getNumDimAndSymbolVars() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  183:         "invalid separation position");
    29553:  184:  numRange = numRange + numSymbols - newSymbolCount;
    29553:  185:  numSymbols = newSymbolCount;
        -:  186:  // We do not need to change `identifiers` since the ordering of
        -:  187:  // `identifiers` remains same.
    29553:  188:}
        -:  189:
function _ZNK4mlir10presburger15PresburgerSpace5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  190:void PresburgerSpace::print(llvm::raw_ostream &os) const {
    #####:  191:  os << "Domain: " << getNumDomainVars() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  192:     << "Range: " << getNumRangeVars() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  193:     << "Symbols: " << getNumSymbolVars() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  194:     << "Locals: " << getNumLocalVars() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  195:
    #####:  196:  if (usingIds) {
branch  0 never executed
branch  1 never executed
        -:  197:#ifdef LLVM_ENABLE_ABI_BREAKING_CHECKS
    #####:  198:    os << "TypeID of identifiers: " << idType.getAsOpaquePointer() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  199:#endif
        -:  200:
    #####:  201:    os << "(";
call    0 never executed
    #####:  202:    for (void *identifier : identifiers)
branch  0 never executed
branch  1 never executed
    #####:  203:      os << identifier << " ";
call    0 never executed
call    1 never executed
    #####:  204:    os << ")\n";
call    0 never executed
        -:  205:  }
    #####:  206:}
        -:  207:
function _ZNK4mlir10presburger15PresburgerSpace4dumpEv called 0 returned 0% blocks executed 0%
    #####:  208:void PresburgerSpace::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
