        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/DataFlow/DenseAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DenseAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/DataFlow/DenseAnalysis.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- DenseAnalysis.cpp - Dense data-flow analysis -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/DenseAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   11:#include "mlir/Interfaces/CallInterfaces.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::dataflow;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// AbstractDenseDataFlowAnalysis
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis10initializeEPNS_9OperationE called 722135 returned 100% blocks executed 90%
   722135:   21:LogicalResult AbstractDenseDataFlowAnalysis::initialize(Operation *top) {
        -:   22:  // Visit every operation and block.
   722135:   23:  visitOperation(top);
call    0 returned 100%
   807345:   24:  for (Region &region : top->getRegions()) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
    81566:   25:    for (Block &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    40456:   26:      visitBlock(&block);
call    0 returned 100%
   762234:   27:      for (Operation &op : block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
   721778:   28:        if (failed(initialize(&op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   29:          return failure();
        -:   30:    }
        -:   31:  }
   722135:   32:  return success();
        -:   33:}
        -:   34:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis5visitENS_12ProgramPointE called 148828 returned 100% blocks executed 89%
   148828:   35:LogicalResult AbstractDenseDataFlowAnalysis::visit(ProgramPoint point) {
   148828:   36:  if (auto *op = point.dyn_cast<Operation *>())
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
   142106:   37:    visitOperation(op);
call    0 returned 100%
     6722:   38:  else if (auto *block = point.dyn_cast<Block *>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     6722:   39:    visitBlock(block);
call    0 returned 100%
        -:   40:  else
    #####:   41:    return failure();
   148828:   42:  return success();
        -:   43:}
        -:   44:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis14visitOperationEPNS_9OperationE called 864241 returned 100% blocks executed 98%
   864241:   45:void AbstractDenseDataFlowAnalysis::visitOperation(Operation *op) {
        -:   46:  // If the containing block is not executable, bail out.
  1728482:   47:  if (!getOrCreateFor<Executable>(op, op->getBlock())->isLive())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
        -:   48:    return;
        -:   49:
        -:   50:  // Get the dense lattice to update.
   249355:   51:  AbstractDenseLattice *after = getLattice(op);
call    0 returned 100%
call    1 returned 100%
        -:   52:
        -:   53:  // If this op implements region control-flow, then control-flow dictates its
        -:   54:  // transfer function.
   249355:   55:  if (auto branch = dyn_cast<RegionBranchOpInterface>(op))
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
    12127:   56:    return visitRegionBranchOperation(op, branch, after);
call    0 returned 100%
call    1 returned 100%
        -:   57:
        -:   58:  // If this is a call operation, then join its lattices across known return
        -:   59:  // sites.
   237228:   60:  if (auto call = dyn_cast<CallOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        4:   61:    const auto *predecessors = getOrCreateFor<PredecessorState>(op, call);
call    0 returned 100%
call    1 returned 100%
        -:   62:    // If not all return sites are known, then conservatively assume we can't
        -:   63:    // reason about the data-flow.
        4:   64:    if (!predecessors->allPredecessorsKnown())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       4*:   65:      return setToEntryState(after);
call    0 never executed
        5:   66:    for (Operation *predecessor : predecessors->getKnownPredecessors())
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:   67:      join(after, *getLatticeFor(op, predecessor));
call    0 returned 100%
call    1 returned 100%
        -:   68:    return;
        -:   69:  }
        -:   70:
        -:   71:  // Get the dense state before the execution of the op.
   237224:   72:  const AbstractDenseLattice *before;
   464799:   73:  if (Operation *prev = op->getPrevNode())
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 100%
branch  3 taken 0%
   227575:   74:    before = getLatticeFor(op, prev);
call    0 returned 100%
call    1 returned 100%
        -:   75:  else
     9649:   76:    before = getLatticeFor(op, op->getBlock());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   77:
        -:   78:  // Invoke the operation transfer function.
   237224:   79:  visitOperationImpl(op, *before, after);
call    0 returned 100%
        -:   80:}
        -:   81:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis10visitBlockEPNS_5BlockE called 47178 returned 100% blocks executed 59%
    47178:   82:void AbstractDenseDataFlowAnalysis::visitBlock(Block *block) {
        -:   83:  // If the block is not executable, bail out.
    94356:   84:  if (!getOrCreateFor<Executable>(block, block)->isLive())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
        -:   85:    return;
        -:   86:
        -:   87:  // Get the dense lattice to update.
    10230:   88:  AbstractDenseLattice *after = getLattice(block);
call    0 returned 100%
call    1 returned 100%
        -:   89:
        -:   90:  // The dense lattices of entry blocks are set by region control-flow or the
        -:   91:  // callgraph.
    10230:   92:  if (block->isEntryBlock()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   93:    // Check if this block is the entry block of a callable region.
    10230:   94:    auto callable = dyn_cast<CallableOpInterface>(block->getParentOp());
call    0 returned 100%
call    1 returned 100%
    10230:   95:    if (callable && callable.getCallableRegion() == block->getParent()) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      166:   96:      const auto *callsites = getOrCreateFor<PredecessorState>(block, callable);
call    0 returned 100%
call    1 returned 100%
        -:   97:      // If not all callsites are known, conservatively mark all lattices as
        -:   98:      // having reached their pessimistic fixpoints.
      332:   99:      if (!callsites->allPredecessorsKnown())
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
      165:  100:        return setToEntryState(after);
call    0 returned 100%
        2:  101:      for (Operation *callsite : callsites->getKnownPredecessors()) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  102:        // Get the dense lattice before the callsite.
       1*:  103:        if (Operation *prev = callsite->getPrevNode())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  104:          join(after, *getLatticeFor(block, prev));
call    0 never executed
call    1 never executed
        -:  105:        else
        1:  106:          join(after, *getLatticeFor(block, callsite->getBlock()));
call    0 returned 100%
call    1 returned 100%
        -:  107:      }
        -:  108:      return;
        -:  109:    }
        -:  110:
        -:  111:    // Check if we can reason about the control-flow.
    10064:  112:    if (auto branch = dyn_cast<RegionBranchOpInterface>(block->getParentOp()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 77%
branch  3 taken 23%
     7744:  113:      return visitRegionBranchOperation(block, branch, after);
call    0 returned 100%
call    1 returned 100%
        -:  114:
        -:  115:    // Otherwise, we can't reason about the data-flow.
     2320:  116:    return setToEntryState(after);
call    0 returned 100%
        -:  117:  }
        -:  118:
        -:  119:  // Join the state with the state after the block's predecessors.
    #####:  120:  for (Block::pred_iterator it = block->pred_begin(), e = block->pred_end();
    #####:  121:       it != e; ++it) {
branch  0 never executed
branch  1 never executed
        -:  122:    // Skip control edges that aren't executable.
    #####:  123:    Block *predecessor = *it;
call    0 never executed
    #####:  124:    if (!getOrCreateFor<Executable>(
branch  0 never executed
branch  1 never executed
        -:  125:             block, getProgramPoint<CFGEdge>(predecessor, block))
    #####:  126:             ->isLive())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  127:      continue;
        -:  128:
        -:  129:    // Merge in the state from the predecessor's terminator.
    #####:  130:    join(after, *getLatticeFor(block, predecessor->getTerminator()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  131:  }
        -:  132:}
        -:  133:
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis26visitRegionBranchOperationENS_12ProgramPointENS_23RegionBranchOpInterfaceEPNS0_20AbstractDenseLatticeE called 19871 returned 100% blocks executed 96%
    19871:  134:void AbstractDenseDataFlowAnalysis::visitRegionBranchOperation(
        -:  135:    ProgramPoint point, RegionBranchOpInterface branch,
        -:  136:    AbstractDenseLattice *after) {
        -:  137:  // Get the terminator predecessors.
    19871:  138:  const auto *predecessors = getOrCreateFor<PredecessorState>(point, point);
call    0 returned 100%
   19871*:  139:  assert(predecessors->allPredecessorsKnown() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  140:         "unexpected unresolved region successors");
        -:  141:
    36059:  142:  for (Operation *op : predecessors->getKnownPredecessors()) {
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
    16188:  143:    const AbstractDenseLattice *before;
        -:  144:    // If the predecessor is the parent, get the state before the parent.
    16188:  145:    if (op == branch) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
    13586:  146:      if (Operation *prev = op->getPrevNode())
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     6585:  147:        before = getLatticeFor(point, prev);
call    0 returned 100%
        -:  148:      else
      416:  149:        before = getLatticeFor(point, op->getBlock());
call    0 returned 100%
        -:  150:
        -:  151:      // Otherwise, get the state after the terminator.
        -:  152:    } else {
     9187:  153:      before = getLatticeFor(point, op);
call    0 returned 100%
        -:  154:    }
    16188:  155:    join(after, *before);
call    0 returned 100%
        -:  156:  }
    19871:  157:}
        -:  158:
        -:  159:const AbstractDenseLattice *
function _ZN4mlir8dataflow29AbstractDenseDataFlowAnalysis13getLatticeForENS_12ProgramPointES2_ called 0 returned 0% blocks executed 0%
  253414*:  160:AbstractDenseDataFlowAnalysis::getLatticeFor(ProgramPoint dependent,
        -:  161:                                             ProgramPoint point) {
  253414*:  162:  AbstractDenseLattice *state = getLattice(point);
call    0 never executed
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
  253414*:  163:  addDependency(state, dependent);
call    0 never executed
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
  253414*:  164:  return state;
call    0 never executed
call    1 returned 100%
call    2 never executed
call    3 returned 100%
        -:  165:}
