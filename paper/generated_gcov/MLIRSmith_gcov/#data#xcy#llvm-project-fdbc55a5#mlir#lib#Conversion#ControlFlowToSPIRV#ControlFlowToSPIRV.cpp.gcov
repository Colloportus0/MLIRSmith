        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRV.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ControlFlowToSPIRV/CMakeFiles/obj.MLIRControlFlowToSPIRV.dir/ControlFlowToSPIRV.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ControlFlowToSPIRV/CMakeFiles/obj.MLIRControlFlowToSPIRV.dir/ControlFlowToSPIRV.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ControlFlowToSPIRV.cpp - ControlFlow to SPIR-V Patterns ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to convert standard dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRV.h"
        -:   14:#include "../SPIRVCommon/Pattern.h"
        -:   15:#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   18:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   19:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   20:#include "mlir/IR/AffineMap.h"
        -:   21:#include "mlir/Support/LogicalResult.h"
        -:   22:#include "llvm/Support/Debug.h"
        -:   23:
        -:   24:#define DEBUG_TYPE "cf-to-spirv-pattern"
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Operation conversion
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32:namespace {
        -:   33:
        -:   34:/// Converts cf.br to spirv.Branch.
        -:   35:struct BranchOpPattern final : public OpConversionPattern<cf::BranchOp> {
        -:   36:  using OpConversionPattern<cf::BranchOp>::OpConversionPattern;
        -:   37:
        -:   38:  LogicalResult
function _ZNK12_GLOBAL__N_115BranchOpPattern15matchAndRewriteEN4mlir2cf8BranchOpENS2_15BranchOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:  matchAndRewrite(cf::BranchOp op, OpAdaptor adaptor,
        -:   40:                  ConversionPatternRewriter &rewriter) const override {
    #####:   41:    rewriter.replaceOpWithNewOp<spirv::BranchOp>(op, op.getDest(),
call    0 never executed
    #####:   42:                                                 adaptor.getDestOperands());
call    0 never executed
call    1 never executed
    #####:   43:    return success();
        -:   44:  }
        -:   45:};
        -:   46:
        -:   47:/// Converts cf.cond_br to spirv.BranchConditional.
        -:   48:struct CondBranchOpPattern final
        -:   49:    : public OpConversionPattern<cf::CondBranchOp> {
        -:   50:  using OpConversionPattern<cf::CondBranchOp>::OpConversionPattern;
        -:   51:
        -:   52:  LogicalResult
function _ZNK12_GLOBAL__N_119CondBranchOpPattern15matchAndRewriteEN4mlir2cf12CondBranchOpENS2_19CondBranchOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   53:  matchAndRewrite(cf::CondBranchOp op, OpAdaptor adaptor,
        -:   54:                  ConversionPatternRewriter &rewriter) const override {
    #####:   55:    rewriter.replaceOpWithNewOp<spirv::BranchConditionalOp>(
    #####:   56:        op, op.getCondition(), op.getTrueDest(), adaptor.getTrueDestOperands(),
call    0 never executed
call    1 never executed
    #####:   57:        op.getFalseDest(), adaptor.getFalseDestOperands());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   58:    return success();
        -:   59:  }
        -:   60:};
        -:   61:} // namespace
        -:   62:
        -:   63://===----------------------------------------------------------------------===//
        -:   64:// Pattern population
        -:   65://===----------------------------------------------------------------------===//
        -:   66:
function _ZN4mlir2cf34populateControlFlowToSPIRVPatternsERNS_18SPIRVTypeConverterERNS_17RewritePatternSetE called 434 returned 100% blocks executed 100%
      434:   67:void mlir::cf::populateControlFlowToSPIRVPatterns(
        -:   68:    SPIRVTypeConverter &typeConverter, RewritePatternSet &patterns) {
      434:   69:  MLIRContext *context = patterns.getContext();
call    0 returned 100%
        -:   70:
      434:   71:  patterns.add<BranchOpPattern, CondBranchOpPattern>(typeConverter, context);
call    0 returned 100%
      434:   72:}
