        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Shape/Transforms/ShapeToShapeLowering.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Shape/Transforms/CMakeFiles/obj.MLIRShapeOpsTransforms.dir/ShapeToShapeLowering.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Shape/Transforms/CMakeFiles/obj.MLIRShapeOpsTransforms.dir/ShapeToShapeLowering.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ShapeToShapeLowering.cpp - Prepare for lowering to Standard --------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Shape/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   13:#include "mlir/Dialect/Shape/IR/Shape.h"
        -:   14:#include "mlir/IR/Builders.h"
        -:   15:#include "mlir/IR/PatternMatch.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/DialectConversion.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_SHAPETOSHAPELOWERING
        -:   21:#include "mlir/Dialect/Shape/Transforms/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:using namespace mlir::shape;
        -:   26:
        -:   27:namespace {
        -:   28:/// Converts `shape.num_elements` to `shape.reduce`.
        -:   29:struct NumElementsOpConverter : public OpRewritePattern<NumElementsOp> {
        -:   30:public:
        -:   31:  using OpRewritePattern::OpRewritePattern;
        -:   32:
        -:   33:  LogicalResult matchAndRewrite(NumElementsOp op,
        -:   34:                                PatternRewriter &rewriter) const final;
        -:   35:};
        -:   36:} // namespace
        -:   37:
        -:   38:LogicalResult
function _ZNK12_GLOBAL__N_122NumElementsOpConverter15matchAndRewriteEN4mlir5shape13NumElementsOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   39:NumElementsOpConverter::matchAndRewrite(NumElementsOp op,
        -:   40:                                        PatternRewriter &rewriter) const {
    #####:   41:  auto loc = op.getLoc();
call    0 never executed
    #####:   42:  Type valueType = op.getResult().getType();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:  Value init = op->getDialect()
branch  0 never executed
branch  1 never executed
    #####:   44:                   ->materializeConstant(rewriter, rewriter.getIndexAttr(1),
    #####:   45:                                         valueType, loc)
call    0 never executed
    #####:   46:                   ->getResult(0);
call    0 never executed
call    1 never executed
    #####:   47:  ReduceOp reduce = rewriter.create<ReduceOp>(loc, op.getShape(), init);
call    0 never executed
call    1 never executed
        -:   48:
        -:   49:  // Generate reduce operator.
    #####:   50:  Block *body = reduce.getBody();
call    0 never executed
    #####:   51:  OpBuilder b = OpBuilder::atBlockEnd(body);
call    0 never executed
    #####:   52:  Value product = b.create<MulOp>(loc, valueType, body->getArgument(1),
call    0 never executed
    #####:   53:                                  body->getArgument(2));
call    0 never executed
call    1 never executed
    #####:   54:  b.create<shape::YieldOp>(loc, product);
call    0 never executed
        -:   55:
    #####:   56:  rewriter.replaceOp(op, reduce.getResult());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   57:  return success();
        -:   58:}
        -:   59:
        -:   60:namespace {
   147291:   61:struct ShapeToShapeLowering
call    0 returned 100%
call    1 returned 100%
        -:   62:    : public impl::ShapeToShapeLoweringBase<ShapeToShapeLowering> {
        -:   63:  void runOnOperation() override;
        -:   64:};
        -:   65:} // namespace
        -:   66:
function _ZN12_GLOBAL__N_120ShapeToShapeLowering14runOnOperationEv called 536 returned 99% blocks executed 94%
      536:   67:void ShapeToShapeLowering::runOnOperation() {
      536:   68:  MLIRContext &ctx = getContext();
call    0 returned 100%
        -:   69:
      536:   70:  RewritePatternSet patterns(&ctx);
call    0 returned 99%
     1067:   71:  populateShapeRewritePatterns(patterns);
        -:   72:
     1068:   73:  ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 98%
call    2 returned 100%
      532:   74:  target.addLegalDialect<arith::ArithDialect, ShapeDialect>();
call    0 returned 98%
      519:   75:  target.addIllegalOp<NumElementsOp>();
call    0 returned 102%
      529:   76:  if (failed(mlir::applyPartialConversion(getOperation(), target,
call    0 returned 99%
call    1 returned 100%
call    2 returned 101%
call    3 returned 101%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      529:   77:                                          std::move(patterns))))
call    0 returned 99%
    #####:   78:    signalPassFailure();
call    0 never executed
      532:   79:}
        -:   80:
function _ZN4mlir28populateShapeRewritePatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     536*:   81:void mlir::populateShapeRewritePatterns(RewritePatternSet &patterns) {
     536*:   82:  patterns.add<NumElementsOpConverter>(patterns.getContext());
call    0 never executed
call    1 returned 99%
call    2 returned 100%
    #####:   83:}
        -:   84:
function _ZN4mlir26createShapeToShapeLoweringEv called 116691 returned 100% blocks executed 100%
   116691:   85:std::unique_ptr<Pass> mlir::createShapeToShapeLowering() {
   116691:   86:  return std::make_unique<ShapeToShapeLowering>();
call    0 returned 100%
        -:   87:}
