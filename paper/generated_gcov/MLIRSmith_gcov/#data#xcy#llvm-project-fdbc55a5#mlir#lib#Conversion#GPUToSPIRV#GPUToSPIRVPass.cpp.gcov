        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/GPUToSPIRV/GPUToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUToSPIRV/CMakeFiles/obj.MLIRGPUToSPIRV.dir/GPUToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUToSPIRV/CMakeFiles/obj.MLIRGPUToSPIRV.dir/GPUToSPIRVPass.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- GPUToSPIRVPass.cpp - GPU to SPIR-V Passes --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert a kernel function in the GPU Dialect
        -:   10:// into a spirv.module operation.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/GPUToSPIRV/GPUToSPIRVPass.h"
        -:   15:
        -:   16:#include "mlir/Conversion/ArithToSPIRV/ArithToSPIRV.h"
        -:   17:#include "mlir/Conversion/FuncToSPIRV/FuncToSPIRV.h"
        -:   18:#include "mlir/Conversion/GPUToSPIRV/GPUToSPIRV.h"
        -:   19:#include "mlir/Conversion/MemRefToSPIRV/MemRefToSPIRV.h"
        -:   20:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   21:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   22:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   23:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   24:
        -:   25:namespace mlir {
        -:   26:#define GEN_PASS_DEF_CONVERTGPUTOSPIRV
        -:   27:#include "mlir/Conversion/Passes.h.inc"
        -:   28:} // namespace mlir
        -:   29:
        -:   30:using namespace mlir;
        -:   31:
        -:   32:namespace {
        -:   33:/// Pass to lower GPU Dialect to SPIR-V. The pass only converts the gpu.func ops
        -:   34:/// inside gpu.module ops. i.e., the function that are referenced in
        -:   35:/// gpu.launch_func ops. For each such function
        -:   36:///
        -:   37:/// 1) Create a spirv::ModuleOp, and clone the function into spirv::ModuleOp
        -:   38:/// (the original function is still needed by the gpu::LaunchKernelOp, so cannot
        -:   39:/// replace it).
        -:   40:///
        -:   41:/// 2) Lower the body of the spirv::ModuleOp.
    #####:   42:class GPUToSPIRVPass : public impl::ConvertGPUToSPIRVBase<GPUToSPIRVPass> {
call    0 never executed
        -:   43:public:
        -:   44:  explicit GPUToSPIRVPass(bool mapMemorySpace)
        -:   45:      : mapMemorySpace(mapMemorySpace) {}
        -:   46:  void runOnOperation() override;
        -:   47:
        -:   48:private:
        -:   49:  bool mapMemorySpace;
        -:   50:};
        -:   51:} // namespace
        -:   52:
function _ZN12_GLOBAL__N_114GPUToSPIRVPass14runOnOperationEv called 422 returned 100% blocks executed 12%
      422:   53:void GPUToSPIRVPass::runOnOperation() {
      422:   54:  MLIRContext *context = &getContext();
call    0 returned 100%
      422:   55:  ModuleOp module = getOperation();
call    0 returned 100%
        -:   56:
      844:   57:  SmallVector<Operation *, 1> gpuModules;
call    0 returned 100%
      422:   58:  OpBuilder builder(context);
call    0 returned 100%
function _ZZN12_GLOBAL__N_114GPUToSPIRVPass14runOnOperationEvENKUlN4mlir3gpu11GPUModuleOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     422*:   59:  module.walk([&](gpu::GPUModuleOp moduleOp) {
call    0 returned 100%
        -:   60:    // Clone each GPU kernel module for conversion, given that the GPU
        -:   61:    // launch op still needs the original GPU kernel module.
    #####:   62:    builder.setInsertionPoint(moduleOp.getOperation());
call    0 never executed
    #####:   63:    gpuModules.push_back(builder.clone(*moduleOp.getOperation()));
call    0 never executed
call    1 never executed
    #####:   64:  });
        -:   65:
        -:   66:  // Run conversion for each module independently as they can have different
        -:   67:  // TargetEnv attributes.
     422*:   68:  for (Operation *gpuModule : gpuModules) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   69:    // Map MemRef memory space to SPIR-V storage class first if requested.
    #####:   70:    if (mapMemorySpace) {
branch  0 never executed
branch  1 never executed
    #####:   71:      std::unique_ptr<ConversionTarget> target =
    #####:   72:          spirv::getMemorySpaceToStorageClassTarget(*context);
call    0 never executed
    #####:   73:      spirv::MemorySpaceToStorageClassMap memorySpaceMap =
call    0 never executed
    #####:   74:          spirv::mapMemorySpaceToVulkanStorageClass;
branch  0 never executed
branch  1 never executed
    #####:   75:      spirv::MemorySpaceToStorageClassConverter converter(memorySpaceMap);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   76:
    #####:   77:      RewritePatternSet patterns(context);
call    0 never executed
call    1 never executed
    #####:   78:      spirv::populateMemorySpaceToStorageClassPatterns(converter, patterns);
call    0 never executed
        -:   79:
    #####:   80:      if (failed(applyFullConversion(gpuModule, *target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   81:        return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   82:    }
        -:   83:
    #####:   84:    auto targetAttr = spirv::lookupTargetEnvOrDefault(gpuModule);
call    0 never executed
    #####:   85:    std::unique_ptr<ConversionTarget> target =
    #####:   86:        SPIRVConversionTarget::get(targetAttr);
call    0 never executed
call    1 never executed
        -:   87:
    #####:   88:    SPIRVTypeConverter typeConverter(targetAttr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:    typeConverter.addConversion([&](gpu::MMAMatrixType type) -> Type {
call    0 never executed
    #####:   90:      return convertMMAToSPIRVType(type);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   91:    });
    #####:   92:    RewritePatternSet patterns(context);
call    0 never executed
call    1 never executed
    #####:   93:    populateGPUToSPIRVPatterns(typeConverter, patterns);
call    0 never executed
    #####:   94:    populateGpuWMMAToSPIRVConversionPatterns(typeConverter, patterns);
call    0 never executed
        -:   95:    // TODO: Change SPIR-V conversion to be progressive and remove the following
        -:   96:    // patterns.
    #####:   97:    mlir::arith::populateArithToSPIRVPatterns(typeConverter, patterns);
call    0 never executed
    #####:   98:    populateMemRefToSPIRVPatterns(typeConverter, patterns);
call    0 never executed
    #####:   99:    populateFuncToSPIRVPatterns(typeConverter, patterns);
call    0 never executed
        -:  100:
    #####:  101:    if (failed(applyFullConversion(gpuModule, *target, std::move(patterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  102:      return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  103:  }
        -:  104:}
        -:  105:
        -:  106:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir27createConvertGPUToSPIRVPassEb called 116714 returned 100% blocks executed 100%
   116714:  107:mlir::createConvertGPUToSPIRVPass(bool mapMemorySpace) {
   116714:  108:  return std::make_unique<GPUToSPIRVPass>(mapMemorySpace);
call    0 returned 100%
        -:  109:}
