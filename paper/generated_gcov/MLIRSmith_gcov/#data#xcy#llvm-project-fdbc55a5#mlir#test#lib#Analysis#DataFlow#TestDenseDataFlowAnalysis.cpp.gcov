        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Analysis/DataFlow/TestDenseDataFlowAnalysis.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/DataFlow/TestDenseDataFlowAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/DataFlow/TestDenseDataFlowAnalysis.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestDeadCodeAnalysis.cpp - Test dead code analysis -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/DataFlow/ConstantPropagationAnalysis.h"
        -:   10:#include "mlir/Analysis/DataFlow/DeadCodeAnalysis.h"
        -:   11:#include "mlir/Analysis/DataFlow/DenseAnalysis.h"
        -:   12:#include "mlir/Analysis/DataFlow/SparseAnalysis.h"
        -:   13:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::dataflow;
        -:   18:
        -:   19:namespace {
        -:   20:/// This lattice represents a single underlying value for an SSA value.
        -:   21:class UnderlyingValue {
        -:   22:public:
        -:   23:  /// Create an underlying value state with a known underlying value.
   252295:   24:  explicit UnderlyingValue(Optional<Value> underlyingValue = None)
     1548:   25:      : underlyingValue(underlyingValue) {}
        -:   26:
        -:   27:  /// Whether the state is uninitialized.
   51007*:   28:  bool isUninitialized() const { return !underlyingValue.has_value(); }
branch  0 never executed
branch  1 never executed
branch  2 taken 72% (fallthrough)
branch  3 taken 28%
        -:   29:
        -:   30:  /// Returns the underlying value.
   36603*:   31:  Value getUnderlyingValue() const {
   36603*:   32:    assert(!isUninitialized());
branch  0 never executed
branch  1 never executed
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
   36603*:   33:    return *underlyingValue;
branch  0 never executed
branch  1 never executed
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
        -:   34:  }
        -:   35:
        -:   36:  /// Join two underlying values. If there are conflicting underlying values,
        -:   37:  /// go to the pessimistic value.
function _ZN12_GLOBAL__N_115UnderlyingValue4joinERKS0_S2_ called 393750 returned 100% blocks executed 100%
   393750:   38:  static UnderlyingValue join(const UnderlyingValue &lhs,
        -:   39:                              const UnderlyingValue &rhs) {
   393750:   40:    if (lhs.isUninitialized())
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
   121503:   41:      return rhs;
   272247:   42:    if (rhs.isUninitialized())
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
   121500:   43:      return lhs;
   150747:   44:    return lhs.underlyingValue == rhs.underlyingValue
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   45:               ? lhs
   150747:   46:               : UnderlyingValue(Value{});
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   47:  }
        -:   48:
        -:   49:  /// Compare underlying values.
   393750:   50:  bool operator==(const UnderlyingValue &rhs) const {
   656250:   51:    return underlyingValue == rhs.underlyingValue;
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 1%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 1%
branch 10 taken 93% (fallthrough)
branch 11 taken 7%
        -:   52:  }
        -:   53:
    #####:   54:  void print(raw_ostream &os) const { os << underlyingValue; }
call    0 never executed
        -:   55:
        -:   56:private:
        -:   57:  Optional<Value> underlyingValue;
        -:   58:};
        -:   59:
        -:   60:/// This lattice represents, for a given memory resource, the potential last
        -:   61:/// operations that modified the resource.
        -:   62:class LastModification : public AbstractDenseLattice {
        -:   63:public:
function _ZN12_GLOBAL__N_116LastModification13resolveTypeIDEv called 512999 returned 100% blocks executed 100%
   512999:   64:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LastModification)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   65:
        -:   66:  using AbstractDenseLattice::AbstractDenseLattice;
        -:   67:
        -:   68:  /// Clear all modifications.
    21230:   69:  ChangeResult reset() {
    21230:   70:    if (lastMods.empty())
        -:   71:      return ChangeResult::NoChange;
    #####:   72:    lastMods.clear();
    #####:   73:    return ChangeResult::Change;
call    0 never executed
        -:   74:  }
        -:   75:
        -:   76:  /// Join the last modifications.
function _ZN12_GLOBAL__N_116LastModification4joinERKN4mlir8dataflow20AbstractDenseLatticeE called 234669 returned 100% blocks executed 100%
   234669:   77:  ChangeResult join(const AbstractDenseLattice &lattice) override {
   234669:   78:    const auto &rhs = static_cast<const LastModification &>(lattice);
   234669:   79:    ChangeResult result = ChangeResult::NoChange;
   685594:   80:    for (const auto &mod : rhs.lastMods) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
call    5 returned 100%
   216256:   81:      auto &lhsMod = lastMods[mod.first];
call    0 returned 100%
   216256:   82:      if (lhsMod != mod.second) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
   123281:   83:        lhsMod.insert(mod.second.begin(), mod.second.end());
call    0 returned 100%
   311405:   84:        result |= ChangeResult::Change;
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
        -:   85:      }
        -:   86:    }
   234669:   87:    return result;
        -:   88:  }
        -:   89:
        -:   90:  /// Set the last modification of a value.
function _ZN12_GLOBAL__N_116LastModification3setEN4mlir5ValueEPNS1_9OperationE called 24199 returned 100% blocks executed 100%
    24199:   91:  ChangeResult set(Value value, Operation *op) {
    24199:   92:    auto &lastMod = lastMods[value];
call    0 returned 100%
    24199:   93:    ChangeResult result = ChangeResult::NoChange;
    24199:   94:    if (lastMod.size() != 1 || *lastMod.begin() != op) {
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
    13630:   95:      result = ChangeResult::Change;
    13630:   96:      lastMod.clear();
call    0 returned 100%
    13630:   97:      lastMod.insert(op);
call    0 returned 100%
        -:   98:    }
    24199:   99:    return result;
        -:  100:  }
        -:  101:
        -:  102:  /// Get the last modifications of a value. Returns none if the last
        -:  103:  /// modifications are not known.
function _ZNK12_GLOBAL__N_116LastModification16getLastModifiersEN4mlir5ValueE called 0 returned 0% blocks executed 0%
    #####:  104:  Optional<ArrayRef<Operation *>> getLastModifiers(Value value) const {
    #####:  105:    auto it = lastMods.find(value);
call    0 never executed
    #####:  106:    if (it == lastMods.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  107:      return {};
    #####:  108:    return it->second.getArrayRef();
call    0 never executed
        -:  109:  }
        -:  110:
function _ZNK12_GLOBAL__N_116LastModification5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  111:  void print(raw_ostream &os) const override {
    #####:  112:    for (const auto &lastMod : lastMods) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  113:      os << lastMod.first << ":\n";
call    0 never executed
call    1 never executed
    #####:  114:      for (Operation *op : lastMod.second)
branch  0 never executed
branch  1 never executed
    #####:  115:        os << "  " << *op << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  116:    }
    #####:  117:  }
        -:  118:
        -:  119:private:
        -:  120:  /// The potential last modifications of a memory resource. Use a set vector to
        -:  121:  /// keep the results deterministic.
        -:  122:  DenseMap<Value, SetVector<Operation *, SmallVector<Operation *, 2>,
        -:  123:                            SmallPtrSet<Operation *, 2>>>
        -:  124:      lastMods;
        -:  125:};
        -:  126:
        -:  127:class LastModifiedAnalysis : public DenseDataFlowAnalysis<LastModification> {
        -:  128:public:
      357:  129:  using DenseDataFlowAnalysis::DenseDataFlowAnalysis;
call    0 returned 100%
call    1 returned 100%
        -:  130:
        -:  131:  /// Visit an operation. If the operation has no memory effects, then the state
        -:  132:  /// is propagated with no change. If the operation allocates a resource, then
        -:  133:  /// its reaching definitions is set to empty. If the operation writes to a
        -:  134:  /// resource, then its reaching definition is set to the written value.
        -:  135:  void visitOperation(Operation *op, const LastModification &before,
        -:  136:                      LastModification *after) override;
        -:  137:
        -:  138:  /// At an entry point, the last modifications of all memory resources are
        -:  139:  /// unknown.
function _ZN12_GLOBAL__N_120LastModifiedAnalysis15setToEntryStateEPNS_16LastModificationE called 21230 returned 100% blocks executed 60%
    21230:  140:  void setToEntryState(LastModification *lattice) override {
    21230:  141:    propagateIfChanged(lattice, lattice->reset());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    21230:  142:  }
        -:  143:};
        -:  144:
        -:  145:/// Define the lattice class explicitly to provide a type ID.
        -:  146:struct UnderlyingValueLattice : public Lattice<UnderlyingValue> {
function _ZN12_GLOBAL__N_122UnderlyingValueLattice13resolveTypeIDEv called 2426062 returned 100% blocks executed 100%
  2426062:  147:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(UnderlyingValueLattice)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
   124239:  148:  using Lattice::Lattice;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:};
        -:  150:
        -:  151:/// An analysis that uses forwarding of values along control-flow and callgraph
        -:  152:/// edges to determine single underlying values for block arguments. This
        -:  153:/// analysis exists so that the test analysis and pass can test the behaviour of
        -:  154:/// the dense data-flow analysis on the callgraph.
        -:  155:class UnderlyingValueAnalysis
        -:  156:    : public SparseDataFlowAnalysis<UnderlyingValueLattice> {
        -:  157:public:
      357:  158:  using SparseDataFlowAnalysis::SparseDataFlowAnalysis;
call    0 returned 100%
call    1 returned 100%
        -:  159:
        -:  160:  /// The underlying value of the results of an operation are not known.
function _ZN12_GLOBAL__N_123UnderlyingValueAnalysis14visitOperationEPN4mlir9OperationEN4llvm8ArrayRefIPKNS_22UnderlyingValueLatticeEEENS5_IPS6_EE called 0 returned 0% blocks executed 0%
  122884*:  161:  void visitOperation(Operation *op,
        -:  162:                      ArrayRef<const UnderlyingValueLattice *> operands,
        -:  163:                      ArrayRef<UnderlyingValueLattice *> results) override {
  122884*:  164:    setAllToEntryStates(results);
call    0 returned 100%
call    1 never executed
    #####:  165:  }
        -:  166:
        -:  167:  /// At an entry point, the underlying value of a value is itself.
function _ZN12_GLOBAL__N_123UnderlyingValueAnalysis15setToEntryStateEPNS_22UnderlyingValueLatticeE called 126508 returned 100% blocks executed 100%
   126508:  168:  void setToEntryState(UnderlyingValueLattice *lattice) override {
   126508:  169:    propagateIfChanged(lattice,
call    0 returned 100%
call    1 returned 100%
   126508:  170:                       lattice->join(UnderlyingValue{lattice->getPoint()}));
call    0 returned 100%
call    1 returned 100%
   126508:  171:  }
        -:  172:};
        -:  173:} // end anonymous namespace
        -:  174:
        -:  175:/// Look for the most underlying value of a value.
   50585*:  176:static Value getMostUnderlyingValue(
        -:  177:    Value value,
        -:  178:    function_ref<const UnderlyingValueLattice *(Value)> getUnderlyingValueFn) {
   51007*:  179:  const UnderlyingValueLattice *underlying;
   51007*:  180:  do {
   51007*:  181:    underlying = getUnderlyingValueFn(value);
call    0 never executed
call    1 returned 100%
   51007*:  182:    if (!underlying || underlying->getValue().isUninitialized())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 72% (fallthrough)
branch  7 taken 28%
   50585*:  183:      return {};
   36603*:  184:    Value underlyingValue = underlying->getValue().getUnderlyingValue();
branch  0 never executed
branch  1 never executed
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
   36603*:  185:    if (underlyingValue == value)
branch  0 never executed
branch  1 never executed
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
        -:  186:      break;
        -:  187:    value = underlyingValue;
        -:  188:  } while (true);
        -:  189:  return value;
        -:  190:}
        -:  191:
function _ZN12_GLOBAL__N_120LastModifiedAnalysis14visitOperationEPN4mlir9OperationERKNS_16LastModificationEPS4_ called 237224 returned 100% blocks executed 97%
   237224:  192:void LastModifiedAnalysis::visitOperation(Operation *op,
        -:  193:                                          const LastModification &before,
        -:  194:                                          LastModification *after) {
   237224:  195:  auto memory = dyn_cast<MemoryEffectOpInterface>(op);
call    0 returned 100%
        -:  196:  // If we can't reason about the memory effects, then conservatively assume we
        -:  197:  // can't deduce anything about the last modifications.
   237224:  198:  if (!memory)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
    33149:  199:    return setToEntryState(after);
call    0 returned 100%
        -:  200:
   422554:  201:  SmallVector<MemoryEffects::EffectInstance> effects;
call    0 returned 100%
   218479:  202:  memory.getEffects(effects);
call    0 returned 100%
        -:  203:
   218479:  204:  ChangeResult result = after->join(before);
call    0 returned 100%
   254660:  205:  for (const auto &effect : effects) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
    50585:  206:    Value value = effect.getValue();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  207:
        -:  208:    // If we see an effect on anything other than a value, assume we can't
        -:  209:    // deduce anything about the last modifications.
    50585:  210:    if (!value)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   14404*:  211:      return setToEntryState(after);
call    0 never executed
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
        -:  212:
function _ZZN12_GLOBAL__N_120LastModifiedAnalysis14visitOperationEPN4mlir9OperationERKNS_16LastModificationEPS4_ENKUlNS1_5ValueEE_clES8_.isra.0 called 51007 returned 100% blocks executed 100%
    51007:  213:    value = getMostUnderlyingValue(value, [&](Value value) {
    51007:  214:      return getOrCreateFor<UnderlyingValueLattice>(op, value);
call    0 returned 100%
call    1 returned 100%
    50585:  215:    });
    50585:  216:    if (!value)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:  217:      return;
        -:  218:
        -:  219:    // Nothing to do for reads.
    36181:  220:    if (isa<MemoryEffects::Read>(effect.getEffect()))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
    11982:  221:      continue;
        -:  222:
    47427:  223:    result |= after->set(value, op);
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
        -:  224:  }
   204075:  225:  propagateIfChanged(after, result);
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -:  226:}
        -:  227:
        -:  228:namespace {
  116632*:  229:struct TestLastModifiedPass
call    0 never executed
call    1 returned 100%
        -:  230:    : public PassWrapper<TestLastModifiedPass, OperationPass<>> {
function _ZN12_GLOBAL__N_120TestLastModifiedPass13resolveTypeIDEv called 116632 returned 100% blocks executed 100%
   116632:  231:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLastModifiedPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  232:
function _ZNK12_GLOBAL__N_120TestLastModifiedPass11getArgumentEv called 116176 returned 100% blocks executed 100%
   116176:  233:  StringRef getArgument() const override { return "test-last-modified"; }
        -:  234:
function _ZN12_GLOBAL__N_120TestLastModifiedPass14runOnOperationEv called 357 returned 100% blocks executed 76%
      357:  235:  void runOnOperation() override {
      357:  236:    Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  237:
      357:  238:    DataFlowSolver solver;
call    0 returned 100%
      357:  239:    solver.load<DeadCodeAnalysis>();
call    0 returned 100%
      357:  240:    solver.load<SparseConstantPropagation>();
call    0 returned 100%
      357:  241:    solver.load<LastModifiedAnalysis>();
call    0 returned 100%
      357:  242:    solver.load<UnderlyingValueAnalysis>();
call    0 returned 100%
      357:  243:    if (failed(solver.initializeAndRun(op)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  244:      return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  245:
      357:  246:    raw_ostream &os = llvm::errs();
call    0 returned 100%
        -:  247:
function _ZZN12_GLOBAL__N_120TestLastModifiedPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 722135 returned 100% blocks executed 10%
      357:  248:    op->walk([&](Operation *op) {
call    0 returned 100%
call    1 returned 100%
   722135:  249:      auto tag = op->getAttrOfType<StringAttr>("tag");
call    0 returned 100%
   722135:  250:      if (!tag)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   722135:  251:        return;
    #####:  252:      os << "test_tag: " << tag.getValue() << ":\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  253:      const LastModification *lastMods =
    #####:  254:          solver.lookupState<LastModification>(op);
call    0 never executed
    #####:  255:      assert(lastMods && "expected a dense lattice");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  256:      for (auto &it : llvm::enumerate(op->getOperands())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  257:        os << " operand #" << it.index() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  258:        Value value = getMostUnderlyingValue(it.value(), [&](Value value) {
    #####:  259:          return solver.lookupState<UnderlyingValueLattice>(value);
call    0 never executed
    #####:  260:        });
    #####:  261:        assert(value && "expected an underlying value");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  262:        if (Optional<ArrayRef<Operation *>> lastMod =
branch  0 never executed
branch  1 never executed
    #####:  263:                lastMods->getLastModifiers(value)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  264:          for (Operation *lastModifier : *lastMod) {
branch  0 never executed
branch  1 never executed
    #####:  265:            if (auto tagName =
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  266:                    lastModifier->getAttrOfType<StringAttr>("tag_name")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  267:              os << "  - " << tagName.getValue() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  268:            } else {
    #####:  269:              os << "  - " << lastModifier->getName() << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -:  270:            }
        -:  271:          }
        -:  272:        } else {
    #####:  273:          os << "  - <unknown>\n";
call    0 never executed
        -:  274:        }
        -:  275:      }
        -:  276:    });
        -:  277:  }
        -:  278:};
        -:  279:} // end anonymous namespace
        -:  280:
        -:  281:namespace mlir {
        -:  282:namespace test {
function _ZN4mlir4test28registerTestLastModifiedPassEv called 116161 returned 100% blocks executed 100%
   116161:  283:void registerTestLastModifiedPass() {
   116161:  284:  PassRegistration<TestLastModifiedPass>();
call    0 returned 100%
   116161:  285:}
        -:  286:} // end namespace test
        -:  287:} // end namespace mlir
