        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/Presburger/LinearTransform.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/LinearTransform.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/LinearTransform.cpp.gcda
        -:    0:Runs:116175
        -:    1://===- LinearTransform.cpp - MLIR LinearTransform Class -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/Presburger/LinearTransform.h"
        -:   10:#include "mlir/Analysis/Presburger/IntegerRelation.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:using namespace presburger;
        -:   14:
function _ZN4mlir10presburger15LinearTransformC2EONS0_6MatrixE called 0 returned 0% blocks executed 0%
    #####:   15:LinearTransform::LinearTransform(Matrix &&oMatrix) : matrix(oMatrix) {}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
function _ZN4mlir10presburger15LinearTransformC2ERKNS0_6MatrixE called 0 returned 0% blocks executed 0%
    #####:   16:LinearTransform::LinearTransform(const Matrix &oMatrix) : matrix(oMatrix) {}
branch  0 never executed
branch  1 never executed
        -:   17:
        -:   18:std::pair<unsigned, LinearTransform>
function _ZN4mlir10presburger15LinearTransform28makeTransformToColumnEchelonERKNS0_6MatrixE called 0 returned 0% blocks executed 0%
    #####:   19:LinearTransform::makeTransformToColumnEchelon(const Matrix &m) {
        -:   20:  // Compute the hermite normal form of m. This, is by definition, is in column
        -:   21:  // echelon form.
    #####:   22:  auto [h, u] = m.computeHermiteNormalForm();
call    0 never executed
        -:   23:
        -:   24:  // Since the matrix is in column ecehlon form, a zero column means the rest of
        -:   25:  // the columns are zero. Thus, once we find a zero column, we can stop.
    #####:   26:  unsigned col, e;
    #####:   27:  for (col = 0, e = m.getNumColumns(); col < e; ++col) {
branch  0 never executed
branch  1 never executed
    #####:   28:    bool zeroCol = true;
    #####:   29:    for (unsigned row = 0, f = m.getNumRows(); row < f; ++row) {
branch  0 never executed
branch  1 never executed
    #####:   30:      if (h(row, col) != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   31:        zeroCol = false;
        -:   32:        break;
        -:   33:      }
        -:   34:    }
        -:   35:
    #####:   36:    if (zeroCol)
branch  0 never executed
branch  1 never executed
        -:   37:      break;
        -:   38:  }
        -:   39:
    #####:   40:  return {col, LinearTransform(std::move(u))};
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   41:}
        -:   42:
function _ZNK4mlir10presburger15LinearTransform7applyToERKNS0_15IntegerRelationE called 0 returned 0% blocks executed 0%
    #####:   43:IntegerRelation LinearTransform::applyTo(const IntegerRelation &rel) const {
    #####:   44:  IntegerRelation result(rel.getSpace());
call    0 never executed
        -:   45:
    #####:   46:  for (unsigned i = 0, e = rel.getNumEqualities(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   47:    ArrayRef<MPInt> eq = rel.getEquality(i);
call    0 never executed
        -:   48:
    #####:   49:    const MPInt &c = eq.back();
call    0 never executed
        -:   50:
    #####:   51:    SmallVector<MPInt, 8> newEq = preMultiplyWithRow(eq.drop_back());
call    0 never executed
call    1 never executed
    #####:   52:    newEq.push_back(c);
call    0 never executed
    #####:   53:    result.addEquality(newEq);
call    0 never executed
call    1 never executed
        -:   54:  }
        -:   55:
    #####:   56:  for (unsigned i = 0, e = rel.getNumInequalities(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   57:    ArrayRef<MPInt> ineq = rel.getInequality(i);
call    0 never executed
        -:   58:
    #####:   59:    const MPInt &c = ineq.back();
call    0 never executed
        -:   60:
    #####:   61:    SmallVector<MPInt, 8> newIneq = preMultiplyWithRow(ineq.drop_back());
call    0 never executed
call    1 never executed
    #####:   62:    newIneq.push_back(c);
call    0 never executed
    #####:   63:    result.addInequality(newIneq);
call    0 never executed
call    1 never executed
        -:   64:  }
        -:   65:
    #####:   66:  return result;
        -:   67:}
