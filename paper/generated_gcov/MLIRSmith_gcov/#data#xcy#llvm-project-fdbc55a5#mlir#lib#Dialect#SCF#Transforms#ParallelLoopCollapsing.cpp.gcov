        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SCF/Transforms/ParallelLoopCollapsing.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ParallelLoopCollapsing.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/ParallelLoopCollapsing.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ParallelLoopCollapsing.cpp - Pass collapsing parallel loop indices -===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   12:#include "mlir/Dialect/SCF/Utils/Utils.h"
        -:   13:#include "mlir/Transforms/RegionUtils.h"
        -:   14:#include "llvm/Support/CommandLine.h"
        -:   15:#include "llvm/Support/Debug.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:#define GEN_PASS_DEF_SCFPARALLELLOOPCOLLAPSING
        -:   19:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   20:} // namespace mlir
        -:   21:
        -:   22:#define DEBUG_TYPE "parallel-loop-collapsing"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
  116161*:   27:struct ParallelLoopCollapsing
call    0 never executed
call    1 returned 100%
        -:   28:    : public impl::SCFParallelLoopCollapsingBase<ParallelLoopCollapsing> {
function _ZN12_GLOBAL__N_122ParallelLoopCollapsing14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   29:  void runOnOperation() override {
    #####:   30:    Operation *module = getOperation();
branch  0 never executed
branch  1 never executed
        -:   31:
function _ZZN12_GLOBAL__N_122ParallelLoopCollapsing14runOnOperationEvENKUlN4mlir3scf10ParallelOpEE_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   32:    module->walk([&](scf::ParallelOp op) {
call    0 never executed
        -:   33:      // The common case for GPU dialect will be simplifying the ParallelOp to 3
        -:   34:      // arguments, so we do that here to simplify things.
    #####:   35:      llvm::SmallVector<std::vector<unsigned>, 3> combinedLoops;
branch  0 never executed
branch  1 never executed
    #####:   36:      if (!clCollapsedIndices0.empty())
branch  0 never executed
branch  1 never executed
    #####:   37:        combinedLoops.push_back(clCollapsedIndices0);
call    0 never executed
    #####:   38:      if (!clCollapsedIndices1.empty())
branch  0 never executed
branch  1 never executed
    #####:   39:        combinedLoops.push_back(clCollapsedIndices1);
call    0 never executed
    #####:   40:      if (!clCollapsedIndices2.empty())
branch  0 never executed
branch  1 never executed
    #####:   41:        combinedLoops.push_back(clCollapsedIndices2);
call    0 never executed
    #####:   42:      collapseParallelLoops(op, combinedLoops);
call    0 never executed
call    1 never executed
    #####:   43:    });
    #####:   44:  }
        -:   45:};
        -:   46:} // namespace
        -:   47:
function _ZN4mlir32createParallelLoopCollapsingPassEv called 116161 returned 100% blocks executed 100%
   116161:   48:std::unique_ptr<Pass> mlir::createParallelLoopCollapsingPass() {
   116161:   49:  return std::make_unique<ParallelLoopCollapsing>();
call    0 returned 100%
        -:   50:}
