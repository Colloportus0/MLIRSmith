        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Interfaces/ControlFlowInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRControlFlowInterfaces.dir/ControlFlowInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRControlFlowInterfaces.dir/ControlFlowInterfaces.cpp.gcda
        -:    0:Runs:116177
        -:    1://===- ControlFlowInterfaces.cpp - ControlFlow Interfaces -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include <utility>
        -:   10:
        -:   11:#include "mlir/IR/BuiltinTypes.h"
        -:   12:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   13:#include "llvm/ADT/SmallPtrSet.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// ControlFlowInterfaces
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
        -:   21:#include "mlir/Interfaces/ControlFlowInterfaces.cpp.inc"
        -:   22:
function _ZN4mlir17SuccessorOperandsC2ENS_19MutableOperandRangeE called 25629 returned 100% blocks executed 100%
    25629:   23:SuccessorOperands::SuccessorOperands(MutableOperandRange forwardedOperands)
    25629:   24:    : producedOperandCount(0), forwardedOperands(std::move(forwardedOperands)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    25634:   25:}
        -:   26:
function _ZN4mlir17SuccessorOperandsC2EjNS_19MutableOperandRangeE called 0 returned 0% blocks executed 0%
    #####:   27:SuccessorOperands::SuccessorOperands(unsigned int producedOperandCount,
    #####:   28:                                     MutableOperandRange forwardedOperands)
        -:   29:    : producedOperandCount(producedOperandCount),
    #####:   30:      forwardedOperands(std::move(forwardedOperands)) {}
branch  0 never executed
branch  1 never executed
        -:   31:
        -:   32://===----------------------------------------------------------------------===//
        -:   33:// BranchOpInterface
        -:   34://===----------------------------------------------------------------------===//
        -:   35:
        -:   36:/// Returns the `BlockArgument` corresponding to operand `operandIndex` in some
        -:   37:/// successor if 'operandIndex' is within the range of 'operands', or None if
        -:   38:/// `operandIndex` isn't a successor operand index.
        -:   39:Optional<BlockArgument>
function _ZN4mlir6detail26getBranchSuccessorArgumentERKNS_17SuccessorOperandsEjPNS_5BlockE called 508 returned 100% blocks executed 100%
      508:   40:detail::getBranchSuccessorArgument(const SuccessorOperands &operands,
        -:   41:                                   unsigned operandIndex, Block *successor) {
      508:   42:  OperandRange forwardedOperands = operands.getForwardedOperands();
call    0 returned 100%
        -:   43:  // Check that the operands are valid.
      508:   44:  if (forwardedOperands.empty())
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
      228:   45:    return llvm::None;
        -:   46:
        -:   47:  // Check to ensure that this operand is within the range.
      280:   48:  unsigned operandsStart = forwardedOperands.getBeginOperandIndex();
call    0 returned 100%
      280:   49:  if (operandIndex < operandsStart ||
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      244:   50:      operandIndex >= (operandsStart + forwardedOperands.size()))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:   51:    return llvm::None;
        -:   52:
        -:   53:  // Index the successor.
      244:   54:  unsigned argIndex =
      244:   55:      operands.getProducedOperandCount() + operandIndex - operandsStart;
      244:   56:  return successor->getArgument(argIndex);
        -:   57:}
        -:   58:
        -:   59:/// Verify that the given operands match those of the given successor block.
        -:   60:LogicalResult
function _ZN4mlir6detail29verifyBranchSuccessorOperandsEPNS_9OperationEjRKNS_17SuccessorOperandsE called 22464 returned 100% blocks executed 65%
    22464:   61:detail::verifyBranchSuccessorOperands(Operation *op, unsigned succNo,
        -:   62:                                      const SuccessorOperands &operands) {
        -:   63:  // Check the count.
    22464:   64:  unsigned operandCount = operands.size();
call    0 returned 100%
    22464:   65:  Block *destBB = op->getSuccessor(succNo);
call    0 returned 100%
    22462:   66:  if (operandCount != destBB->getNumArguments())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   67:    return op->emitError() << "branch has " << operandCount
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   68:                           << " operands for successor #" << succNo
call    0 never executed
call    1 never executed
    #####:   69:                           << ", but target block has "
call    0 never executed
    #####:   70:                           << destBB->getNumArguments();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   71:
        -:   72:  // Check the types.
    33775:   73:  for (unsigned i = operands.getProducedOperandCount(); i != operandCount;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:       ++i) {
    11309:   75:    if (!cast<BranchOpInterface>(op).areTypesCompatible(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    22630:   76:            operands[i].getType(), destBB->getArgument(i).getType()))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        2:   77:      return op->emitError() << "type mismatch for bb argument #" << i
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        1:   78:                             << " of successor #" << succNo;
call    0 returned 100%
call    1 returned 100%
        -:   79:  }
    22466:   80:  return success();
        -:   81:}
        -:   82:
        -:   83://===----------------------------------------------------------------------===//
        -:   84:// RegionBranchOpInterface
        -:   85://===----------------------------------------------------------------------===//
        -:   86:
        -:   87:/// Verify that types match along all region control flow edges originating from
        -:   88:/// `sourceNo` (region # if source is a region, llvm::None if source is parent
        -:   89:/// op). `getInputsTypesForRegion` is a function that returns the types of the
        -:   90:/// inputs that flow from `sourceIndex' to the given region, or llvm::None if
        -:   91:/// the exact type match verification is not necessary (e.g., if the Op verifies
        -:   92:/// the match itself).
        -:   93:static LogicalResult
function _ZL24verifyTypesAlongAllEdgesPN4mlir9OperationEN4llvm8OptionalIjEENS2_12function_refIFNS3_INS_9TypeRangeEEES4_EEE called 670486608 returned 100% blocks executed 52%
670486608:   94:verifyTypesAlongAllEdges(Operation *op, Optional<unsigned> sourceNo,
        -:   95:                         function_ref<Optional<TypeRange>(Optional<unsigned>)>
        -:   96:                             getInputsTypesForRegion) {
670486608:   97:  auto regionInterface = cast<RegionBranchOpInterface>(op);
call    0 returned 100%
        -:   98:
670486544:   99:  SmallVector<RegionSuccessor, 2> successors;
call    0 returned 100%
670486544:  100:  regionInterface.getSuccessorRegions(sourceNo, successors);
call    0 returned 100%
        -:  101:
1201545172:  102:  for (RegionSuccessor &succ : successors) {
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
531058590:  103:    Optional<unsigned> succRegionNo;
531058590:  104:    if (!succ.isParent())
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
295363722:  105:      succRegionNo = succ.getSuccessor()->getRegionNumber();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  106:
function _ZZL24verifyTypesAlongAllEdgesPN4mlir9OperationEN4llvm8OptionalIjEENS2_12function_refIFNS3_INS_9TypeRangeEEES4_EEEENKUlRNS_18InFlightDiagnosticEE_clESB_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  107:    auto printEdgeName = [&](InFlightDiagnostic &diag) -> InFlightDiagnostic & {
    #####:  108:      diag << "from ";
call    0 never executed
    #####:  109:      if (sourceNo)
branch  0 never executed
branch  1 never executed
    #####:  110:        diag << "Region #" << sourceNo.value();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  111:      else
    #####:  112:        diag << "parent operands";
call    0 never executed
        -:  113:
    #####:  114:      diag << " to ";
call    0 never executed
    #####:  115:      if (succRegionNo)
branch  0 never executed
branch  1 never executed
    #####:  116:        diag << "Region #" << succRegionNo.value();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  117:      else
    #####:  118:        diag << "parent results";
call    0 never executed
    #####:  119:      return diag;
531058571:  120:    };
        -:  121:
531058571:  122:    Optional<TypeRange> sourceTypes = getInputsTypesForRegion(succRegionNo);
call    0 returned 100%
531058696:  123:    if (!sourceTypes.has_value())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
  7511285:  124:      continue;
        -:  125:
523547411:  126:    TypeRange succInputsTypes = succ.getSuccessorInputs().getTypes();
call    0 returned 100%
call    1 returned 100%
523547329:  127:    if (sourceTypes->size() != succInputsTypes.size()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  128:      InFlightDiagnostic diag = op->emitOpError(" region control flow edge ");
call    0 never executed
call    1 never executed
    #####:  129:      return printEdgeName(diag) << ": source has " << sourceTypes->size()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  130:                                 << " operands, but target successor needs "
    #####:  131:                                 << succInputsTypes.size();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  132:    }
        -:  133:
523547329:  134:    for (const auto &typesIdx :
970855067:  135:         llvm::enumerate(llvm::zip(*sourceTypes, succInputsTypes))) {
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
call    2 returned 100%
223653955:  136:      Type sourceType = std::get<0>(typesIdx.value());
call    0 returned 100%
call    1 returned 100%
223653910:  137:      Type inputType = std::get<1>(typesIdx.value());
call    0 returned 100%
call    1 returned 100%
223653857:  138:      if (!regionInterface.areTypesCompatible(sourceType, inputType)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  139:        InFlightDiagnostic diag = op->emitOpError(" along control flow edge ");
call    0 never executed
call    1 never executed
    #####:  140:        return printEdgeName(diag)
call    0 never executed
call    1 never executed
    #####:  141:               << ": source type #" << typesIdx.index() << " " << sourceType
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  142:               << " should match input type #" << typesIdx.index() << " "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  143:               << inputType;
call    0 never executed
        -:  144:      }
        -:  145:    }
        -:  146:  }
670486582:  147:  return success();
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  148:}
        -:  149:
        -:  150:/// Verify that types match along control flow edges described the given op.
function _ZN4mlir6detail32verifyTypesAlongControlFlowEdgesEPNS_9OperationE called 278762204 returned 100% blocks executed 54%
278762204:  151:LogicalResult detail::verifyTypesAlongControlFlowEdges(Operation *op) {
278762204:  152:  auto regionInterface = cast<RegionBranchOpInterface>(op);
call    0 returned 100%
        -:  153:
function _ZZN4mlir6detail32verifyTypesAlongControlFlowEdgesEPNS_9OperationEENKUlN4llvm8OptionalIjEEE_clES5_.isra.0 called 228090508 returned 100% blocks executed 100%
228090508:  154:  auto inputTypesFromParent = [&](Optional<unsigned> regionNo) -> TypeRange {
228090508:  155:    return regionInterface.getSuccessorEntryOperands(regionNo).getTypes();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
278762209:  156:  };
        -:  157:
        -:  158:  // Verify types along control flow edges originating from the parent.
278762209:  159:  if (failed(verifyTypesAlongAllEdges(op, llvm::None, inputTypesFromParent)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  160:    return failure();
        -:  161:
function _ZZN4mlir6detail32verifyTypesAlongControlFlowEdgesEPNS_9OperationEENKUlNS_9TypeRangeES3_E0_clES3_S3_.isra.0 called 0 returned 0% blocks executed 0%
278762258*:  162:  auto areTypesCompatible = [&](TypeRange lhs, TypeRange rhs) {
    #####:  163:    if (lhs.size() != rhs.size())
branch  0 never executed
branch  1 never executed
        -:  164:      return false;
    #####:  165:    for (auto types : llvm::zip(lhs, rhs)) {
branch  0 never executed
branch  1 never executed
    #####:  166:      if (!regionInterface.areTypesCompatible(std::get<0>(types),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  167:                                              std::get<1>(types))) {
call    0 never executed
    #####:  168:        return false;
        -:  169:      }
        -:  170:    }
    #####:  171:    return true;
278762258:  172:  };
        -:  173:
        -:  174:  // Verify types along control flow edges originating from each region.
1062211017:  175:  for (unsigned regionNo : llvm::seq(0U, op->getNumRegions())) {
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
call    3 returned 100%
391724390:  176:    Region &region = op->getRegion(regionNo);
call    0 returned 100%
        -:  177:
        -:  178:    // Since there can be multiple `ReturnLike` terminators or others
        -:  179:    // implementing the `RegionBranchTerminatorOpInterface`, all should have the
        -:  180:    // same operand types when passing them to the same region.
        -:  181:
391724380:  182:    Optional<OperandRange> regionReturnOperands;
775937567:  183:    for (Block &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
384213124:  184:      Operation *terminator = block.getTerminator();
call    0 returned 100%
384213092:  185:      auto terminatorOperands =
call    0 returned 100%
384213092:  186:          getRegionBranchSuccessorOperands(terminator, regionNo);
call    0 returned 100%
384213187:  187:      if (!terminatorOperands)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
384213187:  188:        continue;
        -:  189:
384213161:  190:      if (!regionReturnOperands) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
384213161:  191:        regionReturnOperands = terminatorOperands;
384213161:  192:        continue;
        -:  193:      }
        -:  194:
        -:  195:      // Found more than one ReturnLike terminator. Make sure the operand types
        -:  196:      // match with the first one.
    #####:  197:      if (!areTypesCompatible(regionReturnOperands->getTypes(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  198:                              terminatorOperands->getTypes()))
    #####:  199:        return op->emitOpError("Region #")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  200:               << regionNo
call    0 never executed
    #####:  201:               << " operands mismatch between return-like terminators";
call    0 never executed
        -:  202:    }
        -:  203:
391724443:  204:    auto inputTypesFromRegion =
function _ZZN4mlir6detail32verifyTypesAlongControlFlowEdgesEPNS_9OperationEENKUlN4llvm8OptionalIjEEE1_clES5_.isra.0 called 302968192 returned 100% blocks executed 100%
302968192:  205:        [&](Optional<unsigned> regionNo) -> Optional<TypeRange> {
        -:  206:      // If there is no return-like terminator, the op itself should verify
        -:  207:      // type consistency.
302968192:  208:      if (!regionReturnOperands)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
  7511285:  209:        return llvm::None;
        -:  210:
        -:  211:      // All successors get the same set of operand types.
295456907:  212:      return TypeRange(regionReturnOperands->getTypes());
call    0 returned 100%
call    1 returned 100%
391724443:  213:    };
        -:  214:
391724443:  215:    if (failed(verifyTypesAlongAllEdges(op, regionNo, inputTypesFromRegion)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  216:      return failure();
        -:  217:  }
        -:  218:
278762246:  219:  return success();
        -:  220:}
        -:  221:
        -:  222:/// Return `true` if region `r` is reachable from region `begin` according to
        -:  223:/// the RegionBranchOpInterface (by taking a branch).
function _ZL17isRegionReachablePN4mlir6RegionES1_ called 2408 returned 100% blocks executed 76%
     2408:  224:static bool isRegionReachable(Region *begin, Region *r) {
    2408*:  225:  assert(begin->getParentOp() == r->getParentOp() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  226:         "expected that both regions belong to the same op");
     2408:  227:  auto op = cast<RegionBranchOpInterface>(begin->getParentOp());
call    0 returned 100%
     2408:  228:  SmallVector<bool> visited(op->getNumRegions(), false);
call    0 returned 100%
     2408:  229:  visited[begin->getRegionNumber()] = true;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  230:
        -:  231:  // Retrieve all successors of the region and enqueue them in the worklist.
     4816:  232:  SmallVector<unsigned> worklist;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
function _ZZL17isRegionReachablePN4mlir6RegionES1_ENKUljE_clEj.isra.0 called 2550 returned 100% blocks executed 91%
     2550:  233:  auto enqueueAllSuccessors = [&](unsigned index) {
     2550:  234:    SmallVector<RegionSuccessor> successors;
call    0 returned 100%
     2550:  235:    op.getSuccessorRegions(index, successors);
call    0 returned 100%
     3200:  236:    for (RegionSuccessor successor : successors)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
      650:  237:      if (!successor.isParent())
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
      284:  238:        worklist.push_back(successor.getSuccessor()->getRegionNumber());
call    0 returned 100%
call    1 returned 100%
     4958:  239:  };
     2408:  240:  enqueueAllSuccessors(begin->getRegionNumber());
call    0 returned 100%
call    1 returned 100%
        -:  241:
        -:  242:  // Process all regions in the worklist via DFS.
     2550:  243:  while (!worklist.empty()) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      284:  244:    unsigned nextRegion = worklist.pop_back_val();
call    0 returned 100%
      284:  245:    if (nextRegion == r->getRegionNumber())
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  246:      return true;
     142*:  247:    if (visited[nextRegion])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  248:      continue;
      142:  249:    visited[nextRegion] = true;
call    0 returned 100%
      142:  250:    enqueueAllSuccessors(nextRegion);
call    0 returned 100%
        -:  251:  }
        -:  252:
        -:  253:  return false;
        -:  254:}
        -:  255:
        -:  256:/// Return `true` if `a` and `b` are in mutually exclusive regions.
        -:  257:///
        -:  258:/// 1. Find the first common of `a` and `b` (ancestor) that implements
        -:  259:///    RegionBranchOpInterface.
        -:  260:/// 2. Determine the regions `regionA` and `regionB` in which `a` and `b` are
        -:  261:///    contained.
        -:  262:/// 3. Check if `regionA` and `regionB` are mutually exclusive. They are
        -:  263:///    mutually exclusive if they are not reachable from each other as per
        -:  264:///    RegionBranchOpInterface::getSuccessorRegions.
function _ZN4mlir30insideMutuallyExclusiveRegionsEPNS_9OperationES1_ called 285 returned 100% blocks executed 82%
      285:  265:bool mlir::insideMutuallyExclusiveRegions(Operation *a, Operation *b) {
     285*:  266:  assert(a && "expected non-empty operation");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     285*:  267:  assert(b && "expected non-empty operation");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  268:
      285:  269:  auto branchOp = a->getParentOfType<RegionBranchOpInterface>();
call    0 returned 100%
      537:  270:  while (branchOp) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  271:    // Check if b is inside branchOp. (We already know that a is.)
      271:  272:    if (!branchOp->isProperAncestor(b)) {
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
        -:  273:      // Check next enclosing RegionBranchOpInterface.
      252:  274:      branchOp = branchOp->getParentOfType<RegionBranchOpInterface>();
call    0 returned 100%
      252:  275:      continue;
        -:  276:    }
        -:  277:
        -:  278:    // b is contained in branchOp. Retrieve the regions in which `a` and `b`
        -:  279:    // are contained.
       19:  280:    Region *regionA = nullptr, *regionB = nullptr;
       77:  281:    for (Region &r : branchOp->getRegions()) {
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
branch  2 taken 74% (fallthrough)
branch  3 taken 26%
       54:  282:      if (r.findAncestorOpInRegion(*a)) {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
      19*:  283:        assert(!regionA && "already found a region for a");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  284:        regionA = &r;
        -:  285:      }
       54:  286:      if (r.findAncestorOpInRegion(*b)) {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
      19*:  287:        assert(!regionB && "already found a region for b");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  288:        regionB = &r;
        -:  289:      }
        -:  290:    }
      19*:  291:    assert(regionA && regionB && "could not find region of op");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  292:
        -:  293:    // `a` and `b` are in mutually exclusive regions if both regions are
        -:  294:    // distinct and neither region is reachable from the other region.
       31:  295:    return regionA != regionB && !isRegionReachable(regionA, regionB) &&
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       12:  296:           !isRegionReachable(regionB, regionA);
call    0 returned 100%
        -:  297:  }
        -:  298:
        -:  299:  // Could not find a common RegionBranchOpInterface among a's and b's
        -:  300:  // ancestors.
        -:  301:  return false;
        -:  302:}
        -:  303:
function _ZN4mlir23RegionBranchOpInterface18isRepetitiveRegionEj called 2384 returned 100% blocks executed 100%
     2384:  304:bool RegionBranchOpInterface::isRepetitiveRegion(unsigned index) {
     2384:  305:  Region *region = &getOperation()->getRegion(index);
call    0 returned 100%
     2384:  306:  return isRegionReachable(region, region);
call    0 returned 100%
        -:  307:}
        -:  308:
function _ZN4mlir23RegionBranchOpInterface19getSuccessorRegionsEN4llvm8OptionalIjEERNS1_15SmallVectorImplINS_15RegionSuccessorEEE called 670841154 returned 100% blocks executed 87%
670841154:  309:void RegionBranchOpInterface::getSuccessorRegions(
        -:  310:    Optional<unsigned> index, SmallVectorImpl<RegionSuccessor> &regions) {
670841154:  311:  unsigned numInputs = 0;
670841154:  312:  if (index) {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -:  313:    // If the predecessor is a region, get the number of operands from an
        -:  314:    // exiting terminator in the region.
391938199:  315:    for (Block &block : getOperation()->getRegion(*index)) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
384424083:  316:      Operation *terminator = block.getTerminator();
call    0 returned 100%
384424037:  317:      if (getRegionBranchSuccessorOperands(terminator, *index)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
384424082:  318:        numInputs = terminator->getNumOperands();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  319:        break;
        -:  320:      }
        -:  321:    }
        -:  322:  } else {
        -:  323:    // Otherwise, use the number of parent operation operands.
278902981:  324:    numInputs = getOperation()->getNumOperands();
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -:  325:  }
670841180:  326:  SmallVector<Attribute, 2> operands(numInputs, nullptr);
call    0 returned 100%
670841124:  327:  getSuccessorRegions(index, operands, regions);
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
670841224:  328:}
        -:  329:
function _ZN4mlir28getEnclosingRepetitiveRegionEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  330:Region *mlir::getEnclosingRepetitiveRegion(Operation *op) {
    #####:  331:  while (Region *region = op->getParentRegion()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  332:    op = region->getParentOp();
call    0 never executed
    #####:  333:    if (auto branchOp = dyn_cast<RegionBranchOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:      if (branchOp.isRepetitiveRegion(region->getRegionNumber()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  335:        return region;
    #####:  336:  }
        -:  337:  return nullptr;
        -:  338:}
        -:  339:
function _ZN4mlir28getEnclosingRepetitiveRegionENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  340:Region *mlir::getEnclosingRepetitiveRegion(Value value) {
    #####:  341:  Region *region = value.getParentRegion();
call    0 never executed
    #####:  342:  while (region) {
branch  0 never executed
branch  1 never executed
    #####:  343:    Operation *op = region->getParentOp();
call    0 never executed
    #####:  344:    if (auto branchOp = dyn_cast<RegionBranchOpInterface>(op))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  345:      if (branchOp.isRepetitiveRegion(region->getRegionNumber()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  346:        return region;
    #####:  347:    region = op->getParentRegion();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  348:  }
        -:  349:  return nullptr;
        -:  350:}
        -:  351:
        -:  352://===----------------------------------------------------------------------===//
        -:  353:// RegionBranchTerminatorOpInterface
        -:  354://===----------------------------------------------------------------------===//
        -:  355:
        -:  356:/// Returns true if the given operation is either annotated with the
        -:  357:/// `ReturnLike` trait or implements the `RegionBranchTerminatorOpInterface`.
function _ZN4mlir18isRegionReturnLikeEPNS_9OperationE called 214547 returned 100% blocks executed 100%
   214547:  358:bool mlir::isRegionReturnLike(Operation *operation) {
   214547:  359:  return dyn_cast<RegionBranchTerminatorOpInterface>(operation) ||
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
   422391:  360:         operation->hasTrait<OpTrait::ReturnLike>();
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        -:  361:}
        -:  362:
        -:  363:/// Returns the mutable operands that are passed to the region with the given
        -:  364:/// `regionIndex`. If the operation does not implement the
        -:  365:/// `RegionBranchTerminatorOpInterface` and is not marked as `ReturnLike`, the
        -:  366:/// result will be `llvm::None`. In all other cases, the resulting
        -:  367:/// `OperandRange` represents all operands that are passed to the specified
        -:  368:/// successor region. If `regionIndex` is `llvm::None`, all operands that are
        -:  369:/// passed to the parent operation will be returned.
        -:  370:Optional<MutableOperandRange>
function _ZN4mlir39getMutableRegionBranchSuccessorOperandsEPNS_9OperationEN4llvm8OptionalIjEE called 768778695 returned 100% blocks executed 88%
768778695:  371:mlir::getMutableRegionBranchSuccessorOperands(Operation *operation,
        -:  372:                                              Optional<unsigned> regionIndex) {
        -:  373:  // Try to query a RegionBranchTerminatorOpInterface to determine
        -:  374:  // all successor operands that will be passed to the successor
        -:  375:  // input arguments.
768778745:  376:  if (auto regionTerminatorInterface =
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
768778695:  377:          dyn_cast<RegionBranchTerminatorOpInterface>(operation))
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
 47023830:  378:    return regionTerminatorInterface.getMutableSuccessorOperands(regionIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  379:
        -:  380:  // TODO: The ReturnLike trait should imply a default implementation of the
        -:  381:  // RegionBranchTerminatorOpInterface. This would make this code significantly
        -:  382:  // easier. Furthermore, this may even make this function obsolete.
721754915:  383:  if (operation->hasTrait<OpTrait::ReturnLike>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
721754885:  384:    return MutableOperandRange(operation);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       52:  385:  return llvm::None;
        -:  386:}
        -:  387:
        -:  388:/// Returns the read only operands that are passed to the region with the given
        -:  389:/// `regionIndex`. See `getMutableRegionBranchSuccessorOperands` for more
        -:  390:/// information.
        -:  391:Optional<OperandRange>
function _ZN4mlir32getRegionBranchSuccessorOperandsEPNS_9OperationEN4llvm8OptionalIjEE called 768777073 returned 100% blocks executed 89%
768777073:  392:mlir::getRegionBranchSuccessorOperands(Operation *operation,
        -:  393:                                       Optional<unsigned> regionIndex) {
768777073:  394:  auto range = getMutableRegionBranchSuccessorOperands(operation, regionIndex);
call    0 returned 100%
768777359:  395:  return range ? Optional<OperandRange>(*range) : llvm::None;
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 1%
        -:  396:}
