        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/Visitors.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Visitors.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/Visitors.cpp.gcda
        -:    0:Runs:116164
        -:    1://===- Visitors.cpp - MLIR Visitor Utilities ------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/Visitors.h"
        -:   10:#include "mlir/IR/Operation.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
function _ZN4mlir9WalkStageC2EPNS_9OperationE called 0 returned 0% blocks executed 0%
 3325174*:   14:WalkStage::WalkStage(Operation *op)
 3325174*:   15:    : numRegions(op->getNumRegions()), nextRegion(0) {}
        -:   16:
        -:   17:/// Walk all of the regions/blocks/operations nested under and including the
        -:   18:/// given operation. Regions, blocks and operations at the same nesting level
        -:   19:/// are visited in lexicographical order. The walk order for enclosing regions,
        -:   20:/// blocks and operations with respect to their nested ones is specified by
        -:   21:/// 'order'. These methods are invoked for void-returning callbacks. A callback
        -:   22:/// on a block or operation is allowed to erase that block or operation only if
        -:   23:/// the walk is in post-order. See non-void method for pre-order erasure.
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFvPNS_6RegionEEEENS_9WalkOrderE called 1656894 returned 100% blocks executed 95%
  1656894:   24:void detail::walk(Operation *op, function_ref<void(Region *)> callback,
        -:   25:                  WalkOrder order) {
        -:   26:  // We don't use early increment for regions because they can't be erased from
        -:   27:  // a callback.
  1846934:   28:  for (auto &region : op->getRegions()) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
    93980:   29:    if (order == WalkOrder::PreOrder)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    46990:   30:      callback(&region);
call    0 returned 100%
   186542:   31:    for (auto &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  1748656:   32:      for (auto &nestedOp : block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
  1656094:   33:        walk(&nestedOp, callback, order);
call    0 returned 100%
        -:   34:    }
    93980:   35:    if (order == WalkOrder::PostOrder)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    93980:   36:      callback(&region);
call    0 returned 100%
        -:   37:  }
  1656894:   38:}
        -:   39:
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFvPNS_5BlockEEEENS_9WalkOrderE called 5842731 returned 100% blocks executed 91%
  5842731:   40:void detail::walk(Operation *op, function_ref<void(Block *)> callback,
        -:   41:                  WalkOrder order) {
  6515635:   42:  for (auto &region : op->getRegions()) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:   43:    // Early increment here in the case where the block is erased.
   650881:   44:    for (auto &block : llvm::make_early_inc_range(region)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
   323563:   45:      if (order == WalkOrder::PreOrder)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
   230221:   46:        callback(&block);
call    0 returned 100%
  6163037:   47:      for (auto &nestedOp : block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
  5839474:   48:        walk(&nestedOp, callback, order);
call    0 returned 100%
   323562:   49:      if (order == WalkOrder::PostOrder)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
   323562:   50:        callback(&block);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   51:    }
        -:   52:  }
  5842731:   53:}
        -:   54:
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFvS2_EEENS_9WalkOrderE called 207987083 returned 100% blocks executed 88%
207987083:   55:void detail::walk(Operation *op, function_ref<void(Operation *)> callback,
        -:   56:                  WalkOrder order) {
207987083:   57:  if (order == WalkOrder::PreOrder)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
  1891973:   58:    callback(op);
call    0 returned 100%
        -:   59:
        -:   60:  // TODO: This walk should be iterative over the operations.
231782671:   61:  for (auto &region : op->getRegions()) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
 22291684:   62:    for (auto &block : region) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:      // Early increment here in the case where the operation is erased.
365376526:   64:      for (auto &nestedOp : llvm::make_early_inc_range(block))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
177176998:   65:        walk(&nestedOp, callback, order);
call    0 returned 100%
        -:   66:    }
        -:   67:  }
        -:   68:
207986908:   69:  if (order == WalkOrder::PostOrder)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
206094811:   70:    callback(op);
call    0 returned 100%
207986817:   71:}
        -:   72:
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFvS2_RKNS_9WalkStageEEEE called 1624870 returned 100% blocks executed 94%
  1624870:   73:void detail::walk(Operation *op,
        -:   74:                  function_ref<void(Operation *, const WalkStage &)> callback) {
  1624870:   75:  WalkStage stage(op);
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   76:
  1815714:   77:  for (Region &region : op->getRegions()) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:   78:    // Invoke callback on the parent op before visiting each child region.
    91990:   79:    callback(op, stage);
call    0 returned 100%
    91990:   80:    stage.advance();
        -:   81:
   182532:   82:    for (Block &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  1714624:   83:      for (Operation &nestedOp : block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
  1624082:   84:        walk(&nestedOp, callback);
call    0 returned 100%
        -:   85:    }
        -:   86:  }
        -:   87:
        -:   88:  // Invoke callback after all regions have been visited.
  1624870:   89:  callback(op, stage);
call    0 returned 100%
  1624870:   90:}
        -:   91:
        -:   92:/// Walk all of the regions/blocks/operations nested under and including the
        -:   93:/// given operation. These functions walk operations until an interrupt result
        -:   94:/// is returned by the callback. Walks on regions, blocks and operations may
        -:   95:/// also be skipped if the callback returns a skip result. Regions, blocks and
        -:   96:/// operations at the same nesting level are visited in lexicographical order.
        -:   97:/// The walk order for enclosing regions, blocks and operations with respect to
        -:   98:/// their nested ones is specified by 'order'. A callback on a block or
        -:   99:/// operation is allowed to erase that block or operation if either:
        -:  100:///   * the walk is in post-order, or
        -:  101:///   * the walk is in pre-order and the walk is skipped after the erasure.
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFNS_10WalkResultEPNS_6RegionEEEENS_9WalkOrderE called 915097 returned 100% blocks executed 72%
   915097:  102:WalkResult detail::walk(Operation *op,
        -:  103:                        function_ref<WalkResult(Region *)> callback,
        -:  104:                        WalkOrder order) {
        -:  105:  // We don't use early increment for regions because they can't be erased from
        -:  106:  // a callback.
  1026387:  107:  for (auto &region : op->getRegions()) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
    47779:  108:    if (order == WalkOrder::PreOrder) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  109:      WalkResult result = callback(&region);
call    0 never executed
    #####:  110:      if (result.wasSkipped())
branch  0 never executed
branch  1 never executed
    #####:  111:        continue;
    #####:  112:      if (result.wasInterrupted())
branch  0 never executed
branch  1 never executed
    #####:  113:        return WalkResult::interrupt();
        -:  114:    }
    94797:  115:    for (auto &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   961709:  116:      for (auto &nestedOp : block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
   914691:  117:        if (walk(&nestedOp, callback, order).wasInterrupted())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  118:          return WalkResult::interrupt();
        -:  119:    }
    47779:  120:    if (order == WalkOrder::PostOrder) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    47779:  121:      if (callback(&region).wasInterrupted())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  122:        return WalkResult::interrupt();
        -:  123:      // We don't check if this region was skipped because its walk already
        -:  124:      // finished and the walk will continue with the next region.
        -:  125:    }
        -:  126:  }
   915097:  127:  return WalkResult::advance();
        -:  128:}
        -:  129:
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFNS_10WalkResultEPNS_5BlockEEEENS_9WalkOrderE called 5285556 returned 100% blocks executed 82%
  5285556:  130:WalkResult detail::walk(Operation *op,
        -:  131:                        function_ref<WalkResult(Block *)> callback,
        -:  132:                        WalkOrder order) {
  5909385:  133:  for (auto &region : op->getRegions()) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  134:    // Early increment here in the case where the block is erased.
   897109:  135:    for (auto &block : llvm::make_early_inc_range(region)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
   297561:  136:      if (order == WalkOrder::PreOrder) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
    16394:  137:        WalkResult result = callback(&block);
call    0 returned 100%
    16394:  138:        if (result.wasSkipped())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
    15590:  139:          continue;
      804:  140:        if (result.wasInterrupted())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  141:          return WalkResult::interrupt();
        -:  142:      }
  5564604:  143:      for (auto &nestedOp : block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
  5282635:  144:        if (walk(&nestedOp, callback, order).wasInterrupted())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  145:          return WalkResult::interrupt();
   281964:  146:      if (order == WalkOrder::PostOrder) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   281161:  147:        if (callback(&block).wasInterrupted())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  148:          return WalkResult::interrupt();
        -:  149:        // We don't check if this block was skipped because its walk already
        -:  150:        // finished and the walk will continue with the next block.
        -:  151:      }
        -:  152:    }
        -:  153:  }
  5285556:  154:  return WalkResult::advance();
        -:  155:}
        -:  156:
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFNS_10WalkResultES2_EEENS_9WalkOrderE called 1003085454 returned 100% blocks executed 91%
1003085454:  157:WalkResult detail::walk(Operation *op,
        -:  158:                        function_ref<WalkResult(Operation *)> callback,
        -:  159:                        WalkOrder order) {
1003085454:  160:  if (order == WalkOrder::PreOrder) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
  4250901:  161:    WalkResult result = callback(op);
call    0 returned 100%
        -:  162:    // If skipped, caller will continue the walk on the next operation.
  4250901:  163:    if (result.wasSkipped())
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
   227006:  164:      return WalkResult::advance();
  4023895:  165:    if (result.wasInterrupted())
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     7155:  166:      return WalkResult::interrupt();
        -:  167:  }
        -:  168:
        -:  169:  // TODO: This walk should be iterative over the operations.
1030429126:  170:  for (auto &region : op->getRegions()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
 27276166:  171:    for (auto &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  172:      // Early increment here in the case where the operation is erased.
509985911:  173:      for (auto &nestedOp : llvm::make_early_inc_range(block)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
248233051:  174:        if (walk(&nestedOp, callback, order).wasInterrupted())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
     9270:  175:          return WalkResult::interrupt();
        -:  176:      }
        -:  177:    }
        -:  178:  }
        -:  179:
1002842000:  180:  if (order == WalkOrder::PostOrder)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
998833529:  181:    return callback(op);
call    0 returned 100%
  4008471:  182:  return WalkResult::advance();
        -:  183:}
        -:  184:
function _ZN4mlir6detail4walkEPNS_9OperationEN4llvm12function_refIFNS_10WalkResultES2_RKNS_9WalkStageEEEE called 1700304 returned 100% blocks executed 79%
  1700304:  185:WalkResult detail::walk(
        -:  186:    Operation *op,
        -:  187:    function_ref<WalkResult(Operation *, const WalkStage &)> callback) {
  1700304:  188:  WalkStage stage(op);
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  189:
  1906084:  190:  for (Region &region : op->getRegions()) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  191:    // Invoke callback on the parent op before visiting each child region.
    93204:  192:    WalkResult result = callback(op, stage);
call    0 returned 100%
        -:  193:
    93204:  194:    if (result.wasSkipped())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  195:      return WalkResult::advance();
    93204:  196:    if (result.wasInterrupted())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  197:      return WalkResult::interrupt();
        -:  198:
    93204:  199:    stage.advance();
        -:  200:
   184936:  201:    for (Block &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  202:      // Early increment here in the case where the operation is erased.
  3490736:  203:      for (Operation &nestedOp : llvm::make_early_inc_range(block))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
  1699502:  204:        if (walk(&nestedOp, callback).wasInterrupted())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  205:          return WalkResult::interrupt();
        -:  206:    }
        -:  207:  }
  1700304:  208:  return callback(op, stage);
call    0 returned 100%
        -:  209:}
