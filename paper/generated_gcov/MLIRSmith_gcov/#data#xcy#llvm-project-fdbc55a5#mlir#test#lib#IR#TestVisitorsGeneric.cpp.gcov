        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/IR/TestVisitorsGeneric.cpp
        -:    0:Graph:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestVisitorsGeneric.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/IR/CMakeFiles/MLIRTestIR.dir/TestVisitorsGeneric.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestIRVisitorsGeneric.cpp - Pass to test the Generic IR visitors ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "mlir/Pass/Pass.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
function _ZL19getStageDescriptionRKN4mlir9WalkStageE called 1755184 returned 100% blocks executed 85%
  1755184:   14:static std::string getStageDescription(const WalkStage &stage) {
  1755184:   15:  if (stage.isBeforeAllRegions())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
  1662587:   16:    return "before all regions";
call    0 returned 100%
    92597:   17:  if (stage.isAfterAllRegions())
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
    66347:   18:    return "after all regions";
call    0 returned 100%
    26250:   19:  return "before region #" + std::to_string(stage.getNextRegion());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   20:}
        -:   21:
        -:   22:namespace {
        -:   23:/// This pass exercises generic visitor with void callbacks and prints the order
        -:   24:/// and stage in which operations are visited.
  116669*:   25:struct TestGenericIRVisitorPass
call    0 never executed
call    1 returned 100%
        -:   26:    : public PassWrapper<TestGenericIRVisitorPass, OperationPass<>> {
function _ZN12_GLOBAL__N_124TestGenericIRVisitorPass13resolveTypeIDEv called 116669 returned 100% blocks executed 100%
   116669:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGenericIRVisitorPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:
function _ZNK12_GLOBAL__N_124TestGenericIRVisitorPass11getArgumentEv called 116173 returned 100% blocks executed 100%
   116173:   29:  StringRef getArgument() const final { return "test-generic-ir-visitors"; }
function _ZNK12_GLOBAL__N_124TestGenericIRVisitorPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   30:  StringRef getDescription() const final { return "Test generic IR visitors."; }
function _ZN12_GLOBAL__N_124TestGenericIRVisitorPass14runOnOperationEv called 394 returned 100% blocks executed 80%
      394:   31:  void runOnOperation() override {
      394:   32:    Operation *outerOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      394:   33:    int stepNo = 0;
function _ZZN12_GLOBAL__N_124TestGenericIRVisitorPass14runOnOperationEvENKUlPN4mlir9OperationERKNS1_9WalkStageEE_clES3_S6_.isra.0 called 858430 returned 100% blocks executed 100%
   858824:   34:    outerOp->walk([&](Operation *op, const WalkStage &stage) {
call    0 returned 100%
   858430:   35:      llvm::outs() << "step " << stepNo++ << " op '" << op->getName() << "' "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
   858430:   36:                   << getStageDescription(stage) << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
   858430:   37:    });
        -:   38:
        -:   39:    // Exercise static inference of operation type.
function _ZZN12_GLOBAL__N_124TestGenericIRVisitorPass14runOnOperationEvENKUlN4test11TwoRegionOpERKN4mlir9WalkStageEE0_clES2_S6_.isra.0 called 0 returned 0% blocks executed 0%
     394*:   40:    outerOp->walk([&](test::TwoRegionOp op, const WalkStage &stage) {
call    0 returned 100%
    #####:   41:      llvm::outs() << "step " << stepNo++ << " op '" << op->getName() << "' "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   42:                   << getStageDescription(stage) << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   43:    });
      394:   44:  }
        -:   45:};
        -:   46:
        -:   47:/// This pass exercises the generic visitor with non-void callbacks and prints
        -:   48:/// the order and stage in which operations are visited. It will interrupt the
        -:   49:/// walk based on attributes peesent in the IR.
  116688*:   50:struct TestGenericIRVisitorInterruptPass
call    0 never executed
call    1 returned 100%
        -:   51:    : public PassWrapper<TestGenericIRVisitorInterruptPass, OperationPass<>> {
function _ZN12_GLOBAL__N_133TestGenericIRVisitorInterruptPass13resolveTypeIDEv called 116688 returned 100% blocks executed 100%
   116688:   52:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   53:      TestGenericIRVisitorInterruptPass)
        -:   54:
function _ZNK12_GLOBAL__N_133TestGenericIRVisitorInterruptPass11getArgumentEv called 116177 returned 100% blocks executed 100%
   116177:   55:  StringRef getArgument() const final {
   116177:   56:    return "test-generic-ir-visitors-interrupt";
        -:   57:  }
function _ZNK12_GLOBAL__N_133TestGenericIRVisitorInterruptPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   58:  StringRef getDescription() const final {
   116163:   59:    return "Test generic IR visitors with interrupts.";
        -:   60:  }
function _ZN12_GLOBAL__N_133TestGenericIRVisitorInterruptPass14runOnOperationEv called 401 returned 100% blocks executed 40%
      401:   61:  void runOnOperation() override {
      401:   62:    Operation *outerOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      401:   63:    int stepNo = 0;
        -:   64:
function _ZZN12_GLOBAL__N_133TestGenericIRVisitorInterruptPass14runOnOperationEvENKUlPN4mlir9OperationERKNS1_9WalkStageEE_clES3_S6_.isra.0 called 896754 returned 100% blocks executed 55%
   896754:   65:    auto walker = [&](Operation *op, const WalkStage &stage) {
   896754:   66:      if (auto interruptBeforeAall =
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   896754:   67:              op->getAttrOfType<BoolAttr>("interrupt_before_all"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   68:        if (interruptBeforeAall.getValue() && stage.isBeforeAllRegions())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   69:          return WalkResult::interrupt();
        -:   70:
   896754:   71:      if (auto interruptAfterAll =
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   896754:   72:              op->getAttrOfType<BoolAttr>("interrupt_after_all"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   73:        if (interruptAfterAll.getValue() && stage.isAfterAllRegions())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   74:          return WalkResult::interrupt();
        -:   75:
   896754:   76:      if (auto interruptAfterRegion =
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   896754:   77:              op->getAttrOfType<IntegerAttr>("interrupt_after_region"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   78:        if (stage.isAfterRegion(
branch  0 never executed
branch  1 never executed
    #####:   79:                static_cast<int>(interruptAfterRegion.getInt())))
call    0 never executed
    #####:   80:          return WalkResult::interrupt();
        -:   81:
   896754:   82:      if (auto skipBeforeAall = op->getAttrOfType<BoolAttr>("skip_before_all"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   83:        if (skipBeforeAall.getValue() && stage.isBeforeAllRegions())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   84:          return WalkResult::skip();
        -:   85:
   896754:   86:      if (auto skipAfterAll = op->getAttrOfType<BoolAttr>("skip_after_all"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   87:        if (skipAfterAll.getValue() && stage.isAfterAllRegions())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   88:          return WalkResult::skip();
        -:   89:
   896754:   90:      if (auto skipAfterRegion =
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   896754:   91:              op->getAttrOfType<IntegerAttr>("skip_after_region"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   92:        if (stage.isAfterRegion(static_cast<int>(skipAfterRegion.getInt())))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   93:          return WalkResult::skip();
        -:   94:
   896754:   95:      llvm::outs() << "step " << stepNo++ << " op '" << op->getName() << "' "
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
   896754:   96:                   << getStageDescription(stage) << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
   896754:   97:      return WalkResult::advance();
      401:   98:    };
        -:   99:
        -:  100:    // Interrupt the walk based on attributes on the operation.
      401:  101:    auto result = outerOp->walk(walker);
call    0 returned 100%
        -:  102:
      401:  103:    if (result.wasInterrupted())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  104:      llvm::outs() << "step " << stepNo++ << " walk was interrupted\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  105:
        -:  106:    // Exercise static inference of operation type.
     401*:  107:    result = outerOp->walk([&](test::TwoRegionOp op, const WalkStage &stage) {
    #####:  108:      return walker(op, stage);
call    0 never executed
      401:  109:    });
call    0 returned 100%
        -:  110:
      401:  111:    if (result.wasInterrupted())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:      llvm::outs() << "step " << stepNo++ << " walk was interrupted\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
      401:  113:  }
        -:  114:};
        -:  115:
  116702*:  116:struct TestGenericIRBlockVisitorInterruptPass
call    0 never executed
call    1 returned 100%
        -:  117:    : public PassWrapper<TestGenericIRBlockVisitorInterruptPass,
        -:  118:                         OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_138TestGenericIRBlockVisitorInterruptPass13resolveTypeIDEv called 116702 returned 100% blocks executed 100%
   116702:  119:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  120:      TestGenericIRBlockVisitorInterruptPass)
        -:  121:
function _ZNK12_GLOBAL__N_138TestGenericIRBlockVisitorInterruptPass11getArgumentEv called 116183 returned 100% blocks executed 100%
   116183:  122:  StringRef getArgument() const final {
   116183:  123:    return "test-generic-ir-block-visitors-interrupt";
        -:  124:  }
function _ZNK12_GLOBAL__N_138TestGenericIRBlockVisitorInterruptPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:  125:  StringRef getDescription() const final {
   116163:  126:    return "Test generic IR visitors with interrupts, starting with Blocks.";
        -:  127:  }
        -:  128:
function _ZN12_GLOBAL__N_138TestGenericIRBlockVisitorInterruptPass14runOnOperationEv called 413 returned 100% blocks executed 50%
      413:  129:  void runOnOperation() override {
      413:  130:    int stepNo = 0;
        -:  131:
function _ZZN12_GLOBAL__N_138TestGenericIRBlockVisitorInterruptPass14runOnOperationEvENKUlPN4mlir5BlockEE_clES3_.isra.0 called 46842 returned 100% blocks executed 93%
    46842:  132:    auto walker = [&](Block *block) {
   930612:  133:      for (Operation &op : *block)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
   883770:  134:        if (op.getAttrOfType<BoolAttr>("interrupt"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  135:          return WalkResult::interrupt();
        -:  136:
    46842:  137:      llvm::outs() << "step " << stepNo++ << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    46842:  138:      return WalkResult::advance();
      413:  139:    };
        -:  140:
      413:  141:    auto result = getOperation()->walk(walker);
call    0 returned 100%
call    1 returned 100%
      413:  142:    if (result.wasInterrupted())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  143:      llvm::outs() << "step " << stepNo++ << " walk was interrupted\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
      413:  144:  }
        -:  145:};
        -:  146:
  116675*:  147:struct TestGenericIRRegionVisitorInterruptPass
call    0 never executed
call    1 returned 100%
        -:  148:    : public PassWrapper<TestGenericIRRegionVisitorInterruptPass,
        -:  149:                         OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_139TestGenericIRRegionVisitorInterruptPass13resolveTypeIDEv called 116675 returned 100% blocks executed 100%
   116675:  150:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  151:      TestGenericIRRegionVisitorInterruptPass)
        -:  152:
function _ZNK12_GLOBAL__N_139TestGenericIRRegionVisitorInterruptPass11getArgumentEv called 116183 returned 100% blocks executed 100%
   116183:  153:  StringRef getArgument() const final {
   116183:  154:    return "test-generic-ir-region-visitors-interrupt";
        -:  155:  }
function _ZNK12_GLOBAL__N_139TestGenericIRRegionVisitorInterruptPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:  156:  StringRef getDescription() const final {
   116163:  157:    return "Test generic IR visitors with interrupts, starting with Regions.";
        -:  158:  }
        -:  159:
function _ZN12_GLOBAL__N_139TestGenericIRRegionVisitorInterruptPass14runOnOperationEv called 406 returned 100% blocks executed 50%
      406:  160:  void runOnOperation() override {
      406:  161:    int stepNo = 0;
        -:  162:
function _ZZN12_GLOBAL__N_139TestGenericIRRegionVisitorInterruptPass14runOnOperationEvENKUlPN4mlir6RegionEE_clES3_.isra.0 called 47779 returned 100% blocks executed 93%
    47779:  163:    auto walker = [&](Region *region) {
   962470:  164:      for (Operation &op : region->getOps())
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
   914691:  165:        if (op.getAttrOfType<BoolAttr>("interrupt"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  166:          return WalkResult::interrupt();
        -:  167:
    47779:  168:      llvm::outs() << "step " << stepNo++ << "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    47779:  169:      return WalkResult::advance();
      406:  170:    };
        -:  171:
      406:  172:    auto result = getOperation()->walk(walker);
call    0 returned 100%
call    1 returned 100%
      406:  173:    if (result.wasInterrupted())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  174:      llvm::outs() << "step " << stepNo++ << " walk was interrupted\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
      406:  175:  }
        -:  176:};
        -:  177:
        -:  178:} // namespace
        -:  179:
        -:  180:namespace mlir {
        -:  181:namespace test {
function _ZN4mlir4test33registerTestGenericIRVisitorsPassEv called 116163 returned 100% blocks executed 100%
   116163:  182:void registerTestGenericIRVisitorsPass() {
   116163:  183:  PassRegistration<TestGenericIRVisitorPass>();
call    0 returned 100%
   116163:  184:  PassRegistration<TestGenericIRVisitorInterruptPass>();
call    0 returned 100%
   116163:  185:  PassRegistration<TestGenericIRBlockVisitorInterruptPass>();
call    0 returned 100%
   116163:  186:  PassRegistration<TestGenericIRRegionVisitorInterruptPass>();
call    0 returned 100%
   116163:  187:}
        -:  188:
        -:  189:} // namespace test
        -:  190:} // namespace mlir
