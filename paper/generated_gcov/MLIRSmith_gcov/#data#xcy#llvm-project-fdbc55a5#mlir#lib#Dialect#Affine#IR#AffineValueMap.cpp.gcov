        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Affine/IR/AffineValueMap.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/IR/CMakeFiles/obj.MLIRAffineDialect.dir/AffineValueMap.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/IR/CMakeFiles/obj.MLIRAffineDialect.dir/AffineValueMap.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- AffineValueMap.cpp - MLIR Affine Value Map Class -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/IR/AffineValueMap.h"
        -:   10:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
function _ZN4mlir14AffineValueMapC2ENS_9AffineMapENS_10ValueRangeES2_ called 160 returned 100% blocks executed 100%
      160:   14:AffineValueMap::AffineValueMap(AffineMap map, ValueRange operands,
      160:   15:                               ValueRange results)
        -:   16:    : map(map), operands(operands.begin(), operands.end()),
      160:   17:      results(results.begin(), results.end()) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   18:
function _ZN4mlir14AffineValueMap5resetENS_9AffineMapENS_10ValueRangeES2_ called 65051 returned 100% blocks executed 100%
    65051:   19:void AffineValueMap::reset(AffineMap map, ValueRange operands,
        -:   20:                           ValueRange results) {
    65051:   21:  this->map.reset(map);
call    0 returned 100%
    65051:   22:  this->operands.assign(operands.begin(), operands.end());
call    0 returned 100%
    65051:   23:  this->results.assign(results.begin(), results.end());
call    0 returned 100%
    65051:   24:}
        -:   25:
function _ZN4mlir14AffineValueMap10differenceERKS0_S2_PS0_ called 6891 returned 100% blocks executed 86%
     6891:   26:void AffineValueMap::difference(const AffineValueMap &a,
        -:   27:                                const AffineValueMap &b, AffineValueMap *res) {
    6891*:   28:  assert(a.getNumResults() == b.getNumResults() && "invalid inputs");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   29:
     6891:   30:  SmallVector<Value, 4> allOperands;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     6891:   31:  allOperands.reserve(a.getNumOperands() + b.getNumOperands());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    13782:   32:  auto aDims = a.getOperands().take_front(a.getNumDims());
    13782:   33:  auto bDims = b.getOperands().take_front(b.getNumDims());
    13782:   34:  auto aSyms = a.getOperands().take_back(a.getNumSymbols());
    13782:   35:  auto bSyms = b.getOperands().take_back(b.getNumSymbols());
     6891:   36:  allOperands.append(aDims.begin(), aDims.end());
call    0 returned 100%
     6891:   37:  allOperands.append(bDims.begin(), bDims.end());
call    0 returned 100%
     6891:   38:  allOperands.append(aSyms.begin(), aSyms.end());
call    0 returned 100%
     6891:   39:  allOperands.append(bSyms.begin(), bSyms.end());
call    0 returned 100%
        -:   40:
        -:   41:  // Shift dims and symbols of b's map.
     6891:   42:  auto bMap = b.getAffineMap()
call    0 returned 100%
     6891:   43:                  .shiftDims(a.getNumDims())
call    0 returned 100%
call    1 returned 100%
     6891:   44:                  .shiftSymbols(a.getNumSymbols());
call    0 returned 100%
        -:   45:
        -:   46:  // Construct the difference expressions.
    13782:   47:  auto aMap = a.getAffineMap();
    13782:   48:  SmallVector<AffineExpr, 4> diffExprs;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     6891:   49:  diffExprs.reserve(a.getNumResults());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    19822:   50:  for (unsigned i = 0, e = bMap.getNumResults(); i < e; ++i)
call    0 returned 100%
branch  1 taken 65% (fallthrough)
branch  2 taken 35%
    12931:   51:    diffExprs.push_back(aMap.getResult(i) - bMap.getResult(i));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   52:
     6891:   53:  auto diffMap = AffineMap::get(bMap.getNumDims(), bMap.getNumSymbols(),
     6891:   54:                                diffExprs, bMap.getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
     6891:   55:  fullyComposeAffineMapAndOperands(&diffMap, &allOperands);
call    0 returned 100%
     6891:   56:  canonicalizeMapAndOperands(&diffMap, &allOperands);
call    0 returned 100%
     6891:   57:  diffMap = simplifyAffineMap(diffMap);
call    0 returned 100%
     6891:   58:  res->reset(diffMap, allOperands);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     6891:   59:}
        -:   60:
        -:   61:// Returns true and sets 'indexOfMatch' if 'valueToMatch' is found in
        -:   62:// 'valuesToSearch' beginning at 'indexStart'. Returns false otherwise.
function _ZL9findIndexN4mlir5ValueEN4llvm8ArrayRefIS0_EEjPj called 0 returned 0% blocks executed 0%
    #####:   63:static bool findIndex(Value valueToMatch, ArrayRef<Value> valuesToSearch,
        -:   64:                      unsigned indexStart, unsigned *indexOfMatch) {
    #####:   65:  unsigned size = valuesToSearch.size();
    #####:   66:  for (unsigned i = indexStart; i < size; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   67:    if (valueToMatch == valuesToSearch[i]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   68:      *indexOfMatch = i;
    #####:   69:      return true;
        -:   70:    }
        -:   71:  }
        -:   72:  return false;
        -:   73:}
        -:   74:
        -:   75:bool AffineValueMap::isMultipleOf(unsigned idx, int64_t factor) const {
        -:   76:  return map.isMultipleOf(idx, factor);
        -:   77:}
        -:   78:
        -:   79:/// This method uses the invariant that operands are always positionally aligned
        -:   80:/// with the AffineDimExpr in the underlying AffineMap.
function _ZNK4mlir14AffineValueMap12isFunctionOfEjNS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   81:bool AffineValueMap::isFunctionOf(unsigned idx, Value value) const {
    #####:   82:  unsigned index;
    #####:   83:  if (!findIndex(value, operands, /*indexStart=*/0, &index)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   84:    return false;
        -:   85:  }
    #####:   86:  auto expr = const_cast<AffineValueMap *>(this)->getAffineMap().getResult(idx);
call    0 never executed
        -:   87:  // TODO: this is better implemented on a flattened representation.
        -:   88:  // At least for now it is conservative.
    #####:   89:  return expr.isFunctionOfDim(index);
call    0 never executed
        -:   90:}
        -:   91:
function _ZNK4mlir14AffineValueMap10getOperandEj called 799 returned 100% blocks executed 67%
      799:   92:Value AffineValueMap::getOperand(unsigned i) const {
      799:   93:  return static_cast<Value>(operands[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   94:}
        -:   95:
function _ZNK4mlir14AffineValueMap11getOperandsEv called 29486 returned 100% blocks executed 100%
    57050:   96:ArrayRef<Value> AffineValueMap::getOperands() const {
    27564:   97:  return ArrayRef<Value>(operands);
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 100% (fallthrough)
branch  5 taken 1%
branch  6 taken 100% (fallthrough)
branch  7 taken 1%
        -:   98:}
        -:   99:
function _ZNK4mlir14AffineValueMap12getAffineMapEv called 81047 returned 100% blocks executed 100%
   94829*:  100:AffineMap AffineValueMap::getAffineMap() const { return map.getAffineMap(); }
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
        -:  101:
        -:  102:AffineValueMap::~AffineValueMap() = default;
