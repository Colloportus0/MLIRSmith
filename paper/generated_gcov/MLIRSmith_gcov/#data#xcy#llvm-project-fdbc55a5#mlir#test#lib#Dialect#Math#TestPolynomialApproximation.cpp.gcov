        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Math/TestPolynomialApproximation.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Math/CMakeFiles/MLIRMathTestPasses.dir/TestPolynomialApproximation.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Math/CMakeFiles/MLIRMathTestPasses.dir/TestPolynomialApproximation.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestPolynomialApproximation.cpp - Test math ops approximations -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains test passes for expanding math operations into
        -:   10:// polynomial approximations.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "mlir/Dialect/Math/IR/Math.h"
        -:   16:#include "mlir/Dialect/Math/Transforms/Passes.h"
        -:   17:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   18:#include "mlir/Dialect/X86Vector/X86VectorDialect.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:namespace {
        -:   25:struct TestMathPolynomialApproximationPass
        -:   26:    : public PassWrapper<TestMathPolynomialApproximationPass, OperationPass<>> {
function _ZN12_GLOBAL__N_135TestMathPolynomialApproximationPass13resolveTypeIDEv called 116691 returned 100% blocks executed 100%
   116691:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:      TestMathPolynomialApproximationPass)
        -:   29:
function _ZN12_GLOBAL__N_135TestMathPolynomialApproximationPassC2Ev called 116691 returned 100% blocks executed 100%
   116691:   30:  TestMathPolynomialApproximationPass() = default;
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_135TestMathPolynomialApproximationPassC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   31:  TestMathPolynomialApproximationPass(
        -:   32:      const TestMathPolynomialApproximationPass &pass)
    #####:   33:      : PassWrapper(pass) {}
call    0 never executed
call    1 never executed
        -:   34:
        -:   35:  void runOnOperation() override;
function _ZNK12_GLOBAL__N_135TestMathPolynomialApproximationPass20getDependentDialectsERN4mlir15DialectRegistryE called 530 returned 100% blocks executed 75%
      530:   36:  void getDependentDialects(DialectRegistry &registry) const override {
      530:   37:    registry.insert<arith::ArithDialect, math::MathDialect,
      530:   38:                    vector::VectorDialect>();
call    0 returned 100%
      530:   39:    if (enableAvx2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   40:      registry.insert<x86vector::X86VectorDialect>();
call    0 never executed
      530:   41:  }
function _ZNK12_GLOBAL__N_135TestMathPolynomialApproximationPass11getArgumentEv called 116174 returned 100% blocks executed 100%
   116174:   42:  StringRef getArgument() const final {
   116174:   43:    return "test-math-polynomial-approximation";
        -:   44:  }
function _ZNK12_GLOBAL__N_135TestMathPolynomialApproximationPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   45:  StringRef getDescription() const final {
   116161:   46:    return "Test math polynomial approximations";
        -:   47:  }
        -:   48:
        -:   49:  Option<bool> enableAvx2{
        -:   50:      *this, "enable-avx2",
        -:   51:      llvm::cl::desc("Enable approximations that emit AVX2 intrinsics via the "
        -:   52:                     "X86Vector dialect"),
        -:   53:      llvm::cl::init(false)};
        -:   54:};
        -:   55:} // namespace
        -:   56:
function _ZN12_GLOBAL__N_135TestMathPolynomialApproximationPass14runOnOperationEv called 417 returned 100% blocks executed 90%
      417:   57:void TestMathPolynomialApproximationPass::runOnOperation() {
      417:   58:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      417:   59:  MathPolynomialApproximationOptions approxOptions;
      417:   60:  approxOptions.enableAvx2 = enableAvx2;
call    0 returned 100%
      417:   61:  populateMathPolynomialApproximationPatterns(patterns, approxOptions);
call    0 returned 100%
      417:   62:  (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      417:   63:}
        -:   64:
        -:   65:namespace mlir {
        -:   66:namespace test {
function _ZN4mlir4test43registerTestMathPolynomialApproximationPassEv called 116161 returned 100% blocks executed 100%
   116161:   67:void registerTestMathPolynomialApproximationPass() {
   116161:   68:  PassRegistration<TestMathPolynomialApproximationPass>();
call    0 returned 100%
   116161:   69:}
        -:   70:} // namespace test
        -:   71:} // namespace mlir
