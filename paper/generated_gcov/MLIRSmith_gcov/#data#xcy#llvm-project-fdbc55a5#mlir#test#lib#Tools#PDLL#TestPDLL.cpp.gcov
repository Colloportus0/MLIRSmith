        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Tools/PDLL/TestPDLL.cpp
        -:    0:Graph:../tools/mlir/test/lib/Tools/PDLL/CMakeFiles/MLIRTestPDLL.dir/TestPDLL.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Tools/PDLL/CMakeFiles/MLIRTestPDLL.dir/TestPDLL.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestPDLByteCode.cpp - Test PDLL functionality ----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/PDL/IR/PDL.h"
        -:   10:#include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
        -:   11:#include "mlir/Parser/Parser.h"
        -:   12:#include "mlir/Pass/Pass.h"
        -:   13:#include "mlir/Pass/PassManager.h"
        -:   14:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:#include "TestPDLLPatterns.h.inc"
        -:   19:
        -:   20:namespace {
  116340*:   21:struct TestPDLLPass : public PassWrapper<TestPDLLPass, OperationPass<>> {
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
function _ZN12_GLOBAL__N_112TestPDLLPass13resolveTypeIDEv called 116340 returned 100% blocks executed 100%
   116340:   22:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestPDLLPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   23:
function _ZNK12_GLOBAL__N_112TestPDLLPass11getArgumentEv called 116170 returned 100% blocks executed 100%
   116170:   24:  StringRef getArgument() const final { return "test-pdll-pass"; }
function _ZNK12_GLOBAL__N_112TestPDLLPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   25:  StringRef getDescription() const final { return "Test PDLL functionality"; }
function _ZNK12_GLOBAL__N_112TestPDLLPass20getDependentDialectsERN4mlir15DialectRegistryE called 177 returned 100% blocks executed 100%
      177:   26:  void getDependentDialects(DialectRegistry &registry) const override {
      177:   27:    registry.insert<pdl::PDLDialect, pdl_interp::PDLInterpDialect>();
call    0 returned 100%
      177:   28:  }
function _ZN12_GLOBAL__N_112TestPDLLPass10initializeEPN4mlir11MLIRContextE called 156 returned 100% blocks executed 100%
      156:   29:  LogicalResult initialize(MLIRContext *ctx) override {
        -:   30:    // Build the pattern set within the `initialize` to avoid recompiling PDL
        -:   31:    // patterns during each `runOnOperation` invocation.
      156:   32:    RewritePatternSet patternList(ctx);
call    0 returned 100%
      156:   33:    populateGeneratedPDLLPatterns(patternList);
call    0 returned 100%
      312:   34:    patterns = std::move(patternList);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
      156:   35:    return success();
call    0 returned 100%
        -:   36:  }
        -:   37:
function _ZN12_GLOBAL__N_112TestPDLLPass14runOnOperationEv called 124 returned 100% blocks executed 75%
      124:   38:  void runOnOperation() final {
        -:   39:    // Invoke the pattern driver with the provided patterns.
      124:   40:    (void)applyPatternsAndFoldGreedily(getOperation(), patterns);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
      124:   41:  }
        -:   42:
        -:   43:  FrozenRewritePatternSet patterns;
        -:   44:};
        -:   45:} // namespace
        -:   46:
        -:   47:namespace mlir {
        -:   48:namespace test {
function _ZN4mlir4test22registerTestPDLLPassesEv called 116163 returned 100% blocks executed 100%
   116163:   49:void registerTestPDLLPasses() { PassRegistration<TestPDLLPass>(); }
call    0 returned 100%
        -:   50:} // namespace test
        -:   51:} // namespace mlir
