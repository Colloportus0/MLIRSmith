        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Analysis/TestAliasAnalysis.cpp
        -:    0:Graph:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestAliasAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Analysis/CMakeFiles/MLIRTestAnalysis.dir/TestAliasAnalysis.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestAliasAnalysis.cpp - Test alias analysis results ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains test passes for constructing and testing alias analysis
        -:   10:// results.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Analysis/AliasAnalysis.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:/// Print a value that is used as an operand of an alias query.
function _ZL17printAliasOperandPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   20:static void printAliasOperand(Operation *op) {
    #####:   21:  llvm::errs() << op->getAttrOfType<StringAttr>("test.ptr").getValue();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   22:}
function _ZL17printAliasOperandN4mlir5ValueE called 0 returned 0% blocks executed 0%
    #####:   23:static void printAliasOperand(Value value) {
    #####:   24:  if (BlockArgument arg = value.dyn_cast<BlockArgument>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   25:    Region *region = arg.getParentRegion();
call    0 never executed
    #####:   26:    unsigned parentBlockNumber =
    #####:   27:        std::distance(region->begin(), arg.getOwner()->getIterator());
    #####:   28:    llvm::errs() << region->getParentOp()
call    0 never executed
    #####:   29:                        ->getAttrOfType<StringAttr>("test.ptr")
    #####:   30:                        .getValue()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   31:                 << ".region" << region->getRegionNumber();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   32:    if (parentBlockNumber != 0)
branch  0 never executed
branch  1 never executed
    #####:   33:      llvm::errs() << ".block" << parentBlockNumber;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   34:    llvm::errs() << "#" << arg.getArgNumber();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   35:    return;
        -:   36:  }
    #####:   37:  OpResult result = value.cast<OpResult>();
call    0 never executed
    #####:   38:  printAliasOperand(result.getOwner());
call    0 never executed
call    1 never executed
    #####:   39:  llvm::errs() << "#" << result.getResultNumber();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   40:}
        -:   41:
        -:   42://===----------------------------------------------------------------------===//
        -:   43:// Testing AliasResult
        -:   44://===----------------------------------------------------------------------===//
        -:   45:
        -:   46:namespace {
  116670*:   47:struct TestAliasAnalysisPass
call    0 never executed
call    1 returned 100%
        -:   48:    : public PassWrapper<TestAliasAnalysisPass, OperationPass<>> {
function _ZN12_GLOBAL__N_121TestAliasAnalysisPass13resolveTypeIDEv called 116670 returned 100% blocks executed 100%
   116670:   49:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestAliasAnalysisPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   50:
function _ZNK12_GLOBAL__N_121TestAliasAnalysisPass11getArgumentEv called 116173 returned 100% blocks executed 100%
   116173:   51:  StringRef getArgument() const final { return "test-alias-analysis"; }
function _ZNK12_GLOBAL__N_121TestAliasAnalysisPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   52:  StringRef getDescription() const final {
   116161:   53:    return "Test alias analysis results.";
        -:   54:  }
function _ZN12_GLOBAL__N_121TestAliasAnalysisPass14runOnOperationEv called 399 returned 100% blocks executed 59%
      399:   55:  void runOnOperation() override {
      399:   56:    llvm::errs() << "Testing : " << getOperation()->getAttr("sym_name") << "\n";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:   57:
        -:   58:    // Collect all of the values to check for aliasing behavior.
      399:   59:    AliasAnalysis &aliasAnalysis = getAnalysis<AliasAnalysis>();
call    0 returned 100%
      399:   60:    SmallVector<Value, 32> valsToCheck;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_121TestAliasAnalysisPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 849224 returned 100% blocks executed 18%
      399:   61:    getOperation()->walk([&](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   849224:   62:      if (!op->getAttr("test.ptr"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   63:        return;
    #####:   64:      valsToCheck.append(op->result_begin(), op->result_end());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   65:      for (Region &region : op->getRegions())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   66:        for (Block &block : region)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:          valsToCheck.append(block.args_begin(), block.args_end());
call    0 never executed
        -:   68:    });
        -:   69:
        -:   70:    // Check for aliasing behavior between each of the values.
     399*:   71:    for (auto it = valsToCheck.begin(), e = valsToCheck.end(); it != e; ++it)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   72:      for (auto *innerIt = valsToCheck.begin(); innerIt != it; ++innerIt)
branch  0 never executed
branch  1 never executed
    #####:   73:        printAliasResult(aliasAnalysis.alias(*innerIt, *it), *innerIt, *it);
call    0 never executed
call    1 never executed
      399:   74:  }
        -:   75:
        -:   76:  /// Print the result of an alias query.
        -:   77:  void printAliasResult(AliasResult result, Value lhs, Value rhs) {
        -:   78:    printAliasOperand(lhs);
        -:   79:    llvm::errs() << " <-> ";
        -:   80:    printAliasOperand(rhs);
        -:   81:    llvm::errs() << ": " << result << "\n";
        -:   82:  }
        -:   83:};
        -:   84:} // namespace
        -:   85:
        -:   86://===----------------------------------------------------------------------===//
        -:   87:// Testing ModRefResult
        -:   88://===----------------------------------------------------------------------===//
        -:   89:
        -:   90:namespace {
  116675*:   91:struct TestAliasAnalysisModRefPass
call    0 never executed
call    1 returned 100%
        -:   92:    : public PassWrapper<TestAliasAnalysisModRefPass, OperationPass<>> {
function _ZN12_GLOBAL__N_127TestAliasAnalysisModRefPass13resolveTypeIDEv called 116675 returned 100% blocks executed 100%
   116675:   93:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestAliasAnalysisModRefPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   94:
function _ZNK12_GLOBAL__N_127TestAliasAnalysisModRefPass11getArgumentEv called 116175 returned 100% blocks executed 100%
   116175:   95:  StringRef getArgument() const final { return "test-alias-analysis-modref"; }
function _ZNK12_GLOBAL__N_127TestAliasAnalysisModRefPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   96:  StringRef getDescription() const final {
   116161:   97:    return "Test alias analysis ModRef results.";
        -:   98:  }
function _ZN12_GLOBAL__N_127TestAliasAnalysisModRefPass14runOnOperationEv called 407 returned 100% blocks executed 65%
      407:   99:  void runOnOperation() override {
      407:  100:    llvm::errs() << "Testing : " << getOperation()->getAttr("sym_name") << "\n";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:  101:
        -:  102:    // Collect all of the values to check for aliasing behavior.
      407:  103:    AliasAnalysis &aliasAnalysis = getAnalysis<AliasAnalysis>();
call    0 returned 100%
      407:  104:    SmallVector<Value, 32> valsToCheck;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_127TestAliasAnalysisModRefPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 862752 returned 100% blocks executed 18%
      407:  105:    getOperation()->walk([&](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   862752:  106:      if (!op->getAttr("test.ptr"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  107:        return;
    #####:  108:      valsToCheck.append(op->result_begin(), op->result_end());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  109:      for (Region &region : op->getRegions())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  110:        for (Block &block : region)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  111:          valsToCheck.append(block.args_begin(), block.args_end());
call    0 never executed
        -:  112:    });
        -:  113:
        -:  114:    // Check for aliasing behavior between each of the values.
     407*:  115:    for (auto &it : valsToCheck) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_127TestAliasAnalysisModRefPass14runOnOperationEvENKUlPN4mlir9OperationEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  116:      getOperation()->walk([&](Operation *op) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  117:        if (!op->getAttr("test.ptr"))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  118:          return;
    #####:  119:        printModRefResult(aliasAnalysis.getModRef(op, it), op, it);
call    0 never executed
call    1 never executed
        -:  120:      });
        -:  121:    }
      407:  122:  }
        -:  123:
        -:  124:  /// Print the result of an alias query.
        -:  125:  void printModRefResult(ModRefResult result, Operation *op, Value location) {
        -:  126:    printAliasOperand(op);
        -:  127:    llvm::errs() << " -> ";
        -:  128:    printAliasOperand(location);
        -:  129:    llvm::errs() << ": " << result << "\n";
        -:  130:  }
        -:  131:};
        -:  132:} // namespace
        -:  133:
        -:  134://===----------------------------------------------------------------------===//
        -:  135:// Pass Registration
        -:  136://===----------------------------------------------------------------------===//
        -:  137:
        -:  138:namespace mlir {
        -:  139:namespace test {
function _ZN4mlir4test29registerTestAliasAnalysisPassEv called 116161 returned 100% blocks executed 100%
   116161:  140:void registerTestAliasAnalysisPass() {
   116161:  141:  PassRegistration<TestAliasAnalysisPass>();
call    0 returned 100%
   116161:  142:  PassRegistration<TestAliasAnalysisModRefPass>();
call    0 returned 100%
   116161:  143:}
        -:  144:} // namespace test
        -:  145:} // namespace mlir
