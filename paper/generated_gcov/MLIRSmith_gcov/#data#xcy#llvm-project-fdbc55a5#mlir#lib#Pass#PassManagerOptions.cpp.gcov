        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Pass/PassManagerOptions.cpp
        -:    0:Graph:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassManagerOptions.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassManagerOptions.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- PassManagerOptions.cpp - PassManager Command Line Options ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Pass/Pass.h"
        -:   10:#include "mlir/Pass/PassManager.h"
        -:   11:#include "mlir/Pass/PassRegistry.h"
        -:   12:#include "mlir/Support/Timing.h"
        -:   13:#include "llvm/Support/CommandLine.h"
        -:   14:#include "llvm/Support/ManagedStatic.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:namespace {
        -:   19:struct PassManagerOptions {
        -:   20:  //===--------------------------------------------------------------------===//
        -:   21:  // Crash Reproducer Generator
        -:   22:  //===--------------------------------------------------------------------===//
        -:   23:  llvm::cl::opt<std::string> reproducerFile{
        -:   24:      "mlir-pass-pipeline-crash-reproducer",
        -:   25:      llvm::cl::desc("Generate a .mlir reproducer file at the given output path"
        -:   26:                     " if the pass manager crashes or fails")};
        -:   27:  llvm::cl::opt<bool> localReproducer{
        -:   28:      "mlir-pass-pipeline-local-reproducer",
        -:   29:      llvm::cl::desc("When generating a crash reproducer, attempt to generated "
        -:   30:                     "a reproducer with the smallest pipeline."),
        -:   31:      llvm::cl::init(false)};
        -:   32:
        -:   33:  //===--------------------------------------------------------------------===//
        -:   34:  // IR Printing
        -:   35:  //===--------------------------------------------------------------------===//
        -:   36:  PassNameCLParser printBefore{"mlir-print-ir-before",
        -:   37:                               "Print IR before specified passes"};
        -:   38:  PassNameCLParser printAfter{"mlir-print-ir-after",
        -:   39:                              "Print IR after specified passes"};
        -:   40:  llvm::cl::opt<bool> printBeforeAll{
        -:   41:      "mlir-print-ir-before-all", llvm::cl::desc("Print IR before each pass"),
        -:   42:      llvm::cl::init(false)};
        -:   43:  llvm::cl::opt<bool> printAfterAll{"mlir-print-ir-after-all",
        -:   44:                                    llvm::cl::desc("Print IR after each pass"),
        -:   45:                                    llvm::cl::init(false)};
        -:   46:  llvm::cl::opt<bool> printAfterChange{
        -:   47:      "mlir-print-ir-after-change",
        -:   48:      llvm::cl::desc(
        -:   49:          "When printing the IR after a pass, only print if the IR changed"),
        -:   50:      llvm::cl::init(false)};
        -:   51:  llvm::cl::opt<bool> printAfterFailure{
        -:   52:      "mlir-print-ir-after-failure",
        -:   53:      llvm::cl::desc(
        -:   54:          "When printing the IR after a pass, only print if the pass failed"),
        -:   55:      llvm::cl::init(false)};
        -:   56:  llvm::cl::opt<bool> printModuleScope{
        -:   57:      "mlir-print-ir-module-scope",
        -:   58:      llvm::cl::desc("When printing IR for print-ir-[before|after]{-all} "
        -:   59:                     "always print the top-level operation"),
        -:   60:      llvm::cl::init(false)};
        -:   61:
        -:   62:  /// Add an IR printing instrumentation if enabled by any 'print-ir' flags.
        -:   63:  void addPrinterInstrumentation(PassManager &pm);
        -:   64:
        -:   65:  //===--------------------------------------------------------------------===//
        -:   66:  // Pass Statistics
        -:   67:  //===--------------------------------------------------------------------===//
        -:   68:  llvm::cl::opt<bool> passStatistics{
        -:   69:      "mlir-pass-statistics",
        -:   70:      llvm::cl::desc("Display the statistics of each pass")};
        -:   71:  llvm::cl::opt<PassDisplayMode> passStatisticsDisplayMode{
        -:   72:      "mlir-pass-statistics-display",
        -:   73:      llvm::cl::desc("Display method for pass statistics"),
        -:   74:      llvm::cl::init(PassDisplayMode::Pipeline),
        -:   75:      llvm::cl::values(
        -:   76:          clEnumValN(
        -:   77:              PassDisplayMode::List, "list",
        -:   78:              "display the results in a merged list sorted by pass name"),
        -:   79:          clEnumValN(PassDisplayMode::Pipeline, "pipeline",
        -:   80:                     "display the results with a nested pipeline view"))};
        -:   81:};
        -:   82:} // namespace
        -:   83:
        -:   84:static llvm::ManagedStatic<PassManagerOptions> options;
        -:   85:
        -:   86:/// Add an IR printing instrumentation if enabled by any 'print-ir' flags.
function _ZN12_GLOBAL__N_118PassManagerOptions25addPrinterInstrumentationERN4mlir11PassManagerE called 91595 returned 100% blocks executed 81%
    91595:   87:void PassManagerOptions::addPrinterInstrumentation(PassManager &pm) {
    93251:   88:  std::function<bool(Pass *, Operation *)> shouldPrintBeforePass;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1656:   89:  std::function<bool(Pass *, Operation *)> shouldPrintAfterPass;
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   90:
        -:   91:  // Handle print-before.
    91595:   92:  if (printBeforeAll) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   93:    // If we are printing before all, then just return true for the filter.
      566:   94:    shouldPrintBeforePass = [](Pass *, Operation *) { return true; };
call    0 returned 100%
    91029:   95:  } else if (printBefore.hasAnyOccurrences()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   96:    // Otherwise if there are specific passes to print before, then check to see
        -:   97:    // if the pass info for the current pass is included in the list.
function _ZZN12_GLOBAL__N_118PassManagerOptions25addPrinterInstrumentationERN4mlir11PassManagerEENKUlPNS1_4PassEPNS1_9OperationEE0_clES5_S7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   98:    shouldPrintBeforePass = [&](Pass *pass, Operation *) {
    #####:   99:      auto *passInfo = pass->lookupPassInfo();
call    0 never executed
    #####:  100:      return passInfo && printBefore.contains(passInfo);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  101:    };
call    0 never executed
        -:  102:  }
        -:  103:
        -:  104:  // Handle print-after.
    91595:  105:  if (printAfterAll || printAfterFailure) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  106:    // If we are printing after all or failure, then just return true for the
        -:  107:    // filter.
     1113:  108:    shouldPrintAfterPass = [](Pass *, Operation *) { return true; };
call    0 returned 100%
    90482:  109:  } else if (printAfter.hasAnyOccurrences()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  110:    // Otherwise if there are specific passes to print after, then check to see
        -:  111:    // if the pass info for the current pass is included in the list.
function _ZZN12_GLOBAL__N_118PassManagerOptions25addPrinterInstrumentationERN4mlir11PassManagerEENKUlPNS1_4PassEPNS1_9OperationEE2_clES5_S7_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  112:    shouldPrintAfterPass = [&](Pass *pass, Operation *) {
    #####:  113:      auto *passInfo = pass->lookupPassInfo();
call    0 never executed
    #####:  114:      return passInfo && printAfter.contains(passInfo);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  115:    };
call    0 never executed
        -:  116:  }
        -:  117:
        -:  118:  // If there are no valid printing filters, then just return.
    91595:  119:  if (!shouldPrintBeforePass && !shouldPrintAfterPass)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    89939:  120:    return;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  121:
        -:  122:  // Otherwise, add the IR printing instrumentation.
     3878:  123:  pm.enableIRPrinting(shouldPrintBeforePass, shouldPrintAfterPass,
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
        -:  124:                      printModuleScope, printAfterChange, printAfterFailure,
     1656:  125:                      llvm::errs());
call    0 returned 100%
branch  1 taken 67%
branch  2 taken 33%
        -:  126:}
        -:  127:
function _ZN4mlir28registerPassManagerCLOptionsEv called 116163 returned 100% blocks executed 100%
   116163:  128:void mlir::registerPassManagerCLOptions() {
        -:  129:  // Make sure that the options struct has been constructed.
   116163:  130:  *options;
call    0 returned 100%
   116163:  131:}
        -:  132:
function _ZN4mlir25applyPassManagerCLOptionsERNS_11PassManagerE called 91595 returned 100% blocks executed 71%
    91595:  133:void mlir::applyPassManagerCLOptions(PassManager &pm) {
    91595:  134:  if (!options.isConstructed())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  135:    return;
        -:  136:
        -:  137:  // Generate a reproducer on crash/failure.
    91595:  138:  if (options->reproducerFile.getNumOccurrences())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  139:    pm.enableCrashReproducerGeneration(options->reproducerFile,
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  140:                                       options->localReproducer);
call    0 never executed
        -:  141:
        -:  142:  // Enable statistics dumping.
    91595:  143:  if (options->passStatistics)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      561:  144:    pm.enableStatistics(options->passStatisticsDisplayMode);
call    0 returned 100%
call    1 returned 100%
        -:  145:
        -:  146:  // Add the IR printing instrumentation.
    91595:  147:  options->addPrinterInstrumentation(pm);
call    0 returned 100%
call    1 returned 100%
        -:  148:}
        -:  149:
function _ZN4mlir38applyDefaultTimingPassManagerCLOptionsERNS_11PassManagerE called 0 returned 0% blocks executed 0%
    #####:  150:void mlir::applyDefaultTimingPassManagerCLOptions(PassManager &pm) {
        -:  151:  // Create a temporary timing manager for the PM to own, apply its CL options,
        -:  152:  // and pass it to the PM.
    #####:  153:  auto tm = std::make_unique<DefaultTimingManager>();
call    0 never executed
    #####:  154:  applyDefaultTimingManagerCLOptions(*tm);
call    0 never executed
    #####:  155:  pm.enableTiming(std::move(tm));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  156:}
