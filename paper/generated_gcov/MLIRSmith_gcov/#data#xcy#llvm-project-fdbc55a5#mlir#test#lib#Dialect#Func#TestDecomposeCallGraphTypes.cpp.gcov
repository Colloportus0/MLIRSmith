        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Func/TestDecomposeCallGraphTypes.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Func/CMakeFiles/MLIRFuncTestPasses.dir/TestDecomposeCallGraphTypes.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Func/CMakeFiles/MLIRFuncTestPasses.dir/TestDecomposeCallGraphTypes.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestDecomposeCallGraphTypes.cpp - Test CG type decomposition -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   11:#include "mlir/Dialect/Func/Transforms/DecomposeCallGraphTypes.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:#include "mlir/Pass/Pass.h"
        -:   14:#include "mlir/Transforms/DialectConversion.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:namespace {
        -:   19:/// A pass for testing call graph type decomposition.
        -:   20:///
        -:   21:/// This instantiates the patterns with a TypeConverter and ValueDecomposer
        -:   22:/// that splits tuple types into their respective element types.
        -:   23:/// For example, `tuple<T1, T2, T3> --> T1, T2, T3`.
  116699*:   24:struct TestDecomposeCallGraphTypes
call    0 never executed
call    1 returned 100%
        -:   25:    : public PassWrapper<TestDecomposeCallGraphTypes, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_127TestDecomposeCallGraphTypes13resolveTypeIDEv called 116699 returned 100% blocks executed 100%
   116699:   26:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestDecomposeCallGraphTypes)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   27:
function _ZNK12_GLOBAL__N_127TestDecomposeCallGraphTypes20getDependentDialectsERN4mlir15DialectRegistryE called 538 returned 100% blocks executed 100%
      538:   28:  void getDependentDialects(DialectRegistry &registry) const override {
      538:   29:    registry.insert<test::TestDialect>();
call    0 returned 100%
      538:   30:  }
function _ZNK12_GLOBAL__N_127TestDecomposeCallGraphTypes11getArgumentEv called 116175 returned 100% blocks executed 100%
   116175:   31:  StringRef getArgument() const final {
   116175:   32:    return "test-decompose-call-graph-types";
        -:   33:  }
function _ZNK12_GLOBAL__N_127TestDecomposeCallGraphTypes14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   34:  StringRef getDescription() const final {
   116161:   35:    return "Decomposes types at call graph boundaries.";
        -:   36:  }
function _ZN12_GLOBAL__N_127TestDecomposeCallGraphTypes14runOnOperationEv called 422 returned 100% blocks executed 77%
      422:   37:  void runOnOperation() override {
      422:   38:    ModuleOp module = getOperation();
call    0 returned 100%
      422:   39:    auto *context = &getContext();
call    0 returned 100%
      844:   40:    TypeConverter typeConverter;
call    0 returned 100%
call    1 returned 100%
      422:   41:    ConversionTarget target(*context);
call    0 returned 100%
      844:   42:    ValueDecomposer decomposer;
call    0 returned 100%
call    1 returned 100%
      844:   43:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
        -:   44:
      422:   45:    target.addLegalDialect<test::TestDialect>();
call    0 returned 100%
        -:   46:
function _ZZN12_GLOBAL__N_127TestDecomposeCallGraphTypes14runOnOperationEvENKUlN4mlir4func8ReturnOpEE_clES3_.isra.0 called 870 returned 100% blocks executed 100%
     1292:   47:    target.addDynamicallyLegalOp<func::ReturnOp>([&](func::ReturnOp op) {
call    0 returned 100%
      870:   48:      return typeConverter.isLegal(op.getOperandTypes());
call    0 returned 100%
call    1 returned 100%
        -:   49:    });
      422:   50:    target.addDynamicallyLegalOp<func::CallOp>(
call    0 returned 100%
       60:   51:        [&](func::CallOp op) { return typeConverter.isLegal(op); });
call    0 returned 100%
      422:   52:    target.addDynamicallyLegalOp<func::FuncOp>([&](func::FuncOp op) {
call    0 returned 100%
      958:   53:      return typeConverter.isSignatureLegal(op.getFunctionType());
call    0 returned 100%
call    1 returned 100%
        -:   54:    });
        -:   55:
     1255:   56:    typeConverter.addConversion([](Type type) { return type; });
call    0 returned 100%
call    1 returned 100%
      422:   57:    typeConverter.addConversion(
call    0 returned 100%
    #####:   58:        [](TupleType tupleType, SmallVectorImpl<Type> &types) {
    #####:   59:          tupleType.getFlattenedTypes(types);
call    0 never executed
    #####:   60:          return success();
        -:   61:        });
        -:   62:
function _ZZN12_GLOBAL__N_127TestDecomposeCallGraphTypes14runOnOperationEvENKUlRN4mlir9OpBuilderENS1_8LocationENS1_9TupleTypeENS1_5ValueERN4llvm15SmallVectorImplIS6_EEE4_clES3_S4_S5_S6_SA_.isra.0 called 0 returned 0% blocks executed 0%
     422*:   63:    decomposer.addDecomposeValueConversion([](OpBuilder &builder, Location loc,
call    0 returned 100%
        -:   64:                                              TupleType resultType, Value value,
        -:   65:                                              SmallVectorImpl<Value> &values) {
    #####:   66:      for (unsigned i = 0, e = resultType.size(); i < e; ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:        Value res = builder.create<test::GetTupleElementOp>(
    #####:   68:            loc, resultType.getType(i), value, builder.getI32IntegerAttr(i));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   69:        values.push_back(res);
call    0 never executed
        -:   70:      }
    #####:   71:      return success();
        -:   72:    });
        -:   73:
      422:   74:    typeConverter.addArgumentMaterialization(
call    0 returned 100%
function _ZZN12_GLOBAL__N_127TestDecomposeCallGraphTypes14runOnOperationEvENKUlRN4mlir9OpBuilderENS1_9TupleTypeENS1_10ValueRangeENS1_8LocationEE5_clES3_S4_S5_S6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   75:        [](OpBuilder &builder, TupleType resultType, ValueRange inputs,
        -:   76:           Location loc) -> Optional<Value> {
    #####:   77:          if (inputs.size() == 1)
branch  0 never executed
branch  1 never executed
    #####:   78:            return llvm::None;
    #####:   79:          TupleType tuple = builder.getTupleType(inputs.getTypes());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   80:          Value value = builder.create<test::MakeTupleOp>(loc, tuple, inputs);
call    0 never executed
    #####:   81:          return value;
        -:   82:        });
        -:   83:
      422:   84:    populateDecomposeCallGraphTypesPatterns(context, typeConverter, decomposer,
call    0 returned 100%
        -:   85:                                            patterns);
        -:   86:
      422:   87:    if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   88:      return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   89:  }
        -:   90:};
        -:   91:
        -:   92:} // namespace
        -:   93:
        -:   94:namespace mlir {
        -:   95:namespace test {
function _ZN4mlir4test35registerTestDecomposeCallGraphTypesEv called 116161 returned 100% blocks executed 100%
   116161:   96:void registerTestDecomposeCallGraphTypes() {
   116161:   97:  PassRegistration<TestDecomposeCallGraphTypes>();
call    0 returned 100%
   116161:   98:}
        -:   99:} // namespace test
        -:  100:} // namespace mlir
