        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/LinalgToStandard/LinalgToStandard.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/LinalgToStandard/CMakeFiles/obj.MLIRLinalgToStandard.dir/LinalgToStandard.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/LinalgToStandard/CMakeFiles/obj.MLIRLinalgToStandard.dir/LinalgToStandard.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- LinalgToStandard.cpp - conversion from Linalg to Standard dialect --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/LinalgToStandard/LinalgToStandard.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   12:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   13:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   14:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   15:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   16:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   17:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   18:#include "mlir/Pass/Pass.h"
        -:   19:
        -:   20:namespace mlir {
        -:   21:#define GEN_PASS_DEF_CONVERTLINALGTOSTANDARD
        -:   22:#include "mlir/Conversion/Passes.h.inc"
        -:   23:} // namespace mlir
        -:   24:
        -:   25:using namespace mlir;
        -:   26:using namespace mlir::linalg;
        -:   27:
function _ZL24makeStridedLayoutDynamicN4mlir10MemRefTypeE called 0 returned 0% blocks executed 0%
    #####:   28:static MemRefType makeStridedLayoutDynamic(MemRefType type) {
    #####:   29:  return MemRefType::Builder(type).setLayout(StridedLayoutAttr::get(
call    0 never executed
        -:   30:      type.getContext(), ShapedType::kDynamicStrideOrOffset,
    #####:   31:      SmallVector<int64_t>(type.getRank(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   32:                           ShapedType::kDynamicStrideOrOffset)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   33:}
        -:   34:
        -:   35:/// Helper function to extract the operand types that are passed to the
        -:   36:/// generated CallOp. MemRefTypes have their layout canonicalized since the
        -:   37:/// information is not used in signature generation.
        -:   38:/// Note that static size information is not modified.
function _ZL19extractOperandTypesPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   39:static SmallVector<Type, 4> extractOperandTypes(Operation *op) {
    #####:   40:  SmallVector<Type, 4> result;
branch  0 never executed
branch  1 never executed
    #####:   41:  result.reserve(op->getNumOperands());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   42:  for (auto type : op->getOperandTypes()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   43:    // The underlying descriptor type (e.g. LLVM) does not have layout
        -:   44:    // information. Canonicalizing the type at the level of std when going into
        -:   45:    // a library call avoids needing to introduce DialectCastOp.
    #####:   46:    if (auto memrefType = type.dyn_cast<MemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   47:      result.push_back(makeStridedLayoutDynamic(memrefType));
call    0 never executed
call    1 never executed
        -:   48:    else
    #####:   49:      result.push_back(type);
call    0 never executed
        -:   50:  }
    #####:   51:  return result;
        -:   52:}
        -:   53:
        -:   54:// Get a SymbolRefAttr containing the library function name for the LinalgOp.
        -:   55:// If the library function does not exist, insert a declaration.
function _ZL23getLibraryCallSymbolRefPN4mlir9OperationERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   56:static FlatSymbolRefAttr getLibraryCallSymbolRef(Operation *op,
        -:   57:                                                 PatternRewriter &rewriter) {
    #####:   58:  auto linalgOp = cast<LinalgOp>(op);
call    0 never executed
    #####:   59:  auto fnName = linalgOp.getLibraryCallName();
call    0 never executed
    #####:   60:  if (fnName.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   61:    op->emitWarning("No library call defined for: ") << *op;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   62:    return {};
        -:   63:  }
        -:   64:
        -:   65:  // fnName is a dynamic std::string, unique it via a SymbolRefAttr.
    #####:   66:  FlatSymbolRefAttr fnNameAttr =
call    0 never executed
    #####:   67:      SymbolRefAttr::get(rewriter.getContext(), fnName);
call    0 never executed
    #####:   68:  auto module = op->getParentOfType<ModuleOp>();
call    0 never executed
    #####:   69:  if (module.lookupSymbol(fnNameAttr.getAttr()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   70:    return fnNameAttr;
        -:   71:
    #####:   72:  SmallVector<Type, 4> inputTypes(extractOperandTypes(op));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:  assert(op->getNumResults() == 0 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   74:         "Library call for linalg operation can be generated only for ops that "
        -:   75:         "have void return types");
    #####:   76:  auto libFnType = rewriter.getFunctionType(inputTypes, {});
call    0 never executed
call    1 never executed
call    2 never executed
        -:   77:
    #####:   78:  OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   79:  // Insert before module terminator.
    #####:   80:  rewriter.setInsertionPoint(module.getBody(),
call    0 never executed
call    1 never executed
        -:   81:                             std::prev(module.getBody()->end()));
    #####:   82:  func::FuncOp funcOp = rewriter.create<func::FuncOp>(
    #####:   83:      op->getLoc(), fnNameAttr.getValue(), libFnType);
call    0 never executed
call    1 never executed
        -:   84:  // Insert a function attribute that will trigger the emission of the
        -:   85:  // corresponding `_mlir_ciface_xxx` interface so that external libraries see
        -:   86:  // a normalized ABI. This interface is added during std to llvm conversion.
    #####:   87:  funcOp->setAttr(LLVM::LLVMDialect::getEmitCWrapperAttrName(),
call    0 never executed
call    1 never executed
    #####:   88:                  UnitAttr::get(op->getContext()));
call    0 never executed
    #####:   89:  funcOp.setPrivate();
call    0 never executed
    #####:   90:  return fnNameAttr;
branch  0 never executed
branch  1 never executed
        -:   91:}
        -:   92:
        -:   93:static SmallVector<Value, 4>
function _ZL37createTypeCanonicalizedMemRefOperandsRN4mlir9OpBuilderENS_8LocationENS_10ValueRangeE called 0 returned 0% blocks executed 0%
    #####:   94:createTypeCanonicalizedMemRefOperands(OpBuilder &b, Location loc,
        -:   95:                                      ValueRange operands) {
    #####:   96:  SmallVector<Value, 4> res;
branch  0 never executed
branch  1 never executed
    #####:   97:  res.reserve(operands.size());
branch  0 never executed
branch  1 never executed
    #####:   98:  for (auto op : operands) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   99:    auto memrefType = op.getType().dyn_cast<MemRefType>();
call    0 never executed
    #####:  100:    if (!memrefType) {
branch  0 never executed
branch  1 never executed
    #####:  101:      res.push_back(op);
call    0 never executed
    #####:  102:      continue;
        -:  103:    }
    #####:  104:    Value cast =
    #####:  105:        b.create<memref::CastOp>(loc, makeStridedLayoutDynamic(memrefType), op);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  106:    res.push_back(cast);
call    0 never executed
        -:  107:  }
    #####:  108:  return res;
        -:  109:}
        -:  110:
function _ZNK4mlir6linalg28LinalgOpToLibraryCallRewrite15matchAndRewriteENS0_8LinalgOpERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  111:LogicalResult mlir::linalg::LinalgOpToLibraryCallRewrite::matchAndRewrite(
        -:  112:    LinalgOp op, PatternRewriter &rewriter) const {
    #####:  113:  auto libraryCallName = getLibraryCallSymbolRef(op, rewriter);
call    0 never executed
    #####:  114:  if (!libraryCallName)
branch  0 never executed
branch  1 never executed
    #####:  115:    return failure();
        -:  116:
        -:  117:  // TODO: Add support for more complex library call signatures that include
        -:  118:  // indices or captured values.
    #####:  119:  rewriter.replaceOpWithNewOp<func::CallOp>(
    #####:  120:      op, libraryCallName.getValue(), TypeRange(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  121:      createTypeCanonicalizedMemRefOperands(rewriter, op->getLoc(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  122:                                            op->getOperands()));
call    0 never executed
call    1 never executed
    #####:  123:  return success();
        -:  124:}
        -:  125:
        -:  126:/// Populate the given list with patterns that convert from Linalg to Standard.
function _ZN4mlir6linalg42populateLinalgToStandardConversionPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     423*:  127:void mlir::linalg::populateLinalgToStandardConversionPatterns(
        -:  128:    RewritePatternSet &patterns) {
        -:  129:  // TODO: ConvOp conversion needs to export a descriptor with relevant
        -:  130:  // attribute values such as kernel striding and dilation.
    #####:  131:  patterns.add<LinalgOpToLibraryCallRewrite>(patterns.getContext());
call    0 never executed
    #####:  132:}
        -:  133:
        -:  134:namespace {
  116716*:  135:struct ConvertLinalgToStandardPass
call    0 never executed
call    1 returned 100%
        -:  136:    : public impl::ConvertLinalgToStandardBase<ConvertLinalgToStandardPass> {
        -:  137:  void runOnOperation() override;
        -:  138:};
        -:  139:} // namespace
        -:  140:
function _ZN12_GLOBAL__N_127ConvertLinalgToStandardPass14runOnOperationEv called 423 returned 100% blocks executed 100%
      423:  141:void ConvertLinalgToStandardPass::runOnOperation() {
      423:  142:  auto module = getOperation();
call    0 returned 100%
      423:  143:  ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
      423:  144:  target.addLegalDialect<AffineDialect, arith::ArithDialect, func::FuncDialect,
      423:  145:                         memref::MemRefDialect, scf::SCFDialect>();
call    0 returned 100%
      423:  146:  target.addLegalOp<ModuleOp, func::FuncOp, func::ReturnOp>();
call    0 returned 100%
      846:  147:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      423:  148:  populateLinalgToStandardConversionPatterns(patterns);
call    0 returned 100%
      423:  149:  if (failed(applyFullConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
      419:  150:    signalPassFailure();
call    0 returned 100%
      423:  151:}
        -:  152:
        -:  153:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir33createConvertLinalgToStandardPassEv called 116716 returned 100% blocks executed 100%
   116716:  154:mlir::createConvertLinalgToStandardPass() {
   116716:  155:  return std::make_unique<ConvertLinalgToStandardPass>();
call    0 returned 100%
        -:  156:}
