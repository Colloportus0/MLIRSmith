        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Interfaces/InferIntRangeInterface.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRInferIntRangeInterface.dir/InferIntRangeInterface.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRInferIntRangeInterface.dir/InferIntRangeInterface.cpp.gcda
        -:    0:Runs:116177
        -:    1://===- InferIntRangeInterface.cpp -  Integer range inference interface ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/InferIntRangeInterface.h"
        -:   10:#include "mlir/IR/BuiltinTypes.h"
        -:   11:#include "mlir/Interfaces/InferIntRangeInterface.cpp.inc"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
function _ZNK4mlir17ConstantIntRangeseqERKS0_ called 752999 returned 100% blocks executed 91%
   752999:   15:bool ConstantIntRanges::operator==(const ConstantIntRanges &other) const {
   752999:   16:  return umin().getBitWidth() == other.umin().getBitWidth() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
  1505515:   17:         umin() == other.umin() && umax() == other.umax() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
  1505714:   18:         smin() == other.smin() && smax() == other.smax();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   19:}
        -:   20:
function _ZNK4mlir17ConstantIntRanges4uminEv called 65146 returned 100% blocks executed 100%
  752999*:   21:const APInt &ConstantIntRanges::umin() const { return uminVal; }
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:   22:
function _ZNK4mlir17ConstantIntRanges4umaxEv called 65146 returned 100% blocks executed 100%
  752800*:   23:const APInt &ConstantIntRanges::umax() const { return umaxVal; }
call    0 returned 100%
        -:   24:
function _ZNK4mlir17ConstantIntRanges4sminEv called 110234 returned 100% blocks executed 100%
  752715*:   25:const APInt &ConstantIntRanges::smin() const { return sminVal; }
call    0 returned 100%
        -:   26:
function _ZNK4mlir17ConstantIntRanges4smaxEv called 53376 returned 100% blocks executed 100%
  752715*:   27:const APInt &ConstantIntRanges::smax() const { return smaxVal; }
call    0 returned 100%
        -:   28:
function _ZN4mlir17ConstantIntRanges18getStorageBitwidthENS_4TypeE called 289374 returned 100% blocks executed 100%
   289374:   29:unsigned ConstantIntRanges::getStorageBitwidth(Type type) {
   289374:   30:  if (type.isIndex())
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
        -:   31:    return IndexType::kInternalStorageBitWidth;
   247749:   32:  if (auto integerType = type.dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
    20460:   33:    return integerType.getWidth();
call    0 returned 100%
        -:   34:  // Non-integer types have their bounds stored in width 0 `APInt`s.
   227289:   35:  return 0;
        -:   36:}
        -:   37:
function _ZN4mlir17ConstantIntRanges8maxRangeEj called 16000 returned 100% blocks executed 60%
    16000:   38:ConstantIntRanges ConstantIntRanges::maxRange(unsigned bitwidth) {
    16000:   39:  return fromUnsigned(APInt::getZero(bitwidth), APInt::getMaxValue(bitwidth));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -:   40:}
        -:   41:
function _ZN4mlir17ConstantIntRanges8constantERKN4llvm5APIntE called 14735 returned 100% blocks executed 100%
    14735:   42:ConstantIntRanges ConstantIntRanges::constant(const APInt &value) {
    14735:   43:  return {value, value, value, value};
call    0 returned 100%
        -:   44:}
        -:   45:
function _ZN4mlir17ConstantIntRanges5rangeERKN4llvm5APIntES4_b called 22915 returned 100% blocks executed 100%
    22915:   46:ConstantIntRanges ConstantIntRanges::range(const APInt &min, const APInt &max,
        -:   47:                                           bool isSigned) {
    22915:   48:  if (isSigned)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
     9487:   49:    return fromSigned(min, max);
call    0 returned 100%
    13428:   50:  return fromUnsigned(min, max);
call    0 returned 100%
        -:   51:}
        -:   52:
function _ZN4mlir17ConstantIntRanges10fromSignedERKN4llvm5APIntES4_ called 18579 returned 100% blocks executed 66%
    18579:   53:ConstantIntRanges ConstantIntRanges::fromSigned(const APInt &smin,
        -:   54:                                                const APInt &smax) {
    18579:   55:  unsigned int width = smin.getBitWidth();
call    0 returned 100%
    37158:   56:  APInt umin, umax;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    18579:   57:  if (smin.isNonNegative() == smax.isNonNegative()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 85% (fallthrough)
branch  3 taken 15%
    15840:   58:    umin = smin.ult(smax) ? smin : smax;
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
    15840:   59:    umax = smin.ugt(smax) ? smin : smax;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   60:  } else {
     2739:   61:    umin = APInt::getMinValue(width);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2739:   62:    umax = APInt::getMaxValue(width);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:  }
    18579:   64:  return {umin, umax, smin, smax};
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   65:}
        -:   66:
function _ZN4mlir17ConstantIntRanges12fromUnsignedERKN4llvm5APIntES4_ called 38770 returned 100% blocks executed 67%
    38770:   67:ConstantIntRanges ConstantIntRanges::fromUnsigned(const APInt &umin,
        -:   68:                                                  const APInt &umax) {
    38770:   69:  unsigned int width = umin.getBitWidth();
call    0 returned 100%
    77540:   70:  APInt smin, smax;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    38770:   71:  if (umin.isNonNegative() == umax.isNonNegative()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
    18710:   72:    smin = umin.slt(umax) ? umin : umax;
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
    18710:   73:    smax = umin.sgt(umax) ? umin : umax;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:  } else {
    20060:   75:    smin = APInt::getSignedMinValue(width);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    40120:   76:    smax = APInt::getSignedMaxValue(width);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   77:  }
    38770:   78:  return {umin, umax, smin, smax};
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   79:}
        -:   80:
        -:   81:ConstantIntRanges
function _ZNK4mlir17ConstantIntRanges10rangeUnionERKS0_ called 422593 returned 100% blocks executed 93%
   422593:   82:ConstantIntRanges::rangeUnion(const ConstantIntRanges &other) const {
        -:   83:  // "Not an integer" poisons everything and also cannot be fed to comparison
        -:   84:  // operators.
   422593:   85:  if (umin().getBitWidth() == 0)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
   289399:   86:    return *this;
call    0 returned 100%
   133194:   87:  if (other.umin().getBitWidth() == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:    return other;
call    0 never executed
        -:   89:
   133194:   90:  const APInt &uminUnion = umin().ult(other.umin()) ? umin() : other.umin();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   133194:   91:  const APInt &umaxUnion = umax().ugt(other.umax()) ? umax() : other.umax();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   133194:   92:  const APInt &sminUnion = smin().slt(other.smin()) ? smin() : other.smin();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   133194:   93:  const APInt &smaxUnion = smax().sgt(other.smax()) ? smax() : other.smax();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   94:
   133194:   95:  return {uminUnion, umaxUnion, sminUnion, smaxUnion};
call    0 returned 100%
        -:   96:}
        -:   97:
        -:   98:ConstantIntRanges
function _ZNK4mlir17ConstantIntRanges12intersectionERKS0_ called 9113 returned 100% blocks executed 86%
     9113:   99:ConstantIntRanges::intersection(const ConstantIntRanges &other) const {
        -:  100:  // "Not an integer" poisons everything and also cannot be fed to comparison
        -:  101:  // operators.
     9113:  102:  if (umin().getBitWidth() == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  103:    return *this;
call    0 never executed
     9113:  104:  if (other.umin().getBitWidth() == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  105:    return other;
call    0 never executed
        -:  106:
     9113:  107:  const APInt &uminIntersect = umin().ugt(other.umin()) ? umin() : other.umin();
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     9113:  108:  const APInt &umaxIntersect = umax().ult(other.umax()) ? umax() : other.umax();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9113:  109:  const APInt &sminIntersect = smin().sgt(other.smin()) ? smin() : other.smin();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9113:  110:  const APInt &smaxIntersect = smax().slt(other.smax()) ? smax() : other.smax();
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  111:
     9113:  112:  return {uminIntersect, umaxIntersect, sminIntersect, smaxIntersect};
call    0 returned 100%
        -:  113:}
        -:  114:
function _ZNK4mlir17ConstantIntRanges16getConstantValueEv called 495014 returned 100% blocks executed 69%
   495014:  115:Optional<APInt> ConstantIntRanges::getConstantValue() const {
        -:  116:  // Note: we need to exclude the trivially-equal width 0 values here.
   495014:  117:  if (umin() == umax() && umin().getBitWidth() != 0)
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
    66461:  118:    return umin();
branch  0 taken 100%
branch  1 taken 0%
   428553:  119:  if (smin() == smax() && smin().getBitWidth() != 0)
call    0 returned 100%
branch  1 taken 74%
branch  2 taken 26%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
    #####:  120:    return smin();
branch  0 never executed
branch  1 never executed
   428553:  121:  return None;
        -:  122:}
        -:  123:
function _ZN4mlirlsERN4llvm11raw_ostreamERKNS_17ConstantIntRangesE called 0 returned 0% blocks executed 0%
    #####:  124:raw_ostream &mlir::operator<<(raw_ostream &os, const ConstantIntRanges &range) {
    #####:  125:  return os << "unsigned : [" << range.umin() << ", " << range.umax()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  126:            << "] signed : [" << range.smin() << ", " << range.smax() << "]";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  127:}
