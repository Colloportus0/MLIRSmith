        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Linalg/Transforms/BubbleUpExtractSlice.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/BubbleUpExtractSlice.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/BubbleUpExtractSlice.cpp.gcda
        -:    0:Runs:116171
        -:    1://===- BubbleUpExtractSlice.cpp - bubble up tensor.extract_slice ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns that transforms linalg.<op> +
        -:   10:// tensor.extract_slice into tensor.extract_slice + linalg.<op> to reduce
        -:   11:// the computation for the linalg op.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   16:#include "mlir/Dialect/Arith/Utils/Utils.h"
        -:   17:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   18:#include "mlir/Dialect/Linalg/Passes.h"
        -:   19:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   20:#include "mlir/Dialect/Linalg/Utils/Utils.h"
        -:   21:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:using namespace mlir::linalg;
        -:   25:
        -:   26:namespace {
        -:   27:/// Bubble up extract_slice above Linalg operation.
        -:   28:///
        -:   29:/// A sequence of operations
        -:   30:///
        -:   31:/// ```mlir
        -:   32:/// %0 = linalg.<op> ... arg0, arg1, ...
        -:   33:/// %1 = tensor.extract_slice %0 ...
        -:   34:/// ```
        -:   35:///
        -:   36:/// can be replaced with
        -:   37:///
        -:   38:/// ```mlir
        -:   39:/// %0 = tensor.extract_slice %arg0
        -:   40:/// %1 = tensor.extract_slice %arg1
        -:   41:/// %2 = linalg.<op> ... %0, %1, ...
        -:   42:/// ```
        -:   43:///
        -:   44:/// This results in the reduce computation of the linalg operation.
        -:   45:///
        -:   46:struct BubbleUpExtractSliceOpPattern
        -:   47:    : OpRewritePattern<tensor::ExtractSliceOp> {
        -:   48:  using OpRewritePattern<tensor::ExtractSliceOp>::OpRewritePattern;
        -:   49:
function _ZNK12_GLOBAL__N_129BubbleUpExtractSliceOpPattern15matchAndRewriteEN4mlir6tensor14ExtractSliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   50:  LogicalResult matchAndRewrite(tensor::ExtractSliceOp sliceOp,
        -:   51:                                PatternRewriter &rewriter) const final {
    #####:   52:    Value source = sliceOp.getSource();
call    0 never executed
    #####:   53:    auto linalgOp = source.getDefiningOp<LinalgOp>();
call    0 never executed
    #####:   54:    if (!linalgOp) {
branch  0 never executed
branch  1 never executed
    #####:   55:      return rewriter.notifyMatchFailure(sliceOp,
    #####:   56:                                         "expected source to be linalg op");
call    0 never executed
        -:   57:    }
        -:   58:
        -:   59:    // TODO: we might relax this if we want heuristics to detect that all uses
        -:   60:    // are small portion of the output.
    #####:   61:    if (!linalgOp->hasOneUse()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:      return rewriter.notifyMatchFailure(sliceOp,
    #####:   63:                                         "expected single use of linalg op");
call    0 never executed
        -:   64:    }
        -:   65:
    #####:   66:    if (linalgOp.getNumDpsInits() != 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:      return rewriter.notifyMatchFailure(sliceOp,
    #####:   68:                                         "expected single output of linalg op");
call    0 never executed
        -:   69:    }
        -:   70:
    #####:   71:    if (!linalgOp.hasTensorSemantics()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:      return rewriter.notifyMatchFailure(sliceOp,
    #####:   73:                                         "expected tensor of linalg op");
call    0 never executed
        -:   74:    }
        -:   75:
    #####:   76:    if (!sliceOp.hasUnitStride())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   77:      return rewriter.notifyMatchFailure(sliceOp, "expected unit stride");
call    0 never executed
        -:   78:
    #####:   79:    if (sliceOp.getType().getRank() != sliceOp.getSourceType().getRank()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   80:      return rewriter.notifyMatchFailure(sliceOp, "expected no rank reduction");
call    0 never executed
        -:   81:    }
        -:   82:
    #####:   83:    OpOperand *outOperand = linalgOp.getDpsInitOperand(0);
call    0 never executed
    #####:   84:    AffineMap indexingMap = linalgOp.getMatchingIndexingMap(outOperand);
call    0 never executed
    #####:   85:    if (!indexingMap.isProjectedPermutation()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   86:      return rewriter.notifyMatchFailure(
    #####:   87:          sliceOp, "expected a projected permutation for output");
call    0 never executed
        -:   88:    }
        -:   89:
    #####:   90:    auto linalgLoc = linalgOp.getLoc();
call    0 never executed
    #####:   91:    SmallVector<OpFoldResult> allShapeSizes =
    #####:   92:        linalgOp.createFlatListOfOperandDims(rewriter, linalgLoc);
call    0 never executed
    #####:   93:    AffineMap shapeSizesToLoopsMap = linalgOp.getShapesToLoopsMap();
call    0 never executed
    #####:   94:    if (!shapeSizesToLoopsMap) {
branch  0 never executed
branch  1 never executed
    #####:   95:      return rewriter.notifyMatchFailure(
    #####:   96:          linalgOp, "failed to get loops map from shape sizes");
call    0 never executed
        -:   97:    }
    #####:   98:    SmallVector<OpFoldResult> sizeBounds =
call    0 never executed
        -:   99:        makeComposedFoldedMultiResultAffineApply(
    #####:  100:            rewriter, linalgLoc, shapeSizesToLoopsMap, allShapeSizes);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  101:
        -:  102:    // The offsets and sizes from the slice operation only give you the tile
        -:  103:    // size of the output. Use that compute the tile sizes and offsets of the
        -:  104:    // loops. For loops not used to access the output, set the tile sizes to
        -:  105:    // loop bounds and set the offset to 0.
    #####:  106:    SmallVector<OpFoldResult> tileOffsets(sizeBounds.size(),
    #####:  107:                                          rewriter.getIndexAttr(0));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  108:    SmallVector<OpFoldResult> tileSizes = sizeBounds;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  109:    for (auto const &result : enumerate(indexingMap.getResults())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:      unsigned position = result.value().cast<AffineDimExpr>().getPosition();
call    0 never executed
call    1 never executed
    #####:  111:      tileOffsets[position] = sliceOp.getMixedOffsets()[result.index()];
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  112:      tileSizes[position] = sliceOp.getMixedSizes()[result.index()];
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  113:    }
        -:  114:
    #####:  115:    SmallVector<Value> valuesToTile = linalgOp->getOperands();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  116:    SmallVector<Value> tiledOperands =
call    0 never executed
        -:  117:        makeTiledShapes(rewriter, linalgLoc, linalgOp, valuesToTile,
        -:  118:                        tileOffsets, tileSizes, sizeBounds,
    #####:  119:                        /*omitPartialTileCheck=*/true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  120:
    #####:  121:    SmallVector<Type, 4> resultTensorTypes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  122:    for (OpOperand *opOperand : linalgOp.getDpsInitOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  123:      resultTensorTypes.push_back(
    #####:  124:          tiledOperands[opOperand->getOperandNumber()].getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  125:
    #####:  126:    Operation *newOp =
call    0 never executed
    #####:  127:        linalgOp.clone(rewriter, linalgLoc, resultTensorTypes, tiledOperands);
call    0 never executed
call    1 never executed
    #####:  128:    rewriter.replaceOp(sliceOp, newOp->getResults());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  129:    return success();
branch  0 never executed
branch  1 never executed
        -:  130:  }
        -:  131:};
        -:  132:} // namespace
        -:  133:
function _ZN4mlir6linalg38populateBubbleUpExtractSliceOpPatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:  134:void mlir::linalg::populateBubbleUpExtractSliceOpPatterns(
        -:  135:    RewritePatternSet &patterns) {
    #####:  136:  auto *context = patterns.getContext();
call    0 never executed
    #####:  137:  patterns.add<BubbleUpExtractSliceOpPattern>(context);
call    0 never executed
    #####:  138:}
