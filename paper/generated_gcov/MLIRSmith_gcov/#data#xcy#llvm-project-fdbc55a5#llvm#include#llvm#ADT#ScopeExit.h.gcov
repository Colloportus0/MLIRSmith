        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/llvm/include/llvm/ADT/ScopeExit.h
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/DialectConversion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/DialectConversion.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- llvm/ADT/ScopeExit.h - Execute code at scope exit --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:///
        -:    9:/// \file
        -:   10:/// This file defines the make_scope_exit function, which executes user-defined
        -:   11:/// cleanup logic at scope exit.
        -:   12:///
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#ifndef LLVM_ADT_SCOPEEXIT_H
        -:   16:#define LLVM_ADT_SCOPEEXIT_H
        -:   17:
        -:   18:#include "llvm/Support/Compiler.h"
        -:   19:
        -:   20:#include <type_traits>
        -:   21:#include <utility>
        -:   22:
        -:   23:namespace llvm {
        -:   24:namespace detail {
        -:   25:
        -:   26:template <typename Callable> class scope_exit {
        -:   27:  Callable ExitFunction;
        -:   28:  bool Engaged = true; // False once moved-from or release()d.
        -:   29:
        -:   30:public:
        -:   31:  template <typename Fp>
   546214:   32:  explicit scope_exit(Fp &&F) : ExitFunction(std::forward<Fp>(F)) {}
        -:   33:
        -:   34:  scope_exit(scope_exit &&Rhs)
        -:   35:      : ExitFunction(std::move(Rhs.ExitFunction)), Engaged(Rhs.Engaged) {
        -:   36:    Rhs.release();
        -:   37:  }
        -:   38:  scope_exit(const scope_exit &) = delete;
        -:   39:  scope_exit &operator=(scope_exit &&) = delete;
        -:   40:  scope_exit &operator=(const scope_exit &) = delete;
        -:   41:
        -:   42:  void release() { Engaged = false; }
        -:   43:
   546215:   44:  ~scope_exit() {
        -:   45:    if (Engaged)
   546215:   46:      ExitFunction();
call    0 returned 100%
   546215:   47:  }
        -:   48:};
        -:   49:
        -:   50:} // end namespace detail
        -:   51:
        -:   52:// Keeps the callable object that is passed in, and execute it at the
        -:   53:// destruction of the returned object (usually at the scope exit where the
        -:   54:// returned object is kept).
        -:   55://
        -:   56:// Interface is specified by p0052r2.
        -:   57:template <typename Callable>
        -:   58:[[nodiscard]] detail::scope_exit<std::decay_t<Callable>>
   546214:   59:make_scope_exit(Callable &&F) {
   546214:   60:  return detail::scope_exit<std::decay_t<Callable>>(std::forward<Callable>(F));
        -:   61:}
        -:   62:
        -:   63:} // end namespace llvm
        -:   64:
        -:   65:#endif
