        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/PDLInterp/IR/PDLInterp.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/PDLInterp/IR/CMakeFiles/obj.MLIRPDLInterpDialect.dir/PDLInterp.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/PDLInterp/IR/CMakeFiles/obj.MLIRPDLInterpDialect.dir/PDLInterp.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- PDLInterp.cpp - PDL Interpreter Dialect ------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
        -:   10:#include "mlir/Dialect/PDL/IR/PDLTypes.h"
        -:   11:#include "mlir/IR/BuiltinTypes.h"
        -:   12:#include "mlir/IR/DialectImplementation.h"
        -:   13:#include "mlir/IR/FunctionImplementation.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:using namespace mlir::pdl_interp;
        -:   17:
        -:   18:#include "mlir/Dialect/PDLInterp/IR/PDLInterpOpsDialect.cpp.inc"
        -:   19:
        -:   20://===----------------------------------------------------------------------===//
        -:   21:// PDLInterp Dialect
        -:   22://===----------------------------------------------------------------------===//
        -:   23:
function _ZN4mlir10pdl_interp16PDLInterpDialect10initializeEv called 0 returned 0% blocks executed 0%
    1198*:   24:void PDLInterpDialect::initialize() {
    1198*:   25:  addOperations<
        -:   26:#define GET_OP_LIST
        -:   27:#include "mlir/Dialect/PDLInterp/IR/PDLInterpOps.cpp.inc"
    1198*:   28:      >();
call    0 never executed
call    1 returned 100%
    #####:   29:}
        -:   30:
        -:   31:template <typename OpT>
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
    #####:   36:  size_t numValues = op.getCaseValues().size();
    #####:   37:  if (numDests != numValues) {
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
_Z14verifySwitchOpIN4mlir10pdl_interp13SwitchTypesOpEENS0_13LogicalResultET_:
function _Z14verifySwitchOpIN4mlir10pdl_interp13SwitchTypesOpEENS0_13LogicalResultET_ called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
call    0 never executed
call    1 never executed
    #####:   36:  size_t numValues = op.getCaseValues().size();
call    0 never executed
    #####:   37:  if (numDests != numValues) {
branch  0 never executed
branch  1 never executed
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
_Z14verifySwitchOpIN4mlir10pdl_interp12SwitchTypeOpEENS0_13LogicalResultET_:
function _Z14verifySwitchOpIN4mlir10pdl_interp12SwitchTypeOpEENS0_13LogicalResultET_ called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
call    0 never executed
call    1 never executed
    #####:   36:  size_t numValues = op.getCaseValues().size();
call    0 never executed
    #####:   37:  if (numDests != numValues) {
branch  0 never executed
branch  1 never executed
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
_Z14verifySwitchOpIN4mlir10pdl_interp19SwitchResultCountOpEENS0_13LogicalResultET_:
function _Z14verifySwitchOpIN4mlir10pdl_interp19SwitchResultCountOpEENS0_13LogicalResultET_ called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
call    0 never executed
call    1 never executed
    #####:   36:  size_t numValues = op.getCaseValues().size();
call    0 never executed
    #####:   37:  if (numDests != numValues) {
branch  0 never executed
branch  1 never executed
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
_Z14verifySwitchOpIN4mlir10pdl_interp21SwitchOperationNameOpEENS0_13LogicalResultET_:
function _Z14verifySwitchOpIN4mlir10pdl_interp21SwitchOperationNameOpEENS0_13LogicalResultET_ called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
call    0 never executed
call    1 never executed
    #####:   36:  size_t numValues = op.getCaseValues().size();
call    0 never executed
    #####:   37:  if (numDests != numValues) {
branch  0 never executed
branch  1 never executed
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
_Z14verifySwitchOpIN4mlir10pdl_interp20SwitchOperandCountOpEENS0_13LogicalResultET_:
function _Z14verifySwitchOpIN4mlir10pdl_interp20SwitchOperandCountOpEENS0_13LogicalResultET_ called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
call    0 never executed
call    1 never executed
    #####:   36:  size_t numValues = op.getCaseValues().size();
call    0 never executed
    #####:   37:  if (numDests != numValues) {
branch  0 never executed
branch  1 never executed
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
_Z14verifySwitchOpIN4mlir10pdl_interp17SwitchAttributeOpEENS0_13LogicalResultET_:
function _Z14verifySwitchOpIN4mlir10pdl_interp17SwitchAttributeOpEENS0_13LogicalResultET_ called 0 returned 0% blocks executed 0%
    #####:   32:static LogicalResult verifySwitchOp(OpT op) {
        -:   33:  // Verify that the number of case destinations matches the number of case
        -:   34:  // values.
    #####:   35:  size_t numDests = op.getCases().size();
call    0 never executed
call    1 never executed
    #####:   36:  size_t numValues = op.getCaseValues().size();
call    0 never executed
    #####:   37:  if (numDests != numValues) {
branch  0 never executed
branch  1 never executed
        -:   38:    return op.emitOpError(
        -:   39:               "expected number of cases to match the number of case "
        -:   40:               "values, got ")
    #####:   41:           << numDests << " but expected " << numValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   42:  }
    #####:   43:  return success();
        -:   44:}
------------------
        -:   45:
        -:   46://===----------------------------------------------------------------------===//
        -:   47:// pdl_interp::CreateOperationOp
        -:   48://===----------------------------------------------------------------------===//
        -:   49:
function _ZN4mlir10pdl_interp17CreateOperationOp6verifyEv called 311 returned 100% blocks executed 15%
      311:   50:LogicalResult CreateOperationOp::verify() {
     311*:   51:  if (!getInferredResultTypes())
call    0 returned 100%
      310:   52:    return success();
    #####:   53:  if (!getInputResultTypes().empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:    return emitOpError("with inferred results cannot also have "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   55:                       "explicit result types");
call    0 never executed
        -:   56:  }
    #####:   57:  OperationName opName(getName(), getContext());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   58:  if (!opName.hasInterface<InferTypeOpInterface>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:    return emitOpError()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   60:           << "has inferred results, but the created operation '" << opName
call    0 never executed
call    1 never executed
        -:   61:           << "' does not support result type inference (or is not "
    #####:   62:              "registered)";
call    0 never executed
        -:   63:  }
    #####:   64:  return success();
        -:   65:}
        -:   66:
function _ZL32parseCreateOperationOpAttributesRN4mlir11OpAsmParserERN4llvm15SmallVectorImplINS0_17UnresolvedOperandEEERNS_9ArrayAttrE called 0 returned 0% blocks executed 0%
    #####:   67:static ParseResult parseCreateOperationOpAttributes(
        -:   68:    OpAsmParser &p,
        -:   69:    SmallVectorImpl<OpAsmParser::UnresolvedOperand> &attrOperands,
        -:   70:    ArrayAttr &attrNamesAttr) {
    #####:   71:  Builder &builder = p.getBuilder();
call    0 never executed
    #####:   72:  SmallVector<Attribute, 4> attrNames;
call    0 never executed
    #####:   73:  if (succeeded(p.parseOptionalLBrace())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
function _ZZL32parseCreateOperationOpAttributesRN4mlir11OpAsmParserERN4llvm15SmallVectorImplINS0_17UnresolvedOperandEEERNS_9ArrayAttrEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:   74:    auto parseOperands = [&]() {
    #####:   75:      StringAttr nameAttr;
    #####:   76:      OpAsmParser::UnresolvedOperand operand;
call    0 never executed
    #####:   77:      if (p.parseAttribute(nameAttr) || p.parseEqual() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   78:          p.parseOperand(operand))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:        return failure();
    #####:   80:      attrNames.push_back(nameAttr);
call    0 never executed
    #####:   81:      attrOperands.push_back(operand);
call    0 never executed
    #####:   82:      return success();
    #####:   83:    };
    #####:   84:    if (p.parseCommaSeparatedList(parseOperands) || p.parseRBrace())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   85:      return failure();
        -:   86:  }
    #####:   87:  attrNamesAttr = builder.getArrayAttr(attrNames);
call    0 never executed
    #####:   88:  return success();
        -:   89:}
        -:   90:
        -:   91:static void printCreateOperationOpAttributes(OpAsmPrinter &p,
        -:   92:                                             CreateOperationOp op,
        -:   93:                                             OperandRange attrArgs,
        -:   94:                                             ArrayAttr attrNames) {
        -:   95:  if (attrNames.empty())
        -:   96:    return;
        -:   97:  p << " {";
        -:   98:  interleaveComma(llvm::seq<int>(0, attrNames.size()), p,
function _ZZL32printCreateOperationOpAttributesRN4mlir12OpAsmPrinterENS_10pdl_interp17CreateOperationOpENS_12OperandRangeENS_9ArrayAttrEENKUliE_clEi called 0 returned 0% blocks executed 0%
    #####:   99:                  [&](int i) { p << attrNames[i] << " = " << attrArgs[i]; });
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  100:  p << '}';
        -:  101:}
        -:  102:
function _ZL29parseCreateOperationOpResultsRN4mlir11OpAsmParserERN4llvm15SmallVectorImplINS0_17UnresolvedOperandEEERNS3_INS_4TypeEEERNS_8UnitAttrE called 0 returned 0% blocks executed 0%
    #####:  103:static ParseResult parseCreateOperationOpResults(
        -:  104:    OpAsmParser &p,
        -:  105:    SmallVectorImpl<OpAsmParser::UnresolvedOperand> &resultOperands,
        -:  106:    SmallVectorImpl<Type> &resultTypes, UnitAttr &inferredResultTypes) {
    #####:  107:  if (failed(p.parseOptionalArrow()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:    return success();
        -:  109:
        -:  110:  // Handle the case of inferred results.
    #####:  111:  if (succeeded(p.parseOptionalLess())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:    if (p.parseKeyword("inferred") || p.parseGreater())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  113:      return failure();
    #####:  114:    inferredResultTypes = p.getBuilder().getUnitAttr();
call    0 never executed
call    1 never executed
    #####:  115:    return success();
        -:  116:  }
        -:  117:
        -:  118:  // Otherwise, parse the explicit results.
    #####:  119:  return failure(p.parseLParen() || p.parseOperandList(resultOperands) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  120:                 p.parseColonTypeList(resultTypes) || p.parseRParen());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  121:}
        -:  122:
        -:  123:static void printCreateOperationOpResults(OpAsmPrinter &p, CreateOperationOp op,
        -:  124:                                          OperandRange resultOperands,
        -:  125:                                          TypeRange resultTypes,
        -:  126:                                          UnitAttr inferredResultTypes) {
        -:  127:  // Handle the case of inferred results.
        -:  128:  if (inferredResultTypes) {
        -:  129:    p << " -> <inferred>";
        -:  130:    return;
        -:  131:  }
        -:  132:
        -:  133:  // Otherwise, handle the explicit results.
        -:  134:  if (!resultTypes.empty())
        -:  135:    p << " -> (" << resultOperands << " : " << resultTypes << ")";
        -:  136:}
        -:  137:
        -:  138://===----------------------------------------------------------------------===//
        -:  139:// pdl_interp::ForEachOp
        -:  140://===----------------------------------------------------------------------===//
        -:  141:
function _ZN4mlir10pdl_interp9ForEachOp5buildERNS_9OpBuilderERNS_14OperationStateENS_5ValueEPNS_5BlockEb called 0 returned 0% blocks executed 0%
    #####:  142:void ForEachOp::build(::mlir::OpBuilder &builder, ::mlir::OperationState &state,
        -:  143:                      Value range, Block *successor, bool initLoop) {
    #####:  144:  build(builder, state, range, successor);
call    0 never executed
    #####:  145:  if (initLoop) {
branch  0 never executed
branch  1 never executed
        -:  146:    // Create the block and the loop variable.
        -:  147:    // FIXME: Allow passing in a proper location for the loop variable.
    #####:  148:    auto rangeType = range.getType().cast<pdl::RangeType>();
call    0 never executed
    #####:  149:    state.regions.front()->emplaceBlock();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  150:    state.regions.front()->addArgument(rangeType.getElementType(),
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  151:                                       state.location);
call    0 never executed
call    1 never executed
        -:  152:  }
    #####:  153:}
        -:  154:
function _ZN4mlir10pdl_interp9ForEachOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  155:ParseResult ForEachOp::parse(OpAsmParser &parser, OperationState &result) {
        -:  156:  // Parse the loop variable followed by type.
    #####:  157:  OpAsmParser::Argument loopVariable;
call    0 never executed
    #####:  158:  OpAsmParser::UnresolvedOperand operandInfo;
    #####:  159:  if (parser.parseArgument(loopVariable, /*allowType=*/true) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  160:      parser.parseKeyword("in", " after loop variable") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  161:      // Parse the operand (value range).
    #####:  162:      parser.parseOperand(operandInfo))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  163:    return failure();
        -:  164:
        -:  165:  // Resolve the operand.
    #####:  166:  Type rangeType = pdl::RangeType::get(loopVariable.type);
call    0 never executed
    #####:  167:  if (parser.resolveOperand(operandInfo, rangeType, result.operands))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:    return failure();
        -:  169:
        -:  170:  // Parse the body region.
    #####:  171:  Region *body = result.addRegion();
call    0 never executed
    #####:  172:  Block *successor;
    #####:  173:  if (parser.parseRegion(*body, loopVariable) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  174:      parser.parseOptionalAttrDict(result.attributes) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  175:      // Parse the successor.
    #####:  176:      parser.parseArrow() || parser.parseSuccessor(successor))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  177:    return failure();
        -:  178:
    #####:  179:  result.addSuccessors(successor);
call    0 never executed
    #####:  180:  return success();
        -:  181:}
        -:  182:
function _ZN4mlir10pdl_interp9ForEachOp5printERNS_12OpAsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  183:void ForEachOp::print(OpAsmPrinter &p) {
    #####:  184:  BlockArgument arg = getLoopVariable();
call    0 never executed
    #####:  185:  p << ' ' << arg << " : " << arg.getType() << " in " << getValues() << ' ';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  186:  p.printRegion(getRegion(), /*printEntryBlockArgs=*/false);
call    0 never executed
call    1 never executed
    #####:  187:  p.printOptionalAttrDict((*this)->getAttrs());
call    0 never executed
call    1 never executed
    #####:  188:  p << " -> ";
call    0 never executed
    #####:  189:  p.printSuccessor(getSuccessor());
call    0 never executed
call    1 never executed
    #####:  190:}
        -:  191:
function _ZN4mlir10pdl_interp9ForEachOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  192:LogicalResult ForEachOp::verify() {
        -:  193:  // Verify that the operation has exactly one argument.
    #####:  194:  if (getRegion().getNumArguments() != 1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  195:    return emitOpError("requires exactly one argument");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  196:
        -:  197:  // Verify that the loop variable and the operand (value range)
        -:  198:  // have compatible types.
    #####:  199:  BlockArgument arg = getLoopVariable();
call    0 never executed
    #####:  200:  Type rangeType = pdl::RangeType::get(arg.getType());
call    0 never executed
    #####:  201:  if (rangeType != getValues().getType())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  202:    return emitOpError("operand must be a range of loop variable type");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  203:
    #####:  204:  return success();
        -:  205:}
        -:  206:
        -:  207://===----------------------------------------------------------------------===//
        -:  208:// pdl_interp::FuncOp
        -:  209://===----------------------------------------------------------------------===//
        -:  210:
function _ZN4mlir10pdl_interp6FuncOp5buildERNS_9OpBuilderERNS_14OperationStateEN4llvm9StringRefENS_12FunctionTypeENS6_8ArrayRefINS_14NamedAttributeEEE called 894 returned 100% blocks executed 100%
      894:  211:void FuncOp::build(OpBuilder &builder, OperationState &state, StringRef name,
        -:  212:                   FunctionType type, ArrayRef<NamedAttribute> attrs) {
      894:  213:  buildWithEntryBlock(builder, state, name, type, attrs, type.getInputs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      894:  214:}
        -:  215:
function _ZN4mlir10pdl_interp6FuncOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  216:ParseResult FuncOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  217:  auto buildFuncType =
function _ZZN4mlir10pdl_interp6FuncOp5parseERNS_11OpAsmParserERNS_14OperationStateEENKUlRNS_7BuilderEN4llvm8ArrayRefINS_4TypeEEESB_NS_23function_interface_impl12VariadicFlagERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_clES7_SB_SB_SD_SK_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  218:      [](Builder &builder, ArrayRef<Type> argTypes, ArrayRef<Type> results,
        -:  219:         function_interface_impl::VariadicFlag,
    #####:  220:         std::string &) { return builder.getFunctionType(argTypes, results); };
call    0 never executed
call    1 never executed
call    2 never executed
        -:  221:
    #####:  222:  return function_interface_impl::parseFunctionOp(
    #####:  223:      parser, result, /*allowVariadic=*/false, buildFuncType);
call    0 never executed
        -:  224:}
        -:  225:
function _ZN4mlir10pdl_interp6FuncOp5printERNS_12OpAsmPrinterE called 791 returned 100% blocks executed 100%
      791:  226:void FuncOp::print(OpAsmPrinter &p) {
      791:  227:  function_interface_impl::printFunctionOp(p, *this, /*isVariadic=*/false);
call    0 returned 100%
call    1 returned 100%
      791:  228:}
        -:  229:
        -:  230://===----------------------------------------------------------------------===//
        -:  231:// pdl_interp::GetValueTypeOp
        -:  232://===----------------------------------------------------------------------===//
        -:  233:
        -:  234:/// Given the result type of a `GetValueTypeOp`, return the expected input type.
function _ZL26getGetValueTypeOpValueTypeN4mlir4TypeE called 309 returned 101% blocks executed 88%
      309:  235:static Type getGetValueTypeOpValueType(Type type) {
      309:  236:  Type valueTy = pdl::ValueType::get(type.getContext());
call    0 returned 100%
call    1 returned 100%
     309*:  237:  return type.isa<pdl::RangeType>() ? pdl::RangeType::get(valueTy) : valueTy;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 101%
        -:  238:}
        -:  239:
        -:  240://===----------------------------------------------------------------------===//
        -:  241:// pdl_interp::SwitchAttributeOp
        -:  242://===----------------------------------------------------------------------===//
        -:  243:
function _ZN4mlir10pdl_interp17SwitchAttributeOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  244:LogicalResult SwitchAttributeOp::verify() { return verifySwitchOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  245:
        -:  246://===----------------------------------------------------------------------===//
        -:  247:// pdl_interp::SwitchOperandCountOp
        -:  248://===----------------------------------------------------------------------===//
        -:  249:
function _ZN4mlir10pdl_interp20SwitchOperandCountOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  250:LogicalResult SwitchOperandCountOp::verify() { return verifySwitchOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  251:
        -:  252://===----------------------------------------------------------------------===//
        -:  253:// pdl_interp::SwitchOperationNameOp
        -:  254://===----------------------------------------------------------------------===//
        -:  255:
function _ZN4mlir10pdl_interp21SwitchOperationNameOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  256:LogicalResult SwitchOperationNameOp::verify() { return verifySwitchOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  257:
        -:  258://===----------------------------------------------------------------------===//
        -:  259:// pdl_interp::SwitchResultCountOp
        -:  260://===----------------------------------------------------------------------===//
        -:  261:
function _ZN4mlir10pdl_interp19SwitchResultCountOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  262:LogicalResult SwitchResultCountOp::verify() { return verifySwitchOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  263:
        -:  264://===----------------------------------------------------------------------===//
        -:  265:// pdl_interp::SwitchTypeOp
        -:  266://===----------------------------------------------------------------------===//
        -:  267:
function _ZN4mlir10pdl_interp12SwitchTypeOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  268:LogicalResult SwitchTypeOp::verify() { return verifySwitchOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  269:
        -:  270://===----------------------------------------------------------------------===//
        -:  271:// pdl_interp::SwitchTypesOp
        -:  272://===----------------------------------------------------------------------===//
        -:  273:
function _ZN4mlir10pdl_interp13SwitchTypesOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  274:LogicalResult SwitchTypesOp::verify() { return verifySwitchOp(*this); }
call    0 never executed
call    1 never executed
call    2 never executed
        -:  275:
        -:  276://===----------------------------------------------------------------------===//
        -:  277:// TableGen Auto-Generated Op and Interface Definitions
        -:  278://===----------------------------------------------------------------------===//
        -:  279:
        -:  280:#define GET_OP_CLASSES
        -:  281:#include "mlir/Dialect/PDLInterp/IR/PDLInterpOps.cpp.inc"
