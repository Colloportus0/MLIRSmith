        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/AffineMapDetail.h
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/MLIRContext.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/MLIRContext.cpp.gcda
        -:    0:Runs:116164
        -:    1://===- AffineMapDetail.h - MLIR Affine Map details Class --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This holds implementation details of AffineMap.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef AFFINEMAPDETAIL_H_
        -:   14:#define AFFINEMAPDETAIL_H_
        -:   15:
        -:   16:#include "mlir/IR/AffineExpr.h"
        -:   17:#include "mlir/IR/AffineMap.h"
        -:   18:#include "mlir/Support/StorageUniquer.h"
        -:   19:#include "llvm/ADT/ArrayRef.h"
        -:   20:#include "llvm/Support/TrailingObjects.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:namespace detail {
        -:   24:
        -:   25:struct AffineMapStorage final
        -:   26:    : public StorageUniquer::BaseStorage,
        -:   27:      public llvm::TrailingObjects<AffineMapStorage, AffineExpr> {
        -:   28:  /// The hash key used for uniquing.
        -:   29:  using KeyTy = std::tuple<unsigned, unsigned, ArrayRef<AffineExpr>>;
        -:   30:
        -:   31:  unsigned numDims;
        -:   32:  unsigned numSymbols;
        -:   33:  unsigned numResults;
        -:   34:
        -:   35:  MLIRContext *context;
        -:   36:
        -:   37:  /// The affine expressions for this (multi-dimensional) map.
4656754667:   38:  ArrayRef<AffineExpr> results() const {
4656754667:   39:    return {getTrailingObjects<AffineExpr>(), numResults};
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   40:  }
        -:   41:
function _ZNK4mlir6detail16AffineMapStorageeqERKSt5tupleIJjjN4llvm8ArrayRefINS_10AffineExprEEEEE called 5806567615 returned 100% blocks executed 100%
5806567615:   42:  bool operator==(const KeyTy &key) const {
5806567615:   43:    return std::get<0>(key) == numDims && std::get<1>(key) == numSymbols &&
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
9007725150:   44:           std::get<2>(key) == results();
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        -:   45:  }
        -:   46:
        -:   47:  // Constructs an AffineMapStorage from a key. The context must be set by the
        -:   48:  // caller.
        -:   49:  static AffineMapStorage *
function _ZN4mlir6detail16AffineMapStorage9constructERNS_14StorageUniquer16StorageAllocatorERKSt5tupleIJjjN4llvm8ArrayRefINS_10AffineExprEEEEE called 13509336 returned 100% blocks executed 100%
 13509336:   50:  construct(StorageUniquer::StorageAllocator &allocator, const KeyTy &key) {
 13509336:   51:    auto results = std::get<2>(key);
call    0 returned 100%
 13509336:   52:    auto byteSize =
 13509336:   53:        AffineMapStorage::totalSizeToAlloc<AffineExpr>(results.size());
call    0 returned 100%
 13509336:   54:    auto *rawMem = allocator.allocate(byteSize, alignof(AffineMapStorage));
call    0 returned 100%
 13509336:   55:    auto *res = new (rawMem) AffineMapStorage();
 13509336:   56:    res->numDims = std::get<0>(key);
 13509336:   57:    res->numSymbols = std::get<1>(key);
 13509336:   58:    res->numResults = results.size();
 13509336:   59:    std::uninitialized_copy(results.begin(), results.end(),
        -:   60:                            res->getTrailingObjects<AffineExpr>());
 13509336:   61:    return res;
        -:   62:  }
        -:   63:};
        -:   64:
        -:   65:} // namespace detail
        -:   66:} // namespace mlir
        -:   67:
        -:   68:#endif // AFFINEMAPDETAIL_H_
