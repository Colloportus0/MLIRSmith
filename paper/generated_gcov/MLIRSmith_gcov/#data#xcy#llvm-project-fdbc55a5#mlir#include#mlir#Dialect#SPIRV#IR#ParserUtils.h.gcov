        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/SPIRV/IR/ParserUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVOps.cpp.gcda
        -:    0:Runs:116161
        -:    1://===------------ ParserUtils.h - Parse text to SPIR-V ops ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines utilities used for parsing types and ops for SPIR-V
        -:   10:// dialect.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_DIALECT_SPIRV_IR_PARSERUTILS_H_
        -:   15:#define MLIR_DIALECT_SPIRV_IR_PARSERUTILS_H_
        -:   16:
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVAttributes.h"
        -:   18:#include "mlir/IR/OpDefinition.h"
        -:   19:#include "mlir/IR/OpImplementation.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:
        -:   23:/// Parses the next keyword in `parser` as an enumerant of the given
        -:   24:/// `EnumClass`.
        -:   25:template <typename EnumClass, typename ParserType>
        -:   26:static ParseResult
    #####:   27:parseEnumKeywordAttr(EnumClass &value, ParserType &parser,
        -:   28:                     StringRef attrName = spirv::attributeName<EnumClass>()) {
    #####:   29:  StringRef keyword;
    #####:   30:  SmallVector<NamedAttribute, 1> attr;
    #####:   31:  auto loc = parser.getCurrentLocation();
    #####:   32:  if (parser.parseKeyword(&keyword))
    #####:   33:    return failure();
    #####:   34:  if (Optional<EnumClass> attr = spirv::symbolizeEnum<EnumClass>(keyword)) {
    #####:   35:    value = *attr;
    #####:   36:    return success();
        -:   37:  }
        -:   38:  return parser.emitError(loc, "invalid ")
    #####:   39:         << attrName << " attribute specification: " << keyword;
        -:   40:}
        -:   41:
        -:   42:} // namespace mlir
        -:   43:
        -:   44:#endif // MLIR_DIALECT_SPIRV_IR_PARSERUTILS_H_
