        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Analysis/Presburger/SlowMPInt.h
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcda
        -:    0:Runs:116175
        -:    1://===- SlowMPInt.h - MLIR SlowMPInt Class -----------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This is a simple class to represent arbitrary precision signed integers.
        -:   10:// Unlike APInt, one does not have to specify a fixed maximum size, and the
        -:   11:// integer can take on any arbitrary values.
        -:   12://
        -:   13:// This class is to be used as a fallback slow path for the MPInt class, and
        -:   14:// is not intended to be used directly.
        -:   15://
        -:   16://===----------------------------------------------------------------------===//
        -:   17:
        -:   18:#ifndef MLIR_ANALYSIS_PRESBURGER_SLOWMPINT_H
        -:   19:#define MLIR_ANALYSIS_PRESBURGER_SLOWMPINT_H
        -:   20:
        -:   21:#include "mlir/Support/MathExtras.h"
        -:   22:#include "llvm/ADT/APInt.h"
        -:   23:#include "llvm/ADT/Hashing.h"
        -:   24:#include "llvm/Support/raw_ostream.h"
        -:   25:
        -:   26:namespace mlir {
        -:   27:namespace presburger {
        -:   28:namespace detail {
        -:   29:
        -:   30:/// A simple class providing multi-precision arithmetic. Internally, it stores
        -:   31:/// an APInt, whose width is doubled whenever an overflow occurs at a certain
        -:   32:/// width. The default constructor sets the initial width to 64. SlowMPInt is
        -:   33:/// primarily intended to be used as a slow fallback path for the upcoming MPInt
        -:   34:/// class.
    #####:   35:class SlowMPInt {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
branch 55 never executed
branch 56 never executed
branch 57 never executed
branch 58 never executed
branch 59 never executed
branch 60 never executed
branch 61 never executed
branch 62 never executed
branch 63 never executed
branch 64 never executed
branch 65 never executed
branch 66 never executed
branch 67 never executed
branch 68 never executed
branch 69 never executed
branch 70 never executed
branch 71 never executed
branch 72 never executed
branch 73 never executed
branch 74 never executed
branch 75 never executed
branch 76 never executed
branch 77 never executed
branch 78 never executed
branch 79 never executed
branch 80 never executed
branch 81 never executed
branch 82 never executed
branch 83 never executed
branch 84 never executed
branch 85 never executed
branch 86 never executed
branch 87 never executed
branch 88 never executed
branch 89 never executed
branch 90 never executed
branch 91 never executed
branch 92 never executed
branch 93 never executed
branch 94 never executed
branch 95 never executed
branch 96 never executed
branch 97 never executed
branch 98 never executed
branch 99 never executed
        -:   36:private:
        -:   37:  llvm::APInt val;
        -:   38:
        -:   39:public:
        -:   40:  explicit SlowMPInt(int64_t val);
        -:   41:  SlowMPInt();
        -:   42:  explicit SlowMPInt(const llvm::APInt &val);
        -:   43:  SlowMPInt &operator=(int64_t val);
        -:   44:  explicit operator int64_t() const;
        -:   45:  SlowMPInt operator-() const;
        -:   46:  bool operator==(const SlowMPInt &o) const;
        -:   47:  bool operator!=(const SlowMPInt &o) const;
        -:   48:  bool operator>(const SlowMPInt &o) const;
        -:   49:  bool operator<(const SlowMPInt &o) const;
        -:   50:  bool operator<=(const SlowMPInt &o) const;
        -:   51:  bool operator>=(const SlowMPInt &o) const;
        -:   52:  SlowMPInt operator+(const SlowMPInt &o) const;
        -:   53:  SlowMPInt operator-(const SlowMPInt &o) const;
        -:   54:  SlowMPInt operator*(const SlowMPInt &o) const;
        -:   55:  SlowMPInt operator/(const SlowMPInt &o) const;
        -:   56:  SlowMPInt operator%(const SlowMPInt &o) const;
        -:   57:  SlowMPInt &operator+=(const SlowMPInt &o);
        -:   58:  SlowMPInt &operator-=(const SlowMPInt &o);
        -:   59:  SlowMPInt &operator*=(const SlowMPInt &o);
        -:   60:  SlowMPInt &operator/=(const SlowMPInt &o);
        -:   61:  SlowMPInt &operator%=(const SlowMPInt &o);
        -:   62:
        -:   63:  SlowMPInt &operator++();
        -:   64:  SlowMPInt &operator--();
        -:   65:
        -:   66:  friend SlowMPInt abs(const SlowMPInt &x);
        -:   67:  friend SlowMPInt ceilDiv(const SlowMPInt &lhs, const SlowMPInt &rhs);
        -:   68:  friend SlowMPInt floorDiv(const SlowMPInt &lhs, const SlowMPInt &rhs);
        -:   69:  /// The operands must be non-negative for gcd.
        -:   70:  friend SlowMPInt gcd(const SlowMPInt &a, const SlowMPInt &b);
        -:   71:
        -:   72:  /// Overload to compute a hash_code for a SlowMPInt value.
        -:   73:  friend llvm::hash_code hash_value(const SlowMPInt &x); // NOLINT
        -:   74:
        -:   75:  void print(llvm::raw_ostream &os) const;
        -:   76:  void dump() const;
        -:   77:
        -:   78:  unsigned getBitWidth() const { return val.getBitWidth(); }
        -:   79:};
        -:   80:
        -:   81:llvm::raw_ostream &operator<<(llvm::raw_ostream &os, const SlowMPInt &x);
        -:   82:
        -:   83:/// Returns the remainder of dividing LHS by RHS.
        -:   84:///
        -:   85:/// The RHS is always expected to be positive, and the result
        -:   86:/// is always non-negative.
        -:   87:SlowMPInt mod(const SlowMPInt &lhs, const SlowMPInt &rhs);
        -:   88:
        -:   89:/// Returns the least common multiple of 'a' and 'b'.
        -:   90:SlowMPInt lcm(const SlowMPInt &a, const SlowMPInt &b);
        -:   91:
        -:   92:/// Redeclarations of friend declarations above to
        -:   93:/// make it discoverable by lookups.
        -:   94:SlowMPInt abs(const SlowMPInt &x);
        -:   95:SlowMPInt ceilDiv(const SlowMPInt &lhs, const SlowMPInt &rhs);
        -:   96:SlowMPInt floorDiv(const SlowMPInt &lhs, const SlowMPInt &rhs);
        -:   97:SlowMPInt gcd(const SlowMPInt &a, const SlowMPInt &b);
        -:   98:llvm::hash_code hash_value(const SlowMPInt &x); // NOLINT
        -:   99:
        -:  100:/// ---------------------------------------------------------------------------
        -:  101:/// Convenience operator overloads for int64_t.
        -:  102:/// ---------------------------------------------------------------------------
        -:  103:SlowMPInt &operator+=(SlowMPInt &a, int64_t b);
        -:  104:SlowMPInt &operator-=(SlowMPInt &a, int64_t b);
        -:  105:SlowMPInt &operator*=(SlowMPInt &a, int64_t b);
        -:  106:SlowMPInt &operator/=(SlowMPInt &a, int64_t b);
        -:  107:SlowMPInt &operator%=(SlowMPInt &a, int64_t b);
        -:  108:
        -:  109:bool operator==(const SlowMPInt &a, int64_t b);
        -:  110:bool operator!=(const SlowMPInt &a, int64_t b);
        -:  111:bool operator>(const SlowMPInt &a, int64_t b);
        -:  112:bool operator<(const SlowMPInt &a, int64_t b);
        -:  113:bool operator<=(const SlowMPInt &a, int64_t b);
        -:  114:bool operator>=(const SlowMPInt &a, int64_t b);
        -:  115:SlowMPInt operator+(const SlowMPInt &a, int64_t b);
        -:  116:SlowMPInt operator-(const SlowMPInt &a, int64_t b);
        -:  117:SlowMPInt operator*(const SlowMPInt &a, int64_t b);
        -:  118:SlowMPInt operator/(const SlowMPInt &a, int64_t b);
        -:  119:SlowMPInt operator%(const SlowMPInt &a, int64_t b);
        -:  120:
        -:  121:bool operator==(int64_t a, const SlowMPInt &b);
        -:  122:bool operator!=(int64_t a, const SlowMPInt &b);
        -:  123:bool operator>(int64_t a, const SlowMPInt &b);
        -:  124:bool operator<(int64_t a, const SlowMPInt &b);
        -:  125:bool operator<=(int64_t a, const SlowMPInt &b);
        -:  126:bool operator>=(int64_t a, const SlowMPInt &b);
        -:  127:SlowMPInt operator+(int64_t a, const SlowMPInt &b);
        -:  128:SlowMPInt operator-(int64_t a, const SlowMPInt &b);
        -:  129:SlowMPInt operator*(int64_t a, const SlowMPInt &b);
        -:  130:SlowMPInt operator/(int64_t a, const SlowMPInt &b);
        -:  131:SlowMPInt operator%(int64_t a, const SlowMPInt &b);
        -:  132:} // namespace detail
        -:  133:} // namespace presburger
        -:  134:} // namespace mlir
        -:  135:
        -:  136:#endif // MLIR_ANALYSIS_PRESBURGER_SLOWMPINT_H
