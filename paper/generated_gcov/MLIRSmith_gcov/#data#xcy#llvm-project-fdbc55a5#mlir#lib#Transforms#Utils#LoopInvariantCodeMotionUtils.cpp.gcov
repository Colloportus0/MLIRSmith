        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/Utils/LoopInvariantCodeMotionUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/LoopInvariantCodeMotionUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/LoopInvariantCodeMotionUtils.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- LoopInvariantCodeMotionUtils.cpp - LICM Utils ------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains the implementation of the core LICM algorithm.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Transforms/LoopInvariantCodeMotionUtils.h"
        -:   14:#include "mlir/IR/Operation.h"
        -:   15:#include "mlir/Interfaces/LoopLikeInterface.h"
        -:   16:#include "mlir/Transforms/SideEffectUtils.h"
        -:   17:#include "llvm/Support/Debug.h"
        -:   18:#include <queue>
        -:   19:
        -:   20:#define DEBUG_TYPE "licm"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
        -:   24:/// Checks whether the given op can be hoisted by checking that
        -:   25:/// - the op and none of its contained operations depend on values inside of the
        -:   26:///   loop (by means of calling definedOutside).
        -:   27:/// - the op has no side-effects.
function _ZL12canBeHoistedPN4mlir9OperationEN4llvm12function_refIFbNS_5ValueEEEE called 13371 returned 100% blocks executed 100%
    13371:   28:static bool canBeHoisted(Operation *op,
        -:   29:                         function_ref<bool(Value)> definedOutside) {
        -:   30:  // Do not move terminators.
    13371:   31:  if (op->hasTrait<OpTrait::IsTerminator>())
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
        -:   32:    return false;
        -:   33:
        -:   34:  // Walk the nested operations and check that all used values are either
        -:   35:  // defined outside of the loop or in a nested region, but not at the level of
        -:   36:  // the loop body.
function _ZZL12canBeHoistedPN4mlir9OperationEN4llvm12function_refIFbNS_5ValueEEEEENKUlS1_E_clES1_.isra.0 called 10634 returned 100% blocks executed 100%
    10634:   37:  auto walkFn = [&](Operation *child) {
    36559:   38:    for (Value operand : child->getOperands()) {
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
call    3 returned 100%
        -:   39:      // Ignore values defined in a nested region.
    26265:   40:      if (op->isAncestor(operand.getParentRegion()->getParentOp()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
       13:   41:        continue;
    26252:   42:      if (!definedOutside(operand))
call    0 returned 100%
branch  1 taken 1%
branch  2 taken 99%
      340:   43:        return WalkResult::interrupt();
        -:   44:    }
    10294:   45:    return WalkResult::advance();
    10531:   46:  };
    10531:   47:  return !op->walk(walkFn).wasInterrupted();
call    0 returned 100%
        -:   48:}
        -:   49:
function _ZN4mlir21moveLoopInvariantCodeENS_11RegionRangeEN4llvm12function_refIFbNS_5ValueEPNS_6RegionEEEENS2_IFbPNS_9OperationES5_EEENS2_IFvS9_S5_EEE called 2840 returned 100% blocks executed 69%
     2840:   50:size_t mlir::moveLoopInvariantCode(
        -:   51:    RegionRange regions,
        -:   52:    function_ref<bool(Value, Region *)> isDefinedOutsideRegion,
        -:   53:    function_ref<bool(Operation *, Region *)> shouldMoveOutOfRegion,
        -:   54:    function_ref<void(Operation *, Region *)> moveOutOfRegion) {
     2840:   55:  size_t numMoved = 0;
        -:   56:
     8520:   57:  for (Region *region : regions) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    2840*:   58:    LLVM_DEBUG(llvm::dbgs() << "Original loop:\n"
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:   59:                            << *region->getParentOp() << "\n");
        -:   60:
     2840:   61:    std::queue<Operation *> worklist;
call    0 returned 100%
        -:   62:    // Add top-level operations in the loop body to the worklist.
    19529:   63:    for (Operation &op : region->getOps())
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
    16689:   64:      worklist.push(&op);
call    0 returned 100%
call    1 returned 100%
        -:   65:
    29092:   66:    auto definedOutside = [&](Value value) {
    26252:   67:      return isDefinedOutsideRegion(value, region);
call    0 returned 100%
     2840:   68:    };
        -:   69:
    21987:   70:    while (!worklist.empty()) {
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
    19147:   71:      Operation *op = worklist.front();
call    0 returned 100%
    19147:   72:      worklist.pop();
call    0 returned 100%
        -:   73:      // Skip ops that have already been moved. Check if the op can be hoisted.
    38294:   74:      if (op->getParentRegion() != region)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
     1353:   75:        continue;
        -:   76:
   17794*:   77:      LLVM_DEBUG(llvm::dbgs() << "Checking op: " << *op << "\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    31165:   78:      if (!shouldMoveOutOfRegion(op, region) ||
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
branch  3 taken 76% (fallthrough)
branch  4 taken 24%
    13371:   79:          !canBeHoisted(op, definedOutside))
call    0 returned 100%
     7603:   80:        continue;
        -:   81:
   10191*:   82:      LLVM_DEBUG(llvm::dbgs() << "Moving loop-invariant op: " << *op << "\n");
branch  0 taken 0%
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    10191:   83:      moveOutOfRegion(op, region);
call    0 returned 100%
    10191:   84:      ++numMoved;
        -:   85:
        -:   86:      // Since the op has been moved, we need to check its users within the
        -:   87:      // top-level of the loop body.
    13878:   88:      for (Operation *user : op->getUsers())
call    0 returned 100%
branch  1 taken 27% (fallthrough)
branch  2 taken 73%
     7374:   89:        if (user->getParentRegion() == region)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
     6145:   90:          worklist.push(user);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:   91:    }
        -:   92:  }
        -:   93:
     2840:   94:  return numMoved;
        -:   95:}
        -:   96:
function _ZN4mlir21moveLoopInvariantCodeENS_19LoopLikeOpInterfaceE called 2840 returned 100% blocks executed 100%
     2840:   97:size_t mlir::moveLoopInvariantCode(LoopLikeOpInterface loopLike) {
     5680:   98:  return moveLoopInvariantCode(
call    0 returned 100%
call    1 returned 100%
     2840:   99:      &loopLike.getLoopBody(),
call    0 returned 100%
call    1 returned 100%
    26252:  100:      [&](Value value, Region *) {
    26252:  101:        return loopLike.isDefinedOutsideOfLoop(value);
call    0 returned 100%
        -:  102:      },
function _ZZN4mlir21moveLoopInvariantCodeENS_19LoopLikeOpInterfaceEENKUlPNS_9OperationEPNS_6RegionEE0_clES2_S4_.isra.0 called 17794 returned 100% blocks executed 100%
    17794:  103:      [&](Operation *op, Region *) {
    17794:  104:        return isMemoryEffectFree(op) && isSpeculatable(op);
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        -:  105:      },
    10191:  106:      [&](Operation *op, Region *) { loopLike.moveOutOfLoop(op); });
call    0 returned 100%
        -:  107:}
