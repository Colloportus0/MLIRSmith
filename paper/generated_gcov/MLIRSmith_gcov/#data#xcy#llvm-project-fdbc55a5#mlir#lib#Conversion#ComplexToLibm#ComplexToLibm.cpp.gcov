        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/ComplexToLibm/ComplexToLibm.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ComplexToLibm/CMakeFiles/obj.MLIRComplexToLibm.dir/ComplexToLibm.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ComplexToLibm/CMakeFiles/obj.MLIRComplexToLibm.dir/ComplexToLibm.cpp.gcda
        -:    0:Runs:116161
        -:    1://===-- ComplexToLibm.cpp - conversion from Complex to libm calls ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/ComplexToLibm/ComplexToLibm.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   12:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   13:#include "mlir/IR/PatternMatch.h"
        -:   14:#include "mlir/Pass/Pass.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:#define GEN_PASS_DEF_CONVERTCOMPLEXTOLIBM
        -:   18:#include "mlir/Conversion/Passes.h.inc"
        -:   19:} // namespace mlir
        -:   20:
        -:   21:using namespace mlir;
        -:   22:
        -:   23:namespace {
        -:   24:// Functor to resolve the function name corresponding to the given complex
        -:   25:// result type.
        -:   26:struct ComplexTypeResolver {
        -:   27:  llvm::Optional<bool> operator()(Type type) const {
        -:   28:    auto complexType = type.cast<ComplexType>();
        -:   29:    auto elementType = complexType.getElementType();
        -:   30:    if (!elementType.isa<Float32Type, Float64Type>())
        -:   31:      return {};
        -:   32:
        -:   33:    return elementType.getIntOrFloatBitWidth() == 64;
        -:   34:  }
        -:   35:};
        -:   36:
        -:   37:// Functor to resolve the function name corresponding to the given float result
        -:   38:// type.
        -:   39:struct FloatTypeResolver {
        -:   40:  llvm::Optional<bool> operator()(Type type) const {
        -:   41:    auto elementType = type.cast<FloatType>();
        -:   42:    if (!elementType.isa<Float32Type, Float64Type>())
        -:   43:      return {};
        -:   44:
        -:   45:    return elementType.getIntOrFloatBitWidth() == 64;
        -:   46:  }
        -:   47:};
        -:   48:
        -:   49:// Pattern to convert scalar complex operations to calls to libm functions.
        -:   50:// Additionally the libm function signatures are declared.
        -:   51:// TypeResolver is a functor returning the libm function name according to the
        -:   52:// expected type double or float.
        -:   53:template <typename Op, typename TypeResolver = ComplexTypeResolver>
        -:   54:struct ScalarOpToLibmCall : public OpRewritePattern<Op> {
        -:   55:public:
        -:   56:  using OpRewritePattern<Op>::OpRewritePattern;
     3825:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
     3825:   62:        doubleFunc(doubleFunc){};
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex7AngleOpENS_17FloatTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex7AngleOpENS_17FloatTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5AbsOpENS_17FloatTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5AbsOpENS_17FloatTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5LogOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5LogOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6ConjOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6ConjOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5SinOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5SinOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5CosOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5CosOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6TanhOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6TanhOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6SqrtOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6SqrtOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
_ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5PowOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE:
function _ZN12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5PowOpENS_19ComplexTypeResolverEEC2EPNS1_11MLIRContextEN4llvm9StringRefES9_NS1_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:   57:  ScalarOpToLibmCall<Op, TypeResolver>(MLIRContext *context,
        -:   58:                                       StringRef floatFunc,
        -:   59:                                       StringRef doubleFunc,
        -:   60:                                       PatternBenefit benefit)
        -:   61:      : OpRewritePattern<Op>(context, benefit), floatFunc(floatFunc),
      425:   62:        doubleFunc(doubleFunc){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
------------------
        -:   63:
        -:   64:  LogicalResult matchAndRewrite(Op op, PatternRewriter &rewriter) const final;
        -:   65:
        -:   66:private:
        -:   67:  std::string floatFunc, doubleFunc;
        -:   68:};
        -:   69:} // namespace
        -:   70:
        -:   71:template <typename Op, typename TypeResolver>
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
    #####:   76:  if (!isDouble.has_value())
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
    #####:   87:    auto opFunctionTy = FunctionType::get(
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5PowOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5PowOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6SqrtOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6SqrtOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6TanhOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6TanhOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5CosOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5CosOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5SinOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5SinOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6ConjOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex6ConjOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5LogOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5LogOpENS_19ComplexTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5AbsOpENS_17FloatTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex5AbsOpENS_17FloatTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
_ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex7AngleOpENS_17FloatTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_118ScalarOpToLibmCallIN4mlir7complex7AngleOpENS_17FloatTypeResolverEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   72:LogicalResult ScalarOpToLibmCall<Op, TypeResolver>::matchAndRewrite(
        -:   73:    Op op, PatternRewriter &rewriter) const {
    #####:   74:  auto module = SymbolTable::getNearestSymbolTable(op);
call    0 never executed
call    1 never executed
    #####:   75:  auto isDouble = TypeResolver()(op.getType());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (!isDouble.has_value())
branch  0 never executed
branch  1 never executed
    #####:   77:    return failure();
        -:   78:
    #####:   79:  auto name = isDouble.value() ? doubleFunc : floatFunc;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   80:
    #####:   81:  auto opFunc = dyn_cast_or_null<SymbolOpInterface>(
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   82:      SymbolTable::lookupSymbolIn(module, name));
        -:   83:  // Forward declare function if it hasn't already been
    #####:   84:  if (!opFunc) {
branch  0 never executed
branch  1 never executed
    #####:   85:    OpBuilder::InsertionGuard guard(rewriter);
call    0 never executed
    #####:   86:    rewriter.setInsertionPointToStart(&module->getRegion(0).front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:    auto opFunctionTy = FunctionType::get(
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   88:        rewriter.getContext(), op->getOperandTypes(), op->getResultTypes());
    #####:   89:    opFunc = rewriter.create<func::FuncOp>(rewriter.getUnknownLoc(), name,
call    0 never executed
call    1 never executed
call    2 never executed
        -:   90:                                           opFunctionTy);
    #####:   91:    opFunc.setPrivate();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   92:  }
    #####:   93:  assert(isa<FunctionOpInterface>(SymbolTable::lookupSymbolIn(module, name)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   94:
    #####:   95:  rewriter.replaceOpWithNewOp<func::CallOp>(op, name, op.getType(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   96:                                            op->getOperands());
        -:   97:
    #####:   98:  return success();
branch  0 never executed
branch  1 never executed
        -:   99:}
------------------
        -:  100:
function _ZN4mlir39populateComplexToLibmConversionPatternsERNS_17RewritePatternSetENS_14PatternBenefitE called 425 returned 100% blocks executed 100%
      425:  101:void mlir::populateComplexToLibmConversionPatterns(RewritePatternSet &patterns,
        -:  102:                                                   PatternBenefit benefit) {
      425:  103:  patterns.add<ScalarOpToLibmCall<complex::PowOp>>(patterns.getContext(),
call    0 returned 100%
      425:  104:                                                   "cpowf", "cpow", benefit);
call    0 returned 100%
      425:  105:  patterns.add<ScalarOpToLibmCall<complex::SqrtOp>>(patterns.getContext(),
call    0 returned 100%
      425:  106:                                                    "csqrtf", "csqrt", benefit);
call    0 returned 100%
      425:  107:  patterns.add<ScalarOpToLibmCall<complex::TanhOp>>(patterns.getContext(),
call    0 returned 100%
      425:  108:                                                    "ctanhf", "ctanh", benefit);
call    0 returned 100%
      425:  109:  patterns.add<ScalarOpToLibmCall<complex::CosOp>>(patterns.getContext(),
call    0 returned 100%
      425:  110:                                                   "ccosf", "ccos", benefit);
call    0 returned 100%
      425:  111:  patterns.add<ScalarOpToLibmCall<complex::SinOp>>(patterns.getContext(),
call    0 returned 100%
      425:  112:                                                   "csinf", "csin", benefit);
call    0 returned 100%
      425:  113:  patterns.add<ScalarOpToLibmCall<complex::ConjOp>>(patterns.getContext(),
call    0 returned 100%
      425:  114:                                                    "conjf", "conj", benefit);
call    0 returned 100%
      425:  115:  patterns.add<ScalarOpToLibmCall<complex::LogOp>>(patterns.getContext(),
call    0 returned 100%
      425:  116:                                                   "clogf", "clog", benefit);
call    0 returned 100%
      425:  117:  patterns.add<ScalarOpToLibmCall<complex::AbsOp, FloatTypeResolver>>(
      425:  118:      patterns.getContext(), "cabsf", "cabs", benefit);
call    0 returned 100%
      425:  119:  patterns.add<ScalarOpToLibmCall<complex::AngleOp, FloatTypeResolver>>(
      425:  120:      patterns.getContext(), "cargf", "carg", benefit);
call    0 returned 100%
      425:  121:}
        -:  122:
        -:  123:namespace {
  117079*:  124:struct ConvertComplexToLibmPass
call    0 never executed
call    1 returned 100%
        -:  125:    : public impl::ConvertComplexToLibmBase<ConvertComplexToLibmPass> {
        -:  126:  void runOnOperation() override;
        -:  127:};
        -:  128:} // namespace
        -:  129:
function _ZN12_GLOBAL__N_124ConvertComplexToLibmPass14runOnOperationEv called 425 returned 100% blocks executed 94%
      425:  130:void ConvertComplexToLibmPass::runOnOperation() {
      425:  131:  auto module = getOperation();
call    0 returned 100%
        -:  132:
      425:  133:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      425:  134:  populateComplexToLibmConversionPatterns(patterns, /*benefit=*/1);
call    0 returned 100%
call    1 returned 100%
        -:  135:
      850:  136:  ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      425:  137:  target.addLegalDialect<func::FuncDialect>();
call    0 returned 100%
      425:  138:  target.addIllegalOp<complex::PowOp, complex::SqrtOp, complex::TanhOp,
        -:  139:                      complex::CosOp, complex::SinOp, complex::ConjOp,
      425:  140:                      complex::LogOp, complex::AbsOp, complex::AngleOp>();
call    0 returned 100%
      425:  141:  if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  142:    signalPassFailure();
call    0 never executed
      425:  143:}
        -:  144:
        -:  145:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir30createConvertComplexToLibmPassEv called 117079 returned 100% blocks executed 100%
   117079:  146:mlir::createConvertComplexToLibmPass() {
   117079:  147:  return std::make_unique<ConvertComplexToLibmPass>();
call    0 returned 100%
        -:  148:}
