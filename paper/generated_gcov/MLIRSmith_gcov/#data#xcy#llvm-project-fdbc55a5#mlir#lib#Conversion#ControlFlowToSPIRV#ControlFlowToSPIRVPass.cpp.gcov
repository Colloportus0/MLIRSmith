        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/ControlFlowToSPIRV/CMakeFiles/obj.MLIRControlFlowToSPIRV.dir/ControlFlowToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ControlFlowToSPIRV/CMakeFiles/obj.MLIRControlFlowToSPIRV.dir/ControlFlowToSPIRVPass.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ControlFlowToSPIRVPass.cpp - ControlFlow to SPIR-V Pass ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert ControlFlow dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRVPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRV.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_CONVERTCONTROLFLOWTOSPIRV
        -:   21:#include "mlir/Conversion/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:/// A pass converting MLIR ControlFlow operations into the SPIR-V dialect.
  116724*:   28:class ConvertControlFlowToSPIRVPass
call    0 never executed
call    1 returned 100%
        -:   29:    : public impl::ConvertControlFlowToSPIRVBase<
        -:   30:          ConvertControlFlowToSPIRVPass> {
        -:   31:  void runOnOperation() override;
        -:   32:};
        -:   33:} // namespace
        -:   34:
function _ZN12_GLOBAL__N_129ConvertControlFlowToSPIRVPass14runOnOperationEv called 434 returned 100% blocks executed 67%
      434:   35:void ConvertControlFlowToSPIRVPass::runOnOperation() {
      434:   36:  MLIRContext *context = &getContext();
call    0 returned 100%
      434:   37:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   38:
      434:   39:  auto targetAttr = spirv::lookupTargetEnvOrDefault(op);
call    0 returned 100%
      434:   40:  std::unique_ptr<ConversionTarget> target =
      868:   41:      SPIRVConversionTarget::get(targetAttr);
call    0 returned 100%
call    1 returned 100%
        -:   42:
      434:   43:  SPIRVConversionOptions options;
      434:   44:  options.emulateNon32BitScalarTypes = this->emulateNon32BitScalarTypes;
call    0 returned 100%
      868:   45:  SPIRVTypeConverter typeConverter(targetAttr, options);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   46:
      868:   47:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      434:   48:  cf::populateControlFlowToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
        -:   49:
      434:   50:  if (failed(applyPartialConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   51:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:   52:}
        -:   53:
function _ZN4mlir35createConvertControlFlowToSPIRVPassEv called 116724 returned 100% blocks executed 100%
   116724:   54:std::unique_ptr<OperationPass<>> mlir::createConvertControlFlowToSPIRVPass() {
   116724:   55:  return std::make_unique<ConvertControlFlowToSPIRVPass>();
call    0 returned 100%
        -:   56:}
