        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Linalg/TestLinalgTransforms.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgTransforms.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgTransforms.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestLinalgTransforms.cpp - Test Linalg transformation patterns -----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements logic for testing Linalg transformations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   15:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   16:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   17:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   18:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   19:#include "mlir/Dialect/Linalg/Passes.h"
        -:   20:#include "mlir/Dialect/Linalg/Transforms/HoistPadding.h"
        -:   21:#include "mlir/Dialect/Linalg/Transforms/Hoisting.h"
        -:   22:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   23:#include "mlir/Dialect/Linalg/Utils/Utils.h"
        -:   24:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   25:#include "mlir/Pass/PassManager.h"
        -:   26:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   27:
        -:   28:#include "llvm/ADT/SmallVector.h"
        -:   29:
        -:   30:using namespace mlir;
        -:   31:using namespace mlir::linalg;
        -:   32:
        -:   33:namespace {
        -:   34:struct TestLinalgTransforms
        -:   35:    : public PassWrapper<TestLinalgTransforms, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_120TestLinalgTransforms13resolveTypeIDEv called 116714 returned 100% blocks executed 100%
   116714:   36:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLinalgTransforms)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   37:
function _ZN12_GLOBAL__N_120TestLinalgTransformsC2Ev called 116714 returned 100% blocks executed 100%
   116714:   38:  TestLinalgTransforms() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
function _ZN12_GLOBAL__N_120TestLinalgTransformsC2ERKS0_ called 29880 returned 100% blocks executed 100%
    29880:   39:  TestLinalgTransforms(const TestLinalgTransforms &pass) : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
        -:   40:
function _ZNK12_GLOBAL__N_120TestLinalgTransforms20getDependentDialectsERN4mlir15DialectRegistryE called 553 returned 100% blocks executed 100%
      553:   41:  void getDependentDialects(DialectRegistry &registry) const override {
        -:   42:    // clang-format off
      553:   43:    registry.insert<AffineDialect,
        -:   44:                    bufferization::BufferizationDialect,
        -:   45:                    memref::MemRefDialect,
        -:   46:                    scf::SCFDialect,
        -:   47:                    linalg::LinalgDialect,
        -:   48:                    vector::VectorDialect,
      553:   49:                    gpu::GPUDialect>();
call    0 returned 100%
        -:   50:    // clang-format on
      553:   51:  }
function _ZNK12_GLOBAL__N_120TestLinalgTransforms11getArgumentEv called 116181 returned 100% blocks executed 100%
   116181:   52:  StringRef getArgument() const final {
   116181:   53:    return "test-linalg-transform-patterns";
        -:   54:  }
function _ZNK12_GLOBAL__N_120TestLinalgTransforms14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   55:  StringRef getDescription() const final {
   116161:   56:    return "Test Linalg transformation patterns by applying them greedily.";
        -:   57:  }
        -:   58:
        -:   59:  void runOnOperation() override;
        -:   60:
        -:   61:  Option<bool> testPatterns{*this, "test-patterns",
        -:   62:                            llvm::cl::desc("Test a mixed set of patterns"),
        -:   63:                            llvm::cl::init(false)};
        -:   64:  Option<bool> testVectorTransferForwardingPatterns{
        -:   65:      *this, "test-vector-transfer-forwarding-patterns",
        -:   66:      llvm::cl::desc(
        -:   67:          "Test a fused pass that forwards memref.copy to vector.transfer"),
        -:   68:      llvm::cl::init(false)};
        -:   69:  Option<bool> testGenericToVectorPattern{
        -:   70:      *this, "test-linalg-to-vector-patterns",
        -:   71:      llvm::cl::desc("Test a set of patterns that rewrite a linalg contraction "
        -:   72:                     "in vector.contract form"),
        -:   73:      llvm::cl::init(false)};
        -:   74:  Option<bool> testTransformPadTensor{
        -:   75:      *this, "test-transform-pad-tensor",
        -:   76:      llvm::cl::desc("Test transform pad tensor by copying with generic ops"),
        -:   77:      llvm::cl::init(false)};
        -:   78:  Option<bool> testGeneralizePadTensor{
        -:   79:      *this, "test-generalize-pad-tensor",
        -:   80:      llvm::cl::desc("Test transform pad tensor by copying with generic ops"),
        -:   81:      llvm::cl::init(false)};
        -:   82:  Option<bool> testSwapSubTensorPadTensor{
        -:   83:      *this, "test-swap-subtensor-padtensor",
        -:   84:      llvm::cl::desc("Test rewrite of subtensor(tensor.pad) into "
        -:   85:                     "tensor.pad(subtensor)"),
        -:   86:      llvm::cl::init(false)};
        -:   87:  ListOption<int64_t> peeledLoops{
        -:   88:      *this, "peeled-loops",
        -:   89:      llvm::cl::desc("Loops to be peeled when test-tile-pattern")};
        -:   90:  ListOption<int64_t> tileSizes{
        -:   91:      *this, "tile-sizes",
        -:   92:      llvm::cl::desc("Linalg tile sizes for test-tile-pattern")};
        -:   93:  Option<bool> skipPartial{
        -:   94:      *this, "skip-partial",
        -:   95:      llvm::cl::desc("Skip loops inside partial iterations during peeling"),
        -:   96:      llvm::cl::init(false)};
        -:   97:  Option<std::string> loopType{
        -:   98:      *this, "loop-type",
        -:   99:      llvm::cl::desc("Specify the type of loops to generate: for, parallel or "
        -:  100:                     "tiled_loop"),
        -:  101:      llvm::cl::init("for")};
        -:  102:  Option<bool> testBubbleUpExtractSliceOpPattern{
        -:  103:      *this, "test-bubble-up-extract-slice-op-pattern",
        -:  104:      llvm::cl::desc("Test rewrite of linalgOp + extract_slice into "
        -:  105:                     "extract_slice + linalgOp"),
        -:  106:      llvm::cl::init(false)};
        -:  107:  Option<bool> testSwapExtractSliceWithFill{
        -:  108:      *this, "test-swap-extract-slice-with-fill-pattern",
        -:  109:      llvm::cl::desc(
        -:  110:          "Test patterns to swap tensor.extract_slice(linalg.fill())"),
        -:  111:      llvm::cl::init(false)};
        -:  112:};
        -:  113:} // namespace
        -:  114:
function _ZL13applyPatternsN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  115:static void applyPatterns(func::FuncOp funcOp) {
    #####:  116:  MLIRContext *ctx = funcOp.getContext();
call    0 never executed
    #####:  117:  RewritePatternSet patterns(ctx);
call    0 never executed
        -:  118:
        -:  119:  //===--------------------------------------------------------------------===//
        -:  120:  // Linalg distribution patterns.
        -:  121:  //===--------------------------------------------------------------------===//
    #####:  122:  LinalgLoopDistributionOptions distributionOptions;
call    0 never executed
call    1 never executed
        -:  123:
        -:  124:  //===--------------------------------------------------------------------===//
        -:  125:  // Linalg to vector contraction patterns.
        -:  126:  //===--------------------------------------------------------------------===//
    #####:  127:  patterns.add<CopyVectorizationPattern>(ctx);
call    0 never executed
        -:  128:
    #####:  129:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  130:}
        -:  131:
function _ZL37applyVectorTransferForwardingPatternsN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  132:static void applyVectorTransferForwardingPatterns(func::FuncOp funcOp) {
    #####:  133:  RewritePatternSet forwardPattern(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  134:  forwardPattern.add<LinalgCopyVTRForwardingPattern>(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  135:  forwardPattern.add<LinalgCopyVTWForwardingPattern>(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  136:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(forwardPattern));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  137:}
        -:  138:
function _ZL27applyLinalgToVectorPatternsN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  139:static void applyLinalgToVectorPatterns(func::FuncOp funcOp) {
    #####:  140:  RewritePatternSet patterns(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  141:  auto *ctx = funcOp.getContext();
call    0 never executed
    #####:  142:  patterns.add<CopyVectorizationPattern>(ctx);
call    0 never executed
    #####:  143:  populatePadOpVectorizationPatterns(patterns);
call    0 never executed
call    1 never executed
    #####:  144:  populateConvolutionVectorizationPatterns(patterns);
call    0 never executed
call    1 never executed
    #####:  145:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  146:}
        -:  147:
function _ZL31applyPadTensorToGenericPatternsN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  148:static void applyPadTensorToGenericPatterns(func::FuncOp funcOp) {
    #####:  149:  RewritePatternSet patterns(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  150:  patterns.add<PadOpTransformationPattern>(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  151:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  152:}
        -:  153:
function _ZL32applyGeneralizePadTensorPatternsN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  154:static void applyGeneralizePadTensorPatterns(func::FuncOp funcOp) {
    #####:  155:  RewritePatternSet patterns(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  156:  patterns.add<GeneralizePadOpPattern>(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  157:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  158:}
        -:  159:
function _ZL39applyExtractSliceOfPadTensorSwapPatternN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  160:static void applyExtractSliceOfPadTensorSwapPattern(func::FuncOp funcOp) {
    #####:  161:  RewritePatternSet patterns(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  162:  patterns.add<ExtractSliceOfPadTensorSwapPattern>(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  163:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  164:}
        -:  165:
function _ZL34applyBubbleUpExtractSliceOpPatternN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  166:static void applyBubbleUpExtractSliceOpPattern(func::FuncOp funcOp) {
    #####:  167:  RewritePatternSet patterns(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  168:  populateBubbleUpExtractSliceOpPatterns(patterns);
call    0 never executed
    #####:  169:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  170:}
        -:  171:
function _ZL36applySwapExtractSliceWithFillPatternN4mlir4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:  172:static void applySwapExtractSliceWithFillPattern(func::FuncOp funcOp) {
    #####:  173:  RewritePatternSet patterns(funcOp.getContext());
call    0 never executed
call    1 never executed
    #####:  174:  populateSwapExtractSliceWithFillPatterns(patterns);
call    0 never executed
    #####:  175:  (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  176:}
        -:  177:
        -:  178:/// Apply transformations specified as patterns.
function _ZN12_GLOBAL__N_120TestLinalgTransforms14runOnOperationEv called 507 returned 100% blocks executed 36%
      507:  179:void TestLinalgTransforms::runOnOperation() {
      507:  180:  if (testPatterns)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  181:    return applyPatterns(getOperation());
call    0 never executed
call    1 never executed
      507:  182:  if (testVectorTransferForwardingPatterns)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  183:    return applyVectorTransferForwardingPatterns(getOperation());
call    0 never executed
call    1 never executed
      507:  184:  if (testGenericToVectorPattern)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  185:    return applyLinalgToVectorPatterns(getOperation());
call    0 never executed
call    1 never executed
      507:  186:  if (testTransformPadTensor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  187:    return applyPadTensorToGenericPatterns(getOperation());
call    0 never executed
call    1 never executed
      507:  188:  if (testGeneralizePadTensor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  189:    return applyGeneralizePadTensorPatterns(getOperation());
call    0 never executed
call    1 never executed
      507:  190:  if (testSwapSubTensorPadTensor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  191:    return applyExtractSliceOfPadTensorSwapPattern(getOperation());
call    0 never executed
call    1 never executed
      507:  192:  if (testBubbleUpExtractSliceOpPattern)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  193:    return applyBubbleUpExtractSliceOpPattern(getOperation());
call    0 never executed
call    1 never executed
      507:  194:  if (testSwapExtractSliceWithFill)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  195:    return applySwapExtractSliceWithFillPattern(getOperation());
call    0 never executed
call    1 never executed
        -:  196:}
        -:  197:
        -:  198:namespace mlir {
        -:  199:namespace test {
function _ZN4mlir4test28registerTestLinalgTransformsEv called 116161 returned 100% blocks executed 100%
   116161:  200:void registerTestLinalgTransforms() {
   116161:  201:  PassRegistration<TestLinalgTransforms>();
call    0 returned 100%
   116161:  202:}
        -:  203:} // namespace test
        -:  204:} // namespace mlir
