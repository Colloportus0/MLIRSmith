        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Affine/Transforms/AffineLoopInvariantCodeMotion.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineLoopInvariantCodeMotion.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Affine/Transforms/CMakeFiles/obj.MLIRAffineTransforms.dir/AffineLoopInvariantCodeMotion.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- AffineLoopInvariantCodeMotion.cpp - Code to perform loop fusion-----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements loop invariant code motion.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/Passes.h"
        -:   14:
        -:   15:#include "mlir/Analysis/SliceAnalysis.h"
        -:   16:#include "mlir/Dialect/Affine/Analysis/AffineAnalysis.h"
        -:   17:#include "mlir/Dialect/Affine/Analysis/AffineStructures.h"
        -:   18:#include "mlir/Dialect/Affine/Analysis/LoopAnalysis.h"
        -:   19:#include "mlir/Dialect/Affine/Analysis/Utils.h"
        -:   20:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   21:#include "mlir/Dialect/Affine/LoopUtils.h"
        -:   22:#include "mlir/Dialect/Affine/Utils.h"
        -:   23:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   24:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   25:#include "mlir/IR/AffineExpr.h"
        -:   26:#include "mlir/IR/AffineMap.h"
        -:   27:#include "mlir/IR/Builders.h"
        -:   28:#include "mlir/IR/Matchers.h"
        -:   29:#include "llvm/ADT/DenseMap.h"
        -:   30:#include "llvm/ADT/DenseSet.h"
        -:   31:#include "llvm/ADT/SmallPtrSet.h"
        -:   32:#include "llvm/Support/CommandLine.h"
        -:   33:#include "llvm/Support/Debug.h"
        -:   34:#include "llvm/Support/raw_ostream.h"
        -:   35:
        -:   36:namespace mlir {
        -:   37:#define GEN_PASS_DEF_AFFINELOOPINVARIANTCODEMOTION
        -:   38:#include "mlir/Dialect/Affine/Passes.h.inc"
        -:   39:} // namespace mlir
        -:   40:
        -:   41:#define DEBUG_TYPE "licm"
        -:   42:
        -:   43:using namespace mlir;
        -:   44:
        -:   45:namespace {
        -:   46:
        -:   47:/// Loop invariant code motion (LICM) pass.
        -:   48:/// TODO: The pass is missing zero-trip tests.
        -:   49:/// TODO: Check for the presence of side effects before hoisting.
        -:   50:/// TODO: This code should be removed once the new LICM pass can handle its
        -:   51:///       uses.
   146425:   52:struct LoopInvariantCodeMotion
call    0 returned 100%
call    1 returned 100%
        -:   53:    : public impl::AffineLoopInvariantCodeMotionBase<LoopInvariantCodeMotion> {
        -:   54:  void runOnOperation() override;
        -:   55:  void runOnAffineForOp(AffineForOp forOp);
        -:   56:};
        -:   57:} // namespace
        -:   58:
        -:   59:static bool
        -:   60:checkInvarianceOfNestedIfOps(Operation *op, Value indVar, ValueRange iterArgs,
        -:   61:                             SmallPtrSetImpl<Operation *> &opsWithUsers,
        -:   62:                             SmallPtrSetImpl<Operation *> &opsToHoist);
        -:   63:static bool isOpLoopInvariant(Operation &op, Value indVar, ValueRange iterArgs,
        -:   64:                              SmallPtrSetImpl<Operation *> &opsWithUsers,
        -:   65:                              SmallPtrSetImpl<Operation *> &opsToHoist);
        -:   66:
        -:   67:static bool
        -:   68:areAllOpsInTheBlockListInvariant(Region &blockList, Value indVar,
        -:   69:                                 ValueRange iterArgs,
        -:   70:                                 SmallPtrSetImpl<Operation *> &opsWithUsers,
        -:   71:                                 SmallPtrSetImpl<Operation *> &opsToHoist);
        -:   72:
        -:   73:// Returns true if the individual op is loop invariant.
function _ZL17isOpLoopInvariantRN4mlir9OperationENS_5ValueENS_10ValueRangeERN4llvm15SmallPtrSetImplIPS0_EES8_ called 10 returned 100% blocks executed 33%
       10:   74:bool isOpLoopInvariant(Operation &op, Value indVar, ValueRange iterArgs,
        -:   75:                       SmallPtrSetImpl<Operation *> &opsWithUsers,
        -:   76:                       SmallPtrSetImpl<Operation *> &opsToHoist) {
      10*:   77:  LLVM_DEBUG(llvm::dbgs() << "iterating on op: " << op;);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:   78:
       10:   79:  if (isa<AffineIfOp>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   80:    if (!checkInvarianceOfNestedIfOps(&op, indVar, iterArgs, opsWithUsers,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   81:                                      opsToHoist)) {
        -:   82:      return false;
        -:   83:    }
       20:   84:  } else if (auto forOp = dyn_cast<AffineForOp>(op)) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        5:   85:    if (!areAllOpsInTheBlockListInvariant(forOp.getLoopBody(), indVar, iterArgs,
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
        -:   86:                                          opsWithUsers, opsToHoist)) {
    #####:   87:      return false;
        -:   88:    }
        5:   89:  } else if (isa<AffineDmaStartOp, AffineDmaWaitOp>(op)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   90:    // TODO: Support DMA ops.
        -:   91:    return false;
        5:   92:  } else if (!matchPattern(&op, m_Constant())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   93:    // Register op in the set of ops that have users.
        5:   94:    opsWithUsers.insert(&op);
call    0 returned 100%
        5:   95:    if (isa<AffineMapAccessInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   96:      Value memref = isa<AffineReadOpInterface>(op)
call    0 never executed
    #####:   97:                         ? cast<AffineReadOpInterface>(op).getMemRef()
call    0 never executed
call    1 never executed
    #####:   98:                         : cast<AffineWriteOpInterface>(op).getMemRef();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   99:      for (auto *user : memref.getUsers()) {
branch  0 never executed
branch  1 never executed
        -:  100:        // If this memref has a user that is a DMA, give up because these
        -:  101:        // operations write to this memref.
    #####:  102:        if (isa<AffineDmaStartOp, AffineDmaWaitOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  103:          return false;
        -:  104:        }
        -:  105:        // If the memref used by the load/store is used in a store elsewhere in
        -:  106:        // the loop nest, we do not hoist. Similarly, if the memref used in a
        -:  107:        // load is also being stored too, we do not hoist the load.
    #####:  108:        if (isa<AffineWriteOpInterface>(user) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  109:            (isa<AffineReadOpInterface>(user) &&
call    0 never executed
    #####:  110:             isa<AffineWriteOpInterface>(op))) {
branch  0 never executed
branch  1 never executed
    #####:  111:          if (&op != user) {
branch  0 never executed
branch  1 never executed
    #####:  112:            SmallVector<AffineForOp, 8> userIVs;
call    0 never executed
    #####:  113:            getLoopIVs(*user, &userIVs);
call    0 never executed
        -:  114:            // Check that userIVs don't contain the for loop around the op.
    #####:  115:            if (llvm::is_contained(userIVs, getForInductionVarOwner(indVar))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:              return false;
branch  0 never executed
branch  1 never executed
        -:  117:            }
        -:  118:          }
        -:  119:        }
        -:  120:      }
        -:  121:    }
        -:  122:
       10:  123:    if (op.getNumOperands() == 0 && !isa<AffineYieldOp>(op)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  124:      LLVM_DEBUG(llvm::dbgs() << "\nNon-constant op with 0 operands\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  125:      return false;
        -:  126:    }
        -:  127:  }
        -:  128:
        -:  129:  // Check operands.
      20*:  130:  for (unsigned int i = 0; i < op.getNumOperands(); ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        5:  131:    auto *operandSrc = op.getOperand(i).getDefiningOp();
call    0 returned 100%
call    1 returned 100%
        -:  132:
       5*:  133:    LLVM_DEBUG(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  134:        op.getOperand(i).print(llvm::dbgs() << "\nIterating on operand\n"));
        -:  135:
        -:  136:    // If the loop IV is the operand, this op isn't loop invariant.
        5:  137:    if (indVar == op.getOperand(i)) {
call    0 returned 100%
       5*:  138:      LLVM_DEBUG(llvm::dbgs() << "\nLoop IV is the operand\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        5:  139:      return false;
        -:  140:    }
        -:  141:
        -:  142:    // If the one of the iter_args is the operand, this op isn't loop invariant.
    #####:  143:    if (llvm::is_contained(iterArgs, op.getOperand(i))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:      LLVM_DEBUG(llvm::dbgs() << "\nOne of the iter_args is the operand\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  145:      return false;
        -:  146:    }
        -:  147:
    #####:  148:    if (operandSrc != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  149:      LLVM_DEBUG(llvm::dbgs() << *operandSrc << "\nIterating on operand src\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  150:
        -:  151:      // If the value was defined in the loop (outside of the
        -:  152:      // if/else region), and that operation itself wasn't meant to
        -:  153:      // be hoisted, then mark this operation loop dependent.
    #####:  154:      if (opsWithUsers.count(operandSrc) && opsToHoist.count(operandSrc) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  155:        return false;
        -:  156:      }
        -:  157:    }
        -:  158:  }
        -:  159:
        -:  160:  // If no operand was loop variant, mark this op for motion.
        5:  161:  opsToHoist.insert(&op);
call    0 returned 100%
        5:  162:  return true;
        -:  163:}
        -:  164:
        -:  165:// Checks if all ops in a region (i.e. list of blocks) are loop invariant.
function _ZL32areAllOpsInTheBlockListInvariantRN4mlir6RegionENS_5ValueENS_10ValueRangeERN4llvm15SmallPtrSetImplIPNS_9OperationEEES9_ called 5 returned 100% blocks executed 92%
        5:  166:bool areAllOpsInTheBlockListInvariant(
        -:  167:    Region &blockList, Value indVar, ValueRange iterArgs,
        -:  168:    SmallPtrSetImpl<Operation *> &opsWithUsers,
        -:  169:    SmallPtrSetImpl<Operation *> &opsToHoist) {
        -:  170:
       10:  171:  for (auto &b : blockList) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       10:  172:    for (auto &op : b) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        5:  173:      if (!isOpLoopInvariant(op, indVar, iterArgs, opsWithUsers, opsToHoist)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5:  174:        return false;
        -:  175:      }
        -:  176:    }
        -:  177:  }
        -:  178:
        -:  179:  return true;
        -:  180:}
        -:  181:
        -:  182:// Returns true if the affine.if op can be hoisted.
function _ZL28checkInvarianceOfNestedIfOpsPN4mlir9OperationENS_5ValueENS_10ValueRangeERN4llvm15SmallPtrSetImplIS1_EES7_ called 0 returned 0% blocks executed 0%
    #####:  183:bool checkInvarianceOfNestedIfOps(Operation *op, Value indVar,
        -:  184:                                  ValueRange iterArgs,
        -:  185:                                  SmallPtrSetImpl<Operation *> &opsWithUsers,
        -:  186:                                  SmallPtrSetImpl<Operation *> &opsToHoist) {
    #####:  187:  assert(isa<AffineIfOp>(op));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  188:  auto ifOp = cast<AffineIfOp>(op);
call    0 never executed
        -:  189:
    #####:  190:  if (!areAllOpsInTheBlockListInvariant(ifOp.getThenRegion(), indVar, iterArgs,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  191:                                        opsWithUsers, opsToHoist)) {
        -:  192:    return false;
        -:  193:  }
        -:  194:
    #####:  195:  if (!areAllOpsInTheBlockListInvariant(ifOp.getElseRegion(), indVar, iterArgs,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  196:                                        opsWithUsers, opsToHoist)) {
    #####:  197:    return false;
        -:  198:  }
        -:  199:
        -:  200:  return true;
        -:  201:}
        -:  202:
        -:  203:void LoopInvariantCodeMotion::runOnAffineForOp(AffineForOp forOp) {
        -:  204:  auto *loopBody = forOp.getBody();
        -:  205:  auto indVar = forOp.getInductionVar();
        -:  206:  ValueRange iterArgs = forOp.getRegionIterArgs();
        -:  207:
        -:  208:  // This is the place where hoisted instructions would reside.
        -:  209:  OpBuilder b(forOp.getOperation());
        -:  210:
        -:  211:  SmallPtrSet<Operation *, 8> opsToHoist;
        -:  212:  SmallVector<Operation *, 8> opsToMove;
        -:  213:  SmallPtrSet<Operation *, 8> opsWithUsers;
        -:  214:
        -:  215:  for (auto &op : *loopBody) {
        -:  216:    // Register op in the set of ops that have users. This set is used
        -:  217:    // to prevent hoisting ops that depend on these ops that are
        -:  218:    // not being hoisted.
        -:  219:    if (!op.use_empty())
        -:  220:      opsWithUsers.insert(&op);
        -:  221:    if (!isa<AffineYieldOp>(op)) {
        -:  222:      if (isOpLoopInvariant(op, indVar, iterArgs, opsWithUsers, opsToHoist)) {
        -:  223:        opsToMove.push_back(&op);
        -:  224:      }
        -:  225:    }
        -:  226:  }
        -:  227:
        -:  228:  // For all instructions that we found to be invariant, place sequentially
        -:  229:  // right before the for loop.
        -:  230:  for (auto *op : opsToMove) {
        -:  231:    op->moveBefore(forOp);
        -:  232:  }
        -:  233:
        -:  234:  LLVM_DEBUG(forOp->print(llvm::dbgs() << "Modified loop\n"));
        -:  235:}
        -:  236:
function _ZN12_GLOBAL__N_123LoopInvariantCodeMotion14runOnOperationEv called 410 returned 100% blocks executed 100%
      410:  237:void LoopInvariantCodeMotion::runOnOperation() {
        -:  238:  // Walk through all loops in a function in innermost-loop-first order.  This
        -:  239:  // way, we first LICM from the inner loop, and place the ops in
        -:  240:  // the outer loop, which in turn can be further LICM'ed.
function _ZZN12_GLOBAL__N_123LoopInvariantCodeMotion14runOnOperationEvENKUlN4mlir11AffineForOpEE_clES2_.isra.0 called 2112 returned 100% blocks executed 36%
     2522:  241:  getOperation().walk([&](AffineForOp op) {
call    0 returned 100%
call    1 returned 100%
    2112*:  242:    LLVM_DEBUG(op->print(llvm::dbgs() << "\nOriginal loop\n"));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
     2112:  243:    runOnAffineForOp(op);
call    0 returned 100%
     2112:  244:  });
      410:  245:}
        -:  246:
        -:  247:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir39createAffineLoopInvariantCodeMotionPassEv called 116689 returned 100% blocks executed 100%
   116689:  248:mlir::createAffineLoopInvariantCodeMotionPass() {
   116689:  249:  return std::make_unique<LoopInvariantCodeMotion>();
call    0 returned 100%
        -:  250:}
