        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Utils/StructuredOpsUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Interchange.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/Interchange.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- StructuredOpsUtils.h - Utilities used by structured ops --*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This header file define utilities that operate on builtin types and are
        -:   10:// useful across multiple dialects that use structured ops abstractions. These
        -:   11:// abstractions consist of define custom operations that encode and transport
        -:   12:// information about their semantics (e.g. type of iterators like parallel,
        -:   13:// reduction, etc..) as attributes.
        -:   14://
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:#ifndef MLIR_DIALECT_UTILS_STRUCTUREDOPSUTILS_H
        -:   18:#define MLIR_DIALECT_UTILS_STRUCTUREDOPSUTILS_H
        -:   19:
        -:   20:#include "mlir/IR/AffineMap.h"
        -:   21:#include "mlir/IR/BuiltinAttributes.h"
        -:   22:#include "mlir/IR/Location.h"
        -:   23:#include "mlir/Support/LLVM.h"
        -:   24:#include "llvm/ADT/StringRef.h"
        -:   25:
        -:   26:// Pull in all enum type definitions and utility function declarations.
        -:   27:#include "mlir/Dialect/Utils/DialectUtilsEnums.h.inc"
        -:   28:
        -:   29:namespace mlir {
        -:   30:
        -:   31:class OpBuilder;
        -:   32:
        -:   33:/// Tests whether the given maps describe a row major matmul. The test is
        -:   34:/// permutation-invariant. Note that this only checks the affine maps from an
        -:   35:/// operation, so does not perform any checks on the math being performed within
        -:   36:/// the reduction.
        -:   37:bool isRowMajorMatmul(ArrayAttr indexingMaps);
        -:   38:
        -:   39:/// Tests whether the given maps describe a column major matmul. The test is
        -:   40:/// permutation-invariant. Note that this only checks the affine maps from an
        -:   41:/// operation, so does not perform any checks on the math being performed within
        -:   42:/// the reduction.
        -:   43:bool isColumnMajorMatmul(ArrayAttr indexingMaps);
        -:   44:
        -:   45:/// Tests whether the given maps describe a row major batch matmul. The test is
        -:   46:/// permutation-invariant. Note that this only checks the affine maps from an
        -:   47:/// operation, so does not perform any checks on the math being performed within
        -:   48:/// the reduction.
        -:   49:bool isRowMajorBatchMatmul(ArrayAttr indexingMaps);
        -:   50:
        -:   51:/// Attribute name for the AffineArrayAttr which encodes the relationship
        -:   52:/// between a structured op iterators' and its operands.
    #####:   53:constexpr StringRef getIndexingMapsAttrName() { return "indexing_maps"; }
call    0 never executed
        -:   54:
        -:   55:/// Attribute name for the StrArrayAttr which encodes the type of a structured
        -:   56:/// op's iterators.
    #####:   57:constexpr StringRef getIteratorTypesAttrName() { return "iterator_types"; }
call    0 never executed
        -:   58:
        -:   59:/// Attribute name for the StrArrayAttr which encodes the distribution type for
        -:   60:/// `linalg.tiled_loop`.
        -:   61:constexpr StringRef getDistributionTypesAttrName() {
        -:   62:  return "distribution_types";
        -:   63:}
        -:   64:
        -:   65:/// Attribute name for the StringAttr which encodes an optional documentation
        -:   66:/// string of the structured op.
        -:   67:constexpr StringRef getDocAttrName() { return "doc"; }
        -:   68:
        -:   69:/// Attribute name for the StrArrayAttr which encodes the external library
        -:   70:/// function that implements the structured op.
        -:   71:constexpr StringRef getLibraryCallAttrName() { return "library_call"; }
        -:   72:
        -:   73:/// Attribute name for the StrArrayAttr which encodes the value of strides.
        -:   74:constexpr StringRef getStridesAttrName() { return "strides"; }
        -:   75:
        -:   76:/// Attribute name for the StrArrayAttr which encodes the value of dilations.
        -:   77:constexpr StringRef getDilationsAttrName() { return "dilations"; }
        -:   78:
        -:   79:/// Attribute name for the StrArrayAttr which encodes the value of paddings.
        -:   80:constexpr StringRef getPaddingAttrName() { return "padding"; }
        -:   81:
        -:   82:/// Use to encode that a particular iterator type has parallel semantics.
        -:   83:constexpr StringRef getParallelIteratorTypeName() { return "parallel"; }
        -:   84:
        -:   85:/// Use to encode that a particular iterator type has reduction semantics.
        -:   86:constexpr StringRef getReductionIteratorTypeName() { return "reduction"; }
        -:   87:
        -:   88:/// Use to encode that a particular iterator type has window semantics.
        -:   89:constexpr StringRef getWindowIteratorTypeName() { return "window"; }
        -:   90:
        -:   91:/// Use to encode that a particular iterator type has window semantics.
    #####:   92:inline ArrayRef<StringRef> getAllIteratorTypeNames() {
    #####:   93:  static constexpr StringRef names[3] = {getParallelIteratorTypeName(),
        -:   94:                                         getReductionIteratorTypeName(),
        -:   95:                                         getWindowIteratorTypeName()};
    #####:   96:  return llvm::makeArrayRef(names);
        -:   97:}
        -:   98:
        -:   99:/// Returns the iterator of a certain type.
function _ZN4mlir15getNumIteratorsEN4llvm9StringRefENS0_8ArrayRefIS1_EE called 0 returned 0% blocks executed 0%
    #####:  100:inline unsigned getNumIterators(StringRef name,
        -:  101:                                ArrayRef<StringRef> iteratorTypes) {
    #####:  102:  auto names = getAllIteratorTypeNames();
branch  0 never executed
branch  1 never executed
    #####:  103:  (void)names;
    #####:  104:  assert(llvm::is_contained(names, name));
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  105:  return llvm::count(iteratorTypes, name);
        -:  106:}
        -:  107:
    #####:  108:inline unsigned getNumIterators(ArrayRef<StringRef> iteratorTypes) {
        -:  109:  unsigned res = 0;
    #####:  110:  for (auto n : getAllIteratorTypeNames())
branch  0 never executed
branch  1 never executed
    #####:  111:    res += getNumIterators(n, iteratorTypes);
call    0 never executed
    #####:  112:  return res;
branch  0 never executed
branch  1 never executed
        -:  113:}
        -:  114:
        -:  115:/// Return positions in `iteratorTypes` that match `iteratorTypeName`.
        -:  116:inline void findPositionsOfType(ArrayRef<StringRef> iteratorTypes,
        -:  117:                                StringRef iteratorTypeName,
        -:  118:                                SmallVectorImpl<unsigned> &res) {
        -:  119:  for (const auto &en : llvm::enumerate(iteratorTypes)) {
        -:  120:    if (en.value() == iteratorTypeName)
        -:  121:      res.push_back(en.index());
        -:  122:  }
        -:  123:}
        -:  124:
        -:  125:/// Helper StructuredGenerator class to manipulate and rewrite ops with
        -:  126:/// `StructuredOpInterface`. This is templated for now because VectorOps do not
        -:  127:/// yet implement the StructuredOpInterface itself.
        -:  128:template <typename StructuredOpInterface>
        -:  129:class StructuredGenerator {
        -:  130:public:
        -:  131:  using MapList = ArrayRef<ArrayRef<AffineExpr>>;
        -:  132:
        -:  133:  struct IteratorType {
        -:  134:    IteratorType(StringRef strRef) : strRef(strRef) {}
        -:  135:    bool isOfType(StringRef typeName) const { return typeName == strRef; }
        -:  136:    StringRef strRef;
        -:  137:  };
        -:  138:  struct Par : public IteratorType {
        -:  139:    Par() : IteratorType(getParallelIteratorTypeName()) {}
        -:  140:  };
        -:  141:  struct Red : public IteratorType {
        -:  142:    Red() : IteratorType(getReductionIteratorTypeName()) {}
        -:  143:  };
        -:  144:  struct Win : public IteratorType {
        -:  145:    Win() : IteratorType(getWindowIteratorTypeName()) {}
        -:  146:  };
        -:  147:
        -:  148:  StructuredGenerator(OpBuilder &builder, StructuredOpInterface op)
        -:  149:      : builder(builder), ctx(op.getContext()), loc(op.getLoc()),
        -:  150:        iterators(op.getIteratorTypeNames()), maps(op.getIndexingMapsArray()),
        -:  151:        op(op) {}
        -:  152:
        -:  153:  bool iters(ArrayRef<IteratorType> its) {
        -:  154:    if (its.size() != iterators.size())
        -:  155:      return false;
        -:  156:    for (int i = 0, e = its.size(); i != e; ++i) {
        -:  157:      if (!its[i].isOfType(iterators[i]))
        -:  158:        return false;
        -:  159:    }
        -:  160:    return true;
        -:  161:  }
        -:  162:
        -:  163:  bool layout(MapList l) {
        -:  164:    auto infer = [](MapList m) { return AffineMap::inferFromExprList(m); };
        -:  165:    return maps == infer(l);
        -:  166:  }
        -:  167:
        -:  168:protected:
        -:  169:  OpBuilder &builder;
        -:  170:  MLIRContext *ctx;
        -:  171:  Location loc;
        -:  172:  SmallVector<StringRef> iterators;
        -:  173:  SmallVector<AffineMap, 4> maps;
        -:  174:  Operation *op;
        -:  175:};
        -:  176:
        -:  177:} // namespace mlir
        -:  178:
        -:  179:#endif // MLIR_DIALECT_UTILS_STRUCTUREDOPSUTILS_H
