        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/Utils/CommutativityUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/CommutativityUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/CommutativityUtils.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- CommutativityUtils.cpp - Commutativity utilities ---------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a commutativity utility pattern and a function to
        -:   10:// populate this pattern. The function is intended to be used inside passes to
        -:   11:// simplify the matching of commutative operations by fixing the order of their
        -:   12:// operands.
        -:   13://
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#include "mlir/Transforms/CommutativityUtils.h"
        -:   17:
        -:   18:#include <queue>
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:/// The possible "types" of ancestors. Here, an ancestor is an op or a block
        -:   23:/// argument present in the backward slice of a value.
        -:   24:enum AncestorType {
        -:   25:  /// Pertains to a block argument.
        -:   26:  BLOCK_ARGUMENT,
        -:   27:
        -:   28:  /// Pertains to a non-constant-like op.
        -:   29:  NON_CONSTANT_OP,
        -:   30:
        -:   31:  /// Pertains to a constant-like op.
        -:   32:  CONSTANT_OP
        -:   33:};
        -:   34:
        -:   35:/// Stores the "key" associated with an ancestor.
        -:   36:struct AncestorKey {
        -:   37:  /// Holds `BLOCK_ARGUMENT`, `NON_CONSTANT_OP`, or `CONSTANT_OP`, depending on
        -:   38:  /// the ancestor.
        -:   39:  AncestorType type;
        -:   40:
        -:   41:  /// Holds the op name of the ancestor if its `type` is `NON_CONSTANT_OP` or
        -:   42:  /// `CONSTANT_OP`. Else, holds "".
        -:   43:  StringRef opName;
        -:   44:
        -:   45:  /// Constructor for `AncestorKey`.
function _ZN11AncestorKeyC2EPN4mlir9OperationE called 712 returned 100% blocks executed 100%
      712:   46:  AncestorKey(Operation *op) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      712:   47:    if (!op) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      459:   48:      type = BLOCK_ARGUMENT;
        -:   49:    } else {
      253:   50:      type =
call    0 returned 100%
      253:   51:          op->hasTrait<OpTrait::ConstantLike>() ? CONSTANT_OP : NON_CONSTANT_OP;
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
      253:   52:      opName = op->getName().getStringRef();
call    0 returned 100%
        -:   53:    }
      712:   54:  }
        -:   55:
        -:   56:  /// Overloaded operator `<` for `AncestorKey`.
        -:   57:  ///
        -:   58:  /// AncestorKeys of type `BLOCK_ARGUMENT` are considered the smallest, those
        -:   59:  /// of type `CONSTANT_OP`, the largest, and `NON_CONSTANT_OP` types come in
        -:   60:  /// between. Within the types `NON_CONSTANT_OP` and `CONSTANT_OP`, the smaller
        -:   61:  /// ones are the ones with smaller op names (lexicographically).
        -:   62:  ///
        -:   63:  /// TODO: Include other information like attributes, value type, etc., to
        -:   64:  /// enhance this comparison. For example, currently this comparison doesn't
        -:   65:  /// differentiate between `cmpi sle` and `cmpi sgt` or `addi (in i32)` and
        -:   66:  /// `addi (in i64)`. Such an enhancement should only be done if the need
        -:   67:  /// arises.
      706:   68:  bool operator<(const AncestorKey &key) const {
      350:   69:    return std::tie(type, opName) < std::tie(key.type, key.opName);
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   70:  }
        -:   71:};
        -:   72:
        -:   73:/// Stores a commutative operand along with its BFS traversal information.
        -:   74:struct CommutativeOperand {
        -:   75:  /// Stores the operand.
        -:   76:  Value operand;
        -:   77:
        -:   78:  /// Stores the queue of ancestors of the operand's BFS traversal at a
        -:   79:  /// particular point in time.
        -:   80:  std::queue<Operation *> ancestorQueue;
        -:   81:
        -:   82:  /// Stores the list of ancestors that have been visited by the BFS traversal
        -:   83:  /// at a particular point in time.
        -:   84:  DenseSet<Operation *> visitedAncestors;
        -:   85:
        -:   86:  /// Stores the operand's "key". This "key" is defined as a list of the
        -:   87:  /// "AncestorKeys" associated with the ancestors of this operand, in a
        -:   88:  /// breadth-first order.
        -:   89:  ///
        -:   90:  /// So, if an operand, say `A`, was produced as follows:
        -:   91:  ///
        -:   92:  /// `<block argument>`  `<block argument>`
        -:   93:  ///             \          /
        -:   94:  ///              \        /
        -:   95:  ///             `arith.subi`           `arith.constant`
        -:   96:  ///                       \            /
        -:   97:  ///                        `arith.addi`
        -:   98:  ///                              |
        -:   99:  ///                         returns `A`
        -:  100:  ///
        -:  101:  /// Then, the ancestors of `A`, in the breadth-first order are:
        -:  102:  /// `arith.addi`, `arith.subi`, `arith.constant`, `<block argument>`, and
        -:  103:  /// `<block argument>`.
        -:  104:  ///
        -:  105:  /// Thus, the "key" associated with operand `A` is:
        -:  106:  /// {
        -:  107:  ///  {type: `NON_CONSTANT_OP`, opName: "arith.addi"},
        -:  108:  ///  {type: `NON_CONSTANT_OP`, opName: "arith.subi"},
        -:  109:  ///  {type: `CONSTANT_OP`, opName: "arith.constant"},
        -:  110:  ///  {type: `BLOCK_ARGUMENT`, opName: ""},
        -:  111:  ///  {type: `BLOCK_ARGUMENT`, opName: ""}
        -:  112:  /// }
        -:  113:  SmallVector<AncestorKey, 4> key;
        -:  114:
        -:  115:  /// Push an ancestor into the operand's BFS information structure. This
        -:  116:  /// entails it being pushed into the queue (always) and inserted into the
        -:  117:  /// "visited ancestors" list (iff it is an op rather than a block argument).
function _ZN18CommutativeOperand12pushAncestorEPN4mlir9OperationE called 712 returned 100% blocks executed 86%
      712:  118:  void pushAncestor(Operation *op) {
      712:  119:    ancestorQueue.push(op);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      712:  120:    if (op)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
      253:  121:      visitedAncestors.insert(op);
call    0 returned 100%
      712:  122:  }
        -:  123:
        -:  124:  /// Refresh the key.
        -:  125:  ///
        -:  126:  /// Refreshing a key entails making it up-to-date with the operand's BFS
        -:  127:  /// traversal that has happened till that point in time, i.e, appending the
        -:  128:  /// existing key with the front ancestor's "AncestorKey". Note that a key
        -:  129:  /// directly reflects the BFS and thus needs to be refreshed during the
        -:  130:  /// progression of the traversal.
function _ZN18CommutativeOperand10refreshKeyEv called 1026 returned 100% blocks executed 100%
     1026:  131:  void refreshKey() {
     1026:  132:    if (ancestorQueue.empty())
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
      314:  133:      return;
        -:  134:
      712:  135:    Operation *frontAncestor = ancestorQueue.front();
call    0 returned 100%
      712:  136:    AncestorKey frontAncestorKey(frontAncestor);
call    0 returned 100%
      712:  137:    key.push_back(frontAncestorKey);
call    0 returned 100%
        -:  138:  }
        -:  139:
        -:  140:  /// Pop the front ancestor, if any, from the queue and then push its adjacent
        -:  141:  /// unvisited ancestors, if any, to the queue (this is the main body of the
        -:  142:  /// BFS algorithm).
function _ZN18CommutativeOperand41popFrontAndPushAdjacentUnvisitedAncestorsEv called 350 returned 100% blocks executed 100%
      350:  143:  void popFrontAndPushAdjacentUnvisitedAncestors() {
      350:  144:    if (ancestorQueue.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  145:      return;
      350:  146:    Operation *frontAncestor = ancestorQueue.front();
call    0 returned 100%
      350:  147:    ancestorQueue.pop();
call    0 returned 100%
      350:  148:    if (!frontAncestor)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  149:      return;
       80:  150:    for (Value operand : frontAncestor->getOperands()) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
call    3 returned 100%
       36:  151:      Operation *operandDefOp = operand.getDefiningOp();
call    0 returned 100%
       36:  152:      if (!operandDefOp || !visitedAncestors.contains(operandDefOp))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       36:  153:        pushAncestor(operandDefOp);
call    0 returned 100%
        -:  154:    }
        -:  155:  }
        -:  156:};
        -:  157:
        -:  158:/// Sorts the operands of `op` in ascending order of the "key" associated with
        -:  159:/// each operand iff `op` is commutative. This is a stable sort.
        -:  160:///
        -:  161:/// After the application of this pattern, since the commutative operands now
        -:  162:/// have a deterministic order in which they occur in an op, the matching of
        -:  163:/// large DAGs becomes much simpler, i.e., requires much less number of checks
        -:  164:/// to be written by a user in her/his pattern matching function.
        -:  165:///
        -:  166:/// Some examples of such a sorting:
        -:  167:///
        -:  168:/// Assume that the sorting is being applied to `foo.commutative`, which is a
        -:  169:/// commutative op.
        -:  170:///
        -:  171:/// Example 1:
        -:  172:///
        -:  173:/// %1 = foo.const 0
        -:  174:/// %2 = foo.mul <block argument>, <block argument>
        -:  175:/// %3 = foo.commutative %1, %2
        -:  176:///
        -:  177:/// Here,
        -:  178:/// 1. The key associated with %1 is:
        -:  179:///     `{
        -:  180:///       {CONSTANT_OP, "foo.const"}
        -:  181:///      }`
        -:  182:/// 2. The key associated with %2 is:
        -:  183:///     `{
        -:  184:///       {NON_CONSTANT_OP, "foo.mul"},
        -:  185:///       {BLOCK_ARGUMENT, ""},
        -:  186:///       {BLOCK_ARGUMENT, ""}
        -:  187:///      }`
        -:  188:///
        -:  189:/// The key of %2 < the key of %1
        -:  190:/// Thus, the sorted `foo.commutative` is:
        -:  191:/// %3 = foo.commutative %2, %1
        -:  192:///
        -:  193:/// Example 2:
        -:  194:///
        -:  195:/// %1 = foo.const 0
        -:  196:/// %2 = foo.mul <block argument>, <block argument>
        -:  197:/// %3 = foo.mul %2, %1
        -:  198:/// %4 = foo.add %2, %1
        -:  199:/// %5 = foo.commutative %1, %2, %3, %4
        -:  200:///
        -:  201:/// Here,
        -:  202:/// 1. The key associated with %1 is:
        -:  203:///     `{
        -:  204:///       {CONSTANT_OP, "foo.const"}
        -:  205:///      }`
        -:  206:/// 2. The key associated with %2 is:
        -:  207:///     `{
        -:  208:///       {NON_CONSTANT_OP, "foo.mul"},
        -:  209:///       {BLOCK_ARGUMENT, ""}
        -:  210:///      }`
        -:  211:/// 3. The key associated with %3 is:
        -:  212:///     `{
        -:  213:///       {NON_CONSTANT_OP, "foo.mul"},
        -:  214:///       {NON_CONSTANT_OP, "foo.mul"},
        -:  215:///       {CONSTANT_OP, "foo.const"},
        -:  216:///       {BLOCK_ARGUMENT, ""},
        -:  217:///       {BLOCK_ARGUMENT, ""}
        -:  218:///      }`
        -:  219:/// 4. The key associated with %4 is:
        -:  220:///     `{
        -:  221:///       {NON_CONSTANT_OP, "foo.add"},
        -:  222:///       {NON_CONSTANT_OP, "foo.mul"},
        -:  223:///       {CONSTANT_OP, "foo.const"},
        -:  224:///       {BLOCK_ARGUMENT, ""},
        -:  225:///       {BLOCK_ARGUMENT, ""}
        -:  226:///      }`
        -:  227:///
        -:  228:/// Thus, the sorted `foo.commutative` is:
        -:  229:/// %5 = foo.commutative %4, %3, %2, %1
        -:  230:class SortCommutativeOperands : public RewritePattern {
        -:  231:public:
function _ZN23SortCommutativeOperandsC2EPN4mlir11MLIRContextE called 477 returned 100% blocks executed 100%
      477:  232:  SortCommutativeOperands(MLIRContext *context)
      477:  233:      : RewritePattern(MatchAnyOpTypeTag(), /*benefit=*/5, context) {}
call    0 returned 100%
call    1 returned 100%
function _ZNK23SortCommutativeOperands15matchAndRewriteEPN4mlir9OperationERNS0_15PatternRewriterE called 379903 returned 100% blocks executed 92%
   379903:  234:  LogicalResult matchAndRewrite(Operation *op,
        -:  235:                                PatternRewriter &rewriter) const override {
        -:  236:    // Custom comparator for two commutative operands, which returns true iff
        -:  237:    // the "key" of `constCommOperandA` < the "key" of `constCommOperandB`,
        -:  238:    // i.e.,
        -:  239:    // 1. In the first unequal pair of corresponding AncestorKeys, the
        -:  240:    // AncestorKey in `constCommOperandA` is smaller, or,
        -:  241:    // 2. Both the AncestorKeys in every pair are the same and the size of
        -:  242:    // `constCommOperandA`'s "key" is smaller.
   379903:  243:    auto commutativeOperandComparator =
function _ZZNK23SortCommutativeOperands15matchAndRewriteEPN4mlir9OperationERNS0_15PatternRewriterEENKUlRKSt10unique_ptrI18CommutativeOperandSt14default_deleteIS6_EESB_E_clESB_SB_ called 338 returned 100% blocks executed 90%
      338:  244:        [](const std::unique_ptr<CommutativeOperand> &constCommOperandA,
        -:  245:           const std::unique_ptr<CommutativeOperand> &constCommOperandB) {
      338:  246:          if (constCommOperandA->operand == constCommOperandB->operand)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  247:            return false;
        -:  248:
      513:  249:          auto &commOperandA =
        -:  250:              const_cast<std::unique_ptr<CommutativeOperand> &>(
        -:  251:                  constCommOperandA);
      513:  252:          auto &commOperandB =
        -:  253:              const_cast<std::unique_ptr<CommutativeOperand> &>(
        -:  254:                  constCommOperandB);
        -:  255:
        -:  256:          // Iteratively perform the BFS's of both operands until an order among
        -:  257:          // them can be determined.
        -:  258:          unsigned keyIndex = 0;
      688:  259:          while (true) {
      513:  260:            if (commOperandA->key.size() <= keyIndex) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      175:  261:              if (commOperandA->ancestorQueue.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  262:                return true;
      175:  263:              commOperandA->popFrontAndPushAdjacentUnvisitedAncestors();
call    0 returned 100%
      175:  264:              commOperandA->refreshKey();
call    0 returned 100%
        -:  265:            }
      513:  266:            if (commOperandB->key.size() <= keyIndex) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      175:  267:              if (commOperandB->ancestorQueue.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  268:                return false;
      175:  269:              commOperandB->popFrontAndPushAdjacentUnvisitedAncestors();
call    0 returned 100%
      175:  270:              commOperandB->refreshKey();
call    0 returned 100%
        -:  271:            }
      513:  272:            if (commOperandA->ancestorQueue.empty() ||
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      356:  273:                commOperandB->ancestorQueue.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      157:  274:              return commOperandA->key.size() < commOperandB->key.size();
      356:  275:            if (commOperandA->key[keyIndex] < commOperandB->key[keyIndex])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
        -:  276:              return true;
      350:  277:            if (commOperandB->key[keyIndex] < commOperandA->key[keyIndex])
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  278:              return false;
      175:  279:            keyIndex++;
        -:  280:          }
        -:  281:        };
        -:  282:
        -:  283:    // If `op` is not commutative, do nothing.
   379903:  284:    if (!op->hasTrait<OpTrait::IsCommutative>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
   379569:  285:      return failure();
        -:  286:
        -:  287:    // Populate the list of commutative operands.
      338:  288:    SmallVector<Value, 2> operands = op->getOperands();
call    0 returned 100%
call    1 returned 100%
      676:  289:    SmallVector<std::unique_ptr<CommutativeOperand>, 2> commOperands;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1014:  290:    for (Value operand : operands) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      676:  291:      std::unique_ptr<CommutativeOperand> commOperand =
     1352:  292:          std::make_unique<CommutativeOperand>();
call    0 returned 100%
      676:  293:      commOperand->operand = operand;
call    0 returned 100%
      676:  294:      commOperand->pushAncestor(operand.getDefiningOp());
call    0 returned 100%
call    1 returned 100%
      676:  295:      commOperand->refreshKey();
call    0 returned 100%
      676:  296:      commOperands.push_back(std::move(commOperand));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  297:    }
        -:  298:
        -:  299:    // Sort the operands.
      338:  300:    std::stable_sort(commOperands.begin(), commOperands.end(),
call    0 returned 100%
        -:  301:                     commutativeOperandComparator);
      676:  302:    SmallVector<Value, 2> sortedOperands;
call    0 returned 100%
     1014:  303:    for (const std::unique_ptr<CommutativeOperand> &commOperand : commOperands)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      676:  304:      sortedOperands.push_back(commOperand->operand);
call    0 returned 100%
      676:  305:    if (sortedOperands == operands)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
      332:  306:      return failure();
function _ZZNK23SortCommutativeOperands15matchAndRewriteEPN4mlir9OperationERNS0_15PatternRewriterEENKUlvE0_clEv.isra.0 called 6 returned 100% blocks executed 100%
       12:  307:    rewriter.updateRootInPlace(op, [&] { op->setOperands(sortedOperands); });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      338:  308:    return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  309:  }
        -:  310:};
        -:  311:
function _ZN4mlir34populateCommutativityUtilsPatternsERNS_17RewritePatternSetE called 477 returned 99% blocks executed 100%
      477:  312:void mlir::populateCommutativityUtilsPatterns(RewritePatternSet &patterns) {
      477:  313:  patterns.add<SortCommutativeOperands>(patterns.getContext());
call    0 returned 99%
      474:  314:}
