        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Func/Transforms/FuncBufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Func/Transforms/CMakeFiles/obj.MLIRFuncTransforms.dir/FuncBufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Func/Transforms/CMakeFiles/obj.MLIRFuncTransforms.dir/FuncBufferize.cpp.gcda
        -:    0:Runs:116158
        -:    1://===- Bufferize.cpp - Bufferization for func ops -------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements bufferization of func.func's and func.call's.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Func/Transforms/Passes.h"
        -:   14:
        -:   15:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   16:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:#include "mlir/Dialect/Func/Transforms/FuncConversions.h"
        -:   19:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   20:#include "mlir/Transforms/DialectConversion.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:#define GEN_PASS_DEF_FUNCBUFFERIZE
        -:   24:#include "mlir/Dialect/Func/Transforms/Passes.h.inc"
        -:   25:} // namespace mlir
        -:   26:
        -:   27:using namespace mlir;
        -:   28:using namespace mlir::func;
        -:   29:
        -:   30:namespace {
  116723*:   31:struct FuncBufferizePass : public impl::FuncBufferizeBase<FuncBufferizePass> {
call    0 never executed
call    1 returned 100%
        -:   32:  using FuncBufferizeBase<FuncBufferizePass>::FuncBufferizeBase;
function _ZN12_GLOBAL__N_117FuncBufferizePass14runOnOperationEv called 429 returned 100% blocks executed 100%
      429:   33:  void runOnOperation() override {
      429:   34:    auto module = getOperation();
call    0 returned 100%
      429:   35:    auto *context = &getContext();
call    0 returned 100%
        -:   36:
      429:   37:    bufferization::BufferizeTypeConverter typeConverter;
call    0 returned 100%
      858:   38:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      858:   39:    ConversionTarget target(*context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   40:
      429:   41:    populateFunctionOpInterfaceTypeConversionPattern<FuncOp>(patterns,
call    0 returned 100%
        -:   42:                                                             typeConverter);
function _ZZN12_GLOBAL__N_117FuncBufferizePass14runOnOperationEvENKUlN4mlir4func6FuncOpEE_clES3_.isra.0 called 1282 returned 100% blocks executed 89%
     1711:   43:    target.addDynamicallyLegalOp<FuncOp>([&](FuncOp op) {
call    0 returned 100%
     2144:   44:      return typeConverter.isSignatureLegal(op.getFunctionType()) &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      862:   45:             typeConverter.isLegal(&op.getBody());
call    0 returned 100%
call    1 returned 100%
        -:   46:    });
      429:   47:    populateCallOpTypeConversionPattern(patterns, typeConverter);
call    0 returned 100%
      429:   48:    target.addDynamicallyLegalOp<CallOp>(
call    0 returned 100%
      177:   49:        [&](CallOp op) { return typeConverter.isLegal(op); });
call    0 returned 100%
        -:   50:
      858:   51:    populateBranchOpInterfaceTypeConversionPattern(patterns, typeConverter);
call    0 returned 100%
call    1 returned 100%
      429:   52:    populateReturnOpTypeConversionPattern(patterns, typeConverter);
call    0 returned 100%
      429:   53:    target.addLegalOp<ModuleOp, bufferization::ToTensorOp,
      429:   54:                      bufferization::ToMemrefOp>();
call    0 returned 100%
        -:   55:
function _ZZN12_GLOBAL__N_117FuncBufferizePass14runOnOperationEvENKUlPN4mlir9OperationEE1_clES3_.isra.0 called 1743145 returned 100% blocks executed 100%
  1743574:   56:    target.markUnknownOpDynamicallyLegal([&](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
  1744166:   57:      return isNotBranchOpInterfaceOrReturnLikeOp(op) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1021:   58:             isLegalForBranchOpInterfaceTypeConversionPattern(op,
  1744166:   59:                                                              typeConverter) ||
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 93% (fallthrough)
branch  4 taken 7%
     1021:   60:             isLegalForReturnOpTypeConversionPattern(op, typeConverter);
call    0 returned 100%
        -:   61:    });
        -:   62:
      429:   63:    if (failed(applyFullConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 100%
        1:   64:      signalPassFailure();
call    0 returned 100%
      429:   65:  }
        -:   66:};
        -:   67:} // namespace
        -:   68:
function _ZN4mlir4func23createFuncBufferizePassEv called 116723 returned 100% blocks executed 100%
   116723:   69:std::unique_ptr<Pass> mlir::func::createFuncBufferizePass() {
   116723:   70:  return std::make_unique<FuncBufferizePass>();
call    0 returned 100%
        -:   71:}
