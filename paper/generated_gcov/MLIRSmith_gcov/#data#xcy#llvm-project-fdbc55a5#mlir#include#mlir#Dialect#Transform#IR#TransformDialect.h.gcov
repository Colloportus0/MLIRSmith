        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Transform/IR/TransformDialect.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/TransformOps/CMakeFiles/obj.MLIRLinalgTransformOps.dir/LinalgTransformOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/TransformOps/CMakeFiles/obj.MLIRLinalgTransformOps.dir/LinalgTransformOps.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- TransformDialect.h - Transform Dialect Definition --------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_DIALECT_TRANSFORM_IR_TRANSFORMDIALECT_H
        -:   10:#define MLIR_DIALECT_TRANSFORM_IR_TRANSFORMDIALECT_H
        -:   11:
        -:   12:#include "mlir/IR/Dialect.h"
        -:   13:#include "mlir/IR/PatternMatch.h"
        -:   14:#include "mlir/Support/LLVM.h"
        -:   15:#include "llvm/ADT/DenseMap.h"
        -:   16:#include "llvm/ADT/StringMap.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:namespace transform {
        -:   20:#ifndef NDEBUG
        -:   21:namespace detail {
        -:   22:/// Asserts that the operations provided as template arguments implement the
        -:   23:/// TransformOpInterface and MemoryEffectsOpInterface. This must be a dynamic
        -:   24:/// assertion since interface implementations may be registered at runtime.
        -:   25:void checkImplementsTransformOpInterface(StringRef name, MLIRContext *context);
        -:   26:
        -:   27:/// Asserts that the type provided as template argument implements the
        -:   28:/// TransformTypeInterface. This must be a dynamic assertion since interface
        -:   29:/// implementations may be registered at runtime.
        -:   30:void checkImplementsTransformTypeInterface(TypeID typeID, MLIRContext *context);
        -:   31:} // namespace detail
        -:   32:#endif // NDEBUG
        -:   33:} // namespace transform
        -:   34:} // namespace mlir
        -:   35:
        -:   36:#include "mlir/Dialect/Transform/IR/TransformDialect.h.inc"
        -:   37:
        -:   38:namespace mlir {
        -:   39:namespace transform {
        -:   40:
        -:   41:/// Base class for extensions of the Transform dialect that supports injecting
        -:   42:/// operations into the Transform dialect at load time. Concrete extensions are
        -:   43:/// expected to derive this class and register operations in the constructor.
        -:   44:/// They can be registered with the DialectRegistry and automatically applied
        -:   45:/// to the Transform dialect when it is loaded.
        -:   46:///
        -:   47:/// Derived classes are expected to define a `void init()` function in which
        -:   48:/// they can call various protected methods of the base class to register
        -:   49:/// extension operations and declare their dependencies.
        -:   50:///
        -:   51:/// By default, the extension is configured both for construction of the
        -:   52:/// Transform IR and for its application to some payload. If only the
        -:   53:/// construction is desired, the extension can be switched to "build-only" mode
        -:   54:/// that avoids loading the dialects that are only necessary for transforming
        -:   55:/// the payload. To perform the switch, the extension must be wrapped into the
        -:   56:/// `BuildOnly` class template (see below) when it is registered, as in:
        -:   57:///
        -:   58:///    dialectRegistry.addExtension<BuildOnly<MyTransformDialectExt>>();
        -:   59:///
        -:   60:/// instead of:
        -:   61:///
        -:   62:///    dialectRegistry.addExtension<MyTransformDialectExt>();
        -:   63:///
        -:   64:/// Derived classes must reexport the constructor of this class or otherwise
        -:   65:/// forward its boolean argument to support this behavior.
        -:   66:template <typename DerivedTy, typename... ExtraDialects>
        -:   67:class TransformDialectExtension
        -:   68:    : public DialectExtension<DerivedTy, TransformDialect, ExtraDialects...> {
        -:   69:  using Initializer = std::function<void(TransformDialect *)>;
        -:   70:  using DialectLoader = std::function<void(MLIRContext *)>;
        -:   71:
        -:   72:public:
        -:   73:  /// Extension application hook. Actually loads the dependent dialects and
        -:   74:  /// registers the additional operations. Not expected to be called directly.
function _ZNK4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE5applyEPNS_11MLIRContextEPNS0_16TransformDialectE called 0 returned 0% blocks executed 0%
    #####:   75:  void apply(MLIRContext *context, TransformDialect *transformDialect,
        -:   76:             ExtraDialects *...) const final {
    #####:   77:    for (const DialectLoader &loader : dialectLoaders)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   78:      loader(context);
        -:   79:
        -:   80:    // Only load generated dialects if the user intends to apply
        -:   81:    // transformations specified by the extension.
    #####:   82:    if (!buildOnly)
branch  0 never executed
branch  1 never executed
    #####:   83:      for (const DialectLoader &loader : generatedDialectLoaders)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   84:        loader(context);
        -:   85:
    #####:   86:    for (const Initializer &init : opInitializers)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   87:      init(transformDialect);
    #####:   88:    transformDialect->mergeInPDLMatchHooks(std::move(pdlMatchConstraintFns));
call    0 never executed
    #####:   89:  }
        -:   90:
        -:   91:protected:
        -:   92:  using Base = TransformDialectExtension<DerivedTy, ExtraDialects...>;
        -:   93:
        -:   94:  /// Extension constructor. The argument indicates whether to skip generated
        -:   95:  /// dialects when applying the extension.
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEEC2Eb called 116159 returned 100% blocks executed 100%
   116159:   96:  explicit TransformDialectExtension(bool buildOnly = false)
   116159:   97:      : buildOnly(buildOnly) {
call    0 returned 100%
call    1 returned 100%
   116159:   98:    static_cast<DerivedTy *>(this)->init();
call    0 returned 100%
   116159:   99:  }
        -:  100:
        -:  101:  /// Hook for derived classes to inject constructor behavior.
        -:  102:  void init() {}
        -:  103:
        -:  104:  /// Injects the operations into the Transform dialect. The operations must
        -:  105:  /// implement the TransformOpInterface and MemoryEffectsOpInterface, and the
        -:  106:  /// implementations must be already available when the operation is injected.
        -:  107:  template <typename... OpTys>
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE20registerTransformOpsIJNS0_11DecomposeOpENS0_20FuseIntoContainingOpENS0_6FuseOpENS0_12GeneralizeOpENS0_13InterchangeOpENS0_7MatchOpENS0_16MultiTileSizesOpENS0_5PadOpENS0_9PromoteOpENS0_11ScalarizeOpENS0_7SplitOpENS0_16SplitReductionOpENS0_6TileOpENS0_21TileToForeachThreadOpENS0_14TileToScfForOpENS0_11VectorizeOpEEEEvv called 116159 returned 100% blocks executed 75%
   116159:  108:  void registerTransformOps() {
  116159*:  109:    opInitializers.push_back([](TransformDialect *transformDialect) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  110:      transformDialect->addOperationsChecked<OpTys...>();
call    0 never executed
        -:  111:    });
   116159:  112:  }
        -:  113:
        -:  114:  /// Injects the types into the Transform dialect. The types must implement
        -:  115:  /// the TransformTypeInterface and the implementation must be already
        -:  116:  /// available when the type is injected. Furthermore, the types must provide
        -:  117:  /// a `getMnemonic` static method returning an object convertible to
        -:  118:  /// `StringRef` that is unique across all injected types.
        -:  119:  template <typename... TypeTys>
        -:  120:  void registerTypes() {
        -:  121:    opInitializers.push_back([](TransformDialect *transformDialect) {
        -:  122:      transformDialect->addTypesChecked<TypeTys...>();
        -:  123:    });
        -:  124:  }
        -:  125:
        -:  126:  /// Declares that this Transform dialect extension depends on the dialect
        -:  127:  /// provided as template parameter. When the Transform dialect is loaded,
        -:  128:  /// dependent dialects will be loaded as well. This is intended for dialects
        -:  129:  /// that contain attributes and types used in creation and canonicalization of
        -:  130:  /// the injected operations, similarly to how the dialect definition may list
        -:  131:  /// dependent dialects. This is *not* intended for dialects entities from
        -:  132:  /// which may be produced when applying the transformations specified by ops
        -:  133:  /// registered by this extension.
        -:  134:  template <typename DialectTy>
   232318:  135:  void declareDependentDialect() {
   232318:  136:    dialectLoaders.push_back(
    #####:  137:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
call    0 never executed
call    1 never executed
   232318:  138:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareDependentDialectINS_6linalg13LinalgDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareDependentDialectINS_6linalg13LinalgDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  135:  void declareDependentDialect() {
   116159:  136:    dialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  137:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  138:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareDependentDialectINS_3pdl10PDLDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareDependentDialectINS_3pdl10PDLDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  135:  void declareDependentDialect() {
   116159:  136:    dialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  137:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  138:  }
------------------
        -:  139:
        -:  140:  /// Declares that the transformations associated with the operations
        -:  141:  /// registered by this dialect extension may produce operations from the
        -:  142:  /// dialect provided as template parameter while processing payload IR that
        -:  143:  /// does not contain the operations from said dialect. This is similar to
        -:  144:  /// dependent dialects of a pass. These dialects will be loaded along with the
        -:  145:  /// transform dialect unless the extension is in the build-only mode.
        -:  146:  template <typename DialectTy>
   580795:  147:  void declareGeneratedDialect() {
   580795:  148:    generatedDialectLoaders.push_back(
    #####:  149:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
   580795:  150:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_3gpu10GPUDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_3gpu10GPUDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  147:  void declareGeneratedDialect() {
   116159:  148:    generatedDialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  150:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_6vector13VectorDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_6vector13VectorDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  147:  void declareGeneratedDialect() {
   116159:  148:    generatedDialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  150:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_3scf10SCFDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_3scf10SCFDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  147:  void declareGeneratedDialect() {
   116159:  148:    generatedDialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  150:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_5arith12ArithDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_5arith12ArithDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  147:  void declareGeneratedDialect() {
   116159:  148:    generatedDialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  150:  }
------------------
_ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_13AffineDialectEEEvv:
function _ZN4mlir9transform25TransformDialectExtensionIN12_GLOBAL__N_131LinalgTransformDialectExtensionEJEE23declareGeneratedDialectINS_13AffineDialectEEEvv called 116159 returned 100% blocks executed 75%
   116159:  147:  void declareGeneratedDialect() {
   116159:  148:    generatedDialectLoaders.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:        [](MLIRContext *context) { context->loadDialect<DialectTy>(); });
   116159:  150:  }
------------------
        -:  151:
        -:  152:  /// Injects the named constraint to make it available for use with the
        -:  153:  /// PDLMatchOp in the transform dialect.
        -:  154:  void registerPDLMatchConstraintFn(StringRef name,
        -:  155:                                    PDLConstraintFunction &&fn) {
        -:  156:    pdlMatchConstraintFns.try_emplace(name,
        -:  157:                                      std::forward<PDLConstraintFunction>(fn));
        -:  158:  }
        -:  159:  template <typename ConstraintFnTy>
        -:  160:  void registerPDLMatchConstraintFn(StringRef name, ConstraintFnTy &&fn) {
        -:  161:    pdlMatchConstraintFns.try_emplace(
        -:  162:        name, ::mlir::detail::pdl_function_builder::buildConstraintFn(
        -:  163:                  std::forward<ConstraintFnTy>(fn)));
        -:  164:  }
        -:  165:
        -:  166:private:
        -:  167:  SmallVector<Initializer> opInitializers;
        -:  168:
        -:  169:  /// Callbacks loading the dependent dialects, i.e. the dialect needed for the
        -:  170:  /// extension ops.
        -:  171:  SmallVector<DialectLoader> dialectLoaders;
        -:  172:
        -:  173:  /// Callbacks loading the generated dialects, i.e. the dialects produced when
        -:  174:  /// applying the transformations.
        -:  175:  SmallVector<DialectLoader> generatedDialectLoaders;
        -:  176:
        -:  177:  /// A list of constraints that should be made available to PDL patterns
        -:  178:  /// processed by PDLMatchOp in the Transform dialect.
        -:  179:  ///
        -:  180:  /// Declared as mutable so its contents can be moved in the `apply` const
        -:  181:  /// method, which is only called once.
        -:  182:  mutable llvm::StringMap<PDLConstraintFunction> pdlMatchConstraintFns;
        -:  183:
        -:  184:  /// Indicates that the extension is in build-only mode.
        -:  185:  bool buildOnly;
        -:  186:};
        -:  187:
        -:  188:template <typename OpTy>
    #####:  189:void TransformDialect::addOperationIfNotRegistered() {
    #####:  190:  StringRef name = OpTy::getOperationName();
        -:  191:  Optional<RegisteredOperationName> opName =
    #####:  192:      RegisteredOperationName::lookup(name, getContext());
    #####:  193:  if (!opName) {
    #####:  194:    addOperations<OpTy>();
        -:  195:#ifndef NDEBUG
    #####:  196:    detail::checkImplementsTransformOpInterface(name, getContext());
        -:  197:#endif // NDEBUG
    #####:  198:    return;
        -:  199:  }
        -:  200:
    #####:  201:  if (opName->getTypeID() == TypeID::get<OpTy>())
        -:  202:    return;
        -:  203:
    #####:  204:  reportDuplicateOpRegistration(name);
        -:  205:}
        -:  206:
        -:  207:template <typename Type>
        -:  208:void TransformDialect::addTypeIfNotRegistered() {
        -:  209:  // Use the address of the parse method as a proxy for identifying whether we
        -:  210:  // are registering the same type class for the same mnemonic.
        -:  211:  StringRef mnemonic = Type::getMnemonic();
        -:  212:  auto [it, inserted] = typeParsingHooks.try_emplace(mnemonic, Type::parse);
        -:  213:  if (!inserted) {
        -:  214:    const ExtensionTypeParsingHook &parsingHook = it->getValue();
        -:  215:    if (parsingHook != &Type::parse)
        -:  216:      reportDuplicateTypeRegistration(mnemonic);
        -:  217:    else
        -:  218:      return;
        -:  219:  }
        -:  220:  typePrintingHooks.try_emplace(
        -:  221:      TypeID::get<Type>(), +[](mlir::Type type, AsmPrinter &printer) {
        -:  222:        printer << Type::getMnemonic();
        -:  223:        cast<Type>(type).print(printer);
        -:  224:      });
        -:  225:  addTypes<Type>();
        -:  226:
        -:  227:#ifndef NDEBUG
        -:  228:  detail::checkImplementsTransformTypeInterface(TypeID::get<Type>(),
        -:  229:                                                getContext());
        -:  230:#endif // NDEBUG
        -:  231:}
        -:  232:
        -:  233:/// A wrapper for transform dialect extensions that forces them to be
        -:  234:/// constructed in the build-only mode.
        -:  235:template <typename DerivedTy>
        -:  236:class BuildOnly : public DerivedTy {
        -:  237:public:
        -:  238:  BuildOnly() : DerivedTy(/*buildOnly=*/true) {}
        -:  239:};
        -:  240:
        -:  241:} // namespace transform
        -:  242:} // namespace mlir
        -:  243:
        -:  244:#include "mlir/Dialect/Transform/IR/TransformDialectEnums.h.inc"
        -:  245:
        -:  246:#endif // MLIR_DIALECT_TRANSFORM_IR_TRANSFORMDIALECT_H
