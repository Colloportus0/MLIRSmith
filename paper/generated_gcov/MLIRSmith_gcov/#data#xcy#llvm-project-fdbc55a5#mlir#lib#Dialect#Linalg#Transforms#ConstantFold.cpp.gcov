        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Linalg/Transforms/ConstantFold.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/ConstantFold.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Transforms/CMakeFiles/obj.MLIRLinalgTransforms.dir/ConstantFold.cpp.gcda
        -:    0:Runs:116159
        -:    1://===- ConstantFold.cpp - Implementation of constant folding on Linalg ops ===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements constant folding on Linalg operations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   14:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   15:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   16:#include "mlir/IR/Matchers.h"
        -:   17:#include "mlir/IR/PatternMatch.h"
        -:   18:#include "mlir/Support/LLVM.h"
        -:   19:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   20:
        -:   21:using namespace mlir;
        -:   22:using namespace mlir::linalg;
        -:   23:
        -:   24:namespace {
        -:   25:/// Base class for constant folding linalg.generic ops with N inputs, 1 output,
        -:   26:/// and permutation indexing maps.
        -:   27:///
        -:   28:/// `ConcreteType` should provide methods with signatures
        -:   29:///
        -:   30:/// ```c++
        -:   31:///   bool matchIndexingMaps(GenericOp genericOp) const;
        -:   32:///   RegionComputationFn getRegionComputeFn(GenericOp) const;
        -:   33:/// ```
        -:   34:///
        -:   35:/// The latter inspects the region and returns the computation inside as a
        -:   36:/// functor. The functor will be invoked with constant elements for all inputs
        -:   37:/// and should return the corresponding computed constant element for output.
        -:   38:template <typename ConcreteType>
        -:   39:class FoldConstantBase : public OpRewritePattern<GenericOp> {
        -:   40:public:
        -:   41:  struct APIntOrFloat {
        -:   42:    Optional<APInt> apInt;
        -:   43:    Optional<APFloat> apFloat;
        -:   44:  };
    #####:   45:  struct APIntOrFloatArray {
call    0 never executed
        -:   46:    SmallVector<APInt> apInts;
        -:   47:    SmallVector<APFloat> apFloats;
        -:   48:  };
        -:   49:  using RegionComputationFn =
        -:   50:      std::function<APIntOrFloat(const APIntOrFloatArray &)>;
        -:   51:
function _ZN12_GLOBAL__N_116FoldConstantBaseINS_21FoldConstantTransposeEEC2EPN4mlir11MLIRContextERKSt8functionIFbPNS3_9OpOperandEEENS3_14PatternBenefitE called 412 returned 100% blocks executed 100%
      412:   52:  FoldConstantBase(MLIRContext *context, const ControlFusionFn &controlFn,
        -:   53:                   PatternBenefit benefit = 1)
      412:   54:      : OpRewritePattern<GenericOp>(context, benefit), controlFn(controlFn) {}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   55:
function _ZNK12_GLOBAL__N_116FoldConstantBaseINS_21FoldConstantTransposeEE15matchAndRewriteEN4mlir6linalg9GenericOpERNS3_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   56:  LogicalResult matchAndRewrite(GenericOp genericOp,
        -:   57:                                PatternRewriter &rewriter) const override {
    #####:   58:    if (genericOp.hasBufferSemantics())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:      return failure();
        -:   60:
        -:   61:    // Only support ops generating one output for now.
    #####:   62:    if (genericOp.getNumDpsInits() != 1)
branch  0 never executed
branch  1 never executed
    #####:   63:      return failure();
        -:   64:
    #####:   65:    auto outputType = genericOp.getResultTypes().front().dyn_cast<ShapedType>();
call    0 never executed
call    1 never executed
        -:   66:    // Require the output types to be static given that we are generating
        -:   67:    // constants.
    #####:   68:    if (!outputType || !outputType.hasStaticShape())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   69:      return failure();
        -:   70:
    #####:   71:    if (!llvm::all_of(genericOp.getInputs(), [](Value input) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   72:          return input.getType().isa<ShapedType>();
        -:   73:        }))
    #####:   74:      return failure();
        -:   75:
        -:   76:    // Make sure all element types are the same.
function _ZZNK12_GLOBAL__N_116FoldConstantBaseINS_21FoldConstantTransposeEE15matchAndRewriteEN4mlir6linalg9GenericOpERNS3_15PatternRewriterEENKUlNS3_5ValueEE0_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   77:    auto getOperandElementType = [](Value value) {
    #####:   78:      return value.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
        -:   79:    };
    #####:   80:    if (!llvm::all_equal(
call    0 never executed
    #####:   81:            llvm::map_range(genericOp->getOperands(), getOperandElementType)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   82:      return failure();
        -:   83:
        -:   84:    // We can only handle the case where we have int/float elements.
    #####:   85:    auto elementType = outputType.getElementType();
call    0 never executed
    #####:   86:    if (!elementType.isIntOrFloat())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   87:      return failure();
        -:   88:
        -:   89:    // Require all indexing maps to be permutations for now. This is common and
        -:   90:    // it simplifies input/output access greatly: we can do the data shuffling
        -:   91:    // entirely in the compiler, without needing to turn all indices into
        -:   92:    // Values, and then do affine apply on them, and then match back the
        -:   93:    // constant again.
    #####:   94:    if (!llvm::all_of(genericOp.getIndexingMapsArray(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   95:                      [](AffineMap map) { return map.isPermutation(); }))
    #####:   96:      return failure();
        -:   97:
    #####:   98:    for (OpOperand *operand : genericOp.getDpsInitOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   99:      if (genericOp.payloadUsesValueFromOperand(operand))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  100:        return failure();
branch  0 never executed
branch  1 never executed
        -:  101:    }
        -:  102:
        -:  103:    // Further check the indexing maps are okay for the ConcreteType.
    #####:  104:    if (!static_cast<const ConcreteType *>(this)->matchIndexingMaps(genericOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  105:      return failure();
        -:  106:
        -:  107:    // Defer to the concrete type to check the region and discover the
        -:  108:    // computation inside.
    #####:  109:    RegionComputationFn computeFn =
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  110:        static_cast<const ConcreteType *>(this)->getRegionComputeFn(genericOp);
    #####:  111:    if (!computeFn)
branch  0 never executed
branch  1 never executed
    #####:  112:      return failure();
        -:  113:
        -:  114:    // All inputs should be constants.
    #####:  115:    int numInputs = genericOp.getNumDpsInputs();
call    0 never executed
    #####:  116:    SmallVector<DenseIntOrFPElementsAttr> inputValues(numInputs);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:    for (const auto &en : llvm::enumerate(genericOp.getDpsInputOperands())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  118:      if (!matchPattern(en.value()->get(),
call    0 never executed
    #####:  119:                        m_Constant(&inputValues[en.index()])))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  120:        return failure();
branch  0 never executed
branch  1 never executed
        -:  121:    }
        -:  122:
        -:  123:    // Identified this as a potential candidate for folding. Now check the
        -:  124:    // policy to see whether we are allowed to proceed.
    #####:  125:    for (OpOperand *operand : genericOp.getDpsInputOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:      if (!controlFn(operand))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  127:        return failure();
branch  0 never executed
branch  1 never executed
        -:  128:    }
        -:  129:
    #####:  130:    auto linalgOp = cast<LinalgOp>(genericOp.getOperation());
call    0 never executed
    #####:  131:    SmallVector<int64_t, 4> loopBounds = linalgOp.computeStaticLoopSizes();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  132:    int64_t numElements = outputType.getNumElements();
call    0 never executed
call    1 never executed
        -:  133:
        -:  134:    // Use APInt/APFloat instead of Attribute here for constructing the output.
        -:  135:    // This helps to avoid blowing up compiler memory usage: Attributes would
        -:  136:    // unify the following cases but they have lifetime as the MLIRContext.
    #####:  137:    SmallVector<APInt> intOutputValues;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:    SmallVector<APFloat> fpOutputValues;
call    0 never executed
call    1 never executed
    #####:  139:    if (elementType.template isa<FloatType>())
branch  0 never executed
branch  1 never executed
    #####:  140:      fpOutputValues.resize(numElements, APFloat(0.f));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  141:    else
    #####:  142:      intOutputValues.resize(numElements);
call    0 never executed
        -:  143:
        -:  144:    // Return the constant dim positions from the given permutation map.
function _ZZNK12_GLOBAL__N_116FoldConstantBaseINS_21FoldConstantTransposeEE15matchAndRewriteEN4mlir6linalg9GenericOpERNS3_15PatternRewriterEENKUlNS3_9AffineMapEE2_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  145:    auto getDimPositions = [](AffineMap map) {
    #####:  146:      SmallVector<unsigned> dims;
    #####:  147:      dims.reserve(map.getNumResults());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:      for (AffineExpr result : map.getResults()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:        dims.push_back(result.cast<AffineDimExpr>().getPosition());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  150:      }
    #####:  151:      return dims;
branch  0 never executed
branch  1 never executed
        -:  152:    };
        -:  153:
    #####:  154:    SmallVector<SmallVector<unsigned>> inputDims;
    #####:  155:    for (int i = 0; i < numInputs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  156:      inputDims.push_back(getDimPositions(genericOp.getIndexingMapsArray()[i]));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  157:    auto outputDims = getDimPositions(genericOp.getIndexingMapsArray().back());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  158:    auto outputShape = outputType.getShape();
call    0 never executed
        -:  159:
        -:  160:    // Allocate small vectors for index delinearization. Initial values do not
        -:  161:    // matter here as they will be overwritten later.
    #####:  162:    SmallVector<uint64_t> indices(loopBounds.size(), 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  163:    SmallVector<uint64_t> dstIndices(loopBounds.size(), 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  164:    SmallVector<SmallVector<uint64_t>> srcIndices(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  165:        numInputs, SmallVector<uint64_t>(loopBounds.size(), 0));
    #####:  166:    SmallVector<uint64_t> srcLinearIndices(numInputs, 0);
call    0 never executed
call    1 never executed
    #####:  167:    uint64_t dstLinearIndex = 0;
call    0 never executed
        -:  168:
        -:  169:    // Allocate spaces for compute function inputs. Initial values do not matter
        -:  170:    // here as they will be overwritten later.
    #####:  171:    APIntOrFloatArray computeFnInputs;
branch  0 never executed
branch  1 never executed
        -:  172:
    #####:  173:    auto inputShapes = llvm::to_vector<4>(
call    0 never executed
function _ZZNK12_GLOBAL__N_116FoldConstantBaseINS_21FoldConstantTransposeEE15matchAndRewriteEN4mlir6linalg9GenericOpERNS3_15PatternRewriterEENKUlNS3_5ValueEE3_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  174:        llvm::map_range(genericOp.getInputs(), [](Value value) {
call    0 never executed
call    1 never executed
    #####:  175:          return value.getType().cast<ShapedType>().getShape();
call    0 never executed
call    1 never executed
        -:  176:        }));
        -:  177:
        -:  178:    // Given a `linearIndex`, remap it to a linear index to access linalg op
        -:  179:    // inputs/ouputs. This mutates `indices`, `srcIndices`, `dstIndices`,
        -:  180:    // `srcLinearIndices`, `dstLinearIndex` in place.
function _ZZNK12_GLOBAL__N_116FoldConstantBaseINS_21FoldConstantTransposeEE15matchAndRewriteEN4mlir6linalg9GenericOpERNS3_15PatternRewriterEENKUliE4_clEi called 0 returned 0% blocks executed 0%
    #####:  181:    auto computeRemappedLinearIndex = [&](int linearIndex) {
call    0 never executed
    #####:  182:      int totalCount = linearIndex;
    #####:  183:      for (int dim = loopBounds.size() - 1; dim >= 0; --dim) {
branch  0 never executed
branch  1 never executed
    #####:  184:        indices[dim] = totalCount % loopBounds[dim];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  185:        totalCount /= loopBounds[dim];
        -:  186:      }
        -:  187:
    #####:  188:      for (int dim = loopBounds.size() - 1; dim >= 0; --dim) {
branch  0 never executed
branch  1 never executed
    #####:  189:        for (int i = 0; i < numInputs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  190:          srcIndices[i][dim] = indices[inputDims[i][dim]];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  191:        dstIndices[dim] = indices[outputDims[dim]];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  192:      }
        -:  193:
    #####:  194:      dstLinearIndex = dstIndices.front();
branch  0 never executed
branch  1 never executed
    #####:  195:      for (int i = 0; i < numInputs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  196:        srcLinearIndices[i] = srcIndices[i].front();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  197:
    #####:  198:      for (int dim = 1; dim < outputType.getRank(); ++dim) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:        dstLinearIndex = dstLinearIndex * outputShape[dim] + dstIndices[dim];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  200:        for (int i = 0; i < numInputs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  201:          srcLinearIndices[i] =
    #####:  202:              srcLinearIndices[i] * inputShapes[i][dim] + srcIndices[i][dim];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  203:      }
        -:  204:    };
        -:  205:
    #####:  206:    bool isFloat = elementType.isa<FloatType>();
    #####:  207:    if (isFloat) {
branch  0 never executed
branch  1 never executed
    #####:  208:      SmallVector<DenseElementsAttr::iterator_range<APFloat>> inFpRanges;
    #####:  209:      for (int i = 0; i < numInputs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  210:        inFpRanges.push_back(inputValues[i].getValues<APFloat>());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  211:
    #####:  212:      computeFnInputs.apFloats.resize(numInputs, APFloat(0.f));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  213:
        -:  214:      // Transpose the input constant. Because we don't know its rank in
        -:  215:      // advance, we need to loop over the range [0, element count) and
        -:  216:      // delinearize the index.
    #####:  217:      for (int linearIndex = 0; linearIndex < numElements; ++linearIndex) {
branch  0 never executed
branch  1 never executed
    #####:  218:        computeRemappedLinearIndex(linearIndex);
        -:  219:
        -:  220:        // Collect constant elements for all inputs at this loop iteration.
    #####:  221:        for (int i = 0; i < numInputs; ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  222:          computeFnInputs.apFloats[i] = inFpRanges[i][srcLinearIndices[i]];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  223:
        -:  224:        // Invoke the computation to get the corresponding constant output
        -:  225:        // element.
    #####:  226:        fpOutputValues[dstLinearIndex] = *computeFn(computeFnInputs).apFloat;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  227:      }
        -:  228:    } else {
    #####:  229:      SmallVector<DenseElementsAttr::iterator_range<APInt>> inIntRanges;
    #####:  230:      for (int i = 0; i < numInputs; ++i)
branch  0 never executed
branch  1 never executed
    #####:  231:        inIntRanges.push_back(inputValues[i].getValues<APInt>());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  232:
    #####:  233:      computeFnInputs.apInts.resize(numInputs);
call    0 never executed
        -:  234:
        -:  235:      // Transpose the input constant. Because we don't know its rank in
        -:  236:      // advance, we need to loop over the range [0, element count) and
        -:  237:      // delinearize the index.
    #####:  238:      for (int linearIndex = 0; linearIndex < numElements; ++linearIndex) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  239:        computeRemappedLinearIndex(linearIndex);
        -:  240:
        -:  241:        // Collect constant elements for all inputs at this loop iteration.
    #####:  242:        for (int i = 0; i < numInputs; ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:          computeFnInputs.apInts[i] = inIntRanges[i][srcLinearIndices[i]];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:  244:
        -:  245:        // Invoke the computation to get the corresponding constant output
        -:  246:        // element.
    #####:  247:        intOutputValues[dstLinearIndex] = *computeFn(computeFnInputs).apInt;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  248:      }
        -:  249:    }
        -:  250:
    #####:  251:    DenseElementsAttr outputAttr =
branch  0 never executed
branch  1 never executed
    #####:  252:        isFloat ? DenseElementsAttr::get(outputType, fpOutputValues)
call    0 never executed
    #####:  253:                : DenseElementsAttr::get(outputType, intOutputValues);
call    0 never executed
        -:  254:
    #####:  255:    rewriter.replaceOpWithNewOp<arith::ConstantOp>(genericOp, outputAttr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  256:    return success();
branch  0 never executed
branch  1 never executed
        -:  257:  }
        -:  258:
        -:  259:private:
        -:  260:  ControlFusionFn controlFn;
        -:  261:};
        -:  262:
        -:  263:// Folds linalg.generic ops that are actually transposes on constant values.
        -:  264:struct FoldConstantTranspose : public FoldConstantBase<FoldConstantTranspose> {
        -:  265:  using FoldConstantBase::FoldConstantBase;
        -:  266:
        -:  267:  bool matchIndexingMaps(GenericOp genericOp) const {
        -:  268:    // We should have one input and one output.
        -:  269:    return genericOp.getIndexingMapsArray().size() == 2;
        -:  270:  }
        -:  271:
        -:  272:  RegionComputationFn getRegionComputeFn(GenericOp genericOp) const {
        -:  273:    // Make sure the region only contains a yield op.
        -:  274:    Block &body = genericOp.getRegion().front();
        -:  275:    if (!llvm::hasSingleElement(body))
        -:  276:      return nullptr;
        -:  277:    auto yieldOp = dyn_cast<linalg::YieldOp>(body.getTerminator());
        -:  278:    if (!yieldOp)
        -:  279:      return nullptr;
        -:  280:
        -:  281:    // The yield op should return the block argument corresponds to the input.
        -:  282:    for (Value yieldVal : yieldOp.getValues()) {
        -:  283:      auto yieldArg = yieldVal.dyn_cast<BlockArgument>();
        -:  284:      if (!yieldArg || yieldArg.getOwner() != &body)
        -:  285:        return nullptr;
        -:  286:      if (yieldArg.getArgNumber() != 0)
        -:  287:        return nullptr;
        -:  288:    }
        -:  289:
        -:  290:    // No computation; just return the orginal value.
function _ZZNK12_GLOBAL__N_121FoldConstantTranspose18getRegionComputeFnEN4mlir6linalg9GenericOpEENKUlRKNS_16FoldConstantBaseIS0_E17APIntOrFloatArrayEE_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  291:    return [](const APIntOrFloatArray &inputs) {
    #####:  292:      if (inputs.apFloats.empty())
branch  0 never executed
branch  1 never executed
    #####:  293:        return APIntOrFloat{inputs.apInts.front(), llvm::None};
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  294:      return APIntOrFloat{llvm::None, inputs.apFloats.front()};
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  295:    };
        -:  296:  }
        -:  297:
        -:  298:  ControlFusionFn controlFn;
        -:  299:};
        -:  300:} // namespace
        -:  301:
function _ZN4mlir6linalg36populateConstantFoldLinalgOperationsERNS_17RewritePatternSetERKSt8functionIFbPNS_9OpOperandEEE called 412 returned 100% blocks executed 100%
      412:  302:void mlir::linalg::populateConstantFoldLinalgOperations(
        -:  303:    RewritePatternSet &patterns, const ControlFusionFn &controlFn) {
      412:  304:  MLIRContext *context = patterns.getContext();
call    0 returned 100%
      412:  305:  patterns.insert<FoldConstantTranspose>(context, controlFn);
call    0 returned 100%
      412:  306:}
