        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/Utils/ControlFlowSinkUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/ControlFlowSinkUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/ControlFlowSinkUtils.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- ControlFlowSinkUtils.cpp - Code to perform control-flow sinking ----===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements utilities for control-flow sinking. Control-flow
        -:   10:// sinking moves operations whose only uses are in conditionally-executed blocks
        -:   11:// into those blocks so that they aren't executed on paths where their results
        -:   12:// are not needed.
        -:   13://
        -:   14:// Control-flow sinking is not implemented on BranchOpInterface because
        -:   15:// sinking ops into the successors of branch operations may move ops into loops.
        -:   16:// It is idiomatic MLIR to perform optimizations at IR levels that readily
        -:   17:// provide the necessary information.
        -:   18://
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
        -:   21:#include "mlir/Transforms/ControlFlowSinkUtils.h"
        -:   22:#include "mlir/IR/Dominance.h"
        -:   23:#include "mlir/IR/Matchers.h"
        -:   24:#include "mlir/Interfaces/ControlFlowInterfaces.h"
        -:   25:#include <vector>
        -:   26:
        -:   27:#define DEBUG_TYPE "cf-sink"
        -:   28:
        -:   29:using namespace mlir;
        -:   30:
        -:   31:namespace {
        -:   32:/// A helper struct for control-flow sinking.
        -:   33:class Sinker {
        -:   34:public:
        -:   35:  /// Create an operation sinker with given dominance info.
    29505:   36:  Sinker(function_ref<bool(Operation *, Region *)> shouldMoveIntoRegion,
        -:   37:         function_ref<void(Operation *, Region *)> moveIntoRegion,
        -:   38:         DominanceInfo &domInfo)
    29505:   39:      : shouldMoveIntoRegion(shouldMoveIntoRegion),
    29505:   40:        moveIntoRegion(moveIntoRegion), domInfo(domInfo) {}
        -:   41:
        -:   42:  /// Given a list of regions, find operations to sink and sink them. Return the
        -:   43:  /// number of operations sunk.
        -:   44:  size_t sinkRegions(RegionRange regions);
        -:   45:
        -:   46:private:
        -:   47:  /// Given a region and an op which dominates the region, returns true if all
        -:   48:  /// users of the given op are dominated by the entry block of the region, and
        -:   49:  /// thus the operation can be sunk into the region.
        -:   50:  bool allUsersDominatedBy(Operation *op, Region *region);
        -:   51:
        -:   52:  /// Given a region and a top-level op (an op whose parent region is the given
        -:   53:  /// region), determine whether the defining ops of the op's operands can be
        -:   54:  /// sunk into the region.
        -:   55:  ///
        -:   56:  /// Add moved ops to the work queue.
        -:   57:  void tryToSinkPredecessors(Operation *user, Region *region,
        -:   58:                             std::vector<Operation *> &stack);
        -:   59:
        -:   60:  /// Iterate over all the ops in a region and try to sink their predecessors.
        -:   61:  /// Recurse on subgraphs using a work queue.
        -:   62:  void sinkRegion(Region *region);
        -:   63:
        -:   64:  /// The callback to determine whether an op should be moved in to a region.
        -:   65:  function_ref<bool(Operation *, Region *)> shouldMoveIntoRegion;
        -:   66:  /// The calback to move an operation into the region.
        -:   67:  function_ref<void(Operation *, Region *)> moveIntoRegion;
        -:   68:  /// Dominance info to determine op user dominance with respect to regions.
        -:   69:  DominanceInfo &domInfo;
        -:   70:  /// The number of operations sunk.
        -:   71:  size_t numSunk = 0;
        -:   72:};
        -:   73:} // end anonymous namespace
        -:   74:
function _ZN12_GLOBAL__N_16Sinker19allUsersDominatedByEPN4mlir9OperationEPNS1_6RegionE called 520348 returned 100% blocks executed 83%
   520348:   75:bool Sinker::allUsersDominatedBy(Operation *op, Region *region) {
  520348*:   76:  assert(region->findAncestorOpInRegion(*op) == nullptr &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   77:         "expected op to be defined outside the region");
function _ZZN12_GLOBAL__N_16Sinker19allUsersDominatedByEPN4mlir9OperationEPNS1_6RegionEENKUlS3_E_clES3_.isra.0 called 837221 returned 100% blocks executed 100%
   520348:   78:  return llvm::all_of(op->getUsers(), [&](Operation *user) {
call    0 returned 100%
call    1 returned 100%
        -:   79:    // The user is dominated by the region if its containing block is dominated
        -:   80:    // by the region's entry block.
   837221:   81:    return domInfo.dominates(&region->front(), user->getBlock());
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
   520348:   82:  });
        -:   83:}
        -:   84:
function _ZN12_GLOBAL__N_16Sinker21tryToSinkPredecessorsEPN4mlir9OperationEPNS1_6RegionERSt6vectorIS3_SaIS3_EE called 216677 returned 100% blocks executed 59%
   216677:   85:void Sinker::tryToSinkPredecessors(Operation *user, Region *region,
        -:   86:                                   std::vector<Operation *> &stack) {
  216677*:   87:  LLVM_DEBUG(user->print(llvm::dbgs() << "\nContained op:\n"));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
   780591:   88:  for (Value value : user->getOperands()) {
call    0 returned 100%
branch  1 taken 72% (fallthrough)
branch  2 taken 28%
call    3 returned 100%
   563914:   89:    Operation *op = value.getDefiningOp();
call    0 returned 100%
        -:   90:    // Ignore block arguments and ops that are already inside the region.
  1123442:   91:    if (!op || op->getParentRegion() == region)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
    43566:   92:      continue;
  520348*:   93:    LLVM_DEBUG(op->print(llvm::dbgs() << "\nTry to sink:\n"));
branch  0 taken 0%
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:   94:
        -:   95:    // If the op's users are all in the region and it can be moved, then do so.
   520348:   96:    if (allUsersDominatedBy(op, region) && shouldMoveIntoRegion(op, region)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 73% (fallthrough)
branch  5 taken 27%
     2263:   97:      moveIntoRegion(op, region);
call    0 returned 100%
     2263:   98:      ++numSunk;
        -:   99:      // Add the op to the work queue.
     2263:  100:      stack.push_back(op);
call    0 returned 100%
        -:  101:    }
        -:  102:  }
   216677:  103:}
        -:  104:
function _ZN12_GLOBAL__N_16Sinker10sinkRegionEPN4mlir6RegionE called 14565 returned 100% blocks executed 100%
    14565:  105:void Sinker::sinkRegion(Region *region) {
        -:  106:  // Initialize the work queue with all the ops in the region.
    14565:  107:  std::vector<Operation *> stack;
call    0 returned 100%
   228979:  108:  for (Operation &op : region->getOps())
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
   214414:  109:    stack.push_back(&op);
call    0 returned 100%
call    1 returned 100%
        -:  110:
        -:  111:  // Process all the ops depth-first. This ensures that nodes of subgraphs are
        -:  112:  // sunk in the correct order.
   231242:  113:  while (!stack.empty()) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
   216677:  114:    Operation *op = stack.back();
call    0 returned 100%
   216677:  115:    stack.pop_back();
call    0 returned 100%
   216677:  116:    tryToSinkPredecessors(op, region, stack);
call    0 returned 100%
        -:  117:  }
    14565:  118:}
        -:  119:
function _ZN12_GLOBAL__N_16Sinker11sinkRegionsEN4mlir11RegionRangeE called 29505 returned 100% blocks executed 100%
    29505:  120:size_t Sinker::sinkRegions(RegionRange regions) {
    60113:  121:  for (Region *region : regions)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    15304:  122:    if (!region->empty())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
    14565:  123:      sinkRegion(region);
call    0 returned 100%
    29505:  124:  return numSunk;
        -:  125:}
        -:  126:
function _ZN4mlir15controlFlowSinkENS_11RegionRangeERNS_13DominanceInfoEN4llvm12function_refIFbPNS_9OperationEPNS_6RegionEEEENS4_IFvS6_S8_EEE called 29505 returned 100% blocks executed 100%
    29505:  127:size_t mlir::controlFlowSink(
        -:  128:    RegionRange regions, DominanceInfo &domInfo,
        -:  129:    function_ref<bool(Operation *, Region *)> shouldMoveIntoRegion,
        -:  130:    function_ref<void(Operation *, Region *)> moveIntoRegion) {
    59010:  131:  return Sinker(shouldMoveIntoRegion, moveIntoRegion, domInfo)
    29505:  132:      .sinkRegions(regions);
call    0 returned 100%
        -:  133:}
        -:  134:
function _ZN4mlir30getSinglyExecutedRegionsToSinkENS_23RegionBranchOpInterfaceERN4llvm15SmallVectorImplIPNS_6RegionEEE called 29505 returned 100% blocks executed 87%
    29505:  135:void mlir::getSinglyExecutedRegionsToSink(RegionBranchOpInterface branch,
        -:  136:                                          SmallVectorImpl<Region *> &regions) {
        -:  137:  // Collect constant operands.
    53416:  138:  SmallVector<Attribute> operands(branch->getNumOperands(), Attribute());
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
call    2 returned 100%
   123477:  139:  for (auto &it : llvm::enumerate(branch->getOperands()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    46986:  140:    (void)matchPattern(it.value(), m_Constant(&operands[it.index()]));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
        -:  141:
        -:  142:  // Get the invocation bounds.
    59010:  143:  SmallVector<InvocationBounds> bounds;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    29505:  144:  branch.getRegionInvocationBounds(operands, bounds);
call    0 returned 100%
        -:  145:
        -:  146:  // For a simple control-flow sink, only consider regions that are executed at
        -:  147:  // most once.
    76843:  148:  for (auto it : llvm::zip(branch->getRegions(), bounds)) {
branch  0 taken 19%
branch  1 taken 81%
branch  2 taken 59% (fallthrough)
branch  3 taken 41%
    41744:  149:    const InvocationBounds &bound = std::get<1>(it);
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
    41744:  150:    if (bound.getUpperBound() && *bound.getUpperBound() <= 1)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    15304:  151:      regions.push_back(&std::get<0>(it));
call    0 returned 100%
        -:  152:  }
    29505:  153:}
