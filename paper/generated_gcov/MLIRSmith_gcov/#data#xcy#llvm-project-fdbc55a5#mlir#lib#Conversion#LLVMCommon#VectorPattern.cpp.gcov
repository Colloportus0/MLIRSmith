        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/LLVMCommon/VectorPattern.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/LLVMCommon/CMakeFiles/obj.MLIRLLVMCommonConversion.dir/VectorPattern.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/LLVMCommon/CMakeFiles/obj.MLIRLLVMCommonConversion.dir/VectorPattern.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- VectorPattern.cpp - Vector conversion pattern to the LLVM dialect --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/LLVMCommon/VectorPattern.h"
        -:   10:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14:// For >1-D vector types, extracts the necessary information to iterate over all
        -:   15:// 1-D subvectors in the underlying llrepresentation of the n-D vector
        -:   16:// Iterates on the llvm array type until we hit a non-array type (which is
        -:   17:// asserted to be an llvm vector type).
        -:   18:LLVM::detail::NDVectorTypeInfo
function _ZN4mlir4LLVM6detail23extractNDVectorTypeInfoENS_10VectorTypeERNS_17LLVMTypeConverterE called 3078 returned 100% blocks executed 84%
     3078:   19:LLVM::detail::extractNDVectorTypeInfo(VectorType vectorType,
        -:   20:                                      LLVMTypeConverter &converter) {
    3078*:   21:  assert(vectorType.getRank() > 1 && "expected >1D vector type");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
     3078:   22:  NDVectorTypeInfo info;
call    0 returned 100%
     3078:   23:  info.llvmNDVectorTy = converter.convertType(vectorType);
call    0 returned 100%
     3078:   24:  if (!info.llvmNDVectorTy || !LLVM::isCompatibleType(info.llvmNDVectorTy)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   25:    info.llvmNDVectorTy = nullptr;
    #####:   26:    return info;
        -:   27:  }
     3078:   28:  info.arraySizes.reserve(vectorType.getRank() - 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     3078:   29:  auto llvmTy = info.llvmNDVectorTy;
     7382:   30:  while (llvmTy.isa<LLVM::LLVMArrayType>()) {
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
     8608:   31:    info.arraySizes.push_back(
call    0 returned 100%
call    1 returned 100%
     4304:   32:        llvmTy.cast<LLVM::LLVMArrayType>().getNumElements());
call    0 returned 100%
     4304:   33:    llvmTy = llvmTy.cast<LLVM::LLVMArrayType>().getElementType();
call    0 returned 100%
call    1 returned 100%
        -:   34:  }
     3078:   35:  if (!LLVM::isCompatibleVectorType(llvmTy))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   36:    return info;
     3078:   37:  info.llvm1DVectorTy = llvmTy;
     3078:   38:  return info;
        -:   39:}
        -:   40:
        -:   41:// Express `linearIndex` in terms of coordinates of `basis`.
        -:   42:// Returns the empty vector when linearIndex is out of the range [0, P] where
        -:   43:// P is the product of all the basis coordinates.
        -:   44://
        -:   45:// Prerequisites:
        -:   46://   Basis is an array of nonnegative integers (signed type inherited from
        -:   47://   vector shape type).
function _ZN4mlir4LLVM6detail14getCoordinatesEN4llvm8ArrayRefIlEEj called 95492 returned 100% blocks executed 78%
    95492:   48:SmallVector<int64_t, 4> LLVM::detail::getCoordinates(ArrayRef<int64_t> basis,
        -:   49:                                                     unsigned linearIndex) {
    95492:   50:  SmallVector<int64_t, 4> res;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    95492:   51:  res.reserve(basis.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   270180:   52:  for (unsigned basisElement : llvm::reverse(basis)) {
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
call    2 returned 100%
   174688:   53:    res.push_back(linearIndex % basisElement);
call    0 returned 100%
   174688:   54:    linearIndex = linearIndex / basisElement;
        -:   55:  }
    95492:   56:  if (linearIndex > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   57:    return {};
    95492:   58:  std::reverse(res.begin(), res.end());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   190984:   59:  return res;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   60:}
        -:   61:
        -:   62:// Iterate of linear index, convert to coords space and insert splatted 1-D
        -:   63:// vector in each position.
function _ZN4mlir4LLVM6detail15nDVectorIterateERKNS1_16NDVectorTypeInfoERNS_9OpBuilderEN4llvm12function_refIFvNS7_8ArrayRefIlEEEEE called 3078 returned 100% blocks executed 71%
     3078:   64:void LLVM::detail::nDVectorIterate(const LLVM::detail::NDVectorTypeInfo &info,
        -:   65:                                   OpBuilder &builder,
        -:   66:                                   function_ref<void(ArrayRef<int64_t>)> fun) {
     3078:   67:  unsigned ub = 1;
     7382:   68:  for (auto s : info.arraySizes)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
     4304:   69:    ub *= s;
    98570:   70:  for (unsigned linearIndex = 0; linearIndex < ub; ++linearIndex) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
   190984:   71:    auto coords = getCoordinates(info.arraySizes, linearIndex);
call    0 returned 100%
        -:   72:    // Linear index is out of bounds, we are done.
    95492:   73:    if (coords.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:      break;
   95492*:   75:    assert(coords.size() == info.arraySizes.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    95492:   76:    fun(coords);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   77:  }
     3078:   78:}
        -:   79:
function _ZN4mlir4LLVM6detail29handleMultidimensionalVectorsEPNS_9OperationENS_10ValueRangeERNS_17LLVMTypeConverterESt8functionIFNS_5ValueENS_4TypeES4_EERNS_25ConversionPatternRewriterE called 1925 returned 100% blocks executed 89%
     1925:   80:LogicalResult LLVM::detail::handleMultidimensionalVectors(
        -:   81:    Operation *op, ValueRange operands, LLVMTypeConverter &typeConverter,
        -:   82:    std::function<Value(Type, ValueRange)> createOperand,
        -:   83:    ConversionPatternRewriter &rewriter) {
     1925:   84:  auto resultNDVectorType = op->getResult(0).getType().cast<VectorType>();
call    0 returned 100%
     1925:   85:  auto resultTypeInfo =
     1925:   86:      extractNDVectorTypeInfo(resultNDVectorType, typeConverter);
call    0 returned 100%
     1925:   87:  auto result1DVectorTy = resultTypeInfo.llvm1DVectorTy;
     1925:   88:  auto resultNDVectoryTy = resultTypeInfo.llvmNDVectorTy;
     1925:   89:  auto loc = op->getLoc();
call    0 returned 100%
     1925:   90:  Value desc = rewriter.create<LLVM::UndefOp>(loc, resultNDVectoryTy);
call    0 returned 100%
call    1 returned 100%
function _ZZN4mlir4LLVM6detail29handleMultidimensionalVectorsEPNS_9OperationENS_10ValueRangeERNS_17LLVMTypeConverterESt8functionIFNS_5ValueENS_4TypeES4_EERNS_25ConversionPatternRewriterEENKUlN4llvm8ArrayRefIlEEE_clESG_ called 60469 returned 100% blocks executed 87%
     1925:   91:  nDVectorIterate(resultTypeInfo, rewriter, [&](ArrayRef<int64_t> position) {
call    0 returned 100%
        -:   92:    // For this unrolled `position` corresponding to the `linearIndex`^th
        -:   93:    // element, extract operand vectors
    60469:   94:    SmallVector<Value, 4> extractedOperands;
   423283:   95:    for (const auto &operand : llvm::enumerate(operands)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
   181407:   96:      extractedOperands.push_back(rewriter.create<LLVM::ExtractValueOp>(
call    0 returned 100%
   181407:   97:          loc, operand.value(), position));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   98:    }
    60469:   99:    Value newVal = createOperand(result1DVectorTy, extractedOperands);
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100%
    60469:  100:    desc = rewriter.create<LLVM::InsertValueOp>(loc, desc, newVal, position);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    60469:  101:  });
     1925:  102:  rewriter.replaceOp(op, desc);
call    0 returned 100%
call    1 returned 100%
     1925:  103:  return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  104:}
        -:  105:
function _ZN4mlir4LLVM6detail21vectorOneToOneRewriteEPNS_9OperationEN4llvm9StringRefENS_10ValueRangeENS4_8ArrayRefINS_14NamedAttributeEEERNS_17LLVMTypeConverterERNS_25ConversionPatternRewriterE called 1297609 returned 100% blocks executed 56%
  1297609:  106:LogicalResult LLVM::detail::vectorOneToOneRewrite(
        -:  107:    Operation *op, StringRef targetOp, ValueRange operands,
        -:  108:    ArrayRef<NamedAttribute> targetAttrs, LLVMTypeConverter &typeConverter,
        -:  109:    ConversionPatternRewriter &rewriter) {
 1297609*:  110:  assert(!operands.empty());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  111:
        -:  112:  // Cannot convert ops if their operands are not of LLVM type.
  1297609:  113:  if (!llvm::all_of(operands.getTypes(), isCompatibleType))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  114:    return failure();
        -:  115:
  1297609:  116:  auto llvmNDVectorTy = operands[0].getType();
call    0 returned 100%
call    1 returned 100%
  1297609:  117:  if (!llvmNDVectorTy.isa<LLVM::LLVMArrayType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
  1297609:  118:    return oneToOneRewrite(op, targetOp, operands, targetAttrs, typeConverter,
  1297609:  119:                           rewriter);
call    0 returned 100%
        -:  120:
function _ZZN4mlir4LLVM6detail21vectorOneToOneRewriteEPNS_9OperationEN4llvm9StringRefENS_10ValueRangeENS4_8ArrayRefINS_14NamedAttributeEEERNS_17LLVMTypeConverterERNS_25ConversionPatternRewriterEENKUlNS_4TypeES6_E_clESE_S6_ called 0 returned 0% blocks executed 0%
    #####:  121:  auto callback = [op, targetOp, targetAttrs, &rewriter](Type llvm1DVectorTy,
    #####:  122:                                                         ValueRange operands) {
    #####:  123:    return rewriter
    #####:  124:        .create(op->getLoc(), rewriter.getStringAttr(targetOp), operands,
        -:  125:                llvm1DVectorTy, targetAttrs)
    #####:  126:        ->getResult(0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  127:  };
        -:  128:
    #####:  129:  return handleMultidimensionalVectors(op, operands, typeConverter, callback,
call    0 never executed
    #####:  130:                                       rewriter);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  131:}
