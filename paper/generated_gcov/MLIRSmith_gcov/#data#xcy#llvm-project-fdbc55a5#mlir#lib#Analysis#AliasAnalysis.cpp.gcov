        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/AliasAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/AliasAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/AliasAnalysis.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- AliasAnalysis.cpp - Alias Analysis for MLIR ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Analysis/AliasAnalysis.h"
        -:   10:#include "mlir/Analysis/AliasAnalysis/LocalAliasAnalysis.h"
        -:   11:
        -:   12:using namespace mlir;
        -:   13:
        -:   14://===----------------------------------------------------------------------===//
        -:   15:// AliasResult
        -:   16://===----------------------------------------------------------------------===//
        -:   17:
        -:   18:/// Merge this alias result with `other` and return a new result that
        -:   19:/// represents the conservative merge of both results.
function _ZNK4mlir11AliasResult5mergeES0_ called 0 returned 0% blocks executed 0%
    #####:   20:AliasResult AliasResult::merge(AliasResult other) const {
    #####:   21:  if (kind == other.kind)
branch  0 never executed
branch  1 never executed
    #####:   22:    return *this;
        -:   23:  // A mix of PartialAlias and MustAlias is PartialAlias.
    #####:   24:  if ((isPartial() && other.isMust()) || (other.isPartial() && isMust()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   25:    return PartialAlias;
        -:   26:  // Otherwise, don't assume anything.
    #####:   27:  return MayAlias;
        -:   28:}
        -:   29:
function _ZNK4mlir11AliasResult5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   30:void AliasResult::print(raw_ostream &os) const {
    #####:   31:  switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   32:  case Kind::NoAlias:
    #####:   33:    os << "NoAlias";
    #####:   34:    break;
call    0 never executed
    #####:   35:  case Kind::MayAlias:
    #####:   36:    os << "MayAlias";
    #####:   37:    break;
call    0 never executed
    #####:   38:  case Kind::PartialAlias:
    #####:   39:    os << "PartialAlias";
    #####:   40:    break;
call    0 never executed
    #####:   41:  case Kind::MustAlias:
    #####:   42:    os << "MustAlias";
    #####:   43:    break;
call    0 never executed
        -:   44:  }
    #####:   45:}
        -:   46:
        -:   47://===----------------------------------------------------------------------===//
        -:   48:// ModRefResult
        -:   49://===----------------------------------------------------------------------===//
        -:   50:
function _ZNK4mlir12ModRefResult5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:   51:void ModRefResult::print(raw_ostream &os) const {
    #####:   52:  switch (kind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   53:  case Kind::NoModRef:
    #####:   54:    os << "NoModRef";
    #####:   55:    break;
call    0 never executed
    #####:   56:  case Kind::Ref:
    #####:   57:    os << "Ref";
    #####:   58:    break;
call    0 never executed
    #####:   59:  case Kind::Mod:
    #####:   60:    os << "Mod";
    #####:   61:    break;
call    0 never executed
    #####:   62:  case Kind::ModRef:
    #####:   63:    os << "ModRef";
    #####:   64:    break;
call    0 never executed
        -:   65:  }
    #####:   66:}
        -:   67:
        -:   68://===----------------------------------------------------------------------===//
        -:   69:// AliasAnalysis
        -:   70://===----------------------------------------------------------------------===//
        -:   71:
function _ZN4mlir13AliasAnalysisC2EPNS_9OperationE called 806 returned 100% blocks executed 100%
      806:   72:AliasAnalysis::AliasAnalysis(Operation *op) {
call    0 returned 100%
      806:   73:  addAnalysisImplementation(LocalAliasAnalysis());
call    0 returned 100%
      806:   74:}
        -:   75:
function _ZN4mlir13AliasAnalysis5aliasENS_5ValueES1_ called 0 returned 0% blocks executed 0%
    #####:   76:AliasResult AliasAnalysis::alias(Value lhs, Value rhs) {
        -:   77:  // Check each of the alias analysis implemenations for an alias result.
    #####:   78:  for (const std::unique_ptr<Concept> &aliasImpl : aliasImpls) {
branch  0 never executed
branch  1 never executed
    #####:   79:    AliasResult result = aliasImpl->alias(lhs, rhs);
call    0 never executed
    #####:   80:    if (!result.isMay())
branch  0 never executed
branch  1 never executed
    #####:   81:      return result;
        -:   82:  }
    #####:   83:  return AliasResult::MayAlias;
        -:   84:}
        -:   85:
function _ZN4mlir13AliasAnalysis9getModRefEPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:   86:ModRefResult AliasAnalysis::getModRef(Operation *op, Value location) {
        -:   87:  // Compute the mod-ref behavior by refining a top `ModRef` result with each of
        -:   88:  // the alias analysis implementations. We early exit at the point where we
        -:   89:  // refine down to a `NoModRef`.
    #####:   90:  ModRefResult result = ModRefResult::getModAndRef();
    #####:   91:  for (const std::unique_ptr<Concept> &aliasImpl : aliasImpls) {
branch  0 never executed
branch  1 never executed
    #####:   92:    result = result.intersect(aliasImpl->getModRef(op, location));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   93:    if (result.isNoModRef())
branch  0 never executed
branch  1 never executed
    #####:   94:      return result;
        -:   95:  }
    #####:   96:  return result;
        -:   97:}
