        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Tosa/Utils/ShapeUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaDecomposeTransposeConv.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tosa/Transforms/CMakeFiles/obj.MLIRTosaTransforms.dir/TosaDecomposeTransposeConv.cpp.gcda
        -:    0:Runs:116161
        -:    1://===-- ShapeUtils.h - TOSA shape support declarations ----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Class declarations for shape utilities meant to assist shape propagation.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_DIALECT_TOSA_UTILS_SHAPEUTILS_H
        -:   14:#define MLIR_DIALECT_TOSA_UTILS_SHAPEUTILS_H
        -:   15:
        -:   16:#include "mlir/IR/BuiltinTypes.h"
        -:   17:#include "mlir/IR/Types.h"
        -:   18:#include "mlir/Interfaces/InferTypeOpInterface.h"
        -:   19:#include "llvm/ADT/Sequence.h"
        -:   20:#include "llvm/ADT/SmallVector.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:namespace tosa {
        -:   24:/// Statically known information for a particular Value.
        -:   25:///
        -:   26:/// This struct currently tracks only information relevant for tensor/array-like
        -:   27:/// shaped types. It is fine to associate a `ValueKnowledge` with a non-shaped
        -:   28:/// type as long as it is in the default "no knowledge" state returned by
        -:   29:/// `getPessimisticValueState`. The important invariant is that we cannot
        -:   30:/// claim to know something about a value which is false.
        -:   31:///
        -:   32:/// This class could also be called "dataflow facts", "lattice value", etc.
    #####:   33:struct ValueKnowledge {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
branch 55 never executed
branch 56 never executed
branch 57 never executed
branch 58 never executed
branch 59 never executed
branch 60 never executed
branch 61 never executed
branch 62 never executed
branch 63 never executed
branch 64 never executed
branch 65 never executed
branch 66 never executed
branch 67 never executed
branch 68 never executed
branch 69 never executed
branch 70 never executed
branch 71 never executed
branch 72 never executed
branch 73 never executed
branch 74 never executed
branch 75 never executed
branch 76 never executed
branch 77 never executed
branch 78 never executed
branch 79 never executed
        -:   34:  ValueKnowledge() = delete;
function _ZN4mlir4tosa14ValueKnowledgeC2EbN4llvm8ArrayRefIlEENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   35:  ValueKnowledge(bool hasRank, llvm::ArrayRef<int64_t> newSizes, Type dtype)
    #####:   36:      : hasError(false), hasRank(hasRank), dtype(dtype) {
branch  0 never executed
branch  1 never executed
    #####:   37:    sizes.reserve(newSizes.size());
branch  0 never executed
branch  1 never executed
    #####:   38:    for (auto size : newSizes)
branch  0 never executed
branch  1 never executed
    #####:   39:      sizes.push_back(size);
call    0 never executed
    #####:   40:  }
        -:   41:
    #####:   42:  operator bool() const { return !hasError; }
        -:   43:
        -:   44:  // Get the static knowledge intrinsic to `type`.
function _ZN4mlir4tosa14ValueKnowledge20getKnowledgeFromTypeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   45:  static ValueKnowledge getKnowledgeFromType(Type type) {
    #####:   46:    ValueKnowledge result = getPessimisticValueState();
    #####:   47:    if (auto shapedType = type.dyn_cast<ShapedType>()) {
branch  0 never executed
branch  1 never executed
    #####:   48:      if (shapedType.hasRank()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:        result.hasRank = true;
    #####:   50:        result.sizes.reserve(shapedType.getRank());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:        for (auto dim : shapedType.getShape())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:          result.sizes.push_back(dim);
call    0 never executed
        -:   53:      }
    #####:   54:      result.dtype = shapedType.getElementType();
call    0 never executed
        -:   55:    }
    #####:   56:    return result;
        -:   57:  }
        -:   58:
        -:   59:  // Return a pessimistic/conservative value state without assuming any knowlege
        -:   60:  // about the IR.
    #####:   61:  static ValueKnowledge getPessimisticValueState() {
    #####:   62:    return ValueKnowledge(false, {}, Type());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
        -:   63:  }
        -:   64:
        -:   65:  ShapedTypeComponents getShapedTypeComponents() const {
        -:   66:    return hasRank ? ShapedTypeComponents(sizes) : ShapedTypeComponents();
        -:   67:  }
        -:   68:
function _ZNK4mlir4tosa14ValueKnowledge7getTypeEv called 0 returned 0% blocks executed 0%
    #####:   69:  Type getType() const {
    #####:   70:    if (hasRank)
branch  0 never executed
branch  1 never executed
    #####:   71:      return RankedTensorType::get(llvm::makeArrayRef(sizes), dtype);
call    0 never executed
    #####:   72:    return UnrankedTensorType::get(dtype);
call    0 never executed
        -:   73:  }
        -:   74:
        -:   75:  bool operator==(const ValueKnowledge &rhs) const {
        -:   76:    return hasRank == rhs.hasRank && sizes == rhs.sizes && dtype == rhs.dtype;
        -:   77:  }
        -:   78:
        -:   79:  // Given two pieces of static knowledge, calculate conservatively the
        -:   80:  // information we can be sure about.
function _ZN4mlir4tosa14ValueKnowledge4joinERKS1_S3_ called 0 returned 0% blocks executed 0%
    #####:   81:  static ValueKnowledge join(const ValueKnowledge &lhs,
        -:   82:                             const ValueKnowledge &rhs) {
        -:   83:    // Mental model: All conditions are checking how to change from the safe "no
        -:   84:    // knowledge" default-initialized state to a state with more knowledge
        -:   85:    // consistent with lhs and rhs.
    #####:   86:    ValueKnowledge result = getPessimisticValueState();
call    0 never executed
    #####:   87:    result.hasError = true;
        -:   88:
    #####:   89:    if (!lhs || !rhs || lhs.dtype != rhs.dtype)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   90:      return result;
        -:   91:
    #####:   92:    result.hasError = false;
    #####:   93:    result.dtype = lhs.dtype;
        -:   94:
    #####:   95:    if (!lhs.hasRank && !rhs.hasRank)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   96:      return result;
        -:   97:
    #####:   98:    if (!rhs.hasRank) {
branch  0 never executed
branch  1 never executed
    #####:   99:      result.hasRank = true;
    #####:  100:      result.sizes = lhs.sizes;
call    0 never executed
        -:  101:      return result;
        -:  102:    }
        -:  103:
    #####:  104:    if (!lhs.hasRank) {
branch  0 never executed
branch  1 never executed
    #####:  105:      result.hasRank = true;
    #####:  106:      result.sizes = rhs.sizes;
call    0 never executed
        -:  107:      return result;
        -:  108:    }
        -:  109:
    #####:  110:    if (lhs.sizes.size() != rhs.sizes.size())
branch  0 never executed
branch  1 never executed
        -:  111:      return result;
        -:  112:
    #####:  113:    result.hasRank = true;
    #####:  114:    result.sizes.resize(lhs.sizes.size(), ShapedType::kDynamicSize);
call    0 never executed
    #####:  115:    for (auto i : llvm::seq<unsigned>(0, result.sizes.size())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  116:      int64_t lhsSize = lhs.sizes[i];
branch  0 never executed
branch  1 never executed
    #####:  117:      int64_t rhsSize = rhs.sizes[i];
branch  0 never executed
branch  1 never executed
    #####:  118:      int64_t &resultSize = result.sizes[i];
branch  0 never executed
branch  1 never executed
    #####:  119:      if (lhsSize == ShapedType::kDynamicSize) {
branch  0 never executed
branch  1 never executed
    #####:  120:        resultSize = rhsSize;
    #####:  121:      } else if (rhsSize == ShapedType::kDynamicSize) {
branch  0 never executed
branch  1 never executed
    #####:  122:        resultSize = lhsSize;
    #####:  123:      } else if (lhsSize == rhsSize) {
branch  0 never executed
branch  1 never executed
    #####:  124:        resultSize = lhsSize;
        -:  125:      } else {
    #####:  126:        result.hasError = true;
        -:  127:      }
        -:  128:    }
        -:  129:
        -:  130:    return result;
        -:  131:  }
        -:  132:
        -:  133:  // Given to types, generate a new ValueKnowledge that meets to cover both
        -:  134:  // cases. E.g. if the rank of the LHS and RHS differ, the resulting tensor
        -:  135:  // has unknown rank.
        -:  136:  static ValueKnowledge meet(const ValueKnowledge &lhs,
        -:  137:                             const ValueKnowledge &rhs) {
        -:  138:    ValueKnowledge result = getPessimisticValueState();
        -:  139:    result.hasError = true;
        -:  140:
        -:  141:    if (!rhs || !rhs || lhs.dtype != rhs.dtype)
        -:  142:      return result;
        -:  143:
        -:  144:    result.hasError = false;
        -:  145:    result.dtype = lhs.dtype;
        -:  146:
        -:  147:    if (!lhs.hasRank || !rhs.hasRank) {
        -:  148:      result.hasRank = false;
        -:  149:      return result;
        -:  150:    }
        -:  151:
        -:  152:    if (lhs.sizes.size() != rhs.sizes.size()) {
        -:  153:      result.hasRank = false;
        -:  154:      return result;
        -:  155:    }
        -:  156:
        -:  157:    result.hasRank = true;
        -:  158:    result.sizes.resize(lhs.sizes.size(), ShapedType::kDynamicSize);
        -:  159:    for (int i = 0, e = lhs.sizes.size(); i < e; i++) {
        -:  160:      if (lhs.sizes[i] == rhs.sizes[i]) {
        -:  161:        result.sizes[i] = lhs.sizes[i];
        -:  162:      }
        -:  163:    }
        -:  164:
        -:  165:    return result;
        -:  166:  }
        -:  167:
        -:  168:  // Whether the value information has an error.
        -:  169:  bool hasError;
        -:  170:  // Whether the value has known rank.
        -:  171:  bool hasRank;
        -:  172:  // If `hasRank`, the sizes along each rank. Unknown sizes are represented as
        -:  173:  // `ShapedType::kDynamicSize`.
        -:  174:  llvm::SmallVector<int64_t> sizes;
        -:  175:  // The dtype of a tensor.
        -:  176:  // This is equal to nullptr if we don't know that it is a specific concrete
        -:  177:  // type.
        -:  178:  Type dtype;
        -:  179:};
        -:  180:} // namespace tosa
        -:  181:} // namespace mlir
        -:  182:
        -:  183:#endif // MLIR_DIALECT_TOSA_UTILS_SHAPEUTILS_H
