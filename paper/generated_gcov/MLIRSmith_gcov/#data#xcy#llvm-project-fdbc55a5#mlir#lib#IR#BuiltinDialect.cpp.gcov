        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/BuiltinDialect.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinDialect.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- BuiltinDialect.cpp - MLIR Builtin Dialect --------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains the Builtin dialect that contains all of the attributes,
        -:   10:// operations, and types that are necessary for the validity of the IR.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/IR/BuiltinDialect.h"
        -:   15:#include "BuiltinDialectBytecode.h"
        -:   16:#include "mlir/IR/BlockAndValueMapping.h"
        -:   17:#include "mlir/IR/Builders.h"
        -:   18:#include "mlir/IR/BuiltinOps.h"
        -:   19:#include "mlir/IR/BuiltinTypes.h"
        -:   20:#include "mlir/IR/DialectResourceBlobManager.h"
        -:   21:#include "mlir/IR/OpImplementation.h"
        -:   22:#include "mlir/IR/PatternMatch.h"
        -:   23:#include "mlir/IR/TypeRange.h"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27://===----------------------------------------------------------------------===//
        -:   28:// TableGen'erated dialect
        -:   29://===----------------------------------------------------------------------===//
        -:   30:
        -:   31:#include "mlir/IR/BuiltinDialect.cpp.inc"
        -:   32:
        -:   33://===----------------------------------------------------------------------===//
        -:   34:// BuiltinBlobManagerInterface
        -:   35://===----------------------------------------------------------------------===//
        -:   36:
        -:   37:using BuiltinBlobManagerInterface =
        -:   38:    ResourceBlobManagerDialectInterfaceBase<DenseResourceElementsHandle>;
        -:   39:
        -:   40://===----------------------------------------------------------------------===//
        -:   41:// BuiltinOpAsmDialectInterface
        -:   42://===----------------------------------------------------------------------===//
        -:   43:
        -:   44:namespace {
        -:   45:struct BuiltinOpAsmDialectInterface : public OpAsmDialectInterface {
   189144:   46:  BuiltinOpAsmDialectInterface(Dialect *dialect,
        -:   47:                               BuiltinBlobManagerInterface &mgr)
   189144:   48:      : OpAsmDialectInterface(dialect), blobManager(mgr) {}
call    0 returned 100%
call    1 returned 100%
        -:   49:
function _ZNK12_GLOBAL__N_128BuiltinOpAsmDialectInterface8getAliasEN4mlir9AttributeERN4llvm11raw_ostreamE called 14977458 returned 100% blocks executed 100%
 14977458:   50:  AliasResult getAlias(Attribute attr, raw_ostream &os) const override {
 14977458:   51:    if (attr.isa<AffineMapAttr>()) {
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
  2708581:   52:      os << "map";
  2708581:   53:      return AliasResult::OverridableAlias;
call    0 returned 100%
        -:   54:    }
 12268877:   55:    if (attr.isa<IntegerSetAttr>()) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
   305312:   56:      os << "set";
   305312:   57:      return AliasResult::OverridableAlias;
call    0 returned 100%
        -:   58:    }
 11963565:   59:    if (attr.isa<LocationAttr>()) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
   785107:   60:      os << "loc";
   785107:   61:      return AliasResult::OverridableAlias;
call    0 returned 100%
        -:   62:    }
        -:   63:    return AliasResult::NoAlias;
        -:   64:  }
        -:   65:
function _ZNK12_GLOBAL__N_128BuiltinOpAsmDialectInterface8getAliasEN4mlir4TypeERN4llvm11raw_ostreamE called 10844679 returned 100% blocks executed 50%
 10844679:   66:  AliasResult getAlias(Type type, raw_ostream &os) const final {
 10844679:   67:    if (auto tupleType = type.dyn_cast<TupleType>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   68:      if (tupleType.size() > 16) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:        os << "tuple";
call    0 never executed
    #####:   70:        return AliasResult::OverridableAlias;
        -:   71:      }
        -:   72:    }
 10844679:   73:    return AliasResult::NoAlias;
        -:   74:  }
        -:   75:
        -:   76:  //===------------------------------------------------------------------===//
        -:   77:  // Resources
        -:   78:  //===------------------------------------------------------------------===//
        -:   79:
        -:   80:  std::string
function _ZNK12_GLOBAL__N_128BuiltinOpAsmDialectInterface14getResourceKeyERKN4mlir24AsmDialectResourceHandleE called 0 returned 0% blocks executed 0%
    #####:   81:  getResourceKey(const AsmDialectResourceHandle &handle) const override {
    #####:   82:    return cast<DenseResourceElementsHandle>(handle).getKey().str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   83:  }
        -:   84:  FailureOr<AsmDialectResourceHandle>
function _ZNK12_GLOBAL__N_128BuiltinOpAsmDialectInterface15declareResourceEN4llvm9StringRefE called 0 returned 0% blocks executed 0%
    #####:   85:  declareResource(StringRef key) const final {
    #####:   86:    return blobManager.insert(key);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   87:  }
function _ZNK12_GLOBAL__N_128BuiltinOpAsmDialectInterface13parseResourceERN4mlir22AsmParsedResourceEntryE called 0 returned 0% blocks executed 0%
    #####:   88:  LogicalResult parseResource(AsmParsedResourceEntry &entry) const final {
    #####:   89:    FailureOr<AsmResourceBlob> blob = entry.parseAsBlob();
call    0 never executed
    #####:   90:    if (failed(blob))
branch  0 never executed
branch  1 never executed
    #####:   91:      return failure();
        -:   92:
        -:   93:    // Update the blob for this entry.
    #####:   94:    blobManager.update(entry.getKey(), std::move(*blob));
call    0 never executed
call    1 never executed
    #####:   95:    return success();
branch  0 never executed
branch  1 never executed
        -:   96:  }
        -:   97:  void
function _ZNK12_GLOBAL__N_128BuiltinOpAsmDialectInterface14buildResourcesEPN4mlir9OperationERKN4llvm9SetVectorINS1_24AsmDialectResourceHandleESt6vectorIS6_SaIS6_EENS4_8DenseSetIS6_NS4_12DenseMapInfoIS6_vEEEEEERNS1_18AsmResourceBuilderE called 76973 returned 100% blocks executed 100%
    76973:   98:  buildResources(Operation *op,
        -:   99:                 const SetVector<AsmDialectResourceHandle> &referencedResources,
        -:  100:                 AsmResourceBuilder &provider) const final {
    76973:  101:    blobManager.buildResources(provider, referencedResources.getArrayRef());
call    0 returned 100%
    76973:  102:  }
        -:  103:
        -:  104:private:
        -:  105:  /// The blob manager for the dialect.
        -:  106:  BuiltinBlobManagerInterface &blobManager;
        -:  107:};
        -:  108:} // namespace
        -:  109:
function _ZN4mlir14BuiltinDialect10initializeEv called 189144 returned 100% blocks executed 100%
   189144:  110:void BuiltinDialect::initialize() {
   189144:  111:  registerTypes();
call    0 returned 100%
   189144:  112:  registerAttributes();
call    0 returned 100%
   189144:  113:  registerLocationAttributes();
call    0 returned 100%
   189144:  114:  addOperations<
        -:  115:#define GET_OP_LIST
        -:  116:#include "mlir/IR/BuiltinOps.cpp.inc"
   189144:  117:      >();
call    0 returned 100%
        -:  118:
   189144:  119:  auto &blobInterface = addInterface<BuiltinBlobManagerInterface>();
call    0 returned 100%
   189144:  120:  addInterface<BuiltinOpAsmDialectInterface>(blobInterface);
call    0 returned 100%
   189144:  121:  builtin_dialect_detail::addBytecodeInterface(this);
call    0 returned 100%
   189144:  122:}
        -:  123:
        -:  124://===----------------------------------------------------------------------===//
        -:  125:// ModuleOp
        -:  126://===----------------------------------------------------------------------===//
        -:  127:
function _ZN4mlir8ModuleOp5buildERNS_9OpBuilderERNS_14OperationStateEN4llvm8OptionalINS5_9StringRefEEE called 95778 returned 100% blocks executed 100%
    95778:  128:void ModuleOp::build(OpBuilder &builder, OperationState &state,
        -:  129:                     Optional<StringRef> name) {
    95778:  130:  state.addRegion()->emplaceBlock();
call    0 returned 100%
call    1 returned 100%
    95778:  131:  if (name) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      582:  132:    state.attributes.push_back(builder.getNamedAttr(
call    0 returned 100%
call    1 returned 100%
     1164:  133:        mlir::SymbolTable::getSymbolAttrName(), builder.getStringAttr(*name)));
call    0 returned 100%
call    1 returned 100%
        -:  134:  }
    95778:  135:}
        -:  136:
        -:  137:/// Construct a module from the given context.
function _ZN4mlir8ModuleOp6createENS_8LocationEN4llvm8OptionalINS2_9StringRefEEE called 94884 returned 100% blocks executed 100%
    94884:  138:ModuleOp ModuleOp::create(Location loc, Optional<StringRef> name) {
    94884:  139:  OpBuilder builder(loc->getContext());
call    0 returned 100%
call    1 returned 100%
    94884:  140:  return builder.create<ModuleOp>(loc, name);
call    0 returned 100%
        -:  141:}
        -:  142:
function _ZN4mlir8ModuleOp17getDataLayoutSpecEv called 600331049 returned 100% blocks executed 90%
600331049:  143:DataLayoutSpecInterface ModuleOp::getDataLayoutSpec() {
        -:  144:  // Take the first and only (if present) attribute that implements the
        -:  145:  // interface. This needs a linear search, but is called only once per data
        -:  146:  // layout object construction that is used for repeated queries.
600332743:  147:  for (NamedAttribute attr : getOperation()->getAttrs())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
     1692:  148:    if (auto spec = attr.getValue().dyn_cast<DataLayoutSpecInterface>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  149:      return spec;
600331045:  150:  return {};
call    0 returned 100%
        -:  151:}
        -:  152:
function _ZN4mlir8ModuleOp6verifyEv called 357239 returned 100% blocks executed 37%
   357239:  153:LogicalResult ModuleOp::verify() {
        -:  154:  // Check that none of the attributes are non-dialect attributes, except for
        -:  155:  // the symbol related attributes.
   359060:  156:  for (auto attr : (*this)->getAttrs()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
    1821*:  157:    if (!attr.getName().strref().contains('.') &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 72% (fallthrough)
branch  3 taken 28%
     1313:  158:        !llvm::is_contained(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    1313*:  159:            ArrayRef<StringRef>{mlir::SymbolTable::getSymbolAttrName(),
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1313:  160:                                mlir::SymbolTable::getVisibilityAttrName()},
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    1821*:  161:            attr.getName().strref()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  162:      return emitOpError() << "can only contain attributes with "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  163:                              "dialect-prefixed names, found: '"
    #####:  164:                           << attr.getName().getValue() << "'";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  165:  }
        -:  166:
        -:  167:  // Check that there is at most one data layout spec attribute.
   357239:  168:  StringRef layoutSpecAttrName;
   357239:  169:  DataLayoutSpecInterface layoutSpec;
call    0 returned 100%
   359060:  170:  for (const NamedAttribute &na : (*this)->getAttrs()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     1821:  171:    if (auto spec = na.getValue().dyn_cast<DataLayoutSpecInterface>()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  172:      if (layoutSpec) {
branch  0 never executed
branch  1 never executed
    #####:  173:        InFlightDiagnostic diag =
    #####:  174:            emitOpError() << "expects at most one data layout attribute";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  175:        diag.attachNote() << "'" << layoutSpecAttrName
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  176:                          << "' is a data layout attribute";
call    0 never executed
    #####:  177:        diag.attachNote() << "'" << na.getName().getValue()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  178:                          << "' is a data layout attribute";
call    0 never executed
        -:  179:      }
    #####:  180:      layoutSpecAttrName = na.getName().strref();
call    0 never executed
call    1 never executed
    #####:  181:      layoutSpec = spec;
        -:  182:    }
        -:  183:  }
        -:  184:
   357239:  185:  return success();
        -:  186:}
        -:  187:
        -:  188://===----------------------------------------------------------------------===//
        -:  189:// UnrealizedConversionCastOp
        -:  190://===----------------------------------------------------------------------===//
        -:  191:
        -:  192:LogicalResult
function _ZN4mlir26UnrealizedConversionCastOp4foldEN4llvm8ArrayRefINS_9AttributeEEERNS1_15SmallVectorImplINS_12OpFoldResultEEE called 15072 returned 100% blocks executed 88%
    15072:  193:UnrealizedConversionCastOp::fold(ArrayRef<Attribute> attrOperands,
        -:  194:                                 SmallVectorImpl<OpFoldResult> &foldResults) {
    15072:  195:  OperandRange operands = getInputs();
call    0 returned 100%
    15072:  196:  ResultRange results = getOutputs();
call    0 returned 100%
        -:  197:
    15072:  198:  if (operands.getType() == results.getType()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  199:    foldResults.append(operands.begin(), operands.end());
call    0 never executed
    #####:  200:    return success();
        -:  201:  }
        -:  202:
    15072:  203:  if (operands.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  204:    return failure();
        -:  205:
        -:  206:  // Check that the input is a cast with results that all feed into this
        -:  207:  // operation, and operand types that directly match the result types of this
        -:  208:  // operation.
    15072:  209:  Value firstInput = operands.front();
call    0 returned 100%
    15072:  210:  auto inputOp = firstInput.getDefiningOp<UnrealizedConversionCastOp>();
call    0 returned 100%
    15101:  211:  if (!inputOp || inputOp.getResults() != operands ||
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       29:  212:      inputOp.getOperandTypes() != results.getTypes())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    15043:  213:    return failure();
        -:  214:
        -:  215:  // If everything matches up, we can fold the passthrough.
       29:  216:  foldResults.append(inputOp->operand_begin(), inputOp->operand_end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       29:  217:  return success();
        -:  218:}
        -:  219:
function _ZN4mlir26UnrealizedConversionCastOp17areCastCompatibleENS_9TypeRangeES1_ called 4679232 returned 100% blocks executed 100%
 4679232*:  220:bool UnrealizedConversionCastOp::areCastCompatible(TypeRange inputs,
        -:  221:                                                   TypeRange outputs) {
        -:  222:  // `UnrealizedConversionCastOp` is agnostic of the input/output types.
 4679232*:  223:  return true;
        -:  224:}
        -:  225:
        -:  226://===----------------------------------------------------------------------===//
        -:  227:// TableGen'd op method definitions
        -:  228://===----------------------------------------------------------------------===//
        -:  229:
        -:  230:#define GET_OP_CLASSES
        -:  231:#include "mlir/IR/BuiltinOps.cpp.inc"
