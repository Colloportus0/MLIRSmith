        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Pass/PassCrashRecovery.cpp
        -:    0:Graph:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassCrashRecovery.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassCrashRecovery.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- PassCrashRecovery.cpp - Pass Crash Recovery Implementation ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "PassDetail.h"
        -:   10:#include "mlir/IR/Diagnostics.h"
        -:   11:#include "mlir/IR/Dialect.h"
        -:   12:#include "mlir/IR/SymbolTable.h"
        -:   13:#include "mlir/IR/Verifier.h"
        -:   14:#include "mlir/Parser/Parser.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:#include "mlir/Support/FileUtilities.h"
        -:   17:#include "llvm/ADT/STLExtras.h"
        -:   18:#include "llvm/ADT/ScopeExit.h"
        -:   19:#include "llvm/ADT/SetVector.h"
        -:   20:#include "llvm/Support/CommandLine.h"
        -:   21:#include "llvm/Support/CrashRecoveryContext.h"
        -:   22:#include "llvm/Support/Mutex.h"
        -:   23:#include "llvm/Support/Signals.h"
        -:   24:#include "llvm/Support/Threading.h"
        -:   25:#include "llvm/Support/ToolOutputFile.h"
        -:   26:
        -:   27:using namespace mlir;
        -:   28:using namespace mlir::detail;
        -:   29:
        -:   30://===----------------------------------------------------------------------===//
        -:   31:// RecoveryReproducerContext
        -:   32://===----------------------------------------------------------------------===//
        -:   33:
        -:   34:namespace mlir {
        -:   35:namespace detail {
        -:   36:/// This class contains all of the context for generating a recovery reproducer.
        -:   37:/// Each recovery context is registered globally to allow for generating
        -:   38:/// reproducers when a signal is raised, such as a segfault.
        -:   39:struct RecoveryReproducerContext {
        -:   40:  RecoveryReproducerContext(std::string passPipelineStr, Operation *op,
        -:   41:                            PassManager::ReproducerStreamFactory &streamFactory,
        -:   42:                            bool verifyPasses);
        -:   43:  ~RecoveryReproducerContext();
        -:   44:
        -:   45:  /// Generate a reproducer with the current context.
        -:   46:  void generate(std::string &description);
        -:   47:
        -:   48:  /// Disable this reproducer context. This prevents the context from generating
        -:   49:  /// a reproducer in the result of a crash.
        -:   50:  void disable();
        -:   51:
        -:   52:  /// Enable a previously disabled reproducer context.
        -:   53:  void enable();
        -:   54:
        -:   55:private:
        -:   56:  /// This function is invoked in the event of a crash.
        -:   57:  static void crashHandler(void *);
        -:   58:
        -:   59:  /// Register a signal handler to run in the event of a crash.
        -:   60:  static void registerSignalHandler();
        -:   61:
        -:   62:  /// The textual description of the currently executing pipeline.
        -:   63:  std::string pipeline;
        -:   64:
        -:   65:  /// The MLIR operation representing the IR before the crash.
        -:   66:  Operation *preCrashOperation;
        -:   67:
        -:   68:  /// The factory for the reproducer output stream to use when generating the
        -:   69:  /// reproducer.
        -:   70:  PassManager::ReproducerStreamFactory &streamFactory;
        -:   71:
        -:   72:  /// Various pass manager and context flags.
        -:   73:  bool disableThreads;
        -:   74:  bool verifyPasses;
        -:   75:
        -:   76:  /// The current set of active reproducer contexts. This is used in the event
        -:   77:  /// of a crash. This is not thread_local as the pass manager may produce any
        -:   78:  /// number of child threads. This uses a set to allow for multiple MLIR pass
        -:   79:  /// managers to be running at the same time.
        -:   80:  static llvm::ManagedStatic<llvm::sys::SmartMutex<true>> reproducerMutex;
        -:   81:  static llvm::ManagedStatic<
        -:   82:      llvm::SmallSetVector<RecoveryReproducerContext *, 1>>
        -:   83:      reproducerSet;
        -:   84:};
        -:   85:} // namespace detail
        -:   86:} // namespace mlir
        -:   87:
        -:   88:llvm::ManagedStatic<llvm::sys::SmartMutex<true>>
        -:   89:    RecoveryReproducerContext::reproducerMutex;
        -:   90:llvm::ManagedStatic<llvm::SmallSetVector<RecoveryReproducerContext *, 1>>
        -:   91:    RecoveryReproducerContext::reproducerSet;
        -:   92:
function _ZN4mlir6detail25RecoveryReproducerContextC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPNS_9OperationERSt8functionIFSt10unique_ptrINS_11PassManager16ReproducerStreamESt14default_deleteISD_EERS7_EEb called 0 returned 0% blocks executed 0%
    #####:   93:RecoveryReproducerContext::RecoveryReproducerContext(
        -:   94:    std::string passPipelineStr, Operation *op,
    #####:   95:    PassManager::ReproducerStreamFactory &streamFactory, bool verifyPasses)
    #####:   96:    : pipeline(std::move(passPipelineStr)), preCrashOperation(op->clone()),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   97:      streamFactory(streamFactory),
    #####:   98:      disableThreads(!op->getContext()->isMultithreadingEnabled()),
call    0 never executed
    #####:   99:      verifyPasses(verifyPasses) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  100:  enable();
call    0 never executed
    #####:  101:}
        -:  102:
function _ZN4mlir6detail25RecoveryReproducerContextD2Ev called 0 returned 0% blocks executed 0%
    #####:  103:RecoveryReproducerContext::~RecoveryReproducerContext() {
branch  0 never executed
branch  1 never executed
        -:  104:  // Erase the cloned preCrash IR that we cached.
    #####:  105:  preCrashOperation->erase();
call    0 never executed
    #####:  106:  disable();
call    0 never executed
    #####:  107:}
        -:  108:
function _ZN4mlir6detail25RecoveryReproducerContext8generateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  109:void RecoveryReproducerContext::generate(std::string &description) {
    #####:  110:  llvm::raw_string_ostream descOS(description);
call    0 never executed
        -:  111:
        -:  112:  // Try to create a new output stream for this crash reproducer.
    #####:  113:  std::string error;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  114:  std::unique_ptr<PassManager::ReproducerStream> stream = streamFactory(error);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  115:  if (!stream) {
branch  0 never executed
branch  1 never executed
    #####:  116:    descOS << "failed to create output stream: " << error;
call    0 never executed
call    1 never executed
    #####:  117:    return;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  118:  }
    #####:  119:  descOS << "reproducer generated at `" << stream->description() << "`";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  120:
    #####:  121:  AsmState state(preCrashOperation);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  122:  state.attachResourcePrinter(
call    0 never executed
function _ZZN4mlir6detail25RecoveryReproducerContext8generateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlPNS_9OperationERNS_18AsmResourceBuilderEE_clESA_SC_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  123:      "mlir_reproducer", [&](Operation *op, AsmResourceBuilder &builder) {
    #####:  124:        builder.buildString("pipeline", pipeline);
call    0 never executed
    #####:  125:        builder.buildBool("disable_threading", disableThreads);
call    0 never executed
    #####:  126:        builder.buildBool("verify_each", verifyPasses);
call    0 never executed
    #####:  127:      });
        -:  128:
        -:  129:  // Output the .mlir module.
    #####:  130:  preCrashOperation->print(stream->os(), state);
call    0 never executed
call    1 never executed
        -:  131:}
        -:  132:
function _ZN4mlir6detail25RecoveryReproducerContext7disableEv called 0 returned 0% blocks executed 0%
    #####:  133:void RecoveryReproducerContext::disable() {
    #####:  134:  llvm::sys::SmartScopedLock<true> lock(*reproducerMutex);
call    0 never executed
call    1 never executed
    #####:  135:  reproducerSet->remove(this);
call    0 never executed
call    1 never executed
    #####:  136:  if (reproducerSet->empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  137:    llvm::CrashRecoveryContext::Disable();
call    0 never executed
    #####:  138:}
        -:  139:
function _ZN4mlir6detail25RecoveryReproducerContext6enableEv called 0 returned 0% blocks executed 0%
    #####:  140:void RecoveryReproducerContext::enable() {
    #####:  141:  llvm::sys::SmartScopedLock<true> lock(*reproducerMutex);
call    0 never executed
call    1 never executed
    #####:  142:  if (reproducerSet->empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:    llvm::CrashRecoveryContext::Enable();
call    0 never executed
    #####:  144:  registerSignalHandler();
call    0 never executed
    #####:  145:  reproducerSet->insert(this);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  146:}
        -:  147:
function _ZN4mlir6detail25RecoveryReproducerContext12crashHandlerEPv called 0 returned 0% blocks executed 0%
    #####:  148:void RecoveryReproducerContext::crashHandler(void *) {
        -:  149:  // Walk the current stack of contexts and generate a reproducer for each one.
        -:  150:  // We can't know for certain which one was the cause, so we need to generate
        -:  151:  // a reproducer for all of them.
    #####:  152:  for (RecoveryReproducerContext *context : *reproducerSet) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  153:    std::string description;
call    0 never executed
    #####:  154:    context->generate(description);
call    0 never executed
        -:  155:
        -:  156:    // Emit an error using information only available within the context.
    #####:  157:    emitError(context->preCrashOperation->getLoc())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  158:        << "A failure has been detected while processing the MLIR module:"
call    0 never executed
    #####:  159:        << description;
call    0 never executed
        -:  160:  }
    #####:  161:}
        -:  162:
function _ZN4mlir6detail25RecoveryReproducerContext21registerSignalHandlerEv called 0 returned 0% blocks executed 0%
    #####:  163:void RecoveryReproducerContext::registerSignalHandler() {
        -:  164:  // Ensure that the handler is only registered once.
    #####:  165:  static bool registered =
    #####:  166:      (llvm::sys::AddSignalHandler(crashHandler, nullptr), false);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  167:  (void)registered;
    #####:  168:}
        -:  169:
        -:  170://===----------------------------------------------------------------------===//
        -:  171:// PassCrashReproducerGenerator
        -:  172://===----------------------------------------------------------------------===//
        -:  173:
        -:  174:struct PassCrashReproducerGenerator::Impl {
function _ZN4mlir6detail28PassCrashReproducerGenerator4ImplC2ERSt8functionIFSt10unique_ptrINS_11PassManager16ReproducerStreamESt14default_deleteIS6_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEb called 0 returned 0% blocks executed 0%
    #####:  175:  Impl(PassManager::ReproducerStreamFactory &streamFactory,
        -:  176:       bool localReproducer)
    #####:  177:      : streamFactory(streamFactory), localReproducer(localReproducer) {}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  178:
        -:  179:  /// The factory to use when generating a crash reproducer.
        -:  180:  PassManager::ReproducerStreamFactory streamFactory;
        -:  181:
        -:  182:  /// Flag indicating if reproducer generation should be localized to the
        -:  183:  /// failing pass.
        -:  184:  bool localReproducer = false;
        -:  185:
        -:  186:  /// A record of all of the currently active reproducer contexts.
        -:  187:  SmallVector<std::unique_ptr<RecoveryReproducerContext>> activeContexts;
        -:  188:
        -:  189:  /// The set of all currently running passes. Note: This is not populated when
        -:  190:  /// `localReproducer` is true, as each pass will get its own recovery context.
        -:  191:  SetVector<std::pair<Pass *, Operation *>> runningPasses;
        -:  192:
        -:  193:  /// Various pass manager flags that get emitted when generating a reproducer.
        -:  194:  bool pmFlagVerifyPasses = false;
        -:  195:};
        -:  196:
function _ZN4mlir6detail28PassCrashReproducerGeneratorC2ERSt8functionIFSt10unique_ptrINS_11PassManager16ReproducerStreamESt14default_deleteIS5_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEb called 0 returned 0% blocks executed 0%
    #####:  197:PassCrashReproducerGenerator::PassCrashReproducerGenerator(
    #####:  198:    PassManager::ReproducerStreamFactory &streamFactory, bool localReproducer)
    #####:  199:    : impl(std::make_unique<Impl>(streamFactory, localReproducer)) {}
call    0 never executed
        -:  200:PassCrashReproducerGenerator::~PassCrashReproducerGenerator() = default;
        -:  201:
function _ZN4mlir6detail28PassCrashReproducerGenerator10initializeEN4llvm14iterator_rangeINS2_16pointee_iteratorIPSt10unique_ptrINS_4PassESt14default_deleteIS6_EES6_EEEEPNS_9OperationEb called 0 returned 0% blocks executed 0%
    #####:  202:void PassCrashReproducerGenerator::initialize(
        -:  203:    iterator_range<PassManager::pass_iterator> passes, Operation *op,
        -:  204:    bool pmFlagVerifyPasses) {
    #####:  205:  assert((!impl->localReproducer ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  206:          !op->getContext()->isMultithreadingEnabled()) &&
        -:  207:         "expected multi-threading to be disabled when generating a local "
        -:  208:         "reproducer");
        -:  209:
    #####:  210:  llvm::CrashRecoveryContext::Enable();
call    0 never executed
    #####:  211:  impl->pmFlagVerifyPasses = pmFlagVerifyPasses;
branch  0 never executed
branch  1 never executed
        -:  212:
        -:  213:  // If we aren't generating a local reproducer, prepare a reproducer for the
        -:  214:  // given top-level operation.
    #####:  215:  if (!impl->localReproducer)
branch  0 never executed
branch  1 never executed
    #####:  216:    prepareReproducerFor(passes, op);
call    0 never executed
    #####:  217:}
        -:  218:
        -:  219:static void
function _ZL29formatPassOpReproducerMessageRN4mlir10DiagnosticESt4pairIPNS_4PassEPNS_9OperationEE called 0 returned 0% blocks executed 0%
    #####:  220:formatPassOpReproducerMessage(Diagnostic &os,
        -:  221:                              std::pair<Pass *, Operation *> passOpPair) {
    #####:  222:  os << "`" << passOpPair.first->getName() << "` on "
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  223:     << "'" << passOpPair.second->getName() << "' operation";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  224:  if (SymbolOpInterface symbol = dyn_cast<SymbolOpInterface>(passOpPair.second))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:    os << ": @" << symbol.getName();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  226:}
        -:  227:
function _ZN4mlir6detail28PassCrashReproducerGenerator8finalizeEPNS_9OperationENS_13LogicalResultE called 0 returned 0% blocks executed 0%
    #####:  228:void PassCrashReproducerGenerator::finalize(Operation *rootOp,
        -:  229:                                            LogicalResult executionResult) {
        -:  230:  // Don't generate a reproducer if we have no active contexts.
    #####:  231:  if (impl->activeContexts.empty())
branch  0 never executed
branch  1 never executed
    #####:  232:    return;
        -:  233:
        -:  234:  // If the pass manager execution succeeded, we don't generate any reproducers.
    #####:  235:  if (succeeded(executionResult))
branch  0 never executed
branch  1 never executed
    #####:  236:    return impl->activeContexts.clear();
call    0 never executed
        -:  237:
    #####:  238:  InFlightDiagnostic diag = emitError(rootOp->getLoc())
call    0 never executed
call    1 never executed
        -:  239:                            << "Failures have been detected while "
    #####:  240:                               "processing an MLIR pass pipeline";
call    0 never executed
        -:  241:
        -:  242:  // If we are generating a global reproducer, we include all of the running
        -:  243:  // passes in the error message for the only active context.
    #####:  244:  if (!impl->localReproducer) {
branch  0 never executed
branch  1 never executed
    #####:  245:    assert(impl->activeContexts.size() == 1 && "expected one active context");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  246:
        -:  247:    // Generate the reproducer.
    #####:  248:    std::string description;
call    0 never executed
call    1 never executed
    #####:  249:    impl->activeContexts.front()->generate(description);
call    0 never executed
        -:  250:
        -:  251:    // Emit an error to the user.
    #####:  252:    Diagnostic &note = diag.attachNote() << "Pipeline failed while executing [";
call    0 never executed
call    1 never executed
    #####:  253:    llvm::interleaveComma(impl->runningPasses, note,
call    0 never executed
    #####:  254:                          [&](const std::pair<Pass *, Operation *> &value) {
    #####:  255:                            formatPassOpReproducerMessage(note, value);
call    0 never executed
call    1 never executed
        -:  256:                          });
    #####:  257:    note << "]: " << description;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  258:    return;
branch  0 never executed
branch  1 never executed
        -:  259:  }
        -:  260:
        -:  261:  // If we were generating a local reproducer, we generate a reproducer for the
        -:  262:  // most recently executing pass using the matching entry from  `runningPasses`
        -:  263:  // to generate a localized diagnostic message.
    #####:  264:  assert(impl->activeContexts.size() == impl->runningPasses.size() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  265:         "expected running passes to match active contexts");
        -:  266:
        -:  267:  // Generate the reproducer.
    #####:  268:  RecoveryReproducerContext &reproducerContext = *impl->activeContexts.back();
call    0 never executed
call    1 never executed
    #####:  269:  std::string description;
call    0 never executed
call    1 never executed
    #####:  270:  reproducerContext.generate(description);
call    0 never executed
        -:  271:
        -:  272:  // Emit an error to the user.
    #####:  273:  Diagnostic &note = diag.attachNote() << "Pipeline failed while executing ";
call    0 never executed
call    1 never executed
    #####:  274:  formatPassOpReproducerMessage(note, impl->runningPasses.back());
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  275:  note << ": " << description;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  276:
    #####:  277:  impl->activeContexts.clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  278:}
        -:  279:
function _ZN4mlir6detail28PassCrashReproducerGenerator20prepareReproducerForEPNS_4PassEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  280:void PassCrashReproducerGenerator::prepareReproducerFor(Pass *pass,
        -:  281:                                                        Operation *op) {
        -:  282:  // If not tracking local reproducers, we simply remember that this pass is
        -:  283:  // running.
    #####:  284:  impl->runningPasses.insert(std::make_pair(pass, op));
call    0 never executed
    #####:  285:  if (!impl->localReproducer)
branch  0 never executed
branch  1 never executed
    #####:  286:    return;
        -:  287:
        -:  288:  // Disable the current pass recovery context, if there is one. This may happen
        -:  289:  // in the case of dynamic pass pipelines.
    #####:  290:  if (!impl->activeContexts.empty())
branch  0 never executed
branch  1 never executed
    #####:  291:    impl->activeContexts.back()->disable();
call    0 never executed
call    1 never executed
        -:  292:
        -:  293:  // Collect all of the parent scopes of this operation.
    #####:  294:  SmallVector<OperationName> scopes;
    #####:  295:  while (Operation *parentOp = op->getParentOp()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  296:    scopes.push_back(op->getName());
call    0 never executed
    #####:  297:    op = parentOp;
    #####:  298:  }
        -:  299:
        -:  300:  // Emit a pass pipeline string for the current pass running on the current
        -:  301:  // operation type.
    #####:  302:  std::string passStr;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  303:  llvm::raw_string_ostream passOS(passStr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  304:  for (OperationName scope : llvm::reverse(scopes))
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  305:    passOS << scope << "(";
call    0 never executed
call    1 never executed
    #####:  306:  pass->printAsTextualPipeline(passOS);
call    0 never executed
    #####:  307:  for (unsigned i = 0, e = scopes.size(); i < e; ++i)
branch  0 never executed
branch  1 never executed
    #####:  308:    passOS << ")";
call    0 never executed
        -:  309:
    #####:  310:  impl->activeContexts.push_back(std::make_unique<RecoveryReproducerContext>(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  311:      passOS.str(), op, impl->streamFactory, impl->pmFlagVerifyPasses));
call    0 never executed
        -:  312:}
function _ZN4mlir6detail28PassCrashReproducerGenerator20prepareReproducerForEN4llvm14iterator_rangeINS2_16pointee_iteratorIPSt10unique_ptrINS_4PassESt14default_deleteIS6_EES6_EEEEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  313:void PassCrashReproducerGenerator::prepareReproducerFor(
        -:  314:    iterator_range<PassManager::pass_iterator> passes, Operation *op) {
    #####:  315:  std::string passStr;
call    0 never executed
    #####:  316:  llvm::raw_string_ostream passOS(passStr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  317:  llvm::interleaveComma(
call    0 never executed
    #####:  318:      passes, passOS, [&](Pass &pass) { pass.printAsTextualPipeline(passOS); });
call    0 never executed
call    1 never executed
        -:  319:
    #####:  320:  impl->activeContexts.push_back(std::make_unique<RecoveryReproducerContext>(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  321:      passOS.str(), op, impl->streamFactory, impl->pmFlagVerifyPasses));
call    0 never executed
    #####:  322:}
        -:  323:
function _ZN4mlir6detail28PassCrashReproducerGenerator23removeLastReproducerForEPNS_4PassEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  324:void PassCrashReproducerGenerator::removeLastReproducerFor(Pass *pass,
        -:  325:                                                           Operation *op) {
        -:  326:  // We only pop the active context if we are tracking local reproducers.
    #####:  327:  impl->runningPasses.remove(std::make_pair(pass, op));
call    0 never executed
    #####:  328:  if (impl->localReproducer) {
branch  0 never executed
branch  1 never executed
    #####:  329:    impl->activeContexts.pop_back();
call    0 never executed
        -:  330:
        -:  331:    // Re-enable the previous pass recovery context, if there was one. This may
        -:  332:    // happen in the case of dynamic pass pipelines.
    #####:  333:    if (!impl->activeContexts.empty())
branch  0 never executed
branch  1 never executed
    #####:  334:      impl->activeContexts.back()->enable();
call    0 never executed
call    1 never executed
        -:  335:  }
    #####:  336:}
        -:  337:
        -:  338://===----------------------------------------------------------------------===//
        -:  339:// CrashReproducerInstrumentation
        -:  340://===----------------------------------------------------------------------===//
        -:  341:
        -:  342:namespace {
        -:  343:struct CrashReproducerInstrumentation : public PassInstrumentation {
    #####:  344:  CrashReproducerInstrumentation(PassCrashReproducerGenerator &generator)
    #####:  345:      : generator(generator) {}
call    0 never executed
    #####:  346:  ~CrashReproducerInstrumentation() override = default;
------------------
_ZN12_GLOBAL__N_130CrashReproducerInstrumentationD0Ev:
function _ZN12_GLOBAL__N_130CrashReproducerInstrumentationD0Ev called 0 returned 0% blocks executed 0%
    #####:  346:  ~CrashReproducerInstrumentation() override = default;
call    0 never executed
call    1 never executed
------------------
_ZN12_GLOBAL__N_130CrashReproducerInstrumentationD2Ev:
function _ZN12_GLOBAL__N_130CrashReproducerInstrumentationD2Ev called 0 returned 0% blocks executed 0%
    #####:  346:  ~CrashReproducerInstrumentation() override = default;
call    0 never executed
------------------
        -:  347:
function _ZN12_GLOBAL__N_130CrashReproducerInstrumentation13runBeforePassEPN4mlir4PassEPNS1_9OperationE called 0 returned 0% blocks executed 0%
    #####:  348:  void runBeforePass(Pass *pass, Operation *op) override {
    #####:  349:    if (!isa<OpToOpPassAdaptor>(pass))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  350:      generator.prepareReproducerFor(pass, op);
call    0 never executed
    #####:  351:  }
        -:  352:
function _ZN12_GLOBAL__N_130CrashReproducerInstrumentation12runAfterPassEPN4mlir4PassEPNS1_9OperationE called 0 returned 0% blocks executed 0%
    #####:  353:  void runAfterPass(Pass *pass, Operation *op) override {
    #####:  354:    if (!isa<OpToOpPassAdaptor>(pass))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  355:      generator.removeLastReproducerFor(pass, op);
call    0 never executed
    #####:  356:  }
        -:  357:
function _ZN12_GLOBAL__N_130CrashReproducerInstrumentation18runAfterPassFailedEPN4mlir4PassEPNS1_9OperationE called 0 returned 0% blocks executed 0%
    #####:  358:  void runAfterPassFailed(Pass *pass, Operation *op) override {
    #####:  359:    generator.finalize(op, /*executionResult=*/failure());
call    0 never executed
    #####:  360:  }
        -:  361:
        -:  362:private:
        -:  363:  /// The generator used to create crash reproducers.
        -:  364:  PassCrashReproducerGenerator &generator;
        -:  365:};
        -:  366:} // namespace
        -:  367:
        -:  368://===----------------------------------------------------------------------===//
        -:  369:// FileReproducerStream
        -:  370://===----------------------------------------------------------------------===//
        -:  371:
        -:  372:namespace {
        -:  373:/// This class represents a default instance of PassManager::ReproducerStream
        -:  374:/// that is backed by a file.
        -:  375:struct FileReproducerStream : public PassManager::ReproducerStream {
    #####:  376:  FileReproducerStream(std::unique_ptr<llvm::ToolOutputFile> outputFile)
    #####:  377:      : outputFile(std::move(outputFile)) {}
    #####:  378:  ~FileReproducerStream() override { outputFile->keep(); }
------------------
_ZN12_GLOBAL__N_120FileReproducerStreamD0Ev:
function _ZN12_GLOBAL__N_120FileReproducerStreamD0Ev called 0 returned 0% blocks executed 0%
    #####:  378:  ~FileReproducerStream() override { outputFile->keep(); }
call    0 never executed
call    1 never executed
------------------
_ZN12_GLOBAL__N_120FileReproducerStreamD2Ev:
function _ZN12_GLOBAL__N_120FileReproducerStreamD2Ev called 0 returned 0% blocks executed 0%
    #####:  378:  ~FileReproducerStream() override { outputFile->keep(); }
call    0 never executed
------------------
        -:  379:
        -:  380:  /// Returns a description of the reproducer stream.
function _ZN12_GLOBAL__N_120FileReproducerStream11descriptionEv called 0 returned 0% blocks executed 0%
    #####:  381:  StringRef description() override { return outputFile->getFilename(); }
        -:  382:
        -:  383:  /// Returns the stream on which to output the reproducer.
function _ZN12_GLOBAL__N_120FileReproducerStream2osEv called 0 returned 0% blocks executed 0%
    #####:  384:  raw_ostream &os() override { return outputFile->os(); }
        -:  385:
        -:  386:private:
        -:  387:  /// ToolOutputFile corresponding to opened `filename`.
        -:  388:  std::unique_ptr<llvm::ToolOutputFile> outputFile = nullptr;
        -:  389:};
        -:  390:} // namespace
        -:  391:
        -:  392://===----------------------------------------------------------------------===//
        -:  393:// PassManager
        -:  394://===----------------------------------------------------------------------===//
        -:  395:
function _ZN4mlir11PassManager20runWithCrashRecoveryEPNS_9OperationENS_15AnalysisManagerE called 0 returned 0% blocks executed 0%
    #####:  396:LogicalResult PassManager::runWithCrashRecovery(Operation *op,
        -:  397:                                                AnalysisManager am) {
    #####:  398:  crashReproGenerator->initialize(getPasses(), op, verifyPasses);
call    0 never executed
call    1 never executed
        -:  399:
        -:  400:  // Safely invoke the passes within a recovery context.
    #####:  401:  LogicalResult passManagerResult = failure();
call    0 never executed
    #####:  402:  llvm::CrashRecoveryContext recoveryContext;
call    0 never executed
    #####:  403:  recoveryContext.RunSafelyOnThread(
call    0 never executed
    #####:  404:      [&] { passManagerResult = runPasses(op, am); });
call    0 never executed
    #####:  405:  crashReproGenerator->finalize(op, passManagerResult);
call    0 never executed
    #####:  406:  return passManagerResult;
call    0 never executed
        -:  407:}
        -:  408:
function _ZN4mlir11PassManager31enableCrashReproducerGenerationEN4llvm9StringRefEb called 0 returned 0% blocks executed 0%
    #####:  409:void PassManager::enableCrashReproducerGeneration(StringRef outputFile,
        -:  410:                                                  bool genLocalReproducer) {
        -:  411:  // Capture the filename by value in case outputFile is out of scope when
        -:  412:  // invoked.
    #####:  413:  std::string filename = outputFile.str();
branch  0 never executed
branch  1 never executed
    #####:  414:  enableCrashReproducerGeneration(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
function _ZZN4mlir11PassManager31enableCrashReproducerGenerationEN4llvm9StringRefEbENKUlRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_clES9_ called 0 returned 0% blocks executed 0%
    #####:  415:      [filename](std::string &error) -> std::unique_ptr<ReproducerStream> {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  416:        std::unique_ptr<llvm::ToolOutputFile> outputFile =
    #####:  417:            mlir::openOutputFile(filename, &error);
call    0 never executed
    #####:  418:        if (!outputFile) {
branch  0 never executed
branch  1 never executed
    #####:  419:          error = "Failed to create reproducer stream: " + error;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  420:          return nullptr;
branch  0 never executed
branch  1 never executed
        -:  421:        }
    #####:  422:        return std::make_unique<FileReproducerStream>(std::move(outputFile));
call    0 never executed
        -:  423:      },
        -:  424:      genLocalReproducer);
    #####:  425:}
        -:  426:
function _ZN4mlir11PassManager31enableCrashReproducerGenerationESt8functionIFSt10unique_ptrINS0_16ReproducerStreamESt14default_deleteIS3_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEb called 0 returned 0% blocks executed 0%
    #####:  427:void PassManager::enableCrashReproducerGeneration(
        -:  428:    ReproducerStreamFactory factory, bool genLocalReproducer) {
    #####:  429:  assert(!crashReproGenerator &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:         "crash reproducer has already been initialized");
    #####:  431:  if (genLocalReproducer && getContext()->isMultithreadingEnabled())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  432:    llvm::report_fatal_error(
call    0 never executed
        -:  433:        "Local crash reproduction can't be setup on a "
        -:  434:        "pass-manager without disabling multi-threading first.");
        -:  435:
    #####:  436:  crashReproGenerator = std::make_unique<PassCrashReproducerGenerator>(
call    0 never executed
    #####:  437:      factory, genLocalReproducer);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  438:  addInstrumentation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  439:      std::make_unique<CrashReproducerInstrumentation>(*crashReproGenerator));
call    0 never executed
call    1 never executed
    #####:  440:}
        -:  441:
        -:  442://===----------------------------------------------------------------------===//
        -:  443:// Asm Resource
        -:  444://===----------------------------------------------------------------------===//
        -:  445:
function _ZN4mlir21PassReproducerOptions20attachResourceParserERNS_12ParserConfigE called 94572 returned 100% blocks executed 100%
    94572:  446:void PassReproducerOptions::attachResourceParser(ParserConfig &config) {
function _ZZN4mlir21PassReproducerOptions20attachResourceParserERNS_12ParserConfigEENKUlRNS_22AsmParsedResourceEntryEE_clES4_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  447:  auto parseFn = [this](AsmParsedResourceEntry &entry) -> LogicalResult {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  448:    if (entry.getKey() == "pipeline") {
call    0 never executed
    #####:  449:      FailureOr<std::string> value = entry.parseAsString();
call    0 never executed
    #####:  450:      if (succeeded(value))
branch  0 never executed
branch  1 never executed
    #####:  451:        this->pipeline = std::move(*value);
call    0 never executed
    #####:  452:      return value;
branch  0 never executed
branch  1 never executed
        -:  453:    }
    #####:  454:    if (entry.getKey() == "disable_threading") {
call    0 never executed
    #####:  455:      FailureOr<bool> value = entry.parseAsBool();
call    0 never executed
    #####:  456:      if (succeeded(value))
branch  0 never executed
branch  1 never executed
    #####:  457:        this->disableThreading = *value;
branch  0 never executed
branch  1 never executed
    #####:  458:      return value;
        -:  459:    }
    #####:  460:    if (entry.getKey() == "verify_each") {
call    0 never executed
    #####:  461:      FailureOr<bool> value = entry.parseAsBool();
call    0 never executed
    #####:  462:      if (succeeded(value))
branch  0 never executed
branch  1 never executed
    #####:  463:        this->verifyEach = *value;
branch  0 never executed
branch  1 never executed
    #####:  464:      return value;
        -:  465:    }
    #####:  466:    return entry.emitError() << "unknown 'mlir_reproducer' resource key '"
call    0 never executed
call    1 never executed
    #####:  467:                             << entry.getKey() << "'";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    94572:  468:  };
    94572:  469:  config.attachResourceParser("mlir_reproducer", parseFn);
call    0 returned 100%
    94572:  470:}
        -:  471:
function _ZNK4mlir21PassReproducerOptions5applyERNS_11PassManagerE called 91595 returned 100% blocks executed 38%
    91595:  472:LogicalResult PassReproducerOptions::apply(PassManager &pm) const {
    91595:  473:  if (pipeline.has_value())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  474:    if (failed(parsePassPipeline(*pipeline, pm)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  475:      return failure();
        -:  476:
    91595:  477:  if (disableThreading.has_value())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  478:    pm.getContext()->disableMultithreading(*disableThreading);
call    0 never executed
        -:  479:
    91595:  480:  if (verifyEach.has_value())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  481:    pm.enableVerifier(*verifyEach);
call    0 never executed
        -:  482:
    91595:  483:  return success();
        -:  484:}
