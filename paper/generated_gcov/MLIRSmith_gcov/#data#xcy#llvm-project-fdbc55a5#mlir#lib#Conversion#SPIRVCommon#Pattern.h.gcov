        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/SPIRVCommon/Pattern.h
        -:    0:Graph:../tools/mlir/lib/Conversion/ArithToSPIRV/CMakeFiles/obj.MLIRArithToSPIRV.dir/ArithToSPIRV.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/ArithToSPIRV/CMakeFiles/obj.MLIRArithToSPIRV.dir/ArithToSPIRV.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Pattern.h - SPIRV Common Conversion Patterns -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_CONVERSION_SPIRVCOMMON_PATTERN_H
        -:   10:#define MLIR_CONVERSION_SPIRVCOMMON_PATTERN_H
        -:   11:
        -:   12:#include "mlir/Dialect/SPIRV/IR/SPIRVOpTraits.h"
        -:   13:#include "mlir/Transforms/DialectConversion.h"
        -:   14:#include "llvm/Support/FormatVariadic.h"
        -:   15:
        -:   16:namespace mlir {
        -:   17:namespace spirv {
        -:   18:
        -:   19:/// Converts elementwise unary, binary and ternary standard operations to SPIR-V
        -:   20:/// operations.
        -:   21:template <typename Op, typename SPIRVOp>
        -:   22:class ElementwiseOpPattern final : public OpConversionPattern<Op> {
        -:   23:public:
        -:   24:  using OpConversionPattern<Op>::OpConversionPattern;
        -:   25:
        -:   26:  LogicalResult
    1857*:   27:  matchAndRewrite(Op op, typename Op::Adaptor adaptor,
        -:   28:                  ConversionPatternRewriter &rewriter) const override {
    1857*:   29:    assert(adaptor.getOperands().size() <= 3);
    1857*:   30:    Type dstType = this->getTypeConverter()->convertType(op.getType());
    1857*:   31:    if (!dstType) {
        -:   32:      return rewriter.notifyMatchFailure(
        -:   33:          op->getLoc(),
    #####:   34:          llvm::formatv("failed to convert type {0} for SPIR-V", op.getType()));
        -:   35:    }
        -:   36:
        -:   37:    if (SPIRVOp::template hasTrait<OpTrait::spirv::UnsignedOp>() &&
      103:   38:        !op.getType().isIndex() && dstType != op.getType()) {
        -:   39:      return op.emitError(
       60:   40:          "bitwidth emulation is not implemented yet on unsigned op");
        -:   41:    }
    1797*:   42:    rewriter.template replaceOpWithNewOp<SPIRVOp>(op, dstType,
        -:   43:                                                  adaptor.getOperands());
    1857*:   44:    return success();
        -:   45:  }
        -:   46:};
        -:   47:
        -:   48:} // namespace spirv
        -:   49:} // namespace mlir
        -:   50:
        -:   51:#endif // MLIR_CONVERSION_SPIRVCOMMON_PATTERN_H
