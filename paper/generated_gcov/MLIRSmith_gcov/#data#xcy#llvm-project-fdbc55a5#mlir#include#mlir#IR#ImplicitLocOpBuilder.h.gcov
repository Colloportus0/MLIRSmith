        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/IR/ImplicitLocOpBuilder.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Async/Transforms/CMakeFiles/obj.MLIRAsyncTransforms.dir/AsyncParallelFor.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Async/Transforms/CMakeFiles/obj.MLIRAsyncTransforms.dir/AsyncParallelFor.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- ImplicitLocOpBuilder.h - Convenience OpBuilder -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Helper class to create ops with a modally set location.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_IR_IMPLICITLOCOPBUILDER_H
        -:   14:#define MLIR_IR_IMPLICITLOCOPBUILDER_H
        -:   15:
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:
        -:   20:/// ImplicitLocOpBuilder maintains a 'current location', allowing use of the
        -:   21:/// create<> method without specifying the location.  It is otherwise the same
        -:   22:/// as OpBuilder.
        -:   23:class ImplicitLocOpBuilder : public mlir::OpBuilder {
        -:   24:public:
        -:   25:  /// OpBuilder has a bunch of convenience constructors - we support them all
        -:   26:  /// with the additional Location.
        -:   27:  template <typename... T>
    3837*:   28:  ImplicitLocOpBuilder(Location loc, T &&...operands)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
    3837*:   29:      : OpBuilder(std::forward<T>(operands)...), curLoc(loc) {}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
        -:   30:
        -:   31:  /// Create a builder and set the insertion point to before the first operation
        -:   32:  /// in the block but still inside the block.
        -:   33:  static ImplicitLocOpBuilder atBlockBegin(Location loc, Block *block,
        -:   34:                                           Listener *listener = nullptr) {
        -:   35:    return ImplicitLocOpBuilder(loc, block, block->begin(), listener);
        -:   36:  }
        -:   37:
        -:   38:  /// Create a builder and set the insertion point to after the last operation
        -:   39:  /// in the block but still inside the block.
        -:   40:  static ImplicitLocOpBuilder atBlockEnd(Location loc, Block *block,
        -:   41:                                         Listener *listener = nullptr) {
        -:   42:    return ImplicitLocOpBuilder(loc, block, block->end(), listener);
        -:   43:  }
        -:   44:
        -:   45:  /// Create a builder and set the insertion point to before the block
        -:   46:  /// terminator.
        -:   47:  static ImplicitLocOpBuilder atBlockTerminator(Location loc, Block *block,
        -:   48:                                                Listener *listener = nullptr) {
        -:   49:    auto *terminator = block->getTerminator();
        -:   50:    assert(terminator != nullptr && "the block has no terminator");
        -:   51:    return ImplicitLocOpBuilder(loc, block, Block::iterator(terminator),
        -:   52:                                listener);
        -:   53:  }
        -:   54:
        -:   55:  /// Accessors for the implied location.
        -:   56:  Location getLoc() const { return curLoc; }
        -:   57:  void setLoc(Location loc) { curLoc = loc; }
        -:   58:
        -:   59:  // We allow clients to use the explicit-loc version of create as well.
        -:   60:  using OpBuilder::create;
        -:   61:  using OpBuilder::createOrFold;
        -:   62:
        -:   63:  /// Create an operation of specific op type at the current insertion point and
        -:   64:  /// location.
        -:   65:  template <typename OpTy, typename... Args>
   41523*:   66:  OpTy create(Args &&...args) {
   29631*:   67:    return OpBuilder::create<OpTy>(curLoc, std::forward<Args>(args)...);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
call   13 never executed
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 never executed
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 returned 100%
call   64 returned 100%
call   65 returned 100%
call   66 returned 100%
call   67 returned 100%
call   68 returned 100%
call   69 returned 100%
call   70 returned 100%
call   71 returned 100%
call   72 returned 100%
call   73 returned 100%
call   74 returned 100%
call   75 returned 100%
call   76 returned 100%
call   77 returned 100%
call   78 returned 100%
call   79 returned 100%
call   80 returned 100%
call   81 returned 100%
call   82 returned 100%
call   83 returned 100%
call   84 returned 100%
call   85 returned 100%
call   86 returned 100%
call   87 returned 100%
call   88 returned 100%
call   89 returned 100%
        -:   68:  }
        -:   69:
        -:   70:  /// Create an operation of specific op type at the current insertion point,
        -:   71:  /// and immediately try to fold it. This functions populates 'results' with
        -:   72:  /// the results after folding the operation.
        -:   73:  template <typename OpTy, typename... Args>
        -:   74:  void createOrFold(llvm::SmallVectorImpl<Value> &results, Args &&...args) {
        -:   75:    OpBuilder::createOrFold<OpTy>(results, curLoc, std::forward<Args>(args)...);
        -:   76:  }
        -:   77:
        -:   78:  /// Overload to create or fold a single result operation.
        -:   79:  template <typename OpTy, typename... Args>
        -:   80:  std::enable_if_t<OpTy::template hasTrait<mlir::OpTrait::OneResult>(), Value>
     1346:   81:  createOrFold(Args &&...args) {
      673:   82:    return OpBuilder::createOrFold<OpTy>(curLoc, std::forward<Args>(args)...);
call    0 returned 100%
call    1 returned 100%
        -:   83:  }
        -:   84:
        -:   85:  /// Overload to create or fold a zero result operation.
        -:   86:  template <typename OpTy, typename... Args>
        -:   87:  std::enable_if_t<OpTy::template hasTrait<mlir::OpTrait::ZeroResults>(), OpTy>
        -:   88:  createOrFold(Args &&...args) {
        -:   89:    return OpBuilder::createOrFold<OpTy>(curLoc, std::forward<Args>(args)...);
        -:   90:  }
        -:   91:
        -:   92:  /// This builder can also be used to emit diagnostics to the current location.
        -:   93:  mlir::InFlightDiagnostic
        -:   94:  emitError(const llvm::Twine &message = llvm::Twine()) {
        -:   95:    return mlir::emitError(curLoc, message);
        -:   96:  }
        -:   97:  mlir::InFlightDiagnostic
        -:   98:  emitWarning(const llvm::Twine &message = llvm::Twine()) {
        -:   99:    return mlir::emitWarning(curLoc, message);
        -:  100:  }
        -:  101:  mlir::InFlightDiagnostic
        -:  102:  emitRemark(const llvm::Twine &message = llvm::Twine()) {
        -:  103:    return mlir::emitRemark(curLoc, message);
        -:  104:  }
        -:  105:
        -:  106:private:
        -:  107:  Location curLoc;
        -:  108:};
        -:  109:
        -:  110:} // namespace mlir
        -:  111:
        -:  112:#endif // MLIR_IR_IMPLICITLOCOPBUILDER_H
