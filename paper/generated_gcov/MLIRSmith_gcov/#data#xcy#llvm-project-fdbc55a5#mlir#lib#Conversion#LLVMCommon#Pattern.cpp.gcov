        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/LLVMCommon/Pattern.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/LLVMCommon/CMakeFiles/obj.MLIRLLVMCommonConversion.dir/Pattern.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/LLVMCommon/CMakeFiles/obj.MLIRLLVMCommonConversion.dir/Pattern.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Pattern.cpp - Conversion pattern to the LLVM dialect ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   10:#include "mlir/Dialect/LLVMIR/FunctionCallUtils.h"
        -:   11:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   12:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   13:#include "mlir/IR/AffineMap.h"
        -:   14:#include "mlir/IR/BuiltinAttributes.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18://===----------------------------------------------------------------------===//
        -:   19:// ConvertToLLVMPattern
        -:   20://===----------------------------------------------------------------------===//
        -:   21:
function _ZN4mlir20ConvertToLLVMPatternC2EN4llvm9StringRefEPNS_11MLIRContextERNS_17LLVMTypeConverterENS_14PatternBenefitE called 215232 returned 100% blocks executed 100%
   215232:   22:ConvertToLLVMPattern::ConvertToLLVMPattern(StringRef rootOpName,
        -:   23:                                           MLIRContext *context,
        -:   24:                                           LLVMTypeConverter &typeConverter,
   215232:   25:                                           PatternBenefit benefit)
   215232:   26:    : ConversionPattern(typeConverter, rootOpName, benefit, context) {}
call    0 returned 100%
        -:   27:
function _ZNK4mlir20ConvertToLLVMPattern16getTypeConverterEv called 6765587 returned 100% blocks executed 100%
 8095514*:   28:LLVMTypeConverter *ConvertToLLVMPattern::getTypeConverter() const {
 8095514*:   29:  return static_cast<LLVMTypeConverter *>(
    #####:   30:      ConversionPattern::getTypeConverter());
call    0 never executed
        -:   31:}
        -:   32:
function _ZNK4mlir20ConvertToLLVMPattern10getDialectEv called 0 returned 0% blocks executed 0%
    #####:   33:LLVM::LLVMDialect &ConvertToLLVMPattern::getDialect() const {
    #####:   34:  return *getTypeConverter()->getDialect();
        -:   35:}
        -:   36:
function _ZNK4mlir20ConvertToLLVMPattern12getIndexTypeEv called 202401 returned 100% blocks executed 100%
  1212646:   37:Type ConvertToLLVMPattern::getIndexType() const {
   202401:   38:  return getTypeConverter()->getIndexType();
call    0 returned 100%
        -:   39:}
        -:   40:
function _ZNK4mlir20ConvertToLLVMPattern13getIntPtrTypeEj called 21829 returned 100% blocks executed 100%
    21829:   41:Type ConvertToLLVMPattern::getIntPtrType(unsigned addressSpace) const {
    21829:   42:  return IntegerType::get(&getTypeConverter()->getContext(),
call    0 returned 100%
call    1 returned 100%
    21829:   43:                          getTypeConverter()->getPointerBitwidth(addressSpace));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   44:}
        -:   45:
function _ZNK4mlir20ConvertToLLVMPattern11getVoidTypeEv called 1 returned 100% blocks executed 100%
        1:   46:Type ConvertToLLVMPattern::getVoidType() const {
        1:   47:  return LLVM::LLVMVoidType::get(&getTypeConverter()->getContext());
call    0 returned 100%
call    1 returned 100%
        -:   48:}
        -:   49:
function _ZNK4mlir20ConvertToLLVMPattern14getVoidPtrTypeEv called 73622 returned 100% blocks executed 100%
    73622:   50:Type ConvertToLLVMPattern::getVoidPtrType() const {
    73622:   51:  return LLVM::LLVMPointerType::get(
call    0 returned 100%
    73622:   52:      IntegerType::get(&getTypeConverter()->getContext(), 8));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   53:}
        -:   54:
function _ZN4mlir20ConvertToLLVMPattern23createIndexAttrConstantERNS_9OpBuilderENS_8LocationENS_4TypeEl called 869080 returned 100% blocks executed 100%
   869080:   55:Value ConvertToLLVMPattern::createIndexAttrConstant(OpBuilder &builder,
        -:   56:                                                    Location loc,
        -:   57:                                                    Type resultType,
        -:   58:                                                    int64_t value) {
  1738160:   59:  return builder.create<LLVM::ConstantOp>(loc, resultType,
   869080:   60:                                          builder.getIndexAttr(value));
call    0 returned 100%
call    1 returned 100%
        -:   61:}
        -:   62:
function _ZNK4mlir20ConvertToLLVMPattern19createIndexConstantERNS_25ConversionPatternRewriterENS_8LocationEm called 825213 returned 100% blocks executed 100%
   825213:   63:Value ConvertToLLVMPattern::createIndexConstant(
        -:   64:    ConversionPatternRewriter &builder, Location loc, uint64_t value) const {
   825213:   65:  return createIndexAttrConstant(builder, loc, getIndexType(), value);
call    0 returned 100%
call    1 returned 100%
        -:   66:}
        -:   67:
function _ZNK4mlir20ConvertToLLVMPattern20getStridedElementPtrENS_8LocationENS_10MemRefTypeENS_5ValueENS_10ValueRangeERNS_25ConversionPatternRewriterE called 95353 returned 100% blocks executed 79%
    95353:   68:Value ConvertToLLVMPattern::getStridedElementPtr(
        -:   69:    Location loc, MemRefType type, Value memRefDesc, ValueRange indices,
        -:   70:    ConversionPatternRewriter &rewriter) const {
        -:   71:
    95353:   72:  int64_t offset;
    95353:   73:  SmallVector<int64_t, 4> strides;
call    0 returned 100%
    95353:   74:  auto successStrides = getStridesAndOffset(type, strides, offset);
call    0 returned 100%
   95353*:   75:  assert(succeeded(successStrides) && "unexpected non-strided memref");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    95353:   76:  (void)successStrides;
        -:   77:
    95353:   78:  MemRefDescriptor memRefDescriptor(memRefDesc);
call    0 returned 100%
    95353:   79:  Value base = memRefDescriptor.alignedPtr(rewriter, loc);
call    0 returned 100%
        -:   80:
    95353:   81:  Value index;
    95353:   82:  if (offset != 0) // Skip if offset is zero.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:    index = ShapedType::isDynamicStrideOrOffset(offset)
branch  0 never executed
branch  1 never executed
    #####:   84:                ? memRefDescriptor.offset(rewriter, loc)
call    0 never executed
    #####:   85:                : createIndexConstant(rewriter, loc, offset);
call    0 never executed
        -:   86:
   282973:   87:  for (int i = 0, e = indices.size(); i < e; ++i) {
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
   187620:   88:    Value increment = indices[i];
call    0 returned 100%
   187620:   89:    if (strides[i] != 1) { // Skip if stride is 1.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
    89309:   90:      Value stride = ShapedType::isDynamicStrideOrOffset(strides[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   91:                         ? memRefDescriptor.stride(rewriter, loc, i)
call    0 never executed
    89309:   92:                         : createIndexConstant(rewriter, loc, strides[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
    89309:   93:      increment = rewriter.create<LLVM::MulOp>(loc, increment, stride);
call    0 returned 100%
        -:   94:    }
    94506:   95:    index =
   282126:   96:        index ? rewriter.create<LLVM::AddOp>(loc, index, increment) : increment;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:   97:  }
        -:   98:
    95353:   99:  Type elementPtrType = memRefDescriptor.getElementPtrType();
call    0 returned 100%
    94506:  100:  return index ? rewriter.create<LLVM::GEPOp>(loc, elementPtrType, base, index)
call    0 returned 100%
   189859:  101:               : base;
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  102:}
        -:  103:
        -:  104:// Check if the MemRefType `type` is supported by the lowering. We currently
        -:  105:// only support memrefs with identity maps.
function _ZNK4mlir20ConvertToLLVMPattern31isConvertibleAndHasIdentityMapsENS_10MemRefTypeE called 309979 returned 100% blocks executed 100%
   309979:  106:bool ConvertToLLVMPattern::isConvertibleAndHasIdentityMaps(
        -:  107:    MemRefType type) const {
   309979:  108:  if (!typeConverter->convertType(type.getElementType()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  109:    return false;
   309979:  110:  return type.getLayout().isIdentity();
call    0 returned 100%
call    1 returned 100%
        -:  111:}
        -:  112:
function _ZNK4mlir20ConvertToLLVMPattern17getElementPtrTypeENS_10MemRefTypeE called 300998 returned 100% blocks executed 100%
   300998:  113:Type ConvertToLLVMPattern::getElementPtrType(MemRefType type) const {
   300998:  114:  auto elementType = type.getElementType();
call    0 returned 100%
   300998:  115:  auto structElementType = typeConverter->convertType(elementType);
call    0 returned 100%
   601996:  116:  return LLVM::LLVMPointerType::get(structElementType,
   300998:  117:                                    type.getMemorySpaceAsInt());
call    0 returned 100%
call    1 returned 100%
        -:  118:}
        -:  119:
function _ZNK4mlir20ConvertToLLVMPattern24getMemRefDescriptorSizesENS_8LocationENS_10MemRefTypeENS_10ValueRangeERNS_25ConversionPatternRewriterERN4llvm15SmallVectorImplINS_5ValueEEESA_RS8_ called 140715 returned 100% blocks executed 84%
   140715:  120:void ConvertToLLVMPattern::getMemRefDescriptorSizes(
        -:  121:    Location loc, MemRefType memRefType, ValueRange dynamicSizes,
        -:  122:    ConversionPatternRewriter &rewriter, SmallVectorImpl<Value> &sizes,
        -:  123:    SmallVectorImpl<Value> &strides, Value &sizeBytes) const {
  140715*:  124:  assert(isConvertibleAndHasIdentityMaps(memRefType) &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  125:         "layout maps must have been normalized away");
  281430*:  126:  assert(count(memRefType.getShape(), ShapedType::kDynamicSize) ==
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  127:             static_cast<ssize_t>(dynamicSizes.size()) &&
        -:  128:         "dynamicSizes size doesn't match dynamic sizes count in memref shape");
        -:  129:
   140715:  130:  sizes.reserve(memRefType.getRank());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
   140715:  131:  unsigned dynamicIndex = 0;
   420421:  132:  for (int64_t size : memRefType.getShape()) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
   559412:  133:    sizes.push_back(size == ShapedType::kDynamicSize
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
      117:  134:                        ? dynamicSizes[dynamicIndex++]
call    0 returned 100%
   279589:  135:                        : createIndexConstant(rewriter, loc, size));
call    0 returned 100%
        -:  136:  }
        -:  137:
        -:  138:  // Strides: iterate sizes in reverse order and multiply.
   140715:  139:  int64_t stride = 1;
   140715:  140:  Value runningStride = createIndexConstant(rewriter, loc, 1);
call    0 returned 100%
   140715:  141:  strides.resize(memRefType.getRank());
call    0 returned 100%
call    1 returned 100%
   420421:  142:  for (auto i = memRefType.getRank(); i-- > 0;) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
   279706:  143:    strides[i] = runningStride;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  144:
   279706:  145:    int64_t size = memRefType.getShape()[i];
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
  279706*:  146:    if (size == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  147:      continue;
   279706:  148:    bool useSizeAsStride = stride == 1;
   279706:  149:    if (size == ShapedType::kDynamicSize)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:  150:      stride = ShapedType::kDynamicSize;
   279589:  151:    if (stride != ShapedType::kDynamicSize)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   279574:  152:      stride *= size;
        -:  153:
   279706:  154:    if (useSizeAsStride)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
   144131:  155:      runningStride = sizes[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   135575:  156:    else if (stride == ShapedType::kDynamicSize)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
       54:  157:      runningStride =
       54:  158:          rewriter.create<LLVM::MulOp>(loc, runningStride, sizes[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  159:    else
   135521:  160:      runningStride = createIndexConstant(rewriter, loc, stride);
call    0 returned 100%
        -:  161:  }
        -:  162:
        -:  163:  // Buffer size in bytes.
   140715:  164:  Type elementPtrType = getElementPtrType(memRefType);
call    0 returned 100%
   140715:  165:  Value nullPtr = rewriter.create<LLVM::NullOp>(loc, elementPtrType);
call    0 returned 100%
call    1 returned 100%
   140715:  166:  Value gepPtr =
   140715:  167:      rewriter.create<LLVM::GEPOp>(loc, elementPtrType, nullPtr, runningStride);
call    0 returned 100%
call    1 returned 100%
   140715:  168:  sizeBytes = rewriter.create<LLVM::PtrToIntOp>(loc, getIndexType(), gepPtr);
call    0 returned 100%
call    1 returned 100%
   140715:  169:}
        -:  170:
function _ZNK4mlir20ConvertToLLVMPattern14getSizeInBytesENS_8LocationENS_4TypeERNS_25ConversionPatternRewriterE called 44317 returned 100% blocks executed 100%
    44317:  171:Value ConvertToLLVMPattern::getSizeInBytes(
        -:  172:    Location loc, Type type, ConversionPatternRewriter &rewriter) const {
        -:  173:  // Compute the size of an individual element. This emits the MLIR equivalent
        -:  174:  // of the following sizeof(...) implementation in LLVM IR:
        -:  175:  //   %0 = getelementptr %elementType* null, %indexType 1
        -:  176:  //   %1 = ptrtoint %elementType* %0 to %indexType
        -:  177:  // which is a common pattern of getting the size of a type in bytes.
    44317:  178:  auto convertedPtrType =
    44317:  179:      LLVM::LLVMPointerType::get(typeConverter->convertType(type));
call    0 returned 100%
call    1 returned 100%
    44317:  180:  auto nullPtr = rewriter.create<LLVM::NullOp>(loc, convertedPtrType);
call    0 returned 100%
    44317:  181:  auto gep = rewriter.create<LLVM::GEPOp>(loc, convertedPtrType, nullPtr,
    44317:  182:                                          ArrayRef<LLVM::GEPArg>{1});
call    0 returned 100%
call    1 returned 100%
    44317:  183:  return rewriter.create<LLVM::PtrToIntOp>(loc, getIndexType(), gep);
call    0 returned 100%
call    1 returned 100%
        -:  184:}
        -:  185:
function _ZNK4mlir20ConvertToLLVMPattern14getNumElementsENS_8LocationEN4llvm8ArrayRefINS_5ValueEEERNS_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  186:Value ConvertToLLVMPattern::getNumElements(
        -:  187:    Location loc, ArrayRef<Value> shape,
        -:  188:    ConversionPatternRewriter &rewriter) const {
        -:  189:  // Compute the total number of memref elements.
    #####:  190:  Value numElements =
    #####:  191:      shape.empty() ? createIndexConstant(rewriter, loc, 1) : shape.front();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  192:  for (unsigned i = 1, e = shape.size(); i < e; ++i)
branch  0 never executed
branch  1 never executed
    #####:  193:    numElements = rewriter.create<LLVM::MulOp>(loc, numElements, shape[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  194:  return numElements;
        -:  195:}
        -:  196:
        -:  197:/// Creates and populates the memref descriptor struct given all its fields.
function _ZNK4mlir20ConvertToLLVMPattern22createMemRefDescriptorENS_8LocationENS_10MemRefTypeENS_5ValueES3_N4llvm8ArrayRefIS3_EES6_RNS_25ConversionPatternRewriterE called 140715 returned 100% blocks executed 100%
   140715:  198:MemRefDescriptor ConvertToLLVMPattern::createMemRefDescriptor(
        -:  199:    Location loc, MemRefType memRefType, Value allocatedPtr, Value alignedPtr,
        -:  200:    ArrayRef<Value> sizes, ArrayRef<Value> strides,
        -:  201:    ConversionPatternRewriter &rewriter) const {
   140715:  202:  auto structType = typeConverter->convertType(memRefType);
call    0 returned 100%
   140715:  203:  auto memRefDescriptor = MemRefDescriptor::undef(rewriter, loc, structType);
call    0 returned 100%
        -:  204:
        -:  205:  // Field 1: Allocated pointer, used for malloc/free.
   140715:  206:  memRefDescriptor.setAllocatedPtr(rewriter, loc, allocatedPtr);
call    0 returned 100%
        -:  207:
        -:  208:  // Field 2: Actual aligned pointer to payload.
   140715:  209:  memRefDescriptor.setAlignedPtr(rewriter, loc, alignedPtr);
call    0 returned 100%
        -:  210:
        -:  211:  // Field 3: Offset in aligned pointer.
   140715:  212:  memRefDescriptor.setOffset(rewriter, loc,
call    0 returned 100%
call    1 returned 100%
        -:  213:                             createIndexConstant(rewriter, loc, 0));
        -:  214:
        -:  215:  // Fields 4: Sizes.
   420421:  216:  for (const auto &en : llvm::enumerate(sizes))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
   279706:  217:    memRefDescriptor.setSize(rewriter, loc, en.index(), en.value());
call    0 returned 100%
        -:  218:
        -:  219:  // Field 5: Strides.
   420421:  220:  for (const auto &en : llvm::enumerate(strides))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
   279706:  221:    memRefDescriptor.setStride(rewriter, loc, en.index(), en.value());
call    0 returned 100%
        -:  222:
   140715:  223:  return memRefDescriptor;
        -:  224:}
        -:  225:
function _ZNK4mlir20ConvertToLLVMPattern23copyUnrankedDescriptorsERNS_9OpBuilderENS_8LocationENS_9TypeRangeERN4llvm15SmallVectorImplINS_5ValueEEEb called 1884 returned 100% blocks executed 17%
     1884:  226:LogicalResult ConvertToLLVMPattern::copyUnrankedDescriptors(
        -:  227:    OpBuilder &builder, Location loc, TypeRange origTypes,
        -:  228:    SmallVectorImpl<Value> &operands, bool toDynamic) const {
    1884*:  229:  assert(origTypes.size() == operands.size() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  230:         "expected as may original types as operands");
        -:  231:
        -:  232:  // Find operands of unranked memref type and store them.
     1884:  233:  SmallVector<UnrankedMemRefDescriptor, 4> unrankedMemrefs;
     2777:  234:  for (unsigned i = 0, e = operands.size(); i < e; ++i)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
      893:  235:    if (origTypes[i].isa<UnrankedMemRefType>())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  236:      unrankedMemrefs.emplace_back(operands[i]);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  237:
     1884:  238:  if (unrankedMemrefs.empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1884:  239:    return success();
        -:  240:
        -:  241:  // Compute allocation sizes.
    1884*:  242:  SmallVector<Value, 4> sizes;
call    0 never executed
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  243:  UnrankedMemRefDescriptor::computeSizes(builder, loc, *getTypeConverter(),
call    0 never executed
        -:  244:                                         unrankedMemrefs, sizes);
        -:  245:
        -:  246:  // Get frequently used types.
    #####:  247:  MLIRContext *context = builder.getContext();
call    0 never executed
    #####:  248:  Type voidPtrType = LLVM::LLVMPointerType::get(IntegerType::get(context, 8));
call    0 never executed
call    1 never executed
    #####:  249:  auto i1Type = IntegerType::get(context, 1);
call    0 never executed
    #####:  250:  Type indexType = getTypeConverter()->getIndexType();
call    0 never executed
        -:  251:
        -:  252:  // Find the malloc and free, or declare them if necessary.
    #####:  253:  auto module = builder.getInsertionPoint()->getParentOfType<ModuleOp>();
call    0 never executed
call    1 never executed
    #####:  254:  LLVM::LLVMFuncOp freeFunc, mallocFunc;
branch  0 never executed
branch  1 never executed
    #####:  255:  if (toDynamic)
branch  0 never executed
branch  1 never executed
    #####:  256:    mallocFunc = LLVM::lookupOrCreateMallocFn(module, indexType);
call    0 never executed
    #####:  257:  if (!toDynamic)
branch  0 never executed
branch  1 never executed
    #####:  258:    freeFunc = LLVM::lookupOrCreateFreeFn(module);
call    0 never executed
        -:  259:
        -:  260:  // Initialize shared constants.
    #####:  261:  Value zero =
    #####:  262:      builder.create<LLVM::ConstantOp>(loc, i1Type, builder.getBoolAttr(false));
call    0 never executed
call    1 never executed
        -:  263:
    #####:  264:  unsigned unrankedMemrefPos = 0;
    #####:  265:  for (unsigned i = 0, e = operands.size(); i < e; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  266:    Type type = origTypes[i];
call    0 never executed
    #####:  267:    if (!type.isa<UnrankedMemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  268:      continue;
    #####:  269:    Value allocationSize = sizes[unrankedMemrefPos++];
branch  0 never executed
branch  1 never executed
    #####:  270:    UnrankedMemRefDescriptor desc(operands[i]);
branch  0 never executed
branch  1 never executed
        -:  271:
        -:  272:    // Allocate memory, copy, and free the source if necessary.
    #####:  273:    Value memory =
        -:  274:        toDynamic
    #####:  275:            ? builder.create<LLVM::CallOp>(loc, mallocFunc, allocationSize)
call    0 never executed
    #####:  276:                  .getResult()
call    0 never executed
    #####:  277:            : builder.create<LLVM::AllocaOp>(loc, voidPtrType, allocationSize,
    #####:  278:                                             /*alignment=*/0);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  279:    Value source = desc.memRefDescPtr(builder, loc);
call    0 never executed
    #####:  280:    builder.create<LLVM::MemcpyOp>(loc, memory, source, allocationSize, zero);
call    0 never executed
    #####:  281:    if (!toDynamic)
branch  0 never executed
branch  1 never executed
    #####:  282:      builder.create<LLVM::CallOp>(loc, freeFunc, source);
call    0 never executed
        -:  283:
        -:  284:    // Create a new descriptor. The same descriptor can be returned multiple
        -:  285:    // times, attempting to modify its pointer can lead to memory leaks
        -:  286:    // (allocated twice and overwritten) or double frees (the caller does not
        -:  287:    // know if the descriptor points to the same memory).
    #####:  288:    Type descriptorType = getTypeConverter()->convertType(type);
call    0 never executed
    #####:  289:    if (!descriptorType)
branch  0 never executed
branch  1 never executed
    #####:  290:      return failure();
    #####:  291:    auto updatedDesc =
    #####:  292:        UnrankedMemRefDescriptor::undef(builder, loc, descriptorType);
call    0 never executed
    #####:  293:    Value rank = desc.rank(builder, loc);
call    0 never executed
    #####:  294:    updatedDesc.setRank(builder, loc, rank);
call    0 never executed
    #####:  295:    updatedDesc.setMemRefDescPtr(builder, loc, memory);
call    0 never executed
        -:  296:
    #####:  297:    operands[i] = updatedDesc;
branch  0 never executed
branch  1 never executed
        -:  298:  }
        -:  299:
    #####:  300:  return success();
branch  0 never executed
branch  1 never executed
        -:  301:}
        -:  302:
        -:  303://===----------------------------------------------------------------------===//
        -:  304:// Detail methods
        -:  305://===----------------------------------------------------------------------===//
        -:  306:
        -:  307:/// Replaces the given operation "op" with a new operation of type "targetOp"
        -:  308:/// and given operands.
function _ZN4mlir4LLVM6detail15oneToOneRewriteEPNS_9OperationEN4llvm9StringRefENS_10ValueRangeENS4_8ArrayRefINS_14NamedAttributeEEERNS_17LLVMTypeConverterERNS_25ConversionPatternRewriterE called 2320328 returned 100% blocks executed 56%
  2320328:  309:LogicalResult LLVM::detail::oneToOneRewrite(
        -:  310:    Operation *op, StringRef targetOp, ValueRange operands,
        -:  311:    ArrayRef<NamedAttribute> targetAttrs, LLVMTypeConverter &typeConverter,
        -:  312:    ConversionPatternRewriter &rewriter) {
  2320328:  313:  unsigned numResults = op->getNumResults();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  314:
  2320328:  315:  SmallVector<Type> resultTypes;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  2320328:  316:  if (numResults != 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  2320328:  317:    resultTypes.push_back(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  318:        typeConverter.packFunctionResults(op->getResultTypes()));
  2320328:  319:    if (!resultTypes.back())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
    36905:  320:      return failure();
        -:  321:  }
        -:  322:
        -:  323:  // Create the operation through state since we don't know its C++ type.
  2283423:  324:  Operation *newOp =
  2283423:  325:      rewriter.create(op->getLoc(), rewriter.getStringAttr(targetOp), operands,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  326:                      resultTypes, targetAttrs);
        -:  327:
        -:  328:  // If the operation produced 0 or 1 result, return them immediately.
  2283423:  329:  if (numResults == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  330:    return rewriter.eraseOp(op), success();
call    0 never executed
  2283423:  331:  if (numResults == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  2283423:  332:    return rewriter.replaceOp(op, newOp->getResult(0)), success();
call    0 returned 100%
call    1 returned 100%
        -:  333:
        -:  334:  // Otherwise, it had been converted to an operation producing a structure.
        -:  335:  // Extract individual results from the structure and return them as list.
 2320328*:  336:  SmallVector<Value, 4> results;
branch  0 never executed
branch  1 never executed
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  337:  results.reserve(numResults);
branch  0 never executed
branch  1 never executed
    #####:  338:  for (unsigned i = 0; i < numResults; ++i) {
branch  0 never executed
branch  1 never executed
    #####:  339:    results.push_back(rewriter.create<LLVM::ExtractValueOp>(
call    0 never executed
    #####:  340:        op->getLoc(), newOp->getResult(0), i));
call    0 never executed
call    1 never executed
        -:  341:  }
    #####:  342:  rewriter.replaceOp(op, results);
call    0 never executed
call    1 never executed
    #####:  343:  return success();
branch  0 never executed
branch  1 never executed
        -:  344:}
