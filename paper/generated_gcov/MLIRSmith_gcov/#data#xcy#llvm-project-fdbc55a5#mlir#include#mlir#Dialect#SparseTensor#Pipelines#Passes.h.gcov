        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/SparseTensor/Pipelines/Passes.h
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Passes.h - Sparse tensor pipeline entry points -----------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This header file defines prototypes of all sparse tensor pipelines.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef MLIR_DIALECT_SPARSETENSOR_PIPELINES_PASSES_H_
        -:   14:#define MLIR_DIALECT_SPARSETENSOR_PIPELINES_PASSES_H_
        -:   15:
        -:   16:#include "mlir/Conversion/VectorToLLVM/ConvertVectorToLLVM.h"
        -:   17:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h"
        -:   18:#include "mlir/Pass/PassOptions.h"
        -:   19:
        -:   20:using namespace mlir::detail;
        -:   21:using namespace llvm::cl;
        -:   22:
        -:   23:namespace mlir {
        -:   24:namespace sparse_tensor {
        -:   25:
        -:   26:/// Options for the "sparse-compiler" pipeline.  So far this only contains
        -:   27:/// a subset of the options that can be set for the underlying passes,
        -:   28:/// because it must be manually kept in sync with the tablegen files
        -:   29:/// for those passes.
        -:   30:struct SparseCompilerOptions
        -:   31:    : public PassPipelineOptions<SparseCompilerOptions> {
        -:   32:  // These options must be kept in sync with `SparsificationBase`.
        -:   33:  // TODO(57514): These options are duplicated in Passes.td.
        -:   34:  PassOptions::Option<mlir::SparseParallelizationStrategy> parallelization{
        -:   35:      *this, "parallelization-strategy",
        -:   36:      ::llvm::cl::desc("Set the parallelization strategy"),
        -:   37:      ::llvm::cl::init(mlir::SparseParallelizationStrategy::kNone),
        -:   38:      llvm::cl::values(
        -:   39:          clEnumValN(mlir::SparseParallelizationStrategy::kNone, "none",
        -:   40:                     "Turn off sparse parallelization."),
        -:   41:          clEnumValN(mlir::SparseParallelizationStrategy::kDenseOuterLoop,
        -:   42:                     "dense-outer-loop",
        -:   43:                     "Enable dense outer loop sparse parallelization."),
        -:   44:          clEnumValN(mlir::SparseParallelizationStrategy::kAnyStorageOuterLoop,
        -:   45:                     "any-storage-outer-loop",
        -:   46:                     "Enable sparse parallelization regardless of storage for "
        -:   47:                     "the outer loop."),
        -:   48:          clEnumValN(mlir::SparseParallelizationStrategy::kDenseAnyLoop,
        -:   49:                     "dense-any-loop",
        -:   50:                     "Enable dense parallelization for any loop."),
        -:   51:          clEnumValN(
        -:   52:              mlir::SparseParallelizationStrategy::kAnyStorageAnyLoop,
        -:   53:              "any-storage-any-loop",
        -:   54:              "Enable sparse parallelization for any storage and loop."))};
        -:   55:
        -:   56:  PassOptions::Option<bool> enableRuntimeLibrary{
        -:   57:      *this, "enable-runtime-library",
        -:   58:      desc("Enable runtime library for manipulating sparse tensors"),
        -:   59:      // TODO: Disable runtime library by default after feature complete.
        -:   60:      init(true)};
        -:   61:
        -:   62:  PassOptions::Option<bool> testBufferizationAnalysisOnly{
        -:   63:      *this, "test-bufferization-analysis-only",
        -:   64:      desc("Run only the inplacability analysis"), init(false)};
        -:   65:
        -:   66:  /// Projects out the options for `createSparsificationPass`.
      389:   67:  SparsificationOptions sparsificationOptions() const {
      389:   68:    return SparsificationOptions(parallelization);
call    0 returned 100%
        -:   69:  }
        -:   70:
        -:   71:  // These options must be kept in sync with `SparseTensorConversionBase`.
        -:   72:  PassOptions::Option<int32_t> sparseToSparse{
        -:   73:      *this, "s2s-strategy",
        -:   74:      desc("Set the strategy for sparse-to-sparse conversion"), init(0)};
        -:   75:
        -:   76:  /// Projects out the options for `createSparsificationPass`.
      389:   77:  SparseTensorConversionOptions sparseTensorConversionOptions() const {
      389:   78:    return SparseTensorConversionOptions(
call    0 returned 100%
call    1 returned 100%
        -:   79:        sparseToSparseConversionStrategy(sparseToSparse));
        -:   80:  }
        -:   81:
        -:   82:  // These options must be kept in sync with `ConvertVectorToLLVMBase`.
        -:   83:  // TODO(wrengr): does `indexOptimizations` differ from `enableSIMDIndex32`?
        -:   84:  PassOptions::Option<bool> reassociateFPReductions{
        -:   85:      *this, "reassociate-fp-reductions",
        -:   86:      desc("Allows llvm to reassociate floating-point reductions for speed"),
        -:   87:      init(false)};
        -:   88:  PassOptions::Option<bool> indexOptimizations{
        -:   89:      *this, "enable-index-optimizations",
        -:   90:      desc("Allows compiler to assume indices fit in 32-bit if that yields "
        -:   91:           "faster code"),
        -:   92:      init(true)};
        -:   93:  PassOptions::Option<bool> amx{
        -:   94:      *this, "enable-amx",
        -:   95:      desc("Enables the use of AMX dialect while lowering the vector dialect."),
        -:   96:      init(false)};
        -:   97:  PassOptions::Option<bool> armNeon{*this, "enable-arm-neon",
        -:   98:                                    desc("Enables the use of ArmNeon dialect "
        -:   99:                                         "while lowering the vector dialect."),
        -:  100:                                    init(false)};
        -:  101:  PassOptions::Option<bool> armSVE{*this, "enable-arm-sve",
        -:  102:                                   desc("Enables the use of ArmSVE dialect "
        -:  103:                                        "while lowering the vector dialect."),
        -:  104:                                   init(false)};
        -:  105:  PassOptions::Option<bool> x86Vector{
        -:  106:      *this, "enable-x86vector",
        -:  107:      desc("Enables the use of X86Vector dialect while lowering the vector "
        -:  108:           "dialect."),
        -:  109:      init(false)};
        -:  110:
        -:  111:  /// Projects out the options for `createConvertVectorToLLVMPass`.
      389:  112:  LowerVectorToLLVMOptions lowerVectorToLLVMOptions() const {
      389:  113:    LowerVectorToLLVMOptions opts{};
call    0 returned 100%
      389:  114:    opts.enableReassociateFPReductions(reassociateFPReductions);
call    0 returned 100%
      389:  115:    opts.enableIndexOptimizations(indexOptimizations);
call    0 returned 100%
      389:  116:    opts.enableArmNeon(armNeon);
call    0 returned 100%
      389:  117:    opts.enableArmSVE(armSVE);
call    0 returned 100%
      389:  118:    opts.enableAMX(amx);
call    0 returned 100%
      389:  119:    opts.enableX86Vector(x86Vector);
call    0 returned 100%
      389:  120:    return opts;
call    0 returned 100%
        -:  121:  }
        -:  122:};
        -:  123:
        -:  124://===----------------------------------------------------------------------===//
        -:  125:// Building and Registering.
        -:  126://===----------------------------------------------------------------------===//
        -:  127:
        -:  128:/// Adds the "sparse-compiler" pipeline to the `OpPassManager`.  This
        -:  129:/// is the standard pipeline for taking sparsity-agnostic IR using
        -:  130:/// the sparse-tensor type and lowering it to LLVM IR with concrete
        -:  131:/// representations and algorithms for sparse tensors.
        -:  132:void buildSparseCompiler(OpPassManager &pm,
        -:  133:                         const SparseCompilerOptions &options);
        -:  134:
        -:  135:/// Registers all pipelines for the `sparse_tensor` dialect.  At present,
        -:  136:/// this includes only "sparse-compiler".
        -:  137:void registerSparseTensorPipelines();
        -:  138:
        -:  139:} // namespace sparse_tensor
        -:  140:} // namespace mlir
        -:  141:
        -:  142:#endif // MLIR_DIALECT_SPARSETENSOR_PIPELINES_PASSES_H_
