        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/IndexToLLVM/IndexToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/IndexToLLVM/CMakeFiles/obj.MLIRIndexToLLVM.dir/IndexToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/IndexToLLVM/CMakeFiles/obj.MLIRIndexToLLVM.dir/IndexToLLVM.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- IndexToLLVM.cpp - Index to LLVM dialect conversion -------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/IndexToLLVM/IndexToLLVM.h"
        -:   10:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   11:#include "mlir/Dialect/Index/IR/IndexAttrs.h"
        -:   12:#include "mlir/Dialect/Index/IR/IndexDialect.h"
        -:   13:#include "mlir/Dialect/Index/IR/IndexOps.h"
        -:   14:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:using namespace index;
        -:   19:
        -:   20:namespace {
        -:   21:
        -:   22://===----------------------------------------------------------------------===//
        -:   23:// ConvertIndexCeilDivS
        -:   24://===----------------------------------------------------------------------===//
        -:   25:
        -:   26:/// Convert `ceildivs(n, m)` into `x = m > 0 ? -1 : 1` and then
        -:   27:/// `n*m > 0 ? (n+x)/m + 1 : -(-n/m)`.
        -:   28:struct ConvertIndexCeilDivS : mlir::ConvertOpToLLVMPattern<CeilDivSOp> {
      425:   29:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   30:
        -:   31:  LogicalResult
function _ZNK12_GLOBAL__N_120ConvertIndexCeilDivS15matchAndRewriteEN4mlir5index10CeilDivSOpENS2_17CeilDivSOpAdaptorERNS1_25ConversionPatternRewriterE called 3209 returned 100% blocks executed 100%
     3209:   32:  matchAndRewrite(CeilDivSOp op, CeilDivSOpAdaptor adaptor,
        -:   33:                  ConversionPatternRewriter &rewriter) const override {
     3209:   34:    Location loc = op.getLoc();
call    0 returned 100%
     3209:   35:    Value n = adaptor.getLhs();
call    0 returned 100%
     3209:   36:    Value m = adaptor.getRhs();
call    0 returned 100%
     3209:   37:    Value zero = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), 0);
call    0 returned 100%
call    1 returned 100%
     3209:   38:    Value posOne = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), 1);
call    0 returned 100%
call    1 returned 100%
     3209:   39:    Value negOne = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), -1);
call    0 returned 100%
call    1 returned 100%
        -:   40:
        -:   41:    // Compute `x`.
     3209:   42:    Value mPos =
     3209:   43:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::sgt, m, zero);
call    0 returned 100%
call    1 returned 100%
     3209:   44:    Value x = rewriter.create<LLVM::SelectOp>(loc, mPos, negOne, posOne);
call    0 returned 100%
call    1 returned 100%
        -:   45:
        -:   46:    // Compute the positive result.
     3209:   47:    Value nPlusX = rewriter.create<LLVM::AddOp>(loc, n, x);
call    0 returned 100%
call    1 returned 100%
     3209:   48:    Value nPlusXDivM = rewriter.create<LLVM::SDivOp>(loc, nPlusX, m);
call    0 returned 100%
call    1 returned 100%
     3209:   49:    Value posRes = rewriter.create<LLVM::AddOp>(loc, nPlusXDivM, posOne);
call    0 returned 100%
call    1 returned 100%
        -:   50:
        -:   51:    // Compute the negative result.
     3209:   52:    Value negN = rewriter.create<LLVM::SubOp>(loc, zero, n);
call    0 returned 100%
call    1 returned 100%
     3209:   53:    Value negNDivM = rewriter.create<LLVM::SDivOp>(loc, negN, m);
call    0 returned 100%
call    1 returned 100%
     3209:   54:    Value negRes = rewriter.create<LLVM::SubOp>(loc, zero, negNDivM);
call    0 returned 100%
call    1 returned 100%
        -:   55:
        -:   56:    // Pick the positive result if `n` and `m` have the same sign and `n` is
        -:   57:    // non-zero, i.e. `(n > 0) == (m > 0) && n != 0`.
     3209:   58:    Value nPos =
     3209:   59:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::sgt, n, zero);
call    0 returned 100%
call    1 returned 100%
     3209:   60:    Value sameSign =
     3209:   61:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::eq, nPos, mPos);
call    0 returned 100%
call    1 returned 100%
     3209:   62:    Value nNonZero =
     3209:   63:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::ne, n, zero);
call    0 returned 100%
call    1 returned 100%
     3209:   64:    Value cmp = rewriter.create<LLVM::AndOp>(loc, sameSign, nNonZero);
call    0 returned 100%
call    1 returned 100%
     3209:   65:    rewriter.replaceOpWithNewOp<LLVM::SelectOp>(op, cmp, posRes, negRes);
call    0 returned 100%
     3209:   66:    return success();
        -:   67:  }
        -:   68:};
        -:   69:
        -:   70://===----------------------------------------------------------------------===//
        -:   71:// ConvertIndexCeilDivU
        -:   72://===----------------------------------------------------------------------===//
        -:   73:
        -:   74:/// Convert `ceildivu(n, m)` into `n == 0 ? 0 : (n-1)/m + 1`.
        -:   75:struct ConvertIndexCeilDivU : mlir::ConvertOpToLLVMPattern<CeilDivUOp> {
      425:   76:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:   77:
        -:   78:  LogicalResult
function _ZNK12_GLOBAL__N_120ConvertIndexCeilDivU15matchAndRewriteEN4mlir5index10CeilDivUOpENS2_17CeilDivUOpAdaptorERNS1_25ConversionPatternRewriterE called 3259 returned 100% blocks executed 100%
     3259:   79:  matchAndRewrite(CeilDivUOp op, CeilDivUOpAdaptor adaptor,
        -:   80:                  ConversionPatternRewriter &rewriter) const override {
     3259:   81:    Location loc = op.getLoc();
call    0 returned 100%
     3259:   82:    Value n = adaptor.getLhs();
call    0 returned 100%
     3259:   83:    Value m = adaptor.getRhs();
call    0 returned 100%
     3259:   84:    Value zero = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), 0);
call    0 returned 100%
call    1 returned 100%
     3259:   85:    Value one = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), 1);
call    0 returned 100%
call    1 returned 100%
        -:   86:
        -:   87:    // Compute the non-zero result.
     3259:   88:    Value minusOne = rewriter.create<LLVM::SubOp>(loc, n, one);
call    0 returned 100%
call    1 returned 100%
     3259:   89:    Value quotient = rewriter.create<LLVM::UDivOp>(loc, minusOne, m);
call    0 returned 100%
call    1 returned 100%
     3259:   90:    Value plusOne = rewriter.create<LLVM::AddOp>(loc, quotient, one);
call    0 returned 100%
call    1 returned 100%
        -:   91:
        -:   92:    // Pick the result.
     3259:   93:    Value cmp =
     3259:   94:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::eq, n, zero);
call    0 returned 100%
call    1 returned 100%
     3259:   95:    rewriter.replaceOpWithNewOp<LLVM::SelectOp>(op, cmp, zero, plusOne);
call    0 returned 100%
     3259:   96:    return success();
        -:   97:  }
        -:   98:};
        -:   99:
        -:  100://===----------------------------------------------------------------------===//
        -:  101:// ConvertIndexFloorDivS
        -:  102://===----------------------------------------------------------------------===//
        -:  103:
        -:  104:/// Convert `floordivs(n, m)` into `x = m < 0 ? 1 : -1` and then
        -:  105:/// `n*m < 0 ? -1 - (x-n)/m : n/m`.
        -:  106:struct ConvertIndexFloorDivS : mlir::ConvertOpToLLVMPattern<FloorDivSOp> {
      425:  107:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  108:
        -:  109:  LogicalResult
function _ZNK12_GLOBAL__N_121ConvertIndexFloorDivS15matchAndRewriteEN4mlir5index11FloorDivSOpENS2_18FloorDivSOpAdaptorERNS1_25ConversionPatternRewriterE called 2793 returned 100% blocks executed 100%
     2793:  110:  matchAndRewrite(FloorDivSOp op, FloorDivSOpAdaptor adaptor,
        -:  111:                  ConversionPatternRewriter &rewriter) const override {
     2793:  112:    Location loc = op.getLoc();
call    0 returned 100%
     2793:  113:    Value n = adaptor.getLhs();
call    0 returned 100%
     2793:  114:    Value m = adaptor.getRhs();
call    0 returned 100%
     2793:  115:    Value zero = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), 0);
call    0 returned 100%
call    1 returned 100%
     2793:  116:    Value posOne = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), 1);
call    0 returned 100%
call    1 returned 100%
     2793:  117:    Value negOne = rewriter.create<LLVM::ConstantOp>(loc, n.getType(), -1);
call    0 returned 100%
call    1 returned 100%
        -:  118:
        -:  119:    // Compute `x`.
     2793:  120:    Value mNeg =
     2793:  121:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::slt, m, zero);
call    0 returned 100%
call    1 returned 100%
     2793:  122:    Value x = rewriter.create<LLVM::SelectOp>(loc, mNeg, posOne, negOne);
call    0 returned 100%
call    1 returned 100%
        -:  123:
        -:  124:    // Compute the negative result.
     2793:  125:    Value xMinusN = rewriter.create<LLVM::SubOp>(loc, x, n);
call    0 returned 100%
call    1 returned 100%
     2793:  126:    Value xMinusNDivM = rewriter.create<LLVM::SDivOp>(loc, xMinusN, m);
call    0 returned 100%
call    1 returned 100%
     2793:  127:    Value negRes = rewriter.create<LLVM::SubOp>(loc, negOne, xMinusNDivM);
call    0 returned 100%
call    1 returned 100%
        -:  128:
        -:  129:    // Compute the positive result.
     2793:  130:    Value posRes = rewriter.create<LLVM::SDivOp>(loc, n, m);
call    0 returned 100%
call    1 returned 100%
        -:  131:
        -:  132:    // Pick the negative result if `n` and `m` have different signs and `n` is
        -:  133:    // non-zero, i.e. `(n < 0) != (m < 0) && n != 0`.
     2793:  134:    Value nNeg =
     2793:  135:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::slt, n, zero);
call    0 returned 100%
call    1 returned 100%
     2793:  136:    Value diffSign =
     2793:  137:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::ne, nNeg, mNeg);
call    0 returned 100%
call    1 returned 100%
     2793:  138:    Value nNonZero =
     2793:  139:        rewriter.create<LLVM::ICmpOp>(loc, LLVM::ICmpPredicate::ne, n, zero);
call    0 returned 100%
call    1 returned 100%
     2793:  140:    Value cmp = rewriter.create<LLVM::AndOp>(loc, diffSign, nNonZero);
call    0 returned 100%
call    1 returned 100%
     2793:  141:    rewriter.replaceOpWithNewOp<LLVM::SelectOp>(op, cmp, negRes, posRes);
call    0 returned 100%
     2793:  142:    return success();
        -:  143:  }
        -:  144:};
        -:  145:
        -:  146://===----------------------------------------------------------------------===//
        -:  147:// CovnertIndexCast
        -:  148://===----------------------------------------------------------------------===//
        -:  149:
        -:  150:/// Convert a cast op. If the materialized index type is the same as the other
        -:  151:/// type, fold away the op. Otherwise, truncate or extend the op as appropriate.
        -:  152:/// Signed casts sign extend when the result bitwidth is larger. Unsigned casts
        -:  153:/// zero extend when the result bitwidth is larger.
        -:  154:template <typename CastOp, typename ExtOp>
        -:  155:struct ConvertIndexCast : public mlir::ConvertOpToLLVMPattern<CastOp> {
      850:  156:  using mlir::ConvertOpToLLVMPattern<CastOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
call    1 returned 100%
        -:  157:
        -:  158:  LogicalResult
     9784:  159:  matchAndRewrite(CastOp op, typename CastOp::Adaptor adaptor,
        -:  160:                  ConversionPatternRewriter &rewriter) const override {
     9784:  161:    Type in = adaptor.getInput().getType();
     9784:  162:    Type out = this->getTypeConverter()->convertType(op.getType());
     9784:  163:    if (in == out)
     1100:  164:      rewriter.replaceOp(op, adaptor.getInput());
     8684:  165:    else if (in.getIntOrFloatBitWidth() > out.getIntOrFloatBitWidth())
     4958:  166:      rewriter.replaceOpWithNewOp<LLVM::TruncOp>(op, out, adaptor.getInput());
        -:  167:    else
     3726:  168:      rewriter.replaceOpWithNewOp<ExtOp>(op, out, adaptor.getInput());
     9784:  169:    return success();
        -:  170:  }
------------------
_ZNK12_GLOBAL__N_116ConvertIndexCastIN4mlir5index7CastSOpENS1_4LLVM6SExtOpEE15matchAndRewriteES3_NS2_14CastSOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116ConvertIndexCastIN4mlir5index7CastSOpENS1_4LLVM6SExtOpEE15matchAndRewriteES3_NS2_14CastSOpAdaptorERNS1_25ConversionPatternRewriterE called 5399 returned 100% blocks executed 100%
     5399:  159:  matchAndRewrite(CastOp op, typename CastOp::Adaptor adaptor,
        -:  160:                  ConversionPatternRewriter &rewriter) const override {
     5399:  161:    Type in = adaptor.getInput().getType();
call    0 returned 100%
call    1 returned 100%
     5399:  162:    Type out = this->getTypeConverter()->convertType(op.getType());
call    0 returned 100%
call    1 returned 100%
     5399:  163:    if (in == out)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
      648:  164:      rewriter.replaceOp(op, adaptor.getInput());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     4751:  165:    else if (in.getIntOrFloatBitWidth() > out.getIntOrFloatBitWidth())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
     2775:  166:      rewriter.replaceOpWithNewOp<LLVM::TruncOp>(op, out, adaptor.getInput());
call    0 returned 100%
call    1 returned 100%
        -:  167:    else
     1976:  168:      rewriter.replaceOpWithNewOp<ExtOp>(op, out, adaptor.getInput());
call    0 returned 100%
call    1 returned 100%
     5399:  169:    return success();
        -:  170:  }
------------------
_ZNK12_GLOBAL__N_116ConvertIndexCastIN4mlir5index7CastUOpENS1_4LLVM6ZExtOpEE15matchAndRewriteES3_NS2_14CastUOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_116ConvertIndexCastIN4mlir5index7CastUOpENS1_4LLVM6ZExtOpEE15matchAndRewriteES3_NS2_14CastUOpAdaptorERNS1_25ConversionPatternRewriterE called 4385 returned 100% blocks executed 100%
     4385:  159:  matchAndRewrite(CastOp op, typename CastOp::Adaptor adaptor,
        -:  160:                  ConversionPatternRewriter &rewriter) const override {
     4385:  161:    Type in = adaptor.getInput().getType();
call    0 returned 100%
call    1 returned 100%
     4385:  162:    Type out = this->getTypeConverter()->convertType(op.getType());
call    0 returned 100%
call    1 returned 100%
     4385:  163:    if (in == out)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      452:  164:      rewriter.replaceOp(op, adaptor.getInput());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     3933:  165:    else if (in.getIntOrFloatBitWidth() > out.getIntOrFloatBitWidth())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
     2183:  166:      rewriter.replaceOpWithNewOp<LLVM::TruncOp>(op, out, adaptor.getInput());
call    0 returned 100%
call    1 returned 100%
        -:  167:    else
     1750:  168:      rewriter.replaceOpWithNewOp<ExtOp>(op, out, adaptor.getInput());
call    0 returned 100%
call    1 returned 100%
     4385:  169:    return success();
        -:  170:  }
------------------
        -:  171:};
        -:  172:
        -:  173:using ConvertIndexCastS = ConvertIndexCast<CastSOp, LLVM::SExtOp>;
        -:  174:using ConvertIndexCastU = ConvertIndexCast<CastUOp, LLVM::ZExtOp>;
        -:  175:
        -:  176://===----------------------------------------------------------------------===//
        -:  177:// ConvertIndexCmp
        -:  178://===----------------------------------------------------------------------===//
        -:  179:
        -:  180:/// Assert that the LLVM comparison enum lines up with index's enum.
        -:  181:static constexpr bool checkPredicates(LLVM::ICmpPredicate lhs,
        -:  182:                                      IndexCmpPredicate rhs) {
        -:  183:  return static_cast<int>(lhs) == static_cast<int>(rhs);
        -:  184:}
        -:  185:
        -:  186:static_assert(
        -:  187:    LLVM::getMaxEnumValForICmpPredicate() ==
        -:  188:            getMaxEnumValForIndexCmpPredicate() &&
        -:  189:        checkPredicates(LLVM::ICmpPredicate::eq, IndexCmpPredicate::EQ) &&
        -:  190:        checkPredicates(LLVM::ICmpPredicate::ne, IndexCmpPredicate::NE) &&
        -:  191:        checkPredicates(LLVM::ICmpPredicate::sge, IndexCmpPredicate::SGE) &&
        -:  192:        checkPredicates(LLVM::ICmpPredicate::sgt, IndexCmpPredicate::SGT) &&
        -:  193:        checkPredicates(LLVM::ICmpPredicate::sle, IndexCmpPredicate::SLE) &&
        -:  194:        checkPredicates(LLVM::ICmpPredicate::slt, IndexCmpPredicate::SLT) &&
        -:  195:        checkPredicates(LLVM::ICmpPredicate::uge, IndexCmpPredicate::UGE) &&
        -:  196:        checkPredicates(LLVM::ICmpPredicate::ugt, IndexCmpPredicate::UGT) &&
        -:  197:        checkPredicates(LLVM::ICmpPredicate::ule, IndexCmpPredicate::ULE) &&
        -:  198:        checkPredicates(LLVM::ICmpPredicate::ult, IndexCmpPredicate::ULT),
        -:  199:    "LLVM ICmpPredicate mismatches IndexCmpPredicate");
        -:  200:
        -:  201:struct ConvertIndexCmp : public mlir::ConvertOpToLLVMPattern<CmpOp> {
      425:  202:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  203:
        -:  204:  LogicalResult
function _ZNK12_GLOBAL__N_115ConvertIndexCmp15matchAndRewriteEN4mlir5index5CmpOpENS2_12CmpOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  205:  matchAndRewrite(CmpOp op, CmpOpAdaptor adaptor,
        -:  206:                  ConversionPatternRewriter &rewriter) const override {
        -:  207:    // The LLVM enum has the same values as the index predicate enums.
    #####:  208:    rewriter.replaceOpWithNewOp<LLVM::ICmpOp>(
    #####:  209:        op, *LLVM::symbolizeICmpPredicate(static_cast<uint32_t>(op.getPred())),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  210:        adaptor.getLhs(), adaptor.getRhs());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  211:    return success();
        -:  212:  }
        -:  213:};
        -:  214:
        -:  215://===----------------------------------------------------------------------===//
        -:  216:// ConvertIndexSizeOf
        -:  217://===----------------------------------------------------------------------===//
        -:  218:
        -:  219:/// Lower `index.sizeof` to a constant with the value of the index bitwidth.
        -:  220:struct ConvertIndexSizeOf : public mlir::ConvertOpToLLVMPattern<SizeOfOp> {
      425:  221:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  222:
        -:  223:  LogicalResult
function _ZNK12_GLOBAL__N_118ConvertIndexSizeOf15matchAndRewriteEN4mlir5index8SizeOfOpENS2_15SizeOfOpAdaptorERNS1_25ConversionPatternRewriterE called 4329 returned 100% blocks executed 100%
     4329:  224:  matchAndRewrite(SizeOfOp op, SizeOfOpAdaptor adaptor,
        -:  225:                  ConversionPatternRewriter &rewriter) const override {
     4329:  226:    rewriter.replaceOpWithNewOp<LLVM::ConstantOp>(
     4329:  227:        op, getTypeConverter()->getIndexType(),
call    0 returned 100%
call    1 returned 100%
     8658:  228:        getTypeConverter()->getIndexTypeBitwidth());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     4329:  229:    return success();
        -:  230:  }
        -:  231:};
        -:  232:
        -:  233://===----------------------------------------------------------------------===//
        -:  234:// ConvertIndexConstant
        -:  235://===----------------------------------------------------------------------===//
        -:  236:
        -:  237:/// Convert an index constant. Truncate the value as appropriate.
        -:  238:struct ConvertIndexConstant : public mlir::ConvertOpToLLVMPattern<ConstantOp> {
      425:  239:  using ConvertOpToLLVMPattern::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  240:
        -:  241:  LogicalResult
function _ZNK12_GLOBAL__N_120ConvertIndexConstant15matchAndRewriteEN4mlir5index10ConstantOpENS2_17ConstantOpAdaptorERNS1_25ConversionPatternRewriterE called 15081 returned 100% blocks executed 71%
    15081:  242:  matchAndRewrite(ConstantOp op, ConstantOpAdaptor adaptor,
        -:  243:                  ConversionPatternRewriter &rewriter) const override {
    15081:  244:    Type type = getTypeConverter()->getIndexType();
call    0 returned 100%
call    1 returned 100%
    15081:  245:    APInt value = op.getValue().trunc(type.getIntOrFloatBitWidth());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    15081:  246:    rewriter.replaceOpWithNewOp<LLVM::ConstantOp>(
    15081:  247:        op, type, IntegerAttr::get(type, value));
call    0 returned 100%
call    1 returned 100%
    15081:  248:    return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  249:  }
        -:  250:};
        -:  251:
        -:  252://===----------------------------------------------------------------------===//
        -:  253:// Trivial Conversions
        -:  254://===----------------------------------------------------------------------===//
        -:  255:
        -:  256:using ConvertIndexAdd = mlir::OneToOneConvertToLLVMPattern<AddOp, LLVM::AddOp>;
        -:  257:using ConvertIndexSub = mlir::OneToOneConvertToLLVMPattern<SubOp, LLVM::SubOp>;
        -:  258:using ConvertIndexMul = mlir::OneToOneConvertToLLVMPattern<MulOp, LLVM::MulOp>;
        -:  259:using ConvertIndexDivS =
        -:  260:    mlir::OneToOneConvertToLLVMPattern<DivSOp, LLVM::SDivOp>;
        -:  261:using ConvertIndexDivU =
        -:  262:    mlir::OneToOneConvertToLLVMPattern<DivUOp, LLVM::UDivOp>;
        -:  263:using ConvertIndexRemS =
        -:  264:    mlir::OneToOneConvertToLLVMPattern<RemSOp, LLVM::SRemOp>;
        -:  265:using ConvertIndexRemU =
        -:  266:    mlir::OneToOneConvertToLLVMPattern<RemUOp, LLVM::URemOp>;
        -:  267:using ConvertIndexMaxS =
        -:  268:    mlir::OneToOneConvertToLLVMPattern<MaxSOp, LLVM::SMaxOp>;
        -:  269:using ConvertIndexMaxU =
        -:  270:    mlir::OneToOneConvertToLLVMPattern<MaxUOp, LLVM::UMaxOp>;
        -:  271:using ConvertIndexBoolConstant =
        -:  272:    mlir::OneToOneConvertToLLVMPattern<BoolConstantOp, LLVM::ConstantOp>;
        -:  273:
        -:  274:} // namespace
        -:  275:
        -:  276://===----------------------------------------------------------------------===//
        -:  277:// Pattern Population
        -:  278://===----------------------------------------------------------------------===//
        -:  279:
function _ZN4mlir5index37populateIndexToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     425*:  280:void index::populateIndexToLLVMConversionPatterns(
        -:  281:    LLVMTypeConverter &typeConverter, RewritePatternSet &patterns) {
     425*:  282:  patterns.insert<
        -:  283:      // clang-format off
        -:  284:      ConvertIndexAdd,
        -:  285:      ConvertIndexSub,
        -:  286:      ConvertIndexMul,
        -:  287:      ConvertIndexDivS,
        -:  288:      ConvertIndexDivU,
        -:  289:      ConvertIndexRemS,
        -:  290:      ConvertIndexRemU,
        -:  291:      ConvertIndexMaxS,
        -:  292:      ConvertIndexMaxU,
        -:  293:      ConvertIndexCeilDivS,
        -:  294:      ConvertIndexCeilDivU,
        -:  295:      ConvertIndexFloorDivS,
        -:  296:      ConvertIndexCastS,
        -:  297:      ConvertIndexCastU,
        -:  298:      ConvertIndexCmp,
        -:  299:      ConvertIndexSizeOf,
        -:  300:      ConvertIndexConstant,
        -:  301:      ConvertIndexBoolConstant
        -:  302:      // clang-format on
    #####:  303:      >(typeConverter);
call    0 never executed
    #####:  304:}
        -:  305:
        -:  306://===----------------------------------------------------------------------===//
        -:  307:// ODS-Generated Definitions
        -:  308://===----------------------------------------------------------------------===//
        -:  309:
        -:  310:namespace mlir {
        -:  311:#define GEN_PASS_DEF_CONVERTINDEXTOLLVMPASS
        -:  312:#include "mlir/Conversion/Passes.h.inc"
        -:  313:} // namespace mlir
        -:  314:
        -:  315://===----------------------------------------------------------------------===//
        -:  316:// Pass Definition
        -:  317://===----------------------------------------------------------------------===//
        -:  318:
        -:  319:namespace {
  116706*:  320:struct ConvertIndexToLLVMPass
call    0 never executed
call    1 returned 100%
        -:  321:    : public impl::ConvertIndexToLLVMPassBase<ConvertIndexToLLVMPass> {
    #####:  322:  using Base::Base;
call    0 never executed
        -:  323:
        -:  324:  void runOnOperation() override;
        -:  325:};
        -:  326:} // namespace
        -:  327:
function _ZN12_GLOBAL__N_122ConvertIndexToLLVMPass14runOnOperationEv called 425 returned 100% blocks executed 71%
      425:  328:void ConvertIndexToLLVMPass::runOnOperation() {
        -:  329:  // Configure dialect conversion.
      425:  330:  ConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
      425:  331:  target.addIllegalDialect<IndexDialect>();
call    0 returned 100%
      425:  332:  target.addLegalDialect<LLVM::LLVMDialect>();
call    0 returned 100%
        -:  333:
        -:  334:  // Set LLVM lowering options.
      850:  335:  LowerToLLVMOptions options(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      425:  336:  if (indexBitwidth != kDeriveIndexBitwidthFromDataLayout)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  337:    options.overrideIndexBitwidth(indexBitwidth);
      850:  338:  LLVMTypeConverter typeConverter(&getContext(), options);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  339:
        -:  340:  // Populate patterns and run the conversion.
      850:  341:  RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      425:  342:  populateIndexToLLVMConversionPatterns(typeConverter, patterns);
call    0 returned 100%
        -:  343:
      425:  344:  if (failed(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      425:  345:          applyPartialConversion(getOperation(), target, std::move(patterns))))
call    0 returned 100%
    #####:  346:    return signalPassFailure();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  347:}
