        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/TestDyn/TestDynDialect.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/TestDyn/CMakeFiles/MLIRTestDynDialect.dir/TestDynDialect.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/TestDyn/CMakeFiles/MLIRTestDynDialect.dir/TestDynDialect.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestDynDialect.cpp -------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines a fake 'test_dyn' dynamic dialect that is used to test the
        -:   10:// registration of dynamic dialects.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/IR/ExtensibleDialect.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:
        -:   18:namespace test {
function _ZN4test22registerTestDynDialectERN4mlir15DialectRegistryE called 116161 returned 100% blocks executed 100%
   116161:   19:void registerTestDynDialect(DialectRegistry &registry) {
   116161:   20:  registry.insertDynamic(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
function _ZZN4test22registerTestDynDialectERN4mlir15DialectRegistryEENKUlPNS0_11MLIRContextEPNS0_14DynamicDialectEE_clES4_S6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   21:      "test_dyn", [](MLIRContext *ctx, DynamicDialect *testDyn) {
function _ZZZN4test22registerTestDynDialectERN4mlir15DialectRegistryEENKUlPNS0_11MLIRContextEPNS0_14DynamicDialectEE_clES4_S6_ENKUlPNS0_9OperationEE_clES9_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   22:        auto opVerifier = [](Operation *op) -> LogicalResult {
    #####:   23:          if (op->getNumOperands() == 0 && op->getNumResults() == 1 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   24:              op->getNumRegions() == 0)
branch  0 never executed
branch  1 never executed
    #####:   25:            return success();
    #####:   26:          return op->emitError(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   27:              "expected a single result, no operands and no regions");
call    0 never executed
        -:   28:        };
        -:   29:
    #####:   30:        auto opRegionVerifier = [](Operation *op) { return success(); };
        -:   31:
    #####:   32:        testDyn->registerDynamicOp(DynamicOpDefinition::get(
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:   33:            "one_result", testDyn, opVerifier, opRegionVerifier));
    #####:   34:      });
   116161:   35:}
        -:   36:} // namespace test
