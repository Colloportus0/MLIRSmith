        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SCF/Transforms/LoopSpecialization.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/LoopSpecialization.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SCF/Transforms/CMakeFiles/obj.MLIRSCFTransforms.dir/LoopSpecialization.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- LoopSpecialization.cpp - scf.parallel/SCR.for specialization -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Specializes parallel loops and for loops for easier unrolling and
        -:   10:// vectorization.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/SCF/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/Dialect/Affine/Analysis/AffineStructures.h"
        -:   17:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   18:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   19:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   20:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   21:#include "mlir/Dialect/SCF/Utils/AffineCanonicalizationUtils.h"
        -:   22:#include "mlir/Dialect/Utils/StaticValueUtils.h"
        -:   23:#include "mlir/IR/AffineExpr.h"
        -:   24:#include "mlir/IR/BlockAndValueMapping.h"
        -:   25:#include "mlir/IR/PatternMatch.h"
        -:   26:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   27:#include "llvm/ADT/DenseMap.h"
        -:   28:
        -:   29:namespace mlir {
        -:   30:#define GEN_PASS_DEF_SCFFORLOOPPEELING
        -:   31:#define GEN_PASS_DEF_SCFFORLOOPSPECIALIZATION
        -:   32:#define GEN_PASS_DEF_SCFPARALLELLOOPSPECIALIZATION
        -:   33:#include "mlir/Dialect/SCF/Transforms/Passes.h.inc"
        -:   34:} // namespace mlir
        -:   35:
        -:   36:using namespace mlir;
        -:   37:using scf::ForOp;
        -:   38:using scf::ParallelOp;
        -:   39:
        -:   40:/// Rewrite a parallel loop with bounds defined by an affine.min with a constant
        -:   41:/// into 2 loops after checking if the bounds are equal to that constant. This
        -:   42:/// is beneficial if the loop will almost always have the constant bound and
        -:   43:/// that version can be fully unrolled and vectorized.
function _ZL34specializeParallelLoopForUnrollingN4mlir3scf10ParallelOpE called 787 returned 100% blocks executed 88%
      787:   44:static void specializeParallelLoopForUnrolling(ParallelOp op) {
      791:   45:  SmallVector<int64_t, 2> constantIndices;
call    0 returned 100%
      787:   46:  constantIndices.reserve(op.getUpperBound().size());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      791:   47:  for (auto bound : op.getUpperBound()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
      787:   48:    auto minOp = bound.getDefiningOp<AffineMinOp>();
call    0 returned 100%
      787:   49:    if (!minOp)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      783:   50:      return;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       17:   51:    int64_t minConstant = std::numeric_limits<int64_t>::max();
       54:   52:    for (AffineExpr expr : minOp.getMap().getResults()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
       37:   53:      if (auto constantIndex = expr.dyn_cast<AffineConstantExpr>())
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
       14:   54:        minConstant = std::min(minConstant, constantIndex.getValue());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   55:    }
       17:   56:    if (minConstant == std::numeric_limits<int64_t>::max())
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -:   57:      return;
        4:   58:    constantIndices.push_back(minConstant);
call    0 returned 100%
        -:   59:  }
        -:   60:
        4:   61:  OpBuilder b(op);
call    0 returned 100%
        8:   62:  BlockAndValueMapping map;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        4:   63:  Value cond;
        8:   64:  for (auto bound : llvm::zip(op.getUpperBound(), constantIndices)) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        4:   65:    Value constant =
call    0 returned 100%
        4:   66:        b.create<arith::ConstantIndexOp>(op.getLoc(), std::get<1>(bound));
call    0 returned 100%
call    1 returned 100%
        4:   67:    Value cmp = b.create<arith::CmpIOp>(op.getLoc(), arith::CmpIPredicate::eq,
call    0 returned 100%
        4:   68:                                        std::get<0>(bound), constant);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       4*:   69:    cond = cond ? b.create<arith::AndIOp>(op.getLoc(), cond, cmp) : cmp;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        4:   70:    map.map(std::get<0>(bound), constant);
call    0 returned 100%
        -:   71:  }
        4:   72:  auto ifOp = b.create<scf::IfOp>(op.getLoc(), cond, /*withElseRegion=*/true);
call    0 returned 100%
        4:   73:  ifOp.getThenBodyBuilder().clone(*op.getOperation(), map);
call    0 returned 100%
call    1 returned 100%
        4:   74:  ifOp.getElseBodyBuilder().clone(*op.getOperation());
call    0 returned 100%
call    1 returned 100%
        4:   75:  op.erase();
call    0 returned 100%
        -:   76:}
        -:   77:
        -:   78:/// Rewrite a for loop with bounds defined by an affine.min with a constant into
        -:   79:/// 2 loops after checking if the bounds are equal to that constant. This is
        -:   80:/// beneficial if the loop will almost always have the constant bound and that
        -:   81:/// version can be fully unrolled and vectorized.
function _ZL29specializeForLoopForUnrollingN4mlir3scf5ForOpE called 14 returned 100% blocks executed 17%
       14:   82:static void specializeForLoopForUnrolling(ForOp op) {
       14:   83:  auto bound = op.getUpperBound();
call    0 returned 100%
       14:   84:  auto minOp = bound.getDefiningOp<AffineMinOp>();
call    0 returned 100%
       14:   85:  if (!minOp)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       14:   86:    return;
    #####:   87:  int64_t minConstant = std::numeric_limits<int64_t>::max();
    #####:   88:  for (AffineExpr expr : minOp.getMap().getResults()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   89:    if (auto constantIndex = expr.dyn_cast<AffineConstantExpr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   90:      minConstant = std::min(minConstant, constantIndex.getValue());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   91:  }
    #####:   92:  if (minConstant == std::numeric_limits<int64_t>::max())
branch  0 never executed
branch  1 never executed
        -:   93:    return;
        -:   94:
    #####:   95:  OpBuilder b(op);
call    0 never executed
    #####:   96:  BlockAndValueMapping map;
call    0 never executed
call    1 never executed
    #####:   97:  Value constant = b.create<arith::ConstantIndexOp>(op.getLoc(), minConstant);
call    0 never executed
call    1 never executed
    #####:   98:  Value cond = b.create<arith::CmpIOp>(op.getLoc(), arith::CmpIPredicate::eq,
    #####:   99:                                       bound, constant);
call    0 never executed
call    1 never executed
    #####:  100:  map.map(bound, constant);
call    0 never executed
    #####:  101:  auto ifOp = b.create<scf::IfOp>(op.getLoc(), cond, /*withElseRegion=*/true);
call    0 never executed
    #####:  102:  ifOp.getThenBodyBuilder().clone(*op.getOperation(), map);
call    0 never executed
call    1 never executed
    #####:  103:  ifOp.getElseBodyBuilder().clone(*op.getOperation());
call    0 never executed
call    1 never executed
    #####:  104:  op.erase();
call    0 never executed
        -:  105:}
        -:  106:
        -:  107:/// Rewrite a for loop with bounds/step that potentially do not divide evenly
        -:  108:/// into a for loop where the step divides the iteration space evenly, followed
        -:  109:/// by an scf.if for the last (partial) iteration (if any).
        -:  110:///
        -:  111:/// This function rewrites the given scf.for loop in-place and creates a new
        -:  112:/// scf.if operation for the last iteration. It replaces all uses of the
        -:  113:/// unpeeled loop with the results of the newly generated scf.if.
        -:  114:///
        -:  115:/// The newly generated scf.if operation is returned via `ifOp`. The boundary
        -:  116:/// at which the loop is split (new upper bound) is returned via `splitBound`.
        -:  117:/// The return value indicates whether the loop was rewritten or not.
function _ZL11peelForLoopRN4mlir12RewriterBaseENS_3scf5ForOpERS3_RNS_5ValueE called 11 returned 100% blocks executed 38%
       11:  118:static LogicalResult peelForLoop(RewriterBase &b, ForOp forOp,
        -:  119:                                 ForOp &partialIteration, Value &splitBound) {
       11:  120:  RewriterBase::InsertionGuard guard(b);
call    0 returned 100%
       11:  121:  auto lbInt = getConstantIntValue(forOp.getLowerBound());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       11:  122:  auto ubInt = getConstantIntValue(forOp.getUpperBound());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       11:  123:  auto stepInt = getConstantIntValue(forOp.getStep());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  124:
        -:  125:  // No specialization necessary if step already divides upper bound evenly.
       11:  126:  if (lbInt && ubInt && stepInt && (*ubInt - *lbInt) % *stepInt == 0)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        6:  127:    return failure();
        -:  128:  // No specialization necessary if step size is 1.
       5*:  129:  if (stepInt == static_cast<int64_t>(1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  130:    return failure();
        -:  131:
    #####:  132:  auto loc = forOp.getLoc();
call    0 never executed
    #####:  133:  AffineExpr sym0, sym1, sym2;
    #####:  134:  bindSymbols(b.getContext(), sym0, sym1, sym2);
call    0 never executed
        -:  135:  // New upper bound: %ub - (%ub - %lb) mod %step
    #####:  136:  auto modMap = AffineMap::get(0, 3, {sym1 - ((sym1 - sym0) % sym2)});
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  137:  b.setInsertionPoint(forOp);
call    0 never executed
    #####:  138:  splitBound = b.createOrFold<AffineApplyOp>(loc, modMap,
    #####:  139:                                             ValueRange{forOp.getLowerBound(),
call    0 never executed
call    1 never executed
    #####:  140:                                                        forOp.getUpperBound(),
call    0 never executed
    #####:  141:                                                        forOp.getStep()});
call    0 never executed
call    1 never executed
        -:  142:
        -:  143:  // Create ForOp for partial iteration.
    #####:  144:  b.setInsertionPointAfter(forOp);
call    0 never executed
    #####:  145:  partialIteration = cast<ForOp>(b.clone(*forOp.getOperation()));
call    0 never executed
call    1 never executed
    #####:  146:  partialIteration.getLowerBoundMutable().assign(splitBound);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  147:  forOp.replaceAllUsesWith(partialIteration->getResults());
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  148:  partialIteration.getInitArgsMutable().assign(forOp->getResults());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  149:
        -:  150:  // Set new upper loop bound.
    #####:  151:  b.updateRootInPlace(
call    0 never executed
function _ZZL11peelForLoopRN4mlir12RewriterBaseENS_3scf5ForOpERS3_RNS_5ValueEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  152:      forOp, [&]() { forOp.getUpperBoundMutable().assign(splitBound); });
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  153:
      11*:  154:  return success();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  155:}
        -:  156:
        -:  157:template <typename OpTy, bool IsMin>
    #####:  158:static void rewriteAffineOpAfterPeeling(RewriterBase &rewriter, ForOp forOp,
        -:  159:                                        ForOp partialIteration,
        -:  160:                                        Value previousUb) {
    #####:  161:  Value mainIv = forOp.getInductionVar();
    #####:  162:  Value partialIv = partialIteration.getInductionVar();
    #####:  163:  assert(forOp.getStep() == partialIteration.getStep() &&
        -:  164:         "expected same step in main and partial loop");
    #####:  165:  Value step = forOp.getStep();
        -:  166:
    #####:  167:  forOp.walk([&](OpTy affineOp) {
    #####:  168:    AffineMap map = affineOp.getAffineMap();
    #####:  169:    (void)scf::rewritePeeledMinMaxOp(rewriter, affineOp, map,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  170:                                     affineOp.operands(), IsMin, mainIv,
        -:  171:                                     previousUb, step,
        -:  172:                                     /*insideLoop=*/true);
        -:  173:  });
    #####:  174:  partialIteration.walk([&](OpTy affineOp) {
    #####:  175:    AffineMap map = affineOp.getAffineMap();
    #####:  176:    (void)scf::rewritePeeledMinMaxOp(rewriter, affineOp, map,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  177:                                     affineOp.operands(), IsMin, partialIv,
        -:  178:                                     previousUb, step, /*insideLoop=*/false);
        -:  179:  });
    #####:  180:}
------------------
_Z27rewriteAffineOpAfterPeelingIN4mlir11AffineMaxOpELb0EEvRNS0_12RewriterBaseENS0_3scf5ForOpES5_NS0_5ValueE:
function _Z27rewriteAffineOpAfterPeelingIN4mlir11AffineMaxOpELb0EEvRNS0_12RewriterBaseENS0_3scf5ForOpES5_NS0_5ValueE called 0 returned 0% blocks executed 0%
    #####:  158:static void rewriteAffineOpAfterPeeling(RewriterBase &rewriter, ForOp forOp,
call    0 never executed
        -:  159:                                        ForOp partialIteration,
        -:  160:                                        Value previousUb) {
    #####:  161:  Value mainIv = forOp.getInductionVar();
call    0 never executed
    #####:  162:  Value partialIv = partialIteration.getInductionVar();
    #####:  163:  assert(forOp.getStep() == partialIteration.getStep() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  164:         "expected same step in main and partial loop");
    #####:  165:  Value step = forOp.getStep();
call    0 never executed
        -:  166:
    #####:  167:  forOp.walk([&](OpTy affineOp) {
call    0 never executed
        -:  168:    AffineMap map = affineOp.getAffineMap();
        -:  169:    (void)scf::rewritePeeledMinMaxOp(rewriter, affineOp, map,
        -:  170:                                     affineOp.operands(), IsMin, mainIv,
        -:  171:                                     previousUb, step,
        -:  172:                                     /*insideLoop=*/true);
        -:  173:  });
    #####:  174:  partialIteration.walk([&](OpTy affineOp) {
call    0 never executed
        -:  175:    AffineMap map = affineOp.getAffineMap();
        -:  176:    (void)scf::rewritePeeledMinMaxOp(rewriter, affineOp, map,
        -:  177:                                     affineOp.operands(), IsMin, partialIv,
        -:  178:                                     previousUb, step, /*insideLoop=*/false);
        -:  179:  });
    #####:  180:}
------------------
_Z27rewriteAffineOpAfterPeelingIN4mlir11AffineMinOpELb1EEvRNS0_12RewriterBaseENS0_3scf5ForOpES5_NS0_5ValueE:
function _Z27rewriteAffineOpAfterPeelingIN4mlir11AffineMinOpELb1EEvRNS0_12RewriterBaseENS0_3scf5ForOpES5_NS0_5ValueE called 0 returned 0% blocks executed 0%
    #####:  158:static void rewriteAffineOpAfterPeeling(RewriterBase &rewriter, ForOp forOp,
call    0 never executed
        -:  159:                                        ForOp partialIteration,
        -:  160:                                        Value previousUb) {
    #####:  161:  Value mainIv = forOp.getInductionVar();
call    0 never executed
    #####:  162:  Value partialIv = partialIteration.getInductionVar();
    #####:  163:  assert(forOp.getStep() == partialIteration.getStep() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  164:         "expected same step in main and partial loop");
    #####:  165:  Value step = forOp.getStep();
call    0 never executed
        -:  166:
    #####:  167:  forOp.walk([&](OpTy affineOp) {
call    0 never executed
        -:  168:    AffineMap map = affineOp.getAffineMap();
        -:  169:    (void)scf::rewritePeeledMinMaxOp(rewriter, affineOp, map,
        -:  170:                                     affineOp.operands(), IsMin, mainIv,
        -:  171:                                     previousUb, step,
        -:  172:                                     /*insideLoop=*/true);
        -:  173:  });
    #####:  174:  partialIteration.walk([&](OpTy affineOp) {
call    0 never executed
        -:  175:    AffineMap map = affineOp.getAffineMap();
        -:  176:    (void)scf::rewritePeeledMinMaxOp(rewriter, affineOp, map,
        -:  177:                                     affineOp.operands(), IsMin, partialIv,
        -:  178:                                     previousUb, step, /*insideLoop=*/false);
        -:  179:  });
    #####:  180:}
------------------
        -:  181:
function _ZN4mlir3scf26peelAndCanonicalizeForLoopERNS_12RewriterBaseENS0_5ForOpERS3_ called 11 returned 100% blocks executed 62%
       11:  182:LogicalResult mlir::scf::peelAndCanonicalizeForLoop(RewriterBase &rewriter,
        -:  183:                                                    ForOp forOp,
        -:  184:                                                    ForOp &partialIteration) {
       11:  185:  Value previousUb = forOp.getUpperBound();
call    0 returned 100%
       11:  186:  Value splitBound;
       11:  187:  if (failed(peelForLoop(rewriter, forOp, partialIteration, splitBound)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       11:  188:    return failure();
        -:  189:
        -:  190:  // Rewrite affine.min and affine.max ops.
    #####:  191:  rewriteAffineOpAfterPeeling<AffineMinOp, /*IsMin=*/true>(
call    0 never executed
        -:  192:      rewriter, forOp, partialIteration, previousUb);
    #####:  193:  rewriteAffineOpAfterPeeling<AffineMaxOp, /*IsMin=*/false>(
call    0 never executed
        -:  194:      rewriter, forOp, partialIteration, previousUb);
        -:  195:
    #####:  196:  return success();
        -:  197:}
        -:  198:
        -:  199:static constexpr char kPeeledLoopLabel[] = "__peeled_loop__";
        -:  200:static constexpr char kPartialIterationLabel[] = "__partial_iteration__";
        -:  201:
        -:  202:namespace {
        -:  203:struct ForLoopPeelingPattern : public OpRewritePattern<ForOp> {
function _ZN12_GLOBAL__N_121ForLoopPeelingPatternC2EPN4mlir11MLIRContextEb called 413 returned 100% blocks executed 100%
      413:  204:  ForLoopPeelingPattern(MLIRContext *ctx, bool skipPartial)
      413:  205:      : OpRewritePattern<ForOp>(ctx), skipPartial(skipPartial) {}
call    0 returned 100%
call    1 returned 100%
        -:  206:
function _ZNK12_GLOBAL__N_121ForLoopPeelingPattern15matchAndRewriteEN4mlir3scf5ForOpERNS1_15PatternRewriterE called 11 returned 100% blocks executed 62%
       11:  207:  LogicalResult matchAndRewrite(ForOp forOp,
        -:  208:                                PatternRewriter &rewriter) const override {
        -:  209:    // Do not peel already peeled loops.
       11:  210:    if (forOp->hasAttr(kPeeledLoopLabel))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  211:      return failure();
       11:  212:    if (skipPartial) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  213:      // No peeling of loops inside the partial iteration of another peeled
        -:  214:      // loop.
       11:  215:      Operation *op = forOp.getOperation();
       13:  216:      while ((op = op->getParentOfType<scf::ForOp>())) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
        2:  217:        if (op->hasAttr(kPartialIterationLabel))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    #####:  218:          return failure();
        -:  219:      }
        -:  220:    }
        -:  221:    // Apply loop peeling.
       11:  222:    scf::ForOp partialIteration;
call    0 returned 100%
       11:  223:    if (failed(peelAndCanonicalizeForLoop(rewriter, forOp, partialIteration)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       11:  224:      return failure();
        -:  225:    // Apply label, so that the same loop is not rewritten a second time.
    #####:  226:    partialIteration->setAttr(kPeeledLoopLabel, rewriter.getUnitAttr());
call    0 never executed
call    1 never executed
function _ZZNK12_GLOBAL__N_121ForLoopPeelingPattern15matchAndRewriteEN4mlir3scf5ForOpERNS1_15PatternRewriterEENKUlvE_clEv.isra.0 called 0 returned 0% blocks executed 0%
    #####:  227:    rewriter.updateRootInPlace(forOp, [&]() {
call    0 never executed
    #####:  228:      forOp->setAttr(kPeeledLoopLabel, rewriter.getUnitAttr());
call    0 never executed
call    1 never executed
    #####:  229:    });
    #####:  230:    partialIteration->setAttr(kPartialIterationLabel, rewriter.getUnitAttr());
call    0 never executed
call    1 never executed
    #####:  231:    return success();
        -:  232:  }
        -:  233:
        -:  234:  /// If set to true, loops inside partial iterations of another peeled loop
        -:  235:  /// are not peeled. This reduces the size of the generated code. Partial
        -:  236:  /// iterations are not usually performance critical.
        -:  237:  /// Note: Takes into account the entire chain of parent operations, not just
        -:  238:  /// the direct parent.
        -:  239:  bool skipPartial;
        -:  240:};
        -:  241:} // namespace
        -:  242:
        -:  243:namespace {
  116672*:  244:struct ParallelLoopSpecialization
call    0 never executed
call    1 returned 100%
        -:  245:    : public impl::SCFParallelLoopSpecializationBase<
        -:  246:          ParallelLoopSpecialization> {
function _ZN12_GLOBAL__N_126ParallelLoopSpecialization14runOnOperationEv called 399 returned 100% blocks executed 75%
      399:  247:  void runOnOperation() override {
      399:  248:    getOperation()->walk(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
      787:  249:        [](ParallelOp op) { specializeParallelLoopForUnrolling(op); });
call    0 returned 100%
      399:  250:  }
        -:  251:};
        -:  252:
  116718*:  253:struct ForLoopSpecialization
call    0 never executed
call    1 returned 100%
        -:  254:    : public impl::SCFForLoopSpecializationBase<ForLoopSpecialization> {
function _ZN12_GLOBAL__N_121ForLoopSpecialization14runOnOperationEv called 427 returned 100% blocks executed 75%
      427:  255:  void runOnOperation() override {
      441:  256:    getOperation()->walk([](ForOp op) { specializeForLoopForUnrolling(op); });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
      427:  257:  }
        -:  258:};
        -:  259:
  116702*:  260:struct ForLoopPeeling : public impl::SCFForLoopPeelingBase<ForLoopPeeling> {
call    0 never executed
call    1 returned 100%
function _ZN12_GLOBAL__N_114ForLoopPeeling14runOnOperationEv called 413 returned 100% blocks executed 91%
      413:  261:  void runOnOperation() override {
      413:  262:    auto *parentOp = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      413:  263:    MLIRContext *ctx = parentOp->getContext();
call    0 returned 100%
      413:  264:    RewritePatternSet patterns(ctx);
call    0 returned 100%
      413:  265:    patterns.add<ForLoopPeelingPattern>(ctx, skipPartial);
call    0 returned 100%
      413:  266:    (void)applyPatternsAndFoldGreedily(parentOp, std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  267:
        -:  268:    // Drop the markers.
function _ZZN12_GLOBAL__N_114ForLoopPeeling14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 247178 returned 100% blocks executed 100%
   247591:  269:    parentOp->walk([](Operation *op) {
call    0 returned 100%
call    1 returned 100%
   247178:  270:      op->removeAttr(kPeeledLoopLabel);
call    0 returned 100%
   247178:  271:      op->removeAttr(kPartialIterationLabel);
call    0 returned 100%
   247178:  272:    });
      413:  273:  }
        -:  274:};
        -:  275:} // namespace
        -:  276:
function _ZN4mlir36createParallelLoopSpecializationPassEv called 116672 returned 100% blocks executed 100%
   116672:  277:std::unique_ptr<Pass> mlir::createParallelLoopSpecializationPass() {
   116672:  278:  return std::make_unique<ParallelLoopSpecialization>();
call    0 returned 100%
        -:  279:}
        -:  280:
function _ZN4mlir31createForLoopSpecializationPassEv called 116718 returned 100% blocks executed 100%
   116718:  281:std::unique_ptr<Pass> mlir::createForLoopSpecializationPass() {
   116718:  282:  return std::make_unique<ForLoopSpecialization>();
call    0 returned 100%
        -:  283:}
        -:  284:
function _ZN4mlir24createForLoopPeelingPassEv called 116702 returned 100% blocks executed 100%
   116702:  285:std::unique_ptr<Pass> mlir::createForLoopPeelingPass() {
   116702:  286:  return std::make_unique<ForLoopPeeling>();
call    0 returned 100%
        -:  287:}
