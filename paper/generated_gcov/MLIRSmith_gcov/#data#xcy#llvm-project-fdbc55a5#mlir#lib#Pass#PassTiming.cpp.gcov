        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Pass/PassTiming.cpp
        -:    0:Graph:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassTiming.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Pass/CMakeFiles/obj.MLIRPass.dir/PassTiming.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- PassTiming.cpp -----------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "PassDetail.h"
        -:   10:#include "mlir/Pass/PassManager.h"
        -:   11:#include "llvm/ADT/SmallVector.h"
        -:   12:#include "llvm/Support/Threading.h"
        -:   13:
        -:   14:#include <chrono>
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::detail;
        -:   18:
        -:   19://===----------------------------------------------------------------------===//
        -:   20:// PassTiming
        -:   21://===----------------------------------------------------------------------===//
        -:   22:
        -:   23:namespace {
        -:   24:struct PassTiming : public PassInstrumentation {
function _ZN12_GLOBAL__N_110PassTimingC2ERN4mlir11TimingScopeE called 536 returned 100% blocks executed 100%
      536:   25:  PassTiming(TimingScope &timingScope) : rootScope(timingScope) {}
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_110PassTimingC2ESt10unique_ptrIN4mlir13TimingManagerESt14default_deleteIS3_EE called 0 returned 0% blocks executed 0%
    #####:   26:  PassTiming(std::unique_ptr<TimingManager> tm)
    #####:   27:      : ownedTimingManager(std::move(tm)),
call    0 never executed
        -:   28:        ownedTimingScope(ownedTimingManager->getRootScope()),
    #####:   29:        rootScope(ownedTimingScope) {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:   30:
        -:   31:  /// If a pass can spawn additional work on other threads, it records the
        -:   32:  /// index to its currently active timer here. Passes that run on a
        -:   33:  /// newly-forked thread will check this list to find the active timer of the
        -:   34:  /// parent thread into which the new thread should be nested.
        -:   35:  DenseMap<PipelineParentInfo, unsigned> parentTimerIndices;
        -:   36:
        -:   37:  /// A stack of the currently active timing scopes per thread.
        -:   38:  DenseMap<uint64_t, SmallVector<TimingScope, 4>> activeThreadTimers;
        -:   39:
        -:   40:  /// The timing manager owned by this instrumentation (in case timing was
        -:   41:  /// enabled by the user on the pass manager without providing an external
        -:   42:  /// timing manager). This *must* appear before the `ownedTimingScope` to
        -:   43:  /// ensure the timing manager is destroyed *after* the scope, since the latter
        -:   44:  /// may hold a timer that points into the former.
        -:   45:  std::unique_ptr<TimingManager> ownedTimingManager;
        -:   46:  TimingScope ownedTimingScope;
        -:   47:
        -:   48:  /// The root timing scope into which timing is reported.
        -:   49:  TimingScope &rootScope;
        -:   50:
        -:   51:  //===--------------------------------------------------------------------===//
        -:   52:  // Pipeline
        -:   53:  //===--------------------------------------------------------------------===//
        -:   54:
function _ZN12_GLOBAL__N_110PassTiming17runBeforePipelineEN4llvm8OptionalIN4mlir13OperationNameEEERKNS3_19PassInstrumentation18PipelineParentInfoE called 317 returned 100% blocks executed 89%
      317:   55:  void runBeforePipeline(Optional<OperationName> name,
        -:   56:                         const PipelineParentInfo &parentInfo) override {
      317:   57:    auto tid = llvm::get_threadid();
call    0 returned 100%
      317:   58:    auto &activeTimers = activeThreadTimers[tid];
call    0 returned 100%
        -:   59:
        -:   60:    // Find the parent scope, either using the parent info or the root scope
        -:   61:    // (e.g. in the case of the top-level pipeline).
      317:   62:    TimingScope *parentScope;
      317:   63:    auto it = parentTimerIndices.find(parentInfo);
call    0 returned 100%
      317:   64:    if (it != parentTimerIndices.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
      311:   65:      parentScope = &activeThreadTimers[parentInfo.parentThreadID][it->second];
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:    else
        6:   67:      parentScope = &rootScope;
        -:   68:
        -:   69:    // Use nullptr to anchor op-agnostic pipelines, otherwise use the name of
        -:   70:    // the operation.
      317:   71:    const void *timerId = name ? name->getAsOpaquePointer() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
function _ZZN12_GLOBAL__N_110PassTiming17runBeforePipelineEN4llvm8OptionalIN4mlir13OperationNameEEERKNS3_19PassInstrumentation18PipelineParentInfoEENKUlvE_clEv called 308 returned 100% blocks executed 89%
      317:   72:    activeTimers.push_back(parentScope->nest(timerId, [name] {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      308:   73:      return ("'" + (name ? name->getStringRef() : "any") + "' Pipeline").str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:   74:    }));
      317:   75:  }
        -:   76:
function _ZN12_GLOBAL__N_110PassTiming16runAfterPipelineEN4llvm8OptionalIN4mlir13OperationNameEEERKNS3_19PassInstrumentation18PipelineParentInfoE called 295 returned 100% blocks executed 83%
      295:   77:  void runAfterPipeline(Optional<OperationName>,
        -:   78:                        const PipelineParentInfo &) override {
      295:   79:    auto &activeTimers = activeThreadTimers[llvm::get_threadid()];
call    0 returned 100%
call    1 returned 100%
     295*:   80:    assert(!activeTimers.empty() && "expected active timer");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      295:   81:    activeTimers.pop_back();
call    0 returned 100%
      295:   82:  }
        -:   83:
        -:   84:  //===--------------------------------------------------------------------===//
        -:   85:  // Pass
        -:   86:  //===--------------------------------------------------------------------===//
        -:   87:
function _ZN12_GLOBAL__N_110PassTiming13runBeforePassEPN4mlir4PassEPNS1_9OperationE called 1326 returned 100% blocks executed 88%
     1326:   88:  void runBeforePass(Pass *pass, Operation *) override {
     1326:   89:    auto tid = llvm::get_threadid();
call    0 returned 100%
     1326:   90:    auto &activeTimers = activeThreadTimers[tid];
call    0 returned 100%
     1326:   91:    auto &parentScope = activeTimers.empty() ? rootScope : activeTimers.back();
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
call    2 returned 100%
        -:   92:
     1326:   93:    if (auto *adaptor = dyn_cast<OpToOpPassAdaptor>(pass)) {
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
      239:   94:      parentTimerIndices[{tid, pass}] = activeTimers.size();
call    0 returned 100%
      239:   95:      auto scope =
        -:   96:          parentScope.nest(pass->getThreadingSiblingOrThis(),
      717:   97:                           [adaptor]() { return adaptor->getAdaptorName(); });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
      239:   98:      if (adaptor->getPassManagers().size() <= 1)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      216:   99:        scope.hide();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      239:  100:      activeTimers.push_back(std::move(scope));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  101:    } else {
     1087:  102:      activeTimers.push_back(
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     2619:  103:          parentScope.nest(pass->getThreadingSiblingOrThis(),
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
call    2 returned 100%
function _ZZN12_GLOBAL__N_110PassTiming13runBeforePassEPN4mlir4PassEPNS1_9OperationEENKUlvE0_clEv.isra.0 called 1074 returned 100% blocks executed 100%
     1074:  104:                           [pass]() { return std::string(pass->getName()); }));
call    0 returned 100%
call    1 returned 100%
        -:  105:    }
     1326:  106:  }
        -:  107:
function _ZN12_GLOBAL__N_110PassTiming12runAfterPassEPN4mlir4PassEPNS1_9OperationE called 1326 returned 100% blocks executed 90%
     1326:  108:  void runAfterPass(Pass *pass, Operation *) override {
     1326:  109:    auto tid = llvm::get_threadid();
call    0 returned 100%
     1326:  110:    if (isa<OpToOpPassAdaptor>(pass))
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
      239:  111:      parentTimerIndices.erase({tid, pass});
call    0 returned 100%
     1326:  112:    auto &activeTimers = activeThreadTimers[tid];
call    0 returned 100%
    1326*:  113:    assert(!activeTimers.empty() && "expected active timer");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     1326:  114:    activeTimers.pop_back();
call    0 returned 100%
     1326:  115:  }
        -:  116:
function _ZN12_GLOBAL__N_110PassTiming18runAfterPassFailedEPN4mlir4PassEPNS1_9OperationE called 125 returned 100% blocks executed 100%
      125:  117:  void runAfterPassFailed(Pass *pass, Operation *op) override {
      125:  118:    runAfterPass(pass, op);
call    0 returned 100%
      125:  119:  }
        -:  120:
        -:  121:  //===--------------------------------------------------------------------===//
        -:  122:  // Analysis
        -:  123:  //===--------------------------------------------------------------------===//
        -:  124:
function _ZN12_GLOBAL__N_110PassTiming17runBeforeAnalysisEN4llvm9StringRefEN4mlir6TypeIDEPNS3_9OperationE called 65 returned 100% blocks executed 80%
       65:  125:  void runBeforeAnalysis(StringRef name, TypeID id, Operation *) override {
       65:  126:    auto tid = llvm::get_threadid();
call    0 returned 100%
       65:  127:    auto &activeTimers = activeThreadTimers[tid];
call    0 returned 100%
      65*:  128:    auto &parentScope = activeTimers.empty() ? rootScope : activeTimers.back();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
       65:  129:    activeTimers.push_back(parentScope.nest(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
function _ZZN12_GLOBAL__N_110PassTiming17runBeforeAnalysisEN4llvm9StringRefEN4mlir6TypeIDEPNS3_9OperationEENKUlvE_clEv called 65 returned 100% blocks executed 62%
      130:  130:        id.getAsOpaquePointer(), [name] { return "(A) " + name.str(); }));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       65:  131:  }
        -:  132:
function _ZN12_GLOBAL__N_110PassTiming16runAfterAnalysisEN4llvm9StringRefEN4mlir6TypeIDEPNS3_9OperationE called 65 returned 100% blocks executed 83%
       65:  133:  void runAfterAnalysis(StringRef, TypeID, Operation *) override {
       65:  134:    auto &activeTimers = activeThreadTimers[llvm::get_threadid()];
call    0 returned 100%
call    1 returned 100%
      65*:  135:    assert(!activeTimers.empty() && "expected active timer");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       65:  136:    activeTimers.pop_back();
call    0 returned 100%
       65:  137:  }
        -:  138:};
        -:  139:} // namespace
        -:  140:
        -:  141://===----------------------------------------------------------------------===//
        -:  142:// PassManager
        -:  143://===----------------------------------------------------------------------===//
        -:  144:
        -:  145:/// Add an instrumentation to time the execution of passes and the computation
        -:  146:/// of analyses.
function _ZN4mlir11PassManager12enableTimingERNS_11TimingScopeE called 91595 returned 100% blocks executed 78%
    91595:  147:void PassManager::enableTiming(TimingScope &timingScope) {
    91595:  148:  if (!timingScope)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  149:    return;
     1072:  150:  addInstrumentation(std::make_unique<PassTiming>(timingScope));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  151:}
        -:  152:
        -:  153:/// Add an instrumentation to time the execution of passes and the computation
        -:  154:/// of analyses.
function _ZN4mlir11PassManager12enableTimingESt10unique_ptrINS_13TimingManagerESt14default_deleteIS2_EE called 0 returned 0% blocks executed 0%
    #####:  155:void PassManager::enableTiming(std::unique_ptr<TimingManager> tm) {
    #####:  156:  if (!tm->getRootTimer())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:    return; // no need to keep the timing manager around if it's disabled
    #####:  158:  addInstrumentation(std::make_unique<PassTiming>(std::move(tm)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  159:}
        -:  160:
        -:  161:/// Add an instrumentation to time the execution of passes and the computation
        -:  162:/// of analyses.
function _ZN4mlir11PassManager12enableTimingEv called 0 returned 0% blocks executed 0%
    #####:  163:void PassManager::enableTiming() {
    #####:  164:  auto tm = std::make_unique<DefaultTimingManager>();
call    0 never executed
    #####:  165:  tm->setEnabled(true);
call    0 never executed
    #####:  166:  enableTiming(std::move(tm));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  167:}
