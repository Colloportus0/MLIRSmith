        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Math/Transforms/AlgebraicSimplification.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Math/Transforms/CMakeFiles/obj.MLIRMathTransforms.dir/AlgebraicSimplification.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Math/Transforms/CMakeFiles/obj.MLIRMathTransforms.dir/AlgebraicSimplification.cpp.gcda
        -:    0:Runs:116171
        -:    1://===- AlgebraicSimplification.cpp - Simplify algebraic expressions -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements rewrites based on the basic rules of algebra
        -:   10:// (Commutativity, associativity, etc...) and strength reductions for math
        -:   11:// operations.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   16:#include "mlir/Dialect/Math/IR/Math.h"
        -:   17:#include "mlir/Dialect/Math/Transforms/Passes.h"
        -:   18:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   19:#include "mlir/IR/Builders.h"
        -:   20:#include "mlir/IR/Matchers.h"
        -:   21:#include "mlir/IR/TypeUtilities.h"
        -:   22:#include <climits>
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26://----------------------------------------------------------------------------//
        -:   27:// PowFOp strength reduction.
        -:   28://----------------------------------------------------------------------------//
        -:   29:
        -:   30:namespace {
        -:   31:struct PowFStrengthReduction : public OpRewritePattern<math::PowFOp> {
        -:   32:public:
        -:   33:  using OpRewritePattern::OpRewritePattern;
        -:   34:
        -:   35:  LogicalResult matchAndRewrite(math::PowFOp op,
        -:   36:                                PatternRewriter &rewriter) const final;
        -:   37:};
        -:   38:} // namespace
        -:   39:
        -:   40:LogicalResult
function _ZNK12_GLOBAL__N_121PowFStrengthReduction15matchAndRewriteEN4mlir4math6PowFOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   41:PowFStrengthReduction::matchAndRewrite(math::PowFOp op,
        -:   42:                                       PatternRewriter &rewriter) const {
    #####:   43:  Location loc = op.getLoc();
call    0 never executed
    #####:   44:  Value x = op.getLhs();
call    0 never executed
        -:   45:
    #####:   46:  FloatAttr scalarExponent;
    #####:   47:  DenseFPElementsAttr vectorExponent;
        -:   48:
    #####:   49:  bool isScalar = matchPattern(op.getRhs(), m_Constant(&scalarExponent));
call    0 never executed
call    1 never executed
    #####:   50:  bool isVector = matchPattern(op.getRhs(), m_Constant(&vectorExponent));
call    0 never executed
call    1 never executed
        -:   51:
        -:   52:  // Returns true if exponent is a constant equal to `value`.
function _ZZNK12_GLOBAL__N_121PowFStrengthReduction15matchAndRewriteEN4mlir4math6PowFOpERNS1_15PatternRewriterEENKUldE_clEd called 0 returned 0% blocks executed 0%
    #####:   53:  auto isExponentValue = [&](double value) -> bool {
    #####:   54:    if (isScalar)
branch  0 never executed
branch  1 never executed
    #####:   55:      return scalarExponent.getValue().isExactlyValue(value);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   56:
    #####:   57:    if (isVector && vectorExponent.isSplat())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   58:      return vectorExponent.getSplatValue<FloatAttr>()
call    0 never executed
    #####:   59:          .getValue()
call    0 never executed
    #####:   60:          .isExactlyValue(value);
call    0 never executed
call    1 never executed
        -:   61:
        -:   62:    return false;
    #####:   63:  };
        -:   64:
        -:   65:  // Maybe broadcasts scalar value into vector type compatible with `op`.
function _ZZNK12_GLOBAL__N_121PowFStrengthReduction15matchAndRewriteEN4mlir4math6PowFOpERNS1_15PatternRewriterEENKUlNS1_5ValueEE0_clES6_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   66:  auto bcast = [&](Value value) -> Value {
    #####:   67:    if (auto vec = op.getType().dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:      return rewriter.create<vector::BroadcastOp>(op.getLoc(), vec, value);
call    0 never executed
    #####:   69:    return value;
    #####:   70:  };
        -:   71:
        -:   72:  // Replace `pow(x, 1.0)` with `x`.
    #####:   73:  if (isExponentValue(1.0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:    rewriter.replaceOp(op, x);
call    0 never executed
call    1 never executed
    #####:   75:    return success();
        -:   76:  }
        -:   77:
        -:   78:  // Replace `pow(x, 2.0)` with `x * x`.
    #####:   79:  if (isExponentValue(2.0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:    rewriter.replaceOpWithNewOp<arith::MulFOp>(op, ValueRange({x, x}));
call    0 never executed
call    1 never executed
    #####:   81:    return success();
        -:   82:  }
        -:   83:
        -:   84:  // Replace `pow(x, 3.0)` with `x * x * x`.
    #####:   85:  if (isExponentValue(3.0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   86:    Value square =
    #####:   87:        rewriter.create<arith::MulFOp>(op.getLoc(), ValueRange({x, x}));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   88:    rewriter.replaceOpWithNewOp<arith::MulFOp>(op, ValueRange({x, square}));
call    0 never executed
call    1 never executed
    #####:   89:    return success();
        -:   90:  }
        -:   91:
        -:   92:  // Replace `pow(x, -1.0)` with `1.0 / x`.
    #####:   93:  if (isExponentValue(-1.0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   94:    Value one = rewriter.create<arith::ConstantOp>(
    #####:   95:        loc, rewriter.getFloatAttr(getElementTypeOrSelf(op.getType()), 1.0));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   96:    rewriter.replaceOpWithNewOp<arith::DivFOp>(op, ValueRange({bcast(one), x}));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   97:    return success();
        -:   98:  }
        -:   99:
        -:  100:  // Replace `pow(x, 0.5)` with `sqrt(x)`.
    #####:  101:  if (isExponentValue(0.5)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:    rewriter.replaceOpWithNewOp<math::SqrtOp>(op, x);
call    0 never executed
    #####:  103:    return success();
        -:  104:  }
        -:  105:
        -:  106:  // Replace `pow(x, -0.5)` with `rsqrt(x)`.
    #####:  107:  if (isExponentValue(-0.5)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:    rewriter.replaceOpWithNewOp<math::RsqrtOp>(op, x);
call    0 never executed
    #####:  109:    return success();
        -:  110:  }
        -:  111:
    #####:  112:  return failure();
        -:  113:}
        -:  114:
        -:  115://----------------------------------------------------------------------------//
        -:  116:// FPowIOp/IPowIOp strength reduction.
        -:  117://----------------------------------------------------------------------------//
        -:  118:
        -:  119:namespace {
        -:  120:template <typename PowIOpTy, typename DivOpTy, typename MulOpTy>
        -:  121:struct PowIStrengthReduction : public OpRewritePattern<PowIOpTy> {
        -:  122:
        -:  123:  unsigned exponentThreshold;
        -:  124:
        -:  125:public:
        -:  126:  PowIStrengthReduction(MLIRContext *context, unsigned exponentThreshold = 3,
        -:  127:                        PatternBenefit benefit = 1,
        -:  128:                        ArrayRef<StringRef> generatedNames = {})
        -:  129:      : OpRewritePattern<PowIOpTy>(context, benefit, generatedNames),
        -:  130:        exponentThreshold(exponentThreshold) {}
        -:  131:
        -:  132:  LogicalResult matchAndRewrite(PowIOpTy op,
        -:  133:                                PatternRewriter &rewriter) const final;
        -:  134:};
        -:  135:} // namespace
        -:  136:
        -:  137:template <typename PowIOpTy, typename DivOpTy, typename MulOpTy>
        -:  138:LogicalResult
    #####:  139:PowIStrengthReduction<PowIOpTy, DivOpTy, MulOpTy>::matchAndRewrite(
        -:  140:    PowIOpTy op, PatternRewriter &rewriter) const {
    #####:  141:  Location loc = op.getLoc();
    #####:  142:  Value base = op.getLhs();
        -:  143:
    #####:  144:  IntegerAttr scalarExponent;
    #####:  145:  DenseIntElementsAttr vectorExponent;
        -:  146:
    #####:  147:  bool isScalar = matchPattern(op.getRhs(), m_Constant(&scalarExponent));
    #####:  148:  bool isVector = matchPattern(op.getRhs(), m_Constant(&vectorExponent));
        -:  149:
        -:  150:  // Simplify cases with known exponent value.
    #####:  151:  int64_t exponentValue = 0;
    #####:  152:  if (isScalar)
    #####:  153:    exponentValue = scalarExponent.getInt();
    #####:  154:  else if (isVector && vectorExponent.isSplat())
    #####:  155:    exponentValue = vectorExponent.getSplatValue<IntegerAttr>().getInt();
        -:  156:  else
    #####:  157:    return failure();
        -:  158:
        -:  159:  // Maybe broadcasts scalar value into vector type compatible with `op`.
    #####:  160:  auto bcast = [&loc, &op, &rewriter](Value value) -> Value {
    #####:  161:    if (auto vec = op.getType().template dyn_cast<VectorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  162:      return rewriter.create<vector::BroadcastOp>(loc, vec, value);
call    0 never executed
call    1 never executed
    #####:  163:    return value;
        -:  164:  };
        -:  165:
    #####:  166:  Value one;
    #####:  167:  Type opType = getElementTypeOrSelf(op.getType());
        -:  168:  if constexpr (std::is_same_v<PowIOpTy, math::FPowIOp>)
    #####:  169:    one = rewriter.create<arith::ConstantOp>(
    #####:  170:        loc, rewriter.getFloatAttr(opType, 1.0));
        -:  171:  else
    #####:  172:    one = rewriter.create<arith::ConstantOp>(
    #####:  173:        loc, rewriter.getIntegerAttr(opType, 1));
        -:  174:
        -:  175:  // Replace `[fi]powi(x, 0)` with `1`.
    #####:  176:  if (exponentValue == 0) {
    #####:  177:    rewriter.replaceOp(op, bcast(one));
    #####:  178:    return success();
        -:  179:  }
        -:  180:
    #####:  181:  bool exponentIsNegative = false;
    #####:  182:  if (exponentValue < 0) {
    #####:  183:    exponentIsNegative = true;
    #####:  184:    exponentValue *= -1;
        -:  185:  }
        -:  186:
        -:  187:  // Bail out if `abs(exponent)` exceeds the threshold.
    #####:  188:  if (exponentValue > exponentThreshold)
    #####:  189:    return failure();
        -:  190:
        -:  191:  // Inverse the base for negative exponent, i.e. for
        -:  192:  // `[fi]powi(x, negative_exponent)` set `x` to `1 / x`.
    #####:  193:  if (exponentIsNegative)
    #####:  194:    base = rewriter.create<DivOpTy>(loc, bcast(one), base);
        -:  195:
    #####:  196:  Value result = base;
        -:  197:  // Transform to naive sequence of multiplications:
        -:  198:  //   * For positive exponent case replace:
        -:  199:  //       `[fi]powi(x, positive_exponent)`
        -:  200:  //     with:
        -:  201:  //       x * x * x * ...
        -:  202:  //   * For negative exponent case replace:
        -:  203:  //       `[fi]powi(x, negative_exponent)`
        -:  204:  //     with:
        -:  205:  //       (1 / x) * (1 / x) * (1 / x) * ...
    #####:  206:  for (unsigned i = 1; i < exponentValue; ++i)
    #####:  207:    result = rewriter.create<MulOpTy>(loc, result, base);
        -:  208:
    #####:  209:  rewriter.replaceOp(op, result);
    #####:  210:  return success();
        -:  211:}
------------------
_ZNK12_GLOBAL__N_121PowIStrengthReductionIN4mlir4math7IPowIOpENS1_5arith7DivSIOpENS4_6MulIOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_121PowIStrengthReductionIN4mlir4math7IPowIOpENS1_5arith7DivSIOpENS4_6MulIOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  139:PowIStrengthReduction<PowIOpTy, DivOpTy, MulOpTy>::matchAndRewrite(
        -:  140:    PowIOpTy op, PatternRewriter &rewriter) const {
    #####:  141:  Location loc = op.getLoc();
call    0 never executed
    #####:  142:  Value base = op.getLhs();
call    0 never executed
        -:  143:
    #####:  144:  IntegerAttr scalarExponent;
    #####:  145:  DenseIntElementsAttr vectorExponent;
call    0 never executed
        -:  146:
    #####:  147:  bool isScalar = matchPattern(op.getRhs(), m_Constant(&scalarExponent));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  148:  bool isVector = matchPattern(op.getRhs(), m_Constant(&vectorExponent));
call    0 never executed
call    1 never executed
        -:  149:
        -:  150:  // Simplify cases with known exponent value.
    #####:  151:  int64_t exponentValue = 0;
    #####:  152:  if (isScalar)
branch  0 never executed
branch  1 never executed
    #####:  153:    exponentValue = scalarExponent.getInt();
call    0 never executed
    #####:  154:  else if (isVector && vectorExponent.isSplat())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  155:    exponentValue = vectorExponent.getSplatValue<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
        -:  156:  else
    #####:  157:    return failure();
        -:  158:
        -:  159:  // Maybe broadcasts scalar value into vector type compatible with `op`.
    #####:  160:  auto bcast = [&loc, &op, &rewriter](Value value) -> Value {
        -:  161:    if (auto vec = op.getType().template dyn_cast<VectorType>())
        -:  162:      return rewriter.create<vector::BroadcastOp>(loc, vec, value);
        -:  163:    return value;
        -:  164:  };
        -:  165:
    #####:  166:  Value one;
call    0 never executed
    #####:  167:  Type opType = getElementTypeOrSelf(op.getType());
call    0 never executed
        -:  168:  if constexpr (std::is_same_v<PowIOpTy, math::FPowIOp>)
        -:  169:    one = rewriter.create<arith::ConstantOp>(
        -:  170:        loc, rewriter.getFloatAttr(opType, 1.0));
        -:  171:  else
    #####:  172:    one = rewriter.create<arith::ConstantOp>(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  173:        loc, rewriter.getIntegerAttr(opType, 1));
call    0 never executed
        -:  174:
        -:  175:  // Replace `[fi]powi(x, 0)` with `1`.
    #####:  176:  if (exponentValue == 0) {
branch  0 never executed
branch  1 never executed
    #####:  177:    rewriter.replaceOp(op, bcast(one));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  178:    return success();
        -:  179:  }
        -:  180:
    #####:  181:  bool exponentIsNegative = false;
    #####:  182:  if (exponentValue < 0) {
branch  0 never executed
branch  1 never executed
    #####:  183:    exponentIsNegative = true;
    #####:  184:    exponentValue *= -1;
        -:  185:  }
        -:  186:
        -:  187:  // Bail out if `abs(exponent)` exceeds the threshold.
    #####:  188:  if (exponentValue > exponentThreshold)
branch  0 never executed
branch  1 never executed
    #####:  189:    return failure();
        -:  190:
        -:  191:  // Inverse the base for negative exponent, i.e. for
        -:  192:  // `[fi]powi(x, negative_exponent)` set `x` to `1 / x`.
    #####:  193:  if (exponentIsNegative)
branch  0 never executed
branch  1 never executed
    #####:  194:    base = rewriter.create<DivOpTy>(loc, bcast(one), base);
call    0 never executed
call    1 never executed
        -:  195:
    #####:  196:  Value result = base;
        -:  197:  // Transform to naive sequence of multiplications:
        -:  198:  //   * For positive exponent case replace:
        -:  199:  //       `[fi]powi(x, positive_exponent)`
        -:  200:  //     with:
        -:  201:  //       x * x * x * ...
        -:  202:  //   * For negative exponent case replace:
        -:  203:  //       `[fi]powi(x, negative_exponent)`
        -:  204:  //     with:
        -:  205:  //       (1 / x) * (1 / x) * (1 / x) * ...
    #####:  206:  for (unsigned i = 1; i < exponentValue; ++i)
branch  0 never executed
branch  1 never executed
    #####:  207:    result = rewriter.create<MulOpTy>(loc, result, base);
call    0 never executed
        -:  208:
    #####:  209:  rewriter.replaceOp(op, result);
call    0 never executed
call    1 never executed
    #####:  210:  return success();
        -:  211:}
------------------
_ZNK12_GLOBAL__N_121PowIStrengthReductionIN4mlir4math7FPowIOpENS1_5arith6DivFOpENS4_6MulFOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE:
function _ZNK12_GLOBAL__N_121PowIStrengthReductionIN4mlir4math7FPowIOpENS1_5arith6DivFOpENS4_6MulFOpEE15matchAndRewriteES3_RNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  139:PowIStrengthReduction<PowIOpTy, DivOpTy, MulOpTy>::matchAndRewrite(
        -:  140:    PowIOpTy op, PatternRewriter &rewriter) const {
    #####:  141:  Location loc = op.getLoc();
call    0 never executed
    #####:  142:  Value base = op.getLhs();
call    0 never executed
        -:  143:
    #####:  144:  IntegerAttr scalarExponent;
    #####:  145:  DenseIntElementsAttr vectorExponent;
call    0 never executed
        -:  146:
    #####:  147:  bool isScalar = matchPattern(op.getRhs(), m_Constant(&scalarExponent));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  148:  bool isVector = matchPattern(op.getRhs(), m_Constant(&vectorExponent));
call    0 never executed
call    1 never executed
        -:  149:
        -:  150:  // Simplify cases with known exponent value.
    #####:  151:  int64_t exponentValue = 0;
    #####:  152:  if (isScalar)
branch  0 never executed
branch  1 never executed
    #####:  153:    exponentValue = scalarExponent.getInt();
call    0 never executed
    #####:  154:  else if (isVector && vectorExponent.isSplat())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  155:    exponentValue = vectorExponent.getSplatValue<IntegerAttr>().getInt();
call    0 never executed
call    1 never executed
        -:  156:  else
    #####:  157:    return failure();
        -:  158:
        -:  159:  // Maybe broadcasts scalar value into vector type compatible with `op`.
    #####:  160:  auto bcast = [&loc, &op, &rewriter](Value value) -> Value {
        -:  161:    if (auto vec = op.getType().template dyn_cast<VectorType>())
        -:  162:      return rewriter.create<vector::BroadcastOp>(loc, vec, value);
        -:  163:    return value;
        -:  164:  };
        -:  165:
    #####:  166:  Value one;
call    0 never executed
    #####:  167:  Type opType = getElementTypeOrSelf(op.getType());
call    0 never executed
        -:  168:  if constexpr (std::is_same_v<PowIOpTy, math::FPowIOp>)
    #####:  169:    one = rewriter.create<arith::ConstantOp>(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  170:        loc, rewriter.getFloatAttr(opType, 1.0));
call    0 never executed
        -:  171:  else
        -:  172:    one = rewriter.create<arith::ConstantOp>(
        -:  173:        loc, rewriter.getIntegerAttr(opType, 1));
        -:  174:
        -:  175:  // Replace `[fi]powi(x, 0)` with `1`.
    #####:  176:  if (exponentValue == 0) {
branch  0 never executed
branch  1 never executed
    #####:  177:    rewriter.replaceOp(op, bcast(one));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  178:    return success();
        -:  179:  }
        -:  180:
    #####:  181:  bool exponentIsNegative = false;
    #####:  182:  if (exponentValue < 0) {
branch  0 never executed
branch  1 never executed
    #####:  183:    exponentIsNegative = true;
    #####:  184:    exponentValue *= -1;
        -:  185:  }
        -:  186:
        -:  187:  // Bail out if `abs(exponent)` exceeds the threshold.
    #####:  188:  if (exponentValue > exponentThreshold)
branch  0 never executed
branch  1 never executed
    #####:  189:    return failure();
        -:  190:
        -:  191:  // Inverse the base for negative exponent, i.e. for
        -:  192:  // `[fi]powi(x, negative_exponent)` set `x` to `1 / x`.
    #####:  193:  if (exponentIsNegative)
branch  0 never executed
branch  1 never executed
    #####:  194:    base = rewriter.create<DivOpTy>(loc, bcast(one), base);
call    0 never executed
call    1 never executed
        -:  195:
    #####:  196:  Value result = base;
        -:  197:  // Transform to naive sequence of multiplications:
        -:  198:  //   * For positive exponent case replace:
        -:  199:  //       `[fi]powi(x, positive_exponent)`
        -:  200:  //     with:
        -:  201:  //       x * x * x * ...
        -:  202:  //   * For negative exponent case replace:
        -:  203:  //       `[fi]powi(x, negative_exponent)`
        -:  204:  //     with:
        -:  205:  //       (1 / x) * (1 / x) * (1 / x) * ...
    #####:  206:  for (unsigned i = 1; i < exponentValue; ++i)
branch  0 never executed
branch  1 never executed
    #####:  207:    result = rewriter.create<MulOpTy>(loc, result, base);
call    0 never executed
        -:  208:
    #####:  209:  rewriter.replaceOp(op, result);
call    0 never executed
call    1 never executed
    #####:  210:  return success();
        -:  211:}
------------------
        -:  212:
        -:  213://----------------------------------------------------------------------------//
        -:  214:
function _ZN4mlir43populateMathAlgebraicSimplificationPatternsERNS_17RewritePatternSetE called 405 returned 100% blocks executed 100%
      405:  215:void mlir::populateMathAlgebraicSimplificationPatterns(
        -:  216:    RewritePatternSet &patterns) {
      405:  217:  patterns
        -:  218:      .add<PowFStrengthReduction,
        -:  219:           PowIStrengthReduction<math::IPowIOp, arith::DivSIOp, arith::MulIOp>,
        -:  220:           PowIStrengthReduction<math::FPowIOp, arith::DivFOp, arith::MulFOp>>(
      405:  221:          patterns.getContext());
call    0 returned 100%
      405:  222:}
