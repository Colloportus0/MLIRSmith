        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Tosa/Utils/CoversionUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Tosa/CMakeFiles/obj.MLIRTosaDialect.dir/IR/TosaCanonicalizations.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tosa/CMakeFiles/obj.MLIRTosaDialect.dir/IR/TosaCanonicalizations.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- ConversionUtils.h - Helper functions for tosa conversion -*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Utility functions for TOSA lowering
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef DIALECT_TOSA_UTILS_COVERSION_UTILS_H_
        -:   14:#define DIALECT_TOSA_UTILS_COVERSION_UTILS_H_
        -:   15:
        -:   16:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   17:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   18:#include "mlir/Dialect/Utils/StructuredOpsUtils.h"
        -:   19:#include "mlir/IR/PatternMatch.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:namespace tosa {
        -:   23:
        -:   24:// Creates a SmallVector of Stringrefs for N parallel loops
        -:   25:SmallVector<StringRef> getNParallelLoopsAttrs(unsigned nParallelLoops);
        -:   26:
        -:   27:// Takes a vector of values and condenses them to a vector with no gaps.
        -:   28:SmallVector<Value> condenseValues(const SmallVector<Value> &values);
        -:   29:
        -:   30:// Takes the parameters for a clamp and turns it into a series of ops for float
        -:   31:// inputs.
        -:   32:Value clampFloatHelper(Location loc, Value arg, arith::ConstantOp min,
        -:   33:                       arith::ConstantOp max, OpBuilder &rewriter);
        -:   34:
        -:   35:// Takes the parameters for a clamp and turns it into a series of ops for
        -:   36:// integer inputs.
        -:   37:Value clampIntHelper(Location loc, Value arg, arith::ConstantOp min,
        -:   38:                     arith::ConstantOp max, OpBuilder &rewriter);
        -:   39:
        -:   40:// Returns the values in an attribute as an array of values.
        -:   41:template <typename T>
function _ZN4mlir4tosa30getValuesFromIntArrayAttributeIiEEvNS_9ArrayAttrERN4llvm11SmallVectorIT_XsrNS3_42CalculateSmallVectorDefaultInlinedElementsIS5_EE5valueEEE called 0 returned 0% blocks executed 0%
    #####:   42:void getValuesFromIntArrayAttribute(ArrayAttr attr,
        -:   43:                                    SmallVector<T> &arrayValues) {
    #####:   44:  for (Attribute val : attr.getValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:    arrayValues.push_back(val.cast<IntegerAttr>().getValue().getSExtValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   46:  }
    #####:   47:}
        -:   48:
        -:   49:// Checks for a dynamic batch dim in any of the passed parameters of an op.
        -:   50:// The batch dimention must be #0 and the rest of the dimensions must be static.
        -:   51:template <typename Op>
        -:   52:Optional<SmallVector<Value>> checkHasDynamicBatchDims(PatternRewriter &rewriter,
        -:   53:                                                      Op op,
        -:   54:                                                      ArrayRef<Value> params) {
        -:   55:  SmallVector<ShapedType> dynTypes;
        -:   56:  SmallVector<Value> dynamicDims;
        -:   57:  for (const Value &param : params) {
        -:   58:    auto paramTy = param.getType().cast<ShapedType>();
        -:   59:    if (!paramTy.hasStaticShape())
        -:   60:      dynTypes.push_back(paramTy);
        -:   61:  }
        -:   62:
        -:   63:  if (dynTypes.empty())
        -:   64:    return dynamicDims;
        -:   65:
        -:   66:  for (const ShapedType &dynTy : dynTypes) {
        -:   67:    if (llvm::any_of(dynTy.getShape().drop_front(), ShapedType::isDynamic)) {
        -:   68:      (void)rewriter.notifyMatchFailure(
        -:   69:          op, "input can only be dynamic for batch size");
        -:   70:      return llvm::None;
        -:   71:    }
        -:   72:  }
        -:   73:
        -:   74:  dynamicDims.push_back(
        -:   75:      rewriter.create<tensor::DimOp>(op->getLoc(), params[0], 0));
        -:   76:  return dynamicDims;
        -:   77:}
        -:   78:
        -:   79:} // namespace tosa
        -:   80:} // namespace mlir
        -:   81:
        -:   82:#endif // DIALECT_TOSA_UTILS_COVERSION_UTILS_H_
