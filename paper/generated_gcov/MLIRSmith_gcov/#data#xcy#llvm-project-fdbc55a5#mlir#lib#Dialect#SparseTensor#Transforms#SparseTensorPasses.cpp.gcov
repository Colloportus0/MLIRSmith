        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorPasses.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/SparseTensorPasses.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/SparseTensorPasses.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- SparseTensorPasses.cpp - Pass for autogen sparse tensor code -------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   10:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   11:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   12:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/Func/Transforms/FuncConversions.h"
        -:   15:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   17:#include "mlir/Dialect/SCF/Transforms/Transforms.h"
        -:   18:#include "mlir/Dialect/SparseTensor/IR/SparseTensor.h"
        -:   19:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h"
        -:   20:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   21:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:#define GEN_PASS_DEF_SPARSETENSORREWRITE
        -:   25:#define GEN_PASS_DEF_SPARSIFICATIONPASS
        -:   26:#define GEN_PASS_DEF_SPARSETENSORCONVERSIONPASS
        -:   27:#define GEN_PASS_DEF_SPARSETENSORCODEGEN
        -:   28:#define GEN_PASS_DEF_SPARSEBUFFERREWRITE
        -:   29:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h.inc"
        -:   30:} // namespace mlir
        -:   31:
        -:   32:using namespace mlir;
        -:   33:using namespace mlir::sparse_tensor;
        -:   34:
        -:   35:namespace {
        -:   36:
        -:   37://===----------------------------------------------------------------------===//
        -:   38:// Passes implementation.
        -:   39://===----------------------------------------------------------------------===//
        -:   40:
        -:   41:struct SparseTensorRewritePass
        -:   42:    : public impl::SparseTensorRewriteBase<SparseTensorRewritePass> {
        -:   43:
   116161:   44:  SparseTensorRewritePass() = default;
call    0 returned 100%
    #####:   45:  SparseTensorRewritePass(const SparseTensorRewritePass &pass) = default;
call    0 never executed
function _ZN12_GLOBAL__N_123SparseTensorRewritePassC2Ebbb called 389 returned 100% blocks executed 73%
      389:   46:  SparseTensorRewritePass(bool enableRT, bool foreach, bool convert) {
call    0 returned 100%
      389:   47:    enableRuntimeLibrary = enableRT;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      389:   48:    enableForeach = foreach;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      389:   49:    enableConvert = convert;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      389:   50:  }
        -:   51:
function _ZN12_GLOBAL__N_123SparseTensorRewritePass14runOnOperationEv called 165 returned 100% blocks executed 100%
      165:   52:  void runOnOperation() override {
      165:   53:    auto *ctx = &getContext();
call    0 returned 100%
      165:   54:    RewritePatternSet patterns(ctx);
call    0 returned 100%
      165:   55:    populateSparseTensorRewriting(patterns, enableRuntimeLibrary, enableForeach,
      165:   56:                                  enableConvert);
call    0 returned 100%
      165:   57:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      165:   58:  }
        -:   59:};
        -:   60:
        -:   61:struct SparsificationPass
        -:   62:    : public impl::SparsificationPassBase<SparsificationPass> {
        -:   63:
   116678:   64:  SparsificationPass() = default;
call    0 returned 100%
    #####:   65:  SparsificationPass(const SparsificationPass &pass) = default;
call    0 never executed
function _ZN12_GLOBAL__N_118SparsificationPassC2ERKN4mlir21SparsificationOptionsE called 389 returned 100% blocks executed 80%
      389:   66:  SparsificationPass(const SparsificationOptions &options) {
call    0 returned 100%
      389:   67:    parallelization = options.parallelizationStrategy;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      389:   68:  }
        -:   69:
function _ZN12_GLOBAL__N_118SparsificationPass14runOnOperationEv called 558 returned 100% blocks executed 100%
      558:   70:  void runOnOperation() override {
      558:   71:    auto *ctx = &getContext();
call    0 returned 100%
        -:   72:    // Translate strategy flags to strategy options.
      558:   73:    SparsificationOptions options(parallelization);
call    0 returned 100%
        -:   74:    // Apply sparsification and vector cleanup rewriting.
      558:   75:    RewritePatternSet patterns(ctx);
call    0 returned 100%
      558:   76:    populateSparsificationPatterns(patterns, options);
call    0 returned 100%
      558:   77:    vector::populateVectorToVectorCanonicalizationPatterns(patterns);
call    0 returned 100%
call    1 returned 100%
      558:   78:    scf::ForOp::getCanonicalizationPatterns(patterns, ctx);
call    0 returned 100%
      558:   79:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      558:   80:  }
        -:   81:};
        -:   82:
        -:   83:struct SparseTensorConversionPass
        -:   84:    : public impl::SparseTensorConversionPassBase<SparseTensorConversionPass> {
        -:   85:
   116706:   86:  SparseTensorConversionPass() = default;
call    0 returned 100%
    #####:   87:  SparseTensorConversionPass(const SparseTensorConversionPass &pass) = default;
call    0 never executed
        -:   88:  SparseTensorConversionPass(const SparseTensorConversionOptions &options) {
        -:   89:    sparseToSparse = static_cast<int32_t>(options.sparseToSparseStrategy);
        -:   90:  }
        -:   91:
function _ZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEv called 582 returned 100% blocks executed 91%
      582:   92:  void runOnOperation() override {
      582:   93:    auto *ctx = &getContext();
call    0 returned 100%
      582:   94:    RewritePatternSet patterns(ctx);
call    0 returned 100%
     1164:   95:    SparseTensorTypeToPtrConverter converter;
call    0 returned 100%
call    1 returned 100%
     1164:   96:    ConversionTarget target(*ctx);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   97:    // Everything in the sparse dialect must go!
      582:   98:    target.addIllegalDialect<SparseTensorDialect>();
call    0 returned 100%
        -:   99:    // All dynamic rules below accept new function, call, return, and various
        -:  100:    // tensor and bufferization operations as legal output of the rewriting
        -:  101:    // provided that all sparse tensor types have been fully rewritten.
      582:  102:    target.addDynamicallyLegalOp<func::FuncOp>([&](func::FuncOp op) {
call    0 returned 100%
     1160:  103:      return converter.isSignatureLegal(op.getFunctionType());
call    0 returned 100%
call    1 returned 100%
        -:  104:    });
      582:  105:    target.addDynamicallyLegalOp<func::CallOp>([&](func::CallOp op) {
call    0 returned 100%
       14:  106:      return converter.isSignatureLegal(op.getCalleeType());
call    0 returned 100%
call    1 returned 100%
        -:  107:    });
function _ZZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEvENKUlN4mlir4func8ReturnOpEE1_clES3_.isra.0 called 1156 returned 100% blocks executed 100%
     1738:  108:    target.addDynamicallyLegalOp<func::ReturnOp>([&](func::ReturnOp op) {
call    0 returned 100%
     1156:  109:      return converter.isLegal(op.getOperandTypes());
call    0 returned 100%
call    1 returned 100%
        -:  110:    });
function _ZZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEvENKUlN4mlir6tensor5DimOpEE2_clES3_.isra.0 called 0 returned 0% blocks executed 0%
     582*:  111:    target.addDynamicallyLegalOp<tensor::DimOp>([&](tensor::DimOp op) {
call    0 returned 100%
    #####:  112:      return converter.isLegal(op.getOperandTypes());
call    0 never executed
call    1 never executed
        -:  113:    });
function _ZZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEvENKUlN4mlir6tensor6CastOpEE3_clES3_.isra.0 called 7854 returned 100% blocks executed 91%
     8436:  114:    target.addDynamicallyLegalOp<tensor::CastOp>([&](tensor::CastOp op) {
call    0 returned 100%
    15708:  115:      return converter.isLegal(op.getSource().getType()) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
     7854:  116:             converter.isLegal(op.getDest().getType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  117:    });
      582:  118:    target.addDynamicallyLegalOp<tensor::ExpandShapeOp>(
call    0 returned 100%
function _ZZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEvENKUlN4mlir6tensor13ExpandShapeOpEE4_clES3_.isra.0 called 10862 returned 100% blocks executed 91%
    10862:  119:        [&](tensor::ExpandShapeOp op) {
    21724:  120:          return converter.isLegal(op.getSrc().getType()) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    10862:  121:                 converter.isLegal(op.getResult().getType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  122:        });
      582:  123:    target.addDynamicallyLegalOp<tensor::CollapseShapeOp>(
call    0 returned 100%
function _ZZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEvENKUlN4mlir6tensor15CollapseShapeOpEE5_clES3_.isra.0 called 9272 returned 100% blocks executed 91%
     9272:  124:        [&](tensor::CollapseShapeOp op) {
    18544:  125:          return converter.isLegal(op.getSrc().getType()) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
     9272:  126:                 converter.isLegal(op.getResult().getType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  127:        });
      582:  128:    target.addDynamicallyLegalOp<bufferization::AllocTensorOp>(
call    0 returned 100%
      290:  129:        [&](bufferization::AllocTensorOp op) {
      290:  130:          return converter.isLegal(op.getType());
call    0 returned 100%
call    1 returned 100%
        -:  131:        });
      582:  132:    target.addDynamicallyLegalOp<bufferization::DeallocTensorOp>(
call    0 returned 100%
function _ZZN12_GLOBAL__N_126SparseTensorConversionPass14runOnOperationEvENKUlN4mlir13bufferization15DeallocTensorOpEE7_clES3_.isra.0 called 14038 returned 100% blocks executed 100%
    14038:  133:        [&](bufferization::DeallocTensorOp op) {
    14038:  134:          return converter.isLegal(op.getTensor().getType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  135:        });
        -:  136:    // The following operations and dialects may be introduced by the
        -:  137:    // rewriting rules, and are therefore marked as legal.
      582:  138:    target.addLegalOp<complex::ConstantOp, complex::NotEqualOp, linalg::FillOp,
      582:  139:                      linalg::YieldOp, tensor::ExtractOp>();
call    0 returned 100%
      582:  140:    target.addLegalDialect<
        -:  141:        arith::ArithDialect, bufferization::BufferizationDialect,
      582:  142:        LLVM::LLVMDialect, memref::MemRefDialect, scf::SCFDialect>();
call    0 returned 100%
        -:  143:    // Translate strategy flags to strategy options.
      582:  144:    SparseTensorConversionOptions options(
      582:  145:        sparseToSparseConversionStrategy(sparseToSparse));
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 100%
call    3 returned 100%
        -:  146:    // Populate with rules and apply rewriting rules.
      582:  147:    populateFunctionOpInterfaceTypeConversionPattern<func::FuncOp>(patterns,
call    0 returned 100%
        -:  148:                                                                   converter);
      582:  149:    populateCallOpTypeConversionPattern(patterns, converter);
call    0 returned 100%
      582:  150:    scf::populateSCFStructuralTypeConversionsAndLegality(converter, patterns,
call    0 returned 100%
        -:  151:                                                         target);
      582:  152:    populateSparseTensorConversionPatterns(converter, patterns, options);
call    0 returned 100%
      582:  153:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      582:  154:                                      std::move(patterns))))
call    0 returned 100%
    #####:  155:      signalPassFailure();
call    0 never executed
      582:  156:  }
        -:  157:};
        -:  158:
        -:  159:struct SparseTensorCodegenPass
        -:  160:    : public impl::SparseTensorCodegenBase<SparseTensorCodegenPass> {
        -:  161:
   116674:  162:  SparseTensorCodegenPass() = default;
call    0 returned 100%
    #####:  163:  SparseTensorCodegenPass(const SparseTensorCodegenPass &pass) = default;
call    0 never executed
        -:  164:
function _ZN12_GLOBAL__N_123SparseTensorCodegenPass14runOnOperationEv called 400 returned 100% blocks executed 96%
      400:  165:  void runOnOperation() override {
      400:  166:    auto *ctx = &getContext();
call    0 returned 100%
      400:  167:    RewritePatternSet patterns(ctx);
call    0 returned 100%
      800:  168:    SparseTensorTypeToBufferConverter converter;
call    0 returned 100%
call    1 returned 100%
      800:  169:    ConversionTarget target(*ctx);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  170:    // Most ops in the sparse dialect must go!
      400:  171:    target.addIllegalDialect<SparseTensorDialect>();
call    0 returned 100%
      400:  172:    target.addLegalOp<SortOp>();
call    0 returned 100%
      400:  173:    target.addLegalOp<PushBackOp>();
call    0 returned 100%
        -:  174:    // All dynamic rules below accept new function, call, return, and various
        -:  175:    // tensor and bufferization operations as legal output of the rewriting
        -:  176:    // provided that all sparse tensor types have been fully rewritten.
      400:  177:    target.addDynamicallyLegalOp<func::FuncOp>([&](func::FuncOp op) {
call    0 returned 100%
      934:  178:      return converter.isSignatureLegal(op.getFunctionType());
call    0 returned 100%
call    1 returned 100%
        -:  179:    });
      400:  180:    target.addDynamicallyLegalOp<func::CallOp>([&](func::CallOp op) {
call    0 returned 100%
        8:  181:      return converter.isSignatureLegal(op.getCalleeType());
call    0 returned 100%
call    1 returned 100%
        -:  182:    });
function _ZZN12_GLOBAL__N_123SparseTensorCodegenPass14runOnOperationEvENKUlN4mlir4func8ReturnOpEE1_clES3_.isra.0 called 800 returned 100% blocks executed 100%
     1200:  183:    target.addDynamicallyLegalOp<func::ReturnOp>([&](func::ReturnOp op) {
call    0 returned 100%
      800:  184:      return converter.isLegal(op.getOperandTypes());
call    0 returned 100%
call    1 returned 100%
        -:  185:    });
      400:  186:    target.addDynamicallyLegalOp<bufferization::AllocTensorOp>(
call    0 returned 100%
       48:  187:        [&](bufferization::AllocTensorOp op) {
       48:  188:          return converter.isLegal(op.getType());
call    0 returned 100%
call    1 returned 100%
        -:  189:        });
      400:  190:    target.addDynamicallyLegalOp<bufferization::DeallocTensorOp>(
call    0 returned 100%
function _ZZN12_GLOBAL__N_123SparseTensorCodegenPass14runOnOperationEvENKUlN4mlir13bufferization15DeallocTensorOpEE3_clES3_.isra.0 called 11092 returned 100% blocks executed 100%
    11092:  191:        [&](bufferization::DeallocTensorOp op) {
    11092:  192:          return converter.isLegal(op.getTensor().getType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  193:        });
        -:  194:    // The following operations and dialects may be introduced by the
        -:  195:    // codegen rules, and are therefore marked as legal.
      400:  196:    target.addLegalOp<linalg::FillOp>();
call    0 returned 100%
      400:  197:    target.addLegalDialect<arith::ArithDialect,
        -:  198:                           bufferization::BufferizationDialect,
      400:  199:                           memref::MemRefDialect, scf::SCFDialect>();
call    0 returned 100%
      400:  200:    target.addLegalOp<UnrealizedConversionCastOp>();
call    0 returned 100%
        -:  201:    // Populate with rules and apply rewriting rules.
      400:  202:    populateFunctionOpInterfaceTypeConversionPattern<func::FuncOp>(patterns,
call    0 returned 100%
        -:  203:                                                                   converter);
      400:  204:    scf::populateSCFStructuralTypeConversionsAndLegality(converter, patterns,
call    0 returned 100%
        -:  205:                                                         target);
      400:  206:    populateSparseTensorCodegenPatterns(converter, patterns);
call    0 returned 100%
      400:  207:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      400:  208:                                      std::move(patterns))))
call    0 returned 100%
    #####:  209:      signalPassFailure();
call    0 never executed
      400:  210:  }
        -:  211:};
        -:  212:
        -:  213:struct SparseBufferRewritePass
        -:  214:    : public impl::SparseBufferRewriteBase<SparseBufferRewritePass> {
        -:  215:
   117095:  216:  SparseBufferRewritePass() = default;
call    0 returned 100%
    #####:  217:  SparseBufferRewritePass(const SparseBufferRewritePass &pass) = default;
call    0 never executed
        -:  218:
function _ZN12_GLOBAL__N_123SparseBufferRewritePass14runOnOperationEv called 577 returned 100% blocks executed 100%
      577:  219:  void runOnOperation() override {
      577:  220:    auto *ctx = &getContext();
call    0 returned 100%
      577:  221:    RewritePatternSet patterns(ctx);
call    0 returned 100%
      577:  222:    populateSparseBufferRewriting(patterns);
call    0 returned 100%
      577:  223:    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      577:  224:  }
        -:  225:};
        -:  226:
        -:  227:} // namespace
        -:  228:
        -:  229://===----------------------------------------------------------------------===//
        -:  230:// Strategy flag methods.
        -:  231://===----------------------------------------------------------------------===//
        -:  232:
        -:  233:SparseToSparseConversionStrategy
function _ZN4mlir32sparseToSparseConversionStrategyEi called 389 returned 100% blocks executed 50%
      971:  234:mlir::sparseToSparseConversionStrategy(int32_t flag) {
      971:  235:  switch (flag) {
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        -:  236:  default:
        -:  237:    return SparseToSparseConversionStrategy::kAuto;
    #####:  238:  case 1:
    #####:  239:    return SparseToSparseConversionStrategy::kViaCOO;
    #####:  240:  case 2:
    #####:  241:    return SparseToSparseConversionStrategy::kDirect;
        -:  242:  }
        -:  243:}
        -:  244:
        -:  245://===----------------------------------------------------------------------===//
        -:  246:// Pass creation methods.
        -:  247://===----------------------------------------------------------------------===//
        -:  248:
function _ZN4mlir29createSparseTensorRewritePassEv called 116161 returned 100% blocks executed 100%
   116161:  249:std::unique_ptr<Pass> mlir::createSparseTensorRewritePass() {
   116161:  250:  return std::make_unique<SparseTensorRewritePass>();
call    0 returned 100%
        -:  251:}
        -:  252:
function _ZN4mlir29createSparseTensorRewritePassEbbb called 389 returned 100% blocks executed 100%
      389:  253:std::unique_ptr<Pass> mlir::createSparseTensorRewritePass(bool enableRT,
        -:  254:                                                          bool enableForeach,
        -:  255:                                                          bool enableConvert) {
      389:  256:  return std::make_unique<SparseTensorRewritePass>(enableRT, enableForeach,
call    0 returned 100%
      389:  257:                                                   enableConvert);
        -:  258:}
        -:  259:
function _ZN4mlir24createSparsificationPassEv called 116678 returned 100% blocks executed 100%
   116678:  260:std::unique_ptr<Pass> mlir::createSparsificationPass() {
   116678:  261:  return std::make_unique<SparsificationPass>();
call    0 returned 100%
        -:  262:}
        -:  263:
        -:  264:std::unique_ptr<Pass>
function _ZN4mlir24createSparsificationPassERKNS_21SparsificationOptionsE called 389 returned 100% blocks executed 100%
      389:  265:mlir::createSparsificationPass(const SparsificationOptions &options) {
      389:  266:  return std::make_unique<SparsificationPass>(options);
call    0 returned 100%
        -:  267:}
        -:  268:
function _ZN4mlir32createSparseTensorConversionPassEv called 116706 returned 100% blocks executed 100%
   116706:  269:std::unique_ptr<Pass> mlir::createSparseTensorConversionPass() {
   116706:  270:  return std::make_unique<SparseTensorConversionPass>();
call    0 returned 100%
        -:  271:}
        -:  272:
function _ZN4mlir32createSparseTensorConversionPassERKNS_29SparseTensorConversionOptionsE called 389 returned 100% blocks executed 100%
      389:  273:std::unique_ptr<Pass> mlir::createSparseTensorConversionPass(
        -:  274:    const SparseTensorConversionOptions &options) {
      389:  275:  return std::make_unique<SparseTensorConversionPass>(options);
call    0 returned 100%
        -:  276:}
        -:  277:
function _ZN4mlir29createSparseTensorCodegenPassEv called 116674 returned 100% blocks executed 100%
   116674:  278:std::unique_ptr<Pass> mlir::createSparseTensorCodegenPass() {
   116674:  279:  return std::make_unique<SparseTensorCodegenPass>();
call    0 returned 100%
        -:  280:}
        -:  281:
function _ZN4mlir29createSparseBufferRewritePassEv called 117095 returned 100% blocks executed 100%
   117095:  282:std::unique_ptr<Pass> mlir::createSparseBufferRewritePass() {
   117095:  283:  return std::make_unique<SparseBufferRewritePass>();
call    0 returned 100%
        -:  284:}
