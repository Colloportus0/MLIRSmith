        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Arith/Transforms/EmulateWideInt.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/EmulateWideInt.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Arith/Transforms/CMakeFiles/obj.MLIRArithTransforms.dir/EmulateWideInt.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- EmulateWideInt.cpp - Wide integer operation emulation ----*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   12:#include "mlir/Dialect/Arith/Transforms/WideIntEmulationConverter.h"
        -:   13:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   14:#include "mlir/Dialect/Func/Transforms/FuncConversions.h"
        -:   15:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   16:#include "mlir/Transforms/DialectConversion.h"
        -:   17:#include "llvm/Support/FormatVariadic.h"
        -:   18:#include "llvm/Support/MathExtras.h"
        -:   19:#include <cassert>
        -:   20:
        -:   21:namespace mlir::arith {
        -:   22:#define GEN_PASS_DEF_ARITHEMULATEWIDEINT
        -:   23:#include "mlir/Dialect/Arith/Transforms/Passes.h.inc"
        -:   24:} // namespace mlir::arith
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Common Helper Functions
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32:/// Returns N bottom and N top bits from `value`, where N = `newBitWidth`.
        -:   33:/// Treats `value` as a 2*N bits-wide integer.
        -:   34:/// The bottom bits are returned in the first pair element, while the top bits
        -:   35:/// in the second one.
function _ZL9getHalvesRKN4llvm5APIntEj called 4373 returned 100% blocks executed 60%
     4373:   36:static std::pair<APInt, APInt> getHalves(const APInt &value,
        -:   37:                                         unsigned newBitWidth) {
     4373:   38:  APInt low = value.extractBits(newBitWidth, 0);
call    0 returned 100%
     8746:   39:  APInt high = value.extractBits(newBitWidth, newBitWidth);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     4373:   40:  return {std::move(low), std::move(high)};
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   41:}
        -:   42:
        -:   43:/// Returns the type with the last (innermost) dimention reduced to x1.
        -:   44:/// Scalarizes 1D vector inputs to match how we extract/insert vector values,
        -:   45:/// e.g.:
        -:   46:///   - vector<3x2xi16> --> vector<3x1xi16>
        -:   47:///   - vector<2xi16>   --> i16
function _ZL18reduceInnermostDimN4mlir10VectorTypeE called 415 returned 100% blocks executed 33%
      415:   48:static Type reduceInnermostDim(VectorType type) {
      415:   49:  if (type.getShape().size() == 1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      415:   50:    return type.getElementType();
call    0 returned 100%
        -:   51:
    #####:   52:  auto newShape = to_vector(type.getShape());
call    0 never executed
call    1 never executed
    #####:   53:  newShape.back() = 1;
call    0 never executed
    #####:   54:  return VectorType::get(newShape, type.getElementType());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   55:}
        -:   56:
        -:   57:/// Returns a constant of integer of vector type filled with (repeated) `value`.
function _ZL27createScalarOrSplatConstantRN4mlir25ConversionPatternRewriterENS_8LocationENS_4TypeERKN4llvm5APIntE called 844 returned 100% blocks executed 100%
      844:   58:static Value createScalarOrSplatConstant(ConversionPatternRewriter &rewriter,
        -:   59:                                         Location loc, Type type,
        -:   60:                                         const APInt &value) {
      844:   61:  Attribute attr;
      844:   62:  if (auto intTy = type.dyn_cast<IntegerType>()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
      419:   63:    attr = rewriter.getIntegerAttr(type, value);
call    0 returned 100%
        -:   64:  } else {
      425:   65:    auto vecTy = type.cast<VectorType>();
call    0 returned 100%
      425:   66:    attr = SplatElementsAttr::get(vecTy, value);
call    0 returned 100%
call    1 returned 100%
        -:   67:  }
        -:   68:
      844:   69:  return rewriter.create<arith::ConstantOp>(loc, attr);
call    0 returned 100%
        -:   70:}
        -:   71:
        -:   72:/// Returns a constant of integer of vector type filled with (repeated) `value`.
function _ZL27createScalarOrSplatConstantRN4mlir25ConversionPatternRewriterENS_8LocationENS_4TypeEl called 781 returned 100% blocks executed 80%
      781:   73:static Value createScalarOrSplatConstant(ConversionPatternRewriter &rewriter,
        -:   74:                                         Location loc, Type type,
        -:   75:                                         int64_t value) {
      781:   76:  unsigned elementBitWidth = 0;
      781:   77:  if (auto intTy = type.dyn_cast<IntegerType>())
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
      356:   78:    elementBitWidth = intTy.getWidth();
call    0 returned 100%
        -:   79:  else
      850:   80:    elementBitWidth = type.cast<VectorType>().getElementTypeBitWidth();
call    0 returned 100%
call    1 returned 100%
        -:   81:
      781:   82:  return createScalarOrSplatConstant(rewriter, loc, type,
     1562:   83:                                     APInt(elementBitWidth, value));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   84:}
        -:   85:
        -:   86:/// Extracts the `input` vector slice with elements at the last dimension offset
        -:   87:/// by `lastOffset`. Returns a value of vector type with the last dimension
        -:   88:/// reduced to x1 or fully scalarized, e.g.:
        -:   89:///   - vector<3x2xi16> --> vector<3x1xi16>
        -:   90:///   - vector<2xi16>   --> i16
function _ZL19extractLastDimSliceRN4mlir25ConversionPatternRewriterENS_8LocationENS_5ValueEl called 885 returned 100% blocks executed 36%
      885:   91:static Value extractLastDimSlice(ConversionPatternRewriter &rewriter,
        -:   92:                                 Location loc, Value input,
        -:   93:                                 int64_t lastOffset) {
      885:   94:  ArrayRef<int64_t> shape = input.getType().cast<VectorType>().getShape();
call    0 returned 100%
call    1 returned 100%
     885*:   95:  assert(lastOffset < shape.back() && "Offset out of bounds");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   96:
        -:   97:  // Scalarize the result in case of 1D vectors.
      885:   98:  if (shape.size() == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      885:   99:    return rewriter.create<vector::ExtractOp>(loc, input, lastOffset);
call    0 returned 100%
        -:  100:
    #####:  101:  SmallVector<int64_t> offsets(shape.size(), 0);
call    0 never executed
    #####:  102:  offsets.back() = lastOffset;
call    0 never executed
    #####:  103:  auto sizes = llvm::to_vector(shape);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  104:  sizes.back() = 1;
call    0 never executed
    #####:  105:  SmallVector<int64_t> strides(shape.size(), 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  106:
    #####:  107:  return rewriter.create<vector::ExtractStridedSliceOp>(loc, input, offsets,
branch  0 never executed
branch  1 never executed
    #####:  108:                                                        sizes, strides);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  109:}
        -:  110:
        -:  111:/// Extracts two vector slices from the `input` whose type is `vector<...x2T>`,
        -:  112:/// with the first element at offset 0 and the second element at offset 1.
        -:  113:static std::pair<Value, Value>
function _ZL20extractLastDimHalvesRN4mlir25ConversionPatternRewriterENS_8LocationENS_5ValueE called 385 returned 100% blocks executed 100%
      385:  114:extractLastDimHalves(ConversionPatternRewriter &rewriter, Location loc,
        -:  115:                     Value input) {
      385:  116:  return {extractLastDimSlice(rewriter, loc, input, 0),
call    0 returned 100%
      385:  117:          extractLastDimSlice(rewriter, loc, input, 1)};
call    0 returned 100%
        -:  118:}
        -:  119:
        -:  120:// Performs a vector shape cast to drop the trailing x1 dimension. If the
        -:  121:// `input` is a scalar, this is a noop.
function _ZL17dropTrailingX1DimRN4mlir25ConversionPatternRewriterENS_8LocationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  122:static Value dropTrailingX1Dim(ConversionPatternRewriter &rewriter,
        -:  123:                               Location loc, Value input) {
    #####:  124:  auto vecTy = input.getType().dyn_cast<VectorType>();
call    0 never executed
    #####:  125:  if (!vecTy)
branch  0 never executed
branch  1 never executed
    #####:  126:    return input;
        -:  127:
        -:  128:  // Shape cast to drop the last x1 dimention.
    #####:  129:  ArrayRef<int64_t> shape = vecTy.getShape();
call    0 never executed
    #####:  130:  assert(shape.size() >= 2 && "Expected vector with at list two dims");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  131:  assert(shape.back() == 1 && "Expected the last vector dim to be x1");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  132:
    #####:  133:  auto newVecTy = VectorType::get(shape.drop_back(), vecTy.getElementType());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  134:  return rewriter.create<vector::ShapeCastOp>(loc, newVecTy, input);
call    0 never executed
        -:  135:}
        -:  136:
        -:  137:/// Performs a vector shape cast to append an x1 dimension. If the
        -:  138:/// `input` is a scalar, this is a noop.
function _ZL11appendX1DimRN4mlir25ConversionPatternRewriterENS_8LocationENS_5ValueE called 175 returned 100% blocks executed 31%
      175:  139:static Value appendX1Dim(ConversionPatternRewriter &rewriter, Location loc,
        -:  140:                         Value input) {
      175:  141:  auto vecTy = input.getType().dyn_cast<VectorType>();
call    0 returned 100%
      175:  142:  if (!vecTy)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      175:  143:    return input;
        -:  144:
        -:  145:  // Add a trailing x1 dim.
    #####:  146:  auto newShape = llvm::to_vector(vecTy.getShape());
call    0 never executed
call    1 never executed
    #####:  147:  newShape.push_back(1);
call    0 never executed
    #####:  148:  auto newTy = VectorType::get(newShape, vecTy.getElementType());
call    0 never executed
call    1 never executed
    #####:  149:  return rewriter.create<vector::ShapeCastOp>(loc, newTy, input);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  150:}
        -:  151:
        -:  152:/// Inserts the `source` vector slice into the `dest` vector at offset
        -:  153:/// `lastOffset` in the last dimension. `source` can be a scalar when `dest` is
        -:  154:/// a 1D vector.
function _ZL18insertLastDimSliceRN4mlir25ConversionPatternRewriterENS_8LocationENS_5ValueES3_l called 675 returned 100% blocks executed 47%
      675:  155:static Value insertLastDimSlice(ConversionPatternRewriter &rewriter,
        -:  156:                                Location loc, Value source, Value dest,
        -:  157:                                int64_t lastOffset) {
      675:  158:  ArrayRef<int64_t> shape = dest.getType().cast<VectorType>().getShape();
call    0 returned 100%
call    1 returned 100%
     675*:  159:  assert(lastOffset < shape.back() && "Offset out of bounds");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  160:
        -:  161:  // Handle scalar source.
      675:  162:  if (source.getType().isa<IntegerType>())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      675:  163:    return rewriter.create<vector::InsertOp>(loc, source, dest, lastOffset);
call    0 returned 100%
        -:  164:
    #####:  165:  SmallVector<int64_t> offsets(shape.size(), 0);
call    0 never executed
    #####:  166:  offsets.back() = lastOffset;
call    0 never executed
    #####:  167:  SmallVector<int64_t> strides(shape.size(), 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:  return rewriter.create<vector::InsertStridedSliceOp>(loc, source, dest,
branch  0 never executed
branch  1 never executed
    #####:  169:                                                       offsets, strides);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  170:}
        -:  171:
        -:  172:/// Constructs a new vector of type `resultType` by creating a series of
        -:  173:/// insertions of `resultComponents`, each at the next offset of the last vector
        -:  174:/// dimension.
        -:  175:/// When all `resultComponents` are scalars, the result type is `vector<NxT>`;
        -:  176:/// when `resultComponents` are `vector<...x1xT>`s, the result type is
        -:  177:/// `vector<...xNxT>`, where `N` is the number of `resultComponenets`.
function _ZL21constructResultVectorRN4mlir25ConversionPatternRewriterENS_8LocationENS_10VectorTypeENS_10ValueRangeE called 250 returned 100% blocks executed 86%
      250:  178:static Value constructResultVector(ConversionPatternRewriter &rewriter,
        -:  179:                                   Location loc, VectorType resultType,
        -:  180:                                   ValueRange resultComponents) {
      250:  181:  llvm::ArrayRef<int64_t> resultShape = resultType.getShape();
call    0 returned 100%
      250:  182:  (void)resultShape;
     250*:  183:  assert(!resultShape.empty() && "Result expected to have dimentions");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     250*:  184:  assert(resultShape.back() == static_cast<int64_t>(resultComponents.size()) &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  185:         "Wrong number of result components");
        -:  186:
      250:  187:  Value resultVec = createScalarOrSplatConstant(rewriter, loc, resultType, 0);
call    0 returned 100%
     1250:  188:  for (auto [i, component] : llvm::enumerate(resultComponents))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      500:  189:    resultVec = insertLastDimSlice(rewriter, loc, component, resultVec, i);
call    0 returned 100%
        -:  190:
      250:  191:  return resultVec;
        -:  192:}
        -:  193:
        -:  194:namespace {
        -:  195://===----------------------------------------------------------------------===//
        -:  196:// ConvertConstant
        -:  197://===----------------------------------------------------------------------===//
        -:  198:
        -:  199:struct ConvertConstant final : OpConversionPattern<arith::ConstantOp> {
        -:  200:  using OpConversionPattern::OpConversionPattern;
        -:  201:
        -:  202:  LogicalResult
function _ZNK12_GLOBAL__N_115ConvertConstant15matchAndRewriteEN4mlir5arith10ConstantOpENS2_17ConstantOpAdaptorERNS1_25ConversionPatternRewriterE called 4373 returned 100% blocks executed 56%
     4373:  203:  matchAndRewrite(arith::ConstantOp op, OpAdaptor,
        -:  204:                  ConversionPatternRewriter &rewriter) const override {
     4373:  205:    Type oldType = op.getType();
call    0 returned 100%
     4373:  206:    auto newType = getTypeConverter()->convertType(oldType).cast<VectorType>();
call    0 returned 100%
call    1 returned 100%
     4373:  207:    unsigned newBitWidth = newType.getElementTypeBitWidth();
call    0 returned 100%
     4373:  208:    Attribute oldValue = op.getValueAttr();
call    0 returned 100%
        -:  209:
     4373:  210:    if (auto intAttr = oldValue.dyn_cast<IntegerAttr>()) {
call    0 returned 100%
branch  1 taken 82% (fallthrough)
branch  2 taken 18%
     7160:  211:      auto [low, high] = getHalves(intAttr.getValue(), newBitWidth);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
    17900:  212:      auto newAttr = DenseElementsAttr::get(newType, {low, high});
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
     3580:  213:      rewriter.replaceOpWithNewOp<arith::ConstantOp>(op, newAttr);
call    0 returned 100%
     3580:  214:      return success();
call    0 returned 100%
        -:  215:    }
        -:  216:
      793:  217:    if (auto splatAttr = oldValue.dyn_cast<SplatElementsAttr>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      793:  218:      auto [low, high] =
call    0 returned 100%
     1586:  219:          getHalves(splatAttr.getSplatValue<APInt>(), newBitWidth);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
      793:  220:      int64_t numSplatElems = splatAttr.getNumElements();
call    0 returned 100%
     1586:  221:      SmallVector<APInt> values;
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
      793:  222:      values.reserve(numSplatElems * 2);
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
   200888:  223:      for (int64_t i = 0; i < numSplatElems; ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   200095:  224:        values.push_back(low);
call    0 returned 100%
   200095:  225:        values.push_back(high);
call    0 returned 100%
        -:  226:      }
        -:  227:
      793:  228:      auto attr = DenseElementsAttr::get(newType, values);
call    0 returned 100%
call    1 returned 100%
      793:  229:      rewriter.replaceOpWithNewOp<arith::ConstantOp>(op, attr);
call    0 returned 100%
      793:  230:      return success();
call    0 returned 100%
        -:  231:    }
        -:  232:
    #####:  233:    if (auto elemsAttr = oldValue.dyn_cast<DenseElementsAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:      int64_t numElems = elemsAttr.getNumElements();
call    0 never executed
    #####:  235:      SmallVector<APInt> values;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  236:      values.reserve(numElems * 2);
branch  0 never executed
branch  1 never executed
    #####:  237:      for (const APInt &origVal : elemsAttr.getValues<APInt>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  238:        auto [low, high] = getHalves(origVal, newBitWidth);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  239:        values.push_back(std::move(low));
call    0 never executed
    #####:  240:        values.push_back(std::move(high));
call    0 never executed
        -:  241:      }
        -:  242:
    #####:  243:      auto attr = DenseElementsAttr::get(newType, values);
call    0 never executed
call    1 never executed
    #####:  244:      rewriter.replaceOpWithNewOp<arith::ConstantOp>(op, attr);
call    0 never executed
    #####:  245:      return success();
call    0 never executed
        -:  246:    }
        -:  247:
    #####:  248:    return rewriter.notifyMatchFailure(op.getLoc(),
    #####:  249:                                       "unhandled constant attribute");
call    0 never executed
        -:  250:  }
        -:  251:};
        -:  252:
        -:  253://===----------------------------------------------------------------------===//
        -:  254:// ConvertAddI
        -:  255://===----------------------------------------------------------------------===//
        -:  256:
        -:  257:struct ConvertAddI final : OpConversionPattern<arith::AddIOp> {
        -:  258:  using OpConversionPattern::OpConversionPattern;
        -:  259:
        -:  260:  LogicalResult
function _ZNK12_GLOBAL__N_111ConvertAddI15matchAndRewriteEN4mlir5arith6AddIOpENS2_13AddIOpAdaptorERNS1_25ConversionPatternRewriterE called 62 returned 100% blocks executed 88%
       62:  261:  matchAndRewrite(arith::AddIOp op, OpAdaptor adaptor,
        -:  262:                  ConversionPatternRewriter &rewriter) const override {
       62:  263:    Location loc = op->getLoc();
call    0 returned 100%
       62:  264:    auto newTy = getTypeConverter()
       62:  265:                     ->convertType(op.getType())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       62:  266:                     .dyn_cast_or_null<VectorType>();
       62:  267:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  268:      return rewriter.notifyMatchFailure(
    #####:  269:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  270:
       62:  271:    Type newElemTy = reduceInnermostDim(newTy);
call    0 returned 100%
        -:  272:
       62:  273:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
       62:  274:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       62:  275:    auto [rhsElem0, rhsElem1] =
call    0 returned 100%
       62:  276:        extractLastDimHalves(rewriter, loc, adaptor.getRhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  277:
       62:  278:    auto lowSum = rewriter.create<arith::AddUICarryOp>(loc, lhsElem0, rhsElem0);
call    0 returned 100%
       62:  279:    Value carryVal =
       62:  280:        rewriter.create<arith::ExtUIOp>(loc, newElemTy, lowSum.getCarry());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  281:
       62:  282:    Value high0 = rewriter.create<arith::AddIOp>(loc, carryVal, lhsElem1);
call    0 returned 100%
call    1 returned 100%
       62:  283:    Value high = rewriter.create<arith::AddIOp>(loc, high0, rhsElem1);
call    0 returned 100%
call    1 returned 100%
        -:  284:
       62:  285:    Value resultVec =
       62:  286:        constructResultVector(rewriter, loc, newTy, {lowSum.getSum(), high});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       62:  287:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
call    1 returned 100%
       62:  288:    return success();
        -:  289:  }
        -:  290:};
        -:  291:
        -:  292://===----------------------------------------------------------------------===//
        -:  293:// ConvertBitwiseBinary
        -:  294://===----------------------------------------------------------------------===//
        -:  295:
        -:  296:/// Conversion pattern template for bitwise binary ops, e.g., `arith.andi`.
        -:  297:template <typename BinaryOp>
        -:  298:struct ConvertBitwiseBinary final : OpConversionPattern<BinaryOp> {
        -:  299:  using OpConversionPattern<BinaryOp>::OpConversionPattern;
        -:  300:  using OpAdaptor = typename OpConversionPattern<BinaryOp>::OpAdaptor;
        -:  301:
        -:  302:  LogicalResult
       10:  303:  matchAndRewrite(BinaryOp op, OpAdaptor adaptor,
        -:  304:                  ConversionPatternRewriter &rewriter) const override {
       10:  305:    Location loc = op->getLoc();
       10:  306:    auto newTy = this->getTypeConverter()
        -:  307:                     ->convertType(op.getType())
       10:  308:                     .template dyn_cast_or_null<VectorType>();
       10:  309:    if (!newTy)
        -:  310:      return rewriter.notifyMatchFailure(
    #####:  311:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
        -:  312:
       10:  313:    auto [lhsElem0, lhsElem1] =
       10:  314:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
       10:  315:    auto [rhsElem0, rhsElem1] =
       10:  316:        extractLastDimHalves(rewriter, loc, adaptor.getRhs());
        -:  317:
       10:  318:    Value resElem0 = rewriter.create<BinaryOp>(loc, lhsElem0, rhsElem0);
       10:  319:    Value resElem1 = rewriter.create<BinaryOp>(loc, lhsElem1, rhsElem1);
        -:  320:    Value resultVec =
       10:  321:        constructResultVector(rewriter, loc, newTy, {resElem0, resElem1});
       10:  322:    rewriter.replaceOp(op, resultVec);
       10:  323:    return success();
        -:  324:  }
------------------
_ZNK12_GLOBAL__N_120ConvertBitwiseBinaryIN4mlir5arith6AndIOpEE15matchAndRewriteES3_NS2_13AndIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_120ConvertBitwiseBinaryIN4mlir5arith6AndIOpEE15matchAndRewriteES3_NS2_13AndIOpAdaptorERNS1_25ConversionPatternRewriterE called 2 returned 100% blocks executed 85%
        2:  303:  matchAndRewrite(BinaryOp op, OpAdaptor adaptor,
        -:  304:                  ConversionPatternRewriter &rewriter) const override {
        2:  305:    Location loc = op->getLoc();
call    0 returned 100%
        2:  306:    auto newTy = this->getTypeConverter()
        -:  307:                     ->convertType(op.getType())
        2:  308:                     .template dyn_cast_or_null<VectorType>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  309:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  310:      return rewriter.notifyMatchFailure(
    #####:  311:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  312:
        2:  313:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
        2:  314:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:  315:    auto [rhsElem0, rhsElem1] =
call    0 returned 100%
        2:  316:        extractLastDimHalves(rewriter, loc, adaptor.getRhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  317:
        2:  318:    Value resElem0 = rewriter.create<BinaryOp>(loc, lhsElem0, rhsElem0);
call    0 returned 100%
call    1 returned 100%
        2:  319:    Value resElem1 = rewriter.create<BinaryOp>(loc, lhsElem1, rhsElem1);
call    0 returned 100%
call    1 returned 100%
        -:  320:    Value resultVec =
        2:  321:        constructResultVector(rewriter, loc, newTy, {resElem0, resElem1});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:  322:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
        2:  323:    return success();
        -:  324:  }
------------------
_ZNK12_GLOBAL__N_120ConvertBitwiseBinaryIN4mlir5arith5OrIOpEE15matchAndRewriteES3_NS2_12OrIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_120ConvertBitwiseBinaryIN4mlir5arith5OrIOpEE15matchAndRewriteES3_NS2_12OrIOpAdaptorERNS1_25ConversionPatternRewriterE called 2 returned 100% blocks executed 85%
        2:  303:  matchAndRewrite(BinaryOp op, OpAdaptor adaptor,
        -:  304:                  ConversionPatternRewriter &rewriter) const override {
        2:  305:    Location loc = op->getLoc();
call    0 returned 100%
        2:  306:    auto newTy = this->getTypeConverter()
        -:  307:                     ->convertType(op.getType())
        2:  308:                     .template dyn_cast_or_null<VectorType>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  309:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  310:      return rewriter.notifyMatchFailure(
    #####:  311:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  312:
        2:  313:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
        2:  314:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:  315:    auto [rhsElem0, rhsElem1] =
call    0 returned 100%
        2:  316:        extractLastDimHalves(rewriter, loc, adaptor.getRhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  317:
        2:  318:    Value resElem0 = rewriter.create<BinaryOp>(loc, lhsElem0, rhsElem0);
call    0 returned 100%
call    1 returned 100%
        2:  319:    Value resElem1 = rewriter.create<BinaryOp>(loc, lhsElem1, rhsElem1);
call    0 returned 100%
call    1 returned 100%
        -:  320:    Value resultVec =
        2:  321:        constructResultVector(rewriter, loc, newTy, {resElem0, resElem1});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:  322:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
        2:  323:    return success();
        -:  324:  }
------------------
_ZNK12_GLOBAL__N_120ConvertBitwiseBinaryIN4mlir5arith6XOrIOpEE15matchAndRewriteES3_NS2_13XOrIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_120ConvertBitwiseBinaryIN4mlir5arith6XOrIOpEE15matchAndRewriteES3_NS2_13XOrIOpAdaptorERNS1_25ConversionPatternRewriterE called 6 returned 100% blocks executed 85%
        6:  303:  matchAndRewrite(BinaryOp op, OpAdaptor adaptor,
        -:  304:                  ConversionPatternRewriter &rewriter) const override {
        6:  305:    Location loc = op->getLoc();
call    0 returned 100%
        6:  306:    auto newTy = this->getTypeConverter()
        -:  307:                     ->convertType(op.getType())
        6:  308:                     .template dyn_cast_or_null<VectorType>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6:  309:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  310:      return rewriter.notifyMatchFailure(
    #####:  311:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  312:
        6:  313:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
        6:  314:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        6:  315:    auto [rhsElem0, rhsElem1] =
call    0 returned 100%
        6:  316:        extractLastDimHalves(rewriter, loc, adaptor.getRhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  317:
        6:  318:    Value resElem0 = rewriter.create<BinaryOp>(loc, lhsElem0, rhsElem0);
call    0 returned 100%
call    1 returned 100%
        6:  319:    Value resElem1 = rewriter.create<BinaryOp>(loc, lhsElem1, rhsElem1);
call    0 returned 100%
call    1 returned 100%
        -:  320:    Value resultVec =
        6:  321:        constructResultVector(rewriter, loc, newTy, {resElem0, resElem1});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        6:  322:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
        6:  323:    return success();
        -:  324:  }
------------------
        -:  325:};
        -:  326:
        -:  327://===----------------------------------------------------------------------===//
        -:  328:// ConvertMulI
        -:  329://===----------------------------------------------------------------------===//
        -:  330:
        -:  331:struct ConvertMulI final : OpConversionPattern<arith::MulIOp> {
        -:  332:  using OpConversionPattern::OpConversionPattern;
        -:  333:
        -:  334:  LogicalResult
function _ZNK12_GLOBAL__N_111ConvertMulI15matchAndRewriteEN4mlir5arith6MulIOpENS2_13MulIOpAdaptorERNS1_25ConversionPatternRewriterE called 63 returned 100% blocks executed 84%
       63:  335:  matchAndRewrite(arith::MulIOp op, OpAdaptor adaptor,
        -:  336:                  ConversionPatternRewriter &rewriter) const override {
       63:  337:    Location loc = op->getLoc();
call    0 returned 100%
       63:  338:    auto newTy = getTypeConverter()
       63:  339:                     ->convertType(op.getType())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       63:  340:                     .dyn_cast_or_null<VectorType>();
       63:  341:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  342:      return rewriter.notifyMatchFailure(
    #####:  343:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  344:
       63:  345:    Type newElemTy = reduceInnermostDim(newTy);
call    0 returned 100%
       63:  346:    unsigned newBitWidth = newTy.getElementTypeBitWidth();
call    0 returned 100%
       63:  347:    unsigned digitBitWidth = newBitWidth / 2;
        -:  348:
       63:  349:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
       63:  350:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       63:  351:    auto [rhsElem0, rhsElem1] =
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       63:  352:        extractLastDimHalves(rewriter, loc, adaptor.getRhs());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  353:
        -:  354:    // Emulate multiplication by splitting each input element of type i2N into 4
        -:  355:    // digits of type iN and bit width i(N/2). This is so that the intermediate
        -:  356:    // multiplications and additions do not overflow. We extract these i(N/2)
        -:  357:    // digits from iN vector elements by masking (low digit) and shifting right
        -:  358:    // (high digit).
        -:  359:    //
        -:  360:    // The multiplication algorithm used is the standard (long) multiplication.
        -:  361:    // Multiplying two i2N integers produces (at most) a i4N result, but because
        -:  362:    // the calculation of top i2N is not necessary, we omit it.
        -:  363:    // In total, this implementations performs 10 intermediate multiplications
        -:  364:    // and 16 additions. The number of multiplications could be decreased by
        -:  365:    // switching to a more efficient algorithm like Karatsuba. This would,
        -:  366:    // however, require being able to perform (intermediate) wide additions and
        -:  367:    // subtractions, so it is not clear that such implementation would be more
        -:  368:    // efficient.
        -:  369:
       63:  370:    APInt lowMaskVal(newBitWidth, 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       63:  371:    lowMaskVal = lowMaskVal.shl(digitBitWidth) - 1;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       63:  372:    Value lowMask =
       63:  373:        createScalarOrSplatConstant(rewriter, loc, newElemTy, lowMaskVal);
call    0 returned 100%
      945:  374:    auto getLowDigit = [lowMask, newElemTy, loc, &rewriter](Value v) {
      882:  375:      return rewriter.create<arith::AndIOp>(loc, newElemTy, v, lowMask);
       63:  376:    };
        -:  377:
       63:  378:    Value shiftVal =
       63:  379:        createScalarOrSplatConstant(rewriter, loc, newElemTy, digitBitWidth);
call    0 returned 100%
      693:  380:    auto getHighDigit = [shiftVal, loc, &rewriter](Value v) {
      630:  381:      return rewriter.create<arith::ShRUIOp>(loc, v, shiftVal);
       63:  382:    };
        -:  383:
       63:  384:    Value zeroDigit = createScalarOrSplatConstant(rewriter, loc, newElemTy, 0);
call    0 returned 100%
       63:  385:    std::array<Value, 4> resultDigits = {zeroDigit, zeroDigit, zeroDigit,
       63:  386:                                         zeroDigit};
       63:  387:    std::array<Value, 4> lhsDigits = {
call    0 returned 100%
       63:  388:        getLowDigit(lhsElem0), getHighDigit(lhsElem0), getLowDigit(lhsElem1),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       63:  389:        getHighDigit(lhsElem1)};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       63:  390:    std::array<Value, 4> rhsDigits = {
call    0 returned 100%
       63:  391:        getLowDigit(rhsElem0), getHighDigit(rhsElem0), getLowDigit(rhsElem1),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       63:  392:        getHighDigit(rhsElem1)};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  393:
      315:  394:    for (unsigned i = 0, e = lhsDigits.size(); i != e; ++i) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      882:  395:      for (unsigned j = 0; i + j != e; ++j) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
      630:  396:        Value mul =
      630:  397:            rewriter.create<arith::MulIOp>(loc, lhsDigits[i], rhsDigits[j]);
call    0 returned 100%
call    1 returned 100%
      630:  398:        Value current =
      630:  399:            rewriter.createOrFold<arith::AddIOp>(loc, resultDigits[i + j], mul);
call    0 returned 100%
      630:  400:        resultDigits[i + j] = getLowDigit(current);
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
      630:  401:        if (i + j + 1 != e) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
      378:  402:          Value carry = rewriter.createOrFold<arith::AddIOp>(
      378:  403:              loc, resultDigits[i + j + 1], getHighDigit(current));
call    0 returned 100%
call    1 returned 100%
      378:  404:          resultDigits[i + j + 1] = carry;
        -:  405:        }
        -:  406:      }
        -:  407:    }
        -:  408:
function _ZZNK12_GLOBAL__N_111ConvertMulI15matchAndRewriteEN4mlir5arith6MulIOpENS2_13MulIOpAdaptorERNS1_25ConversionPatternRewriterEENKUlNS1_5ValueES7_E1_clES7_S7_ called 126 returned 100% blocks executed 100%
      315:  409:    auto combineDigits = [shiftVal, loc, &rewriter](Value low, Value high) {
      126:  410:      Value highBits = rewriter.create<arith::ShLIOp>(loc, high, shiftVal);
call    0 returned 100%
call    1 returned 100%
      126:  411:      return rewriter.create<arith::OrIOp>(loc, low, highBits);
call    0 returned 100%
       63:  412:    };
       63:  413:    Value resultElem0 = combineDigits(resultDigits[0], resultDigits[1]);
call    0 returned 100%
call    1 returned 100%
       63:  414:    Value resultElem1 = combineDigits(resultDigits[2], resultDigits[3]);
call    0 returned 100%
call    1 returned 100%
       63:  415:    Value resultVec =
       63:  416:        constructResultVector(rewriter, loc, newTy, {resultElem0, resultElem1});
call    0 returned 100%
call    1 returned 100%
       63:  417:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
call    1 returned 100%
       63:  418:    return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  419:  }
        -:  420:};
        -:  421:
        -:  422://===----------------------------------------------------------------------===//
        -:  423:// ConvertExtSI
        -:  424://===----------------------------------------------------------------------===//
        -:  425:
        -:  426:struct ConvertExtSI final : OpConversionPattern<arith::ExtSIOp> {
        -:  427:  using OpConversionPattern::OpConversionPattern;
        -:  428:
        -:  429:  LogicalResult
function _ZNK12_GLOBAL__N_112ConvertExtSI15matchAndRewriteEN4mlir5arith7ExtSIOpENS2_14ExtSIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  430:  matchAndRewrite(arith::ExtSIOp op, OpAdaptor adaptor,
        -:  431:                  ConversionPatternRewriter &rewriter) const override {
    #####:  432:    Location loc = op->getLoc();
call    0 never executed
    #####:  433:    auto newTy = getTypeConverter()
    #####:  434:                     ->convertType(op.getType())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  435:                     .dyn_cast_or_null<VectorType>();
    #####:  436:    if (!newTy)
branch  0 never executed
branch  1 never executed
    #####:  437:      return rewriter.notifyMatchFailure(
    #####:  438:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  439:
    #####:  440:    Type newResultComponentTy = reduceInnermostDim(newTy);
call    0 never executed
        -:  441:
        -:  442:    // Sign-extend the input value to determine the low half of the result.
        -:  443:    // Then, check if the low half is negative, and sign-extend the comparison
        -:  444:    // result to get the high half.
    #####:  445:    Value newOperand = appendX1Dim(rewriter, loc, adaptor.getIn());
call    0 never executed
call    1 never executed
    #####:  446:    Value extended = rewriter.createOrFold<arith::ExtSIOp>(
    #####:  447:        loc, newResultComponentTy, newOperand);
call    0 never executed
    #####:  448:    Value operandZeroCst =
    #####:  449:        createScalarOrSplatConstant(rewriter, loc, newResultComponentTy, 0);
call    0 never executed
    #####:  450:    Value signBit = rewriter.create<arith::CmpIOp>(
    #####:  451:        loc, arith::CmpIPredicate::slt, extended, operandZeroCst);
call    0 never executed
call    1 never executed
    #####:  452:    Value signValue =
    #####:  453:        rewriter.create<arith::ExtSIOp>(loc, newResultComponentTy, signBit);
call    0 never executed
call    1 never executed
        -:  454:
    #####:  455:    Value resultVec =
    #####:  456:        constructResultVector(rewriter, loc, newTy, {extended, signValue});
call    0 never executed
call    1 never executed
    #####:  457:    rewriter.replaceOp(op, resultVec);
call    0 never executed
call    1 never executed
    #####:  458:    return success();
        -:  459:  }
        -:  460:};
        -:  461:
        -:  462://===----------------------------------------------------------------------===//
        -:  463:// ConvertExtUI
        -:  464://===----------------------------------------------------------------------===//
        -:  465:
        -:  466:struct ConvertExtUI final : OpConversionPattern<arith::ExtUIOp> {
        -:  467:  using OpConversionPattern::OpConversionPattern;
        -:  468:
        -:  469:  LogicalResult
function _ZNK12_GLOBAL__N_112ConvertExtUI15matchAndRewriteEN4mlir5arith7ExtUIOpENS2_14ExtUIOpAdaptorERNS1_25ConversionPatternRewriterE called 175 returned 100% blocks executed 83%
      175:  470:  matchAndRewrite(arith::ExtUIOp op, OpAdaptor adaptor,
        -:  471:                  ConversionPatternRewriter &rewriter) const override {
      175:  472:    Location loc = op->getLoc();
call    0 returned 100%
      175:  473:    auto newTy = getTypeConverter()
      175:  474:                     ->convertType(op.getType())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      175:  475:                     .dyn_cast_or_null<VectorType>();
      175:  476:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  477:      return rewriter.notifyMatchFailure(
    #####:  478:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  479:
      175:  480:    Type newResultComponentTy = reduceInnermostDim(newTy);
call    0 returned 100%
        -:  481:
        -:  482:    // Zero-extend the input value to determine the low half of the result.
        -:  483:    // The high half is always zero.
      175:  484:    Value newOperand = appendX1Dim(rewriter, loc, adaptor.getIn());
call    0 returned 100%
call    1 returned 100%
      175:  485:    Value extended = rewriter.createOrFold<arith::ExtUIOp>(
      175:  486:        loc, newResultComponentTy, newOperand);
call    0 returned 100%
      175:  487:    Value zeroCst = createScalarOrSplatConstant(rewriter, loc, newTy, 0);
call    0 returned 100%
      175:  488:    Value newRes = insertLastDimSlice(rewriter, loc, extended, zeroCst, 0);
call    0 returned 100%
      175:  489:    rewriter.replaceOp(op, newRes);
call    0 returned 100%
call    1 returned 100%
      175:  490:    return success();
        -:  491:  }
        -:  492:};
        -:  493:
        -:  494://===----------------------------------------------------------------------===//
        -:  495:// ConvertShLI
        -:  496://===----------------------------------------------------------------------===//
        -:  497:
        -:  498:struct ConvertShLI final : OpConversionPattern<arith::ShLIOp> {
        -:  499:  using OpConversionPattern::OpConversionPattern;
        -:  500:
        -:  501:  LogicalResult
function _ZNK12_GLOBAL__N_111ConvertShLI15matchAndRewriteEN4mlir5arith6ShLIOpENS2_13ShLIOpAdaptorERNS1_25ConversionPatternRewriterE called 43 returned 100% blocks executed 91%
       43:  502:  matchAndRewrite(arith::ShLIOp op, OpAdaptor adaptor,
        -:  503:                  ConversionPatternRewriter &rewriter) const override {
       43:  504:    Location loc = op->getLoc();
call    0 returned 100%
        -:  505:
       43:  506:    Type oldTy = op.getType();
call    0 returned 100%
       43:  507:    auto newTy =
       43:  508:        getTypeConverter()->convertType(oldTy).dyn_cast_or_null<VectorType>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       43:  509:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  510:      return rewriter.notifyMatchFailure(
    #####:  511:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  512:
       43:  513:    Type newOperandTy = reduceInnermostDim(newTy);
call    0 returned 100%
        -:  514:    // `oldBitWidth` == `2 * newBitWidth`
       43:  515:    unsigned newBitWidth = newTy.getElementTypeBitWidth();
call    0 returned 100%
        -:  516:
       43:  517:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
       43:  518:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       43:  519:    Value rhsElem0 = extractLastDimSlice(rewriter, loc, adaptor.getRhs(), 0);
call    0 returned 100%
call    1 returned 100%
        -:  520:
        -:  521:    // Assume that the shift amount is < 2 * newBitWidth. Calculate the low and
        -:  522:    // high halves of the results separately:
        -:  523:    //   1. low := LHS.low shli RHS
        -:  524:    //
        -:  525:    //   2. high := a or b or c, where:
        -:  526:    //     a) Bits from LHS.high, shifted by the RHS.
        -:  527:    //     b) Bits from LHS.low, shifted right. These come into play when
        -:  528:    //        RHS < newBitWidth, e.g.:
        -:  529:    //         [0000][llll] shli 3 --> [0lll][l000]
        -:  530:    //                                    ^
        -:  531:    //                                    |
        -:  532:    //                           [llll] shrui (4 - 3)
        -:  533:    //     c) Bits from LHS.low, shifted left. These matter when
        -:  534:    //        RHS > newBitWidth, e.g.:
        -:  535:    //         [0000][llll] shli 7 --> [l000][0000]
        -:  536:    //                                   ^
        -:  537:    //                                   |
        -:  538:    //                          [llll] shli (7 - 4)
        -:  539:    //
        -:  540:    // Because shifts by values >= newBitWidth are undefined, we ignore the high
        -:  541:    // half of RHS, and introduce 'bounds checks' to account for
        -:  542:    // RHS.low > newBitWidth.
        -:  543:    //
        -:  544:    // TODO: Explore possible optimizations.
       43:  545:    Value zeroCst = createScalarOrSplatConstant(rewriter, loc, newOperandTy, 0);
call    0 returned 100%
       43:  546:    Value elemBitWidth =
       43:  547:        createScalarOrSplatConstant(rewriter, loc, newOperandTy, newBitWidth);
call    0 returned 100%
        -:  548:
       86:  549:    Value illegalElemShift = rewriter.create<arith::CmpIOp>(
       43:  550:        loc, arith::CmpIPredicate::uge, rhsElem0, elemBitWidth);
call    0 returned 100%
call    1 returned 100%
        -:  551:
       43:  552:    Value shiftedElem0 =
       43:  553:        rewriter.create<arith::ShLIOp>(loc, lhsElem0, rhsElem0);
call    0 returned 100%
call    1 returned 100%
       86:  554:    Value resElem0 = rewriter.create<arith::SelectOp>(loc, illegalElemShift,
       43:  555:                                                      zeroCst, shiftedElem0);
call    0 returned 100%
call    1 returned 100%
        -:  556:
       86:  557:    Value cappedShiftAmount = rewriter.create<arith::SelectOp>(
       43:  558:        loc, illegalElemShift, elemBitWidth, rhsElem0);
call    0 returned 100%
call    1 returned 100%
       43:  559:    Value rightShiftAmount =
       43:  560:        rewriter.create<arith::SubIOp>(loc, elemBitWidth, cappedShiftAmount);
call    0 returned 100%
call    1 returned 100%
       43:  561:    Value shiftedRight =
       43:  562:        rewriter.create<arith::ShRUIOp>(loc, lhsElem0, rightShiftAmount);
call    0 returned 100%
call    1 returned 100%
       43:  563:    Value overshotShiftAmount =
       43:  564:        rewriter.create<arith::SubIOp>(loc, rhsElem0, elemBitWidth);
call    0 returned 100%
call    1 returned 100%
       43:  565:    Value shiftedLeft =
       43:  566:        rewriter.create<arith::ShLIOp>(loc, lhsElem0, overshotShiftAmount);
call    0 returned 100%
call    1 returned 100%
        -:  567:
       43:  568:    Value shiftedElem1 =
       43:  569:        rewriter.create<arith::ShLIOp>(loc, lhsElem1, rhsElem0);
call    0 returned 100%
call    1 returned 100%
       86:  570:    Value resElem1High = rewriter.create<arith::SelectOp>(
       43:  571:        loc, illegalElemShift, zeroCst, shiftedElem1);
call    0 returned 100%
call    1 returned 100%
       86:  572:    Value resElem1Low = rewriter.create<arith::SelectOp>(
       43:  573:        loc, illegalElemShift, shiftedLeft, shiftedRight);
call    0 returned 100%
call    1 returned 100%
       43:  574:    Value resElem1 =
       43:  575:        rewriter.create<arith::OrIOp>(loc, resElem1Low, resElem1High);
call    0 returned 100%
call    1 returned 100%
        -:  576:
       43:  577:    Value resultVec =
       43:  578:        constructResultVector(rewriter, loc, newTy, {resElem0, resElem1});
call    0 returned 100%
call    1 returned 100%
       43:  579:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
call    1 returned 100%
       43:  580:    return success();
        -:  581:  }
        -:  582:};
        -:  583:
        -:  584://===----------------------------------------------------------------------===//
        -:  585:// ConvertShRUI
        -:  586://===----------------------------------------------------------------------===//
        -:  587:
        -:  588:struct ConvertShRUI final : OpConversionPattern<arith::ShRUIOp> {
        -:  589:  using OpConversionPattern::OpConversionPattern;
        -:  590:
        -:  591:  LogicalResult
function _ZNK12_GLOBAL__N_112ConvertShRUI15matchAndRewriteEN4mlir5arith7ShRUIOpENS2_14ShRUIOpAdaptorERNS1_25ConversionPatternRewriterE called 72 returned 100% blocks executed 91%
       72:  592:  matchAndRewrite(arith::ShRUIOp op, OpAdaptor adaptor,
        -:  593:                  ConversionPatternRewriter &rewriter) const override {
       72:  594:    Location loc = op->getLoc();
call    0 returned 100%
        -:  595:
       72:  596:    Type oldTy = op.getType();
call    0 returned 100%
       72:  597:    auto newTy =
       72:  598:        getTypeConverter()->convertType(oldTy).dyn_cast_or_null<VectorType>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       72:  599:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  600:      return rewriter.notifyMatchFailure(
    #####:  601:          loc, llvm::formatv("unsupported type: {0}", op.getType()));
call    0 never executed
call    1 never executed
        -:  602:
       72:  603:    Type newOperandTy = reduceInnermostDim(newTy);
call    0 returned 100%
        -:  604:    // `oldBitWidth` == `2 * newBitWidth`
       72:  605:    unsigned newBitWidth = newTy.getElementTypeBitWidth();
call    0 returned 100%
        -:  606:
       72:  607:    auto [lhsElem0, lhsElem1] =
call    0 returned 100%
       72:  608:        extractLastDimHalves(rewriter, loc, adaptor.getLhs());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       72:  609:    Value rhsElem0 = extractLastDimSlice(rewriter, loc, adaptor.getRhs(), 0);
call    0 returned 100%
call    1 returned 100%
        -:  610:
        -:  611:    // Assume that the shift amount is < 2 * newBitWidth. Calculate the low and
        -:  612:    // high halves of the results separately:
        -:  613:    //   1. low := a or b or c, where:
        -:  614:    //     a) Bits from LHS.low, shifted by the RHS.
        -:  615:    //     b) Bits from LHS.high, shifted left. These matter when
        -:  616:    //        RHS < newBitWidth, e.g.:
        -:  617:    //         [hhhh][0000] shrui 3 --> [000h][hhh0]
        -:  618:    //                                          ^
        -:  619:    //                                          |
        -:  620:    //                                 [hhhh] shli (4 - 1)
        -:  621:    //     c) Bits from LHS.high, shifted right. These come into play when
        -:  622:    //        RHS > newBitWidth, e.g.:
        -:  623:    //         [hhhh][0000] shrui 7 --> [0000][000h]
        -:  624:    //                                          ^
        -:  625:    //                                          |
        -:  626:    //                                 [hhhh] shrui (7 - 4)
        -:  627:    //
        -:  628:    //   2. high := LHS.high shrui RHS
        -:  629:    //
        -:  630:    // Because shifts by values >= newBitWidth are undefined, we ignore the high
        -:  631:    // half of RHS, and introduce 'bounds checks' to account for
        -:  632:    // RHS.low > newBitWidth.
        -:  633:    //
        -:  634:    // TODO: Explore possible optimizations.
       72:  635:    Value zeroCst = createScalarOrSplatConstant(rewriter, loc, newOperandTy, 0);
call    0 returned 100%
       72:  636:    Value elemBitWidth =
       72:  637:        createScalarOrSplatConstant(rewriter, loc, newOperandTy, newBitWidth);
call    0 returned 100%
        -:  638:
      144:  639:    Value illegalElemShift = rewriter.create<arith::CmpIOp>(
       72:  640:        loc, arith::CmpIPredicate::uge, rhsElem0, elemBitWidth);
call    0 returned 100%
call    1 returned 100%
        -:  641:
       72:  642:    Value shiftedElem0 =
       72:  643:        rewriter.create<arith::ShRUIOp>(loc, lhsElem0, rhsElem0);
call    0 returned 100%
call    1 returned 100%
      144:  644:    Value resElem0Low = rewriter.create<arith::SelectOp>(loc, illegalElemShift,
       72:  645:                                                         zeroCst, shiftedElem0);
call    0 returned 100%
call    1 returned 100%
       72:  646:    Value shiftedElem1 =
       72:  647:        rewriter.create<arith::ShRUIOp>(loc, lhsElem1, rhsElem0);
call    0 returned 100%
call    1 returned 100%
      144:  648:    Value resElem1 = rewriter.create<arith::SelectOp>(loc, illegalElemShift,
       72:  649:                                                      zeroCst, shiftedElem1);
call    0 returned 100%
call    1 returned 100%
        -:  650:
      144:  651:    Value cappedShiftAmount = rewriter.create<arith::SelectOp>(
       72:  652:        loc, illegalElemShift, elemBitWidth, rhsElem0);
call    0 returned 100%
call    1 returned 100%
       72:  653:    Value leftShiftAmount =
       72:  654:        rewriter.create<arith::SubIOp>(loc, elemBitWidth, cappedShiftAmount);
call    0 returned 100%
call    1 returned 100%
       72:  655:    Value shiftedLeft =
       72:  656:        rewriter.create<arith::ShLIOp>(loc, lhsElem1, leftShiftAmount);
call    0 returned 100%
call    1 returned 100%
       72:  657:    Value overshotShiftAmount =
       72:  658:        rewriter.create<arith::SubIOp>(loc, rhsElem0, elemBitWidth);
call    0 returned 100%
call    1 returned 100%
       72:  659:    Value shiftedRight =
       72:  660:        rewriter.create<arith::ShRUIOp>(loc, lhsElem1, overshotShiftAmount);
call    0 returned 100%
call    1 returned 100%
        -:  661:
      144:  662:    Value resElem0High = rewriter.create<arith::SelectOp>(
       72:  663:        loc, illegalElemShift, shiftedRight, shiftedLeft);
call    0 returned 100%
call    1 returned 100%
       72:  664:    Value resElem0 =
       72:  665:        rewriter.create<arith::OrIOp>(loc, resElem0Low, resElem0High);
call    0 returned 100%
call    1 returned 100%
        -:  666:
       72:  667:    Value resultVec =
       72:  668:        constructResultVector(rewriter, loc, newTy, {resElem0, resElem1});
call    0 returned 100%
call    1 returned 100%
       72:  669:    rewriter.replaceOp(op, resultVec);
call    0 returned 100%
call    1 returned 100%
       72:  670:    return success();
        -:  671:  }
        -:  672:};
        -:  673:
        -:  674://===----------------------------------------------------------------------===//
        -:  675:// ConvertTruncI
        -:  676://===----------------------------------------------------------------------===//
        -:  677:
        -:  678:struct ConvertTruncI final : OpConversionPattern<arith::TruncIOp> {
        -:  679:  using OpConversionPattern::OpConversionPattern;
        -:  680:
        -:  681:  LogicalResult
function _ZNK12_GLOBAL__N_113ConvertTruncI15matchAndRewriteEN4mlir5arith8TruncIOpENS2_15TruncIOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  682:  matchAndRewrite(arith::TruncIOp op, OpAdaptor adaptor,
        -:  683:                  ConversionPatternRewriter &rewriter) const override {
    #####:  684:    Location loc = op.getLoc();
call    0 never executed
        -:  685:    // Check if the result type is legal for this target. Currently, we do not
        -:  686:    // support truncation to types wider than supported by the target.
    #####:  687:    if (!getTypeConverter()->isLegal(op.getType()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  688:      return rewriter.notifyMatchFailure(
    #####:  689:          loc, llvm::formatv("unsupported truncation result type: {0}",
call    0 never executed
    #####:  690:                             op.getType()));
call    0 never executed
call    1 never executed
        -:  691:
        -:  692:    // Discard the high half of the input. Truncate the low half, if necessary.
    #####:  693:    Value extracted = extractLastDimSlice(rewriter, loc, adaptor.getIn(), 0);
call    0 never executed
call    1 never executed
    #####:  694:    extracted = dropTrailingX1Dim(rewriter, loc, extracted);
call    0 never executed
    #####:  695:    Value truncated =
    #####:  696:        rewriter.createOrFold<arith::TruncIOp>(loc, op.getType(), extracted);
call    0 never executed
    #####:  697:    rewriter.replaceOp(op, truncated);
call    0 never executed
call    1 never executed
    #####:  698:    return success();
        -:  699:  }
        -:  700:};
        -:  701:
        -:  702://===----------------------------------------------------------------------===//
        -:  703:// ConvertVectorPrint
        -:  704://===----------------------------------------------------------------------===//
        -:  705:
        -:  706:struct ConvertVectorPrint final : OpConversionPattern<vector::PrintOp> {
        -:  707:  using OpConversionPattern::OpConversionPattern;
        -:  708:
        -:  709:  LogicalResult
function _ZNK12_GLOBAL__N_118ConvertVectorPrint15matchAndRewriteEN4mlir6vector7PrintOpENS2_14PrintOpAdaptorERNS1_25ConversionPatternRewriterE called 86 returned 100% blocks executed 100%
       86:  710:  matchAndRewrite(vector::PrintOp op, OpAdaptor adaptor,
        -:  711:                  ConversionPatternRewriter &rewriter) const override {
       86:  712:    rewriter.replaceOpWithNewOp<vector::PrintOp>(op, adaptor.getSource());
call    0 returned 100%
call    1 returned 100%
       86:  713:    return success();
        -:  714:  }
        -:  715:};
        -:  716:
        -:  717://===----------------------------------------------------------------------===//
        -:  718:// Pass Definition
        -:  719://===----------------------------------------------------------------------===//
        -:  720:
  116719*:  721:struct EmulateWideIntPass final
call    0 never executed
call    1 returned 100%
        -:  722:    : arith::impl::ArithEmulateWideIntBase<EmulateWideIntPass> {
    #####:  723:  using ArithEmulateWideIntBase::ArithEmulateWideIntBase;
call    0 never executed
        -:  724:
function _ZN12_GLOBAL__N_118EmulateWideIntPass14runOnOperationEv called 438 returned 100% blocks executed 91%
      438:  725:  void runOnOperation() override {
     876*:  726:    if (!llvm::isPowerOf2_32(widestIntSupported) || widestIntSupported < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    #####:  727:      signalPassFailure();
call    0 never executed
    #####:  728:      return;
        -:  729:    }
        -:  730:
      438:  731:    Operation *op = getOperation();
branch  0 taken 0%
branch  1 taken 100%
      438:  732:    MLIRContext *ctx = op->getContext();
call    0 returned 100%
        -:  733:
      876:  734:    arith::WideIntEmulationConverter typeConverter(widestIntSupported);
call    0 returned 100%
      876:  735:    ConversionTarget target(*ctx);
call    0 returned 100%
call    1 returned 100%
function _ZZN12_GLOBAL__N_118EmulateWideIntPass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 950 returned 100% blocks executed 100%
     1388:  736:    target.addDynamicallyLegalOp<func::FuncOp>([&typeConverter](Operation *op) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      950:  737:      return typeConverter.isLegal(cast<func::FuncOp>(op).getFunctionType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  738:    });
   443384:  739:    auto opLegalCallback = [&typeConverter](Operation *op) {
   442946:  740:      return typeConverter.isLegal(op);
call    0 returned 100%
      438:  741:    };
      876:  742:    target.addDynamicallyLegalOp<func::CallOp, func::ReturnOp>(opLegalCallback);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      438:  743:    target
call    0 returned 100%
      438:  744:        .addDynamicallyLegalDialect<arith::ArithDialect, vector::VectorDialect>(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  745:            opLegalCallback);
        -:  746:
      876:  747:    RewritePatternSet patterns(ctx);
call    0 returned 100%
call    1 returned 100%
      438:  748:    arith::populateArithWideIntEmulationPatterns(typeConverter, patterns);
call    0 returned 100%
        -:  749:
      438:  750:    if (failed(applyPartialConversion(op, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
      433:  751:      signalPassFailure();
call    0 returned 100%
        -:  752:  }
        -:  753:};
        -:  754:} // end anonymous namespace
        -:  755:
        -:  756://===----------------------------------------------------------------------===//
        -:  757:// Public Interface Definition
        -:  758://===----------------------------------------------------------------------===//
        -:  759:
function _ZN4mlir5arith25WideIntEmulationConverterC2Ej called 854 returned 100% blocks executed 82%
      854:  760:arith::WideIntEmulationConverter::WideIntEmulationConverter(
      854:  761:    unsigned widestIntSupportedByTarget)
      854:  762:    : maxIntWidth(widestIntSupportedByTarget) {
call    0 returned 100%
     854*:  763:  assert(llvm::isPowerOf2_32(widestIntSupportedByTarget) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  764:         "Only power-of-two integers with are supported");
     854*:  765:  assert(widestIntSupportedByTarget >= 2 && "Integer type too narrow");
branch  0 taken 0%
branch  1 taken 100%
call    2 never executed
        -:  766:
        -:  767:  // Allow unknown types.
    20234:  768:  addConversion([](Type ty) -> Optional<Type> { return ty; });
call    0 returned 100%
call    1 returned 100%
        -:  769:
        -:  770:  // Scalar case.
function _ZZN4mlir5arith25WideIntEmulationConverterC4EjENKUlNS_11IntegerTypeEE0_clES2_.isra.0 called 3388 returned 100% blocks executed 91%
     4242:  771:  addConversion([this](IntegerType ty) -> Optional<Type> {
call    0 returned 100%
     3388:  772:    unsigned width = ty.getWidth();
call    0 returned 100%
     3388:  773:    if (width <= maxIntWidth)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
     2541:  774:      return ty;
        -:  775:
        -:  776:    // i2N --> vector<2xiN>
      847:  777:    if (width == 2 * maxIntWidth)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      847:  778:      return VectorType::get(2, IntegerType::get(ty.getContext(), maxIntWidth));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  779:
    #####:  780:    return None;
        -:  781:  });
        -:  782:
        -:  783:  // Vector case.
function _ZZN4mlir5arith25WideIntEmulationConverterC4EjENKUlNS_10VectorTypeEE1_clES2_.isra.0 called 57497 returned 100% blocks executed 90%
    58351:  784:  addConversion([this](VectorType ty) -> Optional<Type> {
call    0 returned 100%
    57497:  785:    auto intTy = ty.getElementType().dyn_cast<IntegerType>();
call    0 returned 100%
call    1 returned 100%
    57497:  786:    if (!intTy)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
    21806:  787:      return ty;
        -:  788:
    35691:  789:    unsigned width = intTy.getWidth();
call    0 returned 100%
    35691:  790:    if (width <= maxIntWidth)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
    30643:  791:      return ty;
        -:  792:
        -:  793:    // vector<...xi2N> --> vector<...x2xiN>
     5048:  794:    if (width == 2 * maxIntWidth) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10096:  795:      auto newShape = to_vector(ty.getShape());
call    0 returned 100%
call    1 returned 100%
     5048:  796:      newShape.push_back(2);
call    0 returned 100%
     5048:  797:      return VectorType::get(newShape,
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     5048:  798:                             IntegerType::get(ty.getContext(), maxIntWidth));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  799:    }
        -:  800:
    #####:  801:    return None;
        -:  802:  });
        -:  803:
        -:  804:  // Function case.
function _ZZN4mlir5arith25WideIntEmulationConverterC4EjENKUlNS_12FunctionTypeEE2_clES2_.isra.0 called 504 returned 100% blocks executed 86%
     1358:  805:  addConversion([this](FunctionType ty) -> Optional<Type> {
call    0 returned 100%
        -:  806:    // Convert inputs and results, e.g.:
        -:  807:    //   (i2N, i2N) -> i2N --> (vector<2xiN>, vector<2xiN>) -> vector<2xiN>
      504:  808:    SmallVector<Type> inputs;
call    0 returned 100%
      504:  809:    if (failed(convertTypes(ty.getInputs(), inputs)))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  810:      return None;
        -:  811:
     1008:  812:    SmallVector<Type> results;
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
      504:  813:    if (failed(convertTypes(ty.getResults(), results)))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  814:      return None;
        -:  815:
      504:  816:    return FunctionType::get(ty.getContext(), inputs, results);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  817:  });
      854:  818:}
        -:  819:
function _ZN4mlir5arith37populateArithWideIntEmulationPatternsERNS0_25WideIntEmulationConverterERNS_17RewritePatternSetE called 854 returned 100% blocks executed 100%
      854:  820:void arith::populateArithWideIntEmulationPatterns(
        -:  821:    WideIntEmulationConverter &typeConverter, RewritePatternSet &patterns) {
        -:  822:  // Populate `func.*` conversion patterns.
      854:  823:  populateFunctionOpInterfaceTypeConversionPattern<func::FuncOp>(patterns,
call    0 returned 100%
        -:  824:                                                                 typeConverter);
      854:  825:  populateCallOpTypeConversionPattern(patterns, typeConverter);
call    0 returned 100%
      854:  826:  populateReturnOpTypeConversionPattern(patterns, typeConverter);
call    0 returned 100%
        -:  827:
        -:  828:  // Populate `arith.*` conversion patterns.
      854:  829:  patterns.add<
        -:  830:      // Misc ops.
        -:  831:      ConvertConstant, ConvertVectorPrint,
        -:  832:      // Binary ops.
        -:  833:      ConvertAddI, ConvertMulI, ConvertShLI, ConvertShRUI,
        -:  834:      // Bitwise binary ops.
        -:  835:      ConvertBitwiseBinary<arith::AndIOp>, ConvertBitwiseBinary<arith::OrIOp>,
        -:  836:      ConvertBitwiseBinary<arith::XOrIOp>,
        -:  837:      // Extension and truncation ops.
        -:  838:      ConvertExtSI, ConvertExtUI, ConvertTruncI>(typeConverter,
      854:  839:                                                 patterns.getContext());
call    0 returned 100%
      854:  840:}
