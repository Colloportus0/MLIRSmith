        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Pass/TestPassManager.cpp
        -:    0:Graph:../tools/mlir/test/lib/Pass/CMakeFiles/MLIRTestPass.dir/TestPassManager.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Pass/CMakeFiles/MLIRTestPass.dir/TestPassManager.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestPassManager.cpp - Test pass manager functionality --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "TestDialect.h"
        -:   10:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   11:#include "mlir/IR/BuiltinOps.h"
        -:   12:#include "mlir/Pass/Pass.h"
        -:   13:#include "mlir/Pass/PassManager.h"
        -:   14:
        -:   15:using namespace mlir;
        -:   16:
        -:   17:namespace {
   168845:   18:struct TestModulePass
call    0 returned 100%
call    1 returned 100%
        -:   19:    : public PassWrapper<TestModulePass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_114TestModulePass13resolveTypeIDEv called 117653 returned 100% blocks executed 100%
   117653:   20:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestModulePass)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   21:
function _ZN12_GLOBAL__N_114TestModulePass14runOnOperationEv called 412 returned 100% blocks executed 100%
      412:   22:  void runOnOperation() final {}
function _ZNK12_GLOBAL__N_114TestModulePass11getArgumentEv called 116201 returned 100% blocks executed 100%
   116201:   23:  StringRef getArgument() const final { return "test-module-pass"; }
function _ZNK12_GLOBAL__N_114TestModulePass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   24:  StringRef getDescription() const final {
   116163:   25:    return "Test a module pass in the pass manager";
        -:   26:  }
        -:   27:};
   251904:   28:struct TestFunctionPass
call    0 returned 100%
call    1 returned 100%
        -:   29:    : public PassWrapper<TestFunctionPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_116TestFunctionPass13resolveTypeIDEv called 118632 returned 100% blocks executed 100%
   118632:   30:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestFunctionPass)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   31:
function _ZN12_GLOBAL__N_116TestFunctionPass14runOnOperationEv called 1265 returned 100% blocks executed 100%
     1265:   32:  void runOnOperation() final {}
function _ZNK12_GLOBAL__N_116TestFunctionPass11getArgumentEv called 116229 returned 100% blocks executed 100%
   116229:   33:  StringRef getArgument() const final { return "test-function-pass"; }
function _ZNK12_GLOBAL__N_116TestFunctionPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   34:  StringRef getDescription() const final {
   116163:   35:    return "Test a function pass in the pass manager";
        -:   36:  }
        -:   37:};
  116715*:   38:struct TestInterfacePass
call    0 never executed
call    1 returned 100%
        -:   39:    : public PassWrapper<TestInterfacePass,
        -:   40:                         InterfacePass<FunctionOpInterface>> {
function _ZN12_GLOBAL__N_117TestInterfacePass13resolveTypeIDEv called 116715 returned 100% blocks executed 100%
   116715:   41:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestInterfacePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   42:
function _ZN12_GLOBAL__N_117TestInterfacePass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   43:  void runOnOperation() final {
    #####:   44:    getOperation()->emitRemark() << "Executing interface pass on operation";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   45:  }
function _ZNK12_GLOBAL__N_117TestInterfacePass11getArgumentEv called 116167 returned 100% blocks executed 100%
   116167:   46:  StringRef getArgument() const final { return "test-interface-pass"; }
function _ZNK12_GLOBAL__N_117TestInterfacePass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   47:  StringRef getDescription() const final {
   116163:   48:    return "Test an interface pass (running on FunctionOpInterface) in the "
   116163:   49:           "pass manager";
        -:   50:  }
        -:   51:};
        -:   52:struct TestOptionsPass
        -:   53:    : public PassWrapper<TestOptionsPass, OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_115TestOptionsPass13resolveTypeIDEv called 168271 returned 100% blocks executed 100%
   168271:   54:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestOptionsPass)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   55:
        -:   56:  struct Options : public PassPipelineOptions<Options> {
        -:   57:    ListOption<int> listOption{*this, "list",
        -:   58:                               llvm::cl::desc("Example list option")};
        -:   59:    ListOption<std::string> stringListOption{
        -:   60:        *this, "string-list", llvm::cl::desc("Example string list option")};
        -:   61:    Option<std::string> stringOption{*this, "string",
        -:   62:                                     llvm::cl::desc("Example string option")};
        -:   63:  };
function _ZN12_GLOBAL__N_115TestOptionsPassC2Ev called 116673 returned 100% blocks executed 100%
   116673:   64:  TestOptionsPass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   65:  TestOptionsPass(const TestOptionsPass &) : PassWrapper() {}
function _ZN12_GLOBAL__N_115TestOptionsPassC2ERKNS0_7OptionsE called 478 returned 100% blocks executed 100%
      478:   66:  TestOptionsPass(const Options &options) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      478:   67:    listOption = options.listOption;
call    0 returned 100%
      478:   68:    stringOption = options.stringOption;
call    0 returned 100%
      478:   69:    stringListOption = options.stringListOption;
call    0 returned 100%
      478:   70:  }
        -:   71:
function _ZN12_GLOBAL__N_115TestOptionsPass14runOnOperationEv called 826 returned 100% blocks executed 100%
      826:   72:  void runOnOperation() final {}
function _ZNK12_GLOBAL__N_115TestOptionsPass11getArgumentEv called 116197 returned 100% blocks executed 100%
   116197:   73:  StringRef getArgument() const final { return "test-options-pass"; }
function _ZNK12_GLOBAL__N_115TestOptionsPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   74:  StringRef getDescription() const final {
   116163:   75:    return "Test options parsing capabilities";
        -:   76:  }
        -:   77:
        -:   78:  ListOption<int> listOption{*this, "list",
        -:   79:                             llvm::cl::desc("Example list option")};
        -:   80:  ListOption<std::string> stringListOption{
        -:   81:      *this, "string-list", llvm::cl::desc("Example string list option")};
        -:   82:  Option<std::string> stringOption{*this, "string",
        -:   83:                                   llvm::cl::desc("Example string option")};
        -:   84:};
        -:   85:
        -:   86:/// A test pass that always aborts to enable testing the crash recovery
        -:   87:/// mechanism of the pass manager.
  116163*:   88:struct TestCrashRecoveryPass
call    0 never executed
call    1 returned 100%
        -:   89:    : public PassWrapper<TestCrashRecoveryPass, OperationPass<>> {
function _ZN12_GLOBAL__N_121TestCrashRecoveryPass13resolveTypeIDEv called 116163 returned 100% blocks executed 100%
   116163:   90:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestCrashRecoveryPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   91:
function _ZN12_GLOBAL__N_121TestCrashRecoveryPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   92:  void runOnOperation() final { abort(); }
function _ZNK12_GLOBAL__N_121TestCrashRecoveryPass11getArgumentEv called 116163 returned 100% blocks executed 100%
   116163:   93:  StringRef getArgument() const final { return "test-pass-crash"; }
function _ZNK12_GLOBAL__N_121TestCrashRecoveryPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   94:  StringRef getDescription() const final {
   116163:   95:    return "Test a pass in the pass manager that always crashes";
        -:   96:  }
        -:   97:};
        -:   98:
        -:   99:/// A test pass that always fails to enable testing the failure recovery
        -:  100:/// mechanisms of the pass manager.
  116698*:  101:struct TestFailurePass : public PassWrapper<TestFailurePass, OperationPass<>> {
call    0 never executed
call    1 returned 100%
function _ZN12_GLOBAL__N_115TestFailurePass13resolveTypeIDEv called 116698 returned 100% blocks executed 100%
   116698:  102:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestFailurePass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  103:
function _ZN12_GLOBAL__N_115TestFailurePass14runOnOperationEv called 403 returned 100% blocks executed 100%
      403:  104:  void runOnOperation() final { signalPassFailure(); }
call    0 returned 100%
function _ZNK12_GLOBAL__N_115TestFailurePass11getArgumentEv called 116181 returned 100% blocks executed 100%
   116181:  105:  StringRef getArgument() const final { return "test-pass-failure"; }
function _ZNK12_GLOBAL__N_115TestFailurePass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:  106:  StringRef getDescription() const final {
   116163:  107:    return "Test a pass in the pass manager that always fails";
        -:  108:  }
        -:  109:};
        -:  110:
        -:  111:/// A test pass that creates an invalid operation in a function body.
        -:  112:struct TestInvalidIRPass
        -:  113:    : public PassWrapper<TestInvalidIRPass,
        -:  114:                         InterfacePass<FunctionOpInterface>> {
function _ZN12_GLOBAL__N_117TestInvalidIRPass13resolveTypeIDEv called 116669 returned 100% blocks executed 100%
   116669:  115:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestInvalidIRPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  116:
function _ZN12_GLOBAL__N_117TestInvalidIRPassC2Ev called 116669 returned 100% blocks executed 100%
   116669:  117:  TestInvalidIRPass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN12_GLOBAL__N_117TestInvalidIRPassC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:  118:  TestInvalidIRPass(const TestInvalidIRPass &other) : PassWrapper(other) {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:  119:
function _ZNK12_GLOBAL__N_117TestInvalidIRPass11getArgumentEv called 116167 returned 100% blocks executed 100%
   116167:  120:  StringRef getArgument() const final { return "test-pass-create-invalid-ir"; }
function _ZNK12_GLOBAL__N_117TestInvalidIRPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:  121:  StringRef getDescription() const final {
   116163:  122:    return "Test pass that adds an invalid operation in a function body";
        -:  123:  }
function _ZNK12_GLOBAL__N_117TestInvalidIRPass20getDependentDialectsERN4mlir15DialectRegistryE called 506 returned 100% blocks executed 100%
      506:  124:  void getDependentDialects(DialectRegistry &registry) const final {
      506:  125:    registry.insert<test::TestDialect>();
call    0 returned 100%
      506:  126:  }
function _ZN12_GLOBAL__N_117TestInvalidIRPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  127:  void runOnOperation() final {
    #####:  128:    if (signalFailure)
branch  0 never executed
branch  1 never executed
    #####:  129:      signalPassFailure();
call    0 never executed
    #####:  130:    if (!emitInvalidIR)
branch  0 never executed
branch  1 never executed
    #####:  131:      return;
    #####:  132:    OpBuilder b(getOperation().getFunctionBody());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  133:    OperationState state(b.getUnknownLoc(), "test.any_attr_of_i32_str");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  134:    b.create(state);
call    0 never executed
        -:  135:  }
        -:  136:  Option<bool> signalFailure{*this, "signal-pass-failure",
        -:  137:                             llvm::cl::desc("Trigger a pass failure")};
        -:  138:  Option<bool> emitInvalidIR{*this, "emit-invalid-ir", llvm::cl::init(true),
        -:  139:                             llvm::cl::desc("Emit invalid IR")};
        -:  140:};
        -:  141:
        -:  142:/// A test pass that always fails to enable testing the failure recovery
        -:  143:/// mechanisms of the pass manager.
  116667*:  144:struct TestInvalidParentPass
call    0 never executed
call    1 returned 100%
        -:  145:    : public PassWrapper<TestInvalidParentPass,
        -:  146:                         InterfacePass<FunctionOpInterface>> {
function _ZN12_GLOBAL__N_121TestInvalidParentPass13resolveTypeIDEv called 116667 returned 100% blocks executed 100%
   116667:  147:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestInvalidParentPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  148:
function _ZNK12_GLOBAL__N_121TestInvalidParentPass11getArgumentEv called 116170 returned 100% blocks executed 100%
   116170:  149:  StringRef getArgument() const final { return "test-pass-invalid-parent"; }
function _ZNK12_GLOBAL__N_121TestInvalidParentPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:  150:  StringRef getDescription() const final {
   116163:  151:    return "Test a pass in the pass manager that makes the parent operation "
   116163:  152:           "invalid";
        -:  153:  }
function _ZNK12_GLOBAL__N_121TestInvalidParentPass20getDependentDialectsERN4mlir15DialectRegistryE called 504 returned 100% blocks executed 100%
      504:  154:  void getDependentDialects(DialectRegistry &registry) const final {
      504:  155:    registry.insert<test::TestDialect>();
call    0 returned 100%
      504:  156:  }
function _ZN12_GLOBAL__N_121TestInvalidParentPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:  157:  void runOnOperation() final {
    #####:  158:    FunctionOpInterface op = getOperation();
call    0 never executed
    #####:  159:    OpBuilder b(op.getFunctionBody());
call    0 never executed
call    1 never executed
    #####:  160:    b.create<test::TestCallOp>(op.getLoc(), TypeRange(), "some_unknown_func",
call    0 never executed
call    1 never executed
    #####:  161:                               ValueRange());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  162:  }
        -:  163:};
        -:  164:
        -:  165:/// A test pass that contains a statistic.
        -:  166:struct TestStatisticPass
        -:  167:    : public PassWrapper<TestStatisticPass, OperationPass<>> {
function _ZN12_GLOBAL__N_117TestStatisticPass13resolveTypeIDEv called 116646 returned 100% blocks executed 100%
   116646:  168:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestStatisticPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  169:
function _ZN12_GLOBAL__N_117TestStatisticPassC2Ev called 116646 returned 100% blocks executed 100%
   116646:  170:  TestStatisticPass() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  171:  TestStatisticPass(const TestStatisticPass &) : PassWrapper() {}
function _ZNK12_GLOBAL__N_117TestStatisticPass11getArgumentEv called 116184 returned 100% blocks executed 100%
   116184:  172:  StringRef getArgument() const final { return "test-stats-pass"; }
function _ZNK12_GLOBAL__N_117TestStatisticPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:  173:  StringRef getDescription() const final { return "Test pass statistics"; }
        -:  174:
        -:  175:  // Use a couple of statistics to verify their ordering
        -:  176:  // in the print out. The statistics are registered in the order
        -:  177:  // of construction, so put "num-ops2" before "num-ops" and
        -:  178:  // make sure that the order is reversed.
        -:  179:  Statistic opCountDuplicate{this, "num-ops2",
        -:  180:                             "Number of operations counted one more time"};
        -:  181:  Statistic opCount{this, "num-ops", "Number of operations counted"};
        -:  182:
function _ZN12_GLOBAL__N_117TestStatisticPass14runOnOperationEv called 362 returned 100% blocks executed 71%
      362:  183:  void runOnOperation() final {
   711102:  184:    getOperation()->walk([&](Operation *) { ++opCount; });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
   711102:  185:    getOperation()->walk([&](Operation *) { ++opCountDuplicate; });
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
      362:  186:  }
        -:  187:};
        -:  188:} // namespace
        -:  189:
function _ZL18testNestedPipelineRN4mlir13OpPassManagerE called 965 returned 100% blocks executed 64%
      965:  190:static void testNestedPipeline(OpPassManager &pm) {
        -:  191:  // Nest a module pipeline that contains:
        -:  192:  /// A module pass.
      965:  193:  auto &modulePM = pm.nest<ModuleOp>();
call    0 returned 100%
      965:  194:  modulePM.addPass(std::make_unique<TestModulePass>());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  195:  /// A nested function pass.
      965:  196:  auto &nestedFunctionPM = modulePM.nest<func::FuncOp>();
call    0 returned 100%
      965:  197:  nestedFunctionPM.addPass(std::make_unique<TestFunctionPass>());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  198:
        -:  199:  // Nest a function pipeline that contains a single pass.
      965:  200:  auto &functionPM = pm.nest<func::FuncOp>();
call    0 returned 100%
      965:  201:  functionPM.addPass(std::make_unique<TestFunctionPass>());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      965:  202:}
        -:  203:
function _ZL25testNestedPipelineTextualRN4mlir13OpPassManagerE called 475 returned 100% blocks executed 100%
      475:  204:static void testNestedPipelineTextual(OpPassManager &pm) {
      475:  205:  (void)parsePassPipeline("test-pm-nested-pipeline", pm);
call    0 returned 100%
call    1 returned 100%
      475:  206:}
        -:  207:
        -:  208:namespace mlir {
function _ZN4mlir27registerPassManagerTestPassEv called 116163 returned 100% blocks executed 100%
   116163:  209:void registerPassManagerTestPass() {
   116163:  210:  PassRegistration<TestOptionsPass>();
call    0 returned 100%
        -:  211:
   116163:  212:  PassRegistration<TestModulePass>();
call    0 returned 100%
        -:  213:
   116163:  214:  PassRegistration<TestFunctionPass>();
call    0 returned 100%
        -:  215:
   116163:  216:  PassRegistration<TestInterfacePass>();
call    0 returned 100%
        -:  217:
   116163:  218:  PassRegistration<TestCrashRecoveryPass>();
call    0 returned 100%
   116163:  219:  PassRegistration<TestFailurePass>();
call    0 returned 100%
   116163:  220:  PassRegistration<TestInvalidIRPass>();
call    0 returned 100%
   116163:  221:  PassRegistration<TestInvalidParentPass>();
call    0 returned 100%
        -:  222:
   116163:  223:  PassRegistration<TestStatisticPass>();
call    0 returned 100%
        -:  224:
   116163:  225:  PassPipelineRegistration<>("test-pm-nested-pipeline",
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  226:                             "Test a nested pipeline in the pass manager",
        -:  227:                             testNestedPipeline);
   116163:  228:  PassPipelineRegistration<>("test-textual-pm-nested-pipeline",
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  229:                             "Test a nested pipeline in the pass manager",
        -:  230:                             testNestedPipelineTextual);
        -:  231:
   116163:  232:  PassPipelineRegistration<TestOptionsPass::Options>
        -:  233:      registerOptionsPassPipeline(
        -:  234:          "test-options-pass-pipeline",
        -:  235:          "Parses options using pass pipeline registration",
function _ZZN4mlir27registerPassManagerTestPassEvENKUlRNS_13OpPassManagerERKN12_GLOBAL__N_115TestOptionsPass7OptionsEE_clES1_S6_.isra.0 called 478 returned 100% blocks executed 75%
      478:  236:          [](OpPassManager &pm, const TestOptionsPass::Options &options) {
      956:  237:            pm.addPass(std::make_unique<TestOptionsPass>(options));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   116163:  238:          });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   116163:  239:}
        -:  240:} // namespace mlir
