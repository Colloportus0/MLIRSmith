        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SPIRV/IR/SPIRVEnums.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVEnums.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVEnums.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- SPIRVEnums.cpp - MLIR SPIR-V Enums ---------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the C/C++ enums from SPIR-V spec.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/SPIRV/IR/SPIRVEnums.h"
        -:   14:
        -:   15:#include "mlir/IR/BuiltinTypes.h"
        -:   16:
        -:   17:#include "llvm/ADT/SetVector.h"
        -:   18:#include "llvm/ADT/StringExtras.h"
        -:   19:#include "llvm/ADT/StringRef.h"
        -:   20:
        -:   21:#include <iterator>
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:// Pull in all enum utility function definitions
        -:   26:#include "mlir/Dialect/SPIRV/IR/SPIRVEnums.cpp.inc"
        -:   27:
        -:   28:// Pull in all enum type availability query function definitions
        -:   29:#include "mlir/Dialect/SPIRV/IR/SPIRVEnumAvailability.cpp.inc"
        -:   30:
        -:   31://===----------------------------------------------------------------------===//
        -:   32:// Availability relationship
        -:   33://===----------------------------------------------------------------------===//
        -:   34:
function _ZN4mlir5spirv20getImpliedExtensionsENS0_7VersionE called 3028 returned 100% blocks executed 50%
     3028:   35:ArrayRef<spirv::Extension> spirv::getImpliedExtensions(spirv::Version version) {
        -:   36:  // Note: the following lists are from "Appendix A: Changes" of the spec.
        -:   37:
        -:   38:#define V_1_3_IMPLIED_EXTS                                                     \
        -:   39:  Extension::SPV_KHR_shader_draw_parameters, Extension::SPV_KHR_16bit_storage, \
        -:   40:      Extension::SPV_KHR_device_group, Extension::SPV_KHR_multiview,           \
        -:   41:      Extension::SPV_KHR_storage_buffer_storage_class,                         \
        -:   42:      Extension::SPV_KHR_variable_pointers
        -:   43:
        -:   44:#define V_1_4_IMPLIED_EXTS                                                     \
        -:   45:  Extension::SPV_KHR_no_integer_wrap_decoration,                               \
        -:   46:      Extension::SPV_GOOGLE_decorate_string,                                   \
        -:   47:      Extension::SPV_GOOGLE_hlsl_functionality1,                               \
        -:   48:      Extension::SPV_KHR_float_controls
        -:   49:
        -:   50:#define V_1_5_IMPLIED_EXTS                                                     \
        -:   51:  Extension::SPV_KHR_8bit_storage, Extension::SPV_EXT_descriptor_indexing,     \
        -:   52:      Extension::SPV_EXT_shader_viewport_index_layer,                          \
        -:   53:      Extension::SPV_EXT_physical_storage_buffer,                              \
        -:   54:      Extension::SPV_KHR_physical_storage_buffer,                              \
        -:   55:      Extension::SPV_KHR_vulkan_memory_model
        -:   56:
     3028:   57:  switch (version) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
     3028:   58:  default:
     3028:   59:    return {};
    #####:   60:  case Version::V_1_3: {
        -:   61:    // The following manual ArrayRef constructor call is to satisfy GCC 5.
    #####:   62:    static const Extension exts[] = {V_1_3_IMPLIED_EXTS};
    #####:   63:    return ArrayRef<spirv::Extension>(exts, std::size(exts));
        -:   64:  }
    #####:   65:  case Version::V_1_4: {
    #####:   66:    static const Extension exts[] = {V_1_3_IMPLIED_EXTS, V_1_4_IMPLIED_EXTS};
    #####:   67:    return ArrayRef<spirv::Extension>(exts, std::size(exts));
        -:   68:  }
    #####:   69:  case Version::V_1_5: {
    #####:   70:    static const Extension exts[] = {V_1_3_IMPLIED_EXTS, V_1_4_IMPLIED_EXTS,
        -:   71:                                     V_1_5_IMPLIED_EXTS};
    #####:   72:    return ArrayRef<spirv::Extension>(exts, std::size(exts));
        -:   73:  }
        -:   74:  }
        -:   75:
        -:   76:#undef V_1_5_IMPLIED_EXTS
        -:   77:#undef V_1_4_IMPLIED_EXTS
        -:   78:#undef V_1_3_IMPLIED_EXTS
        -:   79:}
        -:   80:
        -:   81:// Pull in utility function definition for implied capabilities
        -:   82:#include "mlir/Dialect/SPIRV/IR/SPIRVCapabilityImplication.inc"
        -:   83:
        -:   84:SmallVector<spirv::Capability, 0>
function _ZN4mlir5spirv31getRecursiveImpliedCapabilitiesENS0_10CapabilityE called 3028 returned 100% blocks executed 79%
     3028:   85:spirv::getRecursiveImpliedCapabilities(spirv::Capability cap) {
     3028:   86:  ArrayRef<spirv::Capability> directCaps = getDirectImpliedCapabilities(cap);
call    0 returned 100%
     3028:   87:  SetVector<spirv::Capability, SmallVector<spirv::Capability, 0>> allCaps(
     6056:   88:      directCaps.begin(), directCaps.end());
call    0 returned 100%
call    1 returned 100%
        -:   89:
        -:   90:  // TODO: This is insufficient; find a better way to handle this
        -:   91:  // (e.g., using static lists) if this turns out to be a bottleneck.
     6056:   92:  for (unsigned i = 0; i < allCaps.size(); ++i)
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
    3028*:   93:    for (Capability c : getDirectImpliedCapabilities(allCaps[i]))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   94:      allCaps.insert(c);
call    0 never executed
        -:   95:
     3028:   96:  return allCaps.takeVector();
call    0 returned 100%
        -:   97:}
