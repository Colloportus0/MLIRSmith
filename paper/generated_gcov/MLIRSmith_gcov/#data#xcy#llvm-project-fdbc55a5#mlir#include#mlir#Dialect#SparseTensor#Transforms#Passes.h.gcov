        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/SparseTensor/Transforms/Passes.h
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Pipelines/CMakeFiles/obj.MLIRSparseTensorPipelines.dir/SparseTensorPipelines.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Passes.h - Sparse tensor pass entry points ---------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This header file defines prototypes of all sparse tensor passes.
        -:   10://
        -:   11:// In general, this file takes the approach of keeping "mechanism" (the
        -:   12:// actual steps of applying a transformation) completely separate from
        -:   13:// "policy" (heuristics for when and where to apply transformations).
        -:   14://
        -:   15://===----------------------------------------------------------------------===//
        -:   16:
        -:   17:#ifndef MLIR_DIALECT_SPARSETENSOR_TRANSFORMS_PASSES_H_
        -:   18:#define MLIR_DIALECT_SPARSETENSOR_TRANSFORMS_PASSES_H_
        -:   19:
        -:   20:#include "mlir/IR/PatternMatch.h"
        -:   21:#include "mlir/Pass/Pass.h"
        -:   22:#include "mlir/Transforms/DialectConversion.h"
        -:   23:
        -:   24:namespace mlir {
        -:   25:namespace bufferization {
        -:   26:struct OneShotBufferizationOptions;
        -:   27:} // namespace bufferization
        -:   28:
        -:   29://===----------------------------------------------------------------------===//
        -:   30:// The Sparsification pass.
        -:   31://===----------------------------------------------------------------------===//
        -:   32:
        -:   33:/// Defines a parallelization strategy. Any independent loop is a candidate
        -:   34:/// for parallelization. The loop is made parallel if (1) allowed by the
        -:   35:/// strategy (e.g., AnyStorageOuterLoop considers either a dense or sparse
        -:   36:/// outermost loop only), and (2) the generated code is an actual for-loop
        -:   37:/// (and not a co-iterating while-loop).
        -:   38:enum class SparseParallelizationStrategy {
        -:   39:  kNone,
        -:   40:  kDenseOuterLoop,
        -:   41:  kAnyStorageOuterLoop,
        -:   42:  kDenseAnyLoop,
        -:   43:  kAnyStorageAnyLoop
        -:   44:  // TODO: support reduction parallelization too?
        -:   45:};
        -:   46:
        -:   47:#define GEN_PASS_DECL
        -:   48:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h.inc"
        -:   49:
        -:   50:/// Options for the Sparsification pass.
        -:   51:struct SparsificationOptions {
      389:   52:  SparsificationOptions(SparseParallelizationStrategy p)
call    0 returned 100%
        -:   53:      : parallelizationStrategy(p) {}
        -:   54:  SparsificationOptions()
        -:   55:      : SparsificationOptions(SparseParallelizationStrategy::kNone) {}
        -:   56:  SparseParallelizationStrategy parallelizationStrategy;
        -:   57:};
        -:   58:
        -:   59:/// Sets up sparsification rewriting rules with the given options.
        -:   60:void populateSparsificationPatterns(
        -:   61:    RewritePatternSet &patterns,
        -:   62:    const SparsificationOptions &options = SparsificationOptions());
        -:   63:
        -:   64:std::unique_ptr<Pass> createSparsificationPass();
        -:   65:std::unique_ptr<Pass>
        -:   66:createSparsificationPass(const SparsificationOptions &options);
        -:   67:
        -:   68://===----------------------------------------------------------------------===//
        -:   69:// The SparseTensorConversion pass.
        -:   70://===----------------------------------------------------------------------===//
        -:   71:
        -:   72:/// Sparse tensor type converter into an opaque pointer.
        -:   73:class SparseTensorTypeToPtrConverter : public TypeConverter {
        -:   74:public:
        -:   75:  SparseTensorTypeToPtrConverter();
        -:   76:};
        -:   77:
        -:   78:/// Defines a strategy for implementing sparse-to-sparse conversion.
        -:   79:/// `kAuto` leaves it up to the compiler to automatically determine
        -:   80:/// the method used.  `kViaCOO` converts the source tensor to COO and
        -:   81:/// then converts the COO to the target format.  `kDirect` converts
        -:   82:/// directly via the algorithm in <https://arxiv.org/abs/2001.02609>;
        -:   83:/// however, beware that there are many formats not supported by this
        -:   84:/// conversion method.
        -:   85:///
        -:   86:/// The presence of the `kAuto` option violates our usual goal of keeping
        -:   87:/// policy completely separated from mechanism.  The reason it exists is
        -:   88:/// because (at present) this strategy can only be specified on a per-file
        -:   89:/// basis.  To see why this is a problem, note that `kDirect` cannot
        -:   90:/// support certain conversions; so if there is no `kAuto` setting,
        -:   91:/// then whenever a file contains a single non-`kDirect`-able conversion
        -:   92:/// the user would be forced to use `kViaCOO` for all conversions in
        -:   93:/// that file!  In the future, instead of using this enum as a `Pass`
        -:   94:/// option, we could instead move it to being an attribute on the
        -:   95:/// conversion op; at which point `kAuto` would no longer be necessary.
        -:   96:enum class SparseToSparseConversionStrategy { kAuto, kViaCOO, kDirect };
        -:   97:
        -:   98:/// Converts command-line sparse2sparse flag to the strategy enum.
        -:   99:SparseToSparseConversionStrategy sparseToSparseConversionStrategy(int32_t flag);
        -:  100:
        -:  101:/// SparseTensorConversion options.
        -:  102:struct SparseTensorConversionOptions {
      389:  103:  SparseTensorConversionOptions(SparseToSparseConversionStrategy s2s)
call    0 returned 100%
        -:  104:      : sparseToSparseStrategy(s2s) {}
        -:  105:  SparseTensorConversionOptions()
        -:  106:      : SparseTensorConversionOptions(SparseToSparseConversionStrategy::kAuto) {
        -:  107:  }
        -:  108:  SparseToSparseConversionStrategy sparseToSparseStrategy;
        -:  109:};
        -:  110:
        -:  111:/// Sets up sparse tensor conversion rules.
        -:  112:void populateSparseTensorConversionPatterns(
        -:  113:    TypeConverter &typeConverter, RewritePatternSet &patterns,
        -:  114:    const SparseTensorConversionOptions &options =
        -:  115:        SparseTensorConversionOptions());
        -:  116:
        -:  117:std::unique_ptr<Pass> createSparseTensorConversionPass();
        -:  118:std::unique_ptr<Pass>
        -:  119:createSparseTensorConversionPass(const SparseTensorConversionOptions &options);
        -:  120:
        -:  121://===----------------------------------------------------------------------===//
        -:  122:// The SparseTensorCodegen pass.
        -:  123://===----------------------------------------------------------------------===//
        -:  124:
        -:  125:/// Sparse tensor type converter into an actual buffer.
        -:  126:class SparseTensorTypeToBufferConverter : public TypeConverter {
        -:  127:public:
        -:  128:  SparseTensorTypeToBufferConverter();
        -:  129:};
        -:  130:
        -:  131:/// Sets up sparse tensor conversion rules.
        -:  132:void populateSparseTensorCodegenPatterns(TypeConverter &typeConverter,
        -:  133:                                         RewritePatternSet &patterns);
        -:  134:
        -:  135:std::unique_ptr<Pass> createSparseTensorCodegenPass();
        -:  136:
        -:  137://===----------------------------------------------------------------------===//
        -:  138:// The SparseTensorRewriting pass.
        -:  139://===----------------------------------------------------------------------===//
        -:  140:
        -:  141:void populateSparseTensorRewriting(RewritePatternSet &patterns, bool enableRT,
        -:  142:                                   bool enableForeach, bool enableConvert);
        -:  143:
        -:  144:std::unique_ptr<Pass> createSparseTensorRewritePass();
        -:  145:std::unique_ptr<Pass> createSparseTensorRewritePass(bool enableRT,
        -:  146:                                                    bool enableForeach = true,
        -:  147:                                                    bool enableConvert = true);
        -:  148:
        -:  149://===----------------------------------------------------------------------===//
        -:  150:// Other rewriting rules and passes.
        -:  151://===----------------------------------------------------------------------===//
        -:  152:
        -:  153:std::unique_ptr<Pass> createDenseBufferizationPass(
        -:  154:    const bufferization::OneShotBufferizationOptions &options);
        -:  155:
        -:  156:void populateSparseBufferRewriting(RewritePatternSet &patterns);
        -:  157:std::unique_ptr<Pass> createSparseBufferRewritePass();
        -:  158:
        -:  159://===----------------------------------------------------------------------===//
        -:  160:// Registration.
        -:  161://===----------------------------------------------------------------------===//
        -:  162:
        -:  163:/// Generate the code for registering passes.
        -:  164:#define GEN_PASS_REGISTRATION
        -:  165:#include "mlir/Dialect/SparseTensor/Transforms/Passes.h.inc"
        -:  166:
        -:  167:} // namespace mlir
        -:  168:
        -:  169:#endif // MLIR_DIALECT_SPARSETENSOR_TRANSFORMS_PASSES_H_
