        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Support/InterfaceSupport.cpp
        -:    0:Graph:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/InterfaceSupport.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Support/CMakeFiles/obj.MLIRSupport.dir/InterfaceSupport.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- InterfaceSupport.cpp - MLIR Interface Support Classes --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines several support classes for defining interfaces.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Support/InterfaceSupport.h"
        -:   14:#include "llvm/Support/Debug.h"
        -:   15:#include "llvm/Support/raw_ostream.h"
        -:   16:
        -:   17:#define DEBUG_TYPE "interfaces"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
function _ZN4mlir6detail12InterfaceMapC2EN4llvm15MutableArrayRefISt4pairINS_6TypeIDEPvEEE called 77673682 returned 100% blocks executed 100%
 77673682:   21:detail::InterfaceMap::InterfaceMap(
        -:   22:    MutableArrayRef<std::pair<TypeID, void *>> elements)
 77673682:   23:    : interfaces(elements.begin(), elements.end()) {
call    0 returned 100%
 77673682:   24:  llvm::sort(interfaces, [](const auto &lhs, const auto &rhs) {
call    0 returned 100%
        -:   25:    return compare(lhs.first, rhs.first);
        -:   26:  });
 77673682:   27:}
        -:   28:
function _ZN4mlir6detail12InterfaceMap6insertEN4llvm8ArrayRefISt4pairINS_6TypeIDEPvEEE called 12537303 returned 100% blocks executed 74%
 12537303:   29:void detail::InterfaceMap::insert(
        -:   30:    ArrayRef<std::pair<TypeID, void *>> elements) {
        -:   31:  // Insert directly into the right position to keep the interfaces sorted.
 25074606:   32:  for (auto &element : elements) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 12537303:   33:    TypeID id = element.first;
 45826254:   34:    auto *it = llvm::lower_bound(interfaces, id, [](const auto &it, TypeID id) {
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
 33288951:   35:      return compare(it.first, id);
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
        -:   36:    });
 12537303:   37:    if (it != interfaces.end() && it->first == id) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
  155447*:   38:      LLVM_DEBUG(llvm::dbgs() << "Ignoring repeated interface registration");
branch  0 taken 0%
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
   155447:   39:      free(element.second);
   155447:   40:      continue;
        -:   41:    }
 12381856:   42:    interfaces.insert(it, element);
call    0 returned 100%
        -:   43:  }
 12537303:   44:}
