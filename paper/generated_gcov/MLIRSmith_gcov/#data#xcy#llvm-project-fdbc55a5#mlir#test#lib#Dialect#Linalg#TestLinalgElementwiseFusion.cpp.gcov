        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Linalg/TestLinalgElementwiseFusion.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgElementwiseFusion.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Linalg/CMakeFiles/MLIRLinalgTestPasses.dir/TestLinalgElementwiseFusion.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestLinalgElementwiseFusion.cpp - Test Linalg elementwise fusion ---===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass for testing fusion of elementwise operations in
        -:   10:// Linalg, mainly linalg options.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Affine/IR/AffineOps.h"
        -:   15:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   16:#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:#include "mlir/Pass/PassManager.h"
        -:   19:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   20:#include "llvm/ADT/TypeSwitch.h"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
function _ZL11addOperandsPN4mlir9OperationERN4llvm9SetVectorINS_5ValueESt6vectorIS4_SaIS4_EENS2_8DenseSetIS4_NS2_12DenseMapInfoIS4_vEEEEEE called 0 returned 0% blocks executed 0%
    #####:   24:static void addOperands(Operation *op, SetVector<Value> &operandSet) {
    #####:   25:  if (!op)
branch  0 never executed
branch  1 never executed
        -:   26:    return;
    #####:   27:  TypeSwitch<Operation *, void>(op)
call    0 never executed
function _ZZL11addOperandsPN4mlir9OperationERN4llvm9SetVectorINS_5ValueESt6vectorIS4_SaIS4_EENS2_8DenseSetIS4_NS2_12DenseMapInfoIS4_vEEEEEEENKUlNS_6linalg8LinalgOpEE_clESF_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   28:      .Case<linalg::LinalgOp>([&](linalg::LinalgOp linalgOp) {
    #####:   29:        SmallVector<Value> inputOperands{linalgOp.getDpsInputOperands()};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   30:        operandSet.insert(inputOperands.begin(), inputOperands.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   31:      })
call    0 never executed
function _ZZL11addOperandsPN4mlir9OperationERN4llvm9SetVectorINS_5ValueESt6vectorIS4_SaIS4_EENS2_8DenseSetIS4_NS2_12DenseMapInfoIS4_vEEEEEEENKUlS1_E0_clES1_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   32:      .Default([&](Operation *operation) {
branch  0 never executed
branch  1 never executed
    #####:   33:        operandSet.insert(operation->operand_begin(), operation->operand_end());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   34:      });
        -:   35:}
        -:   36:
        -:   37:template <int limit = 3>
function _Z22setFusedOpOperandLimitILi4EEbPN4mlir9OpOperandE called 0 returned 0% blocks executed 0%
    #####:   38:static bool setFusedOpOperandLimit(OpOperand *fusedOperand) {
    #####:   39:  Operation *producer = fusedOperand->get().getDefiningOp();
call    0 never executed
    #####:   40:  if (!producer)
branch  0 never executed
branch  1 never executed
        -:   41:    return false;
        -:   42:
    #####:   43:  Operation *consumer = fusedOperand->getOwner();
call    0 never executed
    #####:   44:  SetVector<Value> fusedOpOperands;
call    0 never executed
    #####:   45:  if (producer->getNumResults() != 1)
branch  0 never executed
branch  1 never executed
        -:   46:    return false;
    #####:   47:  addOperands(consumer, fusedOpOperands);
call    0 never executed
call    1 never executed
    #####:   48:  fusedOpOperands.remove(producer->getResult(0));
call    0 never executed
    #####:   49:  addOperands(producer, fusedOpOperands);
call    0 never executed
    #####:   50:  return fusedOpOperands.size() <= limit;
        -:   51:}
        -:   52:
        -:   53:namespace {
        -:   54:struct TestLinalgElementwiseFusion
        -:   55:    : public PassWrapper<TestLinalgElementwiseFusion,
        -:   56:                         OperationPass<func::FuncOp>> {
function _ZN12_GLOBAL__N_127TestLinalgElementwiseFusion13resolveTypeIDEv called 116700 returned 100% blocks executed 100%
   116700:   57:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestLinalgElementwiseFusion)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   58:
function _ZN12_GLOBAL__N_127TestLinalgElementwiseFusionC2Ev called 116700 returned 100% blocks executed 100%
   116700:   59:  TestLinalgElementwiseFusion() = default;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
function _ZN12_GLOBAL__N_127TestLinalgElementwiseFusionC2ERKS0_ called 29160 returned 100% blocks executed 100%
    29160:   60:  TestLinalgElementwiseFusion(const TestLinalgElementwiseFusion &pass)
    29160:   61:      : PassWrapper(pass) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
function _ZNK12_GLOBAL__N_127TestLinalgElementwiseFusion20getDependentDialectsERN4mlir15DialectRegistryE called 539 returned 100% blocks executed 100%
      539:   62:  void getDependentDialects(DialectRegistry &registry) const override {
      539:   63:    registry.insert<AffineDialect, linalg::LinalgDialect, memref::MemRefDialect,
call    0 returned 100%
      539:   64:                    tensor::TensorDialect>();
      539:   65:  }
function _ZNK12_GLOBAL__N_127TestLinalgElementwiseFusion11getArgumentEv called 116175 returned 100% blocks executed 100%
   116175:   66:  StringRef getArgument() const final {
   116175:   67:    return "test-linalg-elementwise-fusion-patterns";
        -:   68:  }
function _ZNK12_GLOBAL__N_127TestLinalgElementwiseFusion14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   69:  StringRef getDescription() const final {
   116161:   70:    return "Test Linalg element wise operation fusion patterns";
        -:   71:  }
        -:   72:
        -:   73:  Option<bool> fuseGenericOps{
        -:   74:      *this, "fuse-generic-ops",
        -:   75:      llvm::cl::desc("Test fusion of generic operations."),
        -:   76:      llvm::cl::init(false)};
        -:   77:
        -:   78:  Option<bool> fuseWithReshapeByExpansion{
        -:   79:      *this, "fuse-with-reshape-by-expansion",
        -:   80:      llvm::cl::desc(
        -:   81:          "Test fusion of generic operations with reshape by expansion"),
        -:   82:      llvm::cl::init(false)};
        -:   83:
        -:   84:  Option<bool> controlFuseByExpansion{
        -:   85:      *this, "control-fusion-by-expansion",
        -:   86:      llvm::cl::desc(
        -:   87:          "Test controlling fusion of reshape with generic op by expansion"),
        -:   88:      llvm::cl::init(false)};
        -:   89:
        -:   90:  Option<bool> fuseWithReshapeByCollapsing{
        -:   91:      *this, "fuse-with-reshape-by-collapsing",
        -:   92:      llvm::cl::desc("Test linalg expand_shape -> generic fusion patterns that "
        -:   93:                     "collapse the iteration space of the consumer"),
        -:   94:      llvm::cl::init(false)};
        -:   95:
        -:   96:  Option<bool> fuseWithReshapeByCollapsingWithControlFn{
        -:   97:      *this, "fuse-with-reshape-by-collapsing-control",
        -:   98:      llvm::cl::desc("Test controlling the linalg expand_shape -> generic "
        -:   99:                     "fusion patterns that "
        -:  100:                     "collapse the iteration space of the consumer"),
        -:  101:      llvm::cl::init(false)};
        -:  102:  ListOption<int64_t> collapseDimensions{
        -:  103:      *this, "collapse-dimensions-control",
        -:  104:      llvm::cl::desc("Test controlling dimension collapse pattern")};
        -:  105:
function _ZN12_GLOBAL__N_127TestLinalgElementwiseFusion14runOnOperationEv called 429 returned 100% blocks executed 13%
      429:  106:  void runOnOperation() override {
      429:  107:    MLIRContext *context = &this->getContext();
call    0 returned 100%
      428:  108:    func::FuncOp funcOp = this->getOperation();
call    0 returned 100%
        -:  109:
      427:  110:    if (fuseGenericOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  111:      RewritePatternSet fusionPatterns(context);
call    0 never executed
    #####:  112:      linalg::populateElementwiseOpsFusionPatterns(fusionPatterns,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  113:                                                   setFusedOpOperandLimit<4>);
        -:  114:
    #####:  115:      (void)applyPatternsAndFoldGreedily(funcOp.getBody(),
    #####:  116:                                         std::move(fusionPatterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  117:      return;
call    0 never executed
        -:  118:    }
        -:  119:
      427:  120:    if (fuseWithReshapeByExpansion) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  121:      RewritePatternSet fusionPatterns(context);
call    0 never executed
    #####:  122:      linalg::populateFoldReshapeOpsByExpansionPatterns(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  123:          fusionPatterns, [](OpOperand * /*fusedOperand*/) { return true; });
    #####:  124:      if (failed(applyPatternsAndFoldGreedily(funcOp.getBody(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  125:                                              std::move(fusionPatterns))))
call    0 never executed
    #####:  126:        return signalPassFailure();
call    0 never executed
        -:  127:      return;
        -:  128:    }
        -:  129:
      427:  130:    if (controlFuseByExpansion) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  131:      RewritePatternSet fusionPatterns(context);
call    0 never executed
        -:  132:
    #####:  133:      linalg::ControlFusionFn controlReshapeFusionFn =
function _ZZN12_GLOBAL__N_127TestLinalgElementwiseFusion14runOnOperationEvENKUlPN4mlir9OpOperandEE0_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  134:          [](OpOperand *fusedOperand) {
    #####:  135:            Operation *producer = fusedOperand->get().getDefiningOp();
call    0 never executed
    #####:  136:            if (!producer)
branch  0 never executed
branch  1 never executed
        -:  137:              return false;
        -:  138:
    #####:  139:            if (auto collapseOp = dyn_cast<tensor::CollapseShapeOp>(producer)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:              if (!collapseOp.getSrc().getDefiningOp<linalg::LinalgOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  141:                return false;
        -:  142:              }
        -:  143:            }
        -:  144:
    #####:  145:            Operation *consumer = fusedOperand->getOwner();
call    0 never executed
    #####:  146:            if (auto expandOp = dyn_cast<tensor::ExpandShapeOp>(consumer)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  147:              if (expandOp->hasOneUse()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:                OpOperand &use = *expandOp->getUses().begin();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  149:                auto linalgOp = dyn_cast<linalg::LinalgOp>(use.getOwner());
call    0 never executed
    #####:  150:                if (linalgOp && linalgOp.isDpsInit(&use))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  151:                  return true;
        -:  152:              }
    #####:  153:              return false;
        -:  154:            }
        -:  155:            return true;
    #####:  156:          };
call    0 never executed
call    1 never executed
        -:  157:
    #####:  158:      linalg::populateFoldReshapeOpsByExpansionPatterns(fusionPatterns,
call    0 never executed
        -:  159:                                                        controlReshapeFusionFn);
    #####:  160:      (void)applyPatternsAndFoldGreedily(funcOp.getBody(),
    #####:  161:                                         std::move(fusionPatterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  162:      return;
branch  0 never executed
branch  1 never executed
        -:  163:    }
        -:  164:
      427:  165:    if (fuseWithReshapeByCollapsing) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  166:      RewritePatternSet patterns(context);
call    0 never executed
    #####:  167:      linalg::populateFoldReshapeOpsByCollapsingPatterns(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:          patterns, [](OpOperand * /*fusedOperand */) { return true; });
    #####:  169:      (void)applyPatternsAndFoldGreedily(funcOp.getBody(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  170:    }
        -:  171:
      427:  172:    if (fuseWithReshapeByCollapsingWithControlFn) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  173:      RewritePatternSet patterns(context);
call    0 never executed
function _ZZN12_GLOBAL__N_127TestLinalgElementwiseFusion14runOnOperationEvENKUlPN4mlir9OpOperandEE2_clES3_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  174:      linalg::ControlFusionFn controlFn = [](OpOperand *fusedOperand) -> bool {
    #####:  175:        Operation *producer = fusedOperand->get().getDefiningOp();
call    0 never executed
    #####:  176:        if (isa<tensor::ExpandShapeOp>(producer)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  177:          // Skip fusing the first operand.
    #####:  178:          return fusedOperand->getOperandNumber();
call    0 never executed
        -:  179:        }
        -:  180:        return true;
    #####:  181:      };
call    0 never executed
call    1 never executed
    #####:  182:      linalg::populateFoldReshapeOpsByCollapsingPatterns(patterns, controlFn);
call    0 never executed
    #####:  183:      (void)applyPatternsAndFoldGreedily(funcOp.getBody(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  184:    }
        -:  185:
      427:  186:    if (!collapseDimensions.empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  187:      SmallVector<int64_t, 2> dims(collapseDimensions.begin(),
    #####:  188:                                   collapseDimensions.end());
call    0 never executed
    #####:  189:      linalg::GetCollapsableDimensionsFn collapseFn =
    #####:  190:          [&dims](linalg::GenericOp op) {
    #####:  191:            SmallVector<ReassociationIndices> reassociations;
call    0 never executed
    #####:  192:            reassociations.emplace_back(dims);
call    0 never executed
    #####:  193:            return reassociations;
    #####:  194:          };
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:      RewritePatternSet patterns(context);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  196:      linalg::populateCollapseDimensions(patterns, collapseFn);
call    0 never executed
    #####:  197:      (void)applyPatternsAndFoldGreedily(funcOp.getBody(), std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  198:    }
        -:  199:  }
        -:  200:};
        -:  201:
        -:  202:} // namespace
        -:  203:
        -:  204:namespace mlir {
        -:  205:namespace test {
function _ZN4mlir4test35registerTestLinalgElementwiseFusionEv called 116161 returned 100% blocks executed 100%
   116161:  206:void registerTestLinalgElementwiseFusion() {
   116161:  207:  PassRegistration<TestLinalgElementwiseFusion>();
call    0 returned 100%
   116161:  208:}
        -:  209:} // namespace test
        -:  210:} // namespace mlir
