        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/SparseTensor/IR/Enums.h
        -:    0:Graph:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/Sparsification.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SparseTensor/Transforms/CMakeFiles/obj.MLIRSparseTensorTransforms.dir/Sparsification.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- Enums.h - Enums for the SparseTensor dialect -------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Typedefs and enums shared between MLIR code for manipulating the
        -:   10:// IR, and the lightweight runtime support library for sparse tensor
        -:   11:// manipulations.  That is, all the enums are used to define the API
        -:   12:// of the runtime library and hence are also needed when generating
        -:   13:// calls into the runtime library.  Moveover, the `DimLevelType` enum
        -:   14:// is also used as the internal IR encoding of dimension level types,
        -:   15:// to avoid code duplication (e.g., for the predicates).
        -:   16://
        -:   17:// This file also defines x-macros <https://en.wikipedia.org/wiki/X_Macro>
        -:   18:// so that we can generate variations of the public functions for each
        -:   19:// supported primary- and/or overhead-type.
        -:   20://
        -:   21:// Because this file defines a library which is a dependency of the
        -:   22:// runtime library itself, this file must not depend on any MLIR internals
        -:   23:// (e.g., operators, attributes, ArrayRefs, etc) lest the runtime library
        -:   24:// inherit those dependencies.
        -:   25://
        -:   26://===----------------------------------------------------------------------===//
        -:   27:
        -:   28:#ifndef MLIR_DIALECT_SPARSETENSOR_IR_ENUMS_H
        -:   29:#define MLIR_DIALECT_SPARSETENSOR_IR_ENUMS_H
        -:   30:
        -:   31:// NOTE: Client code will need to include "mlir/ExecutionEngine/Float16bits.h"
        -:   32:// if they want to use the `MLIR_SPARSETENSOR_FOREVERY_V` macro.
        -:   33:
        -:   34:#include <cinttypes>
        -:   35:#include <complex>
        -:   36:
        -:   37:namespace mlir {
        -:   38:namespace sparse_tensor {
        -:   39:
        -:   40:/// This type is used in the public API at all places where MLIR expects
        -:   41:/// values with the built-in type "index".  For now, we simply assume that
        -:   42:/// type is 64-bit, but targets with different "index" bit widths should
        -:   43:/// link with an alternatively built runtime support library.
        -:   44:// TODO: support such targets?
        -:   45:using index_type = uint64_t;
        -:   46:
        -:   47:/// Encoding of overhead types (both pointer overhead and indices
        -:   48:/// overhead), for "overloading" @newSparseTensor.
        -:   49:enum class OverheadType : uint32_t {
        -:   50:  kIndex = 0,
        -:   51:  kU64 = 1,
        -:   52:  kU32 = 2,
        -:   53:  kU16 = 3,
        -:   54:  kU8 = 4
        -:   55:};
        -:   56:
        -:   57:// This x-macro calls its argument on every overhead type which has
        -:   58:// fixed-width.  It excludes `index_type` because that type is often
        -:   59:// handled specially (e.g., by translating it into the architecture-dependent
        -:   60:// equivalent fixed-width overhead type).
        -:   61:#define MLIR_SPARSETENSOR_FOREVERY_FIXED_O(DO)                                 \
        -:   62:  DO(64, uint64_t)                                                             \
        -:   63:  DO(32, uint32_t)                                                             \
        -:   64:  DO(16, uint16_t)                                                             \
        -:   65:  DO(8, uint8_t)
        -:   66:
        -:   67:// This x-macro calls its argument on every overhead type, including
        -:   68:// `index_type`.
        -:   69:#define MLIR_SPARSETENSOR_FOREVERY_O(DO)                                       \
        -:   70:  MLIR_SPARSETENSOR_FOREVERY_FIXED_O(DO)                                       \
        -:   71:  DO(0, index_type)
        -:   72:
        -:   73:// These are not just shorthands but indicate the particular
        -:   74:// implementation used (e.g., as opposed to C99's `complex double`,
        -:   75:// or MLIR's `ComplexType`).
        -:   76:using complex64 = std::complex<double>;
        -:   77:using complex32 = std::complex<float>;
        -:   78:
        -:   79:/// Encoding of the elemental type, for "overloading" @newSparseTensor.
        -:   80:enum class PrimaryType : uint32_t {
        -:   81:  kF64 = 1,
        -:   82:  kF32 = 2,
        -:   83:  kF16 = 3,
        -:   84:  kBF16 = 4,
        -:   85:  kI64 = 5,
        -:   86:  kI32 = 6,
        -:   87:  kI16 = 7,
        -:   88:  kI8 = 8,
        -:   89:  kC64 = 9,
        -:   90:  kC32 = 10
        -:   91:};
        -:   92:
        -:   93:// This x-macro includes all `V` types.
        -:   94:#define MLIR_SPARSETENSOR_FOREVERY_V(DO)                                       \
        -:   95:  DO(F64, double)                                                              \
        -:   96:  DO(F32, float)                                                               \
        -:   97:  DO(F16, f16)                                                                 \
        -:   98:  DO(BF16, bf16)                                                               \
        -:   99:  DO(I64, int64_t)                                                             \
        -:  100:  DO(I32, int32_t)                                                             \
        -:  101:  DO(I16, int16_t)                                                             \
        -:  102:  DO(I8, int8_t)                                                               \
        -:  103:  DO(C64, complex64)                                                           \
        -:  104:  DO(C32, complex32)
        -:  105:
        -:  106:constexpr bool isFloatingPrimaryType(PrimaryType valTy) {
        -:  107:  return PrimaryType::kF64 <= valTy && valTy <= PrimaryType::kBF16;
        -:  108:}
        -:  109:
        -:  110:constexpr bool isIntegralPrimaryType(PrimaryType valTy) {
        -:  111:  return PrimaryType::kI64 <= valTy && valTy <= PrimaryType::kI8;
        -:  112:}
        -:  113:
        -:  114:constexpr bool isRealPrimaryType(PrimaryType valTy) {
        -:  115:  return PrimaryType::kF64 <= valTy && valTy <= PrimaryType::kI8;
        -:  116:}
        -:  117:
        -:  118:constexpr bool isComplexPrimaryType(PrimaryType valTy) {
        -:  119:  return PrimaryType::kC64 <= valTy && valTy <= PrimaryType::kC32;
        -:  120:}
        -:  121:
        -:  122:/// The actions performed by @newSparseTensor.
        -:  123:enum class Action : uint32_t {
        -:  124:  kEmpty = 0,
        -:  125:  kFromFile = 1,
        -:  126:  kFromCOO = 2,
        -:  127:  kSparseToSparse = 3,
        -:  128:  kEmptyCOO = 4,
        -:  129:  kToCOO = 5,
        -:  130:  kToIterator = 6,
        -:  131:};
        -:  132:
        -:  133:/// This enum defines all the sparse representations supportable by
        -:  134:/// the SparseTensor dialect.  We use a lightweight encoding to encode
        -:  135:/// both the "format" per se (dense, compressed, singleton) as well as
        -:  136:/// the "properties" (ordered, unique).  The encoding is chosen for
        -:  137:/// performance of the runtime library, and thus may change in future
        -:  138:/// versions; consequently, client code should use the predicate functions
        -:  139:/// defined below, rather than relying on knowledge about the particular
        -:  140:/// binary encoding.
        -:  141:///
        -:  142:/// The `Undef` "format" is a special value used internally for cases
        -:  143:/// where we need to store an undefined or indeterminate `DimLevelType`.
        -:  144:/// It should not be used externally, since it does not indicate an
        -:  145:/// actual/representable format.
        -:  146:enum class DimLevelType : uint8_t {
        -:  147:  Undef = 0,           // 0b000_00
        -:  148:  Dense = 4,           // 0b001_00
        -:  149:  Compressed = 8,      // 0b010_00
        -:  150:  CompressedNu = 9,    // 0b010_01
        -:  151:  CompressedNo = 10,   // 0b010_10
        -:  152:  CompressedNuNo = 11, // 0b010_11
        -:  153:  Singleton = 16,      // 0b100_00
        -:  154:  SingletonNu = 17,    // 0b100_01
        -:  155:  SingletonNo = 18,    // 0b100_10
        -:  156:  SingletonNuNo = 19,  // 0b100_11
        -:  157:};
        -:  158:
        -:  159:/// Check that the `DimLevelType` contains a valid (possibly undefined) value.
     1874:  160:constexpr bool isValidDLT(DimLevelType dlt) {
     1874:  161:  const uint8_t formatBits = static_cast<uint8_t>(dlt) >> 2;
     1874:  162:  const uint8_t propertyBits = static_cast<uint8_t>(dlt) & 3;
        -:  163:  // If undefined or dense, then must be unique and ordered.
        -:  164:  // Otherwise, the format must be one of the known ones.
    1874*:  165:  return (formatBits <= 1) ? (propertyBits == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    #####:  166:                           : (formatBits == 2 || formatBits == 4);
        -:  167:}
        -:  168:
        -:  169:/// Check if the `DimLevelType` is the special undefined value.
    1874*:  170:constexpr bool isUndefDLT(DimLevelType dlt) {
    1874*:  171:  return dlt == DimLevelType::Undef;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        -:  172:}
        -:  173:
        -:  174:/// Check if the `DimLevelType` is dense.
    #####:  175:constexpr bool isDenseDLT(DimLevelType dlt) {
    #####:  176:  return dlt == DimLevelType::Dense;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -:  177:}
        -:  178:
        -:  179:// We use the idiom `(dlt & ~3) == format` in order to only return true
        -:  180:// for valid DLTs.  Whereas the `dlt & format` idiom is a bit faster but
        -:  181:// can return false-positives on invalid DLTs.
        -:  182:
        -:  183:/// Check if the `DimLevelType` is compressed (regardless of properties).
    #####:  184:constexpr bool isCompressedDLT(DimLevelType dlt) {
    #####:  185:  return (static_cast<uint8_t>(dlt) & ~3) ==
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  186:         static_cast<uint8_t>(DimLevelType::Compressed);
        -:  187:}
        -:  188:
        -:  189:/// Check if the `DimLevelType` is singleton (regardless of properties).
    #####:  190:constexpr bool isSingletonDLT(DimLevelType dlt) {
    #####:  191:  return (static_cast<uint8_t>(dlt) & ~3) ==
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  192:         static_cast<uint8_t>(DimLevelType::Singleton);
        -:  193:}
        -:  194:
        -:  195:/// Check if the `DimLevelType` is ordered (regardless of storage format).
        -:  196:constexpr bool isOrderedDLT(DimLevelType dlt) {
        -:  197:  return !(static_cast<uint8_t>(dlt) & 2);
        -:  198:}
        -:  199:
        -:  200:/// Check if the `DimLevelType` is unique (regardless of storage format).
        -:  201:constexpr bool isUniqueDLT(DimLevelType dlt) {
        -:  202:  return !(static_cast<uint8_t>(dlt) & 1);
        -:  203:}
        -:  204:
        -:  205:// Ensure the above predicates work as intended.
        -:  206:static_assert((isValidDLT(DimLevelType::Undef) &&
        -:  207:               isValidDLT(DimLevelType::Dense) &&
        -:  208:               isValidDLT(DimLevelType::Compressed) &&
        -:  209:               isValidDLT(DimLevelType::CompressedNu) &&
        -:  210:               isValidDLT(DimLevelType::CompressedNo) &&
        -:  211:               isValidDLT(DimLevelType::CompressedNuNo) &&
        -:  212:               isValidDLT(DimLevelType::Singleton) &&
        -:  213:               isValidDLT(DimLevelType::SingletonNu) &&
        -:  214:               isValidDLT(DimLevelType::SingletonNo) &&
        -:  215:               isValidDLT(DimLevelType::SingletonNuNo)),
        -:  216:              "isValidDLT definition is broken");
        -:  217:
        -:  218:static_assert((!isCompressedDLT(DimLevelType::Dense) &&
        -:  219:               isCompressedDLT(DimLevelType::Compressed) &&
        -:  220:               isCompressedDLT(DimLevelType::CompressedNu) &&
        -:  221:               isCompressedDLT(DimLevelType::CompressedNo) &&
        -:  222:               isCompressedDLT(DimLevelType::CompressedNuNo) &&
        -:  223:               !isCompressedDLT(DimLevelType::Singleton) &&
        -:  224:               !isCompressedDLT(DimLevelType::SingletonNu) &&
        -:  225:               !isCompressedDLT(DimLevelType::SingletonNo) &&
        -:  226:               !isCompressedDLT(DimLevelType::SingletonNuNo)),
        -:  227:              "isCompressedDLT definition is broken");
        -:  228:
        -:  229:static_assert((!isSingletonDLT(DimLevelType::Dense) &&
        -:  230:               !isSingletonDLT(DimLevelType::Compressed) &&
        -:  231:               !isSingletonDLT(DimLevelType::CompressedNu) &&
        -:  232:               !isSingletonDLT(DimLevelType::CompressedNo) &&
        -:  233:               !isSingletonDLT(DimLevelType::CompressedNuNo) &&
        -:  234:               isSingletonDLT(DimLevelType::Singleton) &&
        -:  235:               isSingletonDLT(DimLevelType::SingletonNu) &&
        -:  236:               isSingletonDLT(DimLevelType::SingletonNo) &&
        -:  237:               isSingletonDLT(DimLevelType::SingletonNuNo)),
        -:  238:              "isSingletonDLT definition is broken");
        -:  239:
        -:  240:static_assert((isOrderedDLT(DimLevelType::Dense) &&
        -:  241:               isOrderedDLT(DimLevelType::Compressed) &&
        -:  242:               isOrderedDLT(DimLevelType::CompressedNu) &&
        -:  243:               !isOrderedDLT(DimLevelType::CompressedNo) &&
        -:  244:               !isOrderedDLT(DimLevelType::CompressedNuNo) &&
        -:  245:               isOrderedDLT(DimLevelType::Singleton) &&
        -:  246:               isOrderedDLT(DimLevelType::SingletonNu) &&
        -:  247:               !isOrderedDLT(DimLevelType::SingletonNo) &&
        -:  248:               !isOrderedDLT(DimLevelType::SingletonNuNo)),
        -:  249:              "isOrderedDLT definition is broken");
        -:  250:
        -:  251:static_assert((isUniqueDLT(DimLevelType::Dense) &&
        -:  252:               isUniqueDLT(DimLevelType::Compressed) &&
        -:  253:               !isUniqueDLT(DimLevelType::CompressedNu) &&
        -:  254:               isUniqueDLT(DimLevelType::CompressedNo) &&
        -:  255:               !isUniqueDLT(DimLevelType::CompressedNuNo) &&
        -:  256:               isUniqueDLT(DimLevelType::Singleton) &&
        -:  257:               !isUniqueDLT(DimLevelType::SingletonNu) &&
        -:  258:               isUniqueDLT(DimLevelType::SingletonNo) &&
        -:  259:               !isUniqueDLT(DimLevelType::SingletonNuNo)),
        -:  260:              "isUniqueDLT definition is broken");
        -:  261:
        -:  262:} // namespace sparse_tensor
        -:  263:} // namespace mlir
        -:  264:
        -:  265:#endif // MLIR_DIALECT_SPARSETENSOR_IR_ENUMS_H
