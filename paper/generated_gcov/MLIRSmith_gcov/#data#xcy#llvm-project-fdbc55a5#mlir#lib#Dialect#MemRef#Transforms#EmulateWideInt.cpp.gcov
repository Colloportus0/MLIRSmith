        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/MemRef/Transforms/EmulateWideInt.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/MemRef/Transforms/CMakeFiles/obj.MLIRMemRefTransforms.dir/EmulateWideInt.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/MemRef/Transforms/CMakeFiles/obj.MLIRMemRefTransforms.dir/EmulateWideInt.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- EmulateWideInt.cpp - Wide integer operation emulation ----*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/Dialect/Arith/Transforms/Passes.h"
        -:   11:#include "mlir/Dialect/Arith/Transforms/WideIntEmulationConverter.h"
        -:   12:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   13:#include "mlir/Dialect/MemRef/Transforms/Passes.h"
        -:   14:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   15:#include "mlir/Transforms/DialectConversion.h"
        -:   16:#include "llvm/Support/FormatVariadic.h"
        -:   17:#include "llvm/Support/MathExtras.h"
        -:   18:#include <cassert>
        -:   19:
        -:   20:namespace mlir::memref {
        -:   21:#define GEN_PASS_DEF_MEMREFEMULATEWIDEINT
        -:   22:#include "mlir/Dialect/MemRef/Transforms/Passes.h.inc"
        -:   23:} // namespace mlir::memref
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:namespace {
        -:   28:
        -:   29://===----------------------------------------------------------------------===//
        -:   30:// ConvertMemRefAlloc
        -:   31://===----------------------------------------------------------------------===//
        -:   32:
        -:   33:struct ConvertMemRefAlloc final : OpConversionPattern<memref::AllocOp> {
        -:   34:  using OpConversionPattern::OpConversionPattern;
        -:   35:
        -:   36:  LogicalResult
function _ZNK12_GLOBAL__N_118ConvertMemRefAlloc15matchAndRewriteEN4mlir6memref7AllocOpENS2_14AllocOpAdaptorERNS1_25ConversionPatternRewriterE called 1231 returned 100% blocks executed 69%
     1231:   37:  matchAndRewrite(memref::AllocOp op, OpAdaptor adaptor,
        -:   38:                  ConversionPatternRewriter &rewriter) const override {
     1231:   39:    Type newTy = getTypeConverter()->convertType(op.getType());
call    0 returned 100%
call    1 returned 100%
     1231:   40:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:      return rewriter.notifyMatchFailure(
    #####:   42:          op->getLoc(),
call    0 never executed
    #####:   43:          llvm::formatv("failed to convert memref type: {0}", op.getType()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   44:
     1231:   45:    rewriter.replaceOpWithNewOp<memref::AllocOp>(
     1231:   46:        op, newTy, adaptor.getDynamicSizes(), adaptor.getSymbolOperands(),
call    0 returned 100%
call    1 returned 100%
     2462:   47:        adaptor.getAlignmentAttr());
call    0 returned 100%
call    1 returned 100%
     1231:   48:    return success();
        -:   49:  }
        -:   50:};
        -:   51:
        -:   52://===----------------------------------------------------------------------===//
        -:   53:// ConvertMemRefLoad
        -:   54://===----------------------------------------------------------------------===//
        -:   55:
        -:   56:struct ConvertMemRefLoad final : OpConversionPattern<memref::LoadOp> {
        -:   57:  using OpConversionPattern::OpConversionPattern;
        -:   58:
        -:   59:  LogicalResult
function _ZNK12_GLOBAL__N_117ConvertMemRefLoad15matchAndRewriteEN4mlir6memref6LoadOpENS2_13LoadOpAdaptorERNS1_25ConversionPatternRewriterE called 16 returned 100% blocks executed 64%
       16:   60:  matchAndRewrite(memref::LoadOp op, OpAdaptor adaptor,
        -:   61:                  ConversionPatternRewriter &rewriter) const override {
       16:   62:    Type newResTy = getTypeConverter()->convertType(op.getType());
call    0 returned 100%
       16:   63:    if (!newResTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   64:      return rewriter.notifyMatchFailure(
    #####:   65:          op->getLoc(), llvm::formatv("failed to convert memref type: {0}",
call    0 never executed
call    1 never executed
    #####:   66:                                      op.getMemRefType()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   67:
       16:   68:    rewriter.replaceOpWithNewOp<memref::LoadOp>(
       16:   69:        op, newResTy, adaptor.getMemref(), adaptor.getIndices());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       16:   70:    return success();
        -:   71:  }
        -:   72:};
        -:   73:
        -:   74://===----------------------------------------------------------------------===//
        -:   75:// ConvertMemRefStore
        -:   76://===----------------------------------------------------------------------===//
        -:   77:
        -:   78:struct ConvertMemRefStore final : OpConversionPattern<memref::StoreOp> {
        -:   79:  using OpConversionPattern::OpConversionPattern;
        -:   80:
        -:   81:  LogicalResult
function _ZNK12_GLOBAL__N_118ConvertMemRefStore15matchAndRewriteEN4mlir6memref7StoreOpENS2_14StoreOpAdaptorERNS1_25ConversionPatternRewriterE called 17 returned 100% blocks executed 69%
       17:   82:  matchAndRewrite(memref::StoreOp op, OpAdaptor adaptor,
        -:   83:                  ConversionPatternRewriter &rewriter) const override {
       17:   84:    Type newTy = getTypeConverter()->convertType(op.getMemRefType());
call    0 returned 100%
call    1 returned 100%
       17:   85:    if (!newTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   86:      return rewriter.notifyMatchFailure(
    #####:   87:          op->getLoc(), llvm::formatv("failed to convert memref type: {0}",
call    0 never executed
call    1 never executed
    #####:   88:                                      op.getMemRefType()));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   89:
       17:   90:    rewriter.replaceOpWithNewOp<memref::StoreOp>(
       17:   91:        op, adaptor.getValue(), adaptor.getMemref(), adaptor.getIndices());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
       17:   92:    return success();
        -:   93:  }
        -:   94:};
        -:   95:
        -:   96://===----------------------------------------------------------------------===//
        -:   97:// Pass Definition
        -:   98://===----------------------------------------------------------------------===//
        -:   99:
  116717*:  100:struct EmulateWideIntPass final
call    0 never executed
call    1 returned 100%
        -:  101:    : memref::impl::MemRefEmulateWideIntBase<EmulateWideIntPass> {
    #####:  102:  using MemRefEmulateWideIntBase::MemRefEmulateWideIntBase;
call    0 never executed
        -:  103:
function _ZN12_GLOBAL__N_118EmulateWideIntPass14runOnOperationEv called 416 returned 100% blocks executed 89%
      416:  104:  void runOnOperation() override {
     832*:  105:    if (!llvm::isPowerOf2_32(widestIntSupported) || widestIntSupported < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    #####:  106:      signalPassFailure();
call    0 never executed
    #####:  107:      return;
        -:  108:    }
        -:  109:
      416:  110:    Operation *op = getOperation();
branch  0 taken 0%
branch  1 taken 100%
      416:  111:    MLIRContext *ctx = op->getContext();
call    0 returned 100%
        -:  112:
      832:  113:    arith::WideIntEmulationConverter typeConverter(widestIntSupported);
call    0 returned 100%
      832:  114:    memref::populateMemRefWideIntEmulationConversions(typeConverter);
      416:  115:    ConversionTarget target(*ctx);
call    0 returned 100%
      416:  116:    target.addDynamicallyLegalDialect<
      416:  117:        arith::ArithDialect, memref::MemRefDialect, vector::VectorDialect>(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   506681:  118:        [&typeConverter](Operation *op) { return typeConverter.isLegal(op); });
call    0 returned 100%
        -:  119:
      832:  120:    RewritePatternSet patterns(ctx);
call    0 returned 100%
call    1 returned 100%
        -:  121:    // Add common pattenrs to support contants, functions, etc.
      416:  122:    arith::populateArithWideIntEmulationPatterns(typeConverter, patterns);
call    0 returned 100%
        -:  123:
      832:  124:    memref::populateMemRefWideIntEmulationPatterns(typeConverter, patterns);
        -:  125:
      416:  126:    if (failed(applyPartialConversion(op, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
      413:  127:      signalPassFailure();
call    0 returned 100%
        -:  128:  }
        -:  129:};
        -:  130:
        -:  131:} // end anonymous namespace
        -:  132:
        -:  133://===----------------------------------------------------------------------===//
        -:  134:// Public Interface Definition
        -:  135://===----------------------------------------------------------------------===//
        -:  136:
function _ZN4mlir6memref38populateMemRefWideIntEmulationPatternsERNS_5arith25WideIntEmulationConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     416*:  137:void memref::populateMemRefWideIntEmulationPatterns(
        -:  138:    arith::WideIntEmulationConverter &typeConverter,
        -:  139:    RewritePatternSet &patterns) {
        -:  140:  // Populate `memref.*` conversion patterns.
     416*:  141:  patterns.add<ConvertMemRefAlloc, ConvertMemRefLoad, ConvertMemRefStore>(
     416*:  142:      typeConverter, patterns.getContext());
call    0 never executed
call    1 returned 100%
call    2 returned 100%
    #####:  143:}
        -:  144:
function _ZN4mlir6memref41populateMemRefWideIntEmulationConversionsERNS_5arith25WideIntEmulationConverterE called 0 returned 0% blocks executed 0%
     416*:  145:void memref::populateMemRefWideIntEmulationConversions(
        -:  146:    arith::WideIntEmulationConverter &typeConverter) {
     416*:  147:  typeConverter.addConversion(
call    0 never executed
call    1 returned 100%
call    2 returned 100%
function _ZZN4mlir6memref41populateMemRefWideIntEmulationConversionsERNS_5arith25WideIntEmulationConverterEENKUlNS_10MemRefTypeEE_clES4_.isra.0 called 12809 returned 100% blocks executed 93%
    12809:  148:      [&typeConverter](MemRefType ty) -> Optional<Type> {
    12809:  149:        auto intTy = ty.getElementType().dyn_cast<IntegerType>();
call    0 returned 100%
call    1 returned 100%
    12809:  150:        if (!intTy)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
     4712:  151:          return ty;
        -:  152:
     8097:  153:        if (intTy.getIntOrFloatBitWidth() <=
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
     8097:  154:            typeConverter.getMaxTargetIntBitWidth())
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
     6326:  155:          return ty;
        -:  156:
     1771:  157:        Type newElemTy = typeConverter.convertType(intTy);
call    0 returned 100%
     1771:  158:        if (!newElemTy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  159:          return None;
        -:  160:
     1771:  161:        return ty.cloneWith(None, newElemTy);
call    0 returned 100%
        -:  162:      });
    #####:  163:}
