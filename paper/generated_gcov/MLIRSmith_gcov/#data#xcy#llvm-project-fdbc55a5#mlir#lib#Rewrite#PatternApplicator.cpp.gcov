        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Rewrite/PatternApplicator.cpp
        -:    0:Graph:../tools/mlir/lib/Rewrite/CMakeFiles/obj.MLIRRewrite.dir/PatternApplicator.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Rewrite/CMakeFiles/obj.MLIRRewrite.dir/PatternApplicator.cpp.gcda
        -:    0:Runs:116177
        -:    1://===- PatternApplicator.cpp - Pattern Application Engine -------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements an applicator that applies pattern rewrites based upon a
        -:   10:// user defined cost model.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Rewrite/PatternApplicator.h"
        -:   15:#include "ByteCode.h"
        -:   16:#include "llvm/Support/Debug.h"
        -:   17:
        -:   18:#define DEBUG_TYPE "pattern-application"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:using namespace mlir::detail;
        -:   22:
function _ZN4mlir17PatternApplicatorC2ERKNS_23FrozenRewritePatternSetE called 50597 returned 100% blocks executed 78%
    50597:   23:PatternApplicator::PatternApplicator(
    50597:   24:    const FrozenRewritePatternSet &frozenPatternList)
    50597:   25:    : frozenPatternList(frozenPatternList) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
    50622:   26:  if (const PDLByteCode *bytecode = frozenPatternList.getPDLByteCode()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      124:   27:    mutableByteCodeState = std::make_unique<PDLByteCodeMutableState>();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      124:   28:    bytecode->initializeMutableState(*mutableByteCodeState);
call    0 returned 100%
        -:   29:  }
    50622:   30:}
        -:   31:PatternApplicator::~PatternApplicator() = default;
        -:   32:
        -:   33:#ifndef NDEBUG
        -:   34:/// Log a message for a pattern that is impossible to match.
function _ZL20logImpossibleToMatchRKN4mlir7PatternE called 0 returned 0% blocks executed 0%
    #####:   35:static void logImpossibleToMatch(const Pattern &pattern) {
    #####:   36:  llvm::dbgs() << "Ignoring pattern '" << pattern.getRootKind()
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   37:               << "' because it is impossible to match or cannot lead "
    #####:   38:                  "to legal IR (by cost model)\n";
call    0 never executed
    #####:   39:}
        -:   40:
        -:   41:/// Log IR after pattern application.
  8431397:   42:static Operation *getDumpRootOp(Operation *op) {
  8431397:   43:  return op->getParentWithTrait<mlir::OpTrait::IsIsolatedFromAbove>();
        -:   44:}
function _ZL30logSucessfulPatternApplicationPN4mlir9OperationE called 0 returned 0% blocks executed 0%
    #####:   45:static void logSucessfulPatternApplication(Operation *op) {
    #####:   46:  llvm::dbgs() << "// *** IR Dump After Pattern Application ***\n";
call    0 never executed
call    1 never executed
    #####:   47:  op->dump();
call    0 never executed
    #####:   48:  llvm::dbgs() << "\n\n";
call    0 never executed
call    1 never executed
    #####:   49:}
        -:   50:#endif
        -:   51:
function _ZN4mlir17PatternApplicator14applyCostModelEN4llvm12function_refIFNS_14PatternBenefitERKNS_7PatternEEEE called 50679 returned 100% blocks executed 83%
    50679:   52:void PatternApplicator::applyCostModel(CostModel model) {
        -:   53:  // Apply the cost model to the bytecode patterns first, and then the native
        -:   54:  // patterns.
    50679:   55:  if (const PDLByteCode *bytecode = frozenPatternList.getPDLByteCode()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      372:   56:    for (const auto &it : llvm::enumerate(bytecode->getPatterns()))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
      248:   57:      mutableByteCodeState->updatePatternBenefit(it.index(), model(it.value()));
call    0 returned 100%
call    1 returned 100%
        -:   58:  }
        -:   59:
        -:   60:  // Copy over the patterns so that we can sort by benefit based on the cost
        -:   61:  // model. Patterns that are already impossible to match are ignored.
    50679:   62:  patterns.clear();
call    0 returned 100%
   849979:   63:  for (const auto &it : frozenPatternList.getOpSpecificNativePatterns()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
call    5 returned 100%
call    6 returned 100%
  1816273:   64:    for (const RewritePattern *pattern : it.second) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  1067643:   65:      if (pattern->getBenefit().isImpossibleToMatch())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   66:        LLVM_DEBUG(logImpossibleToMatch(*pattern));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   67:      else
  1067643:   68:        patterns[it.first].push_back(pattern);
call    0 returned 100%
call    1 returned 100%
        -:   69:    }
        -:   70:  }
    50670:   71:  anyOpPatterns.clear();
     4400:   72:  for (const RewritePattern &pattern :
    55070:   73:       frozenPatternList.getMatchAnyOpNativePatterns()) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
     4394:   74:    if (pattern.getBenefit().isImpossibleToMatch())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:      LLVM_DEBUG(logImpossibleToMatch(pattern));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   76:    else
     4394:   77:      anyOpPatterns.push_back(&pattern);
call    0 returned 100%
        -:   78:  }
        -:   79:
        -:   80:  // Sort the patterns using the provided cost model.
    50676:   81:  llvm::SmallDenseMap<const Pattern *, PatternBenefit> benefits;
call    0 returned 100%
function _ZZN4mlir17PatternApplicator14applyCostModelEN4llvm12function_refIFNS_14PatternBenefitERKNS_7PatternEEEEENKUlPS5_S9_E_clES9_S9_.isra.0 called 518126 returned 100% blocks executed 100%
   518126:   82:  auto cmp = [&benefits](const Pattern *lhs, const Pattern *rhs) {
   518126:   83:    return benefits[lhs] > benefits[rhs];
call    0 returned 100%
call    1 returned 100%
    50680:   84:  };
function _ZZN4mlir17PatternApplicator14applyCostModelEN4llvm12function_refIFNS_14PatternBenefitERKNS_7PatternEEEEENKUlRNS1_15SmallVectorImplIPKNS_14RewritePatternEEEE0_clESE_ called 800513 returned 100% blocks executed 74%
   851193:   85:  auto processPatternList = [&](SmallVectorImpl<const RewritePattern *> &list) {
        -:   86:    // Special case for one pattern in the list, which is the most common case.
   800513:   87:    if (list.size() == 1) {
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
   596065:   88:      if (model(*list.front()).isImpossibleToMatch()) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
   10933*:   89:        LLVM_DEBUG(logImpossibleToMatch(*list.front()));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    10933:   90:        list.clear();
        -:   91:      }
   596091:   92:      return;
        -:   93:    }
        -:   94:
        -:   95:    // Collect the dynamic benefits for the current pattern list.
   204448:   96:    benefits.clear();
call    0 returned 100%
   682207:   97:    for (const Pattern *pat : list)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   477672:   98:      benefits.try_emplace(pat, model(*pat));
call    0 returned 100%
call    1 returned 100%
        -:   99:
        -:  100:    // Sort patterns with highest benefit first, and remove those that are
        -:  101:    // impossible to match.
   204535:  102:    std::stable_sort(list.begin(), list.end(), cmp);
call    0 returned 100%
   212101:  103:    while (!list.empty() && benefits[list.back()].isImpossibleToMatch()) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
    7540*:  104:      LLVM_DEBUG(logImpossibleToMatch(*list.back()));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
     7540:  105:      list.pop_back();
call    0 returned 100%
        -:  106:    }
    50680:  107:  };
   851087:  108:  for (auto &it : patterns)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
call    5 returned 100%
call    6 returned 100%
   749707:  109:    processPatternList(it.second);
call    0 returned 100%
    50625:  110:  processPatternList(anyOpPatterns);
call    0 returned 100%
call    1 returned 100%
    50655:  111:}
        -:  112:
function _ZN4mlir17PatternApplicator15walkAllPatternsEN4llvm12function_refIFvRKNS_7PatternEEEE called 25613 returned 100% blocks executed 81%
    25613:  113:void PatternApplicator::walkAllPatterns(
        -:  114:    function_ref<void(const Pattern &)> walk) {
   483148:  115:  for (const auto &it : frozenPatternList.getOpSpecificNativePatterns())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
call    5 returned 100%
call    6 returned 100%
   896891:  116:    for (const auto &pattern : it.second)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
call    2 returned 100%
   464963:  117:      walk(*pattern);
call    0 returned 100%
    26973:  118:  for (const Pattern &it : frozenPatternList.getMatchAnyOpNativePatterns())
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     1369:  119:    walk(it);
call    0 returned 100%
    25604:  120:  if (const PDLByteCode *bytecode = frozenPatternList.getPDLByteCode()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  121:    for (const Pattern &it : bytecode->getPatterns())
branch  0 never executed
branch  1 never executed
    #####:  122:      walk(it);
call    0 never executed
        -:  123:  }
    25604:  124:}
        -:  125:
function _ZN4mlir17PatternApplicator15matchAndRewriteEPNS_9OperationERNS_15PatternRewriterEN4llvm12function_refIFbRKNS_7PatternEEEENS6_IFvS9_EEENS6_IFNS_13LogicalResultES9_EEE called 60232401 returned 100% blocks executed 58%
 60232401:  126:LogicalResult PatternApplicator::matchAndRewrite(
        -:  127:    Operation *op, PatternRewriter &rewriter,
        -:  128:    function_ref<bool(const Pattern &)> canApply,
        -:  129:    function_ref<void(const Pattern &)> onFailure,
        -:  130:    function_ref<LogicalResult(const Pattern &)> onSuccess) {
        -:  131:  // Before checking native patterns, first match against the bytecode. This
        -:  132:  // won't automatically perform any rewrites so there is no need to worry about
        -:  133:  // conflicts.
 60232401:  134:  SmallVector<PDLByteCode::MatchResult, 4> pdlMatches;
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
 60232401:  135:  const PDLByteCode *bytecode = frozenPatternList.getPDLByteCode();
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
 60232401:  136:  if (bytecode)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
    89152:  137:    bytecode->match(op, rewriter, pdlMatches, *mutableByteCodeState);
call    0 returned 100%
        -:  138:
        -:  139:  // Check to see if there are patterns matching this specific operation type.
 60232401:  140:  MutableArrayRef<const RewritePattern *> opPatterns;
 60232401:  141:  auto patternIt = patterns.find(op->getName());
call    0 returned 100%
 60232406:  142:  if (patternIt != patterns.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
  4218971:  143:    opPatterns = patternIt->second;
call    0 returned 100%
        -:  144:
        -:  145:  // Process the patterns for that match the specific operation type, and any
        -:  146:  // operation type in an interleaved fashion.
 60232367:  147:  unsigned opIt = 0, opE = opPatterns.size();
 60232367:  148:  unsigned anyIt = 0, anyE = anyOpPatterns.size();
 60232367:  149:  unsigned pdlIt = 0, pdlE = pdlMatches.size();
 60232367:  150:  LogicalResult result = failure();
 64881977:  151:  do {
        -:  152:    // Find the next pattern with the highest benefit.
 64881977:  153:    const Pattern *bestPattern = nullptr;
 64881977:  154:    unsigned *bestPatternIt = &opIt;
 64881977:  155:    const PDLByteCode::MatchResult *pdlMatch = nullptr;
        -:  156:
        -:  157:    /// Operation specific patterns.
 64881977:  158:    if (opIt < opE)
  4558457:  159:      bestPattern = opPatterns[opIt];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  160:    /// Operation agnostic patterns.
 64881977:  161:    if (anyIt < anyE &&
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
   101600:  162:        (!bestPattern ||
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
   101600:  163:         bestPattern->getBenefit() < anyOpPatterns[anyIt]->getBenefit())) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 100%
  3873870:  164:      bestPatternIt = &anyIt;
  3873870:  165:      bestPattern = anyOpPatterns[anyIt];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  166:    }
        -:  167:    /// PDL patterns.
64881977*:  168:    if (pdlIt < pdlE && (!bestPattern || bestPattern->getBenefit() <
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  169:                                             pdlMatches[pdlIt].benefit)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  170:      bestPatternIt = &pdlIt;
    #####:  171:      pdlMatch = &pdlMatches[pdlIt];
branch  0 never executed
branch  1 never executed
    #####:  172:      bestPattern = pdlMatch->pattern;
        -:  173:    }
 64881977:  174:    if (!bestPattern)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  175:      break;
        -:  176:
        -:  177:    // Update the pattern iterator on failure so that this pattern isn't
        -:  178:    // attempted again.
  8432315:  179:    ++(*bestPatternIt);
        -:  180:
        -:  181:    // Check that the pattern can be applied.
  8432315:  182:    if (canApply && !canApply(*bestPattern))
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 1%
      890:  183:      continue;
        -:  184:
        -:  185:    // Try to match and rewrite this pattern. The patterns are sorted by
        -:  186:    // benefit, so if we match we can immediately rewrite. For PDL patterns, the
        -:  187:    // match has already been performed, we just need to rewrite.
  8431406:  188:    rewriter.setInsertionPoint(op);
call    0 returned 100%
        -:  189:#ifndef NDEBUG
        -:  190:    // Operation `op` may be invalidated after applying the rewrite pattern.
  8431397:  191:    Operation *dumpRootOp = getDumpRootOp(op);
call    0 returned 100%
        -:  192:#endif
  8431334:  193:    if (pdlMatch) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  194:      bytecode->rewrite(rewriter, *pdlMatch, *mutableByteCodeState);
call    0 never executed
    #####:  195:      result = success(!onSuccess || succeeded(onSuccess(*bestPattern)));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  196:    } else {
  8431334:  197:      const auto *pattern = static_cast<const RewritePattern *>(bestPattern);
        -:  198:
 8431334*:  199:      LLVM_DEBUG(llvm::dbgs()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  200:                 << "Trying to match \"" << pattern->getDebugName() << "\"\n");
  8431334:  201:      result = pattern->matchAndRewrite(op, rewriter);
call    0 returned 100%
 8431383*:  202:      LLVM_DEBUG(llvm::dbgs() << "\"" << pattern->getDebugName() << "\" result "
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  203:                              << succeeded(result) << "\n");
        -:  204:
  8431383:  205:      if (succeeded(result) && onSuccess && failed(onSuccess(*pattern)))
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
  8431383:  206:        result = failure();
        -:  207:    }
  8431383:  208:    if (succeeded(result)) {
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
 3782701*:  209:      LLVM_DEBUG(logSucessfulPatternApplication(dumpRootOp));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  210:      break;
        -:  211:    }
        -:  212:
        -:  213:    // Perform any necessary cleanups.
  4648682:  214:    if (onFailure)
branch  0 taken 1%
branch  1 taken 100% (fallthrough)
 69527753:  215:      onFailure(*bestPattern);
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
call    2 returned 100%
        -:  216:  } while (true);
        -:  217:
 60232363:  218:  if (mutableByteCodeState)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
    89152:  219:    mutableByteCodeState->cleanupAfterMatchAndRewrite();
call    0 returned 100%
 60232363:  220:  return result;
call    0 returned 100%
        -:  221:}
