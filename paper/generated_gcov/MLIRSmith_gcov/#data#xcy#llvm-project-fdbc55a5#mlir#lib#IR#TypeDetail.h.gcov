        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/TypeDetail.h
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinTypes.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinTypes.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TypeDetail.h - MLIR Type storage details -----------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This holds implementation details of Type.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:#ifndef TYPEDETAIL_H_
        -:   13:#define TYPEDETAIL_H_
        -:   14:
        -:   15:#include "mlir/IR/AffineMap.h"
        -:   16:#include "mlir/IR/BuiltinTypes.h"
        -:   17:#include "mlir/IR/MLIRContext.h"
        -:   18:#include "mlir/IR/OperationSupport.h"
        -:   19:#include "mlir/IR/TypeRange.h"
        -:   20:#include "llvm/ADT/bit.h"
        -:   21:#include "llvm/Support/TrailingObjects.h"
        -:   22:
        -:   23:namespace mlir {
        -:   24:
        -:   25:namespace detail {
        -:   26:
        -:   27:/// Integer Type Storage and Uniquing.
        -:   28:struct IntegerTypeStorage : public TypeStorage {
        -:   29:  IntegerTypeStorage(unsigned width,
        -:   30:                     IntegerType::SignednessSemantics signedness)
        -:   31:      : width(width), signedness(signedness) {}
        -:   32:
        -:   33:  /// The hash key used for uniquing.
        -:   34:  using KeyTy = std::pair<unsigned, IntegerType::SignednessSemantics>;
        -:   35:
        -:   36:  static llvm::hash_code hashKey(const KeyTy &key) {
        -:   37:    return llvm::hash_value(key);
        -:   38:  }
        -:   39:
        -:   40:  bool operator==(const KeyTy &key) const {
        -:   41:    return KeyTy(width, signedness) == key;
        -:   42:  }
        -:   43:
        -:   44:  static IntegerTypeStorage *construct(TypeStorageAllocator &allocator,
        -:   45:                                       KeyTy key) {
        -:   46:    return new (allocator.allocate<IntegerTypeStorage>())
        -:   47:        IntegerTypeStorage(key.first, key.second);
        -:   48:  }
        -:   49:
        -:   50:  unsigned width : 30;
        -:   51:  IntegerType::SignednessSemantics signedness : 2;
        -:   52:};
        -:   53:
        -:   54:/// Function Type Storage and Uniquing.
        -:   55:struct FunctionTypeStorage : public TypeStorage {
   576659:   56:  FunctionTypeStorage(unsigned numInputs, unsigned numResults,
        -:   57:                      Type const *inputsAndResults)
   576659:   58:      : numInputs(numInputs), numResults(numResults),
   576659:   59:        inputsAndResults(inputsAndResults) {}
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        -:   60:
        -:   61:  /// The hash key used for uniquing.
        -:   62:  using KeyTy = std::pair<TypeRange, TypeRange>;
function _ZNK4mlir6detail19FunctionTypeStorageeqERKSt4pairINS_9TypeRangeES3_E called 179354 returned 100% blocks executed 100%
   179354:   63:  bool operator==(const KeyTy &key) const {
   179354:   64:    if (std::get<0>(key) == getInputs())
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
   126285:   65:      return std::get<1>(key) == getResults();
        -:   66:    return false;
        -:   67:  }
        -:   68:
        -:   69:  /// Construction.
function _ZN4mlir6detail19FunctionTypeStorage9constructERNS_14StorageUniquer16StorageAllocatorERKSt4pairINS_9TypeRangeES6_E called 576659 returned 100% blocks executed 100%
   576659:   70:  static FunctionTypeStorage *construct(TypeStorageAllocator &allocator,
        -:   71:                                        const KeyTy &key) {
   576659:   72:    TypeRange inputs = key.first, results = key.second;
        -:   73:
        -:   74:    // Copy the inputs and results into the bump pointer.
   576659:   75:    SmallVector<Type, 16> types;
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
   576659:   76:    types.reserve(inputs.size() + results.size());
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
   576659:   77:    types.append(inputs.begin(), inputs.end());
call    0 returned 100%
   576659:   78:    types.append(results.begin(), results.end());
call    0 returned 100%
   576659:   79:    auto typesList = allocator.copyInto(ArrayRef<Type>(types));
call    0 returned 100%
        -:   80:
        -:   81:    // Initialize the memory using placement new.
  1153318:   82:    return new (allocator.allocate<FunctionTypeStorage>())
   576659:   83:        FunctionTypeStorage(inputs.size(), results.size(), typesList.data());
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        -:   84:  }
        -:   85:
 5411943*:   86:  ArrayRef<Type> getInputs() const {
  179700*:   87:    return ArrayRef<Type>(inputsAndResults, numInputs);
call    0 never executed
call    1 never executed
call    2 returned 100%
        -:   88:  }
 4455481*:   89:  ArrayRef<Type> getResults() const {
  126631*:   90:    return ArrayRef<Type>(inputsAndResults + numInputs, numResults);
call    0 never executed
call    1 never executed
call    2 returned 100%
        -:   91:  }
        -:   92:
        -:   93:  unsigned numInputs;
        -:   94:  unsigned numResults;
        -:   95:  Type const *inputsAndResults;
        -:   96:};
        -:   97:
        -:   98:/// A type representing a collection of other types.
        -:   99:struct TupleTypeStorage final
        -:  100:    : public TypeStorage,
        -:  101:      public llvm::TrailingObjects<TupleTypeStorage, Type> {
        -:  102:  using KeyTy = TypeRange;
        -:  103:
    #####:  104:  TupleTypeStorage(unsigned numTypes) : numElements(numTypes) {}
call    0 never executed
        -:  105:
        -:  106:  /// Construction.
function _ZN4mlir6detail16TupleTypeStorage9constructERNS_14StorageUniquer16StorageAllocatorENS_9TypeRangeE called 0 returned 0% blocks executed 0%
    #####:  107:  static TupleTypeStorage *construct(TypeStorageAllocator &allocator,
        -:  108:                                     TypeRange key) {
        -:  109:    // Allocate a new storage instance.
    #####:  110:    auto byteSize = TupleTypeStorage::totalSizeToAlloc<Type>(key.size());
call    0 never executed
    #####:  111:    auto *rawMem = allocator.allocate(byteSize, alignof(TupleTypeStorage));
call    0 never executed
    #####:  112:    auto *result = ::new (rawMem) TupleTypeStorage(key.size());
call    0 never executed
        -:  113:
        -:  114:    // Copy in the element types into the trailing storage.
    #####:  115:    std::uninitialized_copy(key.begin(), key.end(),
call    0 never executed
        -:  116:                            result->getTrailingObjects<Type>());
    #####:  117:    return result;
        -:  118:  }
        -:  119:
    #####:  120:  bool operator==(const KeyTy &key) const { return key == getTypes(); }
        -:  121:
        -:  122:  /// Return the number of held types.
    #####:  123:  unsigned size() const { return numElements; }
call    0 never executed
        -:  124:
        -:  125:  /// Return the held types.
    #####:  126:  ArrayRef<Type> getTypes() const {
    #####:  127:    return {getTrailingObjects<Type>(), size()};
call    0 never executed
        -:  128:  }
        -:  129:
        -:  130:  /// The number of tuple elements.
        -:  131:  unsigned numElements;
        -:  132:};
        -:  133:
        -:  134:/// Checks if the memorySpace has supported Attribute type.
        -:  135:bool isSupportedMemorySpace(Attribute memorySpace);
        -:  136:
        -:  137:/// Wraps deprecated integer memory space to the new Attribute form.
        -:  138:Attribute wrapIntegerMemorySpace(unsigned memorySpace, MLIRContext *ctx);
        -:  139:
        -:  140:/// Replaces default memorySpace (integer == `0`) with empty Attribute.
        -:  141:Attribute skipDefaultMemorySpace(Attribute memorySpace);
        -:  142:
        -:  143:/// [deprecated] Returns the memory space in old raw integer representation.
        -:  144:/// New `Attribute getMemorySpace()` method should be used instead.
        -:  145:unsigned getMemorySpaceAsInt(Attribute memorySpace);
        -:  146:
        -:  147:} // namespace detail
        -:  148:} // namespace mlir
        -:  149:
        -:  150:#endif // TYPEDETAIL_H_
