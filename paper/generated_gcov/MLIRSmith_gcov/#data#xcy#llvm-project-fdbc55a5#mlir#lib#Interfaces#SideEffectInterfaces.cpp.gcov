        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Interfaces/SideEffectInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRSideEffectInterfaces.dir/SideEffectInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Interfaces/CMakeFiles/obj.MLIRSideEffectInterfaces.dir/SideEffectInterfaces.cpp.gcda
        -:    0:Runs:116177
        -:    1://===- SideEffectInterfaces.cpp - SideEffects in MLIR ---------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Interfaces/SideEffectInterfaces.h"
        -:   10:
        -:   11:#include "llvm/ADT/SmallPtrSet.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:
        -:   15://===----------------------------------------------------------------------===//
        -:   16:// SideEffect Interfaces
        -:   17://===----------------------------------------------------------------------===//
        -:   18:
        -:   19:/// Include the definitions of the side effect interfaces.
        -:   20:#include "mlir/Interfaces/SideEffectInterfaces.cpp.inc"
        -:   21:
        -:   22://===----------------------------------------------------------------------===//
        -:   23:// MemoryEffects
        -:   24://===----------------------------------------------------------------------===//
        -:   25:
function _ZN4mlir13MemoryEffects6Effect7classofEPKNS_11SideEffects6EffectE called 0 returned 0% blocks executed 0%
    #####:   26:bool MemoryEffects::Effect::classof(const SideEffects::Effect *effect) {
    #####:   27:  return isa<Allocate, Free, Read, Write>(effect);
call    0 never executed
        -:   28:}
        -:   29:
        -:   30://===----------------------------------------------------------------------===//
        -:   31:// SideEffect Utilities
        -:   32://===----------------------------------------------------------------------===//
        -:   33:
function _ZN4mlir17isOpTriviallyDeadEPNS_9OperationE called 41728160 returned 100% blocks executed 100%
 41728160:   34:bool mlir::isOpTriviallyDead(Operation *op) {
 83456270:   35:  return op->use_empty() && wouldOpBeTriviallyDead(op);
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
branch  2 taken 76% (fallthrough)
branch  3 taken 24%
call    4 returned 100%
branch  5 taken 41% (fallthrough)
branch  6 taken 59%
        -:   36:}
        -:   37:
        -:   38:/// Internal implementation of `mlir::wouldOpBeTriviallyDead` that also
        -:   39:/// considers terminator operations as dead if they have no side effects. This
        -:   40:/// allows for marking region operations as trivially dead without always being
        -:   41:/// conservative of terminators.
function _ZL26wouldOpBeTriviallyDeadImplPN4mlir9OperationE called 46685952 returned 100% blocks executed 95%
 46685952:   42:static bool wouldOpBeTriviallyDeadImpl(Operation *rootOp) {
        -:   43:  // The set of operations to consider when checking for side effects.
 46685952:   44:  SmallVector<Operation *, 1> effectingOps(1, rootOp);
call    0 returned 100%
 84506669:   45:  while (!effectingOps.empty()) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
 57845377:   46:    Operation *op = effectingOps.pop_back_val();
call    0 returned 100%
        -:   47:
        -:   48:    // If the operation has recursive effects, push all of the nested operations
        -:   49:    // on to the stack to consider.
 57845336:   50:    bool hasRecursiveEffects =
call    0 returned 100%
 57845313:   51:        op->hasTrait<OpTrait::HasRecursiveMemoryEffects>();
 57845313:   52:    if (hasRecursiveEffects) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
  8355777:   53:      for (Region &region : op->getRegions()) {
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
branch  2 taken 66% (fallthrough)
branch  3 taken 34%
 10407220:   54:        for (auto &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
 35396152:   55:          for (auto &nestedOp : block)
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
call    2 returned 100%
 30233409:   56:            effectingOps.push_back(&nestedOp);
call    0 returned 100%
        -:   57:        }
        -:   58:      }
        -:   59:    }
        -:   60:
        -:   61:    // If the op has memory effects, try to characterize them to see if the op
        -:   62:    // is trivially dead here.
 57845315:   63:    if (auto effectInterface = dyn_cast<MemoryEffectOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 71% (fallthrough)
branch  2 taken 29%
        -:   64:      // Check to see if this op either has no effects, or only allocates/reads
        -:   65:      // memory.
 40948482:   66:      SmallVector<MemoryEffects::EffectInstance, 1> effects;
call    0 returned 100%
 40948482:   67:      effectInterface.getEffects(effects);
call    0 returned 100%
        -:   68:
        -:   69:      // Gather all results of this op that are allocated.
 40948538:   70:      SmallPtrSet<Value, 4> allocResults;
call    0 returned 100%
 53034766:   71:      for (const MemoryEffects::EffectInstance &it : effects)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
 17346186:   72:        if (isa<MemoryEffects::Allocate>(it.getEffect()) && it.getValue() &&
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
 12086219:   73:            it.getValue().getDefiningOp() == op)
call    0 returned 100%
  5259961:   74:          allocResults.insert(it.getValue());
branch  0 taken 100%
branch  1 taken 0%
call    2 returned 100%
        -:   75:
function _ZZL26wouldOpBeTriviallyDeadImplPN4mlir9OperationEENKUlRKNS_11SideEffects14EffectInstanceINS_13MemoryEffects6EffectEEEE_clES8_.isra.0 called 12084250 returned 100% blocks executed 100%
 40948543:   76:      if (!llvm::all_of(effects, [&allocResults](
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
 12084250:   77:                                     const MemoryEffects::EffectInstance &it) {
        -:   78:            // We can drop effects if the value is an allocation and is a result
        -:   79:            // of the operation.
 24168498:   80:            if (allocResults.contains(it.getValue()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
        -:   81:              return true;
        -:   82:            // Otherwise, the effect must be a read.
  9013774:   83:            return isa<MemoryEffects::Read>(it.getEffect());
call    0 returned 100%
        -:   84:          })) {
  5821605:   85:        return false;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        -:   86:      }
 35126968:   87:      continue;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   88:
        -:   89:      // Otherwise, if the op has recursive side effects we can treat the
        -:   90:      // operation itself as having no effects.
        -:   91:    }
 16896862:   92:    if (hasRecursiveEffects)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
  2693754:   93:      continue;
        -:   94:
        -:   95:    // If there were no effect interfaces, we treat this op as conservatively
        -:   96:    // having effects.
        -:   97:    return false;
        -:   98:  }
        -:   99:
        -:  100:  // If we get here, none of the operations had effects that prevented marking
        -:  101:  // 'op' as dead.
        -:  102:  return true;
        -:  103:}
        -:  104:
        -:  105:template <typename EffectTy>
   17659*:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
   17659*:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
   17659*:  108:  if (!memOp)
        -:  109:    return false;
   15666*:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
   15666*:  111:  memOp.getEffects(effects);
   15666*:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
   16222*:  116:  for (auto &effect : effects) {
   31232*:  117:    if (value && effect.getValue() != value)
     496*:  118:      continue;
   15120*:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
   15120*:  120:    if (!hasSingleEffectOnVal)
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects5WriteEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects5WriteEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
branch  0 never executed
branch  1 never executed
    #####:  117:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 never executed
    #####:  120:    if (!hasSingleEffectOnVal)
branch  0 never executed
branch  1 never executed
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects4ReadEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects4ReadEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    #####:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  109:    return false;
    #####:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  111:  memOp.getEffects(effects);
    #####:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    #####:  116:  for (auto &effect : effects) {
branch  0 never executed
branch  1 never executed
    #####:  117:    if (value && effect.getValue() != value)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:      continue;
    #####:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 never executed
    #####:  120:    if (!hasSingleEffectOnVal)
branch  0 never executed
branch  1 never executed
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects4FreeEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects4FreeEEEbPNS_9OperationENS_5ValueE called 17637 returned 100% blocks executed 94%
    17637:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
    17637:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
    17637:  108:  if (!memOp)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -:  109:    return false;
    15644:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 returned 100%
    15644:  111:  memOp.getEffects(effects);
    15644:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
    16178:  116:  for (auto &effect : effects) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
    31186:  117:    if (value && effect.getValue() != value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
      495:  118:      continue;
    15098:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 returned 100%
    15098:  120:    if (!hasSingleEffectOnVal)
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
_ZN4mlir15hasSingleEffectINS_13MemoryEffects8AllocateEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir15hasSingleEffectINS_13MemoryEffects8AllocateEEEbPNS_9OperationENS_5ValueE called 22 returned 100% blocks executed 94%
       22:  106:bool mlir::hasSingleEffect(Operation *op, Value value) {
       22:  107:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       22:  108:  if (!memOp)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  109:    return false;
       22:  110:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 returned 100%
       22:  111:  memOp.getEffects(effects);
       22:  112:  bool hasSingleEffectOnVal = false;
        -:  113:  // Iterate through `effects` and check if an effect of type `EffectTy` and
        -:  114:  // only of that type is present. A `value` to check the effect on may or may
        -:  115:  // not have been provided.
       44:  116:  for (auto &effect : effects) {
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       46:  117:    if (value && effect.getValue() != value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        1:  118:      continue;
       22:  119:    hasSingleEffectOnVal = isa<EffectTy>(effect.getEffect());
call    0 returned 100%
       22:  120:    if (!hasSingleEffectOnVal)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  121:      return false;
        -:  122:  }
        -:  123:  return hasSingleEffectOnVal;
        -:  124:}
------------------
        -:  125:
        -:  126:template bool mlir::hasSingleEffect<MemoryEffects::Allocate>(Operation *,
        -:  127:                                                             Value);
        -:  128:template bool mlir::hasSingleEffect<MemoryEffects::Free>(Operation *, Value);
        -:  129:template bool mlir::hasSingleEffect<MemoryEffects::Read>(Operation *, Value);
        -:  130:template bool mlir::hasSingleEffect<MemoryEffects::Write>(Operation *, Value);
        -:  131:
        -:  132:template <typename... EffectTys>
  415449*:  133:bool mlir::hasEffect(Operation *op, Value value) {
  415449*:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
  415448*:  135:  if (!memOp)
        -:  136:    return false;
  351806*:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
  351806*:  138:  memOp.getEffects(effects);
  823486*:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
  943368*:  140:    if (value && effect.getValue() != value)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 70% (fallthrough)
branch 15 taken 30%
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:  141:      return false;
  332532*:  142:    return isa<EffectTys...>(effect.getEffect());
call    0 returned 100%
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteENS1_4FreeEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteENS1_4FreeEEEEbPNS_9OperationENS_5ValueE called 898 returned 100% blocks executed 88%
      898:  133:bool mlir::hasEffect(Operation *op, Value value) {
      898:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      897:  135:  if (!memOp)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  136:    return false;
      897:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 returned 100%
      897:  138:  memOp.getEffects(effects);
      897:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects5WriteEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects4ReadEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects4ReadEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects4FreeEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects4FreeEEEEbPNS_9OperationENS_5ValueE called 414551 returned 100% blocks executed 88%
   414551:  133:bool mlir::hasEffect(Operation *op, Value value) {
   414551:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
   414551:  135:  if (!memOp)
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
        -:  136:    return false;
   350909:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 returned 100%
   350909:  138:  memOp.getEffects(effects);
   350909:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
_ZN4mlir9hasEffectIJNS_13MemoryEffects8AllocateEEEEbPNS_9OperationENS_5ValueE:
function _ZN4mlir9hasEffectIJNS_13MemoryEffects8AllocateEEEEbPNS_9OperationENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  133:bool mlir::hasEffect(Operation *op, Value value) {
    #####:  134:  auto memOp = dyn_cast<MemoryEffectOpInterface>(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:  if (!memOp)
branch  0 never executed
branch  1 never executed
        -:  136:    return false;
    #####:  137:  SmallVector<SideEffects::EffectInstance<MemoryEffects::Effect>, 4> effects;
call    0 never executed
    #####:  138:  memOp.getEffects(effects);
    #####:  139:  return llvm::any_of(effects, [&](MemoryEffects::EffectInstance &effect) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  140:    if (value && effect.getValue() != value)
        -:  141:      return false;
        -:  142:    return isa<EffectTys...>(effect.getEffect());
        -:  143:  });
        -:  144:}
------------------
        -:  145:template bool mlir::hasEffect<MemoryEffects::Allocate>(Operation *, Value);
        -:  146:template bool mlir::hasEffect<MemoryEffects::Free>(Operation *, Value);
        -:  147:template bool mlir::hasEffect<MemoryEffects::Read>(Operation *, Value);
        -:  148:template bool mlir::hasEffect<MemoryEffects::Write>(Operation *, Value);
        -:  149:template bool
        -:  150:mlir::hasEffect<MemoryEffects::Write, MemoryEffects::Free>(Operation *, Value);
        -:  151:
function _ZN4mlir22wouldOpBeTriviallyDeadEPNS_9OperationE called 49299209 returned 100% blocks executed 100%
 49299209:  152:bool mlir::wouldOpBeTriviallyDead(Operation *op) {
 49299209:  153:  if (op->mightHaveTrait<OpTrait::IsTerminator>())
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
        -:  154:    return false;
 46685955:  155:  return wouldOpBeTriviallyDeadImpl(op);
call    0 returned 100%
        -:  156:}
