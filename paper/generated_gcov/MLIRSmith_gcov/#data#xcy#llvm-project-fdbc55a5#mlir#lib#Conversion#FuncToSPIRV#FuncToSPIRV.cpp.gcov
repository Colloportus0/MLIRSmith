        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/FuncToSPIRV/FuncToSPIRV.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/FuncToSPIRV/CMakeFiles/obj.MLIRFuncToSPIRV.dir/FuncToSPIRV.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/FuncToSPIRV/CMakeFiles/obj.MLIRFuncToSPIRV.dir/FuncToSPIRV.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- FuncToSPIRV.cpp - Func to SPIR-V Patterns ------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements patterns to convert Func dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/FuncToSPIRV/FuncToSPIRV.h"
        -:   14:#include "../SPIRVCommon/Pattern.h"
        -:   15:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   18:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   19:#include "mlir/Dialect/SPIRV/Utils/LayoutUtils.h"
        -:   20:#include "mlir/IR/AffineMap.h"
        -:   21:#include "mlir/Support/LogicalResult.h"
        -:   22:#include "llvm/Support/Debug.h"
        -:   23:
        -:   24:#define DEBUG_TYPE "func-to-spirv-pattern"
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28://===----------------------------------------------------------------------===//
        -:   29:// Operation conversion
        -:   30://===----------------------------------------------------------------------===//
        -:   31:
        -:   32:// Note that DRR cannot be used for the patterns in this file: we may need to
        -:   33:// convert type along the way, which requires ConversionPattern. DRR generates
        -:   34:// normal RewritePattern.
        -:   35:
        -:   36:namespace {
        -:   37:
        -:   38:/// Converts func.return to spirv.Return.
        -:   39:class ReturnOpPattern final : public OpConversionPattern<func::ReturnOp> {
        -:   40:public:
        -:   41:  using OpConversionPattern<func::ReturnOp>::OpConversionPattern;
        -:   42:
        -:   43:  LogicalResult
function _ZNK12_GLOBAL__N_115ReturnOpPattern15matchAndRewriteEN4mlir4func8ReturnOpENS2_15ReturnOpAdaptorERNS1_25ConversionPatternRewriterE called 363 returned 100% blocks executed 91%
      363:   44:  matchAndRewrite(func::ReturnOp returnOp, OpAdaptor adaptor,
        -:   45:                  ConversionPatternRewriter &rewriter) const override {
      363:   46:    if (returnOp.getNumOperands() > 1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   47:      return failure();
        -:   48:
      363:   49:    if (returnOp.getNumOperands() == 1) {
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
      116:   50:      rewriter.replaceOpWithNewOp<spirv::ReturnValueOp>(
      116:   51:          returnOp, adaptor.getOperands()[0]);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   52:    } else {
      247:   53:      rewriter.replaceOpWithNewOp<spirv::ReturnOp>(returnOp);
call    0 returned 100%
        -:   54:    }
      363:   55:    return success();
        -:   56:  }
        -:   57:};
        -:   58:
        -:   59:/// Converts func.call to spirv.FunctionCall.
        -:   60:class CallOpPattern final : public OpConversionPattern<func::CallOp> {
        -:   61:public:
        -:   62:  using OpConversionPattern<func::CallOp>::OpConversionPattern;
        -:   63:
        -:   64:  LogicalResult
function _ZNK12_GLOBAL__N_113CallOpPattern15matchAndRewriteEN4mlir4func6CallOpENS2_13CallOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   65:  matchAndRewrite(func::CallOp callOp, OpAdaptor adaptor,
        -:   66:                  ConversionPatternRewriter &rewriter) const override {
        -:   67:    // multiple results func was not converted to spirv.func
    #####:   68:    if (callOp.getNumResults() > 1)
branch  0 never executed
branch  1 never executed
    #####:   69:      return failure();
    #####:   70:    if (callOp.getNumResults() == 1) {
branch  0 never executed
branch  1 never executed
    #####:   71:      auto resultType =
    #####:   72:          getTypeConverter()->convertType(callOp.getResult(0).getType());
call    0 never executed
    #####:   73:      if (!resultType)
branch  0 never executed
branch  1 never executed
    #####:   74:        return failure();
    #####:   75:      rewriter.replaceOpWithNewOp<spirv::FunctionCallOp>(
    #####:   76:          callOp, resultType, adaptor.getOperands(), callOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   77:    } else {
    #####:   78:      rewriter.replaceOpWithNewOp<spirv::FunctionCallOp>(
    #####:   79:          callOp, TypeRange(), adaptor.getOperands(), callOp->getAttrs());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   80:    }
    #####:   81:    return success();
        -:   82:  }
        -:   83:};
        -:   84:
        -:   85:} // namespace
        -:   86:
        -:   87://===----------------------------------------------------------------------===//
        -:   88:// Pattern population
        -:   89://===----------------------------------------------------------------------===//
        -:   90:
function _ZN4mlir27populateFuncToSPIRVPatternsERNS_18SPIRVTypeConverterERNS_17RewritePatternSetE called 453 returned 100% blocks executed 100%
      453:   91:void mlir::populateFuncToSPIRVPatterns(SPIRVTypeConverter &typeConverter,
        -:   92:                                       RewritePatternSet &patterns) {
      453:   93:  MLIRContext *context = patterns.getContext();
call    0 returned 100%
        -:   94:
      453:   95:  patterns.add<ReturnOpPattern, CallOpPattern>(typeConverter, context);
call    0 returned 100%
      453:   96:}
