        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Reducer/MLIRTestReducer.cpp
        -:    0:Graph:../tools/mlir/test/lib/Reducer/CMakeFiles/MLIRTestReducer.dir/MLIRTestReducer.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Reducer/CMakeFiles/MLIRTestReducer.dir/MLIRTestReducer.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestReducer.cpp - Test MLIR Reduce ---------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass that reproduces errors based on trivially defined
        -:   10:// patterns. It is used as a buggy optimization pass for the purpose of testing
        -:   11:// the MLIR Reduce tool.
        -:   12://
        -:   13://===----------------------------------------------------------------------===//
        -:   14:
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:namespace {
        -:   20:
        -:   21:/// This pass looks for for the presence of an operation with the name
        -:   22:/// "crashOp" in the input MLIR file and crashes the mlir-opt tool if the
        -:   23:/// operation is found.
  116679*:   24:struct TestReducer : public PassWrapper<TestReducer, OperationPass<>> {
call    0 never executed
call    1 returned 100%
function _ZN12_GLOBAL__N_111TestReducer13resolveTypeIDEv called 116679 returned 100% blocks executed 100%
   116679:   25:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestReducer)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   26:
function _ZNK12_GLOBAL__N_111TestReducer11getArgumentEv called 116177 returned 100% blocks executed 100%
   116177:   27:  StringRef getArgument() const final { return "test-mlir-reducer"; }
function _ZNK12_GLOBAL__N_111TestReducer14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   28:  StringRef getDescription() const final {
   116163:   29:    return "Tests MLIR Reduce tool by generating failures";
        -:   30:  }
        -:   31:  void runOnOperation() override;
        -:   32:};
        -:   33:
        -:   34:} // namespace
        -:   35:
function _ZN12_GLOBAL__N_111TestReducer14runOnOperationEv called 382 returned 100% blocks executed 75%
      382:   36:void TestReducer::runOnOperation() {
function _ZZN12_GLOBAL__N_111TestReducer14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 809290 returned 100% blocks executed 62%
   809672:   37:  getOperation()->walk([&](Operation *op) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
   809290:   38:    StringRef opName = op->getName().getStringRef();
call    0 returned 100%
        -:   39:
   809290:   40:    if (opName.contains("op_crash")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   41:      llvm::errs() << "MLIR Reducer Test generated failure: Found "
call    0 never executed
    #####:   42:                      "\"crashOp\" operation\n";
call    0 never executed
    #####:   43:      exit(1);
call    0 never executed
        -:   44:    }
   809290:   45:  });
      382:   46:}
        -:   47:
        -:   48:namespace mlir {
function _ZN4mlir19registerTestReducerEv called 116163 returned 100% blocks executed 100%
   116163:   49:void registerTestReducer() { PassRegistration<TestReducer>(); }
call    0 returned 100%
        -:   50:} // namespace mlir
