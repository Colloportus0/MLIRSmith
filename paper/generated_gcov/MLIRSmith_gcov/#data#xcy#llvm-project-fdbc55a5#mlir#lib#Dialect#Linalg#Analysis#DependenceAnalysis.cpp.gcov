        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Linalg/Analysis/DependenceAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Linalg/Analysis/CMakeFiles/obj.MLIRLinalgAnalysis.dir/DependenceAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Linalg/Analysis/CMakeFiles/obj.MLIRLinalgAnalysis.dir/DependenceAnalysis.cpp.gcda
        -:    0:Runs:116171
        -:    1://===- DependenceAnalysis.cpp - Dependence analysis on SSA views ----------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements view-based alias and dependence analyses.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/Linalg/Analysis/DependenceAnalysis.h"
        -:   14:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   15:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   16:#include "mlir/Dialect/Linalg/IR/Linalg.h"
        -:   17:#include "mlir/IR/BuiltinOps.h"
        -:   18:
        -:   19:#include "llvm/Support/CommandLine.h"
        -:   20:#include "llvm/Support/Debug.h"
        -:   21:
        -:   22:#define DEBUG_TYPE "linalg-dependence-analysis"
        -:   23:
        -:   24:using namespace mlir;
        -:   25:using namespace mlir::linalg;
        -:   26:
        -:   27:using llvm::dbgs;
        -:   28:
function _ZN4mlir6linalg7Aliases4findENS_5ValueE called 32 returned 100% blocks executed 48%
       32:   29:Value Aliases::find(Value v) {
       32:   30:  if (v.isa<BlockArgument>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   31:    return v;
        -:   32:
       32:   33:  auto it = aliases.find(v);
call    0 returned 100%
       32:   34:  if (it != aliases.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   35:    assert(it->getSecond().getType().isa<BaseMemRefType>() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   36:           "Memref expected");
    #####:   37:    return it->getSecond();
call    0 never executed
        -:   38:  }
        -:   39:
       32:   40:  while (true) {
       32:   41:    if (v.isa<BlockArgument>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   42:      return v;
        -:   43:
       32:   44:    Operation *defOp = v.getDefiningOp();
call    0 returned 100%
       32:   45:    if (!defOp)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   46:      return v;
        -:   47:
        -:   48:    // Treat RegionBranchOpInterfaces like an allocate and don't try to follow
        -:   49:    // the aliasing further.
       32:   50:    if (isa<RegionBranchOpInterface>(defOp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   51:      return v;
       32:   52:    if (isa<bufferization::ToMemrefOp>(defOp))
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        8:   53:      return v;
        -:   54:
       24:   55:    if (auto memEffect = dyn_cast<MemoryEffectOpInterface>(defOp)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   56:      // Collect all memory effects on `v`.
      24*:   57:      SmallVector<MemoryEffects::EffectInstance, 1> effects;
call    0 returned 100%
       24:   58:      memEffect.getEffectsOnValue(v, effects);
call    0 returned 100%
        -:   59:
        -:   60:      // If we have the 'Allocate' memory effect on `v`, then `v` should be the
        -:   61:      // original buffer.
       24:   62:      if (llvm::any_of(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   63:              effects, [](const MemoryEffects::EffectInstance &instance) {
        -:   64:                return isa<MemoryEffects::Allocate>(instance.getEffect());
        -:   65:              }))
       24:   66:        return v;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   67:    }
        -:   68:
    #####:   69:    if (auto viewLikeOp = dyn_cast<ViewLikeOpInterface>(defOp)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:      auto it =
    #####:   71:          aliases.insert(std::make_pair(v, find(viewLikeOp.getViewSource())));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   72:      return it.first->second;
call    0 never executed
        -:   73:    }
        -:   74:
    #####:   75:    llvm::errs() << "View alias analysis reduces to: " << v << "\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   76:    llvm_unreachable("unsupported view alias case");
call    0 never executed
        -:   77:  }
        -:   78:}
        -:   79:
function _ZN4mlir6linalg21LinalgDependenceGraph20getDependenceTypeStrENS1_14DependenceTypeE called 0 returned 0% blocks executed 0%
    #####:   80:StringRef LinalgDependenceGraph::getDependenceTypeStr(DependenceType depType) {
    #####:   81:  switch (depType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   82:  case LinalgDependenceGraph::DependenceType::RAW:
    #####:   83:    return "RAW";
    #####:   84:  case LinalgDependenceGraph::DependenceType::RAR:
    #####:   85:    return "RAR";
    #####:   86:  case LinalgDependenceGraph::DependenceType::WAR:
    #####:   87:    return "WAR";
    #####:   88:  case LinalgDependenceGraph::DependenceType::WAW:
    #####:   89:    return "WAW";
    #####:   90:  default:
    #####:   91:    break;
        -:   92:  }
    #####:   93:  llvm_unreachable("Unexpected DependenceType");
call    0 never executed
        -:   94:}
        -:   95:
        -:   96:LinalgDependenceGraph
function _ZN4mlir6linalg21LinalgDependenceGraph20buildDependenceGraphERNS0_7AliasesENS_4func6FuncOpE called 0 returned 0% blocks executed 0%
    #####:   97:LinalgDependenceGraph::buildDependenceGraph(Aliases &aliases, func::FuncOp f) {
    #####:   98:  SmallVector<LinalgOp, 8> linalgOps;
call    0 never executed
    #####:   99:  f.walk([&](LinalgOp op) { linalgOps.push_back(op); });
call    0 never executed
call    1 never executed
    #####:  100:  return LinalgDependenceGraph(aliases, linalgOps);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  101:}
        -:  102:
function _ZN4mlir6linalg21LinalgDependenceGraphC2ERNS0_7AliasesEN4llvm8ArrayRefINS0_8LinalgOpEEE called 20 returned 100% blocks executed 92%
       20:  103:LinalgDependenceGraph::LinalgDependenceGraph(Aliases &aliases,
       20:  104:                                             ArrayRef<LinalgOp> ops)
      180:  105:    : aliases(aliases), linalgOps(ops.begin(), ops.end()) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
call    4 returned 100%
call    5 returned 100%
       44:  106:  for (const auto &en : llvm::enumerate(linalgOps)) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
       48:  107:    linalgOpPositions.insert(
       24:  108:        std::make_pair(en.value().getOperation(), en.index()));
call    0 returned 100%
call    1 returned 100%
        -:  109:  }
       44:  110:  for (unsigned i = 0, e = ops.size(); i < e; ++i) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
       28:  111:    for (unsigned j = i + 1; j < e; ++j) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        4:  112:      addDependencesBetween(ops[i], ops[j]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
        -:  113:    }
        -:  114:  }
       20:  115:}
        -:  116:
function _ZN4mlir6linalg21LinalgDependenceGraph17addDependenceElemENS1_14DependenceTypeEN4llvm12PointerUnionIJPNS_9OpOperandENS_5ValueEEEES8_ called 0 returned 0% blocks executed 0%
    #####:  117:void LinalgDependenceGraph::addDependenceElem(
        -:  118:    DependenceType dt, LinalgDependenceGraphElem::OpView indexingOpView,
        -:  119:    LinalgDependenceGraphElem::OpView dependentOpView) {
    #####:  120:  LLVM_DEBUG(dbgs() << "\nAdd dep type " << getDependenceTypeStr(dt) << ":\t ("
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  121:                    << LinalgDependenceGraphElem::getValue(indexingOpView)
        -:  122:                    << " @) -> \n\t\t("
        -:  123:                    << LinalgDependenceGraphElem::getValue(dependentOpView)
        -:  124:                    << " @)");
    #####:  125:  dependencesFromGraphs[dt][LinalgDependenceGraphElem::getOwner(indexingOpView)]
call    0 never executed
call    1 never executed
    #####:  126:      .push_back(
    #####:  127:          LinalgDependenceGraphElem{dependentOpView, indexingOpView, dt});
call    0 never executed
    #####:  128:  dependencesIntoGraphs[dt]
    #####:  129:                       [LinalgDependenceGraphElem::getOwner(dependentOpView)]
call    0 never executed
call    1 never executed
    #####:  130:                           .push_back(LinalgDependenceGraphElem{
call    0 never executed
        -:  131:                               indexingOpView, dependentOpView, dt});
    #####:  132:}
        -:  133:
        -:  134:LinalgDependenceGraph::dependence_range
function _ZNK4mlir6linalg21LinalgDependenceGraph18getDependencesFromENS0_8LinalgOpENS1_14DependenceTypeE called 0 returned 0% blocks executed 0%
    #####:  135:LinalgDependenceGraph::getDependencesFrom(
        -:  136:    LinalgOp src, LinalgDependenceGraph::DependenceType dt) const {
    #####:  137:  return getDependencesFrom(src.getOperation(), dt);
call    0 never executed
        -:  138:}
        -:  139:
        -:  140:LinalgDependenceGraph::dependence_range
function _ZNK4mlir6linalg21LinalgDependenceGraph18getDependencesFromEPNS_9OperationENS1_14DependenceTypeE called 0 returned 0% blocks executed 0%
    #####:  141:LinalgDependenceGraph::getDependencesFrom(
        -:  142:    Operation *src, LinalgDependenceGraph::DependenceType dt) const {
    #####:  143:  auto iter = dependencesFromGraphs[dt].find(src);
call    0 never executed
    #####:  144:  if (iter == dependencesFromGraphs[dt].end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  145:    return llvm::make_range(nullptr, nullptr);
    #####:  146:  return llvm::make_range(iter->second.begin(), iter->second.end());
call    0 never executed
        -:  147:}
        -:  148:
        -:  149:LinalgDependenceGraph::dependence_range
function _ZNK4mlir6linalg21LinalgDependenceGraph18getDependencesIntoENS0_8LinalgOpENS1_14DependenceTypeE called 40 returned 100% blocks executed 100%
      40*:  150:LinalgDependenceGraph::getDependencesInto(
        -:  151:    LinalgOp dst, LinalgDependenceGraph::DependenceType dt) const {
      40*:  152:  return getDependencesInto(dst.getOperation(), dt);
call    0 returned 100%
        -:  153:}
        -:  154:
        -:  155:LinalgDependenceGraph::dependence_range
function _ZNK4mlir6linalg21LinalgDependenceGraph18getDependencesIntoEPNS_9OperationENS1_14DependenceTypeE called 40 returned 100% blocks executed 75%
       40:  156:LinalgDependenceGraph::getDependencesInto(
        -:  157:    Operation *dst, LinalgDependenceGraph::DependenceType dt) const {
       40:  158:  auto iter = dependencesIntoGraphs[dt].find(dst);
call    0 returned 100%
       40:  159:  if (iter == dependencesIntoGraphs[dt].end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       40:  160:    return llvm::make_range(nullptr, nullptr);
    #####:  161:  return llvm::make_range(iter->second.begin(), iter->second.end());
call    0 never executed
        -:  162:}
        -:  163:
function _ZN4mlir6linalg21LinalgDependenceGraph21addDependencesBetweenENS0_8LinalgOpES2_ called 4 returned 100% blocks executed 45%
        4:  164:void LinalgDependenceGraph::addDependencesBetween(LinalgOp src, LinalgOp dst) {
       4*:  165:  LLVM_DEBUG(dbgs() << "addDependencesBetween " << *src.getOperation()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  166:                    << " and " << *dst.getOperation() << "\n");
       8*:  167:  if (src.hasTensorSemantics() && dst.hasTensorSemantics()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:  168:    for (OpOperand *dstOpOperand : dst.getDpsInputOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  169:      if (!dstOpOperand->get().getType().isa<RankedTensorType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  170:        continue;
        -:  171:      // Check if the operand is defined by the src.
    #####:  172:      auto definingOp = dstOpOperand->get().getDefiningOp<LinalgOp>();
call    0 never executed
    #####:  173:      if (definingOp && definingOp == src)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  174:        addDependenceElem(DependenceType::RAW, dstOpOperand->get(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  175:                          dstOpOperand);
        -:  176:    }
    #####:  177:    for (OpOperand *dstOpOperand : dst.getDpsInitOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  178:      // Check if the operand is defined by the src.
    #####:  179:      auto definingOp = dstOpOperand->get().getDefiningOp<LinalgOp>();
call    0 never executed
    #####:  180:      if (definingOp && definingOp == src) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  181:        if (dst.isInitTensor(dstOpOperand)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  182:          addDependenceElem(DependenceType::RAW, dstOpOperand->get(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  183:                            dstOpOperand);
        -:  184:        }
    #####:  185:        addDependenceElem(DependenceType::WAW, dstOpOperand->get(),
call    0 never executed
call    1 never executed
call    2 never executed
        -:  186:                          dstOpOperand);
        -:  187:      }
        -:  188:    }
    #####:  189:    return;
        -:  190:  }
      12*:  191:  assert(src.hasBufferSemantics() && dst.hasBufferSemantics() &&
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  192:         "unhandled dependence tracking for mixed buffer/tensor operations");
       12:  193:  for (OpOperand *srcOpOperand : src.getDpsInitOperands()) { // W
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  194:    // RAW graph
       12:  195:    for (OpOperand *dstOpOperand : dst.getDpsInputOperands()) { // R
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       4*:  196:      if (!dstOpOperand->get().getType().isa<MemRefType>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  197:        continue;
        4:  198:      if (aliases.alias(srcOpOperand->get(), dstOpOperand->get())) // RAW alias
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  199:        addDependenceElem(DependenceType::RAW, srcOpOperand, dstOpOperand);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  200:    }
        -:  201:    // WAW graph
       16:  202:    for (OpOperand *dstOpOperand : dst.getDpsInitOperands())       // W
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        4:  203:      if (aliases.alias(srcOpOperand->get(), dstOpOperand->get())) // WAW alias
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  204:        addDependenceElem(DependenceType::WAW, srcOpOperand, dstOpOperand);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  205:  }
       16:  206:  for (OpOperand *srcOpOperand : src.getDpsInputOperands()) { // R
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       4*:  207:    if (!srcOpOperand->get().getType().isa<MemRefType>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  208:      continue;
        -:  209:    // RAR graph
       12:  210:    for (OpOperand *dstOpOperand : dst.getDpsInputOperands()) { // R
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       4*:  211:      if (!dstOpOperand->get().getType().isa<MemRefType>())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  212:        continue;
        4:  213:      if (aliases.alias(srcOpOperand->get(), dstOpOperand->get())) // RAR alias
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  214:        addDependenceElem(DependenceType::RAR, srcOpOperand, dstOpOperand);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  215:    }
        -:  216:    // WAR graph
       16:  217:    for (OpOperand *dstOpOperand : dst.getDpsInitOperands())       // W
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        4:  218:      if (aliases.alias(srcOpOperand->get(), dstOpOperand->get())) // WAR alias
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  219:        addDependenceElem(DependenceType::WAR, srcOpOperand, dstOpOperand);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  220:  }
        -:  221:}
        -:  222:
        -:  223:SmallVector<Operation *, 8>
function _ZNK4mlir6linalg21LinalgDependenceGraph23findCoveringDependencesENS0_8LinalgOpES2_ called 0 returned 0% blocks executed 0%
    #####:  224:LinalgDependenceGraph::findCoveringDependences(LinalgOp srcLinalgOp,
        -:  225:                                               LinalgOp dstLinalgOp) const {
    #####:  226:  return findOperationsWithCoveringDependences(
        -:  227:      srcLinalgOp, dstLinalgOp, nullptr,
    #####:  228:      {DependenceType::WAW, DependenceType::WAR, DependenceType::RAW});
call    0 never executed
        -:  229:}
        -:  230:
function _ZNK4mlir6linalg21LinalgDependenceGraph18findCoveringWritesENS0_8LinalgOpES2_NS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  231:SmallVector<Operation *, 8> LinalgDependenceGraph::findCoveringWrites(
        -:  232:    LinalgOp srcLinalgOp, LinalgOp dstLinalgOp, Value view) const {
    #####:  233:  return findOperationsWithCoveringDependences(
        -:  234:      srcLinalgOp, dstLinalgOp, view,
    #####:  235:      {DependenceType::WAW, DependenceType::WAR});
call    0 never executed
        -:  236:}
        -:  237:
function _ZNK4mlir6linalg21LinalgDependenceGraph17findCoveringReadsENS0_8LinalgOpES2_NS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  238:SmallVector<Operation *, 8> LinalgDependenceGraph::findCoveringReads(
        -:  239:    LinalgOp srcLinalgOp, LinalgOp dstLinalgOp, Value view) const {
    #####:  240:  return findOperationsWithCoveringDependences(
        -:  241:      srcLinalgOp, dstLinalgOp, view,
    #####:  242:      {DependenceType::RAR, DependenceType::RAW});
call    0 never executed
        -:  243:}
        -:  244:
        -:  245:SmallVector<Operation *, 8>
function _ZNK4mlir6linalg21LinalgDependenceGraph37findOperationsWithCoveringDependencesENS0_8LinalgOpES2_NS_5ValueEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  246:LinalgDependenceGraph::findOperationsWithCoveringDependences(
        -:  247:    LinalgOp srcLinalgOp, LinalgOp dstLinalgOp, Value view,
        -:  248:    ArrayRef<DependenceType> types) const {
    #####:  249:  auto *src = srcLinalgOp.getOperation();
call    0 never executed
    #####:  250:  auto *dst = dstLinalgOp.getOperation();
    #####:  251:  auto srcPos = linalgOpPositions.lookup(src);
call    0 never executed
    #####:  252:  auto dstPos = linalgOpPositions.lookup(dst);
call    0 never executed
    #####:  253:  assert(srcPos < dstPos && "expected dst after src in IR traversal order");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  254:
    #####:  255:  SmallVector<Operation *, 8> res;
        -:  256:  // Consider an intermediate interleaved `interim` op, look for any dependence
        -:  257:  // to an aliasing view on a src -> op -> dst path.
        -:  258:  // TODO: we are not considering paths yet, just interleaved positions.
    #####:  259:  for (auto dt : types) {
branch  0 never executed
branch  1 never executed
    #####:  260:    for (auto dependence : getDependencesFrom(src, dt)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  261:      auto interimPos = linalgOpPositions.lookup(dependence.getDependentOp());
call    0 never executed
call    1 never executed
        -:  262:      // Skip if not interleaved.
    #####:  263:      if (interimPos >= dstPos || interimPos <= srcPos)
branch  0 never executed
branch  1 never executed
    #####:  264:        continue;
    #####:  265:      Value consumerView = dependence.getIndexingValue();
call    0 never executed
    #####:  266:      if (view && !aliases.alias(view, consumerView))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  267:        continue;
    #####:  268:      auto *op = dependence.getDependentOp();
call    0 never executed
    #####:  269:      LLVM_DEBUG(dbgs() << "\n***Found covering dependence of type "
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  270:                        << getDependenceTypeStr(dt) << ": " << *src << " -> "
        -:  271:                        << *op << " on " << consumerView);
    #####:  272:      res.push_back(op);
call    0 never executed
        -:  273:    }
        -:  274:  }
    #####:  275:  return res;
        -:  276:}
        -:  277:
function _ZNK4mlir6linalg21LinalgDependenceGraph17hasDependenceFromENS0_8LinalgOpES2_N4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  278:bool LinalgDependenceGraph::hasDependenceFrom(
        -:  279:    LinalgOp srcLinalgOp, LinalgOp dstLinalgOp,
        -:  280:    ArrayRef<LinalgDependenceGraph::DependenceType> depTypes) const {
    #####:  281:  for (auto dep : depTypes)
branch  0 never executed
branch  1 never executed
    #####:  282:    for (auto dependence : getDependencesInto(dstLinalgOp, dep))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  283:      if (dependence.getDependentOp() == srcLinalgOp)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  284:        return true;
        -:  285:  return false;
        -:  286:}
        -:  287:
function _ZNK4mlir6linalg21LinalgDependenceGraph26hasDependentOperationsFromENS0_8LinalgOpEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  288:bool LinalgDependenceGraph::hasDependentOperationsFrom(
        -:  289:    LinalgOp linalgOp,
        -:  290:    ArrayRef<LinalgDependenceGraph::DependenceType> depTypes) const {
    #####:  291:  for (auto dep : depTypes) {
branch  0 never executed
branch  1 never executed
    #####:  292:    if (!getDependencesFrom(linalgOp, dep).empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:      return true;
        -:  294:  }
        -:  295:  return false;
        -:  296:}
        -:  297:
function _ZNK4mlir6linalg21LinalgDependenceGraph26hasDependentOperationsIntoENS0_8LinalgOpEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  298:bool LinalgDependenceGraph::hasDependentOperationsInto(
        -:  299:    LinalgOp linalgOp,
        -:  300:    ArrayRef<LinalgDependenceGraph::DependenceType> depTypes) const {
    #####:  301:  for (auto dep : depTypes) {
branch  0 never executed
branch  1 never executed
    #####:  302:    if (!getDependencesInto(linalgOp, dep).empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  303:      return true;
        -:  304:  }
        -:  305:  return false;
        -:  306:}
        -:  307:
function _ZNK4mlir6linalg21LinalgDependenceGraph22hasDependentOperationsENS0_8LinalgOpEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  308:bool LinalgDependenceGraph::hasDependentOperations(
        -:  309:    LinalgOp linalgOp, ArrayRef<DependenceType> depTypes) const {
    #####:  310:  return hasDependentOperationsInto(linalgOp, depTypes) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  311:         hasDependentOperationsFrom(linalgOp, depTypes);
call    0 never executed
        -:  312:}
        -:  313:
        -:  314:SmallVector<LinalgDependenceGraph::LinalgDependenceGraphElem, 2>
function _ZNK4mlir6linalg21LinalgDependenceGraph26getDependentOperationsIntoENS0_8LinalgOpEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  315:LinalgDependenceGraph::getDependentOperationsInto(
        -:  316:    LinalgOp linalgOp, ArrayRef<DependenceType> depTypes) const {
    #####:  317:  SmallVector<LinalgDependenceGraph::LinalgDependenceGraphElem, 2>
    #####:  318:      dependentOperations;
    #####:  319:  for (auto dependenceType : depTypes) {
branch  0 never executed
branch  1 never executed
    #####:  320:    auto dependencies = getDependencesInto(linalgOp, dependenceType);
call    0 never executed
    #####:  321:    dependentOperations.append(dependencies.begin(), dependencies.end());
call    0 never executed
        -:  322:  }
    #####:  323:  return dependentOperations;
        -:  324:}
        -:  325:
        -:  326:SmallVector<LinalgDependenceGraph::LinalgDependenceGraphElem, 2>
function _ZNK4mlir6linalg21LinalgDependenceGraph26getDependentOperationsFromENS0_8LinalgOpEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  327:LinalgDependenceGraph::getDependentOperationsFrom(
        -:  328:    LinalgOp linalgOp, ArrayRef<DependenceType> depTypes) const {
    #####:  329:  SmallVector<LinalgDependenceGraph::LinalgDependenceGraphElem, 2>
    #####:  330:      dependentOperations;
    #####:  331:  for (auto dependenceType : depTypes) {
branch  0 never executed
branch  1 never executed
    #####:  332:    auto dependencies = getDependencesFrom(linalgOp, dependenceType);
call    0 never executed
    #####:  333:    dependentOperations.append(dependencies.begin(), dependencies.end());
call    0 never executed
        -:  334:  }
    #####:  335:  return dependentOperations;
        -:  336:}
        -:  337:
        -:  338:/// Returns all dependent operations (into and from) given `operation`.
        -:  339:SmallVector<LinalgDependenceGraph::LinalgDependenceGraphElem, 2>
function _ZNK4mlir6linalg21LinalgDependenceGraph22getDependentOperationsENS0_8LinalgOpEN4llvm8ArrayRefINS1_14DependenceTypeEEE called 0 returned 0% blocks executed 0%
    #####:  340:LinalgDependenceGraph::getDependentOperations(
        -:  341:    LinalgOp linalgOp, ArrayRef<DependenceType> depTypes) const {
    #####:  342:  SmallVector<LinalgDependenceGraphElem, 2> dependentOperations =
    #####:  343:      getDependentOperationsInto(linalgOp, depTypes);
call    0 never executed
    #####:  344:  SmallVector<LinalgDependenceGraphElem, 2> t =
    #####:  345:      getDependentOperationsFrom(linalgOp, depTypes);
call    0 never executed
    #####:  346:  dependentOperations.append(t.begin(), t.end());
call    0 never executed
    #####:  347:  return dependentOperations;
branch  0 never executed
branch  1 never executed
        -:  348:}
        -:  349:
function _ZNK4mlir6linalg21LinalgDependenceGraph5printERN4llvm11raw_ostreamE called 0 returned 0% blocks executed 0%
    #####:  350:void LinalgDependenceGraph::print(raw_ostream &os) const {
    #####:  351:  for (auto dt : {
        -:  352:           LinalgDependenceGraph::DependenceType::RAW,
        -:  353:           LinalgDependenceGraph::DependenceType::WAW,
    #####:  354:       }) {
branch  0 never executed
branch  1 never executed
    #####:  355:    const auto &fromGraph = dependencesFromGraphs[dt];
    #####:  356:    for (const auto &it : fromGraph) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  357:      os << "[LinalgDependenceGraph] DT " << dt << " from: " << *it.first
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  358:         << ":\n";
call    0 never executed
    #####:  359:      for (const auto &dep : it.second) {
branch  0 never executed
branch  1 never executed
    #####:  360:        os << "\tDT " << dt << " " << *dep.getDependentOp() << ":\n";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  361:      }
        -:  362:    }
        -:  363:  }
    #####:  364:}
        -:  365:
function _ZNK4mlir6linalg21LinalgDependenceGraph4dumpEv called 0 returned 0% blocks executed 0%
    #####:  366:void LinalgDependenceGraph::dump() const { print(llvm::errs()); }
call    0 never executed
call    1 never executed
