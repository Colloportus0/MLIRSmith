        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/SPIRVToLLVM/SPIRVToLLVMPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/SPIRVToLLVM/CMakeFiles/obj.MLIRSPIRVToLLVM.dir/SPIRVToLLVMPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/SPIRVToLLVM/CMakeFiles/obj.MLIRSPIRVToLLVM.dir/SPIRVToLLVMPass.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- SPIRVToLLVMPass.cpp - SPIR-V to LLVM Passes ------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert MLIR SPIR-V ops into LLVM ops
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/SPIRVToLLVM/SPIRVToLLVMPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   16:#include "mlir/Conversion/SPIRVToLLVM/SPIRVToLLVM.h"
        -:   17:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   19:#include "mlir/Pass/Pass.h"
        -:   20:
        -:   21:namespace mlir {
        -:   22:#define GEN_PASS_DEF_CONVERTSPIRVTOLLVM
        -:   23:#include "mlir/Conversion/Passes.h.inc"
        -:   24:} // namespace mlir
        -:   25:
        -:   26:using namespace mlir;
        -:   27:
        -:   28:namespace {
        -:   29:/// A pass converting MLIR SPIR-V operations into LLVM dialect.
  116702*:   30:class ConvertSPIRVToLLVMPass
call    0 never executed
call    1 returned 100%
        -:   31:    : public impl::ConvertSPIRVToLLVMBase<ConvertSPIRVToLLVMPass> {
        -:   32:  void runOnOperation() override;
        -:   33:};
        -:   34:} // namespace
        -:   35:
function _ZN12_GLOBAL__N_122ConvertSPIRVToLLVMPass14runOnOperationEv called 422 returned 100% blocks executed 96%
      422:   36:void ConvertSPIRVToLLVMPass::runOnOperation() {
      422:   37:  MLIRContext *context = &getContext();
call    0 returned 100%
      422:   38:  ModuleOp module = getOperation();
call    0 returned 100%
      422:   39:  LLVMTypeConverter converter(&getContext());
call    0 returned 100%
call    1 returned 100%
        -:   40:
        -:   41:  // Encode global variable's descriptor set and binding if they exist.
      422:   42:  encodeBindAttribute(module);
call    0 returned 100%
        -:   43:
      844:   44:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
        -:   45:
      422:   46:  populateSPIRVToLLVMTypeConversion(converter);
call    0 returned 100%
        -:   47:
      422:   48:  populateSPIRVToLLVMModuleConversionPatterns(converter, patterns);
call    0 returned 100%
      422:   49:  populateSPIRVToLLVMConversionPatterns(converter, patterns);
call    0 returned 100%
      422:   50:  populateSPIRVToLLVMFunctionConversionPatterns(converter, patterns);
call    0 returned 100%
        -:   51:
      844:   52:  ConversionTarget target(*context);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      422:   53:  target.addIllegalDialect<spirv::SPIRVDialect>();
call    0 returned 100%
      422:   54:  target.addLegalDialect<LLVM::LLVMDialect>();
call    0 returned 100%
        -:   55:
        -:   56:  // Set `ModuleOp` as legal for `spirv.module` conversion.
      422:   57:  target.addLegalOp<ModuleOp>();
call    0 returned 100%
      422:   58:  if (failed(applyPartialConversion(module, target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   59:    signalPassFailure();
call    0 never executed
      422:   60:}
        -:   61:
function _ZN4mlir28createConvertSPIRVToLLVMPassEv called 116702 returned 100% blocks executed 100%
   116702:   62:std::unique_ptr<OperationPass<ModuleOp>> mlir::createConvertSPIRVToLLVMPass() {
   116702:   63:  return std::make_unique<ConvertSPIRVToLLVMPass>();
call    0 returned 100%
        -:   64:}
