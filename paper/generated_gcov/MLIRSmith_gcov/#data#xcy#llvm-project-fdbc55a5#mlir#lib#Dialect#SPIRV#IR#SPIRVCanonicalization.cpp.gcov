        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/SPIRV/IR/SPIRVCanonicalization.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVCanonicalization.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/SPIRV/IR/CMakeFiles/obj.MLIRSPIRVDialect.dir/SPIRVCanonicalization.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- SPIRVCanonicalization.cpp - MLIR SPIR-V canonicalization patterns --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines the folders and canonicalization patterns for SPIR-V ops.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include <utility>
        -:   14:
        -:   15:#include "mlir/Dialect/SPIRV/IR/SPIRVOps.h"
        -:   16:
        -:   17:#include "mlir/Dialect/CommonFolders.h"
        -:   18:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   19:#include "mlir/Dialect/SPIRV/IR/SPIRVTypes.h"
        -:   20:#include "mlir/IR/Matchers.h"
        -:   21:#include "mlir/IR/PatternMatch.h"
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25://===----------------------------------------------------------------------===//
        -:   26:// Common utility functions
        -:   27://===----------------------------------------------------------------------===//
        -:   28:
        -:   29:/// Returns the boolean value under the hood if the given `boolAttr` is a scalar
        -:   30:/// or splat vector bool constant.
function _ZL24getScalarOrSplatBoolAttrN4mlir9AttributeE called 0 returned 0% blocks executed 0%
    #####:   31:static Optional<bool> getScalarOrSplatBoolAttr(Attribute attr) {
    #####:   32:  if (!attr)
branch  0 never executed
branch  1 never executed
    #####:   33:    return llvm::None;
        -:   34:
    #####:   35:  if (auto boolAttr = attr.dyn_cast<BoolAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:    return boolAttr.getValue();
call    0 never executed
    #####:   37:  if (auto splatAttr = attr.dyn_cast<SplatElementsAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   38:    if (splatAttr.getElementType().isInteger(1))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   39:      return splatAttr.getSplatValue<bool>();
call    0 never executed
    #####:   40:  return llvm::None;
        -:   41:}
        -:   42:
        -:   43:// Extracts an element from the given `composite` by following the given
        -:   44:// `indices`. Returns a null Attribute if error happens.
function _ZL23extractCompositeElementN4mlir9AttributeEN4llvm8ArrayRefIjEE called 2 returned 100% blocks executed 11%
        2:   45:static Attribute extractCompositeElement(Attribute composite,
        -:   46:                                         ArrayRef<unsigned> indices) {
        -:   47:  // Check that given composite is a constant.
        4:   48:  if (!composite)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:   49:    return {};
        -:   50:  // Return composite itself if we reach the end of the index chain.
    #####:   51:  if (indices.empty())
branch  0 never executed
branch  1 never executed
    #####:   52:    return composite;
        -:   53:
    #####:   54:  if (auto vector = composite.dyn_cast<ElementsAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:    assert(indices.size() == 1 && "must have exactly one index for a vector");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   56:    return vector.getValues<Attribute>()[indices[0]];
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   57:  }
        -:   58:
    #####:   59:  if (auto array = composite.dyn_cast<ArrayAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    assert(!indices.empty() && "must have at least one index for an array");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   61:    return extractCompositeElement(array.getValue()[indices[0]],
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   62:                                   indices.drop_front());
call    0 never executed
call    1 never executed
        -:   63:  }
        -:   64:
    #####:   65:  return {};
        -:   66:}
        -:   67:
        -:   68://===----------------------------------------------------------------------===//
        -:   69:// TableGen'erated canonicalizers
        -:   70://===----------------------------------------------------------------------===//
        -:   71:
        -:   72:namespace {
        -:   73:#include "SPIRVCanonicalization.inc"
        -:   74:} // namespace
        -:   75:
        -:   76://===----------------------------------------------------------------------===//
        -:   77:// spirv.AccessChainOp
        -:   78://===----------------------------------------------------------------------===//
        -:   79:
        -:   80:namespace {
        -:   81:
        -:   82:/// Combines chained `spirv::AccessChainOp` operations into one
        -:   83:/// `spirv::AccessChainOp` operation.
        -:   84:struct CombineChainedAccessChain
        -:   85:    : public OpRewritePattern<spirv::AccessChainOp> {
        -:   86:  using OpRewritePattern<spirv::AccessChainOp>::OpRewritePattern;
        -:   87:
function _ZNK12_GLOBAL__N_125CombineChainedAccessChain15matchAndRewriteEN4mlir5spirv13AccessChainOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   88:  LogicalResult matchAndRewrite(spirv::AccessChainOp accessChainOp,
        -:   89:                                PatternRewriter &rewriter) const override {
    #####:   90:    auto parentAccessChainOp = dyn_cast_or_null<spirv::AccessChainOp>(
    #####:   91:        accessChainOp.getBasePtr().getDefiningOp());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   92:
    #####:   93:    if (!parentAccessChainOp) {
branch  0 never executed
branch  1 never executed
    #####:   94:      return failure();
        -:   95:    }
        -:   96:
        -:   97:    // Combine indices.
    #####:   98:    SmallVector<Value, 4> indices(parentAccessChainOp.getIndices());
call    0 never executed
call    1 never executed
    #####:   99:    indices.append(accessChainOp.getIndices().begin(),
call    0 never executed
call    1 never executed
    #####:  100:                   accessChainOp.getIndices().end());
call    0 never executed
        -:  101:
    #####:  102:    rewriter.replaceOpWithNewOp<spirv::AccessChainOp>(
    #####:  103:        accessChainOp, parentAccessChainOp.getBasePtr(), indices);
call    0 never executed
call    1 never executed
        -:  104:
    #####:  105:    return success();
branch  0 never executed
branch  1 never executed
        -:  106:  }
        -:  107:};
        -:  108:} // namespace
        -:  109:
function _ZN4mlir5spirv13AccessChainOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 93 returned 100% blocks executed 100%
       93:  110:void spirv::AccessChainOp::getCanonicalizationPatterns(
        -:  111:    RewritePatternSet &results, MLIRContext *context) {
       93:  112:  results.add<CombineChainedAccessChain>(context);
call    0 returned 100%
       93:  113:}
        -:  114:
        -:  115://===----------------------------------------------------------------------===//
        -:  116:// spirv.BitcastOp
        -:  117://===----------------------------------------------------------------------===//
        -:  118:
function _ZN4mlir5spirv9BitcastOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 93 returned 100% blocks executed 100%
       93:  119:void spirv::BitcastOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  120:                                                   MLIRContext *context) {
       93:  121:  results.add<ConvertChainedBitcast>(context);
call    0 returned 100%
       93:  122:}
        -:  123:
        -:  124://===----------------------------------------------------------------------===//
        -:  125:// spirv.CompositeExtractOp
        -:  126://===----------------------------------------------------------------------===//
        -:  127:
function _ZN4mlir5spirv18CompositeExtractOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 2 returned 100% blocks executed 35%
        2:  128:OpFoldResult spirv::CompositeExtractOp::fold(ArrayRef<Attribute> operands) {
        2:  129:  if (auto insertOp =
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        2:  130:          getComposite().getDefiningOp<spirv::CompositeInsertOp>()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  131:    if (getIndices() == insertOp.getIndices())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  132:      return insertOp.getObject();
call    0 never executed
call    1 never executed
        -:  133:  }
        -:  134:
        2:  135:  if (auto constructOp =
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        2:  136:          getComposite().getDefiningOp<spirv::CompositeConstructOp>()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  137:    auto type = constructOp.getType().cast<spirv::CompositeType>();
call    0 never executed
    #####:  138:    if (getIndices().size() == 1 &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  139:        constructOp.getConstituents().size() == type.getNumElements()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  140:      auto i = getIndices().begin()->cast<IntegerAttr>();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  141:      return constructOp.getConstituents()[i.getValue().getSExtValue()];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  142:    }
        -:  143:  }
        -:  144:
        2:  145:  auto indexVector =
function _ZZN4mlir5spirv18CompositeExtractOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlS4_E_clES4_.isra.0 called 2 returned 100% blocks executed 100%
        4:  146:      llvm::to_vector<8>(llvm::map_range(getIndices(), [](Attribute attr) {
call    0 returned 100%
        2:  147:        return static_cast<unsigned>(attr.cast<IntegerAttr>().getInt());
call    0 returned 100%
call    1 returned 100%
        2:  148:      }));
call    0 returned 100%
call    1 returned 100%
        2:  149:  return extractCompositeElement(operands[0], indexVector);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  150:}
        -:  151:
        -:  152://===----------------------------------------------------------------------===//
        -:  153:// spirv.Constant
        -:  154://===----------------------------------------------------------------------===//
        -:  155:
function _ZN4mlir5spirv10ConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 132 returned 100% blocks executed 80%
      132:  156:OpFoldResult spirv::ConstantOp::fold(ArrayRef<Attribute> operands) {
     132*:  157:  assert(operands.empty() && "spirv.Constant has no operands");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      132:  158:  return getValue();
call    0 returned 100%
call    1 returned 100%
        -:  159:}
        -:  160:
        -:  161://===----------------------------------------------------------------------===//
        -:  162:// spirv.IAdd
        -:  163://===----------------------------------------------------------------------===//
        -:  164:
function _ZN4mlir5spirv6IAddOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  165:OpFoldResult spirv::IAddOp::fold(ArrayRef<Attribute> operands) {
    #####:  166:  assert(operands.size() == 2 && "spirv.IAdd expects two operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  167:  // x + 0 = x
    #####:  168:  if (matchPattern(getOperand2(), m_Zero()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  169:    return getOperand1();
call    0 never executed
call    1 never executed
        -:  170:
        -:  171:  // According to the SPIR-V spec:
        -:  172:  //
        -:  173:  // The resulting value will equal the low-order N bits of the correct result
        -:  174:  // R, where N is the component width and R is computed with enough precision
        -:  175:  // to avoid overflow and underflow.
    #####:  176:  return constFoldBinaryOp<IntegerAttr>(
function _ZZN4mlir5spirv6IAddOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlNS2_5APIntERKS6_E_clES6_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  177:      operands, [](APInt a, const APInt &b) { return std::move(a) + b; });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  178:}
        -:  179:
        -:  180://===----------------------------------------------------------------------===//
        -:  181:// spirv.IMul
        -:  182://===----------------------------------------------------------------------===//
        -:  183:
function _ZN4mlir5spirv6IMulOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  184:OpFoldResult spirv::IMulOp::fold(ArrayRef<Attribute> operands) {
    #####:  185:  assert(operands.size() == 2 && "spirv.IMul expects two operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  186:  // x * 0 == 0
    #####:  187:  if (matchPattern(getOperand2(), m_Zero()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  188:    return getOperand2();
call    0 never executed
call    1 never executed
        -:  189:  // x * 1 = x
    #####:  190:  if (matchPattern(getOperand2(), m_One()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  191:    return getOperand1();
call    0 never executed
call    1 never executed
        -:  192:
        -:  193:  // According to the SPIR-V spec:
        -:  194:  //
        -:  195:  // The resulting value will equal the low-order N bits of the correct result
        -:  196:  // R, where N is the component width and R is computed with enough precision
        -:  197:  // to avoid overflow and underflow.
    #####:  198:  return constFoldBinaryOp<IntegerAttr>(
    #####:  199:      operands, [](const APInt &a, const APInt &b) { return a * b; });
call    0 never executed
call    1 never executed
call    2 never executed
        -:  200:}
        -:  201:
        -:  202://===----------------------------------------------------------------------===//
        -:  203:// spirv.ISub
        -:  204://===----------------------------------------------------------------------===//
        -:  205:
function _ZN4mlir5spirv6ISubOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  206:OpFoldResult spirv::ISubOp::fold(ArrayRef<Attribute> operands) {
        -:  207:  // x - x = 0
    #####:  208:  if (getOperand1() == getOperand2())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  209:    return Builder(getContext()).getIntegerAttr(getType(), 0);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  210:
        -:  211:  // According to the SPIR-V spec:
        -:  212:  //
        -:  213:  // The resulting value will equal the low-order N bits of the correct result
        -:  214:  // R, where N is the component width and R is computed with enough precision
        -:  215:  // to avoid overflow and underflow.
    #####:  216:  return constFoldBinaryOp<IntegerAttr>(
function _ZZN4mlir5spirv6ISubOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlNS2_5APIntERKS6_E_clES6_S8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  217:      operands, [](APInt a, const APInt &b) { return std::move(a) - b; });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  218:}
        -:  219:
        -:  220://===----------------------------------------------------------------------===//
        -:  221:// spirv.LogicalAnd
        -:  222://===----------------------------------------------------------------------===//
        -:  223:
function _ZN4mlir5spirv12LogicalAndOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  224:OpFoldResult spirv::LogicalAndOp::fold(ArrayRef<Attribute> operands) {
    #####:  225:  assert(operands.size() == 2 && "spirv.LogicalAnd should take two operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  226:
    #####:  227:  if (Optional<bool> rhs = getScalarOrSplatBoolAttr(operands.back())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  228:    // x && true = x
    #####:  229:    if (rhs.value())
branch  0 never executed
branch  1 never executed
    #####:  230:      return getOperand1();
call    0 never executed
call    1 never executed
        -:  231:
        -:  232:    // x && false = false
    #####:  233:    if (!rhs.value())
call    0 never executed
    #####:  234:      return operands.back();
call    0 never executed
call    1 never executed
        -:  235:  }
        -:  236:
    #####:  237:  return Attribute();
call    0 never executed
        -:  238:}
        -:  239:
        -:  240://===----------------------------------------------------------------------===//
        -:  241:// spirv.LogicalNot
        -:  242://===----------------------------------------------------------------------===//
        -:  243:
function _ZN4mlir5spirv12LogicalNotOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 93 returned 100% blocks executed 100%
       93:  244:void spirv::LogicalNotOp::getCanonicalizationPatterns(
        -:  245:    RewritePatternSet &results, MLIRContext *context) {
       93:  246:  results
        -:  247:      .add<ConvertLogicalNotOfIEqual, ConvertLogicalNotOfINotEqual,
        -:  248:           ConvertLogicalNotOfLogicalEqual, ConvertLogicalNotOfLogicalNotEqual>(
       93:  249:          context);
call    0 returned 100%
       93:  250:}
        -:  251:
        -:  252://===----------------------------------------------------------------------===//
        -:  253:// spirv.LogicalOr
        -:  254://===----------------------------------------------------------------------===//
        -:  255:
function _ZN4mlir5spirv11LogicalOrOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  256:OpFoldResult spirv::LogicalOrOp::fold(ArrayRef<Attribute> operands) {
    #####:  257:  assert(operands.size() == 2 && "spirv.LogicalOr should take two operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  258:
    #####:  259:  if (auto rhs = getScalarOrSplatBoolAttr(operands.back())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  260:    if (rhs.value())
branch  0 never executed
branch  1 never executed
        -:  261:      // x || true = true
    #####:  262:      return operands.back();
call    0 never executed
call    1 never executed
        -:  263:
        -:  264:    // x || false = x
    #####:  265:    if (!rhs.value())
call    0 never executed
    #####:  266:      return getOperand1();
call    0 never executed
call    1 never executed
        -:  267:  }
        -:  268:
    #####:  269:  return Attribute();
call    0 never executed
        -:  270:}
        -:  271:
        -:  272://===----------------------------------------------------------------------===//
        -:  273:// spirv.mlir.selection
        -:  274://===----------------------------------------------------------------------===//
        -:  275:
        -:  276:namespace {
        -:  277:// Blocks from the given `spirv.mlir.selection` operation must satisfy the
        -:  278:// following layout:
        -:  279://
        -:  280://       +-----------------------------------------------+
        -:  281://       | header block                                  |
        -:  282://       | spirv.BranchConditionalOp %cond, ^case0, ^case1 |
        -:  283://       +-----------------------------------------------+
        -:  284://                            /   \
        -:  285://                             ...
        -:  286://
        -:  287://
        -:  288://   +------------------------+    +------------------------+
        -:  289://   | case #0                |    | case #1                |
        -:  290://   | spirv.Store %ptr %value0 |    | spirv.Store %ptr %value1 |
        -:  291://   | spirv.Branch ^merge      |    | spirv.Branch ^merge      |
        -:  292://   +------------------------+    +------------------------+
        -:  293://
        -:  294://
        -:  295://                             ...
        -:  296://                            \   /
        -:  297://                              v
        -:  298://                       +-------------+
        -:  299://                       | merge block |
        -:  300://                       +-------------+
        -:  301://
        -:  302:struct ConvertSelectionOpToSelect
        -:  303:    : public OpRewritePattern<spirv::SelectionOp> {
        -:  304:  using OpRewritePattern<spirv::SelectionOp>::OpRewritePattern;
        -:  305:
function _ZNK12_GLOBAL__N_126ConvertSelectionOpToSelect15matchAndRewriteEN4mlir5spirv11SelectionOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  306:  LogicalResult matchAndRewrite(spirv::SelectionOp selectionOp,
        -:  307:                                PatternRewriter &rewriter) const override {
    #####:  308:    auto *op = selectionOp.getOperation();
call    0 never executed
    #####:  309:    auto &body = op->getRegion(0);
call    0 never executed
        -:  310:    // Verifier allows an empty region for `spirv.mlir.selection`.
    #####:  311:    if (body.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  312:      return failure();
        -:  313:    }
        -:  314:
        -:  315:    // Check that region consists of 4 blocks:
        -:  316:    // header block, `true` block, `false` block and merge block.
    #####:  317:    if (std::distance(body.begin(), body.end()) != 4) {
branch  0 never executed
branch  1 never executed
    #####:  318:      return failure();
        -:  319:    }
        -:  320:
    #####:  321:    auto *headerBlock = selectionOp.getHeaderBlock();
call    0 never executed
    #####:  322:    if (!onlyContainsBranchConditionalOp(headerBlock)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  323:      return failure();
        -:  324:    }
        -:  325:
    #####:  326:    auto brConditionalOp =
call    0 never executed
    #####:  327:        cast<spirv::BranchConditionalOp>(headerBlock->front());
call    0 never executed
        -:  328:
    #####:  329:    auto *trueBlock = brConditionalOp.getSuccessor(0);
call    0 never executed
    #####:  330:    auto *falseBlock = brConditionalOp.getSuccessor(1);
call    0 never executed
    #####:  331:    auto *mergeBlock = selectionOp.getMergeBlock();
call    0 never executed
        -:  332:
    #####:  333:    if (failed(canCanonicalizeSelection(trueBlock, falseBlock, mergeBlock)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:      return failure();
        -:  335:
    #####:  336:    auto trueValue = getSrcValue(trueBlock);
call    0 never executed
    #####:  337:    auto falseValue = getSrcValue(falseBlock);
call    0 never executed
    #####:  338:    auto ptrValue = getDstPtr(trueBlock);
call    0 never executed
    #####:  339:    auto storeOpAttributes =
call    0 never executed
    #####:  340:        cast<spirv::StoreOp>(trueBlock->front())->getAttrs();
call    0 never executed
call    1 never executed
        -:  341:
    #####:  342:    auto selectOp = rewriter.create<spirv::SelectOp>(
    #####:  343:        selectionOp.getLoc(), trueValue.getType(),
call    0 never executed
    #####:  344:        brConditionalOp.getCondition(), trueValue, falseValue);
call    0 never executed
call    1 never executed
    #####:  345:    rewriter.create<spirv::StoreOp>(selectOp.getLoc(), ptrValue,
    #####:  346:                                    selectOp.getResult(), storeOpAttributes);
call    0 never executed
call    1 never executed
        -:  347:
        -:  348:    // `spirv.mlir.selection` is not needed anymore.
    #####:  349:    rewriter.eraseOp(op);
call    0 never executed
    #####:  350:    return success();
        -:  351:  }
        -:  352:
        -:  353:private:
        -:  354:  // Checks that given blocks follow the following rules:
        -:  355:  // 1. Each conditional block consists of two operations, the first operation
        -:  356:  //    is a `spirv.Store` and the last operation is a `spirv.Branch`.
        -:  357:  // 2. Each `spirv.Store` uses the same pointer and the same memory attributes.
        -:  358:  // 3. A control flow goes into the given merge block from the given
        -:  359:  //    conditional blocks.
        -:  360:  LogicalResult canCanonicalizeSelection(Block *trueBlock, Block *falseBlock,
        -:  361:                                         Block *mergeBlock) const;
        -:  362:
        -:  363:  bool onlyContainsBranchConditionalOp(Block *block) const {
        -:  364:    return std::next(block->begin()) == block->end() &&
        -:  365:           isa<spirv::BranchConditionalOp>(block->front());
        -:  366:  }
        -:  367:
        -:  368:  bool isSameAttrList(spirv::StoreOp lhs, spirv::StoreOp rhs) const {
        -:  369:    return lhs->getAttrDictionary() == rhs->getAttrDictionary();
        -:  370:  }
        -:  371:
        -:  372:  // Returns a source value for the given block.
        -:  373:  Value getSrcValue(Block *block) const {
        -:  374:    auto storeOp = cast<spirv::StoreOp>(block->front());
        -:  375:    return storeOp.getValue();
        -:  376:  }
        -:  377:
        -:  378:  // Returns a destination value for the given block.
        -:  379:  Value getDstPtr(Block *block) const {
        -:  380:    auto storeOp = cast<spirv::StoreOp>(block->front());
        -:  381:    return storeOp.getPtr();
        -:  382:  }
        -:  383:};
        -:  384:
        -:  385:LogicalResult ConvertSelectionOpToSelect::canCanonicalizeSelection(
        -:  386:    Block *trueBlock, Block *falseBlock, Block *mergeBlock) const {
        -:  387:  // Each block must consists of 2 operations.
        -:  388:  if ((std::distance(trueBlock->begin(), trueBlock->end()) != 2) ||
        -:  389:      (std::distance(falseBlock->begin(), falseBlock->end()) != 2)) {
        -:  390:    return failure();
        -:  391:  }
        -:  392:
        -:  393:  auto trueBrStoreOp = dyn_cast<spirv::StoreOp>(trueBlock->front());
        -:  394:  auto trueBrBranchOp =
        -:  395:      dyn_cast<spirv::BranchOp>(*std::next(trueBlock->begin()));
        -:  396:  auto falseBrStoreOp = dyn_cast<spirv::StoreOp>(falseBlock->front());
        -:  397:  auto falseBrBranchOp =
        -:  398:      dyn_cast<spirv::BranchOp>(*std::next(falseBlock->begin()));
        -:  399:
        -:  400:  if (!trueBrStoreOp || !trueBrBranchOp || !falseBrStoreOp ||
        -:  401:      !falseBrBranchOp) {
        -:  402:    return failure();
        -:  403:  }
        -:  404:
        -:  405:  // Checks that given type is valid for `spirv.SelectOp`.
        -:  406:  // According to SPIR-V spec:
        -:  407:  // "Before version 1.4, Result Type must be a pointer, scalar, or vector.
        -:  408:  // Starting with version 1.4, Result Type can additionally be a composite type
        -:  409:  // other than a vector."
        -:  410:  bool isScalarOrVector = trueBrStoreOp.getValue()
        -:  411:                              .getType()
        -:  412:                              .cast<spirv::SPIRVType>()
        -:  413:                              .isScalarOrVector();
        -:  414:
        -:  415:  // Check that each `spirv.Store` uses the same pointer, memory access
        -:  416:  // attributes and a valid type of the value.
        -:  417:  if ((trueBrStoreOp.getPtr() != falseBrStoreOp.getPtr()) ||
        -:  418:      !isSameAttrList(trueBrStoreOp, falseBrStoreOp) || !isScalarOrVector) {
        -:  419:    return failure();
        -:  420:  }
        -:  421:
        -:  422:  if ((trueBrBranchOp->getSuccessor(0) != mergeBlock) ||
        -:  423:      (falseBrBranchOp->getSuccessor(0) != mergeBlock)) {
        -:  424:    return failure();
        -:  425:  }
        -:  426:
        -:  427:  return success();
        -:  428:}
        -:  429:} // namespace
        -:  430:
function _ZN4mlir5spirv11SelectionOp27getCanonicalizationPatternsERNS_17RewritePatternSetEPNS_11MLIRContextE called 93 returned 100% blocks executed 100%
       93:  431:void spirv::SelectionOp::getCanonicalizationPatterns(RewritePatternSet &results,
        -:  432:                                                     MLIRContext *context) {
       93:  433:  results.add<ConvertSelectionOpToSelect>(context);
call    0 returned 100%
       93:  434:}
