        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/Utils/InliningUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/InliningUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/InliningUtils.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- InliningUtils.cpp ---- Misc utilities for inlining -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements miscellaneous inlining utilities.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Transforms/InliningUtils.h"
        -:   14:
        -:   15:#include "mlir/IR/BlockAndValueMapping.h"
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:#include "mlir/IR/Operation.h"
        -:   18:#include "mlir/Interfaces/CallInterfaces.h"
        -:   19:#include "llvm/ADT/MapVector.h"
        -:   20:#include "llvm/Support/Debug.h"
        -:   21:#include "llvm/Support/raw_ostream.h"
        -:   22:
        -:   23:#define DEBUG_TYPE "inlining"
        -:   24:
        -:   25:using namespace mlir;
        -:   26:
        -:   27:/// Remap locations from the inlined blocks with CallSiteLoc locations with the
        -:   28:/// provided caller location.
        -:   29:static void
function _ZL21remapInlinedLocationsN4llvm14iterator_rangeINS_14ilist_iteratorINS_12ilist_detail12node_optionsIN4mlir5BlockELb1ELb0EvEELb0ELb0EEEEENS4_8LocationE called 3 returned 100% blocks executed 89%
        3:   30:remapInlinedLocations(iterator_range<Region::iterator> inlinedBlocks,
        -:   31:                      Location callerLoc) {
        3:   32:  DenseMap<Location, Location> mappedLocations;
call    0 returned 100%
function _ZZL21remapInlinedLocationsN4llvm14iterator_rangeINS_14ilist_iteratorINS_12ilist_detail12node_optionsIN4mlir5BlockELb1ELb0EvEELb0ELb0EEEEENS4_8LocationEENKUlPNS4_9OperationEE_clESB_.isra.0 called 67 returned 100% blocks executed 100%
       70:   33:  auto remapOpLoc = [&](Operation *op) {
       67:   34:    auto it = mappedLocations.find(op->getLoc());
call    0 returned 100%
       67:   35:    if (it == mappedLocations.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
       65:   36:      auto newLoc = CallSiteLoc::get(op->getLoc(), callerLoc);
call    0 returned 100%
       65:   37:      it = mappedLocations.try_emplace(op->getLoc(), newLoc).first;
call    0 returned 100%
        -:   38:    }
       67:   39:    op->setLoc(it->second);
call    0 returned 100%
       70:   40:  };
        6:   41:  for (auto &block : inlinedBlocks)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        3:   42:    block.walk(remapOpLoc);
call    0 returned 100%
        3:   43:}
        -:   44:
function _ZL20remapInlinedOperandsN4llvm14iterator_rangeINS_14ilist_iteratorINS_12ilist_detail12node_optionsIN4mlir5BlockELb1ELb0EvEELb0ELb0EEEEERNS4_20BlockAndValueMappingE called 1 returned 100% blocks executed 86%
        1:   45:static void remapInlinedOperands(iterator_range<Region::iterator> inlinedBlocks,
        -:   46:                                 BlockAndValueMapping &mapper) {
function _ZZL20remapInlinedOperandsN4llvm14iterator_rangeINS_14ilist_iteratorINS_12ilist_detail12node_optionsIN4mlir5BlockELb1ELb0EvEELb0ELb0EEEEERNS4_20BlockAndValueMappingEENKUlPNS4_9OperationEE_clESC_.isra.0 called 33 returned 100% blocks executed 93%
       33:   47:  auto remapOperands = [&](Operation *op) {
       73:   48:    for (auto &operand : op->getOpOperands())
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
       40:   49:      if (auto mappedOp = mapper.lookupOrNull(operand.get()))
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
       16:   50:        operand.set(mappedOp);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       34:   51:  };
        2:   52:  for (auto &block : inlinedBlocks)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:   53:    block.walk(remapOperands);
call    0 returned 100%
        1:   54:}
        -:   55:
        -:   56://===----------------------------------------------------------------------===//
        -:   57:// InlinerInterface
        -:   58://===----------------------------------------------------------------------===//
        -:   59:
function _ZNK4mlir16InlinerInterface15isLegalToInlineEPNS_9OperationES2_b called 5 returned 100% blocks executed 100%
        5:   60:bool InlinerInterface::isLegalToInline(Operation *call, Operation *callable,
        -:   61:                                       bool wouldBeCloned) const {
        5:   62:  if (auto *handler = getInterfaceFor(call))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5:   63:    return handler->isLegalToInline(call, callable, wouldBeCloned);
call    0 returned 100%
        -:   64:  return false;
        -:   65:}
        -:   66:
function _ZNK4mlir16InlinerInterface15isLegalToInlineEPNS_6RegionES2_bRNS_20BlockAndValueMappingE called 5 returned 100% blocks executed 100%
        5:   67:bool InlinerInterface::isLegalToInline(
        -:   68:    Region *dest, Region *src, bool wouldBeCloned,
        -:   69:    BlockAndValueMapping &valueMapping) const {
        5:   70:  if (auto *handler = getInterfaceFor(dest->getParentOp()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5:   71:    return handler->isLegalToInline(dest, src, wouldBeCloned, valueMapping);
call    0 returned 100%
        -:   72:  return false;
        -:   73:}
        -:   74:
function _ZNK4mlir16InlinerInterface15isLegalToInlineEPNS_9OperationEPNS_6RegionEbRNS_20BlockAndValueMappingE called 73 returned 100% blocks executed 100%
       73:   75:bool InlinerInterface::isLegalToInline(
        -:   76:    Operation *op, Region *dest, bool wouldBeCloned,
        -:   77:    BlockAndValueMapping &valueMapping) const {
       73:   78:  if (auto *handler = getInterfaceFor(op))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
       71:   79:    return handler->isLegalToInline(op, dest, wouldBeCloned, valueMapping);
call    0 returned 100%
        -:   80:  return false;
        -:   81:}
        -:   82:
function _ZNK4mlir16InlinerInterface24shouldAnalyzeRecursivelyEPNS_9OperationE called 71 returned 100% blocks executed 100%
       71:   83:bool InlinerInterface::shouldAnalyzeRecursively(Operation *op) const {
       71:   84:  auto *handler = getInterfaceFor(op);
call    0 returned 100%
       71:   85:  return handler ? handler->shouldAnalyzeRecursively(op) : true;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:   86:}
        -:   87:
        -:   88:/// Handle the given inlined terminator by replacing it with a new operation
        -:   89:/// as necessary.
function _ZNK4mlir16InlinerInterface16handleTerminatorEPNS_9OperationEPNS_5BlockE called 0 returned 0% blocks executed 0%
    #####:   90:void InlinerInterface::handleTerminator(Operation *op, Block *newDest) const {
    #####:   91:  auto *handler = getInterfaceFor(op);
call    0 never executed
    #####:   92:  assert(handler && "expected valid dialect handler");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   93:  handler->handleTerminator(op, newDest);
call    0 never executed
    #####:   94:}
        -:   95:
        -:   96:/// Handle the given inlined terminator by replacing it with a new operation
        -:   97:/// as necessary.
function _ZNK4mlir16InlinerInterface16handleTerminatorEPNS_9OperationEN4llvm8ArrayRefINS_5ValueEEE called 3 returned 100% blocks executed 80%
        3:   98:void InlinerInterface::handleTerminator(Operation *op,
        -:   99:                                        ArrayRef<Value> valuesToRepl) const {
        3:  100:  auto *handler = getInterfaceFor(op);
call    0 returned 100%
       3*:  101:  assert(handler && "expected valid dialect handler");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        3:  102:  handler->handleTerminator(op, valuesToRepl);
call    0 returned 100%
        3:  103:}
        -:  104:
function _ZNK4mlir16InlinerInterface24processInlinedCallBlocksEPNS_9OperationEN4llvm14iterator_rangeINS3_14ilist_iteratorINS3_12ilist_detail12node_optionsINS_5BlockELb1ELb0EvEELb0ELb0EEEEE called 3 returned 100% blocks executed 80%
        3:  105:void InlinerInterface::processInlinedCallBlocks(
        -:  106:    Operation *call, iterator_range<Region::iterator> inlinedBlocks) const {
        3:  107:  auto *handler = getInterfaceFor(call);
call    0 returned 100%
       3*:  108:  assert(handler && "expected valid dialect handler");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        3:  109:  handler->processInlinedCallBlocks(call, inlinedBlocks);
call    0 returned 100%
        3:  110:}
        -:  111:
        -:  112:/// Utility to check that all of the operations within 'src' can be inlined.
function _ZL15isLegalToInlineRN4mlir16InlinerInterfaceEPNS_6RegionES3_bRNS_20BlockAndValueMappingE called 13 returned 100% blocks executed 73%
       13:  113:static bool isLegalToInline(InlinerInterface &interface, Region *src,
        -:  114:                            Region *insertRegion, bool shouldCloneInlinedRegion,
        -:  115:                            BlockAndValueMapping &valueMapping) {
       24:  116:  for (auto &block : *src) {
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       84:  117:    for (auto &op : block) {
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
        -:  118:      // Check this operation.
       73:  119:      if (!interface.isLegalToInline(&op, insertRegion,
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       73:  120:                                     shouldCloneInlinedRegion, valueMapping)) {
call    0 returned 100%
       2*:  121:        LLVM_DEBUG({
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  122:          llvm::dbgs() << "* Illegal to inline because of op: ";
        -:  123:          op.dump();
        -:  124:        });
        2:  125:        return false;
        -:  126:      }
        -:  127:      // Check any nested regions.
      142:  128:      if (interface.shouldAnalyzeRecursively(&op) &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
function _ZZL15isLegalToInlineRN4mlir16InlinerInterfaceEPNS_6RegionES3_bRNS_20BlockAndValueMappingEENKUlRS2_E_clES6_ called 8 returned 100% blocks executed 100%
     172*:  129:          llvm::any_of(op.getRegions(), [&](Region &region) {
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
call    2 returned 100%
        8:  130:            return !isLegalToInline(interface, &region, insertRegion,
        8:  131:                                    shouldCloneInlinedRegion, valueMapping);
call    0 returned 100%
        -:  132:          }))
    #####:  133:        return false;
        -:  134:    }
        -:  135:  }
        -:  136:  return true;
        -:  137:}
        -:  138:
        -:  139://===----------------------------------------------------------------------===//
        -:  140:// Inline Methods
        -:  141://===----------------------------------------------------------------------===//
        -:  142:
        -:  143:static LogicalResult
function _ZL16inlineRegionImplRN4mlir16InlinerInterfaceEPNS_6RegionEPNS_5BlockEN4llvm14ilist_iteratorINS6_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEERNS_20BlockAndValueMappingENS_10ValueRangeENS_9TypeRangeENS6_8OptionalINS_8LocationEEEbPSA_ called 5 returned 100% blocks executed 69%
        5:  144:inlineRegionImpl(InlinerInterface &interface, Region *src, Block *inlineBlock,
        -:  145:                 Block::iterator inlinePoint, BlockAndValueMapping &mapper,
        -:  146:                 ValueRange resultsToReplace, TypeRange regionResultTypes,
        -:  147:                 Optional<Location> inlineLoc, bool shouldCloneInlinedRegion,
        -:  148:                 Operation *call = nullptr) {
       5*:  149:  assert(resultsToReplace.size() == regionResultTypes.size());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  150:  // We expect the region to have at least one block.
        5:  151:  if (src->empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  152:    return failure();
        -:  153:
        -:  154:  // Check that all of the region arguments have been mapped.
        5:  155:  auto *srcEntryBlock = &src->front();
call    0 returned 100%
        5:  156:  if (llvm::any_of(srcEntryBlock->getArguments(),
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:                   [&](BlockArgument arg) { return !mapper.contains(arg); }))
    #####:  158:    return failure();
        -:  159:
        -:  160:  // Check that the operations within the source region are valid to inline.
        5:  161:  Region *insertRegion = inlineBlock->getParent();
call    0 returned 100%
        5:  162:  if (!interface.isLegalToInline(insertRegion, src, shouldCloneInlinedRegion,
       10:  163:                                 mapper) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
        5:  164:      !isLegalToInline(interface, src, insertRegion, shouldCloneInlinedRegion,
call    0 returned 100%
        -:  165:                       mapper))
        2:  166:    return failure();
        -:  167:
        -:  168:  // Check to see if the region is being cloned, or moved inline. In either
        -:  169:  // case, move the new blocks after the 'insertBlock' to improve IR
        -:  170:  // readability.
        3:  171:  Block *postInsertBlock = inlineBlock->splitBlock(inlinePoint);
call    0 returned 100%
        3:  172:  if (shouldCloneInlinedRegion)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:  173:    src->cloneInto(insertRegion, postInsertBlock->getIterator(), mapper);
call    0 returned 100%
        -:  174:  else
        2:  175:    insertRegion->getBlocks().splice(postInsertBlock->getIterator(),
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  176:                                     src->getBlocks(), src->begin(),
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  177:                                     src->end());
        -:  178:
        -:  179:  // Get the range of newly inserted blocks.
        3:  180:  auto newBlocks = llvm::make_range(std::next(inlineBlock->getIterator()),
        6:  181:                                    postInsertBlock->getIterator());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        3:  182:  Block *firstNewBlock = &*newBlocks.begin();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  183:
        -:  184:  // Remap the locations of the inlined operations if a valid source location
        -:  185:  // was provided.
        3:  186:  if (inlineLoc && !inlineLoc->isa<UnknownLoc>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        3:  187:    remapInlinedLocations(newBlocks, *inlineLoc);
call    0 returned 100%
        -:  188:
        -:  189:  // If the blocks were moved in-place, make sure to remap any necessary
        -:  190:  // operands.
        3:  191:  if (!shouldCloneInlinedRegion)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  192:    remapInlinedOperands(newBlocks, mapper);
call    0 returned 100%
        -:  193:
        -:  194:  // Process the newly inlined blocks.
        3:  195:  if (call)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  196:    interface.processInlinedCallBlocks(call, newBlocks);
call    0 returned 100%
        3:  197:  interface.processInlinedBlocks(newBlocks);
call    0 returned 100%
        -:  198:
        -:  199:  // Handle the case where only a single block was inlined.
        6:  200:  if (std::next(newBlocks.begin()) == newBlocks.end()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  201:    // Have the interface handle the terminator of this block.
        3:  202:    auto *firstBlockTerminator = firstNewBlock->getTerminator();
call    0 returned 100%
        3:  203:    interface.handleTerminator(firstBlockTerminator,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        3:  204:                               llvm::to_vector<6>(resultsToReplace));
call    0 returned 100%
call    1 returned 100%
        3:  205:    firstBlockTerminator->erase();
call    0 returned 100%
        -:  206:
        -:  207:    // Merge the post insert block into the cloned entry block.
        3:  208:    firstNewBlock->getOperations().splice(firstNewBlock->end(),
call    0 returned 100%
        3:  209:                                          postInsertBlock->getOperations());
call    0 returned 100%
        3:  210:    postInsertBlock->erase();
call    0 returned 100%
        -:  211:  } else {
        -:  212:    // Otherwise, there were multiple blocks inlined. Add arguments to the post
        -:  213:    // insertion block to represent the results to replace.
    #####:  214:    for (const auto &resultToRepl : llvm::enumerate(resultsToReplace)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  215:      resultToRepl.value().replaceAllUsesWith(
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  216:          postInsertBlock->addArgument(regionResultTypes[resultToRepl.index()],
    #####:  217:                                       resultToRepl.value().getLoc()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  218:    }
        -:  219:
        -:  220:    /// Handle the terminators for each of the new blocks.
    #####:  221:    for (auto &newBlock : newBlocks)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  222:      interface.handleTerminator(newBlock.getTerminator(), postInsertBlock);
call    0 never executed
call    1 never executed
        -:  223:  }
        -:  224:
        -:  225:  // Splice the instructions of the inlined entry block into the insert block.
        3:  226:  inlineBlock->getOperations().splice(inlineBlock->end(),
call    0 returned 100%
        3:  227:                                      firstNewBlock->getOperations());
call    0 returned 100%
        3:  228:  firstNewBlock->erase();
call    0 returned 100%
        3:  229:  return success();
        -:  230:}
        -:  231:
        -:  232:static LogicalResult
function _ZL16inlineRegionImplRN4mlir16InlinerInterfaceEPNS_6RegionEPNS_5BlockEN4llvm14ilist_iteratorINS6_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEENS_10ValueRangeESD_NS6_8OptionalINS_8LocationEEEbPSA_ called 0 returned 0% blocks executed 0%
    #####:  233:inlineRegionImpl(InlinerInterface &interface, Region *src, Block *inlineBlock,
        -:  234:                 Block::iterator inlinePoint, ValueRange inlinedOperands,
        -:  235:                 ValueRange resultsToReplace, Optional<Location> inlineLoc,
        -:  236:                 bool shouldCloneInlinedRegion, Operation *call = nullptr) {
        -:  237:  // We expect the region to have at least one block.
    #####:  238:  if (src->empty())
branch  0 never executed
branch  1 never executed
    #####:  239:    return failure();
        -:  240:
    #####:  241:  auto *entryBlock = &src->front();
call    0 never executed
    #####:  242:  if (inlinedOperands.size() != entryBlock->getNumArguments())
branch  0 never executed
branch  1 never executed
    #####:  243:    return failure();
        -:  244:
        -:  245:  // Map the provided call operands to the arguments of the region.
    #####:  246:  BlockAndValueMapping mapper;
call    0 never executed
call    1 never executed
    #####:  247:  for (unsigned i = 0, e = inlinedOperands.size(); i != e; ++i) {
branch  0 never executed
branch  1 never executed
        -:  248:    // Verify that the types of the provided values match the function argument
        -:  249:    // types.
    #####:  250:    BlockArgument regionArg = entryBlock->getArgument(i);
call    0 never executed
    #####:  251:    if (inlinedOperands[i].getType() != regionArg.getType())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  252:      return failure();
    #####:  253:    mapper.map(regionArg, inlinedOperands[i]);
call    0 never executed
call    1 never executed
        -:  254:  }
        -:  255:
        -:  256:  // Call into the main region inliner function.
    #####:  257:  return inlineRegionImpl(interface, src, inlineBlock, inlinePoint, mapper,
        -:  258:                          resultsToReplace, resultsToReplace.getTypes(),
    #####:  259:                          inlineLoc, shouldCloneInlinedRegion, call);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  260:}
        -:  261:
function _ZN4mlir12inlineRegionERNS_16InlinerInterfaceEPNS_6RegionEPNS_9OperationERNS_20BlockAndValueMappingENS_10ValueRangeENS_9TypeRangeEN4llvm8OptionalINS_8LocationEEEb called 0 returned 0% blocks executed 0%
    #####:  262:LogicalResult mlir::inlineRegion(InlinerInterface &interface, Region *src,
        -:  263:                                 Operation *inlinePoint,
        -:  264:                                 BlockAndValueMapping &mapper,
        -:  265:                                 ValueRange resultsToReplace,
        -:  266:                                 TypeRange regionResultTypes,
        -:  267:                                 Optional<Location> inlineLoc,
        -:  268:                                 bool shouldCloneInlinedRegion) {
    #####:  269:  return inlineRegion(interface, src, inlinePoint->getBlock(),
    #####:  270:                      ++inlinePoint->getIterator(), mapper, resultsToReplace,
    #####:  271:                      regionResultTypes, inlineLoc, shouldCloneInlinedRegion);
call    0 never executed
        -:  272:}
        -:  273:LogicalResult
function _ZN4mlir12inlineRegionERNS_16InlinerInterfaceEPNS_6RegionEPNS_5BlockEN4llvm14ilist_iteratorINS6_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEERNS_20BlockAndValueMappingENS_10ValueRangeENS_9TypeRangeENS6_8OptionalINS_8LocationEEEb called 0 returned 0% blocks executed 0%
    #####:  274:mlir::inlineRegion(InlinerInterface &interface, Region *src, Block *inlineBlock,
        -:  275:                   Block::iterator inlinePoint, BlockAndValueMapping &mapper,
        -:  276:                   ValueRange resultsToReplace, TypeRange regionResultTypes,
        -:  277:                   Optional<Location> inlineLoc,
        -:  278:                   bool shouldCloneInlinedRegion) {
    #####:  279:  return inlineRegionImpl(interface, src, inlineBlock, inlinePoint, mapper,
        -:  280:                          resultsToReplace, regionResultTypes, inlineLoc,
    #####:  281:                          shouldCloneInlinedRegion);
call    0 never executed
call    1 never executed
        -:  282:}
        -:  283:
function _ZN4mlir12inlineRegionERNS_16InlinerInterfaceEPNS_6RegionEPNS_9OperationENS_10ValueRangeES6_N4llvm8OptionalINS_8LocationEEEb called 0 returned 0% blocks executed 0%
    #####:  284:LogicalResult mlir::inlineRegion(InlinerInterface &interface, Region *src,
        -:  285:                                 Operation *inlinePoint,
        -:  286:                                 ValueRange inlinedOperands,
        -:  287:                                 ValueRange resultsToReplace,
        -:  288:                                 Optional<Location> inlineLoc,
        -:  289:                                 bool shouldCloneInlinedRegion) {
    #####:  290:  return inlineRegion(interface, src, inlinePoint->getBlock(),
    #####:  291:                      ++inlinePoint->getIterator(), inlinedOperands,
    #####:  292:                      resultsToReplace, inlineLoc, shouldCloneInlinedRegion);
call    0 never executed
        -:  293:}
        -:  294:LogicalResult
function _ZN4mlir12inlineRegionERNS_16InlinerInterfaceEPNS_6RegionEPNS_5BlockEN4llvm14ilist_iteratorINS6_12ilist_detail12node_optionsINS_9OperationELb1ELb0EvEELb0ELb0EEENS_10ValueRangeESD_NS6_8OptionalINS_8LocationEEEb called 0 returned 0% blocks executed 0%
    #####:  295:mlir::inlineRegion(InlinerInterface &interface, Region *src, Block *inlineBlock,
        -:  296:                   Block::iterator inlinePoint, ValueRange inlinedOperands,
        -:  297:                   ValueRange resultsToReplace, Optional<Location> inlineLoc,
        -:  298:                   bool shouldCloneInlinedRegion) {
    #####:  299:  return inlineRegionImpl(interface, src, inlineBlock, inlinePoint,
        -:  300:                          inlinedOperands, resultsToReplace, inlineLoc,
    #####:  301:                          shouldCloneInlinedRegion);
call    0 never executed
call    1 never executed
        -:  302:}
        -:  303:
        -:  304:/// Utility function used to generate a cast operation from the given interface,
        -:  305:/// or return nullptr if a cast could not be generated.
function _ZL21materializeConversionPKN4mlir23DialectInlinerInterfaceERN4llvm15SmallVectorImplIPNS_9OperationEEERNS_9OpBuilderENS_5ValueENS_4TypeENS_8LocationE called 0 returned 0% blocks executed 0%
    #####:  306:static Value materializeConversion(const DialectInlinerInterface *interface,
        -:  307:                                   SmallVectorImpl<Operation *> &castOps,
        -:  308:                                   OpBuilder &castBuilder, Value arg, Type type,
        -:  309:                                   Location conversionLoc) {
    #####:  310:  if (!interface)
branch  0 never executed
branch  1 never executed
    #####:  311:    return nullptr;
        -:  312:
        -:  313:  // Check to see if the interface for the call can materialize a conversion.
    #####:  314:  Operation *castOp = interface->materializeCallConversion(castBuilder, arg,
    #####:  315:                                                           type, conversionLoc);
call    0 never executed
    #####:  316:  if (!castOp)
branch  0 never executed
branch  1 never executed
    #####:  317:    return nullptr;
    #####:  318:  castOps.push_back(castOp);
call    0 never executed
        -:  319:
        -:  320:  // Ensure that the generated cast is correct.
    #####:  321:  assert(castOp->getNumOperands() == 1 && castOp->getOperand(0) == arg &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
        -:  322:         castOp->getNumResults() == 1 && *castOp->result_type_begin() == type);
    #####:  323:  return castOp->getResult(0);
        -:  324:}
        -:  325:
        -:  326:/// This function inlines a given region, 'src', of a callable operation,
        -:  327:/// 'callable', into the location defined by the given call operation. This
        -:  328:/// function returns failure if inlining is not possible, success otherwise. On
        -:  329:/// failure, no changes are made to the module. 'shouldCloneInlinedRegion'
        -:  330:/// corresponds to whether the source region should be cloned into the 'call' or
        -:  331:/// spliced directly.
function _ZN4mlir10inlineCallERNS_16InlinerInterfaceENS_15CallOpInterfaceENS_19CallableOpInterfaceEPNS_6RegionEb called 6923 returned 100% blocks executed 73%
     6923:  332:LogicalResult mlir::inlineCall(InlinerInterface &interface,
        -:  333:                               CallOpInterface call,
        -:  334:                               CallableOpInterface callable, Region *src,
        -:  335:                               bool shouldCloneInlinedRegion) {
        -:  336:  // We expect the region to have at least one block.
     6923:  337:  if (src->empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     6918:  338:    return failure();
        5:  339:  auto *entryBlock = &src->front();
call    0 returned 100%
        5:  340:  ArrayRef<Type> callableResultTypes = callable.getCallableResults();
call    0 returned 100%
        -:  341:
        -:  342:  // Make sure that the number of arguments and results matchup between the call
        -:  343:  // and the region.
        5:  344:  SmallVector<Value, 8> callOperands(call.getArgOperands());
call    0 returned 100%
call    1 returned 100%
       13:  345:  SmallVector<Value, 8> callResults(call->getResults());
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
call    2 returned 100%
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
        5:  346:  if (callOperands.size() != entryBlock->getNumArguments() ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        5:  347:      callResults.size() != callableResultTypes.size())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  348:    return failure();
        -:  349:
        -:  350:  // A set of cast operations generated to matchup the signature of the region
        -:  351:  // with the signature of the call.
       10:  352:  SmallVector<Operation *, 4> castOps;
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        5:  353:  castOps.reserve(callOperands.size() + callResults.size());
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  354:
        -:  355:  // Functor used to cleanup generated state on failure.
function _ZZN4mlir10inlineCallERNS_16InlinerInterfaceENS_15CallOpInterfaceENS_19CallableOpInterfaceEPNS_6RegionEbENKUlvE_clEv.isra.0 called 2 returned 100% blocks executed 43%
        7:  356:  auto cleanupState = [&] {
       2*:  357:    for (auto *op : castOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  358:      op->getResult(0).replaceAllUsesWith(op->getOperand(0));
call    0 never executed
call    1 never executed
    #####:  359:      op->erase();
call    0 never executed
        -:  360:    }
        2:  361:    return failure();
        5:  362:  };
        -:  363:
        -:  364:  // Builder used for any conversion operations that need to be materialized.
        5:  365:  OpBuilder castBuilder(call);
call    0 returned 100%
        5:  366:  Location castLoc = call.getLoc();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  367:  const auto *callInterface = interface.getInterfaceFor(call->getDialect());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  368:
        -:  369:  // Map the provided call operands to the arguments of the region.
       10:  370:  BlockAndValueMapping mapper;
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
       48:  371:  for (unsigned i = 0, e = callOperands.size(); i != e; ++i) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       43:  372:    BlockArgument regionArg = entryBlock->getArgument(i);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       43:  373:    Value operand = callOperands[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  374:
        -:  375:    // If the call operand doesn't match the expected region argument, try to
        -:  376:    // generate a cast.
       43:  377:    Type regionArgType = regionArg.getType();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       43:  378:    if (operand.getType() != regionArgType) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  379:      if (!(operand = materializeConversion(callInterface, castOps, castBuilder,
branch  0 never executed
branch  1 never executed
    #####:  380:                                            operand, regionArgType, castLoc)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  381:        return cleanupState();
call    0 never executed
        -:  382:    }
       43:  383:    mapper.map(regionArg, operand);
call    0 returned 100%
        -:  384:  }
        -:  385:
        -:  386:  // Ensure that the resultant values of the call match the callable.
        5:  387:  castBuilder.setInsertionPointAfter(call);
call    0 returned 100%
        8:  388:  for (unsigned i = 0, e = callResults.size(); i != e; ++i) {
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        3:  389:    Value callResult = callResults[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        3:  390:    if (callResult.getType() == callableResultTypes[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        3:  391:      continue;
        -:  392:
        -:  393:    // Generate a conversion that will produce the original type, so that the IR
        -:  394:    // is still valid after the original call gets replaced.
    #####:  395:    Value castResult =
        -:  396:        materializeConversion(callInterface, castOps, castBuilder, callResult,
    #####:  397:                              callResult.getType(), castLoc);
call    0 never executed
    #####:  398:    if (!castResult)
branch  0 never executed
branch  1 never executed
    #####:  399:      return cleanupState();
call    0 never executed
    #####:  400:    callResult.replaceAllUsesWith(castResult);
call    0 never executed
    #####:  401:    castResult.getDefiningOp()->replaceUsesOfWith(castResult, callResult);
call    0 never executed
call    1 never executed
        -:  402:  }
        -:  403:
        -:  404:  // Check that it is legal to inline the callable into the call.
        5:  405:  if (!interface.isLegalToInline(call, callable, shouldCloneInlinedRegion))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  406:    return cleanupState();
call    0 never executed
        -:  407:
        -:  408:  // Attempt to inline the call.
       10:  409:  if (failed(inlineRegionImpl(interface, src, call->getBlock(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 40% (fallthrough)
branch  3 taken 60%
        5:  410:                              ++call->getIterator(), mapper, callResults,
call    0 returned 100%
        5:  411:                              callableResultTypes, call.getLoc(),
call    0 returned 100%
        -:  412:                              shouldCloneInlinedRegion, call)))
        2:  413:    return cleanupState();
call    0 returned 100%
        5:  414:  return success();
call    0 returned 100%
        -:  415:}
