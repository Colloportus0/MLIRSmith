        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Func/Transforms/FuncConversions.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Func/Transforms/CMakeFiles/obj.MLIRFuncTransforms.dir/FuncConversions.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Func/Transforms/CMakeFiles/obj.MLIRFuncTransforms.dir/FuncConversions.cpp.gcda
        -:    0:Runs:116158
        -:    1://===- FuncConversions.cpp - Function conversions -------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Func/Transforms/FuncConversions.h"
        -:   10:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   11:#include "mlir/Transforms/DialectConversion.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::func;
        -:   15:
        -:   16:namespace {
        -:   17:/// Converts the operand and result types of the CallOp, used together with the
        -:   18:/// FuncOpSignatureConversion.
        -:   19:struct CallOpSignatureConversion : public OpConversionPattern<CallOp> {
        -:   20:  using OpConversionPattern<CallOp>::OpConversionPattern;
        -:   21:
        -:   22:  /// Hook for derived classes to implement combined matching and rewriting.
        -:   23:  LogicalResult
function _ZNK12_GLOBAL__N_125CallOpSignatureConversion15matchAndRewriteEN4mlir4func6CallOpENS2_13CallOpAdaptorERNS1_25ConversionPatternRewriterE called 62 returned 100% blocks executed 86%
       62:   24:  matchAndRewrite(CallOp callOp, OpAdaptor adaptor,
        -:   25:                  ConversionPatternRewriter &rewriter) const override {
        -:   26:    // Convert the original function results.
       62:   27:    SmallVector<Type, 1> convertedResults;
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
      124:   28:    if (failed(typeConverter->convertTypes(callOp.getResultTypes(),
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   29:                                           convertedResults)))
    #####:   30:      return failure();
        -:   31:
        -:   32:    // Substitute with the new result types from the corresponding FuncType
        -:   33:    // conversion.
       62:   34:    rewriter.replaceOpWithNewOp<CallOp>(
       62:   35:        callOp, callOp.getCallee(), convertedResults, adaptor.getOperands());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       62:   36:    return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   37:  }
        -:   38:};
        -:   39:} // namespace
        -:   40:
function _ZN4mlir35populateCallOpTypeConversionPatternERNS_17RewritePatternSetERNS_13TypeConverterE called 2661 returned 100% blocks executed 100%
     2661:   41:void mlir::populateCallOpTypeConversionPattern(RewritePatternSet &patterns,
        -:   42:                                               TypeConverter &converter) {
     2661:   43:  patterns.add<CallOpSignatureConversion>(converter, patterns.getContext());
call    0 returned 100%
     2661:   44:}
        -:   45:
        -:   46:namespace {
        -:   47:/// Only needed to support partial conversion of functions where this pattern
        -:   48:/// ensures that the branch operation arguments matches up with the succesor
        -:   49:/// block arguments.
        -:   50:class BranchOpInterfaceTypeConversion
        -:   51:    : public OpInterfaceConversionPattern<BranchOpInterface> {
        -:   52:public:
        -:   53:  using OpInterfaceConversionPattern<
        -:   54:      BranchOpInterface>::OpInterfaceConversionPattern;
        -:   55:
function _ZN12_GLOBAL__N_131BranchOpInterfaceTypeConversionC2ERN4mlir13TypeConverterEPNS1_11MLIRContextEN4llvm12function_refIFbNS1_17BranchOpInterfaceEiEEE called 429 returned 100% blocks executed 100%
      429:   56:  BranchOpInterfaceTypeConversion(
        -:   57:      TypeConverter &typeConverter, MLIRContext *ctx,
        -:   58:      function_ref<bool(BranchOpInterface, int)> shouldConvertBranchOperand)
      429:   59:      : OpInterfaceConversionPattern(typeConverter, ctx, /*benefit=*/1),
      429:   60:        shouldConvertBranchOperand(shouldConvertBranchOperand) {}
call    0 returned 100%
call    1 returned 100%
        -:   61:
        -:   62:  LogicalResult
function _ZNK12_GLOBAL__N_131BranchOpInterfaceTypeConversion15matchAndRewriteEN4mlir17BranchOpInterfaceEN4llvm8ArrayRefINS1_5ValueEEERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   63:  matchAndRewrite(BranchOpInterface op, ArrayRef<Value> operands,
        -:   64:                  ConversionPatternRewriter &rewriter) const final {
        -:   65:    // For a branch operation, only some operands go to the target blocks, so
        -:   66:    // only rewrite those.
    #####:   67:    SmallVector<Value, 4> newOperands(op->operand_begin(), op->operand_end());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   68:    for (int succIdx = 0, succEnd = op->getBlock()->getNumSuccessors();
call    0 never executed
    #####:   69:         succIdx < succEnd; ++succIdx) {
branch  0 never executed
branch  1 never executed
    #####:   70:      OperandRange forwardedOperands =
    #####:   71:          op.getSuccessorOperands(succIdx).getForwardedOperands();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   72:      if (forwardedOperands.empty())
branch  0 never executed
branch  1 never executed
    #####:   73:        continue;
        -:   74:
    #####:   75:      for (int idx = forwardedOperands.getBeginOperandIndex(),
call    0 never executed
    #####:   76:               eidx = idx + forwardedOperands.size();
    #####:   77:           idx < eidx; ++idx) {
branch  0 never executed
branch  1 never executed
    #####:   78:        if (!shouldConvertBranchOperand || shouldConvertBranchOperand(op, idx))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   79:          newOperands[idx] = operands[idx];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   80:      }
        -:   81:    }
    #####:   82:    rewriter.updateRootInPlace(
branch  0 never executed
branch  1 never executed
call    2 never executed
function _ZZNK12_GLOBAL__N_131BranchOpInterfaceTypeConversion15matchAndRewriteEN4mlir17BranchOpInterfaceEN4llvm8ArrayRefINS1_5ValueEEERNS1_25ConversionPatternRewriterEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:   83:        op, [newOperands, op]() { op->setOperands(newOperands); });
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   84:    return success();
branch  0 never executed
branch  1 never executed
        -:   85:  }
        -:   86:
        -:   87:private:
        -:   88:  function_ref<bool(BranchOpInterface, int)> shouldConvertBranchOperand;
        -:   89:};
        -:   90:} // namespace
        -:   91:
        -:   92:namespace {
        -:   93:/// Only needed to support partial conversion of functions where this pattern
        -:   94:/// ensures that the branch operation arguments matches up with the succesor
        -:   95:/// block arguments.
        -:   96:class ReturnOpTypeConversion : public OpConversionPattern<ReturnOp> {
        -:   97:public:
        -:   98:  using OpConversionPattern<ReturnOp>::OpConversionPattern;
        -:   99:
        -:  100:  LogicalResult
function _ZNK12_GLOBAL__N_122ReturnOpTypeConversion15matchAndRewriteEN4mlir4func8ReturnOpENS2_15ReturnOpAdaptorERNS1_25ConversionPatternRewriterE called 57 returned 100% blocks executed 100%
       57:  101:  matchAndRewrite(ReturnOp op, OpAdaptor adaptor,
        -:  102:                  ConversionPatternRewriter &rewriter) const final {
        -:  103:    // For a return, all operands go to the results of the parent, so
        -:  104:    // rewrite them all.
       57:  105:    rewriter.updateRootInPlace(op,
call    0 returned 100%
       57:  106:                               [&] { op->setOperands(adaptor.getOperands()); });
call    0 returned 100%
call    1 returned 100%
       57:  107:    return success();
        -:  108:  }
        -:  109:};
        -:  110:} // namespace
        -:  111:
function _ZN4mlir46populateBranchOpInterfaceTypeConversionPatternERNS_17RewritePatternSetERNS_13TypeConverterEN4llvm12function_refIFbNS_17BranchOpInterfaceEiEEE called 429 returned 100% blocks executed 100%
      429:  112:void mlir::populateBranchOpInterfaceTypeConversionPattern(
        -:  113:    RewritePatternSet &patterns, TypeConverter &typeConverter,
        -:  114:    function_ref<bool(BranchOpInterface, int)> shouldConvertBranchOperand) {
      429:  115:  patterns.add<BranchOpInterfaceTypeConversion>(
      429:  116:      typeConverter, patterns.getContext(), shouldConvertBranchOperand);
call    0 returned 100%
      429:  117:}
        -:  118:
function _ZN4mlir48isLegalForBranchOpInterfaceTypeConversionPatternEPNS_9OperationERNS_13TypeConverterE called 1021 returned 100% blocks executed 21%
     1021:  119:bool mlir::isLegalForBranchOpInterfaceTypeConversionPattern(
        -:  120:    Operation *op, TypeConverter &converter) {
        -:  121:  // All successor operands of branch like operations must be rewritten.
     1021:  122:  if (auto branchOp = dyn_cast<BranchOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  123:    for (int p = 0, e = op->getBlock()->getNumSuccessors(); p < e; ++p) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  124:      auto successorOperands = branchOp.getSuccessorOperands(p);
call    0 never executed
    #####:  125:      if (!converter.isLegal(
call    0 never executed
    #####:  126:              successorOperands.getForwardedOperands().getTypes()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  127:        return false;
branch  0 never executed
branch  1 never executed
        -:  128:    }
        -:  129:    return true;
        -:  130:  }
        -:  131:
     1021:  132:  return false;
        -:  133:}
        -:  134:
function _ZN4mlir37populateReturnOpTypeConversionPatternERNS_17RewritePatternSetERNS_13TypeConverterE called 1283 returned 100% blocks executed 100%
     1283:  135:void mlir::populateReturnOpTypeConversionPattern(RewritePatternSet &patterns,
        -:  136:                                                 TypeConverter &typeConverter) {
     1283:  137:  patterns.add<ReturnOpTypeConversion>(typeConverter, patterns.getContext());
call    0 returned 100%
     1283:  138:}
        -:  139:
function _ZN4mlir39isLegalForReturnOpTypeConversionPatternEPNS_9OperationERNS_13TypeConverterEb called 1021 returned 100% blocks executed 100%
     1021:  140:bool mlir::isLegalForReturnOpTypeConversionPattern(Operation *op,
        -:  141:                                                   TypeConverter &converter,
        -:  142:                                                   bool returnOpAlwaysLegal) {
        -:  143:  // If this is a `return` and the user pass wants to convert/transform across
        -:  144:  // function boundaries, then `converter` is invoked to check whether the the
        -:  145:  // `return` op is legal.
     1021:  146:  if (isa<ReturnOp>(op) && !returnOpAlwaysLegal)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     1019:  147:    return converter.isLegal(op);
call    0 returned 100%
        -:  148:
        -:  149:  // ReturnLike operations have to be legalized with their parent. For
        -:  150:  // return this is handled, for other ops they remain as is.
        2:  151:  return op->hasTrait<OpTrait::ReturnLike>();
call    0 returned 100%
        -:  152:}
        -:  153:
function _ZN4mlir36isNotBranchOpInterfaceOrReturnLikeOpEPNS_9OperationE called 1743145 returned 100% blocks executed 92%
  1743145:  154:bool mlir::isNotBranchOpInterfaceOrReturnLikeOp(Operation *op) {
        -:  155:  // If it is not a terminator, ignore it.
  1743145:  156:  if (!op->mightHaveTrait<OpTrait::IsTerminator>())
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
        -:  157:    return true;
        -:  158:
        -:  159:  // If it is not the last operation in the block, also ignore it. We do
        -:  160:  // this to handle unknown operations, as well.
    97085:  161:  Block *block = op->getBlock();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   194170:  162:  if (!block || &block->back() != op)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  163:    return true;
        -:  164:
        -:  165:  // We don't want to handle terminators in nested regions, assume they are
        -:  166:  // always legal.
   291255:  167:  if (!isa_and_nonnull<FuncOp>(op->getParentOp()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
    96064:  168:    return true;
        -:  169:
        -:  170:  return false;
        -:  171:}
