        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/SymbolPrivatize.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/SymbolPrivatize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/CMakeFiles/obj.MLIRTransforms.dir/SymbolPrivatize.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- SymbolPrivatize.cpp - Pass to mark symbols private -----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements an pass that marks all symbols as private unless
        -:   10:// excluded.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Transforms/Passes.h"
        -:   15:
        -:   16:#include "mlir/IR/SymbolTable.h"
        -:   17:
        -:   18:namespace mlir {
        -:   19:#define GEN_PASS_DEF_SYMBOLPRIVATIZE
        -:   20:#include "mlir/Transforms/Passes.h.inc"
        -:   21:} // namespace mlir
        -:   22:
        -:   23:using namespace mlir;
        -:   24:
        -:   25:namespace {
        -:   26:struct SymbolPrivatize : public impl::SymbolPrivatizeBase<SymbolPrivatize> {
        -:   27:  explicit SymbolPrivatize(ArrayRef<std::string> excludeSymbols);
        -:   28:  LogicalResult initialize(MLIRContext *context) override;
        -:   29:  void runOnOperation() override;
        -:   30:
        -:   31:  /// Symbols whose visibility won't be changed.
        -:   32:  DenseSet<StringAttr> excludedSymbols;
        -:   33:};
        -:   34:} // namespace
        -:   35:
function _ZN12_GLOBAL__N_115SymbolPrivatizeC2EN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE called 116708 returned 100% blocks executed 100%
   116708:   36:SymbolPrivatize::SymbolPrivatize(llvm::ArrayRef<std::string> excludeSymbols) {
call    0 returned 100%
call    1 returned 100%
   116708:   37:  exclude = excludeSymbols;
call    0 returned 100%
   116708:   38:}
        -:   39:
function _ZN12_GLOBAL__N_115SymbolPrivatize10initializeEPN4mlir11MLIRContextE called 485 returned 100% blocks executed 43%
      485:   40:LogicalResult SymbolPrivatize::initialize(MLIRContext *context) {
     485*:   41:  for (const std::string &symbol : exclude)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:   42:    excludedSymbols.insert(StringAttr::get(context, symbol));
call    0 never executed
call    1 never executed
call    2 never executed
      485:   43:  return success();
        -:   44:}
        -:   45:
function _ZN12_GLOBAL__N_115SymbolPrivatize14runOnOperationEv called 428 returned 100% blocks executed 88%
      428:   46:void SymbolPrivatize::runOnOperation() {
     1284:   47:  for (Region &region : getOperation()->getRegions()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
      856:   48:    for (Block &block : region) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      902:   49:      for (Operation &op : block) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
call    2 returned 100%
      474:   50:        auto symbol = dyn_cast<SymbolOpInterface>(op);
call    0 returned 100%
     474*:   51:        if (!symbol)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   52:          continue;
      474:   53:        if (!excludedSymbols.contains(symbol.getNameAttr()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      474:   54:          symbol.setVisibility(SymbolTable::Visibility::Private);
call    0 returned 100%
        -:   55:      }
        -:   56:    }
        -:   57:  }
      428:   58:}
        -:   59:
        -:   60:std::unique_ptr<Pass>
function _ZN4mlir25createSymbolPrivatizePassEN4llvm8ArrayRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE called 116708 returned 100% blocks executed 100%
   116708:   61:mlir::createSymbolPrivatizePass(ArrayRef<std::string> exclude) {
   116708:   62:  return std::make_unique<SymbolPrivatize>(exclude);
call    0 returned 100%
        -:   63:}
