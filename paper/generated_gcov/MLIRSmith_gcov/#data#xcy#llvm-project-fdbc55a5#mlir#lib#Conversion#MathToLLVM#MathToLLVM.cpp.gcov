        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/MathToLLVM/MathToLLVM.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/MathToLLVM/CMakeFiles/obj.MLIRMathToLLVM.dir/MathToLLVM.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/MathToLLVM/CMakeFiles/obj.MLIRMathToLLVM.dir/MathToLLVM.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- MathToLLVM.cpp - Math to LLVM dialect conversion -------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Conversion/MathToLLVM/MathToLLVM.h"
        -:   10:
        -:   11:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   12:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   13:#include "mlir/Conversion/LLVMCommon/VectorPattern.h"
        -:   14:#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
        -:   15:#include "mlir/Dialect/Math/IR/Math.h"
        -:   16:#include "mlir/IR/TypeUtilities.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_CONVERTMATHTOLLVM
        -:   21:#include "mlir/Conversion/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:using AbsFOpLowering = VectorConvertToLLVMPattern<math::AbsFOp, LLVM::FAbsOp>;
        -:   28:using CeilOpLowering = VectorConvertToLLVMPattern<math::CeilOp, LLVM::FCeilOp>;
        -:   29:using CopySignOpLowering =
        -:   30:    VectorConvertToLLVMPattern<math::CopySignOp, LLVM::CopySignOp>;
        -:   31:using CosOpLowering = VectorConvertToLLVMPattern<math::CosOp, LLVM::CosOp>;
        -:   32:using CtPopFOpLowering =
        -:   33:    VectorConvertToLLVMPattern<math::CtPopOp, LLVM::CtPopOp>;
        -:   34:using Exp2OpLowering = VectorConvertToLLVMPattern<math::Exp2Op, LLVM::Exp2Op>;
        -:   35:using ExpOpLowering = VectorConvertToLLVMPattern<math::ExpOp, LLVM::ExpOp>;
        -:   36:using FloorOpLowering =
        -:   37:    VectorConvertToLLVMPattern<math::FloorOp, LLVM::FFloorOp>;
        -:   38:using FmaOpLowering = VectorConvertToLLVMPattern<math::FmaOp, LLVM::FMAOp>;
        -:   39:using Log10OpLowering =
        -:   40:    VectorConvertToLLVMPattern<math::Log10Op, LLVM::Log10Op>;
        -:   41:using Log2OpLowering = VectorConvertToLLVMPattern<math::Log2Op, LLVM::Log2Op>;
        -:   42:using LogOpLowering = VectorConvertToLLVMPattern<math::LogOp, LLVM::LogOp>;
        -:   43:using PowFOpLowering = VectorConvertToLLVMPattern<math::PowFOp, LLVM::PowOp>;
        -:   44:using RoundEvenOpLowering =
        -:   45:    VectorConvertToLLVMPattern<math::RoundEvenOp, LLVM::RoundEvenOp>;
        -:   46:using RoundOpLowering =
        -:   47:    VectorConvertToLLVMPattern<math::RoundOp, LLVM::RoundOp>;
        -:   48:using SinOpLowering = VectorConvertToLLVMPattern<math::SinOp, LLVM::SinOp>;
        -:   49:using SqrtOpLowering = VectorConvertToLLVMPattern<math::SqrtOp, LLVM::SqrtOp>;
        -:   50:using FTruncOpLowering =
        -:   51:    VectorConvertToLLVMPattern<math::TruncOp, LLVM::FTruncOp>;
        -:   52:
        -:   53:// A `CtLz/CtTz/absi(a)` is converted into `CtLz/CtTz/absi(a, false)`.
        -:   54:template <typename MathOp, typename LLVMOp>
        -:   55:struct IntOpWithFlagLowering : public ConvertOpToLLVMPattern<MathOp> {
     1257:   56:  using ConvertOpToLLVMPattern<MathOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   57:  using Super = IntOpWithFlagLowering<MathOp, LLVMOp>;
        -:   58:
        -:   59:  LogicalResult
     4919:   60:  matchAndRewrite(MathOp op, typename MathOp::Adaptor adaptor,
        -:   61:                  ConversionPatternRewriter &rewriter) const override {
     4919:   62:    auto operandType = adaptor.getOperand().getType();
        -:   63:
     4919:   64:    if (!operandType || !LLVM::isCompatibleType(operandType))
     4919:   65:      return failure();
        -:   66:
     4919:   67:    auto loc = op.getLoc();
     4919:   68:    auto resultType = op.getResult().getType();
     4919:   69:    auto boolZero = rewriter.getBoolAttr(false);
        -:   70:
     4919:   71:    if (!operandType.template isa<LLVM::LLVMArrayType>()) {
     4919:   72:      LLVM::ConstantOp zero = rewriter.create<LLVM::ConstantOp>(loc, boolZero);
     4919:   73:      rewriter.replaceOpWithNewOp<LLVMOp>(op, resultType, adaptor.getOperand(),
        -:   74:                                          zero);
     4919:   75:      return success();
        -:   76:    }
        -:   77:
    #####:   78:    auto vectorType = resultType.template dyn_cast<VectorType>();
    #####:   79:    if (!vectorType)
     4919:   80:      return failure();
        -:   81:
    #####:   82:    return LLVM::detail::handleMultidimensionalVectors(
    #####:   83:        op.getOperation(), adaptor.getOperands(), *this->getTypeConverter(),
    #####:   84:        [&](Type llvm1DVectorTy, ValueRange operands) {
    #####:   85:          LLVM::ConstantOp zero =
call    0 never executed
call    1 never executed
call    2 never executed
        -:   86:              rewriter.create<LLVM::ConstantOp>(loc, boolZero);
        -:   87:          return rewriter.create<LLVMOp>(loc, llvm1DVectorTy, operands[0],
    #####:   88:                                         zero);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   89:        },
        -:   90:        rewriter);
        -:   91:  }
------------------
_ZNK12_GLOBAL__N_121IntOpWithFlagLoweringIN4mlir4math6AbsIOpENS1_4LLVM5AbsOpEE15matchAndRewriteES3_NS2_13AbsIOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_121IntOpWithFlagLoweringIN4mlir4math6AbsIOpENS1_4LLVM5AbsOpEE15matchAndRewriteES3_NS2_13AbsIOpAdaptorERNS1_25ConversionPatternRewriterE called 1250 returned 100% blocks executed 54%
     1250:   60:  matchAndRewrite(MathOp op, typename MathOp::Adaptor adaptor,
        -:   61:                  ConversionPatternRewriter &rewriter) const override {
     1250:   62:    auto operandType = adaptor.getOperand().getType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   63:
     1250:   64:    if (!operandType || !LLVM::isCompatibleType(operandType))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     1250:   65:      return failure();
        -:   66:
     1250:   67:    auto loc = op.getLoc();
call    0 returned 100%
     1250:   68:    auto resultType = op.getResult().getType();
call    0 returned 100%
call    1 returned 100%
     1250:   69:    auto boolZero = rewriter.getBoolAttr(false);
call    0 returned 100%
call    1 returned 100%
        -:   70:
     1250:   71:    if (!operandType.template isa<LLVM::LLVMArrayType>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1250:   72:      LLVM::ConstantOp zero = rewriter.create<LLVM::ConstantOp>(loc, boolZero);
call    0 returned 100%
     1250:   73:      rewriter.replaceOpWithNewOp<LLVMOp>(op, resultType, adaptor.getOperand(),
call    0 returned 100%
call    1 returned 100%
        -:   74:                                          zero);
     1250:   75:      return success();
        -:   76:    }
        -:   77:
    #####:   78:    auto vectorType = resultType.template dyn_cast<VectorType>();
    #####:   79:    if (!vectorType)
branch  0 never executed
branch  1 never executed
     1250:   80:      return failure();
        -:   81:
    #####:   82:    return LLVM::detail::handleMultidimensionalVectors(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   83:        op.getOperation(), adaptor.getOperands(), *this->getTypeConverter(),
call    0 never executed
        -:   84:        [&](Type llvm1DVectorTy, ValueRange operands) {
        -:   85:          LLVM::ConstantOp zero =
        -:   86:              rewriter.create<LLVM::ConstantOp>(loc, boolZero);
        -:   87:          return rewriter.create<LLVMOp>(loc, llvm1DVectorTy, operands[0],
        -:   88:                                         zero);
        -:   89:        },
        -:   90:        rewriter);
        -:   91:  }
------------------
_ZNK12_GLOBAL__N_121IntOpWithFlagLoweringIN4mlir4math19CountLeadingZerosOpENS1_4LLVM19CountLeadingZerosOpEE15matchAndRewriteES3_NS2_26CountLeadingZerosOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_121IntOpWithFlagLoweringIN4mlir4math19CountLeadingZerosOpENS1_4LLVM19CountLeadingZerosOpEE15matchAndRewriteES3_NS2_26CountLeadingZerosOpAdaptorERNS1_25ConversionPatternRewriterE called 1555 returned 100% blocks executed 54%
     1555:   60:  matchAndRewrite(MathOp op, typename MathOp::Adaptor adaptor,
        -:   61:                  ConversionPatternRewriter &rewriter) const override {
     1555:   62:    auto operandType = adaptor.getOperand().getType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   63:
     1555:   64:    if (!operandType || !LLVM::isCompatibleType(operandType))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     1555:   65:      return failure();
        -:   66:
     1555:   67:    auto loc = op.getLoc();
call    0 returned 100%
     1555:   68:    auto resultType = op.getResult().getType();
call    0 returned 100%
call    1 returned 100%
     1555:   69:    auto boolZero = rewriter.getBoolAttr(false);
call    0 returned 100%
call    1 returned 100%
        -:   70:
     1555:   71:    if (!operandType.template isa<LLVM::LLVMArrayType>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1555:   72:      LLVM::ConstantOp zero = rewriter.create<LLVM::ConstantOp>(loc, boolZero);
call    0 returned 100%
     1555:   73:      rewriter.replaceOpWithNewOp<LLVMOp>(op, resultType, adaptor.getOperand(),
call    0 returned 100%
call    1 returned 100%
        -:   74:                                          zero);
     1555:   75:      return success();
        -:   76:    }
        -:   77:
    #####:   78:    auto vectorType = resultType.template dyn_cast<VectorType>();
    #####:   79:    if (!vectorType)
branch  0 never executed
branch  1 never executed
     1555:   80:      return failure();
        -:   81:
    #####:   82:    return LLVM::detail::handleMultidimensionalVectors(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   83:        op.getOperation(), adaptor.getOperands(), *this->getTypeConverter(),
call    0 never executed
        -:   84:        [&](Type llvm1DVectorTy, ValueRange operands) {
        -:   85:          LLVM::ConstantOp zero =
        -:   86:              rewriter.create<LLVM::ConstantOp>(loc, boolZero);
        -:   87:          return rewriter.create<LLVMOp>(loc, llvm1DVectorTy, operands[0],
        -:   88:                                         zero);
        -:   89:        },
        -:   90:        rewriter);
        -:   91:  }
------------------
_ZNK12_GLOBAL__N_121IntOpWithFlagLoweringIN4mlir4math20CountTrailingZerosOpENS1_4LLVM20CountTrailingZerosOpEE15matchAndRewriteES3_NS2_27CountTrailingZerosOpAdaptorERNS1_25ConversionPatternRewriterE:
function _ZNK12_GLOBAL__N_121IntOpWithFlagLoweringIN4mlir4math20CountTrailingZerosOpENS1_4LLVM20CountTrailingZerosOpEE15matchAndRewriteES3_NS2_27CountTrailingZerosOpAdaptorERNS1_25ConversionPatternRewriterE called 2114 returned 100% blocks executed 54%
     2114:   60:  matchAndRewrite(MathOp op, typename MathOp::Adaptor adaptor,
        -:   61:                  ConversionPatternRewriter &rewriter) const override {
     2114:   62:    auto operandType = adaptor.getOperand().getType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   63:
     2114:   64:    if (!operandType || !LLVM::isCompatibleType(operandType))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     2114:   65:      return failure();
        -:   66:
     2114:   67:    auto loc = op.getLoc();
call    0 returned 100%
     2114:   68:    auto resultType = op.getResult().getType();
call    0 returned 100%
call    1 returned 100%
     2114:   69:    auto boolZero = rewriter.getBoolAttr(false);
call    0 returned 100%
call    1 returned 100%
        -:   70:
     2114:   71:    if (!operandType.template isa<LLVM::LLVMArrayType>()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2114:   72:      LLVM::ConstantOp zero = rewriter.create<LLVM::ConstantOp>(loc, boolZero);
call    0 returned 100%
     2114:   73:      rewriter.replaceOpWithNewOp<LLVMOp>(op, resultType, adaptor.getOperand(),
call    0 returned 100%
call    1 returned 100%
        -:   74:                                          zero);
     2114:   75:      return success();
        -:   76:    }
        -:   77:
    #####:   78:    auto vectorType = resultType.template dyn_cast<VectorType>();
    #####:   79:    if (!vectorType)
branch  0 never executed
branch  1 never executed
     2114:   80:      return failure();
        -:   81:
    #####:   82:    return LLVM::detail::handleMultidimensionalVectors(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   83:        op.getOperation(), adaptor.getOperands(), *this->getTypeConverter(),
call    0 never executed
        -:   84:        [&](Type llvm1DVectorTy, ValueRange operands) {
        -:   85:          LLVM::ConstantOp zero =
        -:   86:              rewriter.create<LLVM::ConstantOp>(loc, boolZero);
        -:   87:          return rewriter.create<LLVMOp>(loc, llvm1DVectorTy, operands[0],
        -:   88:                                         zero);
        -:   89:        },
        -:   90:        rewriter);
        -:   91:  }
------------------
        -:   92:};
        -:   93:
        -:   94:using CountLeadingZerosOpLowering =
        -:   95:    IntOpWithFlagLowering<math::CountLeadingZerosOp, LLVM::CountLeadingZerosOp>;
        -:   96:using CountTrailingZerosOpLowering =
        -:   97:    IntOpWithFlagLowering<math::CountTrailingZerosOp, LLVM::CountTrailingZerosOp>;
        -:   98:using AbsIOpLowering = IntOpWithFlagLowering<math::AbsIOp, LLVM::AbsOp>;
        -:   99:
        -:  100:// A `expm1` is converted into `exp - 1`.
        -:  101:struct ExpM1OpLowering : public ConvertOpToLLVMPattern<math::ExpM1Op> {
      419:  102:  using ConvertOpToLLVMPattern<math::ExpM1Op>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  103:
        -:  104:  LogicalResult
function _ZNK12_GLOBAL__N_115ExpM1OpLowering15matchAndRewriteEN4mlir4math7ExpM1OpENS2_14ExpM1OpAdaptorERNS1_25ConversionPatternRewriterE called 1482 returned 100% blocks executed 55%
     1482:  105:  matchAndRewrite(math::ExpM1Op op, OpAdaptor adaptor,
        -:  106:                  ConversionPatternRewriter &rewriter) const override {
     1482:  107:    auto operandType = adaptor.getOperand().getType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  108:
     1482:  109:    if (!operandType || !LLVM::isCompatibleType(operandType))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  110:      return failure();
        -:  111:
     1482:  112:    auto loc = op.getLoc();
call    0 returned 100%
     1482:  113:    auto resultType = op.getResult().getType();
call    0 returned 100%
call    1 returned 100%
     1482:  114:    auto floatType = getElementTypeOrSelf(resultType).cast<FloatType>();
call    0 returned 100%
call    1 returned 100%
     1482:  115:    auto floatOne = rewriter.getFloatAttr(floatType, 1.0);
call    0 returned 100%
        -:  116:
     1482:  117:    if (!operandType.isa<LLVM::LLVMArrayType>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1482:  118:      LLVM::ConstantOp one;
call    0 returned 100%
     1482:  119:      if (LLVM::isCompatibleVectorType(operandType)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  120:        one = rewriter.create<LLVM::ConstantOp>(
        -:  121:            loc, operandType,
    #####:  122:            SplatElementsAttr::get(resultType.cast<ShapedType>(), floatOne));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  123:      } else {
     1482:  124:        one = rewriter.create<LLVM::ConstantOp>(loc, operandType, floatOne);
call    0 returned 100%
        -:  125:      }
     1482:  126:      auto exp = rewriter.create<LLVM::ExpOp>(loc, adaptor.getOperand());
call    0 returned 100%
call    1 returned 100%
     1482:  127:      rewriter.replaceOpWithNewOp<LLVM::FSubOp>(op, operandType, exp, one);
call    0 returned 100%
     1482:  128:      return success();
        -:  129:    }
        -:  130:
    #####:  131:    auto vectorType = resultType.dyn_cast<VectorType>();
call    0 never executed
    #####:  132:    if (!vectorType)
branch  0 never executed
branch  1 never executed
    #####:  133:      return rewriter.notifyMatchFailure(op, "expected vector result type");
call    0 never executed
        -:  134:
    #####:  135:    return LLVM::detail::handleMultidimensionalVectors(
    #####:  136:        op.getOperation(), adaptor.getOperands(), *getTypeConverter(),
function _ZZNK12_GLOBAL__N_115ExpM1OpLowering15matchAndRewriteEN4mlir4math7ExpM1OpENS2_14ExpM1OpAdaptorERNS1_25ConversionPatternRewriterEENKUlNS1_4TypeENS1_10ValueRangeEE_clES7_S8_ called 0 returned 0% blocks executed 0%
    #####:  137:        [&](Type llvm1DVectorTy, ValueRange operands) {
    #####:  138:          auto splatAttr = SplatElementsAttr::get(
        -:  139:              mlir::VectorType::get(
    #####:  140:                  {LLVM::getVectorNumElements(llvm1DVectorTy).getFixedValue()},
branch  0 never executed
branch  1 never executed
    #####:  141:                  floatType),
call    0 never executed
    #####:  142:              floatOne);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  143:          auto one =
    #####:  144:              rewriter.create<LLVM::ConstantOp>(loc, llvm1DVectorTy, splatAttr);
call    0 never executed
    #####:  145:          auto exp =
    #####:  146:              rewriter.create<LLVM::ExpOp>(loc, llvm1DVectorTy, operands[0]);
call    0 never executed
call    1 never executed
    #####:  147:          return rewriter.create<LLVM::FSubOp>(loc, llvm1DVectorTy, exp, one);
call    0 never executed
        -:  148:        },
    #####:  149:        rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  150:  }
        -:  151:};
        -:  152:
        -:  153:// A `log1p` is converted into `log(1 + ...)`.
        -:  154:struct Log1pOpLowering : public ConvertOpToLLVMPattern<math::Log1pOp> {
      419:  155:  using ConvertOpToLLVMPattern<math::Log1pOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  156:
        -:  157:  LogicalResult
function _ZNK12_GLOBAL__N_115Log1pOpLowering15matchAndRewriteEN4mlir4math7Log1pOpENS2_14Log1pOpAdaptorERNS1_25ConversionPatternRewriterE called 1612 returned 100% blocks executed 56%
     1612:  158:  matchAndRewrite(math::Log1pOp op, OpAdaptor adaptor,
        -:  159:                  ConversionPatternRewriter &rewriter) const override {
     1612:  160:    auto operandType = adaptor.getOperand().getType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  161:
     1612:  162:    if (!operandType || !LLVM::isCompatibleType(operandType))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  163:      return rewriter.notifyMatchFailure(op, "unsupported operand type");
call    0 never executed
        -:  164:
     1612:  165:    auto loc = op.getLoc();
call    0 returned 100%
     1612:  166:    auto resultType = op.getResult().getType();
call    0 returned 100%
call    1 returned 100%
     1612:  167:    auto floatType = getElementTypeOrSelf(resultType).cast<FloatType>();
call    0 returned 100%
call    1 returned 100%
     1612:  168:    auto floatOne = rewriter.getFloatAttr(floatType, 1.0);
call    0 returned 100%
        -:  169:
     1612:  170:    if (!operandType.isa<LLVM::LLVMArrayType>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1612:  171:      LLVM::ConstantOp one =
     1612:  172:          LLVM::isCompatibleVectorType(operandType)
call    0 returned 100%
        -:  173:              ? rewriter.create<LLVM::ConstantOp>(
        -:  174:                    loc, operandType,
     1612:  175:                    SplatElementsAttr::get(resultType.cast<ShapedType>(),
    #####:  176:                                           floatOne))
call    0 never executed
call    1 never executed
call    2 never executed
     1612:  177:              : rewriter.create<LLVM::ConstantOp>(loc, operandType, floatOne);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        -:  178:
     1612:  179:      auto add = rewriter.create<LLVM::FAddOp>(loc, operandType, one,
     1612:  180:                                               adaptor.getOperand());
call    0 returned 100%
call    1 returned 100%
     1612:  181:      rewriter.replaceOpWithNewOp<LLVM::LogOp>(op, operandType, add);
call    0 returned 100%
     1612:  182:      return success();
        -:  183:    }
        -:  184:
    #####:  185:    auto vectorType = resultType.dyn_cast<VectorType>();
call    0 never executed
    #####:  186:    if (!vectorType)
branch  0 never executed
branch  1 never executed
    #####:  187:      return rewriter.notifyMatchFailure(op, "expected vector result type");
call    0 never executed
        -:  188:
    #####:  189:    return LLVM::detail::handleMultidimensionalVectors(
    #####:  190:        op.getOperation(), adaptor.getOperands(), *getTypeConverter(),
function _ZZNK12_GLOBAL__N_115Log1pOpLowering15matchAndRewriteEN4mlir4math7Log1pOpENS2_14Log1pOpAdaptorERNS1_25ConversionPatternRewriterEENKUlNS1_4TypeENS1_10ValueRangeEE_clES7_S8_ called 0 returned 0% blocks executed 0%
    #####:  191:        [&](Type llvm1DVectorTy, ValueRange operands) {
    #####:  192:          auto splatAttr = SplatElementsAttr::get(
        -:  193:              mlir::VectorType::get(
    #####:  194:                  {LLVM::getVectorNumElements(llvm1DVectorTy).getFixedValue()},
branch  0 never executed
branch  1 never executed
    #####:  195:                  floatType),
call    0 never executed
    #####:  196:              floatOne);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  197:          auto one =
    #####:  198:              rewriter.create<LLVM::ConstantOp>(loc, llvm1DVectorTy, splatAttr);
call    0 never executed
    #####:  199:          auto add = rewriter.create<LLVM::FAddOp>(loc, llvm1DVectorTy, one,
    #####:  200:                                                   operands[0]);
call    0 never executed
call    1 never executed
    #####:  201:          return rewriter.create<LLVM::LogOp>(loc, llvm1DVectorTy, add);
call    0 never executed
        -:  202:        },
    #####:  203:        rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  204:  }
        -:  205:};
        -:  206:
        -:  207:// A `rsqrt` is converted into `1 / sqrt`.
        -:  208:struct RsqrtOpLowering : public ConvertOpToLLVMPattern<math::RsqrtOp> {
      419:  209:  using ConvertOpToLLVMPattern<math::RsqrtOp>::ConvertOpToLLVMPattern;
call    0 returned 100%
        -:  210:
        -:  211:  LogicalResult
function _ZNK12_GLOBAL__N_115RsqrtOpLowering15matchAndRewriteEN4mlir4math7RsqrtOpENS2_14RsqrtOpAdaptorERNS1_25ConversionPatternRewriterE called 1731 returned 100% blocks executed 55%
     1731:  212:  matchAndRewrite(math::RsqrtOp op, OpAdaptor adaptor,
        -:  213:                  ConversionPatternRewriter &rewriter) const override {
     1731:  214:    auto operandType = adaptor.getOperand().getType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  215:
     1731:  216:    if (!operandType || !LLVM::isCompatibleType(operandType))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  217:      return failure();
        -:  218:
     1731:  219:    auto loc = op.getLoc();
call    0 returned 100%
     1731:  220:    auto resultType = op.getResult().getType();
call    0 returned 100%
call    1 returned 100%
     1731:  221:    auto floatType = getElementTypeOrSelf(resultType).cast<FloatType>();
call    0 returned 100%
call    1 returned 100%
     1731:  222:    auto floatOne = rewriter.getFloatAttr(floatType, 1.0);
call    0 returned 100%
        -:  223:
     1731:  224:    if (!operandType.isa<LLVM::LLVMArrayType>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1731:  225:      LLVM::ConstantOp one;
call    0 returned 100%
     1731:  226:      if (LLVM::isCompatibleVectorType(operandType)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  227:        one = rewriter.create<LLVM::ConstantOp>(
        -:  228:            loc, operandType,
    #####:  229:            SplatElementsAttr::get(resultType.cast<ShapedType>(), floatOne));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  230:      } else {
     1731:  231:        one = rewriter.create<LLVM::ConstantOp>(loc, operandType, floatOne);
call    0 returned 100%
        -:  232:      }
     1731:  233:      auto sqrt = rewriter.create<LLVM::SqrtOp>(loc, adaptor.getOperand());
call    0 returned 100%
call    1 returned 100%
     1731:  234:      rewriter.replaceOpWithNewOp<LLVM::FDivOp>(op, operandType, one, sqrt);
call    0 returned 100%
     1731:  235:      return success();
        -:  236:    }
        -:  237:
    #####:  238:    auto vectorType = resultType.dyn_cast<VectorType>();
call    0 never executed
    #####:  239:    if (!vectorType)
branch  0 never executed
branch  1 never executed
    #####:  240:      return failure();
        -:  241:
    #####:  242:    return LLVM::detail::handleMultidimensionalVectors(
    #####:  243:        op.getOperation(), adaptor.getOperands(), *getTypeConverter(),
function _ZZNK12_GLOBAL__N_115RsqrtOpLowering15matchAndRewriteEN4mlir4math7RsqrtOpENS2_14RsqrtOpAdaptorERNS1_25ConversionPatternRewriterEENKUlNS1_4TypeENS1_10ValueRangeEE_clES7_S8_ called 0 returned 0% blocks executed 0%
    #####:  244:        [&](Type llvm1DVectorTy, ValueRange operands) {
    #####:  245:          auto splatAttr = SplatElementsAttr::get(
        -:  246:              mlir::VectorType::get(
    #####:  247:                  {LLVM::getVectorNumElements(llvm1DVectorTy).getFixedValue()},
branch  0 never executed
branch  1 never executed
    #####:  248:                  floatType),
call    0 never executed
    #####:  249:              floatOne);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  250:          auto one =
    #####:  251:              rewriter.create<LLVM::ConstantOp>(loc, llvm1DVectorTy, splatAttr);
call    0 never executed
    #####:  252:          auto sqrt =
    #####:  253:              rewriter.create<LLVM::SqrtOp>(loc, llvm1DVectorTy, operands[0]);
call    0 never executed
call    1 never executed
    #####:  254:          return rewriter.create<LLVM::FDivOp>(loc, llvm1DVectorTy, one, sqrt);
call    0 never executed
        -:  255:        },
    #####:  256:        rewriter);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  257:  }
        -:  258:};
        -:  259:
      360:  260:struct ConvertMathToLLVMPass
call    0 returned 100%
        -:  261:    : public impl::ConvertMathToLLVMBase<ConvertMathToLLVMPass> {
   117082:  262:  ConvertMathToLLVMPass() = default;
call    0 returned 100%
        -:  263:
function _ZN12_GLOBAL__N_121ConvertMathToLLVMPass14runOnOperationEv called 419 returned 100% blocks executed 89%
      419:  264:  void runOnOperation() override {
      419:  265:    RewritePatternSet patterns(&getContext());
call    0 returned 100%
call    1 returned 100%
      838:  266:    LLVMTypeConverter converter(&getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      838:  267:    populateMathToLLVMConversionPatterns(converter, patterns);
      838:  268:    LLVMConversionTarget target(getContext());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      419:  269:    if (failed(applyPartialConversion(getOperation(), target,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      419:  270:                                      std::move(patterns))))
call    0 returned 100%
    #####:  271:      signalPassFailure();
call    0 never executed
      419:  272:  }
        -:  273:};
        -:  274:} // namespace
        -:  275:
function _ZN4mlir36populateMathToLLVMConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     419*:  276:void mlir::populateMathToLLVMConversionPatterns(LLVMTypeConverter &converter,
        -:  277:                                                RewritePatternSet &patterns) {
        -:  278:  // clang-format off
     419*:  279:  patterns.add<
        -:  280:    AbsFOpLowering,
        -:  281:    AbsIOpLowering,
        -:  282:    CeilOpLowering,
        -:  283:    CopySignOpLowering,
        -:  284:    CosOpLowering,
        -:  285:    CountLeadingZerosOpLowering,
        -:  286:    CountTrailingZerosOpLowering,
        -:  287:    CtPopFOpLowering,
        -:  288:    Exp2OpLowering,
        -:  289:    ExpM1OpLowering,
        -:  290:    ExpOpLowering,
        -:  291:    FloorOpLowering,
        -:  292:    FmaOpLowering,
        -:  293:    Log10OpLowering,
        -:  294:    Log1pOpLowering,
        -:  295:    Log2OpLowering,
        -:  296:    LogOpLowering,
        -:  297:    PowFOpLowering,
        -:  298:    RoundEvenOpLowering,
        -:  299:    RoundOpLowering,
        -:  300:    RsqrtOpLowering,
        -:  301:    SinOpLowering,
        -:  302:    SqrtOpLowering,
        -:  303:    FTruncOpLowering
     419*:  304:  >(converter);
call    0 never executed
call    1 returned 100%
        -:  305:  // clang-format on
    #####:  306:}
        -:  307:
function _ZN4mlir27createConvertMathToLLVMPassEv called 117082 returned 100% blocks executed 100%
   117082:  308:std::unique_ptr<Pass> mlir::createConvertMathToLLVMPass() {
   117082:  309:  return std::make_unique<ConvertMathToLLVMPass>();
call    0 returned 100%
        -:  310:}
