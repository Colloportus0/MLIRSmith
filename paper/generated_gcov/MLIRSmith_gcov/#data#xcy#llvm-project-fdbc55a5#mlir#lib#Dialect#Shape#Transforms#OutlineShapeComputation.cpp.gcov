        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Shape/Transforms/OutlineShapeComputation.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Shape/Transforms/CMakeFiles/obj.MLIRShapeOpsTransforms.dir/OutlineShapeComputation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Shape/Transforms/CMakeFiles/obj.MLIRShapeOpsTransforms.dir/OutlineShapeComputation.cpp.gcda
        -:    0:Runs:116161
        -:    1://====----- OutlineShapeComputation.cpp -----------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   10:#include "mlir/Dialect/Shape/Analysis/ShapeMappingAnalysis.h"
        -:   11:#include "mlir/Dialect/Shape/IR/Shape.h"
        -:   12:#include "mlir/Dialect/Shape/Transforms/Passes.h"
        -:   13:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   14:#include "mlir/IR/BlockAndValueMapping.h"
        -:   15:#include "mlir/IR/Matchers.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:#include "mlir/Transforms/DialectConversion.h"
        -:   18:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   19:#include "llvm/ADT/DenseSet.h"
        -:   20:#include "llvm/Support/Debug.h"
        -:   21:#include <queue>
        -:   22:#include <unordered_set>
        -:   23:#include <vector>
        -:   24:
        -:   25:namespace mlir {
        -:   26:#define GEN_PASS_DEF_OUTLINESHAPECOMPUTATION
        -:   27:#include "mlir/Dialect/Shape/Transforms/Passes.h.inc"
        -:   28:} // namespace mlir
        -:   29:
        -:   30:#define DEBUG_TYPE "outline-shape-computation"
        -:   31:
        -:   32:using namespace mlir;
        -:   33:
        -:   34:namespace {
        -:   35:
        -:   36:// A Value is an input of the cluster if it is an operand of an operation in the
        -:   37:// cluster and its defining operation is not in the cluster.
        -:   38:SmallVector<Value, 4>
function _ZN12_GLOBAL__N_118getInputsOfClusterERKN4llvm11SmallVectorIPN4mlir9OperationELj8EEE called 0 returned 0% blocks executed 0%
    #####:   39:getInputsOfCluster(const llvm::SmallVector<Operation *, 8> &cluster) {
    #####:   40:  SmallVector<Value, 4> inputs;
call    0 never executed
    #####:   41:  llvm::SmallDenseSet<Value> inputSet;
call    0 never executed
    #####:   42:  llvm::SmallDenseSet<Operation *> opSet;
call    0 never executed
call    1 never executed
    #####:   43:  for (Operation *op : cluster) {
branch  0 never executed
branch  1 never executed
    #####:   44:    bool inserted = opSet.insert(op).second;
call    0 never executed
    #####:   45:    (void)inserted;
    #####:   46:    assert(inserted && "cluster contains duplicate operations");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   47:  }
        -:   48:
    #####:   49:  for (Operation *op : cluster) {
branch  0 never executed
branch  1 never executed
    #####:   50:    for (Value operand : op->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   51:      Operation *operandOp = operand.getDefiningOp();
call    0 never executed
    #####:   52:      if (opSet.find(operandOp) != opSet.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   53:        // Skip if defining op is in the cluster.
    #####:   54:        continue;
        -:   55:      }
    #####:   56:      if (inputSet.insert(operand).second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:        inputs.push_back(operand);
call    0 never executed
        -:   58:    }
        -:   59:  }
    #####:   60:  return inputs;
call    0 never executed
        -:   61:}
        -:   62:
        -:   63:// Create a shape.func representing the shape computation for `shape`.
        -:   64:std::pair<shape::FuncOp, SmallVector<Value>>
function _ZN12_GLOBAL__N_121createFuncFromClusterERN4mlir9OpBuilderERKN4llvm11SmallVectorIPNS0_9OperationELj8EEENS0_5ValueENS3_9StringRefENS0_8LocationE called 0 returned 0% blocks executed 0%
    #####:   65:createFuncFromCluster(OpBuilder &b, const SmallVector<Operation *, 8> &cluster,
        -:   66:                      Value shape, StringRef fnName, Location loc) {
    #####:   67:  SmallVector<Value, 4> inputs = getInputsOfCluster(cluster);
call    0 never executed
    #####:   68:  auto fnType =
    #####:   69:      cluster.empty()
branch  0 never executed
branch  1 never executed
    #####:   70:          ? b.getFunctionType(shape.getType(), shape.getType())
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   71:          : b.getFunctionType(ValueRange(inputs).getTypes(), shape.getType());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:   72:  shape::FuncOp fnOp = b.create<shape::FuncOp>(loc, fnName, fnType);
call    0 never executed
    #####:   73:  Block *block = fnOp.addEntryBlock();
call    0 never executed
    #####:   74:  b.setInsertionPoint(block, block->end());
call    0 never executed
    #####:   75:  BlockAndValueMapping bvm;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:  if (cluster.empty()) {
branch  0 never executed
branch  1 never executed
    #####:   77:    bvm.map(shape, fnOp.getArgument(0));
call    0 never executed
call    1 never executed
        -:   78:  } else {
    #####:   79:    for (auto inputAndArg : llvm::zip(inputs, fnOp.getArguments()))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:      bvm.map(std::get<0>(inputAndArg), std::get<1>(inputAndArg));
call    0 never executed
        -:   81:  }
        -:   82:
    #####:   83:  for (Operation *op : cluster)
branch  0 never executed
branch  1 never executed
    #####:   84:    b.clone(*op, bvm);
call    0 never executed
    #####:   85:  llvm::SmallVector<Value, 4> fnReturns;
call    0 never executed
call    1 never executed
    #####:   86:  fnReturns.push_back(bvm.lookupOrDefault(shape));
call    0 never executed
call    1 never executed
        -:   87:
    #####:   88:  b.create<shape::ReturnOp>(loc, fnReturns);
call    0 never executed
    #####:   89:  fnOp.setPrivate();
call    0 never executed
    #####:   90:  return std::make_pair(fnOp, inputs);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   91:}
        -:   92:
        -:   93:// The operations in the cluster might be unsorted, which could be inconvenient
        -:   94:// when creating shape.func op.
        -:   95:DenseMap<Value, SmallVector<Operation *, 8>>
function _ZN12_GLOBAL__N_118getOrderedClustersERKN4llvm8DenseMapIN4mlir5ValueENS0_8DenseSetIPNS2_9OperationENS0_12DenseMapInfoIS6_vEEEENS7_IS3_vEENS0_6detail12DenseMapPairIS3_S9_EEEENS2_4func6FuncOpE called 468 returned 100% blocks executed 50%
      468:   96:getOrderedClusters(const DenseMap<Value, DenseSet<Operation *>> &clusters,
        -:   97:                   func::FuncOp funcOp) {
        -:   98:  // Compute all clusters that each operation is in
      468:   99:  DenseMap<Operation *, SmallVector<Value>> op2Shapes;
call    0 returned 100%
     936*:  100:  for (const auto &it : clusters) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
    #####:  101:    Value shape = it.first;
    #####:  102:    const DenseSet<Operation *> &cluster = it.second;
    #####:  103:    for (Operation *cOp : cluster)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  104:      op2Shapes[cOp].push_back(shape);
call    0 never executed
call    1 never executed
        -:  105:  }
        -:  106:
        -:  107:  // Iterate through all operations in order. Get all the clusters `cOp` belongs
        -:  108:  // to and construct the new ordered cluster as it traverses.
      468:  109:  DenseMap<Value, SmallVector<Operation *, 8>> orderedClusters;
call    0 returned 100%
function _ZZN12_GLOBAL__N_118getOrderedClustersERKN4llvm8DenseMapIN4mlir5ValueENS0_8DenseSetIPNS2_9OperationENS0_12DenseMapInfoIS6_vEEEENS7_IS3_vEENS0_6detail12DenseMapPairIS3_S9_EEEENS2_4func6FuncOpEENKUlS6_E_clES6_.isra.0 called 289468 returned 100% blocks executed 42%
      468:  110:  funcOp.walk([&](Operation *op) {
call    0 returned 100%
   289468:  111:    auto it = op2Shapes.find(op);
call    0 returned 100%
   289468:  112:    if (it != op2Shapes.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  113:      Operation *cOp = it->first;
call    0 never executed
    #####:  114:      for (Value shape : it->second)
branch  0 never executed
branch  1 never executed
    #####:  115:        orderedClusters[shape].push_back(cOp);
call    0 never executed
call    1 never executed
        -:  116:    }
   289468:  117:  });
        -:  118:
      468:  119:  return orderedClusters;
call    0 returned 100%
        -:  120:}
        -:  121:
function _ZN12_GLOBAL__N_118constructShapeFuncERKSt6vectorIN4mlir5shape6WithOpESaIS3_EEPNS1_11MLIRContextERN4llvm8DenseMapINS1_5ValueENSA_11SmallVectorIPNS1_9OperationELj8EEENSA_12DenseMapInfoISC_vEENSA_6detail12DenseMapPairISC_SG_EEEERNS1_11SymbolTableERNSB_ISC_NS2_17ShapeMappingValueESI_NSK_ISC_SQ_EEEENS1_4func6FuncOpERNS2_20ShapeMappingAnalysisE called 468 returned 100% blocks executed 10%
      468:  122:void constructShapeFunc(
        -:  123:    const std::vector<shape::WithOp> &allWithOps, MLIRContext *context,
        -:  124:    DenseMap<Value, SmallVector<Operation *, 8>> &clusters,
        -:  125:    SymbolTable &symbolTable,
        -:  126:    DenseMap<Value, shape::ShapeMappingValue> &dynShape2ShapeFunc,
        -:  127:    func::FuncOp funcOp, shape::ShapeMappingAnalysis &shapeMappingAnalysis) {
      468:  128:  std::string shapeCalculationNamePrefix = "shape_cal_";
call    0 returned 100%
      468:  129:  int shapeCalculationNameIdx = 0;
      468:  130:  OpBuilder builder(context);
        -:  131:
        -:  132:  // Construct a shape function
     468*:  133:  for (shape::WithOp withOp : allWithOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:  134:    Value value = withOp.getOperand();
call    0 never executed
    #####:  135:    Value shape = withOp.getShape();
call    0 never executed
    #####:  136:    RankedTensorType rankedType = value.getType().dyn_cast<RankedTensorType>();
call    0 never executed
    #####:  137:    if (rankedType == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  138:      continue;
        -:  139:
    #####:  140:    const SmallVector<Operation *, 8> &cluster = clusters[shape];
call    0 never executed
    #####:  141:    shape::ShapeMappingValue shapeMappingValue;
call    0 never executed
    #####:  142:    auto it = dynShape2ShapeFunc.find(shape);
call    0 never executed
    #####:  143:    if (it == dynShape2ShapeFunc.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  144:      std::string name = shapeCalculationNamePrefix +
    #####:  145:                         std::to_string(shapeCalculationNameIdx++);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  146:      Location loc = value.getLoc();
call    0 never executed
    #####:  147:      builder.setInsertionPointAfter(funcOp);
call    0 never executed
    #####:  148:      auto pair = createFuncFromCluster(builder, cluster, shape, name, loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:      const SmallVector<Value> &inputs = pair.second;
    #####:  150:      shape::FuncOp shapeFuncOp = pair.first;
    #####:  151:      StringAttr insertedName = symbolTable.insert(shapeFuncOp);
call    0 never executed
    #####:  152:      auto symbol = FlatSymbolRefAttr::get(context, insertedName);
call    0 never executed
call    1 never executed
        -:  153:
    #####:  154:      shapeMappingValue.funcSymbol = symbol;
    #####:  155:      shapeMappingValue.inputs = inputs;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  156:    } else {
    #####:  157:      shapeMappingValue = it->second;
call    0 never executed
call    1 never executed
        -:  158:    }
    #####:  159:    dynShape2ShapeFunc[shape] = shapeMappingValue;
call    0 never executed
call    1 never executed
    #####:  160:    shapeMappingAnalysis.shapeMapping.insert(
    #####:  161:        std::make_pair(value, shapeMappingValue));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  162:  }
      468:  163:}
        -:  164:
   116701:  165:struct OutlineShapeComputationPass
call    0 returned 100%
call    1 returned 100%
        -:  166:    : public impl::OutlineShapeComputationBase<OutlineShapeComputationPass> {
        -:  167:
        -:  168:  void runOnOperation() override;
        -:  169:
        -:  170:private:
        -:  171:  bool calOnlyUsedByWithShapesRecursively(Operation *op, Value prevOutput);
        -:  172:
        -:  173:  void getClusterFromValue(Value shape,
        -:  174:                           DenseMap<Value, DenseSet<Operation *>> &clusters);
        -:  175:
        -:  176:  DenseMap<Value, SmallVector<Operation *, 8>>
        -:  177:  constructClustersForEachShape(const std::vector<shape::WithOp> &allWithOps,
        -:  178:                                func::FuncOp funcOp);
        -:  179:
        -:  180:  DenseSet<Operation *> onlyUsedByWithShapes;
        -:  181:};
        -:  182:
        -:  183:class TensorDimOpRewriter : public OpRewritePattern<tensor::DimOp> {
        -:  184:  using OpRewritePattern<tensor::DimOp>::OpRewritePattern;
        -:  185:
function _ZNK12_GLOBAL__N_119TensorDimOpRewriter15matchAndRewriteEN4mlir6tensor5DimOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  186:  LogicalResult matchAndRewrite(tensor::DimOp op,
        -:  187:                                PatternRewriter &rewriter) const override {
    #####:  188:    auto shapeOf =
    #####:  189:        rewriter.create<shape::ShapeOfOp>(op.getLoc(), op.getSource());
call    0 never executed
call    1 never executed
    #####:  190:    rewriter.replaceOpWithNewOp<shape::GetExtentOp>(op, op.getType(), shapeOf,
    #####:  191:                                                    op.getIndex());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  192:    return success();
        -:  193:  }
        -:  194:};
        -:  195:
function _ZN12_GLOBAL__N_127OutlineShapeComputationPass14runOnOperationEv called 412 returned 100% blocks executed 100%
      412:  196:void OutlineShapeComputationPass::runOnOperation() {
      412:  197:  ModuleOp moduleOp = getOperation();
call    0 returned 100%
      412:  198:  SymbolTable symbolTable(moduleOp);
call    0 returned 100%
      824:  199:  DenseMap<Value, shape::ShapeMappingValue> dynShape2ShapeFunc;
call    0 returned 100%
call    1 returned 100%
      412:  200:  auto &shapeMappingAnalysis = getAnalysis<shape::ShapeMappingAnalysis>();
call    0 returned 100%
        -:  201:  // TODO: This is as we populate this analysis during a pass that mutates. This
        -:  202:  // pass currently requires 1 single module being compiled.
      412:  203:  shapeMappingAnalysis.shapeMapping.clear();
call    0 returned 100%
      412:  204:  markAnalysesPreserved<shape::ShapeMappingAnalysis>();
call    0 returned 100%
        -:  205:
function _ZZN12_GLOBAL__N_127OutlineShapeComputationPass14runOnOperationEvENKUlN4mlir4func6FuncOpEE_clES3_ called 468 returned 100% blocks executed 41%
      412:  206:  moduleOp.walk([&](func::FuncOp funcOp) {
call    0 returned 100%
call    1 returned 100%
      468:  207:    MLIRContext *context = funcOp.getContext();
call    0 returned 100%
      936:  208:    RewritePatternSet prevPatterns(context);
call    0 returned 100%
      468:  209:    prevPatterns.insert<TensorDimOpRewriter>(context);
call    0 returned 100%
      468:  210:    if (failed(applyPatternsAndFoldGreedily(funcOp, std::move(prevPatterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  211:      return signalPassFailure();
call    0 never executed
        -:  212:
        -:  213:    // initialize class member `onlyUsedByWithShapes`
      468:  214:    onlyUsedByWithShapes.clear();
call    0 returned 100%
      468:  215:    funcOp.walk([&](Operation *op) {
call    0 returned 100%
   289468:  216:      calOnlyUsedByWithShapesRecursively(op, /*prevOutput=*/nullptr);
call    0 returned 100%
        -:  217:    });
     468*:  218:    LLVM_DEBUG({
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  219:      llvm::dbgs() << "onlyUsedByWithShapes table: \n";
        -:  220:      for (auto it : onlyUsedByWithShapes)
        -:  221:        llvm::dbgs() << *it << "\n";
        -:  222:    });
        -:  223:
        -:  224:    // collect all the shape.with_shape ops.
      936:  225:    std::vector<shape::WithOp> allWithOps;
call    0 returned 100%
call    1 returned 100%
     468*:  226:    funcOp.walk([&](shape::WithOp withOp) { allWithOps.push_back(withOp); });
call    0 never executed
call    1 returned 100%
        -:  227:
      468:  228:    DenseMap<Value, SmallVector<Operation *, 8>> clusters =
      936:  229:        constructClustersForEachShape(allWithOps, funcOp);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      468:  230:    constructShapeFunc(allWithOps, context, clusters, symbolTable,
      468:  231:                       dynShape2ShapeFunc, funcOp, shapeMappingAnalysis);
call    0 returned 100%
        -:  232:
     468*:  233:    for (shape::WithOp withOp : allWithOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:  234:      Value value = withOp.getOperand();
call    0 never executed
    #####:  235:      for (Operation *user : withOp.getResult().getUsers()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  236:        if (Value valueOf = llvm::dyn_cast<shape::ValueOfOp>(user))
call    0 never executed
call    1 never executed
    #####:  237:          valueOf.replaceAllUsesExcept(value, withOp);
call    0 never executed
        -:  238:      }
        -:  239:    }
        -:  240:
        -:  241:    // Apply patterns, note this also performs DCE.
      468:  242:    if (failed(applyPatternsAndFoldGreedily(funcOp, {})))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  243:      return signalPassFailure();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  244:  });
      412:  245:}
        -:  246:
        -:  247:DenseMap<Value, SmallVector<Operation *, 8>>
function _ZN12_GLOBAL__N_127OutlineShapeComputationPass29constructClustersForEachShapeERKSt6vectorIN4mlir5shape6WithOpESaIS4_EENS2_4func6FuncOpE called 468 returned 100% blocks executed 50%
      468:  248:OutlineShapeComputationPass::constructClustersForEachShape(
        -:  249:    const std::vector<shape::WithOp> &allWithOps, func::FuncOp funcOp) {
      936:  250:  DenseMap<Value, DenseSet<Operation *>> clusters;
call    0 returned 100%
call    1 returned 100%
     468*:  251:  for (shape::WithOp withOp : allWithOps) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    #####:  252:    Value shape = withOp.getShape();
call    0 never executed
    #####:  253:    if (clusters.count(shape) == 0)
call    0 never executed
    #####:  254:      getClusterFromValue(shape, clusters);
call    0 never executed
        -:  255:  }
      468:  256:  return getOrderedClusters(clusters, funcOp);
call    0 returned 100%
        -:  257:}
        -:  258:
        -:  259:// The output of a cluster is the `shape`, and the inputs are the outputs of
        -:  260:// operations who are not in `onlyUsedByWithShapes`
function _ZN12_GLOBAL__N_127OutlineShapeComputationPass19getClusterFromValueEN4mlir5ValueERN4llvm8DenseMapIS2_NS3_8DenseSetIPNS1_9OperationENS3_12DenseMapInfoIS7_vEEEENS8_IS2_vEENS3_6detail12DenseMapPairIS2_SA_EEEE called 0 returned 0% blocks executed 0%
    #####:  261:void OutlineShapeComputationPass::getClusterFromValue(
        -:  262:    Value shape, DenseMap<Value, DenseSet<Operation *>> &clusters) {
    #####:  263:  DenseSet<Operation *> cluster;
call    0 never executed
        -:  264:
    #####:  265:  DenseSet<Operation *> visited;
call    0 never executed
call    1 never executed
    #####:  266:  std::queue<Operation *> queue;
call    0 never executed
call    1 never executed
        -:  267:
        -:  268:  // defOp == nullptr means shape is the argument of the func op
    #####:  269:  if (Operation *defOp = shape.getDefiningOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  270:    visited.insert(defOp);
call    0 never executed
    #####:  271:    queue.push(defOp);
branch  0 never executed
branch  1 never executed
        -:  272:  }
    #####:  273:  while (!queue.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  274:    Operation *op = queue.front();
call    0 never executed
    #####:  275:    queue.pop();
call    0 never executed
    #####:  276:    if (onlyUsedByWithShapes.contains(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  277:      cluster.insert(op);
call    0 never executed
    #####:  278:      for (Value inp : op->getOperands()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  279:        Operation *inpDefOp = inp.getDefiningOp();
call    0 never executed
    #####:  280:        if (nullptr != inpDefOp && !visited.contains(inpDefOp)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  281:          visited.insert(inpDefOp);
call    0 never executed
    #####:  282:          queue.push(inpDefOp);
branch  0 never executed
branch  1 never executed
        -:  283:        }
        -:  284:      }
        -:  285:    }
        -:  286:  }
        -:  287:
    #####:  288:  clusters[shape] = std::move(cluster);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  289:}
        -:  290:
        -:  291:// Returns whether `op` is a shape.with_shape, or all the users' of `op`
        -:  292:// eventually point to the shape operand of shape.with_shape ops
function _ZN12_GLOBAL__N_127OutlineShapeComputationPass34calOnlyUsedByWithShapesRecursivelyEPN4mlir9OperationENS1_5ValueE called 471403 returned 100% blocks executed 76%
   471403:  293:bool OutlineShapeComputationPass::calOnlyUsedByWithShapesRecursively(
        -:  294:    Operation *op, Value prevOutput) {
   471403:  295:  if (onlyUsedByWithShapes.contains(op))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  296:    return true;
        -:  297:
   471403:  298:  if (auto withOp = llvm::dyn_cast<shape::WithOp>(op))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  299:    return withOp.getShape() == prevOutput;
call    0 never executed
        -:  300:
   942806:  301:  if (op->use_empty())
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
        -:  302:    return false;
        -:  303:
  363870*:  304:  for (Value oup : op->getResults())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
  181935*:  305:    for (Operation *user : oup.getUsers())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   181935:  306:      if (!calOnlyUsedByWithShapesRecursively(user, oup))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   181935:  307:        return false;
        -:  308:
    #####:  309:  onlyUsedByWithShapes.insert(op);
call    0 never executed
    #####:  310:  return true;
        -:  311:}
        -:  312:
        -:  313:} // namespace
        -:  314:
        -:  315:std::unique_ptr<OperationPass<ModuleOp>>
function _ZN4mlir33createOutlineShapeComputationPassEv called 116701 returned 100% blocks executed 100%
   116701:  316:mlir::createOutlineShapeComputationPass() {
   116701:  317:  return std::make_unique<OutlineShapeComputationPass>();
call    0 returned 100%
        -:  318:}
