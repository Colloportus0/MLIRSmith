        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Analysis/SliceAnalysis.cpp
        -:    0:Graph:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/SliceAnalysis.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/CMakeFiles/obj.MLIRAnalysis.dir/SliceAnalysis.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- UseDefAnalysis.cpp - Analysis for Transitive UseDef chains ---------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements Analysis functions specific to slicing in Function.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Analysis/SliceAnalysis.h"
        -:   14:#include "mlir/IR/BuiltinOps.h"
        -:   15:#include "mlir/IR/Operation.h"
        -:   16:#include "mlir/Support/LLVM.h"
        -:   17:#include "llvm/ADT/SetVector.h"
        -:   18:#include "llvm/ADT/SmallPtrSet.h"
        -:   19:
        -:   20:///
        -:   21:/// Implements Analysis functions specific to slicing in Function.
        -:   22:///
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
function _ZL19getForwardSliceImplPN4mlir9OperationEPN4llvm9SetVectorIS1_St6vectorIS1_SaIS1_EENS2_8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEEEENS2_12function_refIFbS1_EEE called 0 returned 0% blocks executed 0%
    #####:   26:static void getForwardSliceImpl(Operation *op,
        -:   27:                                SetVector<Operation *> *forwardSlice,
        -:   28:                                TransitiveFilter filter) {
    #####:   29:  if (!op)
branch  0 never executed
branch  1 never executed
        -:   30:    return;
        -:   31:
        -:   32:  // Evaluate whether we should keep this use.
        -:   33:  // This is useful in particular to implement scoping; i.e. return the
        -:   34:  // transitive forwardSlice in the current scope.
    #####:   35:  if (filter && !filter(op))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   36:    return;
        -:   37:
    #####:   38:  for (Region &region : op->getRegions())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   39:    for (Block &block : region)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   40:      for (Operation &blockOp : block)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   41:        if (forwardSlice->count(&blockOp) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:          getForwardSliceImpl(&blockOp, forwardSlice, filter);
call    0 never executed
    #####:   43:  for (Value result : op->getResults()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   44:    for (Operation *userOp : result.getUsers())
branch  0 never executed
branch  1 never executed
    #####:   45:      if (forwardSlice->count(userOp) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:        getForwardSliceImpl(userOp, forwardSlice, filter);
call    0 never executed
        -:   47:  }
        -:   48:
    #####:   49:  forwardSlice->insert(op);
call    0 never executed
        -:   50:}
        -:   51:
function _ZN4mlir15getForwardSliceEPNS_9OperationEPN4llvm9SetVectorIS1_St6vectorIS1_SaIS1_EENS2_8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEEEENS2_12function_refIFbS1_EEE called 0 returned 0% blocks executed 0%
    #####:   52:void mlir::getForwardSlice(Operation *op, SetVector<Operation *> *forwardSlice,
        -:   53:                           TransitiveFilter filter) {
    #####:   54:  getForwardSliceImpl(op, forwardSlice, filter);
call    0 never executed
        -:   55:  // Don't insert the top level operation, we just queried on it and don't
        -:   56:  // want it in the results.
    #####:   57:  forwardSlice->remove(op);
call    0 never executed
        -:   58:
        -:   59:  // Reverse to get back the actual topological order.
        -:   60:  // std::reverse does not work out of the box on SetVector and I want an
        -:   61:  // in-place swap based thing (the real std::reverse, not the LLVM adapter).
    #####:   62:  std::vector<Operation *> v(forwardSlice->takeVector());
call    0 never executed
    #####:   63:  forwardSlice->insert(v.rbegin(), v.rend());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:}
        -:   65:
function _ZN4mlir15getForwardSliceENS_5ValueEPN4llvm9SetVectorIPNS_9OperationESt6vectorIS4_SaIS4_EENS1_8DenseSetIS4_NS1_12DenseMapInfoIS4_vEEEEEENS1_12function_refIFbS4_EEE called 0 returned 0% blocks executed 0%
    #####:   66:void mlir::getForwardSlice(Value root, SetVector<Operation *> *forwardSlice,
        -:   67:                           TransitiveFilter filter) {
    #####:   68:  for (Operation *user : root.getUsers())
branch  0 never executed
branch  1 never executed
    #####:   69:    getForwardSliceImpl(user, forwardSlice, filter);
call    0 never executed
        -:   70:
        -:   71:  // Reverse to get back the actual topological order.
        -:   72:  // std::reverse does not work out of the box on SetVector and I want an
        -:   73:  // in-place swap based thing (the real std::reverse, not the LLVM adapter).
    #####:   74:  std::vector<Operation *> v(forwardSlice->takeVector());
call    0 never executed
    #####:   75:  forwardSlice->insert(v.rbegin(), v.rend());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:}
        -:   77:
function _ZL20getBackwardSliceImplPN4mlir9OperationEPN4llvm9SetVectorIS1_St6vectorIS1_SaIS1_EENS2_8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEEEENS2_12function_refIFbS1_EEE called 48806 returned 100% blocks executed 86%
    48806:   78:static void getBackwardSliceImpl(Operation *op,
        -:   79:                                 SetVector<Operation *> *backwardSlice,
        -:   80:                                 TransitiveFilter filter) {
    48806:   81:  if (!op || op->hasTrait<OpTrait::IsIsolatedFromAbove>())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:   82:    return;
        -:   83:
        -:   84:  // Evaluate whether we should keep this def.
        -:   85:  // This is useful in particular to implement scoping; i.e. return the
        -:   86:  // transitive backwardSlice in the current scope.
   48806*:   87:  if (filter && !filter(op))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   88:    return;
        -:   89:
   216440:   90:  for (const auto &en : llvm::enumerate(op->getOperands())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
    83817:   91:    auto operand = en.value();
call    0 returned 100%
    83817:   92:    if (auto *definingOp = operand.getDefiningOp()) {
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 1%
   167628:   93:      if (backwardSlice->count(definingOp) == 0)
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
    35944:   94:        getBackwardSliceImpl(definingOp, backwardSlice, filter);
call    0 returned 100%
        3:   95:    } else if (auto blockArg = operand.dyn_cast<BlockArgument>()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3:   96:      Block *block = blockArg.getOwner();
call    0 returned 100%
        3:   97:      Operation *parentOp = block->getParentOp();
call    0 returned 100%
        -:   98:      // TODO: determine whether we want to recurse backward into the other
        -:   99:      // blocks of parentOp, which are not technically backward unless they flow
        -:  100:      // into us. For now, just bail.
       6*:  101:      assert(parentOp->getNumRegions() == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  102:             parentOp->getRegion(0).getBlocks().size() == 1);
        6:  103:      if (backwardSlice->count(parentOp) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3:  104:        getBackwardSliceImpl(parentOp, backwardSlice, filter);
call    0 returned 100%
        -:  105:    } else {
    #####:  106:      llvm_unreachable("No definingOp and not a block argument.");
call    0 never executed
        -:  107:    }
        -:  108:  }
        -:  109:
    48806:  110:  backwardSlice->insert(op);
call    0 returned 100%
        -:  111:}
        -:  112:
function _ZN4mlir16getBackwardSliceEPNS_9OperationEPN4llvm9SetVectorIS1_St6vectorIS1_SaIS1_EENS2_8DenseSetIS1_NS2_12DenseMapInfoIS1_vEEEEEENS2_12function_refIFbS1_EEE called 12859 returned 100% blocks executed 100%
   12859*:  113:void mlir::getBackwardSlice(Operation *op,
        -:  114:                            SetVector<Operation *> *backwardSlice,
        -:  115:                            TransitiveFilter filter) {
   12859*:  116:  getBackwardSliceImpl(op, backwardSlice, filter);
call    0 returned 100%
        -:  117:
        -:  118:  // Don't insert the top level operation, we just queried on it and don't
        -:  119:  // want it in the results.
   12859*:  120:  backwardSlice->remove(op);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 returned 100%
    12859:  121:}
        -:  122:
function _ZN4mlir16getBackwardSliceENS_5ValueEPN4llvm9SetVectorIPNS_9OperationESt6vectorIS4_SaIS4_EENS1_8DenseSetIS4_NS1_12DenseMapInfoIS4_vEEEEEENS1_12function_refIFbS4_EEE called 0 returned 0% blocks executed 0%
    #####:  123:void mlir::getBackwardSlice(Value root, SetVector<Operation *> *backwardSlice,
        -:  124:                            TransitiveFilter filter) {
    #####:  125:  if (Operation *definingOp = root.getDefiningOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:    getBackwardSlice(definingOp, backwardSlice, filter);
call    0 never executed
    #####:  127:    return;
        -:  128:  }
    #####:  129:  Operation *bbAargOwner = root.cast<BlockArgument>().getOwner()->getParentOp();
call    0 never executed
call    1 never executed
    #####:  130:  getBackwardSlice(bbAargOwner, backwardSlice, filter);
call    0 never executed
        -:  131:}
        -:  132:
function _ZN4mlir8getSliceEPNS_9OperationEN4llvm12function_refIFbS1_EEES5_ called 0 returned 0% blocks executed 0%
    #####:  133:SetVector<Operation *> mlir::getSlice(Operation *op,
        -:  134:                                      TransitiveFilter backwardFilter,
        -:  135:                                      TransitiveFilter forwardFilter) {
    #####:  136:  SetVector<Operation *> slice;
call    0 never executed
call    1 never executed
    #####:  137:  slice.insert(op);
call    0 never executed
        -:  138:
    #####:  139:  unsigned currentIndex = 0;
    #####:  140:  SetVector<Operation *> backwardSlice;
call    0 never executed
call    1 never executed
    #####:  141:  SetVector<Operation *> forwardSlice;
call    0 never executed
call    1 never executed
    #####:  142:  while (currentIndex != slice.size()) {
branch  0 never executed
branch  1 never executed
    #####:  143:    auto *currentOp = (slice)[currentIndex];
call    0 never executed
        -:  144:    // Compute and insert the backwardSlice starting from currentOp.
    #####:  145:    backwardSlice.clear();
call    0 never executed
    #####:  146:    getBackwardSlice(currentOp, &backwardSlice, backwardFilter);
call    0 never executed
    #####:  147:    slice.insert(backwardSlice.begin(), backwardSlice.end());
call    0 never executed
        -:  148:
        -:  149:    // Compute and insert the forwardSlice starting from currentOp.
    #####:  150:    forwardSlice.clear();
call    0 never executed
    #####:  151:    getForwardSlice(currentOp, &forwardSlice, forwardFilter);
call    0 never executed
    #####:  152:    slice.insert(forwardSlice.begin(), forwardSlice.end());
call    0 never executed
    #####:  153:    ++currentIndex;
        -:  154:  }
    #####:  155:  return topologicalSort(slice);
call    0 never executed
        -:  156:}
        -:  157:
        -:  158:namespace {
        -:  159:/// DFS post-order implementation that maintains a global count to work across
        -:  160:/// multiple invocations, to help implement topological sort on multi-root DAGs.
        -:  161:/// We traverse all operations but only record the ones that appear in
        -:  162:/// `toSort` for the final result.
        -:  163:struct DFSState {
    #####:  164:  DFSState(const SetVector<Operation *> &set) : toSort(set), seen() {}
        -:  165:  const SetVector<Operation *> &toSort;
        -:  166:  SmallVector<Operation *, 16> topologicalCounts;
        -:  167:  DenseSet<Operation *> seen;
        -:  168:};
        -:  169:} // namespace
        -:  170:
function _ZL12dfsPostorderPN4mlir9OperationEPN12_GLOBAL__N_18DFSStateE called 0 returned 0% blocks executed 0%
    #####:  171:static void dfsPostorder(Operation *root, DFSState *state) {
    #####:  172:  SmallVector<Operation *> queue(1, root);
call    0 never executed
    #####:  173:  std::vector<Operation *> ops;
branch  0 never executed
branch  1 never executed
    #####:  174:  while (!queue.empty()) {
branch  0 never executed
branch  1 never executed
    #####:  175:    Operation *current = queue.pop_back_val();
call    0 never executed
    #####:  176:    ops.push_back(current);
call    0 never executed
    #####:  177:    for (Value result : current->getResults()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  178:      for (Operation *op : result.getUsers())
branch  0 never executed
branch  1 never executed
    #####:  179:        queue.push_back(op);
call    0 never executed
        -:  180:    }
    #####:  181:    for (Region &region : current->getRegions()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  182:      for (Operation &op : region.getOps())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  183:        queue.push_back(&op);
call    0 never executed
        -:  184:    }
        -:  185:  }
        -:  186:
    #####:  187:  for (Operation *op : llvm::reverse(ops)) {
branch  0 never executed
branch  1 never executed
    #####:  188:    if (state->seen.insert(op).second && state->toSort.count(op) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  189:      state->topologicalCounts.push_back(op);
call    0 never executed
        -:  190:  }
    #####:  191:}
        -:  192:
        -:  193:SetVector<Operation *>
function _ZN4mlir15topologicalSortERKN4llvm9SetVectorIPNS_9OperationESt6vectorIS3_SaIS3_EENS0_8DenseSetIS3_NS0_12DenseMapInfoIS3_vEEEEEE called 416 returned 100% blocks executed 15%
      416:  194:mlir::topologicalSort(const SetVector<Operation *> &toSort) {
      416:  195:  if (toSort.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      416:  196:    return toSort;
call    0 returned 100%
        -:  197:  }
        -:  198:
        -:  199:  // Run from each root with global count and `seen` set.
    #####:  200:  DFSState state(toSort);
call    0 never executed
call    1 never executed
    #####:  201:  for (auto *s : toSort) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  202:    assert(toSort.count(s) == 1 && "NYI: multi-sets not supported");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  203:    dfsPostorder(s, &state);
call    0 never executed
        -:  204:  }
        -:  205:
        -:  206:  // Reorder and return.
    #####:  207:  SetVector<Operation *> res;
call    0 never executed
call    1 never executed
    #####:  208:  for (auto it = state.topologicalCounts.rbegin(),
call    0 never executed
    #####:  209:            eit = state.topologicalCounts.rend();
    #####:  210:       it != eit; ++it) {
branch  0 never executed
branch  1 never executed
    #####:  211:    res.insert(*it);
call    0 never executed
        -:  212:  }
    #####:  213:  return res;
call    0 never executed
        -:  214:}
        -:  215:
        -:  216:/// Returns true if `value` (transitively) depends on iteration-carried values
        -:  217:/// of the given `ancestorOp`.
function _ZL20dependsOnCarriedValsN4mlir5ValueEN4llvm8ArrayRefINS_13BlockArgumentEEEPNS_9OperationE called 0 returned 0% blocks executed 0%
    #####:  218:static bool dependsOnCarriedVals(Value value,
        -:  219:                                 ArrayRef<BlockArgument> iterCarriedArgs,
        -:  220:                                 Operation *ancestorOp) {
        -:  221:  // Compute the backward slice of the value.
    #####:  222:  SetVector<Operation *> slice;
call    0 never executed
    #####:  223:  getBackwardSlice(value, &slice,
call    0 never executed
    #####:  224:                   [&](Operation *op) { return !ancestorOp->isAncestor(op); });
branch  0 never executed
branch  1 never executed
        -:  225:
        -:  226:  // Check that none of the operands of the operations in the backward slice are
        -:  227:  // loop iteration arguments, and neither is the value itself.
    #####:  228:  SmallPtrSet<Value, 8> iterCarriedValSet(iterCarriedArgs.begin(),
    #####:  229:                                          iterCarriedArgs.end());
call    0 never executed
call    1 never executed
    #####:  230:  if (iterCarriedValSet.contains(value))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  231:    return true;
        -:  232:
    #####:  233:  for (Operation *op : slice)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  234:    for (Value operand : op->getOperands())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  235:      if (iterCarriedValSet.contains(operand))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  236:        return true;
        -:  237:
        -:  238:  return false;
        -:  239:}
        -:  240:
        -:  241:/// Utility to match a generic reduction given a list of iteration-carried
        -:  242:/// arguments, `iterCarriedArgs` and the position of the potential reduction
        -:  243:/// argument within the list, `redPos`. If a reduction is matched, returns the
        -:  244:/// reduced value and the topologically-sorted list of combiner operations
        -:  245:/// involved in the reduction. Otherwise, returns a null value.
        -:  246:///
        -:  247:/// The matching algorithm relies on the following invariants, which are subject
        -:  248:/// to change:
        -:  249:///  1. The first combiner operation must be a binary operation with the
        -:  250:///     iteration-carried value and the reduced value as operands.
        -:  251:///  2. The iteration-carried value and combiner operations must be side
        -:  252:///     effect-free, have single result and a single use.
        -:  253:///  3. Combiner operations must be immediately nested in the region op
        -:  254:///     performing the reduction.
        -:  255:///  4. Reduction def-use chain must end in a terminator op that yields the
        -:  256:///     next iteration/output values in the same order as the iteration-carried
        -:  257:///     values in `iterCarriedArgs`.
        -:  258:///  5. `iterCarriedArgs` must contain all the iteration-carried/output values
        -:  259:///     of the region op performing the reduction.
        -:  260:///
        -:  261:/// This utility is generic enough to detect reductions involving multiple
        -:  262:/// combiner operations (disabled for now) across multiple dialects, including
        -:  263:/// Linalg, Affine and SCF. For the sake of genericity, it does not return
        -:  264:/// specific enum values for the combiner operations since its goal is also
        -:  265:/// matching reductions without pre-defined semantics in core MLIR. It's up to
        -:  266:/// each client to make sense out of the list of combiner operations. It's also
        -:  267:/// up to each client to check for additional invariants on the expected
        -:  268:/// reductions not covered by this generic matching.
function _ZN4mlir14matchReductionEN4llvm8ArrayRefINS_13BlockArgumentEEEjRNS0_15SmallVectorImplIPNS_9OperationEEE called 138 returned 100% blocks executed 9%
      138:  269:Value mlir::matchReduction(ArrayRef<BlockArgument> iterCarriedArgs,
        -:  270:                           unsigned redPos,
        -:  271:                           SmallVectorImpl<Operation *> &combinerOps) {
     138*:  272:  assert(redPos < iterCarriedArgs.size() && "'redPos' is out of bounds");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  273:
      138:  274:  BlockArgument redCarriedVal = iterCarriedArgs[redPos];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      138:  275:  if (!redCarriedVal.hasOneUse())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      138:  276:    return nullptr;
        -:  277:
        -:  278:  // For now, the first combiner op must be a binary op.
    #####:  279:  Operation *combinerOp = *redCarriedVal.getUsers().begin();
branch  0 never executed
branch  1 never executed
    #####:  280:  if (combinerOp->getNumOperands() != 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  281:    return nullptr;
    #####:  282:  Value reducedVal = combinerOp->getOperand(0) == redCarriedVal
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  283:                         ? combinerOp->getOperand(1)
    #####:  284:                         : combinerOp->getOperand(0);
branch  0 never executed
branch  1 never executed
        -:  285:
    #####:  286:  Operation *redRegionOp =
call    0 never executed
    #####:  287:      iterCarriedArgs.front().getOwner()->getParent()->getParentOp();
call    0 never executed
call    1 never executed
    #####:  288:  if (dependsOnCarriedVals(reducedVal, iterCarriedArgs, redRegionOp))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  289:    return nullptr;
        -:  290:
        -:  291:  // Traverse the def-use chain starting from the first combiner op until a
        -:  292:  // terminator is found. Gather all the combiner ops along the way in
        -:  293:  // topological order.
    #####:  294:  while (!combinerOp->mightHaveTrait<OpTrait::IsTerminator>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  295:    if (!MemoryEffectOpInterface::hasNoEffect(combinerOp) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  296:        combinerOp->getNumResults() != 1 || !combinerOp->hasOneUse() ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  297:        combinerOp->getParentOp() != redRegionOp)
branch  0 never executed
branch  1 never executed
    #####:  298:      return nullptr;
        -:  299:
    #####:  300:    combinerOps.push_back(combinerOp);
call    0 never executed
    #####:  301:    combinerOp = *combinerOp->getUsers().begin();
call    0 never executed
        -:  302:  }
        -:  303:
        -:  304:  // Limit matching to single combiner op until we can properly test reductions
        -:  305:  // involving multiple combiners.
    #####:  306:  if (combinerOps.size() != 1)
branch  0 never executed
branch  1 never executed
    #####:  307:    return nullptr;
        -:  308:
        -:  309:  // Check that the yielded value is in the same position as in
        -:  310:  // `iterCarriedArgs`.
    #####:  311:  Operation *terminatorOp = combinerOp;
    #####:  312:  if (terminatorOp->getOperand(redPos) != combinerOps.back()->getResults()[0])
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  313:    return nullptr;
        -:  314:
    #####:  315:  return reducedVal;
        -:  316:}
