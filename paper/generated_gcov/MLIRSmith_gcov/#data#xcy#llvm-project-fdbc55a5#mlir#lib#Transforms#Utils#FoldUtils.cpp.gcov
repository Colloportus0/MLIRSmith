        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Transforms/Utils/FoldUtils.cpp
        -:    0:Graph:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/FoldUtils.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Transforms/Utils/CMakeFiles/obj.MLIRTransformUtils.dir/FoldUtils.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- FoldUtils.cpp ---- Fold Utilities ----------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines various operation fold utilities. These utilities are
        -:   10:// intended to be used by passes to unify and simply their logic.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Transforms/FoldUtils.h"
        -:   15:
        -:   16:#include "mlir/IR/Builders.h"
        -:   17:#include "mlir/IR/Matchers.h"
        -:   18:#include "mlir/IR/Operation.h"
        -:   19:
        -:   20:using namespace mlir;
        -:   21:
        -:   22:/// Given an operation, find the parent region that folded constants should be
        -:   23:/// inserted into.
        -:   24:static Region *
function _ZL18getInsertionRegionRN4mlir26DialectInterfaceCollectionINS_20DialectFoldInterfaceEEEPNS_5BlockE called 4282962 returned 100% blocks executed 73%
  4282962:   25:getInsertionRegion(DialectInterfaceCollection<DialectFoldInterface> &interfaces,
        -:   26:                   Block *insertionBlock) {
  7297746:   27:  while (Region *region = insertionBlock->getParent()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   28:    // Insert in this region for any of the following scenarios:
        -:   29:    //  * The parent is unregistered, or is known to be isolated from above.
        -:   30:    //  * The parent is a top-level operation.
  7297741:   31:    auto *parentOp = region->getParentOp();
call    0 returned 100%
  7297741:   32:    if (parentOp->mightHaveTrait<OpTrait::IsIsolatedFromAbove>() ||
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
  3014784:   33:        !parentOp->getBlock())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
  4282978:   34:      return region;
        -:   35:
        -:   36:    // Otherwise, check if this region is a desired insertion region.
  3014784:   37:    auto *interface = interfaces.getInterfaceFor(parentOp);
call    0 returned 100%
 3014784*:   38:    if (LLVM_UNLIKELY(interface && interface->shouldMaterializeInto(region)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   39:      return region;
        -:   40:
        -:   41:    // Traverse up the parent looking for an insertion region.
  3014784:   42:    insertionBlock = parentOp->getBlock();
  3014784:   43:  }
    #####:   44:  llvm_unreachable("expected valid insertion region");
call    0 never executed
        -:   45:}
        -:   46:
        -:   47:/// A utility function used to materialize a constant for a given attribute and
        -:   48:/// type. On success, a valid constant value is returned. Otherwise, null is
        -:   49:/// returned
function _ZL19materializeConstantPN4mlir7DialectERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 845012 returned 100% blocks executed 75%
   845012:   50:static Operation *materializeConstant(Dialect *dialect, OpBuilder &builder,
        -:   51:                                      Attribute value, Type type,
        -:   52:                                      Location loc) {
   845012:   53:  auto insertPt = builder.getInsertionPoint();
call    0 returned 100%
   845012:   54:  (void)insertPt;
        -:   55:
        -:   56:  // Ask the dialect to materialize a constant operation for this value.
   845012:   57:  if (auto *constOp = dialect->materializeConstant(builder, value, type, loc)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
  844038*:   58:    assert(insertPt == builder.getInsertionPoint());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
  844038*:   59:    assert(matchPattern(constOp, m_Constant()));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   60:    return constOp;
        -:   61:  }
        -:   62:
        -:   63:  return nullptr;
        -:   64:}
        -:   65:
        -:   66://===----------------------------------------------------------------------===//
        -:   67:// OperationFolder
        -:   68://===----------------------------------------------------------------------===//
        -:   69:
function _ZN4mlir15OperationFolder9tryToFoldEPNS_9OperationEN4llvm12function_refIFvS2_EEES6_Pb called 23694463 returned 100% blocks executed 93%
 23694463:   70:LogicalResult OperationFolder::tryToFold(
        -:   71:    Operation *op, function_ref<void(Operation *)> processGeneratedConstants,
        -:   72:    function_ref<void(Operation *)> preReplaceAction, bool *inPlaceUpdate) {
 23694463:   73:  if (inPlaceUpdate)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
 22871287:   74:    *inPlaceUpdate = false;
        -:   75:
        -:   76:  // If this is a unique'd constant, return failure as we know that it has
        -:   77:  // already been folded.
 47388971:   78:  if (isFolderOwnedConstant(op)) {
        -:   79:    // Check to see if we should rehoist, i.e. if a non-constant operation was
        -:   80:    // inserted before this one.
  2983041:   81:    Block *opBlock = op->getBlock();
call    0 returned 100%
  2983041:   82:    if (&opBlock->front() != op && !isFolderOwnedConstant(op->getPrevNode()))
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       11:   83:      op->moveBefore(&opBlock->front());
call    0 returned 100%
call    1 returned 100%
  2983047:   84:    return failure();
        -:   85:  }
        -:   86:
        -:   87:  // Try to fold the operation.
 20711467:   88:  SmallVector<Value, 8> results;
call    0 returned 100%
 20711467:   89:  OpBuilder builder(op);
call    0 returned 100%
 20711451:   90:  if (failed(tryToFold(builder, op, results, processGeneratedConstants)))
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
 19385624:   91:    return failure();
        -:   92:
        -:   93:  // Check to see if the operation was just updated in place.
  2651668:   94:  if (results.empty()) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
    94352:   95:    if (inPlaceUpdate)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
    85458:   96:      *inPlaceUpdate = true;
    94352:   97:    return success();
        -:   98:  }
        -:   99:
        -:  100:  // Constant folding succeeded. We will start replacing this op's uses and
        -:  101:  // erase this op. Invoke the callback provided by the caller to perform any
        -:  102:  // pre-replacement action.
  1231482:  103:  if (preReplaceAction)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
   985914:  104:    preReplaceAction(op);
call    0 returned 100%
        -:  105:
        -:  106:  // Replace all of the result values and erase the operation.
  2462964:  107:  for (unsigned i = 0, e = results.size(); i != e; ++i)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
  2462964:  108:    op->getResult(i).replaceAllUsesWith(results[i]);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
  1231482:  109:  op->erase();
call    0 returned 100%
 20711458:  110:  return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  111:}
        -:  112:
function _ZN4mlir15OperationFolder19insertKnownConstantEPNS_9OperationENS_9AttributeE called 3852086 returned 100% blocks executed 89%
  3852086:  113:bool OperationFolder::insertKnownConstant(Operation *op, Attribute constValue) {
  3852086:  114:  Block *opBlock = op->getBlock();
call    0 returned 100%
        -:  115:
        -:  116:  // If this is a constant we unique'd, we don't need to insert, but we can
        -:  117:  // check to see if we should rehoist it.
  7704186:  118:  if (isFolderOwnedConstant(op)) {
  1341297:  119:    if (&opBlock->front() != op && !isFolderOwnedConstant(op->getPrevNode()))
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     3126:  120:      op->moveBefore(&opBlock->front());
call    0 returned 100%
call    1 returned 100%
  1341297:  121:    return true;
        -:  122:  }
        -:  123:
        -:  124:  // Get the constant value of the op if necessary.
  2510803:  125:  if (!constValue) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  126:    matchPattern(op, m_Constant(&constValue));
call    0 never executed
    #####:  127:    assert(constValue && "expected `op` to be a constant");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  128:  } else {
        -:  129:    // Ensure that the provided constant was actually correct.
        -:  130:#ifndef NDEBUG
  2510803:  131:    Attribute expectedValue;
  2510803:  132:    matchPattern(op, m_Constant(&expectedValue));
call    0 returned 100%
 2510758*:  133:    assert(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  134:        expectedValue == constValue &&
        -:  135:        "provided constant value was not the expected value of the constant");
        -:  136:#endif
        -:  137:  }
        -:  138:
        -:  139:  // Check for an existing constant operation for the attribute value.
  2510758:  140:  Region *insertRegion = getInsertionRegion(interfaces, opBlock);
call    0 returned 100%
  2510767:  141:  auto &uniquedConstants = foldScopes[insertRegion];
call    0 returned 100%
  7532470:  142:  Operation *&folderConstOp = uniquedConstants[std::make_tuple(
  2510817:  143:      op->getDialect(), constValue, *op->result_type_begin())];
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
        -:  144:
        -:  145:  // If there is an existing constant, replace `op`.
  2510853:  146:  if (folderConstOp) {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
  1203971:  147:    op->replaceAllUsesWith(folderConstOp);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1203971:  148:    op->erase();
  1203971:  149:    return false;
call    0 returned 100%
        -:  150:  }
        -:  151:
        -:  152:  // Otherwise, we insert `op`. If `op` is in the insertion block and is either
        -:  153:  // already at the front of the block, or the previous operation is already a
        -:  154:  // constant we unique'd (i.e. one we inserted), then we don't need to do
        -:  155:  // anything. Otherwise, we move the constant to the insertion block.
  1306882:  156:  Block *insertBlock = &insertRegion->front();
call    0 returned 100%
  2224088:  157:  if (opBlock != insertBlock || (&insertBlock->front() != op &&
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
   893326:  158:                                 !isFolderOwnedConstant(op->getPrevNode())))
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   748412:  159:    op->moveBefore(&insertBlock->front());
call    0 returned 100%
call    1 returned 100%
        -:  160:
  1306878:  161:  folderConstOp = op;
  1306878:  162:  referencedDialects[op].push_back(op->getDialect());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
  1306876:  163:  return true;
call    0 returned 100%
        -:  164:}
        -:  165:
        -:  166:/// Notifies that the given constant `op` should be remove from this
        -:  167:/// OperationFolder's internal bookkeeping.
function _ZN4mlir15OperationFolder13notifyRemovalEPNS_9OperationE called 35816937 returned 100% blocks executed 94%
 35816937:  168:void OperationFolder::notifyRemoval(Operation *op) {
        -:  169:  // Check to see if this operation is uniqued within the folder.
 35816937:  170:  auto it = referencedDialects.find(op);
call    0 returned 100%
 35816934:  171:  if (it == referencedDialects.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
 35344306:  172:    return;
        -:  173:
        -:  174:  // Get the constant value for this operation, this is the value that was used
        -:  175:  // to unique the operation internally.
   472662:  176:  Attribute constValue;
   472662:  177:  matchPattern(op, m_Constant(&constValue));
call    0 returned 100%
  472664*:  178:  assert(constValue);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  179:
        -:  180:  // Get the constant map that this operation was uniqued in.
   472664:  181:  auto &uniquedConstants =
   472664:  182:      foldScopes[getInsertionRegion(interfaces, op->getBlock())];
call    0 returned 100%
call    1 returned 100%
        -:  183:
        -:  184:  // Erase all of the references to this operation.
   472662:  185:  auto type = op->getResult(0).getType();
call    0 returned 100%
  1008376:  186:  for (auto *dialect : it->second)
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
   535710:  187:    uniquedConstants.erase(std::make_tuple(dialect, constValue, type));
call    0 returned 100%
   472665:  188:  referencedDialects.erase(it);
call    0 returned 100%
        -:  189:}
        -:  190:
        -:  191:/// Clear out any constants cached inside of the folder.
function _ZN4mlir15OperationFolder5clearEv called 0 returned 0% blocks executed 0%
    #####:  192:void OperationFolder::clear() {
    #####:  193:  foldScopes.clear();
call    0 never executed
    #####:  194:  referencedDialects.clear();
call    0 never executed
    #####:  195:}
        -:  196:
        -:  197:/// Get or create a constant using the given builder. On success this returns
        -:  198:/// the constant operation, nullptr otherwise.
function _ZN4mlir15OperationFolder19getOrCreateConstantERNS_9OpBuilderEPNS_7DialectENS_9AttributeENS_4TypeENS_8LocationE called 67969 returned 100% blocks executed 91%
    67969:  199:Value OperationFolder::getOrCreateConstant(OpBuilder &builder, Dialect *dialect,
        -:  200:                                           Attribute value, Type type,
        -:  201:                                           Location loc) {
    67969:  202:  OpBuilder::InsertionGuard foldGuard(builder);
call    0 returned 100%
        -:  203:
        -:  204:  // Use the builder insertion block to find an insertion point for the
        -:  205:  // constant.
    67969:  206:  auto *insertRegion =
    67969:  207:      getInsertionRegion(interfaces, builder.getInsertionBlock());
call    0 returned 100%
    67969:  208:  auto &entry = insertRegion->front();
call    0 returned 100%
    67969:  209:  builder.setInsertionPoint(&entry, entry.begin());
call    0 returned 100%
        -:  210:
        -:  211:  // Get the constant map for the insertion region of this operation.
    67969:  212:  auto &uniquedConstants = foldScopes[insertRegion];
call    0 returned 100%
    67969:  213:  Operation *constOp = tryGetOrCreateConstant(uniquedConstants, dialect,
call    0 returned 100%
        -:  214:                                              builder, value, type, loc);
    68824:  215:  return constOp ? constOp->getResult(0) : Value();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  216:}
        -:  217:
function _ZNK4mlir15OperationFolder21isFolderOwnedConstantEPNS_9OperationE called 0 returned 0% blocks executed 0%
32050980*:  218:bool OperationFolder::isFolderOwnedConstant(Operation *op) const {
64102018*:  219:  return referencedDialects.count(op);
call    0 never executed
call    1 returned 100%
branch  2 taken 35% (fallthrough)
branch  3 taken 65%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
branch  8 taken 40% (fallthrough)
branch  9 taken 60%
call   10 returned 100%
branch 11 taken 13% (fallthrough)
branch 12 taken 87%
call   13 returned 100%
branch 14 taken 1% (fallthrough)
branch 15 taken 100%
        -:  220:}
        -:  221:
        -:  222:/// Tries to perform folding on the given `op`. If successful, populates
        -:  223:/// `results` with the results of the folding.
function _ZN4mlir15OperationFolder9tryToFoldERNS_9OpBuilderEPNS_9OperationERN4llvm15SmallVectorImplINS_5ValueEEENS5_12function_refIFvS4_EEE called 20711473 returned 100% blocks executed 87%
 20711473:  224:LogicalResult OperationFolder::tryToFold(
        -:  225:    OpBuilder &builder, Operation *op, SmallVectorImpl<Value> &results,
        -:  226:    function_ref<void(Operation *)> processGeneratedConstants) {
 20711473:  227:  SmallVector<Attribute, 8> operandConstants;
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:  228:
        -:  229:  // If this is a commutative operation, move constants to be trailing operands.
 20711473:  230:  bool updatedOpOperands = false;
 47174867:  231:  if (op->getNumOperands() >= 2 && op->hasTrait<OpTrait::IsCommutative>()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
   170779:  232:    auto isNonConstant = [&](OpOperand &o) {
    56822:  233:      return !matchPattern(o.get(), m_Constant());
call    0 returned 100%
        -:  234:    };
   113957:  235:    auto *firstConstantIt =
   113957:  236:        llvm::find_if_not(op->getOpOperands(), isNonConstant);
call    0 returned 100%
call    1 returned 100%
   113957:  237:    auto *newConstantIt = std::stable_partition(
call    0 returned 100%
   113957:  238:        firstConstantIt, op->getOpOperands().end(), isNonConstant);
call    0 returned 100%
call    1 returned 100%
        -:  239:
        -:  240:    // Remember if we actually moved anything.
   113958:  241:    updatedOpOperands = firstConstantIt != newConstantIt;
        -:  242:  }
        -:  243:
        -:  244:  // Check to see if any operands to the operation is constant and whether
        -:  245:  // the operation knows how to constant fold itself.
 40858082:  246:  operandConstants.assign(op->getNumOperands(), Attribute());
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
 75636357:  247:  for (unsigned i = 0, e = op->getNumOperands(); i != e; ++i)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 63% (fallthrough)
branch  3 taken 37%
 34778312:  248:    matchPattern(op->getOperand(i), m_Constant(&operandConstants[i]));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
        -:  249:
        -:  250:  // Attempt to constant fold the operation. If we failed, check to see if we at
        -:  251:  // least updated the operands of the operation. We treat this as an in-place
        -:  252:  // fold.
 41422893:  253:  SmallVector<OpFoldResult, 8> foldResults;
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
 20711436:  254:  if (failed(op->fold(operandConstants, foldResults)) ||
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
  1320482:  255:      failed(processFoldResults(builder, op, results, foldResults,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
        -:  256:                                processGeneratedConstants)))
 19391094:  257:    return success(updatedOpOperands);
 20711457:  258:  return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  259:}
        -:  260:
function _ZN4mlir15OperationFolder18processFoldResultsERNS_9OpBuilderEPNS_9OperationERN4llvm15SmallVectorImplINS_5ValueEEENS5_8ArrayRefINS_12OpFoldResultEEENS5_12function_refIFvS4_EEE called 1320482 returned 100% blocks executed 76%
  1320482:  261:LogicalResult OperationFolder::processFoldResults(
        -:  262:    OpBuilder &builder, Operation *op, SmallVectorImpl<Value> &results,
        -:  263:    ArrayRef<OpFoldResult> foldResults,
        -:  264:    function_ref<void(Operation *)> processGeneratedConstants) {
        -:  265:  // Check to see if the operation was just updated in place.
  1320482:  266:  if (foldResults.empty())
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
    88881:  267:    return success();
 1231601*:  268:  assert(foldResults.size() == op->getNumResults());
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  269:
        -:  270:  // Create a builder to insert new operations into the entry block of the
        -:  271:  // insertion region.
  1231601:  272:  auto *insertRegion =
  1231601:  273:      getInsertionRegion(interfaces, builder.getInsertionBlock());
call    0 returned 100%
  1231601:  274:  auto &entry = insertRegion->front();
call    0 returned 100%
  1231601:  275:  OpBuilder::InsertionGuard foldGuard(builder);
call    0 returned 100%
  1231601:  276:  builder.setInsertionPoint(&entry, entry.begin());
call    0 returned 100%
        -:  277:
        -:  278:  // Get the constant map for the insertion region of this operation.
  1231601:  279:  auto &uniquedConstants = foldScopes[insertRegion];
call    0 returned 100%
        -:  280:
        -:  281:  // Create the result constants and replace the results.
  1231601:  282:  auto *dialect = op->getDialect();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
  2463083:  283:  for (unsigned i = 0, e = op->getNumResults(); i != e; ++i) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 1231601*:  284:    assert(!foldResults[i].isNull() && "expected valid OpFoldResult");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:  285:
        -:  286:    // Check if the result was an SSA value.
  1231601:  287:    if (auto repl = foldResults[i].dyn_cast<Value>()) {
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
   215834:  288:      if (repl.getType() != op->getResult(i).getType()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  289:        results.clear();
    #####:  290:        return failure();
        -:  291:      }
   107917:  292:      results.emplace_back(repl);
call    0 returned 100%
   107917:  293:      continue;
        -:  294:    }
        -:  295:
        -:  296:    // Check to see if there is a canonicalized version of this constant.
  1123684:  297:    auto res = op->getResult(i);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1123684:  298:    Attribute attrRepl = foldResults[i].get<Attribute>();
call    0 returned 100%
  2247368:  299:    if (auto *constOp =
  1123684:  300:            tryGetOrCreateConstant(uniquedConstants, dialect, builder, attrRepl,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
        -:  301:                                   res.getType(), op->getLoc())) {
        -:  302:      // Ensure that this constant dominates the operation we are replacing it
        -:  303:      // with. This may not automatically happen if the operation being folded
        -:  304:      // was inserted before the constant within the insertion block.
  1123565:  305:      Block *opBlock = op->getBlock();
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
  1694818:  306:      if (opBlock == constOp->getBlock() && &opBlock->front() != constOp)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
branch  2 taken 23% (fallthrough)
branch  3 taken 77%
   132129:  307:        constOp->moveBefore(&opBlock->front());
call    0 returned 100%
call    1 returned 100%
        -:  308:
  1123565:  309:      results.push_back(constOp->getResult(0));
call    0 returned 100%
  1123565:  310:      continue;
        -:  311:    }
        -:  312:    // If materialization fails, cleanup any operations generated for the
        -:  313:    // previous results and return failure.
    #####:  314:    for (Operation &op : llvm::make_early_inc_range(
branch  0 never executed
branch  1 never executed
     119*:  315:             llvm::make_range(entry.begin(), builder.getInsertionPoint()))) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
    #####:  316:      notifyRemoval(&op);
call    0 never executed
    #####:  317:      op.erase();
call    0 never executed
        -:  318:    }
      119:  319:    results.clear();
      119:  320:    return failure();
        -:  321:  }
        -:  322:
        -:  323:  // Process any newly generated operations.
  1231482:  324:  if (processGeneratedConstants) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  2129600:  325:    for (auto i = entry.begin(), e = builder.getInsertionPoint(); i != e; ++i)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
   898118:  326:      processGeneratedConstants(&*i);
call    0 returned 100%
call    1 returned 100%
        -:  327:  }
        -:  328:
  1231601:  329:  return success();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  330:}
        -:  331:
        -:  332:/// Try to get or create a new constant entry. On success this returns the
        -:  333:/// constant operation value, nullptr otherwise.
function _ZN4mlir15OperationFolder22tryGetOrCreateConstantERN4llvm8DenseMapISt5tupleIJPNS_7DialectENS_9AttributeENS_4TypeEEEPNS_9OperationENS1_12DenseMapInfoIS8_vEENS1_6detail12DenseMapPairIS8_SA_EEEES5_RNS_9OpBuilderES6_S7_NS_8LocationE called 1191653 returned 100% blocks executed 96%
  1191653:  334:Operation *OperationFolder::tryGetOrCreateConstant(
        -:  335:    ConstantMap &uniquedConstants, Dialect *dialect, OpBuilder &builder,
        -:  336:    Attribute value, Type type, Location loc) {
        -:  337:  // Check if an existing mapping already exists.
  1191653:  338:  auto constKey = std::make_tuple(dialect, value, type);
call    0 returned 100%
  1191653:  339:  Operation *&constOp = uniquedConstants[constKey];
call    0 returned 100%
  1191653:  340:  if (constOp)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:  341:    return constOp;
        -:  342:
        -:  343:  // If one doesn't exist, try to materialize one.
   845012:  344:  if (!(constOp = materializeConstant(dialect, builder, value, type, loc)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 1%
        -:  345:    return nullptr;
        -:  346:
        -:  347:  // Check to see if the generated constant is in the expected dialect.
   844038:  348:  auto *newDialect = constOp->getDialect();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   844038:  349:  if (newDialect == dialect) {
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
   190104:  350:    referencedDialects[constOp].push_back(dialect);
call    0 returned 100%
call    1 returned 100%
   190104:  351:    return constOp;
        -:  352:  }
        -:  353:
        -:  354:  // If it isn't, then we also need to make sure that the mapping for the new
        -:  355:  // dialect is valid.
   653934:  356:  auto newKey = std::make_tuple(newDialect, value, type);
call    0 returned 100%
        -:  357:
        -:  358:  // If an existing operation in the new dialect already exists, delete the
        -:  359:  // materialized operation in favor of the existing one.
  1307868:  360:  if (auto *existingOp = uniquedConstants.lookup(newKey)) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
    47728:  361:    constOp->erase();
call    0 returned 100%
    47728:  362:    referencedDialects[existingOp].push_back(dialect);
call    0 returned 100%
call    1 returned 100%
    47728:  363:    return constOp = existingOp;
        -:  364:  }
        -:  365:
        -:  366:  // Otherwise, update the new dialect to the materialized operation.
   606206:  367:  referencedDialects[constOp].assign({dialect, newDialect});
call    0 returned 100%
call    1 returned 100%
   606206:  368:  auto newIt = uniquedConstants.insert({newKey, constOp});
call    0 returned 100%
   606206:  369:  return newIt.first->second;
call    0 returned 100%
        -:  370:}
