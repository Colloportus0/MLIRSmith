        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Async/IR/Async.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Async/IR/CMakeFiles/obj.MLIRAsyncDialect.dir/Async.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Async/IR/CMakeFiles/obj.MLIRAsyncDialect.dir/Async.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- Async.cpp - MLIR Async Operations ----------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Async/IR/Async.h"
        -:   10:
        -:   11:#include "mlir/IR/DialectImplementation.h"
        -:   12:#include "llvm/ADT/TypeSwitch.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::async;
        -:   16:
        -:   17:#include "mlir/Dialect/Async/IR/AsyncOpsDialect.cpp.inc"
        -:   18:
        -:   19:constexpr StringRef AsyncDialect::kAllowedToBlockAttrName;
        -:   20:
function _ZN4mlir5async12AsyncDialect10initializeEv called 0 returned 0% blocks executed 0%
    3679*:   21:void AsyncDialect::initialize() {
    3679*:   22:  addOperations<
        -:   23:#define GET_OP_LIST
        -:   24:#include "mlir/Dialect/Async/IR/AsyncOps.cpp.inc"
    3679*:   25:      >();
call    0 never executed
call    1 returned 100%
    3679*:   26:  addTypes<
        -:   27:#define GET_TYPEDEF_LIST
        -:   28:#include "mlir/Dialect/Async/IR/AsyncOpsTypes.cpp.inc"
    3679*:   29:      >();
call    0 never executed
call    1 returned 100%
    #####:   30:}
        -:   31:
        -:   32://===----------------------------------------------------------------------===//
        -:   33:// YieldOp
        -:   34://===----------------------------------------------------------------------===//
        -:   35:
function _ZN4mlir5async7YieldOp6verifyEv called 1382 returned 100% blocks executed 58%
     1382:   36:LogicalResult YieldOp::verify() {
        -:   37:  // Get the underlying value types from async values returned from the
        -:   38:  // parent `async.execute` operation.
     1382:   39:  auto executeOp = (*this)->getParentOfType<ExecuteOp>();
call    0 returned 100%
     1382:   40:  auto types =
call    0 returned 100%
    1382*:   41:      llvm::map_range(executeOp.getBodyResults(), [](const OpResult &result) {
    #####:   42:        return result.getType().cast<ValueType>().getValueType();
call    0 never executed
     1382:   43:      });
call    0 returned 100%
        -:   44:
     1382:   45:  if (getOperandTypes() != types)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   46:    return emitOpError("operand types do not match the types returned from "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   47:                       "the parent ExecuteOp");
call    0 never executed
        -:   48:
     1381:   49:  return success();
        -:   50:}
        -:   51:
        -:   52:MutableOperandRange
function _ZN4mlir5async7YieldOp27getMutableSuccessorOperandsEN4llvm8OptionalIjEE called 0 returned 0% blocks executed 0%
    2778*:   53:YieldOp::getMutableSuccessorOperands(Optional<unsigned> index) {
    2778*:   54:  return operandsMutable();
call    0 returned 100%
call    1 never executed
        -:   55:}
        -:   56:
        -:   57://===----------------------------------------------------------------------===//
        -:   58:/// ExecuteOp
        -:   59://===----------------------------------------------------------------------===//
        -:   60:
        -:   61:constexpr char kOperandSegmentSizesAttr[] = "operand_segment_sizes";
        -:   62:
function _ZN4mlir5async9ExecuteOp25getSuccessorEntryOperandsEN4llvm8OptionalIjEE called 1399 returned 99% blocks executed 80%
     1399:   63:OperandRange ExecuteOp::getSuccessorEntryOperands(Optional<unsigned> index) {
    1399*:   64:  assert(index && *index == 0 && "invalid region index");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
     1399:   65:  return getBodyOperands();
call    0 returned 99%
        -:   66:}
        -:   67:
function _ZN4mlir5async9ExecuteOp18areTypesCompatibleENS_4TypeES2_ called 0 returned 0% blocks executed 0%
    #####:   68:bool ExecuteOp::areTypesCompatible(Type lhs, Type rhs) {
    #####:   69:  const auto getValueOrTokenType = [](Type type) {
    #####:   70:    if (auto value = type.dyn_cast<ValueType>())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   71:      return value.getValueType();
    #####:   72:    return type;
        -:   73:  };
    #####:   74:  return getValueOrTokenType(lhs) == getValueOrTokenType(rhs);
call    0 never executed
call    1 never executed
        -:   75:}
        -:   76:
function _ZN4mlir5async9ExecuteOp19getSuccessorRegionsEN4llvm8OptionalIjEENS2_8ArrayRefINS_9AttributeEEERNS2_15SmallVectorImplINS_15RegionSuccessorEEE called 2786 returned 101% blocks executed 93%
     2786:   77:void ExecuteOp::getSuccessorRegions(Optional<unsigned> index,
        -:   78:                                    ArrayRef<Attribute>,
        -:   79:                                    SmallVectorImpl<RegionSuccessor> &regions) {
        -:   80:  // The `body` region branch back to the parent operation.
     2786:   81:  if (index) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    1394*:   82:    assert(*index == 0 && "invalid region index");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     1394:   83:    regions.push_back(RegionSuccessor(getBodyResults()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 101%
     1401:   84:    return;
        -:   85:  }
        -:   86:
        -:   87:  // Otherwise the successor is the body region.
     1392:   88:  regions.push_back(
call    0 returned 100%
     1392:   89:      RegionSuccessor(&getBodyRegion(), getBodyRegion().getArguments()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 101%
        -:   90:}
        -:   91:
function _ZN4mlir5async9ExecuteOp5buildERNS_9OpBuilderERNS_14OperationStateENS_9TypeRangeENS_10ValueRangeES7_N4llvm12function_refIFvS3_NS_8LocationES7_EEE called 452 returned 100% blocks executed 57%
      452:   92:void ExecuteOp::build(OpBuilder &builder, OperationState &result,
        -:   93:                      TypeRange resultTypes, ValueRange dependencies,
        -:   94:                      ValueRange operands, BodyBuilderFn bodyBuilder) {
        -:   95:
      452:   96:  result.addOperands(dependencies);
call    0 returned 100%
      452:   97:  result.addOperands(operands);
call    0 returned 100%
        -:   98:
        -:   99:  // Add derived `operand_segment_sizes` attribute based on parsed operands.
      452:  100:  int32_t numDependencies = dependencies.size();
call    0 returned 100%
      452:  101:  int32_t numOperands = operands.size();
      452:  102:  auto operandSegmentSizes =
      452:  103:      builder.getDenseI32ArrayAttr({numDependencies, numOperands});
call    0 returned 100%
      452:  104:  result.addAttribute(kOperandSegmentSizesAttr, operandSegmentSizes);
call    0 returned 100%
        -:  105:
        -:  106:  // First result is always a token, and then `resultTypes` wrapped into
        -:  107:  // `async.value`.
      452:  108:  result.addTypes({TokenType::get(result.getContext())});
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     452*:  109:  for (Type type : resultTypes)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
    #####:  110:    result.addTypes(ValueType::get(type));
call    0 never executed
call    1 never executed
        -:  111:
        -:  112:  // Add a body region with block arguments as unwrapped async value operands.
      452:  113:  Region *bodyRegion = result.addRegion();
call    0 returned 100%
      452:  114:  bodyRegion->push_back(new Block);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      452:  115:  Block &bodyBlock = bodyRegion->front();
call    0 returned 100%
     452*:  116:  for (Value operand : operands) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
    #####:  117:    auto valueType = operand.getType().dyn_cast<ValueType>();
call    0 never executed
    #####:  118:    bodyBlock.addArgument(valueType ? valueType.getValueType()
    #####:  119:                                    : operand.getType(),
branch  0 never executed
branch  1 never executed
    #####:  120:                          operand.getLoc());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  121:  }
        -:  122:
        -:  123:  // Create the default terminator if the builder is not provided and if the
        -:  124:  // expected result is empty. Otherwise, leave this to the caller
        -:  125:  // because we don't know which values to return from the execute op.
      452:  126:  if (resultTypes.empty() && !bodyBuilder) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    #####:  127:    OpBuilder::InsertionGuard guard(builder);
call    0 never executed
    #####:  128:    builder.setInsertionPointToStart(&bodyBlock);
call    0 never executed
    #####:  129:    builder.create<async::YieldOp>(result.location, ValueRange());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
      452:  130:  } else if (bodyBuilder) {
branch  0 taken 100%
branch  1 taken 0%
      904:  131:    OpBuilder::InsertionGuard guard(builder);
call    0 returned 100%
      452:  132:    builder.setInsertionPointToStart(&bodyBlock);
call    0 returned 100%
      452:  133:    bodyBuilder(builder, result.location, bodyBlock.getArguments());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  134:  }
      452:  135:}
        -:  136:
function _ZN4mlir5async9ExecuteOp5printERNS_12OpAsmPrinterE called 868 returned 100% blocks executed 47%
      868:  137:void ExecuteOp::print(OpAsmPrinter &p) {
        -:  138:  // [%tokens,...]
      868:  139:  if (!getDependencies().empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  140:    p << " [" << getDependencies() << "]";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  141:
        -:  142:  // (%value as %unwrapped: !async.value<!arg.type>, ...)
      868:  143:  if (!getBodyOperands().empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  144:    p << " (";
call    0 never executed
    #####:  145:    Block *entry = getBodyRegion().empty() ? nullptr : &getBodyRegion().front();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  146:    llvm::interleaveComma(
call    0 never executed
function _ZZN4mlir5async9ExecuteOp5printERNS_12OpAsmPrinterEENUlNS_5ValueEE_clES4_ called 0 returned 0% blocks executed 0%
    #####:  147:        getBodyOperands(), p, [&, n = 0](Value operand) mutable {
call    0 never executed
    #####:  148:          Value argument = entry ? entry->getArgument(n++) : Value();
branch  0 never executed
branch  1 never executed
    #####:  149:          p << operand << " as " << argument << ": " << operand.getType();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  150:        });
    #####:  151:    p << ")";
call    0 never executed
        -:  152:  }
        -:  153:
        -:  154:  // -> (!async.value<!return.type>, ...)
     1736:  155:  p.printOptionalArrowTypeList(llvm::drop_begin(getResultTypes()));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      868:  156:  p.printOptionalAttrDictWithKeyword((*this)->getAttrs(),
call    0 returned 100%
      868:  157:                                     {kOperandSegmentSizesAttr});
call    0 returned 100%
      868:  158:  p << ' ';
call    0 returned 100%
      868:  159:  p.printRegion(getBodyRegion(), /*printEntryBlockArgs=*/false);
call    0 returned 100%
call    1 returned 100%
      868:  160:}
        -:  161:
function _ZN4mlir5async9ExecuteOp5parseERNS_11OpAsmParserERNS_14OperationStateE called 0 returned 0% blocks executed 0%
    #####:  162:ParseResult ExecuteOp::parse(OpAsmParser &parser, OperationState &result) {
    #####:  163:  MLIRContext *ctx = result.getContext();
call    0 never executed
        -:  164:
        -:  165:  // Sizes of parsed variadic operands, will be updated below after parsing.
    #####:  166:  int32_t numDependencies = 0;
        -:  167:
    #####:  168:  auto tokenTy = TokenType::get(ctx);
call    0 never executed
        -:  169:
        -:  170:  // Parse dependency tokens.
    #####:  171:  if (succeeded(parser.parseOptionalLSquare())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  172:    SmallVector<OpAsmParser::UnresolvedOperand, 4> tokenArgs;
call    0 never executed
    #####:  173:    if (parser.parseOperandList(tokenArgs) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  174:        parser.resolveOperands(tokenArgs, tokenTy, result.operands) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  175:        parser.parseRSquare())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:      return failure();
branch  0 never executed
branch  1 never executed
        -:  177:
    #####:  178:    numDependencies = tokenArgs.size();
branch  0 never executed
branch  1 never executed
        -:  179:  }
        -:  180:
        -:  181:  // Parse async value operands (%value as %unwrapped : !async.value<!type>).
    #####:  182:  SmallVector<OpAsmParser::UnresolvedOperand, 4> valueArgs;
call    0 never executed
    #####:  183:  SmallVector<OpAsmParser::Argument, 4> unwrappedArgs;
branch  0 never executed
branch  1 never executed
    #####:  184:  SmallVector<Type, 4> valueTypes;
branch  0 never executed
branch  1 never executed
        -:  185:
        -:  186:  // Parse a single instance of `%value as %unwrapped : !async.value<!type>`.
function _ZZN4mlir5async9ExecuteOp5parseERNS_11OpAsmParserERNS_14OperationStateEENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  187:  auto parseAsyncValueArg = [&]() -> ParseResult {
    #####:  188:    if (parser.parseOperand(valueArgs.emplace_back()) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  189:        parser.parseKeyword("as") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  190:        parser.parseArgument(unwrappedArgs.emplace_back()) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  191:        parser.parseColonType(valueTypes.emplace_back()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  192:      return failure();
        -:  193:
    #####:  194:    auto valueTy = valueTypes.back().dyn_cast<ValueType>();
call    0 never executed
call    1 never executed
    #####:  195:    unwrappedArgs.back().type = valueTy ? valueTy.getValueType() : Type();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  196:    return success();
    #####:  197:  };
        -:  198:
    #####:  199:  auto argsLoc = parser.getCurrentLocation();
call    0 never executed
    #####:  200:  if (parser.parseCommaSeparatedList(OpAsmParser::Delimiter::OptionalParen,
    #####:  201:                                     parseAsyncValueArg) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  202:      parser.resolveOperands(valueArgs, valueTypes, argsLoc, result.operands))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  203:    return failure();
        -:  204:
    #####:  205:  int32_t numOperands = valueArgs.size();
call    0 never executed
        -:  206:
        -:  207:  // Add derived `operand_segment_sizes` attribute based on parsed operands.
    #####:  208:  auto operandSegmentSizes =
    #####:  209:      parser.getBuilder().getDenseI32ArrayAttr({numDependencies, numOperands});
call    0 never executed
call    1 never executed
    #####:  210:  result.addAttribute(kOperandSegmentSizesAttr, operandSegmentSizes);
call    0 never executed
        -:  211:
        -:  212:  // Parse the types of results returned from the async execute op.
    #####:  213:  SmallVector<Type, 4> resultTypes;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  214:  NamedAttrList attrs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  215:  if (parser.parseOptionalArrowTypeList(resultTypes) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  216:      // Async execute first result is always a completion token.
    #####:  217:      parser.addTypeToList(tokenTy, result.types) ||
call    0 never executed
call    1 never executed
    #####:  218:      parser.addTypesToList(resultTypes, result.types) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  219:      // Parse operation attributes.
    #####:  220:      parser.parseOptionalAttrDictWithKeyword(attrs))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  221:    return failure();
        -:  222:
    #####:  223:  result.addAttributes(attrs);
call    0 never executed
call    1 never executed
        -:  224:
        -:  225:  // Parse asynchronous region.
    #####:  226:  Region *body = result.addRegion();
call    0 never executed
    #####:  227:  return parser.parseRegion(*body, /*arguments=*/unwrappedArgs);
call    0 never executed
        -:  228:}
        -:  229:
function _ZN4mlir5async9ExecuteOp13verifyRegionsEv called 1389 returned 100% blocks executed 58%
     1389:  230:LogicalResult ExecuteOp::verifyRegions() {
        -:  231:  // Unwrap async.execute value operands types.
    1389*:  232:  auto unwrappedTypes = llvm::map_range(getBodyOperands(), [](Value operand) {
call    0 returned 100%
    #####:  233:    return operand.getType().cast<ValueType>().getValueType();
call    0 never executed
     1385:  234:  });
call    0 returned 100%
        -:  235:
        -:  236:  // Verify that unwrapped argument types matches the body region arguments.
     1385:  237:  if (getBodyRegion().getArgumentTypes() != unwrappedTypes)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  238:    return emitOpError("async body region argument types do not match the "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  239:                       "execute operation arguments types");
call    0 never executed
        -:  240:
     1384:  241:  return success();
        -:  242:}
        -:  243:
        -:  244://===----------------------------------------------------------------------===//
        -:  245:/// CreateGroupOp
        -:  246://===----------------------------------------------------------------------===//
        -:  247:
function _ZN4mlir5async13CreateGroupOp12canonicalizeES1_RNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  248:LogicalResult CreateGroupOp::canonicalize(CreateGroupOp op,
        -:  249:                                          PatternRewriter &rewriter) {
        -:  250:  // Find all `await_all` users of the group.
    #####:  251:  llvm::SmallVector<AwaitAllOp> awaitAllUsers;
call    0 never executed
        -:  252:
function _ZZN4mlir5async13CreateGroupOp12canonicalizeES1_RNS_15PatternRewriterEENKUlPNS_9OperationEE_clES5_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  253:  auto isAwaitAll = [&](Operation *op) -> bool {
    #####:  254:    if (AwaitAllOp awaitAll = dyn_cast<AwaitAllOp>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  255:      awaitAllUsers.push_back(awaitAll);
call    0 never executed
    #####:  256:      return true;
        -:  257:    }
    #####:  258:    return false;
    #####:  259:  };
        -:  260:
        -:  261:  // Check if all users of the group are `await_all` operations.
    #####:  262:  if (!llvm::all_of(op->getUsers(), isAwaitAll))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  263:    return failure();
        -:  264:
        -:  265:  // If group is only awaited without adding anything to it, we can safely erase
        -:  266:  // the create operation and all users.
    #####:  267:  for (AwaitAllOp awaitAll : awaitAllUsers)
branch  0 never executed
branch  1 never executed
    #####:  268:    rewriter.eraseOp(awaitAll);
call    0 never executed
    #####:  269:  rewriter.eraseOp(op);
call    0 never executed
        -:  270:
    #####:  271:  return success();
branch  0 never executed
branch  1 never executed
        -:  272:}
        -:  273:
        -:  274://===----------------------------------------------------------------------===//
        -:  275:/// AwaitOp
        -:  276://===----------------------------------------------------------------------===//
        -:  277:
function _ZN4mlir5async7AwaitOp5buildERNS_9OpBuilderERNS_14OperationStateENS_5ValueEN4llvm8ArrayRefINS_14NamedAttributeEEE called 0 returned 0% blocks executed 0%
    #####:  278:void AwaitOp::build(OpBuilder &builder, OperationState &result, Value operand,
        -:  279:                    ArrayRef<NamedAttribute> attrs) {
    #####:  280:  result.addOperands({operand});
call    0 never executed
call    1 never executed
    #####:  281:  result.attributes.append(attrs.begin(), attrs.end());
call    0 never executed
        -:  282:
        -:  283:  // Add unwrapped async.value type to the returned values types.
    #####:  284:  if (auto valueType = operand.getType().dyn_cast<ValueType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  285:    result.addTypes(valueType.getValueType());
call    0 never executed
    #####:  286:}
        -:  287:
function _ZL20parseAwaitResultTypeRN4mlir11OpAsmParserERNS_4TypeES3_ called 0 returned 0% blocks executed 0%
    #####:  288:static ParseResult parseAwaitResultType(OpAsmParser &parser, Type &operandType,
        -:  289:                                        Type &resultType) {
    #####:  290:  if (parser.parseType(operandType))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  291:    return failure();
        -:  292:
        -:  293:  // Add unwrapped async.value type to the returned values types.
    #####:  294:  if (auto valueType = operandType.dyn_cast<ValueType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  295:    resultType = valueType.getValueType();
        -:  296:
    #####:  297:  return success();
        -:  298:}
        -:  299:
    #####:  300:static void printAwaitResultType(OpAsmPrinter &p, Operation *op,
        -:  301:                                 Type operandType, Type resultType) {
    #####:  302:  p << operandType;
call    0 never executed
call    1 never executed
        -:  303:}
        -:  304:
function _ZN4mlir5async7AwaitOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:  305:LogicalResult AwaitOp::verify() {
    #####:  306:  Type argType = getOperand().getType();
call    0 never executed
call    1 never executed
        -:  307:
        -:  308:  // Awaiting on a token does not have any results.
    #####:  309:  if (argType.isa<TokenType>() && !getResultTypes().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  310:    return emitOpError("awaiting on a token must have empty result");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  311:
        -:  312:  // Awaiting on a value unwraps the async value type.
    #####:  313:  if (auto value = argType.dyn_cast<ValueType>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  314:    if (*getResultType() != value.getValueType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  315:      return emitOpError() << "result type " << *getResultType()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  316:                           << " does not match async value type "
call    0 never executed
    #####:  317:                           << value.getValueType();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  318:  }
        -:  319:
    #####:  320:  return success();
        -:  321:}
        -:  322:
        -:  323://===----------------------------------------------------------------------===//
        -:  324:// TableGen'd op method definitions
        -:  325://===----------------------------------------------------------------------===//
        -:  326:
        -:  327:#define GET_OP_CLASSES
        -:  328:#include "mlir/Dialect/Async/IR/AsyncOps.cpp.inc"
        -:  329:
        -:  330://===----------------------------------------------------------------------===//
        -:  331:// TableGen'd type method definitions
        -:  332://===----------------------------------------------------------------------===//
        -:  333:
        -:  334:#define GET_TYPEDEF_CLASSES
        -:  335:#include "mlir/Dialect/Async/IR/AsyncOpsTypes.cpp.inc"
        -:  336:
function _ZNK4mlir5async9ValueType5printERNS_10AsmPrinterE called 0 returned 0% blocks executed 0%
    #####:  337:void ValueType::print(AsmPrinter &printer) const {
    #####:  338:  printer << "<";
call    0 never executed
    #####:  339:  printer.printType(getValueType());
call    0 never executed
    #####:  340:  printer << '>';
call    0 never executed
    #####:  341:}
        -:  342:
function _ZN4mlir5async9ValueType5parseERNS_9AsmParserE called 0 returned 0% blocks executed 0%
    #####:  343:Type ValueType::parse(mlir::AsmParser &parser) {
    #####:  344:  Type ty;
    #####:  345:  if (parser.parseLess() || parser.parseType(ty) || parser.parseGreater()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  346:    parser.emitError(parser.getNameLoc(), "failed to parse async value type");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  347:    return Type();
        -:  348:  }
    #####:  349:  return ValueType::get(ty);
call    0 never executed
        -:  350:}
