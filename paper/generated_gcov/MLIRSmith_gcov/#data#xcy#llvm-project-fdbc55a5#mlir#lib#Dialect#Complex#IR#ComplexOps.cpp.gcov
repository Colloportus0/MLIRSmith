        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Complex/IR/ComplexOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Complex/IR/CMakeFiles/obj.MLIRComplexDialect.dir/ComplexOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Complex/IR/CMakeFiles/obj.MLIRComplexDialect.dir/ComplexOps.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- ComplexOps.cpp - MLIR Complex Operations ---------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Complex/IR/Complex.h"
        -:   10:#include "mlir/IR/Builders.h"
        -:   11:#include "mlir/IR/Matchers.h"
        -:   12:
        -:   13:using namespace mlir;
        -:   14:using namespace mlir::complex;
        -:   15:
        -:   16://===----------------------------------------------------------------------===//
        -:   17:// ConstantOp
        -:   18://===----------------------------------------------------------------------===//
        -:   19:
function _ZN4mlir7complex10ConstantOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:   20:OpFoldResult ConstantOp::fold(ArrayRef<Attribute> operands) {
    #####:   21:  assert(operands.empty() && "constant has no operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   22:  return getValue();
call    0 never executed
call    1 never executed
        -:   23:}
        -:   24:
function _ZN4mlir7complex10ConstantOp17getAsmResultNamesEN4llvm12function_refIFvNS_5ValueENS2_9StringRefEEEE called 0 returned 0% blocks executed 0%
    #####:   25:void ConstantOp::getAsmResultNames(
        -:   26:    function_ref<void(Value, StringRef)> setNameFn) {
    #####:   27:  setNameFn(getResult(), "cst");
call    0 never executed
    #####:   28:}
        -:   29:
function _ZN4mlir7complex10ConstantOp15isBuildableWithENS_9AttributeENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   30:bool ConstantOp::isBuildableWith(Attribute value, Type type) {
    #####:   31:  if (auto arrAttr = value.dyn_cast<ArrayAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   32:    auto complexTy = type.dyn_cast<ComplexType>();
call    0 never executed
    #####:   33:    if (!complexTy || arrAttr.size() != 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   34:      return false;
    #####:   35:    auto complexEltTy = complexTy.getElementType();
call    0 never executed
    #####:   36:    auto re = arrAttr[0].dyn_cast<FloatAttr>();
call    0 never executed
call    1 never executed
    #####:   37:    auto im = arrAttr[1].dyn_cast<FloatAttr>();
call    0 never executed
call    1 never executed
    #####:   38:    return re && im && re.getType() == complexEltTy &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   39:           im.getType() == complexEltTy;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   40:  }
    #####:   41:  return false;
        -:   42:}
        -:   43:
function _ZN4mlir7complex10ConstantOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   44:LogicalResult ConstantOp::verify() {
    #####:   45:  ArrayAttr arrayAttr = getValue();
call    0 never executed
    #####:   46:  if (arrayAttr.size() != 2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   47:    return emitOpError(
call    0 never executed
call    1 never executed
call    2 never executed
        -:   48:        "requires 'value' to be a complex constant, represented as array of "
    #####:   49:        "two values");
call    0 never executed
        -:   50:  }
        -:   51:
    #####:   52:  auto complexEltTy = getType().getElementType();
call    0 never executed
call    1 never executed
    #####:   53:  auto re = arrayAttr[0].dyn_cast<FloatAttr>();
call    0 never executed
call    1 never executed
    #####:   54:  auto im = arrayAttr[1].dyn_cast<FloatAttr>();
call    0 never executed
call    1 never executed
    #####:   55:  if (!re || !im)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   56:    return emitOpError("requires attribute's elements to be float attributes");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   57:  if (complexEltTy != re.getType() || complexEltTy != im.getType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   58:    return emitOpError()
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   59:           << "requires attribute's element types (" << re.getType() << ", "
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   60:           << im.getType()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   61:           << ") to match the element type of the op's return type ("
call    0 never executed
    #####:   62:           << complexEltTy << ")";
call    0 never executed
call    1 never executed
        -:   63:  }
    #####:   64:  return success();
        -:   65:}
        -:   66:
        -:   67://===----------------------------------------------------------------------===//
        -:   68:// CreateOp
        -:   69://===----------------------------------------------------------------------===//
        -:   70:
function _ZN4mlir7complex8CreateOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:   71:OpFoldResult CreateOp::fold(ArrayRef<Attribute> operands) {
    #####:   72:  assert(operands.size() == 2 && "binary op takes two operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   73:  // Fold complex.create(complex.re(op), complex.im(op)).
    #####:   74:  if (auto reOp = getOperand(0).getDefiningOp<ReOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   75:    if (auto imOp = getOperand(1).getDefiningOp<ImOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   76:      if (reOp.getOperand() == imOp.getOperand()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   77:        return reOp.getOperand();
call    0 never executed
        -:   78:      }
        -:   79:    }
        -:   80:  }
    #####:   81:  return {};
        -:   82:}
        -:   83:
        -:   84://===----------------------------------------------------------------------===//
        -:   85:// ImOp
        -:   86://===----------------------------------------------------------------------===//
        -:   87:
function _ZN4mlir7complex4ImOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:   88:OpFoldResult ImOp::fold(ArrayRef<Attribute> operands) {
    #####:   89:  assert(operands.size() == 1 && "unary op takes 1 operand");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   90:  ArrayAttr arrayAttr = operands[0].dyn_cast_or_null<ArrayAttr>();
branch  0 never executed
branch  1 never executed
    #####:   91:  if (arrayAttr && arrayAttr.size() == 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   92:    return arrayAttr[1];
call    0 never executed
call    1 never executed
    #####:   93:  if (auto createOp = getOperand().getDefiningOp<CreateOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   94:    return createOp.getOperand(1);
call    0 never executed
call    1 never executed
    #####:   95:  return {};
        -:   96:}
        -:   97:
        -:   98://===----------------------------------------------------------------------===//
        -:   99:// ReOp
        -:  100://===----------------------------------------------------------------------===//
        -:  101:
function _ZN4mlir7complex4ReOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  102:OpFoldResult ReOp::fold(ArrayRef<Attribute> operands) {
    #####:  103:  assert(operands.size() == 1 && "unary op takes 1 operand");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  104:  ArrayAttr arrayAttr = operands[0].dyn_cast_or_null<ArrayAttr>();
branch  0 never executed
branch  1 never executed
    #####:  105:  if (arrayAttr && arrayAttr.size() == 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  106:    return arrayAttr[0];
call    0 never executed
call    1 never executed
    #####:  107:  if (auto createOp = getOperand().getDefiningOp<CreateOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  108:    return createOp.getOperand(0);
call    0 never executed
call    1 never executed
    #####:  109:  return {};
        -:  110:}
        -:  111:
        -:  112://===----------------------------------------------------------------------===//
        -:  113:// AddOp
        -:  114://===----------------------------------------------------------------------===//
        -:  115:
function _ZN4mlir7complex5AddOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  116:OpFoldResult AddOp::fold(ArrayRef<Attribute> operands) {
    #####:  117:  assert(operands.size() == 2 && "binary op takes 2 operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  118:
        -:  119:  // complex.add(complex.sub(a, b), b) -> a
    #####:  120:  if (auto sub = getLhs().getDefiningOp<SubOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  121:    if (getRhs() == sub.getRhs())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  122:      return sub.getLhs();
call    0 never executed
call    1 never executed
        -:  123:
        -:  124:  // complex.add(b, complex.sub(a, b)) -> a
    #####:  125:  if (auto sub = getRhs().getDefiningOp<SubOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  126:    if (getLhs() == sub.getRhs())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  127:      return sub.getLhs();
call    0 never executed
call    1 never executed
        -:  128:
        -:  129:  // complex.add(a, complex.constant<0.0, 0.0>) -> a
    #####:  130:  if (auto constantOp = getRhs().getDefiningOp<ConstantOp>()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  131:    auto arrayAttr = constantOp.getValue();
call    0 never executed
    #####:  132:    if (arrayAttr[0].cast<FloatAttr>().getValue().isZero() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  133:        arrayAttr[1].cast<FloatAttr>().getValue().isZero()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  134:      return getLhs();
call    0 never executed
call    1 never executed
        -:  135:    }
        -:  136:  }
        -:  137:
    #####:  138:  return {};
        -:  139:}
        -:  140:
        -:  141://===----------------------------------------------------------------------===//
        -:  142:// SubOp
        -:  143://===----------------------------------------------------------------------===//
        -:  144:
function _ZN4mlir7complex5SubOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  145:OpFoldResult SubOp::fold(ArrayRef<Attribute> operands) {
    #####:  146:  assert(operands.size() == 2 && "binary op takes 2 operands");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  147:
        -:  148:  // complex.sub(complex.add(a, b), b) -> a
    #####:  149:  if (auto add = getLhs().getDefiningOp<AddOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  150:    if (getRhs() == add.getRhs())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  151:      return add.getLhs();
call    0 never executed
call    1 never executed
        -:  152:
    #####:  153:  return {};
        -:  154:}
        -:  155:
        -:  156://===----------------------------------------------------------------------===//
        -:  157:// NegOp
        -:  158://===----------------------------------------------------------------------===//
        -:  159:
function _ZN4mlir7complex5NegOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  160:OpFoldResult NegOp::fold(ArrayRef<Attribute> operands) {
    #####:  161:  assert(operands.size() == 1 && "unary op takes 1 operand");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  162:
        -:  163:  // complex.neg(complex.neg(a)) -> a
    #####:  164:  if (auto negOp = getOperand().getDefiningOp<NegOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  165:    return negOp.getOperand();
call    0 never executed
call    1 never executed
        -:  166:
    #####:  167:  return {};
        -:  168:}
        -:  169:
        -:  170://===----------------------------------------------------------------------===//
        -:  171:// LogOp
        -:  172://===----------------------------------------------------------------------===//
        -:  173:
function _ZN4mlir7complex5LogOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  174:OpFoldResult LogOp::fold(ArrayRef<Attribute> operands) {
    #####:  175:  assert(operands.size() == 1 && "unary op takes 1 operand");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  176:
        -:  177:  // complex.log(complex.exp(a)) -> a
    #####:  178:  if (auto expOp = getOperand().getDefiningOp<ExpOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  179:    return expOp.getOperand();
call    0 never executed
call    1 never executed
        -:  180:
    #####:  181:  return {};
        -:  182:}
        -:  183:
        -:  184://===----------------------------------------------------------------------===//
        -:  185:// ExpOp
        -:  186://===----------------------------------------------------------------------===//
        -:  187:
function _ZN4mlir7complex5ExpOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  188:OpFoldResult ExpOp::fold(ArrayRef<Attribute> operands) {
    #####:  189:  assert(operands.size() == 1 && "unary op takes 1 operand");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  190:
        -:  191:  // complex.exp(complex.log(a)) -> a
    #####:  192:  if (auto logOp = getOperand().getDefiningOp<LogOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  193:    return logOp.getOperand();
call    0 never executed
call    1 never executed
        -:  194:
    #####:  195:  return {};
        -:  196:}
        -:  197:
        -:  198://===----------------------------------------------------------------------===//
        -:  199:// ConjOp
        -:  200://===----------------------------------------------------------------------===//
        -:  201:
function _ZN4mlir7complex6ConjOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  202:OpFoldResult ConjOp::fold(ArrayRef<Attribute> operands) {
    #####:  203:  assert(operands.size() == 1 && "unary op takes 1 operand");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  204:
        -:  205:  // complex.conj(complex.conj(a)) -> a
    #####:  206:  if (auto conjOp = getOperand().getDefiningOp<ConjOp>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:    return conjOp.getOperand();
call    0 never executed
call    1 never executed
        -:  208:
    #####:  209:  return {};
        -:  210:}
        -:  211:
        -:  212://===----------------------------------------------------------------------===//
        -:  213:// TableGen'd op method definitions
        -:  214://===----------------------------------------------------------------------===//
        -:  215:
        -:  216:#define GET_OP_CLASSES
        -:  217:#include "mlir/Dialect/Complex/IR/ComplexOps.cpp.inc"
