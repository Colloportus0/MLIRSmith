        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/SPIRV/TestEntryPointAbi.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/SPIRV/CMakeFiles/MLIRSPIRVTestPasses.dir/TestEntryPointAbi.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/SPIRV/CMakeFiles/MLIRSPIRVTestPasses.dir/TestEntryPointAbi.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestAvailability.cpp - Test pass for setting Entry point ABI info --===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass that sets the spirv.entry_point_abi attribute on
        -:   10:// functions that are to be lowered as entry point functions.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   15:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/TargetAndABI.h"
        -:   17:#include "mlir/Pass/Pass.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:namespace {
        -:   22:/// Pass to set the spirv.entry_point_abi
        -:   23:struct TestSpirvEntryPointABIPass
        -:   24:    : public PassWrapper<TestSpirvEntryPointABIPass,
        -:   25:                         OperationPass<gpu::GPUModuleOp>> {
function _ZN12_GLOBAL__N_126TestSpirvEntryPointABIPass13resolveTypeIDEv called 144416 returned 100% blocks executed 100%
   144416:   26:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestSpirvEntryPointABIPass)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   27:
function _ZNK12_GLOBAL__N_126TestSpirvEntryPointABIPass11getArgumentEv called 116169 returned 100% blocks executed 100%
   116169:   28:  StringRef getArgument() const final { return "test-spirv-entry-point-abi"; }
function _ZNK12_GLOBAL__N_126TestSpirvEntryPointABIPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   29:  StringRef getDescription() const final {
   116161:   30:    return "Set the spirv.entry_point_abi attribute on GPU kernel function "
        -:   31:           "within the "
   116161:   32:           "module, intended for testing only";
        -:   33:  }
function _ZNK12_GLOBAL__N_126TestSpirvEntryPointABIPass20getDependentDialectsERN4mlir15DialectRegistryE called 535 returned 100% blocks executed 100%
      535:   34:  void getDependentDialects(DialectRegistry &registry) const override {
      535:   35:    registry.insert<spirv::SPIRVDialect>();
call    0 returned 100%
      535:   36:  }
function _ZN12_GLOBAL__N_126TestSpirvEntryPointABIPassC2Ev called 116696 returned 100% blocks executed 100%
   116696:   37:  TestSpirvEntryPointABIPass() = default;
call    0 returned 100%
call    1 returned 100%
        -:   38:  TestSpirvEntryPointABIPass(const TestSpirvEntryPointABIPass &) {}
        -:   39:  void runOnOperation() override;
        -:   40:
        -:   41:private:
        -:   42:  Pass::ListOption<int32_t> workgroupSize{
        -:   43:      *this, "workgroup-size",
        -:   44:      llvm::cl::desc(
        -:   45:          "Workgroup size to use for all gpu.func kernels in the module, "
        -:   46:          "specified with x-dimension first, y-dimension next and z-dimension "
        -:   47:          "last. Unspecified dimensions will be set to 1")};
        -:   48:};
        -:   49:} // namespace
        -:   50:
function _ZN12_GLOBAL__N_126TestSpirvEntryPointABIPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   51:void TestSpirvEntryPointABIPass::runOnOperation() {
    #####:   52:  gpu::GPUModuleOp gpuModule = getOperation();
call    0 never executed
    #####:   53:  MLIRContext *context = &getContext();
call    0 never executed
    #####:   54:  StringRef attrName = spirv::getEntryPointABIAttrName();
call    0 never executed
    #####:   55:  for (gpu::GPUFuncOp gpuFunc : gpuModule.getOps<gpu::GPUFuncOp>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   56:    if (!gpu::GPUDialect::isKernel(gpuFunc) || gpuFunc->getAttr(attrName))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   57:      continue;
    #####:   58:    SmallVector<int32_t, 3> workgroupSizeVec(workgroupSize.begin(),
    #####:   59:                                             workgroupSize.end());
call    0 never executed
    #####:   60:    workgroupSizeVec.resize(3, 1);
call    0 never executed
    #####:   61:    gpuFunc->setAttr(attrName,
call    0 never executed
call    1 never executed
    #####:   62:                     spirv::getEntryPointABIAttr(workgroupSizeVec, context));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   63:  }
    #####:   64:}
        -:   65:
        -:   66:namespace mlir {
function _ZN4mlir34registerTestSpirvEntryPointABIPassEv called 116161 returned 100% blocks executed 100%
   116161:   67:void registerTestSpirvEntryPointABIPass() {
   116161:   68:  PassRegistration<TestSpirvEntryPointABIPass>();
call    0 returned 100%
   116161:   69:}
        -:   70:} // namespace mlir
