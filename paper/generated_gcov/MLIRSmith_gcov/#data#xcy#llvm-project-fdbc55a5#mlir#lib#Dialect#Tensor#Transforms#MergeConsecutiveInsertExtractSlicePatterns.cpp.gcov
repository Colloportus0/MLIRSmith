        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Tensor/Transforms/MergeConsecutiveInsertExtractSlicePatterns.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Tensor/Transforms/CMakeFiles/obj.MLIRTensorTransforms.dir/MergeConsecutiveInsertExtractSlicePatterns.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Tensor/Transforms/CMakeFiles/obj.MLIRTensorTransforms.dir/MergeConsecutiveInsertExtractSlicePatterns.cpp.gcda
        -:    0:Runs:116171
        -:    1://===- MergeConsecutiveInsertExtractSlicePatterns.cpp ---------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Affine/ViewLikeInterfaceUtils.h"
        -:   10:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   11:#include "mlir/Dialect/Tensor/Transforms/Transforms.h"
        -:   12:#include "mlir/IR/BuiltinTypes.h"
        -:   13:#include "mlir/IR/OpDefinition.h"
        -:   14:#include "mlir/IR/PatternMatch.h"
        -:   15:
        -:   16:using namespace mlir;
        -:   17:using namespace mlir::tensor;
        -:   18:
        -:   19:namespace {
        -:   20:/// Merges consecutive tensor.extract_slice ops into one.
        -:   21:struct MergeConsecutiveExtractSlice : public OpRewritePattern<ExtractSliceOp> {
        -:   22:  using OpRewritePattern::OpRewritePattern;
        -:   23:
function _ZNK12_GLOBAL__N_128MergeConsecutiveExtractSlice15matchAndRewriteEN4mlir6tensor14ExtractSliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   24:  LogicalResult matchAndRewrite(ExtractSliceOp nextOp,
        -:   25:                                PatternRewriter &rewriter) const override {
    #####:   26:    auto prevOp = nextOp.getSource().getDefiningOp<ExtractSliceOp>();
call    0 never executed
call    1 never executed
    #####:   27:    if (!prevOp)
branch  0 never executed
branch  1 never executed
    #####:   28:      return failure();
        -:   29:
    #####:   30:    SmallVector<OpFoldResult> newOffsets, newSizes, newStrides;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   31:    if (failed(mergeOffsetsSizesAndStrides(rewriter, nextOp.getLoc(), prevOp,
call    0 never executed
call    1 never executed
    #####:   32:                                           nextOp, prevOp.getDroppedDims(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   33:                                           newOffsets, newSizes, newStrides)))
    #####:   34:      return failure();
        -:   35:
    #####:   36:    rewriter.replaceOpWithNewOp<ExtractSliceOp>(nextOp, nextOp.getType(),
call    0 never executed
    #####:   37:                                                prevOp.getSource(), newOffsets,
    #####:   38:                                                newSizes, newStrides);
call    0 never executed
call    1 never executed
    #####:   39:    return success();
branch  0 never executed
branch  1 never executed
        -:   40:  }
        -:   41:};
        -:   42:
        -:   43:/// Merges consecutive tensor.insert_slice ops into one.
        -:   44:struct MergeConsecutiveInsertSlice : public OpRewritePattern<InsertSliceOp> {
        -:   45:  using OpRewritePattern::OpRewritePattern;
        -:   46:
function _ZNK12_GLOBAL__N_127MergeConsecutiveInsertSlice15matchAndRewriteEN4mlir6tensor13InsertSliceOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   47:  LogicalResult matchAndRewrite(InsertSliceOp nextOp,
        -:   48:                                PatternRewriter &rewriter) const override {
    #####:   49:    auto prevOp = nextOp.getSource().getDefiningOp<InsertSliceOp>();
call    0 never executed
call    1 never executed
    #####:   50:    if (!prevOp)
branch  0 never executed
branch  1 never executed
    #####:   51:      return failure();
        -:   52:
    #####:   53:    if (!prevOp.hasUnitStride() || !nextOp.hasUnitStride())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   54:      return failure();
        -:   55:
        -:   56:    // The first insert_slice op should be rank reducing to make sure we cover
        -:   57:    // the full source tensor to be inserted in the second insert_slice op.
    #####:   58:    SliceVerificationResult result =
    #####:   59:        isRankReducedType(prevOp.getDestType(), prevOp.getSourceType());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   60:    if (result != SliceVerificationResult::Success)
branch  0 never executed
branch  1 never executed
    #####:   61:      return failure();
        -:   62:
        -:   63:    // Dynamic dimensions can pass rank reducing check in the above, e.g,
        -:   64:    // inserting <?xf32> into <1x?x1xf32>. For such cases we cannot be certain
        -:   65:    // the dynamic size covers the full tensor.
    #####:   66:    if (!prevOp.getSourceType().hasStaticShape() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   67:        !prevOp.getDestType().hasStaticShape())
call    0 never executed
    #####:   68:      return failure();
        -:   69:
    #####:   70:    rewriter.replaceOpWithNewOp<InsertSliceOp>(
    #####:   71:        nextOp, prevOp.getSource(), nextOp.getDest(), nextOp.getMixedOffsets(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   72:        nextOp.getMixedSizes(), nextOp.getMixedStrides());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   73:    return success();
        -:   74:  }
        -:   75:};
        -:   76:} // namespace
        -:   77:
function _ZN4mlir6tensor50populateMergeConsecutiveInsertExtractSlicePatternsERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
    #####:   78:void mlir::tensor::populateMergeConsecutiveInsertExtractSlicePatterns(
        -:   79:    RewritePatternSet &patterns) {
    #####:   80:  patterns.add<MergeConsecutiveExtractSlice, MergeConsecutiveInsertSlice>(
    #####:   81:      patterns.getContext());
call    0 never executed
    #####:   82:}
