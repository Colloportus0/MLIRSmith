        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Dialect/Bufferization/Transforms/BufferUtils.h
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferDeallocation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/BufferDeallocation.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- BufferUtils.h - Buffer optimization utilities ------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file provides utilities for passes optimizing code that has already
        -:   10:// been converted to buffers.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#ifndef MLIR_DIALECT_BUFFERIZATION_TRANSFORMS_BUFFERUTILS_H
        -:   15:#define MLIR_DIALECT_BUFFERIZATION_TRANSFORMS_BUFFERUTILS_H
        -:   16:
        -:   17:#include "mlir/Analysis/Liveness.h"
        -:   18:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   19:#include "mlir/Dialect/Bufferization/Transforms/BufferViewFlowAnalysis.h"
        -:   20:#include "mlir/IR/Builders.h"
        -:   21:#include "mlir/IR/BuiltinOps.h"
        -:   22:#include "mlir/IR/Dominance.h"
        -:   23:#include "mlir/IR/Operation.h"
        -:   24:#include "mlir/Transforms/DialectConversion.h"
        -:   25:
        -:   26:namespace mlir {
        -:   27:namespace memref {
        -:   28:class GlobalOp;
        -:   29:} // namespace memref
        -:   30:
        -:   31:namespace bufferization {
        -:   32:
        -:   33:/// A simple analysis that detects allocation operations.
        -:   34:class BufferPlacementAllocs {
        -:   35:public:
        -:   36:  /// Represents a tuple of allocValue and deallocOperation.
        -:   37:  using AllocEntry = std::tuple<Value, Operation *>;
        -:   38:
        -:   39:  /// Represents a list containing all alloc entries.
        -:   40:  using AllocEntryList = SmallVector<AllocEntry, 8>;
        -:   41:
        -:   42:  /// Get the start operation to place the given alloc value within the
        -:   43:  /// specified placement block.
        -:   44:  static Operation *getStartOperation(Value allocValue, Block *placementBlock,
        -:   45:                                      const Liveness &liveness);
        -:   46:
        -:   47:public:
        -:   48:  /// Initializes the internal list by discovering all supported allocation
        -:   49:  /// nodes.
        -:   50:  BufferPlacementAllocs(Operation *op);
        -:   51:
        -:   52:  /// Returns the begin iterator to iterate over all allocations.
        -:   53:  AllocEntryList::const_iterator begin() const { return allocs.begin(); }
        -:   54:
        -:   55:  /// Returns the end iterator that can be used in combination with begin.
        -:   56:  AllocEntryList::const_iterator end() const { return allocs.end(); }
        -:   57:
        -:   58:  /// Returns the begin iterator to iterate over all allocations.
     1290:   59:  AllocEntryList::iterator begin() { return allocs.begin(); }
        -:   60:
        -:   61:  /// Returns the end iterator that can be used in combination with begin.
     1290:   62:  AllocEntryList::iterator end() { return allocs.end(); }
        -:   63:
        -:   64:  /// Registers a new allocation entry.
      797:   65:  void registerAlloc(const AllocEntry &entry) { allocs.push_back(entry); }
call    0 returned 100%
        -:   66:
        -:   67:private:
        -:   68:  /// Searches for and registers all supported allocation entries.
        -:   69:  void build(Operation *op);
        -:   70:
        -:   71:private:
        -:   72:  /// Maps allocation nodes to their associated blocks.
        -:   73:  AllocEntryList allocs;
        -:   74:};
        -:   75:
        -:   76:/// The base class for all BufferPlacement transformations.
        -:   77:class BufferPlacementTransformationBase {
        -:   78:public:
        -:   79:  using ValueSetT = BufferViewFlowAnalysis::ValueSetT;
        -:   80:
        -:   81:  /// Finds a common dominator for the given value while taking the positions
        -:   82:  /// of the values in the value set into account. It supports dominator and
        -:   83:  /// post-dominator analyses via template arguments.
        -:   84:  template <typename DominatorT>
function _ZN4mlir13bufferization33BufferPlacementTransformationBase19findCommonDominatorINS_17PostDominanceInfoEEEPNS_5BlockENS_5ValueERKN4llvm11SmallPtrSetIS6_Lj16EEERKT_ called 34724 returned 100% blocks executed 100%
    34724:   85:  static Block *findCommonDominator(Value value, const ValueSetT &values,
        -:   86:                                    const DominatorT &doms) {
        -:   87:    // Start with the current block the value is defined in.
    34724:   88:    Block *dom = value.getParentBlock();
call    0 returned 100%
        -:   89:    // Iterate over all aliases and their uses to find a safe placement block
        -:   90:    // according to the given dominator information.
    73666:   91:    for (Value childValue : values) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
call    4 returned 100%
   137962:   92:      for (Operation *user : childValue.getUsers()) {
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:   93:        // Move upwards in the dominator tree to find an appropriate
        -:   94:        // dominator block that takes the current use into account.
    99020:   95:        dom = doms.findNearestCommonDominator(dom, user->getBlock());
call    0 returned 100%
        -:   96:      }
        -:   97:      // Take values without any users into account.
    38942:   98:      dom = doms.findNearestCommonDominator(dom, childValue.getParentBlock());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   99:    }
    34724:  100:    return dom;
        -:  101:  }
        -:  102:
        -:  103:  /// Returns true if the given operation represents a loop by testing whether
        -:  104:  /// it implements the `LoopLikeOpInterface` or the `RegionBranchOpInterface`.
        -:  105:  /// In the case of a `RegionBranchOpInterface`, it checks all region-based
        -:  106:  /// control-flow edges for cycles.
        -:  107:  static bool isLoop(Operation *op);
        -:  108:
        -:  109:  /// Constructs a new operation base using the given root operation.
        -:  110:  BufferPlacementTransformationBase(Operation *op);
        -:  111:
        -:  112:protected:
        -:  113:  /// Alias information that can be updated during the insertion of copies.
        -:  114:  BufferViewFlowAnalysis aliases;
        -:  115:
        -:  116:  /// Stores all internally managed allocations.
        -:  117:  BufferPlacementAllocs allocs;
        -:  118:
        -:  119:  /// The underlying liveness analysis to compute fine grained information
        -:  120:  /// about alloc and dealloc positions.
        -:  121:  Liveness liveness;
        -:  122:};
        -:  123:
        -:  124:// Create a global op for the given tensor-valued constant in the program.
        -:  125:// Globals are created lazily at the top of the enclosing ModuleOp with pretty
        -:  126:// names. Duplicates are avoided.
        -:  127:FailureOr<memref::GlobalOp> getGlobalFor(arith::ConstantOp constantOp,
        -:  128:                                         uint64_t alignment);
        -:  129:
        -:  130:} // namespace bufferization
        -:  131:} // namespace mlir
        -:  132:
        -:  133:#endif // MLIR_DIALECT_BUFFERIZATION_TRANSFORMS_BUFFERUTILS_H
