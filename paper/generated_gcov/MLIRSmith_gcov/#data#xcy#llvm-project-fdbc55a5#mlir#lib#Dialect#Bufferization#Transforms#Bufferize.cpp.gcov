        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Bufferization/Transforms/Bufferize.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/Bufferize.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Bufferization/Transforms/CMakeFiles/obj.MLIRBufferizationTransforms.dir/Bufferize.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- Bufferize.cpp - Bufferization utilities ----------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
        -:   10:
        -:   11:#include "mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h"
        -:   12:#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
        -:   13:#include "mlir/Dialect/Bufferization/Transforms/Bufferize.h"
        -:   14:#include "mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h"
        -:   15:#include "mlir/Dialect/Bufferization/Transforms/OneShotModuleBufferize.h"
        -:   16:#include "mlir/Dialect/Bufferization/Transforms/TensorCopyInsertion.h"
        -:   17:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   18:#include "mlir/Dialect/MemRef/IR/MemRef.h"
        -:   19:#include "mlir/IR/Operation.h"
        -:   20:#include "mlir/Pass/PassManager.h"
        -:   21:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   22:#include "mlir/Transforms/Passes.h"
        -:   23:
        -:   24:namespace mlir {
        -:   25:namespace bufferization {
        -:   26:#define GEN_PASS_DEF_FINALIZINGBUFFERIZE
        -:   27:#define GEN_PASS_DEF_BUFFERIZATIONBUFFERIZE
        -:   28:#define GEN_PASS_DEF_ONESHOTBUFFERIZE
        -:   29:#include "mlir/Dialect/Bufferization/Transforms/Passes.h.inc"
        -:   30:} // namespace bufferization
        -:   31:} // namespace mlir
        -:   32:
        -:   33:#define DEBUG_TYPE "bufferize"
        -:   34:
        -:   35:using namespace mlir;
        -:   36:using namespace mlir::bufferization;
        -:   37:
        -:   38://===----------------------------------------------------------------------===//
        -:   39:// BufferizeTypeConverter
        -:   40://===----------------------------------------------------------------------===//
        -:   41:
function _ZL19materializeToTensorRN4mlir9OpBuilderENS_10TensorTypeENS_10ValueRangeENS_8LocationE called 62 returned 100% blocks executed 78%
       62:   42:static Value materializeToTensor(OpBuilder &builder, TensorType type,
        -:   43:                                 ValueRange inputs, Location loc) {
      62*:   44:  assert(inputs.size() == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      62*:   45:  assert(inputs[0].getType().isa<BaseMemRefType>());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
       62:   46:  return builder.create<bufferization::ToTensorOp>(loc, type, inputs[0]);
call    0 returned 100%
call    1 returned 100%
        -:   47:}
        -:   48:
        -:   49:/// Registers conversions into BufferizeTypeConverter
function _ZN4mlir13bufferization22BufferizeTypeConverterC2Ev called 1651 returned 100% blocks executed 100%
     1651:   50:BufferizeTypeConverter::BufferizeTypeConverter() {
call    0 returned 100%
        -:   51:  // Keep all types unchanged.
    49808:   52:  addConversion([](Type type) { return type; });
call    0 returned 100%
call    1 returned 100%
        -:   53:  // Convert RankedTensorType to MemRefType.
function _ZZN4mlir13bufferization22BufferizeTypeConverterC4EvENKUlNS_16RankedTensorTypeEE0_clES2_.isra.0 called 17633 returned 100% blocks executed 100%
    19281:   54:  addConversion([](RankedTensorType type) -> Type {
call    0 returned 100%
    17633:   55:    return MemRefType::get(type.getShape(), type.getElementType());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   56:  });
        -:   57:  // Convert UnrankedTensorType to UnrankedMemRefType.
function _ZZN4mlir13bufferization22BufferizeTypeConverterC4EvENKUlNS_18UnrankedTensorTypeEE1_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    1647*:   58:  addConversion([](UnrankedTensorType type) -> Type {
call    0 returned 100%
    #####:   59:    return UnrankedMemRefType::get(type.getElementType(), 0);
call    0 never executed
call    1 never executed
        -:   60:  });
     1648:   61:  addArgumentMaterialization(materializeToTensor);
call    0 returned 100%
     1652:   62:  addSourceMaterialization(materializeToTensor);
call    0 returned 100%
function _ZZN4mlir13bufferization22BufferizeTypeConverterC4EvENKUlRNS_9OpBuilderENS_14BaseMemRefTypeENS_10ValueRangeENS_8LocationEE2_clES3_S4_S5_S6_.isra.0 called 111 returned 100% blocks executed 46%
     1652:   63:  addTargetMaterialization([](OpBuilder &builder, BaseMemRefType type,
call    0 returned 100%
        -:   64:                              ValueRange inputs, Location loc) -> Value {
     111*:   65:    assert(inputs.size() == 1 && "expected exactly one input");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   66:
      111:   67:    if (auto inputType = inputs[0].getType().dyn_cast<MemRefType>()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:      // MemRef to MemRef cast.
    #####:   69:      assert(inputType != type && "expected different types");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   70:      // Unranked to ranked and ranked to unranked casts must be explicit.
    #####:   71:      auto rankedDestType = type.dyn_cast<MemRefType>();
call    0 never executed
    #####:   72:      if (!rankedDestType)
branch  0 never executed
branch  1 never executed
    #####:   73:        return nullptr;
    #####:   74:      FailureOr<Value> replacement =
    #####:   75:          castOrReallocMemRefValue(builder, inputs[0], rankedDestType);
call    0 never executed
call    1 never executed
    #####:   76:      if (failed(replacement))
branch  0 never executed
branch  1 never executed
    #####:   77:        return nullptr;
    #####:   78:      return *replacement;
        -:   79:    }
        -:   80:
      111:   81:    if (inputs[0].getType().isa<TensorType>()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   82:      // Tensor to MemRef cast.
      111:   83:      return builder.create<bufferization::ToMemrefOp>(loc, type, inputs[0]);
call    0 returned 100%
call    1 returned 100%
        -:   84:    }
        -:   85:
    #####:   86:    llvm_unreachable("only tensor/memref input types supported");
call    0 never executed
        -:   87:  });
     1651:   88:}
        -:   89:
function _ZN4mlir13bufferization40populateBufferizeMaterializationLegalityERNS_16ConversionTargetE called 421 returned 100% blocks executed 100%
      421:   90:void mlir::bufferization::populateBufferizeMaterializationLegality(
        -:   91:    ConversionTarget &target) {
      421:   92:  target.addLegalOp<bufferization::ToTensorOp, bufferization::ToMemrefOp>();
call    0 returned 100%
      421:   93:}
        -:   94:
        -:   95:namespace {
        -:   96:// In a finalizing bufferize conversion, we know that all tensors have been
        -:   97:// converted to memrefs, thus, this op becomes an identity.
        -:   98:class BufferizeToTensorOp
        -:   99:    : public OpConversionPattern<bufferization::ToTensorOp> {
        -:  100:public:
        -:  101:  using OpConversionPattern::OpConversionPattern;
        -:  102:  LogicalResult
function _ZNK12_GLOBAL__N_119BufferizeToTensorOp15matchAndRewriteEN4mlir13bufferization10ToTensorOpENS2_17ToTensorOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  103:  matchAndRewrite(bufferization::ToTensorOp op, OpAdaptor adaptor,
        -:  104:                  ConversionPatternRewriter &rewriter) const override {
    #####:  105:    rewriter.replaceOp(op, adaptor.getMemref());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  106:    return success();
        -:  107:  }
        -:  108:};
        -:  109:} // namespace
        -:  110:
        -:  111:namespace {
        -:  112:// In a finalizing bufferize conversion, we know that all tensors have been
        -:  113:// converted to memrefs, thus, this op becomes an identity.
        -:  114:class BufferizeToMemrefOp
        -:  115:    : public OpConversionPattern<bufferization::ToMemrefOp> {
        -:  116:public:
        -:  117:  using OpConversionPattern::OpConversionPattern;
        -:  118:  LogicalResult
function _ZNK12_GLOBAL__N_119BufferizeToMemrefOp15matchAndRewriteEN4mlir13bufferization10ToMemrefOpENS2_17ToMemrefOpAdaptorERNS1_25ConversionPatternRewriterE called 0 returned 0% blocks executed 0%
    #####:  119:  matchAndRewrite(bufferization::ToMemrefOp op, OpAdaptor adaptor,
        -:  120:                  ConversionPatternRewriter &rewriter) const override {
    #####:  121:    rewriter.replaceOp(op, adaptor.getTensor());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  122:    return success();
        -:  123:  }
        -:  124:};
        -:  125:} // namespace
        -:  126:
function _ZN4mlir13bufferization50populateEliminateBufferizeMaterializationsPatternsERNS0_22BufferizeTypeConverterERNS_17RewritePatternSetE called 0 returned 0% blocks executed 0%
     456*:  127:void mlir::bufferization::populateEliminateBufferizeMaterializationsPatterns(
        -:  128:    BufferizeTypeConverter &typeConverter, RewritePatternSet &patterns) {
     456*:  129:  patterns.add<BufferizeToTensorOp, BufferizeToMemrefOp>(typeConverter,
    #####:  130:                                                         patterns.getContext());
call    0 never executed
    #####:  131:}
        -:  132:
        -:  133:namespace {
   148006:  134:struct FinalizingBufferizePass
call    0 returned 100%
call    1 returned 100%
        -:  135:    : public bufferization::impl::FinalizingBufferizeBase<
        -:  136:          FinalizingBufferizePass> {
        -:  137:  using FinalizingBufferizeBase<
        -:  138:      FinalizingBufferizePass>::FinalizingBufferizeBase;
        -:  139:
function _ZN12_GLOBAL__N_123FinalizingBufferizePass14runOnOperationEv called 455 returned 100% blocks executed 100%
      455:  140:  void runOnOperation() override {
      455:  141:    auto func = getOperation();
call    0 returned 100%
      456:  142:    auto *context = &getContext();
call    0 returned 100%
        -:  143:
      456:  144:    BufferizeTypeConverter typeConverter;
call    0 returned 100%
      909:  145:    RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      914:  146:    ConversionTarget target(*context);
call    0 returned 100%
call    1 returned 99%
call    2 returned 100%
        -:  147:
      456:  148:    populateEliminateBufferizeMaterializationsPatterns(typeConverter, patterns);
call    0 returned 99%
        -:  149:
        -:  150:    // If all result types are legal, and all block arguments are legal (ensured
        -:  151:    // by func conversion above), then all types in the program are legal.
        -:  152:    //
        -:  153:    // We also check that the operand types are legal to avoid creating invalid
        -:  154:    // IR. For example, this prevents
        -:  155:    // populateEliminateBufferizeMaterializationsPatterns from updating the
        -:  156:    // types of the operands to a return op without updating the enclosing
        -:  157:    // function.
      452:  158:    target.markUnknownOpDynamicallyLegal(
call    0 returned 101%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   863377:  159:        [&](Operation *op) { return typeConverter.isLegal(op); });
call    0 returned 100%
        -:  160:
      457:  161:    if (failed(applyFullConversion(func, target, std::move(patterns))))
call    0 returned 99%
call    1 returned 101%
call    2 returned 100%
branch  3 taken 92% (fallthrough)
branch  4 taken 8%
      421:  162:      signalPassFailure();
call    0 returned 100%
      453:  163:  }
        -:  164:};
        -:  165:
        -:  166:static BufferizationOptions::LayoutMapOption
function _ZN12_GLOBAL__N_1L20parseLayoutMapOptionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 818 returned 100% blocks executed 88%
      818:  167:parseLayoutMapOption(const std::string &s) {
      818:  168:  if (s == "fully-dynamic-layout-map")
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  169:    return BufferizationOptions::LayoutMapOption::FullyDynamicLayoutMap;
      409:  170:  if (s == "identity-layout-map")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  171:    return BufferizationOptions::LayoutMapOption::IdentityLayoutMap;
      409:  172:  if (s == "infer-layout-map")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  173:    return BufferizationOptions::LayoutMapOption::InferLayoutMap;
    #####:  174:  llvm_unreachable("invalid layout map option");
call    0 never executed
        -:  175:}
        -:  176:
        -:  177:static OneShotBufferizationOptions::AnalysisHeuristic
function _ZN12_GLOBAL__N_1L20parseHeuristicOptionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 409 returned 100% blocks executed 50%
      409:  178:parseHeuristicOption(const std::string &s) {
      409:  179:  if (s == "bottom-up")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  180:    return OneShotBufferizationOptions::AnalysisHeuristic::BottomUp;
    #####:  181:  if (s == "top-down")
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  182:    return OneShotBufferizationOptions::AnalysisHeuristic::TopDown;
    #####:  183:  llvm_unreachable("invalid analysisheuristic option");
call    0 never executed
        -:  184:}
        -:  185:
        -:  186:struct OneShotBufferizePass
        -:  187:    : public bufferization::impl::OneShotBufferizeBase<OneShotBufferizePass> {
   116682:  188:  OneShotBufferizePass() = default;
call    0 returned 100%
        -:  189:
function _ZN12_GLOBAL__N_120OneShotBufferizePassC2ERKN4mlir13bufferization27OneShotBufferizationOptionsE called 0 returned 0% blocks executed 0%
    #####:  190:  explicit OneShotBufferizePass(const OneShotBufferizationOptions &options)
    #####:  191:      : options(options) {}
call    0 never executed
call    1 never executed
        -:  192:
function _ZNK12_GLOBAL__N_120OneShotBufferizePass20getDependentDialectsERN4mlir15DialectRegistryE called 525 returned 100% blocks executed 100%
      525:  193:  void getDependentDialects(DialectRegistry &registry) const override {
      525:  194:    registry
call    0 returned 100%
      525:  195:        .insert<bufferization::BufferizationDialect, memref::MemRefDialect>();
      525:  196:    registerAllocationOpInterfaceExternalModels(registry);
call    0 returned 100%
      525:  197:  }
        -:  198:
function _ZN12_GLOBAL__N_120OneShotBufferizePass14runOnOperationEv called 409 returned 100% blocks executed 75%
      409:  199:  void runOnOperation() override {
      412:  200:    OneShotBufferizationOptions opt;
call    0 returned 100%
      409:  201:    if (!options) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  202:      // Make new bufferization options if none were provided when creating the
        -:  203:      // pass.
      409:  204:      opt.allowReturnAllocs = allowReturnAllocs;
call    0 returned 100%
      409:  205:      opt.allowUnknownOps = allowUnknownOps;
      409:  206:      opt.analysisFuzzerSeed = analysisFuzzerSeed;
      409:  207:      opt.analysisHeuristic = parseHeuristicOption(analysisHeuristic);
call    0 returned 100%
      409:  208:      opt.copyBeforeWrite = copyBeforeWrite;
call    0 returned 100%
      409:  209:      opt.createDeallocs = createDeallocs;
      818:  210:      opt.functionBoundaryTypeConversion =
      409:  211:          parseLayoutMapOption(functionBoundaryTypeConversion);
call    0 returned 100%
      409:  212:      if (mustInferMemorySpace)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:        opt.defaultMemorySpace = None;
      409:  214:      opt.printConflicts = printConflicts;
call    0 returned 100%
      409:  215:      opt.testAnalysisOnly = testAnalysisOnly;
      409:  216:      opt.bufferizeFunctionBoundaries = bufferizeFunctionBoundaries;
        -:  217:
        -:  218:      // Configure type converter.
      409:  219:      BufferizationOptions::LayoutMapOption unknownTypeConversionOption =
      409:  220:          parseLayoutMapOption(unknownTypeConversion);
call    0 returned 100%
function _ZZN12_GLOBAL__N_120OneShotBufferizePass14runOnOperationEvENKUlN4mlir5ValueEjRKNS1_13bufferization20BufferizationOptionsEE_clES2_jS6_.isra.0 called 258 returned 100% blocks executed 75%
      258:  221:      opt.unknownTypeConverterFn = [=](Value value, unsigned memorySpace,
        -:  222:                                       const BufferizationOptions &options) {
      258:  223:        auto tensorType = value.getType().cast<TensorType>();
call    0 returned 100%
      258:  224:        if (unknownTypeConversionOption ==
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  225:            BufferizationOptions::LayoutMapOption::IdentityLayoutMap)
    #####:  226:          return bufferization::getMemRefTypeWithStaticIdentityLayout(
    #####:  227:              tensorType, memorySpace);
call    0 never executed
     258*:  228:        assert(
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  229:            unknownTypeConversionOption ==
        -:  230:                BufferizationOptions::LayoutMapOption::FullyDynamicLayoutMap &&
        -:  231:            "invalid layout map option");
      258:  232:        return bufferization::getMemRefTypeWithFullyDynamicLayout(tensorType,
      258:  233:                                                                  memorySpace);
call    0 returned 100%
      409:  234:      };
call    0 returned 100%
        -:  235:
        -:  236:      // Configure op filter.
function _ZZN12_GLOBAL__N_120OneShotBufferizePass14runOnOperationEvENKUlPN4mlir9OperationEE0_clES3_.isra.0 called 619516 returned 100% blocks executed 43%
   619516:  237:      OpFilter::Entry::FilterFn filterFn = [&](Operation *op) {
        -:  238:        // Filter may be specified via options.
  619516*:  239:        if (this->dialectFilter.hasValue())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  240:          return llvm::is_contained(this->dialectFilter,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  241:                                    op->getDialect()->getNamespace());
call    0 never executed
        -:  242:        // No filter specified: All other ops are allowed.
        -:  243:        return true;
      818:  244:      };
call    0 returned 100%
      818:  245:      opt.opFilter.allowOperation(filterFn);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  246:    } else {
    #####:  247:      opt = *options;
call    0 never executed
        -:  248:    }
        -:  249:
      409:  250:    ModuleOp moduleOp = getOperation();
call    0 returned 100%
      409:  251:    if (opt.bufferizeFunctionBoundaries) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  252:      if (failed(runOneShotModuleBufferize(moduleOp, opt))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  253:        signalPassFailure();
     406*:  254:        return;
call    0 never executed
        -:  255:      }
        -:  256:    } else {
      409:  257:      if (failed(runOneShotBufferize(moduleOp, opt))) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
      406:  258:        signalPassFailure();
      406:  259:        return;
call    0 returned 100%
        -:  260:      }
        -:  261:    }
        -:  262:
        3:  263:    if (opt.testAnalysisOnly)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  264:      return;
        -:  265:
        6:  266:    OpPassManager cleanupPipeline("builtin.module");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3:  267:    cleanupPipeline.addPass(createCanonicalizerPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        3:  268:    cleanupPipeline.addPass(createCSEPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        3:  269:    cleanupPipeline.addPass(createLoopInvariantCodeMotionPass());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        3:  270:    (void)runPipeline(cleanupPipeline, moduleOp);
call    0 returned 100%
        -:  271:  }
        -:  272:
        -:  273:private:
        -:  274:  llvm::Optional<OneShotBufferizationOptions> options;
        -:  275:};
        -:  276:} // namespace
        -:  277:
        -:  278:namespace {
   147820:  279:struct BufferizationBufferizePass
call    0 returned 100%
call    1 returned 100%
        -:  280:    : public bufferization::impl::BufferizationBufferizeBase<
        -:  281:          BufferizationBufferizePass> {
function _ZN12_GLOBAL__N_126BufferizationBufferizePass14runOnOperationEv called 463 returned 100% blocks executed 88%
      463:  282:  void runOnOperation() override {
      924:  283:    BufferizationOptions options = getPartialBufferizationOptions();
call    0 returned 100%
call    1 returned 100%
      464:  284:    options.opFilter.allowDialect<BufferizationDialect>();
call    0 returned 100%
        -:  285:
      463:  286:    if (failed(bufferizeOp(getOperation(), options)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  287:      signalPassFailure();
call    0 never executed
      462:  288:  }
        -:  289:
function _ZNK12_GLOBAL__N_126BufferizationBufferizePass20getDependentDialectsERN4mlir15DialectRegistryE called 559 returned 100% blocks executed 100%
      559:  290:  void getDependentDialects(DialectRegistry &registry) const override {
      559:  291:    registry
call    0 returned 100%
      559:  292:        .insert<bufferization::BufferizationDialect, memref::MemRefDialect>();
      559:  293:  }
        -:  294:};
        -:  295:} // namespace
        -:  296:
function _ZN4mlir13bufferization32createBufferizationBufferizePassEv called 116716 returned 100% blocks executed 100%
   116716:  297:std::unique_ptr<Pass> mlir::bufferization::createBufferizationBufferizePass() {
   116716:  298:  return std::make_unique<BufferizationBufferizePass>();
call    0 returned 100%
        -:  299:}
        -:  300:
function _ZN4mlir13bufferization26createOneShotBufferizePassEv called 116682 returned 100% blocks executed 100%
   116682:  301:std::unique_ptr<Pass> mlir::bufferization::createOneShotBufferizePass() {
   116682:  302:  return std::make_unique<OneShotBufferizePass>();
call    0 returned 100%
        -:  303:}
        -:  304:
function _ZN4mlir13bufferization26createOneShotBufferizePassERKNS0_27OneShotBufferizationOptionsE called 0 returned 0% blocks executed 0%
    #####:  305:std::unique_ptr<Pass> mlir::bufferization::createOneShotBufferizePass(
        -:  306:    const OneShotBufferizationOptions &options) {
    #####:  307:  return std::make_unique<OneShotBufferizePass>(options);
call    0 never executed
        -:  308:}
        -:  309:
        -:  310:std::unique_ptr<OperationPass<func::FuncOp>>
function _ZN4mlir13bufferization29createFinalizingBufferizePassEv called 117118 returned 100% blocks executed 100%
   117118:  311:mlir::bufferization::createFinalizingBufferizePass() {
   117118:  312:  return std::make_unique<FinalizingBufferizePass>();
call    0 returned 100%
        -:  313:}
        -:  314:
        -:  315://===----------------------------------------------------------------------===//
        -:  316:// BufferizableOpInterface-based Bufferization
        -:  317://===----------------------------------------------------------------------===//
        -:  318:
function _ZL9isaTensorN4mlir4TypeE called 22907632 returned 100% blocks executed 100%
 22907632:  319:static bool isaTensor(Type t) { return t.isa<TensorType>(); }
call    0 returned 100%
        -:  320:
        -:  321:/// Return true if the given op has a tensor result or a tensor operand.
function _ZL18hasTensorSemanticsPN4mlir9OperationE called 6480428 returned 100% blocks executed 100%
  6480428:  322:static bool hasTensorSemantics(Operation *op) {
  6480428:  323:  if (auto funcOp = dyn_cast<FunctionOpInterface>(op)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
     6183:  324:    bool hasTensorArg = any_of(funcOp.getArgumentTypes(), isaTensor);
call    0 returned 99%
call    1 returned 100%
     6100:  325:    bool hasTensorResult = any_of(funcOp.getResultTypes(), isaTensor);
call    0 returned 100%
call    1 returned 100%
     6099:  326:    return hasTensorArg || hasTensorResult;
        -:  327:  }
        -:  328:
 12948794:  329:  bool hasTensorResult = any_of(op->getResultTypes(), isaTensor);
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
call    2 returned 100%
  6474405:  330:  bool hasTensorOperand = any_of(op->getOperandTypes(), isaTensor);
call    0 returned 100%
call    1 returned 100%
  6474368:  331:  return hasTensorResult || hasTensorOperand;
        -:  332:}
        -:  333:
        -:  334:namespace {
        -:  335:/// A rewriter that keeps track of extra information during bufferization.
     3004:  336:class BufferizationRewriter : public IRRewriter {
call    0 returned 100%
        -:  337:public:
     2975:  338:  BufferizationRewriter(MLIRContext *ctx, DenseSet<Operation *> &erasedOps,
        -:  339:                        DenseSet<Operation *> &toMemrefOps,
        -:  340:                        SmallVector<Operation *> &worklist,
        -:  341:                        const BufferizationOptions &options,
        -:  342:                        const OpFilter *opFilter)
     2975:  343:      : IRRewriter(ctx), erasedOps(erasedOps), toMemrefOps(toMemrefOps),
     5968:  344:        worklist(worklist), analysisState(options), opFilter(opFilter) {}
        -:  345:
        -:  346:protected:
function _ZN12_GLOBAL__N_121BufferizationRewriter22notifyOperationRemovedEPN4mlir9OperationE called 94921 returned 100% blocks executed 100%
    94921:  347:  void notifyOperationRemoved(Operation *op) override {
    94921:  348:    IRRewriter::notifyOperationRemoved(op);
call    0 returned 100%
    94921:  349:    erasedOps.insert(op);
call    0 returned 100%
        -:  350:    // Erase if present.
    94921:  351:    toMemrefOps.erase(op);
call    0 returned 100%
    94921:  352:  }
        -:  353:
function _ZN12_GLOBAL__N_121BufferizationRewriter23notifyOperationInsertedEPN4mlir9OperationE called 1133954 returned 100% blocks executed 100%
  1133954:  354:  void notifyOperationInserted(Operation *op) override {
  1133954:  355:    IRRewriter::notifyOperationInserted(op);
call    0 returned 100%
  1133954:  356:    erasedOps.erase(op);
call    0 returned 100%
        -:  357:
        -:  358:    // Keep track of to_memref ops.
  1133954:  359:    if (isa<ToMemrefOp>(op)) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
    65623:  360:      toMemrefOps.insert(op);
call    0 returned 100%
    65623:  361:      return;
        -:  362:    }
        -:  363:
        -:  364:    // Skip to_tensor ops.
  1068331:  365:    if (isa<ToTensorOp>(op))
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
        -:  366:      return;
        -:  367:
        -:  368:    // Skip non-tensor ops.
  1026252:  369:    if (!hasTensorSemantics(op))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  370:      return;
        -:  371:
        -:  372:    // Skip ops that are not allowed to be bufferized.
     9857:  373:    auto const &options = analysisState.getOptions();
call    0 returned 100%
     9857:  374:    if (!options.isOpAllowed(op) || (opFilter && !opFilter->isOpAllowed(op)))
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
     2206:  375:      return;
        -:  376:
        -:  377:    // Add op to worklist.
     7651:  378:    worklist.push_back(op);
call    0 returned 100%
        -:  379:  }
        -:  380:
        -:  381:private:
        -:  382:  /// A set of all erased ops.
        -:  383:  DenseSet<Operation *> &erasedOps;
        -:  384:
        -:  385:  /// A set of all to_memref ops.
        -:  386:  DenseSet<Operation *> &toMemrefOps;
        -:  387:
        -:  388:  /// The worklist of ops to be bufferized.
        -:  389:  SmallVector<Operation *> &worklist;
        -:  390:
        -:  391:  /// The analysis state. Used for debug assertions and access to the
        -:  392:  /// bufferization options.
        -:  393:  const AnalysisState analysisState;
        -:  394:
        -:  395:  /// An extra op filter for bufferization.
        -:  396:  const OpFilter *opFilter;
        -:  397:};
        -:  398:} // namespace
        -:  399:
function _ZN4mlir13bufferization11bufferizeOpEPNS_9OperationERKNS0_20BufferizationOptionsEbPKNS0_8OpFilterE called 3019 returned 99% blocks executed 76%
     3019:  400:LogicalResult bufferization::bufferizeOp(Operation *op,
        -:  401:                                         const BufferizationOptions &options,
        -:  402:                                         bool copyBeforeWrite,
        -:  403:                                         const OpFilter *opFilter) {
     3019:  404:  if (copyBeforeWrite) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     5614:  405:    AnalysisState state(options);
call    0 returned 100%
     2809:  406:    if (failed(insertTensorCopies(op, state)))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  407:      return failure();
call    0 never executed
        -:  408:  }
        -:  409:
        -:  410:  // Keep track of to_memref ops.
     3003:  411:  DenseSet<Operation *> toMemrefOps;
call    0 returned 100%
    26059:  412:  op->walk([&](ToMemrefOp toMemrefOp) { toMemrefOps.insert(toMemrefOp); });
call    0 returned 100%
call    1 returned 100%
        -:  413:
        -:  414:  // Gather all bufferizable ops in top-to-bottom order.
        -:  415:  //
        -:  416:  // We should ideally know the exact memref type of all operands when
        -:  417:  // bufferizing an op. (This is the case when bufferizing top-to-bottom.)
        -:  418:  // Otherwise, we have to use a memref type with a fully dynamic layout map to
        -:  419:  // avoid copies. We are currently missing patterns for layout maps to
        -:  420:  // canonicalize away (or canonicalize to more precise layouts).
        -:  421:  //
        -:  422:  // FuncOps must be bufferized before their bodies, so add them to the worklist
        -:  423:  // first.
     6000:  424:  SmallVector<Operation *> worklist;
call    0 returned 99%
call    1 returned 100%
function _ZZN4mlir13bufferization11bufferizeOpEPNS_9OperationERKNS0_20BufferizationOptionsEbPKNS0_8OpFilterEENKUlNS_4func6FuncOpEE0_clESA_.isra.0 called 3081 returned 99% blocks executed 100%
     6086:  425:  op->walk([&](func::FuncOp funcOp) {
call    0 returned 99%
     3081:  426:    if (hasTensorSemantics(funcOp))
call    0 returned 99%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
     1037:  427:      worklist.push_back(funcOp);
call    0 returned 100%
     3043:  428:  });
function _ZZN4mlir13bufferization11bufferizeOpEPNS_9OperationERKNS0_20BufferizationOptionsEbPKNS0_8OpFilterEENKUlS2_E1_clES2_.isra.0 called 5322717 returned 100% blocks executed 100%
  5325677:  429:  op->walk<WalkOrder::PostOrder>([&](Operation *op) {
call    0 returned 100%
  5322717:  430:    if (hasTensorSemantics(op) && !isa<func::FuncOp>(op))
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 1%
  1215744:  431:      worklist.push_back(op);
call    0 returned 100%
  5322703:  432:  });
        -:  433:
        -:  434:  // Keep track of all erased ops.
     5968:  435:  DenseSet<Operation *> erasedOps;
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
        -:  436:
        -:  437:  // Bufferize all ops.
     2973:  438:  BufferizationRewriter rewriter(op->getContext(), erasedOps, toMemrefOps,
call    0 returned 100%
     5974:  439:                                 worklist, options, opFilter);
call    0 returned 101%
call    1 returned 100%
  1018453:  440:  for (unsigned i = 0; i < worklist.size(); ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
  1016076:  441:    Operation *nextOp = worklist[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  442:    // Skip ops that were erased.
 1016076*:  443:    if (erasedOps.contains(nextOp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
  887646*:  444:      continue;
        -:  445:    // Skip ops that are not bufferizable or not allowed.
  1016079:  446:    auto bufferizableOp = options.dynCastBufferizableOp(nextOp);
call    0 returned 100%
  1016074:  447:    if (!bufferizableOp)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
   887645:  448:      continue;
  128429*:  449:    if (opFilter && !opFilter->isOpAllowed(nextOp))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  450:      continue;
        -:  451:    // Skip ops that no longer have tensor semantics.
   128429:  452:    if (!hasTensorSemantics(nextOp))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
        1:  453:      continue;
        -:  454:    // Bufferize the op.
  128428*:  455:    LLVM_DEBUG(llvm::dbgs()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  456:               << "//===-------------------------------------------===//\n"
        -:  457:               << "IR after bufferizing: " << nextOp->getName() << "\n");
   128428:  458:    rewriter.setInsertionPoint(nextOp);
call    0 returned 100%
   128428:  459:    if (failed(bufferizableOp.bufferize(rewriter, options))) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 100%
     614*:  460:      LLVM_DEBUG(llvm::dbgs()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  461:                 << "failed to bufferize\n"
        -:  462:                 << "//===-------------------------------------------===//\n");
      614:  463:      return nextOp->emitError("failed to bufferize op");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  464:    }
  127814*:  465:    LLVM_DEBUG(llvm::dbgs()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  466:               << *op
        -:  467:               << "\n//===-------------------------------------------===//\n");
        -:  468:  }
        -:  469:
        -:  470:  // Fold all to_memref(to_tensor(x)) pairs.
    84632:  471:  for (Operation *op : toMemrefOps) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
call    5 returned 100%
    82255:  472:    rewriter.setInsertionPoint(op);
call    0 returned 100%
    82255:  473:    (void)bufferization::foldToMemrefToTensorPair(rewriter,
    82255:  474:                                                  cast<ToMemrefOp>(op));
call    0 returned 100%
call    1 returned 100%
        -:  475:  }
        -:  476:
        -:  477:  /// Check the result of bufferization. Return an error if an op was not
        -:  478:  /// bufferized, unless partial bufferization is allowed.
     2386:  479:  if (options.allowUnknownOps)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     2375:  480:    return success();
        -:  481:
       17:  482:  for (Operation *op : worklist) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -:  483:    // Skip ops that are entirely gone.
        9:  484:    if (erasedOps.contains(op))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        3:  485:      continue;
        -:  486:    // Ops that no longer have tensor semantics (because they were updated
        -:  487:    // in-place) are allowed.
        6:  488:    if (!hasTensorSemantics(op))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        2:  489:      continue;
        -:  490:    // Continue ops that are not allowed.
        4:  491:    if (!options.isOpAllowed(op))
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        1:  492:      continue;
       3*:  493:    if (opFilter && !opFilter->isOpAllowed(op))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
    #####:  494:      continue;
        -:  495:    // Ops without any uses and no side effects will fold away.
       6*:  496:    if (op->getUses().empty() && MemoryEffectOpInterface::hasNoEffect(op))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  497:      continue;
        -:  498:    // ToTensorOps/ToMemrefOps are allowed in the output.
       3*:  499:    if (isa<ToTensorOp, ToMemrefOp>(op))
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100%
    #####:  500:      continue;
        3:  501:    return op->emitError("op was not bufferized");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  502:  }
        -:  503:
     3000:  504:  return success();
call    0 returned 100%
        -:  505:}
        -:  506:
function _ZN4mlir13bufferization30getPartialBufferizationOptionsEv called 2833 returned 100% blocks executed 100%
     2833:  507:BufferizationOptions bufferization::getPartialBufferizationOptions() {
     2833:  508:  BufferizationOptions options;
call    0 returned 100%
     2840:  509:  options.allowUnknownOps = true;
     2840:  510:  options.createDeallocs = false;
     2840:  511:  options.enforceAliasingInvariants = false;
function _ZZN4mlir13bufferization30getPartialBufferizationOptionsEvENKUlNS_5ValueEjRKNS0_20BufferizationOptionsEE_clES1_jS4_.isra.0 called 78040 returned 100% blocks executed 100%
    78040:  512:  options.unknownTypeConverterFn = [](Value value, unsigned memorySpace,
        -:  513:                                      const BufferizationOptions &options) {
    78040:  514:    return getMemRefTypeWithStaticIdentityLayout(
    78040:  515:        value.getType().cast<TensorType>(), memorySpace);
call    0 returned 100%
call    1 returned 100%
     2840:  516:  };
call    0 returned 100%
     2840:  517:  options.opFilter.allowDialect<BufferizationDialect>();
call    0 returned 100%
     2827:  518:  return options;
        -:  519:}
