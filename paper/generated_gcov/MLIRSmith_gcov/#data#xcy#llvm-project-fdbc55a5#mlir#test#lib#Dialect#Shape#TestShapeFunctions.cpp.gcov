        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Shape/TestShapeFunctions.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Shape/CMakeFiles/MLIRShapeTestPasses.dir/TestShapeFunctions.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Shape/CMakeFiles/MLIRShapeTestPasses.dir/TestShapeFunctions.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TestShapeFunctions.cpp - Passes to test shape function  ------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include <queue>
        -:   10:
        -:   11:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   12:#include "mlir/Dialect/Shape/IR/Shape.h"
        -:   13:#include "mlir/IR/BuiltinDialect.h"
        -:   14:#include "mlir/Interfaces/InferTypeOpInterface.h"
        -:   15:#include "mlir/Pass/Pass.h"
        -:   16:
        -:   17:using namespace mlir;
        -:   18:
        -:   19:namespace {
        -:   20:/// This is a pass that reports shape functions associated with ops.
  116670*:   21:struct ReportShapeFnPass
call    0 never executed
call    1 returned 100%
        -:   22:    : public PassWrapper<ReportShapeFnPass, OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_117ReportShapeFnPass13resolveTypeIDEv called 116670 returned 100% blocks executed 100%
   116670:   23:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ReportShapeFnPass)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   24:
        -:   25:  void runOnOperation() override;
function _ZNK12_GLOBAL__N_117ReportShapeFnPass11getArgumentEv called 116173 returned 100% blocks executed 100%
   116173:   26:  StringRef getArgument() const final { return "test-shape-function-report"; }
function _ZNK12_GLOBAL__N_117ReportShapeFnPass14getDescriptionEv called 116161 returned 100% blocks executed 100%
   116161:   27:  StringRef getDescription() const final {
   116161:   28:    return "Test pass to report associated shape functions";
        -:   29:  }
        -:   30:};
        -:   31:} // namespace
        -:   32:
function _ZN12_GLOBAL__N_117ReportShapeFnPass14runOnOperationEv called 381 returned 100% blocks executed 32%
      381:   33:void ReportShapeFnPass::runOnOperation() {
      381:   34:  auto module = getOperation();
call    0 returned 100%
        -:   35:
        -:   36:  // Report the shape function available to refine the op.
      381:   37:  auto shapeFnId = StringAttr::get(&getContext(), "shape.function");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZZN12_GLOBAL__N_117ReportShapeFnPass14runOnOperationEvENKUlN4mlir5shape17FunctionLibraryOpEPNS1_9OperationEE_clES3_S5_.isra.0 called 0 returned 0% blocks executed 0%
     381*:   38:  auto remarkShapeFn = [&](shape::FunctionLibraryOp shapeFnLib, Operation *op) {
    #####:   39:    if (op->hasTrait<OpTrait::IsTerminator>())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   40:      return true;
    #####:   41:    if (auto typeInterface = dyn_cast<InferTypeOpInterface>(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:      op->emitRemark() << "implements InferType op interface";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   43:      return true;
        -:   44:    }
    #####:   45:    if (auto fn = shapeFnLib.getShapeFunction(op)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:      op->emitRemark() << "associated shape function: " << fn.getName();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   47:      return true;
        -:   48:    }
    #####:   49:    if (auto symbol = op->getAttrOfType<SymbolRefAttr>(shapeFnId)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:      auto fn =
    #####:   51:          cast<shape::FuncOp>(SymbolTable::lookupSymbolIn(module, symbol));
call    0 never executed
call    1 never executed
    #####:   52:      op->emitRemark() << "associated shape function: " << fn.getName();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   53:      return true;
        -:   54:    }
    #####:   55:    return false;
      381:   56:  };
        -:   57:
        -:   58:  // Lookup shape function library.
      381:   59:  SmallVector<shape::FunctionLibraryOp, 4> libraries;
call    0 returned 100%
      381:   60:  auto attr = module->getAttr("shape.lib");
call    0 returned 100%
      381:   61:  if (attr) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
function _ZZN12_GLOBAL__N_117ReportShapeFnPass14runOnOperationEvENKUlN4mlir9AttributeEE0_clES2_.isra.0 called 0 returned 0% blocks executed 0%
    #####:   62:    auto lookup = [&](Attribute attr) {
    #####:   63:      return cast<shape::FunctionLibraryOp>(
call    0 never executed
    #####:   64:          SymbolTable::lookupSymbolIn(module, attr.cast<SymbolRefAttr>()));
call    0 never executed
call    1 never executed
    #####:   65:    };
    #####:   66:    if (auto arrayAttr = attr.dyn_cast<ArrayAttr>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:      libraries.reserve(arrayAttr.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:      for (auto attr : arrayAttr)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:        libraries.push_back(lookup(attr));
call    0 never executed
call    1 never executed
        -:   70:    } else {
    #####:   71:      libraries.reserve(1);
branch  0 never executed
branch  1 never executed
    #####:   72:      libraries.push_back(lookup(attr));
call    0 never executed
call    1 never executed
        -:   73:    }
        -:   74:  }
        -:   75:
function _ZZN12_GLOBAL__N_117ReportShapeFnPass14runOnOperationEvENKUlN4mlir4func6FuncOpEE1_clES3_.isra.0 called 380 returned 100% blocks executed 100%
      381:   76:  module.getBodyRegion().walk([&](func::FuncOp func) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   77:    // Skip ops in the shape function library.
      760:   78:    if (isa<shape::FunctionLibraryOp>(func->getParentOp()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:   79:      return;
        -:   80:
function _ZZZN12_GLOBAL__N_117ReportShapeFnPass14runOnOperationEvENKUlN4mlir4func6FuncOpEE1_clES3_ENKUlPNS1_9OperationEE_clES6_.isra.0 called 799328 returned 100% blocks executed 100%
   799708:   81:    func.walk([&](Operation *op) {
  1599036:   82:      bool found = llvm::any_of(libraries, [&](shape::FunctionLibraryOp lib) {
   799708:   83:        return remarkShapeFn(lib, op);
call    0 returned 100%
call    1 returned 100%
        -:   84:      });
   799328:   85:      if (!found)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   799328:   86:        op->emitRemark() << "no associated way to refine shape";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
   799328:   87:    });
        -:   88:  });
      381:   89:}
        -:   90:
        -:   91:namespace mlir {
function _ZN4mlir31registerShapeFunctionTestPassesEv called 116161 returned 100% blocks executed 100%
   116161:   92:void registerShapeFunctionTestPasses() {
   116161:   93:  PassRegistration<ReportShapeFnPass>();
call    0 returned 100%
   116161:   94:}
        -:   95:} // namespace mlir
