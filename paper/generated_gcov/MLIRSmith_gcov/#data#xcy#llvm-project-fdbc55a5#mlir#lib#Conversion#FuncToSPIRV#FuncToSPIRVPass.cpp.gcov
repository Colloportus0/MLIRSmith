        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/FuncToSPIRV/FuncToSPIRVPass.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/FuncToSPIRV/CMakeFiles/obj.MLIRFuncToSPIRV.dir/FuncToSPIRVPass.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/FuncToSPIRV/CMakeFiles/obj.MLIRFuncToSPIRV.dir/FuncToSPIRVPass.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- FuncToSPIRVPass.cpp - Func to SPIR-V Passes ----------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to convert Func dialect to SPIR-V dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/FuncToSPIRV/FuncToSPIRVPass.h"
        -:   14:
        -:   15:#include "mlir/Conversion/FuncToSPIRV/FuncToSPIRV.h"
        -:   16:#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
        -:   17:#include "mlir/Dialect/SPIRV/Transforms/SPIRVConversion.h"
        -:   18:
        -:   19:namespace mlir {
        -:   20:#define GEN_PASS_DEF_CONVERTFUNCTOSPIRV
        -:   21:#include "mlir/Conversion/Passes.h.inc"
        -:   22:} // namespace mlir
        -:   23:
        -:   24:using namespace mlir;
        -:   25:
        -:   26:namespace {
        -:   27:/// A pass converting MLIR Func operations into the SPIR-V dialect.
  116719*:   28:class ConvertFuncToSPIRVPass
call    0 never executed
call    1 returned 100%
        -:   29:    : public impl::ConvertFuncToSPIRVBase<ConvertFuncToSPIRVPass> {
        -:   30:  void runOnOperation() override;
        -:   31:};
        -:   32:} // namespace
        -:   33:
function _ZN12_GLOBAL__N_122ConvertFuncToSPIRVPass14runOnOperationEv called 438 returned 100% blocks executed 96%
      438:   34:void ConvertFuncToSPIRVPass::runOnOperation() {
      438:   35:  MLIRContext *context = &getContext();
call    0 returned 100%
      438:   36:  Operation *op = getOperation();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   37:
      438:   38:  auto targetAttr = spirv::lookupTargetEnvOrDefault(op);
call    0 returned 100%
      438:   39:  std::unique_ptr<ConversionTarget> target =
      797:   40:      SPIRVConversionTarget::get(targetAttr);
call    0 returned 100%
call    1 returned 100%
        -:   41:
      438:   42:  SPIRVConversionOptions options;
      438:   43:  options.emulateNon32BitScalarTypes = this->emulateNon32BitScalarTypes;
call    0 returned 100%
      797:   44:  SPIRVTypeConverter typeConverter(targetAttr, options);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   45:
      797:   46:  RewritePatternSet patterns(context);
call    0 returned 100%
call    1 returned 100%
      438:   47:  populateFuncToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
      438:   48:  populateBuiltinFuncToSPIRVPatterns(typeConverter, patterns);
call    0 returned 100%
        -:   49:
      438:   50:  if (failed(applyPartialConversion(op, *target, std::move(patterns))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 18% (fallthrough)
branch  4 taken 82%
      158:   51:    return signalPassFailure();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   52:}
        -:   53:
function _ZN4mlir28createConvertFuncToSPIRVPassEv called 116719 returned 100% blocks executed 100%
   116719:   54:std::unique_ptr<OperationPass<>> mlir::createConvertFuncToSPIRVPass() {
   116719:   55:  return std::make_unique<ConvertFuncToSPIRVPass>();
call    0 returned 100%
        -:   56:}
