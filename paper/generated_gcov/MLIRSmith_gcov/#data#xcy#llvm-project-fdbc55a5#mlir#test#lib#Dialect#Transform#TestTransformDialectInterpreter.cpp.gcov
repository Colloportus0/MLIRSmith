        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/test/lib/Dialect/Transform/TestTransformDialectInterpreter.cpp
        -:    0:Graph:../tools/mlir/test/lib/Dialect/Transform/CMakeFiles/MLIRTestTransformDialect.dir/TestTransformDialectInterpreter.cpp.gcno
        -:    0:Data:../tools/mlir/test/lib/Dialect/Transform/CMakeFiles/MLIRTestTransformDialect.dir/TestTransformDialectInterpreter.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- TestTransformDialectInterpreter.cpp --------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines a test pass that interprets Transform dialect operations in
        -:   10:// the module.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Dialect/Transform/IR/TransformInterfaces.h"
        -:   15:#include "mlir/IR/BuiltinOps.h"
        -:   16:#include "mlir/Pass/Pass.h"
        -:   17:
        -:   18:using namespace mlir;
        -:   19:
        -:   20:namespace {
        -:   21:/// Simple pass that applies transform dialect ops directly contained in a
        -:   22:/// module.
        -:   23:class TestTransformDialectInterpreterPass
        -:   24:    : public PassWrapper<TestTransformDialectInterpreterPass,
        -:   25:                         OperationPass<ModuleOp>> {
        -:   26:public:
function _ZN12_GLOBAL__N_135TestTransformDialectInterpreterPass13resolveTypeIDEv called 116647 returned 100% blocks executed 100%
   116647:   27:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   28:      TestTransformDialectInterpreterPass)
        -:   29:
function _ZN12_GLOBAL__N_135TestTransformDialectInterpreterPassC2Ev called 116647 returned 100% blocks executed 100%
   116647:   30:  TestTransformDialectInterpreterPass() = default;
call    0 returned 100%
call    1 returned 100%
        -:   31:  TestTransformDialectInterpreterPass(
        -:   32:      const TestTransformDialectInterpreterPass &) {}
        -:   33:
function _ZNK12_GLOBAL__N_135TestTransformDialectInterpreterPass11getArgumentEv called 116183 returned 100% blocks executed 100%
   116183:   34:  StringRef getArgument() const override {
   116183:   35:    return "test-transform-dialect-interpreter";
        -:   36:  }
        -:   37:
function _ZNK12_GLOBAL__N_135TestTransformDialectInterpreterPass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   38:  StringRef getDescription() const override {
   116163:   39:    return "apply transform dialect operations one by one";
        -:   40:  }
        -:   41:
function _ZN12_GLOBAL__N_135TestTransformDialectInterpreterPass14runOnOperationEv called 358 returned 100% blocks executed 50%
      358:   42:  void runOnOperation() override {
      358:   43:    ModuleOp module = getOperation();
call    0 returned 100%
    #####:   44:    for (auto op :
call    0 never executed
     358*:   45:         module.getBody()->getOps<transform::TransformOpInterface>()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
    #####:   46:      if (failed(transform::applyTransforms(
call    0 never executed
        -:   47:              module, op,
    #####:   48:              transform::TransformOptions().enableExpensiveChecks(
branch  0 never executed
branch  1 never executed
    #####:   49:                  enableExpensiveChecks))))
call    0 never executed
    #####:   50:        return signalPassFailure();
call    0 never executed
        -:   51:    }
        -:   52:  }
        -:   53:
        -:   54:  Option<bool> enableExpensiveChecks{
        -:   55:      *this, "enable-expensive-checks", llvm::cl::init(false),
        -:   56:      llvm::cl::desc("perform expensive checks to better report errors in the "
        -:   57:                     "transform IR")};
        -:   58:};
        -:   59:
  116662*:   60:struct TestTransformDialectEraseSchedulePass
call    0 never executed
call    1 returned 100%
        -:   61:    : public PassWrapper<TestTransformDialectEraseSchedulePass,
        -:   62:                         OperationPass<ModuleOp>> {
function _ZN12_GLOBAL__N_137TestTransformDialectEraseSchedulePass13resolveTypeIDEv called 116662 returned 100% blocks executed 100%
   116662:   63:  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:   64:      TestTransformDialectEraseSchedulePass)
        -:   65:
function _ZNK12_GLOBAL__N_137TestTransformDialectEraseSchedulePass11getArgumentEv called 116178 returned 100% blocks executed 100%
   116178:   66:  StringRef getArgument() const final {
   116178:   67:    return "test-transform-dialect-erase-schedule";
        -:   68:  }
        -:   69:
function _ZNK12_GLOBAL__N_137TestTransformDialectEraseSchedulePass14getDescriptionEv called 116163 returned 100% blocks executed 100%
   116163:   70:  StringRef getDescription() const final {
   116163:   71:    return "erase transform dialect schedule from the IR";
        -:   72:  }
        -:   73:
function _ZN12_GLOBAL__N_137TestTransformDialectEraseSchedulePass14runOnOperationEv called 364 returned 100% blocks executed 100%
      364:   74:  void runOnOperation() override {
function _ZZN12_GLOBAL__N_137TestTransformDialectEraseSchedulePass14runOnOperationEvENKUlPN4mlir9OperationEE_clES3_.isra.0 called 762091 returned 100% blocks executed 71%
   762455:   75:    getOperation()->walk<WalkOrder::PreOrder>([&](Operation *nestedOp) {
call    0 returned 100%
   762091:   76:      if (isa<transform::TransformOpInterface>(nestedOp)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   77:        nestedOp->erase();
call    0 never executed
    #####:   78:        return WalkResult::skip();
        -:   79:      }
   762091:   80:      return WalkResult::advance();
      364:   81:    });
call    0 returned 100%
      364:   82:  }
        -:   83:};
        -:   84:} // namespace
        -:   85:
        -:   86:namespace mlir {
        -:   87:namespace test {
        -:   88:/// Registers the test pass for erasing transform dialect ops.
function _ZN4mlir4test45registerTestTransformDialectEraseSchedulePassEv called 116163 returned 100% blocks executed 100%
   116163:   89:void registerTestTransformDialectEraseSchedulePass() {
   116163:   90:  PassRegistration<TestTransformDialectEraseSchedulePass> reg;
call    0 returned 100%
   116163:   91:}
        -:   92:/// Registers the test pass for applying transform dialect ops.
function _ZN4mlir4test43registerTestTransformDialectInterpreterPassEv called 116163 returned 100% blocks executed 100%
   116163:   93:void registerTestTransformDialectInterpreterPass() {
   116163:   94:  PassRegistration<TestTransformDialectInterpreterPass> reg;
call    0 returned 100%
   116163:   95:}
        -:   96:} // namespace test
        -:   97:} // namespace mlir
