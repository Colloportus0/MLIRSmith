        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/GPUToROCDL/LowerGpuOpsToROCDLOps.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/GPUToROCDL/CMakeFiles/obj.MLIRGPUToROCDLTransforms.dir/LowerGpuOpsToROCDLOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/GPUToROCDL/CMakeFiles/obj.MLIRGPUToROCDLTransforms.dir/LowerGpuOpsToROCDLOps.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- LowerGpuOpsToROCDLOps.cpp - MLIR GPU to ROCDL lowering passes ------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements a pass to generate ROCDLIR operations for higher-level
        -:   10:// GPU operations.
        -:   11://
        -:   12://===----------------------------------------------------------------------===//
        -:   13:
        -:   14:#include "mlir/Conversion/ControlFlowToLLVM/ControlFlowToLLVM.h"
        -:   15:#include "mlir/Conversion/GPUToROCDL/GPUToROCDLPass.h"
        -:   16:
        -:   17:#include "mlir/Conversion/AMDGPUToROCDL/AMDGPUToROCDL.h"
        -:   18:#include "mlir/Conversion/ArithToLLVM/ArithToLLVM.h"
        -:   19:#include "mlir/Conversion/FuncToLLVM/ConvertFuncToLLVM.h"
        -:   20:#include "mlir/Conversion/LLVMCommon/ConversionTarget.h"
        -:   21:#include "mlir/Conversion/LLVMCommon/LoweringOptions.h"
        -:   22:#include "mlir/Conversion/LLVMCommon/Pattern.h"
        -:   23:#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
        -:   24:#include "mlir/Conversion/MemRefToLLVM/MemRefToLLVM.h"
        -:   25:#include "mlir/Conversion/VectorToLLVM/ConvertVectorToLLVM.h"
        -:   26:#include "mlir/Dialect/Func/IR/FuncOps.h"
        -:   27:#include "mlir/Dialect/GPU/IR/GPUDialect.h"
        -:   28:#include "mlir/Dialect/GPU/Transforms/Passes.h"
        -:   29:#include "mlir/Dialect/LLVMIR/ROCDLDialect.h"
        -:   30:#include "mlir/Dialect/Math/IR/Math.h"
        -:   31:#include "mlir/Dialect/Vector/IR/VectorOps.h"
        -:   32:#include "mlir/Pass/Pass.h"
        -:   33:#include "mlir/Transforms/DialectConversion.h"
        -:   34:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   35:#include "llvm/Support/FormatVariadic.h"
        -:   36:
        -:   37:#include "../GPUCommon/GPUOpsLowering.h"
        -:   38:#include "../GPUCommon/IndexIntrinsicsOpLowering.h"
        -:   39:#include "../GPUCommon/OpToFuncCallLowering.h"
        -:   40:
        -:   41:namespace mlir {
        -:   42:#define GEN_PASS_DEF_CONVERTGPUOPSTOROCDLOPS
        -:   43:#include "mlir/Conversion/Passes.h.inc"
        -:   44:} // namespace mlir
        -:   45:
        -:   46:using namespace mlir;
        -:   47:
        -:   48:/// Returns true if the given `gpu.func` can be safely called using the bare
        -:   49:/// pointer calling convention.
function _ZL27canBeCalledWithBarePointersN4mlir3gpu9GPUFuncOpE called 0 returned 0% blocks executed 0%
    #####:   50:static bool canBeCalledWithBarePointers(gpu::GPUFuncOp func) {
    #####:   51:  bool canBeBare = true;
    #####:   52:  for (Type type : func.getArgumentTypes())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:    if (auto memrefTy = type.dyn_cast<BaseMemRefType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:      canBeBare &= LLVMTypeConverter::canConvertToBarePtr(memrefTy);
call    0 never executed
    #####:   55:  return canBeBare;
        -:   56:}
        -:   57:
        -:   58:namespace {
        -:   59:
        -:   60:/// Import the GPU Ops to ROCDL Patterns.
        -:   61:#include "GPUToROCDL.cpp.inc"
        -:   62:
        -:   63:// A pass that replaces all occurrences of GPU device operations with their
        -:   64:// corresponding ROCDL equivalent.
        -:   65://
        -:   66:// This pass only handles device code and is not meant to be run on GPU host
        -:   67:// code.
    31320:   68:struct LowerGpuOpsToROCDLOpsPass
call    0 returned 100%
        -:   69:    : public impl::ConvertGpuOpsToROCDLOpsBase<LowerGpuOpsToROCDLOpsPass> {
        -:   70:  LowerGpuOpsToROCDLOpsPass() = default;
function _ZN12_GLOBAL__N_125LowerGpuOpsToROCDLOpsPassC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjbN4mlir3gpu3amd7RuntimeE called 116727 returned 100% blocks executed 84%
   116727:   71:  LowerGpuOpsToROCDLOpsPass(const std::string &chipset, unsigned indexBitwidth,
        -:   72:                            bool useBarePtrCallConv,
   116727:   73:                            gpu::amd::Runtime runtime) {
call    0 returned 100%
   116727:   74:    if (this->chipset.getNumOccurrences() == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   116727:   75:      this->chipset = chipset;
call    0 returned 100%
   116727:   76:    if (this->indexBitwidth.getNumOccurrences() == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   116727:   77:      this->indexBitwidth = indexBitwidth;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   116727:   78:    if (this->useBarePtrCallConv.getNumOccurrences() == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   116727:   79:      this->useBarePtrCallConv = useBarePtrCallConv;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   116727:   80:    if (this->runtime.getNumOccurrences() == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   116727:   81:      this->runtime = runtime;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   116727:   82:  }
        -:   83:
function _ZN12_GLOBAL__N_125LowerGpuOpsToROCDLOpsPass14runOnOperationEv called 0 returned 0% blocks executed 0%
    #####:   84:  void runOnOperation() override {
    #####:   85:    gpu::GPUModuleOp m = getOperation();
call    0 never executed
    #####:   86:    MLIRContext *ctx = m.getContext();
call    0 never executed
        -:   87:
        -:   88:    // Request C wrapper emission.
    #####:   89:    for (auto func : m.getOps<func::FuncOp>()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   90:      func->setAttr(LLVM::LLVMDialect::getEmitCWrapperAttrName(),
call    0 never executed
    #####:   91:                    UnitAttr::get(ctx));
call    0 never executed
call    1 never executed
        -:   92:    }
        -:   93:
    #####:   94:    FailureOr<amdgpu::Chipset> maybeChipset = amdgpu::Chipset::parse(chipset);
call    0 never executed
    #####:   95:    if (failed(maybeChipset)) {
branch  0 never executed
branch  1 never executed
    #####:   96:      emitError(UnknownLoc::get(ctx), "Invalid chipset name: " + chipset);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   97:      return signalPassFailure();
call    0 never executed
        -:   98:    }
        -:   99:
        -:  100:    /// Customize the bitwidth used for the device side index computations.
    #####:  101:    LowerToLLVMOptions options(
    #####:  102:        ctx, DataLayout(cast<DataLayoutOpInterface>(m.getOperation())));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  103:    if (indexBitwidth != kDeriveIndexBitwidthFromDataLayout)
branch  0 never executed
branch  1 never executed
    #####:  104:      options.overrideIndexBitwidth(indexBitwidth);
        -:  105:
    #####:  106:    if (useBarePtrCallConv) {
branch  0 never executed
branch  1 never executed
    #####:  107:      options.useBarePtrCallConv = true;
    #####:  108:      WalkResult canUseBarePointers =
    #####:  109:          m.walk([](gpu::GPUFuncOp func) -> WalkResult {
    #####:  110:            if (canBeCalledWithBarePointers(func))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  111:              return WalkResult::advance();
    #####:  112:            return WalkResult::interrupt();
    #####:  113:          });
call    0 never executed
    #####:  114:      if (canUseBarePointers.wasInterrupted()) {
branch  0 never executed
branch  1 never executed
    #####:  115:        emitError(UnknownLoc::get(ctx),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  116:                  "bare pointer calling convention requires all memrefs to "
        -:  117:                  "have static shape and use the identity map");
    #####:  118:        return signalPassFailure();
call    0 never executed
call    1 never executed
        -:  119:      }
        -:  120:    }
        -:  121:
    #####:  122:    LLVMTypeConverter converter(ctx, options);
call    0 never executed
call    1 never executed
        -:  123:
    #####:  124:    RewritePatternSet patterns(ctx);
call    0 never executed
call    1 never executed
    #####:  125:    RewritePatternSet llvmPatterns(ctx);
call    0 never executed
        -:  126:
    #####:  127:    populateGpuRewritePatterns(patterns);
call    0 never executed
    #####:  128:    (void)applyPatternsAndFoldGreedily(m, std::move(patterns));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  129:
    #####:  130:    mlir::arith::populateArithToLLVMConversionPatterns(converter, llvmPatterns);
call    0 never executed
    #####:  131:    populateAMDGPUToROCDLConversionPatterns(converter, llvmPatterns,
call    0 never executed
    #####:  132:                                            *maybeChipset);
call    0 never executed
    #####:  133:    populateVectorToLLVMConversionPatterns(converter, llvmPatterns);
call    0 never executed
    #####:  134:    cf::populateControlFlowToLLVMConversionPatterns(converter, llvmPatterns);
call    0 never executed
    #####:  135:    populateFuncToLLVMConversionPatterns(converter, llvmPatterns);
call    0 never executed
    #####:  136:    populateMemRefToLLVMConversionPatterns(converter, llvmPatterns);
call    0 never executed
    #####:  137:    populateGpuToROCDLConversionPatterns(converter, llvmPatterns, runtime);
call    0 never executed
    #####:  138:    LLVMConversionTarget target(getContext());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  139:    configureGpuToROCDLConversionLegality(target);
call    0 never executed
    #####:  140:    if (failed(applyPartialConversion(m, target, std::move(llvmPatterns))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  141:      signalPassFailure();
call    0 never executed
        -:  142:  }
        -:  143:};
        -:  144:
        -:  145:} // namespace
        -:  146:
function _ZN4mlir37configureGpuToROCDLConversionLegalityERNS_16ConversionTargetE called 0 returned 0% blocks executed 0%
    #####:  147:void mlir::configureGpuToROCDLConversionLegality(ConversionTarget &target) {
    #####:  148:  target.addIllegalOp<func::FuncOp>();
call    0 never executed
    #####:  149:  target.addLegalDialect<::mlir::LLVM::LLVMDialect>();
call    0 never executed
    #####:  150:  target.addLegalDialect<ROCDL::ROCDLDialect>();
call    0 never executed
    #####:  151:  target.addIllegalDialect<gpu::GPUDialect>();
call    0 never executed
    #####:  152:  target.addIllegalOp<LLVM::CosOp, LLVM::ExpOp, LLVM::Exp2Op, LLVM::FAbsOp,
call    0 never executed
        -:  153:                      LLVM::FCeilOp, LLVM::FFloorOp, LLVM::LogOp, LLVM::Log10Op,
    #####:  154:                      LLVM::Log2Op, LLVM::PowOp, LLVM::SinOp, LLVM::SqrtOp>();
        -:  155:
        -:  156:  // TODO: Remove once we support replacing non-root ops.
    #####:  157:  target.addLegalOp<gpu::YieldOp, gpu::GPUModuleOp, gpu::ModuleEndOp>();
call    0 never executed
    #####:  158:}
        -:  159:
        -:  160:template <typename OpTy>
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math7FloorOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math7FloorOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6AbsFOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6AbsFOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6AtanOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6AtanOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math7Atan2OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math7Atan2OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6CeilOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6CeilOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math5CosOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math5CosOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math5ExpOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math5ExpOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6Exp2OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6Exp2OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math7ExpM1OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math7ExpM1OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6TanhOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6TanhOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math5LogOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math5LogOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math7Log10OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math7Log10OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math7Log1pOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math7Log1pOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6Log2OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6Log2OpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6PowFOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6PowFOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math7RsqrtOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math7RsqrtOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math5SinOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math5SinOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
_Z18populateOpPatternsIN4mlir4math6SqrtOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_:
function _Z18populateOpPatternsIN4mlir4math6SqrtOpEEvRNS0_17LLVMTypeConverterERNS0_17RewritePatternSetEN4llvm9StringRefES8_ called 0 returned 0% blocks executed 0%
    #####:  161:static void populateOpPatterns(LLVMTypeConverter &converter,
call    0 never executed
        -:  162:                               RewritePatternSet &patterns, StringRef f32Func,
        -:  163:                               StringRef f64Func) {
    #####:  164:  patterns.add<ScalarizeVectorOpLowering<OpTy>>(converter);
    #####:  165:  patterns.add<OpToFuncCallLowering<OpTy>>(converter, f32Func, f64Func);
call    0 never executed
    #####:  166:}
------------------
        -:  167:
function _ZN4mlir36populateGpuToROCDLConversionPatternsERNS_17LLVMTypeConverterERNS_17RewritePatternSetENS_3gpu3amd7RuntimeE called 0 returned 0% blocks executed 0%
    #####:  168:void mlir::populateGpuToROCDLConversionPatterns(
        -:  169:    LLVMTypeConverter &converter, RewritePatternSet &patterns,
        -:  170:    mlir::gpu::amd::Runtime runtime) {
    #####:  171:  using mlir::gpu::amd::Runtime;
        -:  172:
    #####:  173:  populateWithGenerated(patterns);
call    0 never executed
    #####:  174:  patterns
        -:  175:      .add<GPUIndexIntrinsicOpLowering<gpu::ThreadIdOp, ROCDL::ThreadIdXOp,
        -:  176:                                       ROCDL::ThreadIdYOp, ROCDL::ThreadIdZOp>,
        -:  177:           GPUIndexIntrinsicOpLowering<gpu::BlockDimOp, ROCDL::BlockDimXOp,
        -:  178:                                       ROCDL::BlockDimYOp, ROCDL::BlockDimZOp>,
        -:  179:           GPUIndexIntrinsicOpLowering<gpu::BlockIdOp, ROCDL::BlockIdXOp,
        -:  180:                                       ROCDL::BlockIdYOp, ROCDL::BlockIdZOp>,
        -:  181:           GPUIndexIntrinsicOpLowering<gpu::GridDimOp, ROCDL::GridDimXOp,
        -:  182:                                       ROCDL::GridDimYOp, ROCDL::GridDimZOp>,
    #####:  183:           GPUReturnOpLowering>(converter);
call    0 never executed
    #####:  184:  patterns.add<GPUFuncOpLowering>(
call    0 never executed
        -:  185:      converter, /*allocaAddrSpace=*/5,
    #####:  186:      StringAttr::get(&converter.getContext(),
call    0 never executed
    #####:  187:                      ROCDL::ROCDLDialect::getKernelFuncAttrName()));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  188:  if (Runtime::HIP == runtime) {
branch  0 never executed
branch  1 never executed
    #####:  189:    patterns.add<GPUPrintfOpToHIPLowering>(converter);
call    0 never executed
    #####:  190:  } else if (Runtime::OpenCL == runtime) {
branch  0 never executed
branch  1 never executed
        -:  191:    // Use address space = 4 to match the OpenCL definition of printf()
    #####:  192:    patterns.add<GPUPrintfOpToLLVMCallLowering>(converter, /*addressSpace=*/4);
call    0 never executed
        -:  193:  }
        -:  194:
    #####:  195:  populateOpPatterns<math::AbsFOp>(converter, patterns, "__ocml_fabs_f32",
call    0 never executed
        -:  196:                                   "__ocml_fabs_f64");
    #####:  197:  populateOpPatterns<math::AtanOp>(converter, patterns, "__ocml_atan_f32",
call    0 never executed
        -:  198:                                   "__ocml_atan_f64");
    #####:  199:  populateOpPatterns<math::Atan2Op>(converter, patterns, "__ocml_atan2_f32",
call    0 never executed
        -:  200:                                    "__ocml_atan2_f64");
    #####:  201:  populateOpPatterns<math::CeilOp>(converter, patterns, "__ocml_ceil_f32",
call    0 never executed
        -:  202:                                   "__ocml_ceil_f64");
    #####:  203:  populateOpPatterns<math::CosOp>(converter, patterns, "__ocml_cos_f32",
call    0 never executed
        -:  204:                                  "__ocml_cos_f64");
    #####:  205:  populateOpPatterns<math::ExpOp>(converter, patterns, "__ocml_exp_f32",
call    0 never executed
        -:  206:                                  "__ocml_exp_f64");
    #####:  207:  populateOpPatterns<math::Exp2Op>(converter, patterns, "__ocml_exp2_f32",
call    0 never executed
        -:  208:                                   "__ocml_exp2_f64");
    #####:  209:  populateOpPatterns<math::ExpM1Op>(converter, patterns, "__ocml_expm1_f32",
call    0 never executed
        -:  210:                                    "__ocml_expm1_f64");
    #####:  211:  populateOpPatterns<math::FloorOp>(converter, patterns, "__ocml_floor_f32",
call    0 never executed
        -:  212:                                    "__ocml_floor_f64");
    #####:  213:  populateOpPatterns<math::LogOp>(converter, patterns, "__ocml_log_f32",
call    0 never executed
        -:  214:                                  "__ocml_log_f64");
    #####:  215:  populateOpPatterns<math::Log10Op>(converter, patterns, "__ocml_log10_f32",
call    0 never executed
        -:  216:                                    "__ocml_log10_f64");
    #####:  217:  populateOpPatterns<math::Log1pOp>(converter, patterns, "__ocml_log1p_f32",
call    0 never executed
        -:  218:                                    "__ocml_log1p_f64");
    #####:  219:  populateOpPatterns<math::Log2Op>(converter, patterns, "__ocml_log2_f32",
call    0 never executed
        -:  220:                                   "__ocml_log2_f64");
    #####:  221:  populateOpPatterns<math::PowFOp>(converter, patterns, "__ocml_pow_f32",
call    0 never executed
        -:  222:                                   "__ocml_pow_f64");
    #####:  223:  populateOpPatterns<math::RsqrtOp>(converter, patterns, "__ocml_rsqrt_f32",
call    0 never executed
        -:  224:                                    "__ocml_rsqrt_f64");
    #####:  225:  populateOpPatterns<math::SinOp>(converter, patterns, "__ocml_sin_f32",
call    0 never executed
        -:  226:                                  "__ocml_sin_f64");
    #####:  227:  populateOpPatterns<math::SqrtOp>(converter, patterns, "__ocml_sqrt_f32",
call    0 never executed
        -:  228:                                   "__ocml_sqrt_f64");
    #####:  229:  populateOpPatterns<math::TanhOp>(converter, patterns, "__ocml_tanh_f32",
call    0 never executed
        -:  230:                                   "__ocml_tanh_f64");
    #####:  231:}
        -:  232:
        -:  233:std::unique_ptr<OperationPass<gpu::GPUModuleOp>>
function _ZN4mlir31createLowerGpuOpsToROCDLOpsPassERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjbNS_3gpu3amd7RuntimeE called 116727 returned 100% blocks executed 100%
   116727:  234:mlir::createLowerGpuOpsToROCDLOpsPass(const std::string &chipset,
        -:  235:                                      unsigned indexBitwidth,
        -:  236:                                      bool useBarePtrCallConv,
        -:  237:                                      gpu::amd::Runtime runtime) {
   116727:  238:  return std::make_unique<LowerGpuOpsToROCDLOpsPass>(
call    0 returned 100%
   116727:  239:      chipset, indexBitwidth, useBarePtrCallConv, runtime);
        -:  240:}
