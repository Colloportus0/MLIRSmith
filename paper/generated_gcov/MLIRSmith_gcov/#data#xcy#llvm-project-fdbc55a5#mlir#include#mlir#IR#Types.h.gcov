        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/IR/Types.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:116169
        -:    1://===- Types.h - MLIR Type Classes ------------------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef MLIR_IR_TYPES_H
        -:   10:#define MLIR_IR_TYPES_H
        -:   11:
        -:   12:#include "mlir/IR/TypeSupport.h"
        -:   13:#include "llvm/ADT/ArrayRef.h"
        -:   14:#include "llvm/ADT/DenseMapInfo.h"
        -:   15:#include "llvm/Support/PointerLikeTypeTraits.h"
        -:   16:
        -:   17:namespace mlir {
        -:   18:class AsmState;
        -:   19:
        -:   20:/// Instances of the Type class are uniqued, have an immutable identifier and an
        -:   21:/// optional mutable component.  They wrap a pointer to the storage object owned
        -:   22:/// by MLIRContext.  Therefore, instances of Type are passed around by value.
        -:   23:///
        -:   24:/// Some types are "primitives" meaning they do not have any parameters, for
        -:   25:/// example the Index type.  Parametric types have additional information that
        -:   26:/// differentiates the types of the same class, for example the Integer type has
        -:   27:/// bitwidth, making i8 and i16 belong to the same kind by be different
        -:   28:/// instances of the IntegerType. Type parameters are part of the unique
        -:   29:/// immutable key.  The mutable component of the type can be modified after the
        -:   30:/// type is created, but cannot affect the identity of the type.
        -:   31:///
        -:   32:/// Types are constructed and uniqued via the 'detail::TypeUniquer' class.
        -:   33:///
        -:   34:/// Derived type classes are expected to implement several required
        -:   35:/// implementation hooks:
        -:   36:///  * Optional:
        -:   37:///    - static LogicalResult verify(
        -:   38:///                                function_ref<InFlightDiagnostic()> emitError,
        -:   39:///                                Args... args)
        -:   40:///      * This method is invoked when calling the 'TypeBase::get/getChecked'
        -:   41:///        methods to ensure that the arguments passed in are valid to construct
        -:   42:///        a type instance with.
        -:   43:///      * This method is expected to return failure if a type cannot be
        -:   44:///        constructed with 'args', success otherwise.
        -:   45:///      * 'args' must correspond with the arguments passed into the
        -:   46:///        'TypeBase::get' call.
        -:   47:///
        -:   48:///
        -:   49:/// Type storage objects inherit from TypeStorage and contain the following:
        -:   50:///    - The dialect that defined the type.
        -:   51:///    - Any parameters of the type.
        -:   52:///    - An optional mutable component.
        -:   53:/// For non-parametric types, a convenience DefaultTypeStorage is provided.
        -:   54:/// Parametric storage types must derive TypeStorage and respect the following:
        -:   55:///    - Define a type alias, KeyTy, to a type that uniquely identifies the
        -:   56:///      instance of the type.
        -:   57:///      * The key type must be constructible from the values passed into the
        -:   58:///        detail::TypeUniquer::get call.
        -:   59:///      * If the KeyTy does not have an llvm::DenseMapInfo specialization, the
        -:   60:///        storage class must define a hashing method:
        -:   61:///         'static unsigned hashKey(const KeyTy &)'
        -:   62:///
        -:   63:///    - Provide a method, 'bool operator==(const KeyTy &) const', to
        -:   64:///      compare the storage instance against an instance of the key type.
        -:   65:///
        -:   66:///    - Provide a static construction method:
        -:   67:///        'DerivedStorage *construct(TypeStorageAllocator &, const KeyTy &key)'
        -:   68:///      that builds a unique instance of the derived storage. The arguments to
        -:   69:///      this function are an allocator to store any uniqued data within the
        -:   70:///      context and the key type for this storage.
        -:   71:///
        -:   72:///    - If they have a mutable component, this component must not be a part of
        -:   73:///      the key.
        -:   74:class Type {
        -:   75:public:
        -:   76:  /// Utility class for implementing types.
        -:   77:  template <typename ConcreteType, typename BaseType, typename StorageType,
        -:   78:            template <typename T> class... Traits>
        -:   79:  using TypeBase = detail::StorageUserBase<ConcreteType, BaseType, StorageType,
        -:   80:                                           detail::TypeUniquer, Traits...>;
        -:   81:
        -:   82:  using ImplType = TypeStorage;
        -:   83:
        -:   84:  using AbstractTy = AbstractType;
        -:   85:
        -:   86:  constexpr Type() = default;
    #####:   87:  /* implicit */ Type(const ImplType *impl)
        -:   88:      : impl(const_cast<ImplType *>(impl)) {}
        -:   89:
        -:   90:  Type(const Type &other) = default;
        -:   91:  Type &operator=(const Type &other) = default;
        -:   92:
        -:   93:  bool operator==(Type other) const { return impl == other.impl; }
        -:   94:  bool operator!=(Type other) const { return !(*this == other); }
        -:   95:  explicit operator bool() const { return impl; }
        -:   96:
        -:   97:  bool operator!() const { return impl == nullptr; }
        -:   98:
        -:   99:  template <typename... Tys>
        -:  100:  bool isa() const;
        -:  101:  template <typename... Tys>
        -:  102:  bool isa_and_nonnull() const;
        -:  103:  template <typename U>
        -:  104:  U dyn_cast() const;
        -:  105:  template <typename U>
        -:  106:  U dyn_cast_or_null() const;
        -:  107:  template <typename U>
        -:  108:  U cast() const;
        -:  109:
        -:  110:  // Support type casting Type to itself.
        -:  111:  static bool classof(Type) { return true; }
        -:  112:
        -:  113:  /// Return a unique identifier for the concrete type. This is used to support
        -:  114:  /// dynamic type casting.
    #####:  115:  TypeID getTypeID() { return impl->getAbstractType().getTypeID(); }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  116:
        -:  117:  /// Return the MLIRContext in which this type was uniqued.
        -:  118:  MLIRContext *getContext() const;
        -:  119:
        -:  120:  /// Get the dialect this type is registered to.
        -:  121:  Dialect &getDialect() const { return impl->getAbstractType().getDialect(); }
        -:  122:
        -:  123:  // Convenience predicates.  This is only for floating point types,
        -:  124:  // derived types should use isa/dyn_cast.
        -:  125:  bool isIndex() const;
        -:  126:  bool isFloat8E5M2() const;
        -:  127:  bool isBF16() const;
        -:  128:  bool isF16() const;
        -:  129:  bool isF32() const;
        -:  130:  bool isF64() const;
        -:  131:  bool isF80() const;
        -:  132:  bool isF128() const;
        -:  133:
        -:  134:  /// Return true if this is an integer type with the specified width.
        -:  135:  bool isInteger(unsigned width) const;
        -:  136:  /// Return true if this is a signless integer type (with the specified width).
        -:  137:  bool isSignlessInteger() const;
        -:  138:  bool isSignlessInteger(unsigned width) const;
        -:  139:  /// Return true if this is a signed integer type (with the specified width).
        -:  140:  bool isSignedInteger() const;
        -:  141:  bool isSignedInteger(unsigned width) const;
        -:  142:  /// Return true if this is an unsigned integer type (with the specified
        -:  143:  /// width).
        -:  144:  bool isUnsignedInteger() const;
        -:  145:  bool isUnsignedInteger(unsigned width) const;
        -:  146:
        -:  147:  /// Return the bit width of an integer or a float type, assert failure on
        -:  148:  /// other types.
        -:  149:  unsigned getIntOrFloatBitWidth() const;
        -:  150:
        -:  151:  /// Return true if this is a signless integer or index type.
        -:  152:  bool isSignlessIntOrIndex() const;
        -:  153:  /// Return true if this is a signless integer, index, or float type.
        -:  154:  bool isSignlessIntOrIndexOrFloat() const;
        -:  155:  /// Return true of this is a signless integer or a float type.
        -:  156:  bool isSignlessIntOrFloat() const;
        -:  157:
        -:  158:  /// Return true if this is an integer (of any signedness) or an index type.
        -:  159:  bool isIntOrIndex() const;
        -:  160:  /// Return true if this is an integer (of any signedness) or a float type.
        -:  161:  bool isIntOrFloat() const;
        -:  162:  /// Return true if this is an integer (of any signedness), index, or float
        -:  163:  /// type.
        -:  164:  bool isIntOrIndexOrFloat() const;
        -:  165:
        -:  166:  /// Print the current type.
        -:  167:  void print(raw_ostream &os) const;
        -:  168:  void print(raw_ostream &os, AsmState &state) const;
        -:  169:  void dump() const;
        -:  170:
        -:  171:  friend ::llvm::hash_code hash_value(Type arg);
        -:  172:
        -:  173:  /// Methods for supporting PointerLikeTypeTraits.
        -:  174:  const void *getAsOpaquePointer() const {
        -:  175:    return static_cast<const void *>(impl);
        -:  176:  }
    #####:  177:  static Type getFromOpaquePointer(const void *pointer) {
    #####:  178:    return Type(reinterpret_cast<ImplType *>(const_cast<void *>(pointer)));
        -:  179:  }
        -:  180:
        -:  181:  /// Returns true if the type was registered with a particular trait.
        -:  182:  template <template <typename T> class Trait>
        -:  183:  bool hasTrait() {
        -:  184:    return getAbstractType().hasTrait<Trait>();
        -:  185:  }
        -:  186:
        -:  187:  /// Return the abstract type descriptor for this type.
        -:  188:  const AbstractTy &getAbstractType() { return impl->getAbstractType(); }
        -:  189:
        -:  190:  /// Return the Type implementation.
    #####:  191:  ImplType *getImpl() const { return impl; }
        -:  192:
        -:  193:protected:
        -:  194:  ImplType *impl{nullptr};
        -:  195:};
        -:  196:
        -:  197:inline raw_ostream &operator<<(raw_ostream &os, Type type) {
        -:  198:  type.print(os);
        -:  199:  return os;
        -:  200:}
        -:  201:
        -:  202://===----------------------------------------------------------------------===//
        -:  203:// TypeTraitBase
        -:  204://===----------------------------------------------------------------------===//
        -:  205:
        -:  206:namespace TypeTrait {
        -:  207:/// This class represents the base of a type trait.
        -:  208:template <typename ConcreteType, template <typename> class TraitType>
        -:  209:using TraitBase = detail::StorageUserTraitBase<ConcreteType, TraitType>;
        -:  210:} // namespace TypeTrait
        -:  211:
        -:  212://===----------------------------------------------------------------------===//
        -:  213:// TypeInterface
        -:  214://===----------------------------------------------------------------------===//
        -:  215:
        -:  216:/// This class represents the base of a type interface. See the definition  of
        -:  217:/// `detail::Interface` for requirements on the `Traits` type.
        -:  218:template <typename ConcreteType, typename Traits>
        -:  219:class TypeInterface : public detail::Interface<ConcreteType, Type, Traits, Type,
        -:  220:                                               TypeTrait::TraitBase> {
        -:  221:public:
        -:  222:  using Base = TypeInterface<ConcreteType, Traits>;
        -:  223:  using InterfaceBase =
        -:  224:      detail::Interface<ConcreteType, Type, Traits, Type, TypeTrait::TraitBase>;
        -:  225:  using InterfaceBase::InterfaceBase;
        -:  226:
        -:  227:private:
        -:  228:  /// Returns the impl interface instance for the given type.
        -:  229:  static typename InterfaceBase::Concept *getInterfaceFor(Type type) {
        -:  230:    return type.getAbstractType().getInterface<ConcreteType>();
        -:  231:  }
        -:  232:
        -:  233:  /// Allow access to 'getInterfaceFor'.
        -:  234:  friend InterfaceBase;
        -:  235:};
        -:  236:
        -:  237://===----------------------------------------------------------------------===//
        -:  238:// Core TypeTrait
        -:  239://===----------------------------------------------------------------------===//
        -:  240:
        -:  241:/// This trait is used to determine if a type is mutable or not. It is attached
        -:  242:/// on a type if the corresponding ImplType defines a `mutate` function with
        -:  243:/// a proper signature.
        -:  244:namespace TypeTrait {
        -:  245:template <typename ConcreteType>
        -:  246:using IsMutable = detail::StorageUserTrait::IsMutable<ConcreteType>;
        -:  247:} // namespace TypeTrait
        -:  248:
        -:  249://===----------------------------------------------------------------------===//
        -:  250:// Type Utils
        -:  251://===----------------------------------------------------------------------===//
        -:  252:
        -:  253:// Make Type hashable.
        -:  254:inline ::llvm::hash_code hash_value(Type arg) {
        -:  255:  return DenseMapInfo<const Type::ImplType *>::getHashValue(arg.impl);
        -:  256:}
        -:  257:
        -:  258:template <typename... Tys>
        -:  259:bool Type::isa() const {
        -:  260:  return llvm::isa<Tys...>(*this);
        -:  261:}
        -:  262:
        -:  263:template <typename... Tys>
        -:  264:bool Type::isa_and_nonnull() const {
        -:  265:  return llvm::isa_and_present<Tys...>(*this);
        -:  266:}
        -:  267:
        -:  268:template <typename U>
        -:  269:U Type::dyn_cast() const {
        -:  270:  return llvm::dyn_cast<U>(*this);
        -:  271:}
        -:  272:
        -:  273:template <typename U>
        -:  274:U Type::dyn_cast_or_null() const {
        -:  275:  return llvm::dyn_cast_or_null<U>(*this);
        -:  276:}
        -:  277:
        -:  278:template <typename U>
    #####:  279:U Type::cast() const {
    #####:  280:  return llvm::cast<U>(*this);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  281:}
        -:  282:
        -:  283:} // namespace mlir
        -:  284:
        -:  285:namespace llvm {
        -:  286:
        -:  287:// Type hash just like pointers.
        -:  288:template <>
        -:  289:struct DenseMapInfo<mlir::Type> {
        -:  290:  static mlir::Type getEmptyKey() {
        -:  291:    auto *pointer = llvm::DenseMapInfo<void *>::getEmptyKey();
        -:  292:    return mlir::Type(static_cast<mlir::Type::ImplType *>(pointer));
        -:  293:  }
        -:  294:  static mlir::Type getTombstoneKey() {
        -:  295:    auto *pointer = llvm::DenseMapInfo<void *>::getTombstoneKey();
        -:  296:    return mlir::Type(static_cast<mlir::Type::ImplType *>(pointer));
        -:  297:  }
        -:  298:  static unsigned getHashValue(mlir::Type val) { return mlir::hash_value(val); }
        -:  299:  static bool isEqual(mlir::Type LHS, mlir::Type RHS) { return LHS == RHS; }
        -:  300:};
        -:  301:template <typename T>
        -:  302:struct DenseMapInfo<T, std::enable_if_t<std::is_base_of<mlir::Type, T>::value &&
        -:  303:                                        !mlir::detail::IsInterface<T>::value>>
        -:  304:    : public DenseMapInfo<mlir::Type> {
        -:  305:  static T getEmptyKey() {
        -:  306:    const void *pointer = llvm::DenseMapInfo<const void *>::getEmptyKey();
        -:  307:    return T::getFromOpaquePointer(pointer);
        -:  308:  }
        -:  309:  static T getTombstoneKey() {
        -:  310:    const void *pointer = llvm::DenseMapInfo<const void *>::getTombstoneKey();
        -:  311:    return T::getFromOpaquePointer(pointer);
        -:  312:  }
        -:  313:};
        -:  314:
        -:  315:/// We align TypeStorage by 8, so allow LLVM to steal the low bits.
        -:  316:template <>
        -:  317:struct PointerLikeTypeTraits<mlir::Type> {
        -:  318:public:
        -:  319:  static inline void *getAsVoidPointer(mlir::Type I) {
        -:  320:    return const_cast<void *>(I.getAsOpaquePointer());
        -:  321:  }
    #####:  322:  static inline mlir::Type getFromVoidPointer(void *P) {
    #####:  323:    return mlir::Type::getFromOpaquePointer(P);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
call   154 never executed
call   155 never executed
call   156 never executed
call   157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
call   165 never executed
call   166 never executed
call   167 never executed
call   168 never executed
call   169 never executed
call   170 never executed
        -:  324:  }
        -:  325:  static constexpr int NumLowBitsAvailable = 3;
        -:  326:};
        -:  327:
        -:  328:/// Add support for llvm style casts.
        -:  329:/// We provide a cast between To and From if From is mlir::Type or derives from
        -:  330:/// it
        -:  331:template <typename To, typename From>
        -:  332:struct CastInfo<
        -:  333:    To, From,
        -:  334:    std::enable_if_t<std::is_same_v<mlir::Type, std::remove_const_t<From>> ||
        -:  335:                     std::is_base_of_v<mlir::Type, From>>>
        -:  336:    : NullableValueCastFailed<To>,
        -:  337:      DefaultDoCastIfPossible<To, From, CastInfo<To, From>> {
        -:  338:  /// Arguments are taken as mlir::Type here and not as `From`, because when
        -:  339:  /// casting from an intermediate type of the hierarchy to one of its children,
        -:  340:  /// the val.getTypeID() inside T::classof will use the static getTypeID of the
        -:  341:  /// parent instead of the non-static Type::getTypeID that returns the dynamic
        -:  342:  /// ID. This means that T::classof would end up comparing the static TypeID of
        -:  343:  /// the children to the static TypeID of its parent, making it impossible to
        -:  344:  /// downcast from the parent to the child.
    #####:  345:  static inline bool isPossible(mlir::Type ty) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  346:    /// Return a constant true instead of a dynamic true when casting to self or
        -:  347:    /// up the hierarchy.
        -:  348:    return std::is_same_v<To, std::remove_const_t<From>> ||
    #####:  349:           std::is_base_of_v<To, From> || To::classof(ty);
call    0 never executed
        -:  350:  }
    #####:  351:  static inline To doCast(mlir::Type ty) { return To(ty.getImpl()); }
call    0 never executed
call    1 never executed
        -:  352:};
        -:  353:
        -:  354:} // namespace llvm
        -:  355:
        -:  356:#endif // MLIR_IR_TYPES_H
