        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/AMX/IR/AMXDialect.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/AMX/IR/CMakeFiles/obj.MLIRAMXDialect.dir/AMXDialect.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/AMX/IR/CMakeFiles/obj.MLIRAMXDialect.dir/AMXDialect.cpp.gcda
        -:    0:Runs:116157
        -:    1://===- AMXDialect.cpp - MLIR AMX ops implementation -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file implements the AMX dialect and its operations.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Dialect/AMX/AMXDialect.h"
        -:   14:#include "mlir/Dialect/LLVMIR/LLVMTypes.h"
        -:   15:#include "mlir/IR/Builders.h"
        -:   16:#include "mlir/IR/OpImplementation.h"
        -:   17:#include "mlir/IR/TypeUtilities.h"
        -:   18:
        -:   19:using namespace mlir;
        -:   20:
        -:   21:#include "mlir/Dialect/AMX/AMXDialect.cpp.inc"
        -:   22:
function _ZN4mlir3amx10AMXDialect10initializeEv called 0 returned 0% blocks executed 0%
    #####:   23:void amx::AMXDialect::initialize() {
    #####:   24:  addOperations<
        -:   25:#define GET_OP_LIST
        -:   26:#include "mlir/Dialect/AMX/AMX.cpp.inc"
    #####:   27:      >();
call    0 never executed
call    1 never executed
    #####:   28:}
        -:   29:
        -:   30:/// Verify that AMX supports the implied tile shape.
function _ZL14verifyTileSizePN4mlir9OperationENS_10VectorTypeE called 0 returned 0% blocks executed 0%
    #####:   31:static LogicalResult verifyTileSize(Operation *op, VectorType tp) {
    #####:   32:  const unsigned kMaxRows = 16;
    #####:   33:  const unsigned kBitsPerRow = 64 * 8;
    #####:   34:  unsigned col = tp.getDimSize(1) * tp.getElementType().getIntOrFloatBitWidth();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   35:  if (tp.getDimSize(0) > kMaxRows)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:    return op->emitOpError("bad row height: ") << tp.getDimSize(0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   37:  if (col > kBitsPerRow || col & 0x1f)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   38:    return op->emitOpError("bad column width: ") << (col >> 3);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   39:  return success();
        -:   40:}
        -:   41:
        -:   42:/// Verify that AMX supports the multiplication.
function _ZL15verifyMultShapePN4mlir9OperationENS_10VectorTypeES2_S2_j called 0 returned 0% blocks executed 0%
    #####:   43:static LogicalResult verifyMultShape(Operation *op, VectorType atp,
        -:   44:                                     VectorType btp, VectorType ctp,
        -:   45:                                     unsigned scale) {
    #####:   46:  unsigned am = atp.getDimSize(0), ak = atp.getDimSize(1) >> scale;
call    0 never executed
call    1 never executed
    #####:   47:  unsigned bk = btp.getDimSize(0), bn = btp.getDimSize(1) >> scale;
call    0 never executed
call    1 never executed
    #####:   48:  unsigned cm = ctp.getDimSize(0), cn = ctp.getDimSize(1);
call    0 never executed
call    1 never executed
    #####:   49:  if (cm != am || cn != bn || ak != bk)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   50:    return op->emitOpError("bad mult shape: ")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   51:           << cm << " x " << cn << " x " << ak;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:   52:  return success();
        -:   53:}
        -:   54:
function _ZN4mlir3amx10TileZeroOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   55:LogicalResult amx::TileZeroOp::verify() {
    #####:   56:  return verifyTileSize(*this, getVectorType());
call    0 never executed
call    1 never executed
        -:   57:}
        -:   58:
function _ZN4mlir3amx10TileLoadOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   59:LogicalResult amx::TileLoadOp::verify() {
    #####:   60:  unsigned rank = getMemRefType().getRank();
call    0 never executed
call    1 never executed
    #####:   61:  if (getIndices().size() != rank)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:    return emitOpError("requires ") << rank << " indices";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   63:  return verifyTileSize(*this, getVectorType());
call    0 never executed
call    1 never executed
        -:   64:}
        -:   65:
function _ZN4mlir3amx11TileStoreOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   66:LogicalResult amx::TileStoreOp::verify() {
    #####:   67:  unsigned rank = getMemRefType().getRank();
call    0 never executed
call    1 never executed
    #####:   68:  if (getIndices().size() != rank)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:    return emitOpError("requires ") << rank << " indices";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:   70:  return verifyTileSize(*this, getVectorType());
call    0 never executed
call    1 never executed
        -:   71:}
        -:   72:
function _ZN4mlir3amx10TileMulFOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   73:LogicalResult amx::TileMulFOp::verify() {
    #####:   74:  VectorType aType = getLhsVectorType();
call    0 never executed
    #####:   75:  VectorType bType = getRhsVectorType();
call    0 never executed
    #####:   76:  VectorType cType = getVectorType();
call    0 never executed
    #####:   77:  if (failed(verifyTileSize(*this, aType)) ||
call    0 never executed
    #####:   78:      failed(verifyTileSize(*this, bType)) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:      failed(verifyTileSize(*this, cType)) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   80:      failed(verifyMultShape(*this, aType, bType, cType, 1)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:    return failure();
    #####:   82:  Type ta = aType.getElementType();
call    0 never executed
    #####:   83:  Type tb = bType.getElementType();
call    0 never executed
    #####:   84:  Type tc = cType.getElementType();
call    0 never executed
    #####:   85:  if (!ta.isBF16() || !tb.isBF16() || !tc.isF32())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   86:    return emitOpError("unsupported type combination");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   87:  return success();
        -:   88:}
        -:   89:
function _ZN4mlir3amx10TileMulIOp6verifyEv called 0 returned 0% blocks executed 0%
    #####:   90:LogicalResult amx::TileMulIOp::verify() {
    #####:   91:  VectorType aType = getLhsVectorType();
call    0 never executed
    #####:   92:  VectorType bType = getRhsVectorType();
call    0 never executed
    #####:   93:  VectorType cType = getVectorType();
call    0 never executed
    #####:   94:  if (failed(verifyTileSize(*this, aType)) ||
call    0 never executed
    #####:   95:      failed(verifyTileSize(*this, bType)) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:      failed(verifyTileSize(*this, cType)) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   97:      failed(verifyMultShape(*this, aType, bType, cType, 2)))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:    return failure();
    #####:   99:  Type ta = aType.getElementType();
call    0 never executed
    #####:  100:  Type tb = bType.getElementType();
call    0 never executed
    #####:  101:  Type tc = cType.getElementType();
call    0 never executed
    #####:  102:  if (!ta.isInteger(8) || !tb.isInteger(8) || !tc.isInteger(32))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  103:    return emitOpError("unsupported type combination");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  104:  return success();
        -:  105:}
        -:  106:
        -:  107:#define GET_OP_CLASSES
        -:  108:#include "mlir/Dialect/AMX/AMX.cpp.inc"
