        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Conversion/TosaToSCF/TosaToSCF.cpp
        -:    0:Graph:../tools/mlir/lib/Conversion/TosaToSCF/CMakeFiles/obj.MLIRTosaToSCF.dir/TosaToSCF.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Conversion/TosaToSCF/CMakeFiles/obj.MLIRTosaToSCF.dir/TosaToSCF.cpp.gcda
        -:    0:Runs:116161
        -:    1://===- TosaToSCF.cpp - Lowering Tosa to SCF Dialect -----------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// These rewriters lower from the Tosa to the SCF dialect.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/Conversion/TosaToSCF/TosaToSCF.h"
        -:   14:#include "mlir/Dialect/SCF/IR/SCF.h"
        -:   15:#include "mlir/Dialect/Tensor/IR/Tensor.h"
        -:   16:#include "mlir/Dialect/Tosa/IR/TosaOps.h"
        -:   17:#include "mlir/IR/BlockAndValueMapping.h"
        -:   18:#include "mlir/IR/PatternMatch.h"
        -:   19:#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
        -:   20:
        -:   21:using namespace mlir;
        -:   22:using namespace tosa;
        -:   23:
function _ZL12inlineIfCaseRN4mlir6RegionES1_NS_12OperandRangeERNS_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   24:static void inlineIfCase(Region &srcRegion, Region &dstRegion,
        -:   25:                         OperandRange operands, PatternRewriter &rewriter) {
    #####:   26:  rewriter.cloneRegionBefore(srcRegion, &dstRegion.front());
call    0 never executed
call    1 never executed
    #####:   27:  rewriter.eraseBlock(&dstRegion.back());
call    0 never executed
call    1 never executed
        -:   28:
    #####:   29:  Block *headBlock = &dstRegion.front();
call    0 never executed
    #####:   30:  for (auto it : llvm::zip(headBlock->getArguments(), operands))
branch  0 never executed
branch  1 never executed
    #####:   31:    std::get<0>(it).replaceAllUsesWith(std::get<1>(it));
call    0 never executed
        -:   32:
    #####:   33:  auto yield = cast<YieldOp>(headBlock->getTerminator());
call    0 never executed
call    1 never executed
    #####:   34:  rewriter.setInsertionPoint(yield);
call    0 never executed
    #####:   35:  rewriter.create<scf::YieldOp>(yield.getLoc(), yield.getInputs());
call    0 never executed
call    1 never executed
    #####:   36:  rewriter.eraseOp(yield);
call    0 never executed
        -:   37:
    #####:   38:  headBlock->eraseArguments(0, headBlock->getNumArguments());
call    0 never executed
    #####:   39:}
        -:   40:
function _ZL15inlineWhileCaseRN4mlir6RegionES1_RNS_15PatternRewriterEb called 0 returned 0% blocks executed 0%
    #####:   41:static void inlineWhileCase(Region &srcRegion, Region &dstRegion,
        -:   42:                            PatternRewriter &rewriter, bool isCond) {
    #####:   43:  rewriter.cloneRegionBefore(srcRegion, &dstRegion.back());
call    0 never executed
call    1 never executed
    #####:   44:  rewriter.eraseBlock(&dstRegion.back());
call    0 never executed
call    1 never executed
        -:   45:
    #####:   46:  Block *headBlock = &dstRegion.front();
call    0 never executed
        -:   47:
    #####:   48:  auto yield = cast<YieldOp>(headBlock->getTerminator());
call    0 never executed
call    1 never executed
    #####:   49:  rewriter.setInsertionPoint(yield);
call    0 never executed
    #####:   50:  if (isCond) {
branch  0 never executed
branch  1 never executed
    #####:   51:    auto condition =
    #####:   52:        rewriter.create<tensor::ExtractOp>(yield.getLoc(), yield.getOperand(0));
call    0 never executed
call    1 never executed
    #####:   53:    rewriter.create<scf::ConditionOp>(yield.getLoc(), condition,
    #####:   54:                                      headBlock->getArguments());
call    0 never executed
        -:   55:  } else {
    #####:   56:    rewriter.setInsertionPoint(yield);
call    0 never executed
    #####:   57:    rewriter.create<scf::YieldOp>(yield.getLoc(), yield.getInputs());
call    0 never executed
call    1 never executed
        -:   58:  }
    #####:   59:  rewriter.eraseOp(yield);
call    0 never executed
    #####:   60:}
        -:   61:
        -:   62:namespace {
        -:   63:
        -:   64:class IfOpConverter : public OpRewritePattern<tosa::IfOp> {
        -:   65:public:
        -:   66:  using OpRewritePattern<tosa::IfOp>::OpRewritePattern;
        -:   67:
function _ZNK12_GLOBAL__N_113IfOpConverter15matchAndRewriteEN4mlir4tosa4IfOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   68:  LogicalResult matchAndRewrite(tosa::IfOp op,
        -:   69:                                PatternRewriter &rewriter) const final {
    #####:   70:    auto condition =
    #####:   71:        rewriter.create<tensor::ExtractOp>(op.getLoc(), op.getCond());
call    0 never executed
call    1 never executed
    #####:   72:    auto newIf = rewriter.create<scf::IfOp>(op.getLoc(), op.getResultTypes(),
    #####:   73:                                            condition, true);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   74:
    #####:   75:    inlineIfCase(op.getThenBranch(), newIf.getThenRegion(), op.getInputs(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   76:                 rewriter);
    #####:   77:    inlineIfCase(op.getElseBranch(), newIf.getElseRegion(), op.getInputs(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   78:                 rewriter);
        -:   79:
    #####:   80:    rewriter.replaceOp(op, newIf.getResults());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   81:    return success();
        -:   82:  }
        -:   83:};
        -:   84:
        -:   85:class WhileOpConverter : public OpRewritePattern<tosa::WhileOp> {
        -:   86:public:
        -:   87:  using OpRewritePattern<tosa::WhileOp>::OpRewritePattern;
        -:   88:
function _ZNK12_GLOBAL__N_116WhileOpConverter15matchAndRewriteEN4mlir4tosa7WhileOpERNS1_15PatternRewriterE called 0 returned 0% blocks executed 0%
    #####:   89:  LogicalResult matchAndRewrite(tosa::WhileOp op,
        -:   90:                                PatternRewriter &rewriter) const final {
    #####:   91:    auto newWhile = rewriter.create<scf::WhileOp>(
    #####:   92:        op.getLoc(), op.getResultTypes(), op.getInputs());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   93:    rewriter.createBlock(&newWhile.getBefore());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   94:    rewriter.createBlock(&newWhile.getAfter());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   95:
    #####:   96:    inlineWhileCase(op.getCond(), newWhile.getBefore(), rewriter, true);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   97:    inlineWhileCase(op.getBody(), newWhile.getAfter(), rewriter, false);
call    0 never executed
call    1 never executed
call    2 never executed
        -:   98:
    #####:   99:    rewriter.replaceOp(op, newWhile.getResults());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  100:
    #####:  101:    return success();
        -:  102:  }
        -:  103:};
        -:  104:
        -:  105:} // namespace
        -:  106:
function _ZN4mlir4tosa35populateTosaToSCFConversionPatternsEPNS_17RewritePatternSetE called 352 returned 100% blocks executed 100%
      352:  107:void mlir::tosa::populateTosaToSCFConversionPatterns(
        -:  108:    RewritePatternSet *patterns) {
      352:  109:  patterns->add<IfOpConverter>(patterns->getContext());
call    0 returned 100%
      352:  110:  patterns->add<WhileOpConverter>(patterns->getContext());
call    0 returned 100%
      352:  111:}
