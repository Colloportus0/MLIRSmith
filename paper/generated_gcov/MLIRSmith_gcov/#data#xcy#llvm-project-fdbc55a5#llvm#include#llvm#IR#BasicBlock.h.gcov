        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/llvm/include/llvm/IR/BasicBlock.h
        -:    0:Graph:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/CMakeFiles/obj.MLIRLLVMToLLVMIRTranslation.dir/LLVMToLLVMIRTranslation.cpp.gcda
        -:    0:Runs:116169
        -:    1://===- llvm/BasicBlock.h - Represent a basic block in the VM ----*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file contains the declaration of the BasicBlock class.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#ifndef LLVM_IR_BASICBLOCK_H
        -:   14:#define LLVM_IR_BASICBLOCK_H
        -:   15:
        -:   16:#include "llvm-c/Types.h"
        -:   17:#include "llvm/ADT/Twine.h"
        -:   18:#include "llvm/ADT/ilist.h"
        -:   19:#include "llvm/ADT/ilist_node.h"
        -:   20:#include "llvm/ADT/iterator.h"
        -:   21:#include "llvm/ADT/iterator_range.h"
        -:   22:#include "llvm/IR/Instruction.h"
        -:   23:#include "llvm/IR/SymbolTableListTraits.h"
        -:   24:#include "llvm/IR/Value.h"
        -:   25:#include <cassert>
        -:   26:#include <cstddef>
        -:   27:#include <iterator>
        -:   28:
        -:   29:namespace llvm {
        -:   30:
        -:   31:class AssemblyAnnotationWriter;
        -:   32:class CallInst;
        -:   33:class Function;
        -:   34:class LandingPadInst;
        -:   35:class LLVMContext;
        -:   36:class Module;
        -:   37:class PHINode;
        -:   38:class ValueSymbolTable;
        -:   39:
        -:   40:/// LLVM Basic Block Representation
        -:   41:///
        -:   42:/// This represents a single basic block in LLVM. A basic block is simply a
        -:   43:/// container of instructions that execute sequentially. Basic blocks are Values
        -:   44:/// because they are referenced by instructions such as branches and switch
        -:   45:/// tables. The type of a BasicBlock is "Type::LabelTy" because the basic block
        -:   46:/// represents a label to which a branch can jump.
        -:   47:///
        -:   48:/// A well formed basic block is formed of a list of non-terminating
        -:   49:/// instructions followed by a single terminator instruction. Terminator
        -:   50:/// instructions may not occur in the middle of basic blocks, and must terminate
        -:   51:/// the blocks. The BasicBlock class allows malformed basic blocks to occur
        -:   52:/// because it may be useful in the intermediate stage of constructing or
        -:   53:/// modifying a program. However, the verifier will ensure that basic blocks are
        -:   54:/// "well formed".
        -:   55:class BasicBlock final : public Value, // Basic blocks are data objects also
        -:   56:                         public ilist_node_with_parent<BasicBlock, Function> {
        -:   57:public:
        -:   58:  using InstListType = SymbolTableList<Instruction>;
        -:   59:
        -:   60:private:
        -:   61:  friend class BlockAddress;
        -:   62:  friend class SymbolTableListTraits<BasicBlock>;
        -:   63:
        -:   64:  InstListType InstList;
        -:   65:  Function *Parent;
        -:   66:
        -:   67:  void setParent(Function *parent);
        -:   68:
        -:   69:  /// Constructor.
        -:   70:  ///
        -:   71:  /// If the function parameter is specified, the basic block is automatically
        -:   72:  /// inserted at either the end of the function (if InsertBefore is null), or
        -:   73:  /// before the specified basic block.
        -:   74:  explicit BasicBlock(LLVMContext &C, const Twine &Name = "",
        -:   75:                      Function *Parent = nullptr,
        -:   76:                      BasicBlock *InsertBefore = nullptr);
        -:   77:
        -:   78:public:
        -:   79:  BasicBlock(const BasicBlock &) = delete;
        -:   80:  BasicBlock &operator=(const BasicBlock &) = delete;
        -:   81:  ~BasicBlock();
        -:   82:
        -:   83:  /// Get the context in which this basic block lives.
        -:   84:  LLVMContext &getContext() const;
        -:   85:
        -:   86:  /// Instruction iterators...
        -:   87:  using iterator = InstListType::iterator;
        -:   88:  using const_iterator = InstListType::const_iterator;
        -:   89:  using reverse_iterator = InstListType::reverse_iterator;
        -:   90:  using const_reverse_iterator = InstListType::const_reverse_iterator;
        -:   91:
        -:   92:  /// Creates a new BasicBlock.
        -:   93:  ///
        -:   94:  /// If the Parent parameter is specified, the basic block is automatically
        -:   95:  /// inserted at either the end of the function (if InsertBefore is 0), or
        -:   96:  /// before the specified basic block.
        -:   97:  static BasicBlock *Create(LLVMContext &Context, const Twine &Name = "",
        -:   98:                            Function *Parent = nullptr,
        -:   99:                            BasicBlock *InsertBefore = nullptr) {
        -:  100:    return new BasicBlock(Context, Name, Parent, InsertBefore);
        -:  101:  }
        -:  102:
        -:  103:  /// Return the enclosing method, or null if none.
        -:  104:  const Function *getParent() const { return Parent; }
    #####:  105:        Function *getParent()       { return Parent; }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  106:
        -:  107:  /// Return the module owning the function this basic block belongs to, or
        -:  108:  /// nullptr if the function does not have a module.
        -:  109:  ///
        -:  110:  /// Note: this is undefined behavior if the block does not have a parent.
        -:  111:  const Module *getModule() const;
    #####:  112:  Module *getModule() {
    #####:  113:    return const_cast<Module *>(
    #####:  114:                            static_cast<const BasicBlock *>(this)->getModule());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
        -:  115:  }
        -:  116:
        -:  117:  /// Returns the terminator instruction if the block is well formed or null
        -:  118:  /// if the block is not well formed.
        -:  119:  const Instruction *getTerminator() const LLVM_READONLY {
        -:  120:    if (InstList.empty() || !InstList.back().isTerminator())
        -:  121:      return nullptr;
        -:  122:    return &InstList.back();
        -:  123:  }
        -:  124:  Instruction *getTerminator() {
        -:  125:    return const_cast<Instruction *>(
        -:  126:        static_cast<const BasicBlock *>(this)->getTerminator());
        -:  127:  }
        -:  128:
        -:  129:  /// Returns the call instruction calling \@llvm.experimental.deoptimize
        -:  130:  /// prior to the terminating return instruction of this basic block, if such
        -:  131:  /// a call is present.  Otherwise, returns null.
        -:  132:  const CallInst *getTerminatingDeoptimizeCall() const;
        -:  133:  CallInst *getTerminatingDeoptimizeCall() {
        -:  134:    return const_cast<CallInst *>(
        -:  135:         static_cast<const BasicBlock *>(this)->getTerminatingDeoptimizeCall());
        -:  136:  }
        -:  137:
        -:  138:  /// Returns the call instruction calling \@llvm.experimental.deoptimize
        -:  139:  /// that is present either in current basic block or in block that is a unique
        -:  140:  /// successor to current block, if such call is present. Otherwise, returns null.
        -:  141:  const CallInst *getPostdominatingDeoptimizeCall() const;
        -:  142:  CallInst *getPostdominatingDeoptimizeCall() {
        -:  143:    return const_cast<CallInst *>(
        -:  144:         static_cast<const BasicBlock *>(this)->getPostdominatingDeoptimizeCall());
        -:  145:  }
        -:  146:
        -:  147:  /// Returns the call instruction marked 'musttail' prior to the terminating
        -:  148:  /// return instruction of this basic block, if such a call is present.
        -:  149:  /// Otherwise, returns null.
        -:  150:  const CallInst *getTerminatingMustTailCall() const;
        -:  151:  CallInst *getTerminatingMustTailCall() {
        -:  152:    return const_cast<CallInst *>(
        -:  153:           static_cast<const BasicBlock *>(this)->getTerminatingMustTailCall());
        -:  154:  }
        -:  155:
        -:  156:  /// Returns a pointer to the first instruction in this block that is not a
        -:  157:  /// PHINode instruction.
        -:  158:  ///
        -:  159:  /// When adding instructions to the beginning of the basic block, they should
        -:  160:  /// be added before the returned value, not before the first instruction,
        -:  161:  /// which might be PHI. Returns 0 is there's no non-PHI instruction.
        -:  162:  const Instruction* getFirstNonPHI() const;
        -:  163:  Instruction* getFirstNonPHI() {
        -:  164:    return const_cast<Instruction *>(
        -:  165:                       static_cast<const BasicBlock *>(this)->getFirstNonPHI());
        -:  166:  }
        -:  167:
        -:  168:  /// Returns a pointer to the first instruction in this block that is not a
        -:  169:  /// PHINode or a debug intrinsic, or any pseudo operation if \c SkipPseudoOp
        -:  170:  /// is true.
        -:  171:  const Instruction *getFirstNonPHIOrDbg(bool SkipPseudoOp = true) const;
        -:  172:  Instruction *getFirstNonPHIOrDbg(bool SkipPseudoOp = true) {
        -:  173:    return const_cast<Instruction *>(
        -:  174:        static_cast<const BasicBlock *>(this)->getFirstNonPHIOrDbg(
        -:  175:            SkipPseudoOp));
        -:  176:  }
        -:  177:
        -:  178:  /// Returns a pointer to the first instruction in this block that is not a
        -:  179:  /// PHINode, a debug intrinsic, or a lifetime intrinsic, or any pseudo
        -:  180:  /// operation if \c SkipPseudoOp is true.
        -:  181:  const Instruction *
        -:  182:  getFirstNonPHIOrDbgOrLifetime(bool SkipPseudoOp = true) const;
        -:  183:  Instruction *getFirstNonPHIOrDbgOrLifetime(bool SkipPseudoOp = true) {
        -:  184:    return const_cast<Instruction *>(
        -:  185:        static_cast<const BasicBlock *>(this)->getFirstNonPHIOrDbgOrLifetime(
        -:  186:            SkipPseudoOp));
        -:  187:  }
        -:  188:
        -:  189:  /// Returns an iterator to the first instruction in this block that is
        -:  190:  /// suitable for inserting a non-PHI instruction.
        -:  191:  ///
        -:  192:  /// In particular, it skips all PHIs and LandingPad instructions.
        -:  193:  const_iterator getFirstInsertionPt() const;
        -:  194:  iterator getFirstInsertionPt() {
        -:  195:    return static_cast<const BasicBlock *>(this)
        -:  196:                                          ->getFirstInsertionPt().getNonConst();
        -:  197:  }
        -:  198:
        -:  199:  /// Returns an iterator to the first instruction in this block that is
        -:  200:  /// not a PHINode, a debug intrinsic, a static alloca or any pseudo operation.
        -:  201:  const_iterator getFirstNonPHIOrDbgOrAlloca() const;
        -:  202:  iterator getFirstNonPHIOrDbgOrAlloca() {
        -:  203:    return static_cast<const BasicBlock *>(this)
        -:  204:        ->getFirstNonPHIOrDbgOrAlloca()
        -:  205:        .getNonConst();
        -:  206:  }
        -:  207:
        -:  208:  /// Return a const iterator range over the instructions in the block, skipping
        -:  209:  /// any debug instructions. Skip any pseudo operations as well if \c
        -:  210:  /// SkipPseudoOp is true.
        -:  211:  iterator_range<filter_iterator<BasicBlock::const_iterator,
        -:  212:                                 std::function<bool(const Instruction &)>>>
        -:  213:  instructionsWithoutDebug(bool SkipPseudoOp = true) const;
        -:  214:
        -:  215:  /// Return an iterator range over the instructions in the block, skipping any
        -:  216:  /// debug instructions. Skip and any pseudo operations as well if \c
        -:  217:  /// SkipPseudoOp is true.
        -:  218:  iterator_range<
        -:  219:      filter_iterator<BasicBlock::iterator, std::function<bool(Instruction &)>>>
        -:  220:  instructionsWithoutDebug(bool SkipPseudoOp = true);
        -:  221:
        -:  222:  /// Return the size of the basic block ignoring debug instructions
        -:  223:  filter_iterator<BasicBlock::const_iterator,
        -:  224:                  std::function<bool(const Instruction &)>>::difference_type
        -:  225:  sizeWithoutDebug() const;
        -:  226:
        -:  227:  /// Unlink 'this' from the containing function, but do not delete it.
        -:  228:  void removeFromParent();
        -:  229:
        -:  230:  /// Unlink 'this' from the containing function and delete it.
        -:  231:  ///
        -:  232:  // \returns an iterator pointing to the element after the erased one.
        -:  233:  SymbolTableList<BasicBlock>::iterator eraseFromParent();
        -:  234:
        -:  235:  /// Unlink this basic block from its current function and insert it into
        -:  236:  /// the function that \p MovePos lives in, right before \p MovePos.
        -:  237:  void moveBefore(BasicBlock *MovePos);
        -:  238:
        -:  239:  /// Unlink this basic block from its current function and insert it
        -:  240:  /// right after \p MovePos in the function \p MovePos lives in.
        -:  241:  void moveAfter(BasicBlock *MovePos);
        -:  242:
        -:  243:  /// Insert unlinked basic block into a function.
        -:  244:  ///
        -:  245:  /// Inserts an unlinked basic block into \c Parent.  If \c InsertBefore is
        -:  246:  /// provided, inserts before that basic block, otherwise inserts at the end.
        -:  247:  ///
        -:  248:  /// \pre \a getParent() is \c nullptr.
        -:  249:  void insertInto(Function *Parent, BasicBlock *InsertBefore = nullptr);
        -:  250:
        -:  251:  /// Return the predecessor of this block if it has a single predecessor
        -:  252:  /// block. Otherwise return a null pointer.
        -:  253:  const BasicBlock *getSinglePredecessor() const;
        -:  254:  BasicBlock *getSinglePredecessor() {
        -:  255:    return const_cast<BasicBlock *>(
        -:  256:                 static_cast<const BasicBlock *>(this)->getSinglePredecessor());
        -:  257:  }
        -:  258:
        -:  259:  /// Return the predecessor of this block if it has a unique predecessor
        -:  260:  /// block. Otherwise return a null pointer.
        -:  261:  ///
        -:  262:  /// Note that unique predecessor doesn't mean single edge, there can be
        -:  263:  /// multiple edges from the unique predecessor to this block (for example a
        -:  264:  /// switch statement with multiple cases having the same destination).
        -:  265:  const BasicBlock *getUniquePredecessor() const;
        -:  266:  BasicBlock *getUniquePredecessor() {
        -:  267:    return const_cast<BasicBlock *>(
        -:  268:                 static_cast<const BasicBlock *>(this)->getUniquePredecessor());
        -:  269:  }
        -:  270:
        -:  271:  /// Return true if this block has exactly N predecessors.
        -:  272:  bool hasNPredecessors(unsigned N) const;
        -:  273:
        -:  274:  /// Return true if this block has N predecessors or more.
        -:  275:  bool hasNPredecessorsOrMore(unsigned N) const;
        -:  276:
        -:  277:  /// Return the successor of this block if it has a single successor.
        -:  278:  /// Otherwise return a null pointer.
        -:  279:  ///
        -:  280:  /// This method is analogous to getSinglePredecessor above.
        -:  281:  const BasicBlock *getSingleSuccessor() const;
        -:  282:  BasicBlock *getSingleSuccessor() {
        -:  283:    return const_cast<BasicBlock *>(
        -:  284:                   static_cast<const BasicBlock *>(this)->getSingleSuccessor());
        -:  285:  }
        -:  286:
        -:  287:  /// Return the successor of this block if it has a unique successor.
        -:  288:  /// Otherwise return a null pointer.
        -:  289:  ///
        -:  290:  /// This method is analogous to getUniquePredecessor above.
        -:  291:  const BasicBlock *getUniqueSuccessor() const;
        -:  292:  BasicBlock *getUniqueSuccessor() {
        -:  293:    return const_cast<BasicBlock *>(
        -:  294:                   static_cast<const BasicBlock *>(this)->getUniqueSuccessor());
        -:  295:  }
        -:  296:
        -:  297:  /// Print the basic block to an output stream with an optional
        -:  298:  /// AssemblyAnnotationWriter.
        -:  299:  void print(raw_ostream &OS, AssemblyAnnotationWriter *AAW = nullptr,
        -:  300:             bool ShouldPreserveUseListOrder = false,
        -:  301:             bool IsForDebug = false) const;
        -:  302:
        -:  303:  //===--------------------------------------------------------------------===//
        -:  304:  /// Instruction iterator methods
        -:  305:  ///
        -:  306:  inline iterator                begin()       { return InstList.begin(); }
        -:  307:  inline const_iterator          begin() const { return InstList.begin(); }
        -:  308:  inline iterator                end  ()       { return InstList.end();   }
        -:  309:  inline const_iterator          end  () const { return InstList.end();   }
        -:  310:
        -:  311:  inline reverse_iterator        rbegin()       { return InstList.rbegin(); }
        -:  312:  inline const_reverse_iterator  rbegin() const { return InstList.rbegin(); }
        -:  313:  inline reverse_iterator        rend  ()       { return InstList.rend();   }
        -:  314:  inline const_reverse_iterator  rend  () const { return InstList.rend();   }
        -:  315:
        -:  316:  inline size_t                   size() const { return InstList.size();  }
        -:  317:  inline bool                    empty() const { return InstList.empty(); }
        -:  318:  inline const Instruction      &front() const { return InstList.front(); }
        -:  319:  inline       Instruction      &front()       { return InstList.front(); }
        -:  320:  inline const Instruction       &back() const { return InstList.back();  }
        -:  321:  inline       Instruction       &back()       { return InstList.back();  }
        -:  322:
        -:  323:  /// Iterator to walk just the phi nodes in the basic block.
        -:  324:  template <typename PHINodeT = PHINode, typename BBIteratorT = iterator>
        -:  325:  class phi_iterator_impl
        -:  326:      : public iterator_facade_base<phi_iterator_impl<PHINodeT, BBIteratorT>,
        -:  327:                                    std::forward_iterator_tag, PHINodeT> {
        -:  328:    friend BasicBlock;
        -:  329:
        -:  330:    PHINodeT *PN;
        -:  331:
        -:  332:    phi_iterator_impl(PHINodeT *PN) : PN(PN) {}
        -:  333:
        -:  334:  public:
        -:  335:    // Allow default construction to build variables, but this doesn't build
        -:  336:    // a useful iterator.
        -:  337:    phi_iterator_impl() = default;
        -:  338:
        -:  339:    // Allow conversion between instantiations where valid.
        -:  340:    template <typename PHINodeU, typename BBIteratorU,
        -:  341:              typename = std::enable_if_t<
        -:  342:                  std::is_convertible<PHINodeU *, PHINodeT *>::value>>
        -:  343:    phi_iterator_impl(const phi_iterator_impl<PHINodeU, BBIteratorU> &Arg)
        -:  344:        : PN(Arg.PN) {}
        -:  345:
        -:  346:    bool operator==(const phi_iterator_impl &Arg) const { return PN == Arg.PN; }
        -:  347:
        -:  348:    PHINodeT &operator*() const { return *PN; }
        -:  349:
        -:  350:    using phi_iterator_impl::iterator_facade_base::operator++;
        -:  351:    phi_iterator_impl &operator++() {
        -:  352:      assert(PN && "Cannot increment the end iterator!");
        -:  353:      PN = dyn_cast<PHINodeT>(std::next(BBIteratorT(PN)));
        -:  354:      return *this;
        -:  355:    }
        -:  356:  };
        -:  357:  using phi_iterator = phi_iterator_impl<>;
        -:  358:  using const_phi_iterator =
        -:  359:      phi_iterator_impl<const PHINode, BasicBlock::const_iterator>;
        -:  360:
        -:  361:  /// Returns a range that iterates over the phis in the basic block.
        -:  362:  ///
        -:  363:  /// Note that this cannot be used with basic blocks that have no terminator.
        -:  364:  iterator_range<const_phi_iterator> phis() const {
        -:  365:    return const_cast<BasicBlock *>(this)->phis();
        -:  366:  }
        -:  367:  iterator_range<phi_iterator> phis();
        -:  368:
        -:  369:  /// Return the underlying instruction list container.
        -:  370:  ///
        -:  371:  /// Currently you need to access the underlying instruction list container
        -:  372:  /// directly if you want to modify it.
        -:  373:  const InstListType &getInstList() const { return InstList; }
    #####:  374:        InstListType &getInstList()       { return InstList; }
call    0 never executed
        -:  375:
        -:  376:  /// Returns a pointer to a member of the instruction list.
        -:  377:  static InstListType BasicBlock::*getSublistAccess(Instruction*) {
        -:  378:    return &BasicBlock::InstList;
        -:  379:  }
        -:  380:
        -:  381:  /// Returns a pointer to the symbol table if one exists.
        -:  382:  ValueSymbolTable *getValueSymbolTable();
        -:  383:
        -:  384:  /// Methods for support type inquiry through isa, cast, and dyn_cast.
        -:  385:  static bool classof(const Value *V) {
        -:  386:    return V->getValueID() == Value::BasicBlockVal;
        -:  387:  }
        -:  388:
        -:  389:  /// Cause all subinstructions to "let go" of all the references that said
        -:  390:  /// subinstructions are maintaining.
        -:  391:  ///
        -:  392:  /// This allows one to 'delete' a whole class at a time, even though there may
        -:  393:  /// be circular references... first all references are dropped, and all use
        -:  394:  /// counts go to zero.  Then everything is delete'd for real.  Note that no
        -:  395:  /// operations are valid on an object that has "dropped all references",
        -:  396:  /// except operator delete.
        -:  397:  void dropAllReferences();
        -:  398:
        -:  399:  /// Update PHI nodes in this BasicBlock before removal of predecessor \p Pred.
        -:  400:  /// Note that this function does not actually remove the predecessor.
        -:  401:  ///
        -:  402:  /// If \p KeepOneInputPHIs is true then don't remove PHIs that are left with
        -:  403:  /// zero or one incoming values, and don't simplify PHIs with all incoming
        -:  404:  /// values the same.
        -:  405:  void removePredecessor(BasicBlock *Pred, bool KeepOneInputPHIs = false);
        -:  406:
        -:  407:  bool canSplitPredecessors() const;
        -:  408:
        -:  409:  /// Split the basic block into two basic blocks at the specified instruction.
        -:  410:  ///
        -:  411:  /// If \p Before is true, splitBasicBlockBefore handles the
        -:  412:  /// block splitting. Otherwise, execution proceeds as described below.
        -:  413:  ///
        -:  414:  /// Note that all instructions BEFORE the specified iterator
        -:  415:  /// stay as part of the original basic block, an unconditional branch is added
        -:  416:  /// to the original BB, and the rest of the instructions in the BB are moved
        -:  417:  /// to the new BB, including the old terminator.  The newly formed basic block
        -:  418:  /// is returned. This function invalidates the specified iterator.
        -:  419:  ///
        -:  420:  /// Note that this only works on well formed basic blocks (must have a
        -:  421:  /// terminator), and \p 'I' must not be the end of instruction list (which
        -:  422:  /// would cause a degenerate basic block to be formed, having a terminator
        -:  423:  /// inside of the basic block).
        -:  424:  ///
        -:  425:  /// Also note that this doesn't preserve any passes. To split blocks while
        -:  426:  /// keeping loop information consistent, use the SplitBlock utility function.
        -:  427:  BasicBlock *splitBasicBlock(iterator I, const Twine &BBName = "",
        -:  428:                              bool Before = false);
        -:  429:  BasicBlock *splitBasicBlock(Instruction *I, const Twine &BBName = "",
        -:  430:                              bool Before = false) {
        -:  431:    return splitBasicBlock(I->getIterator(), BBName, Before);
        -:  432:  }
        -:  433:
        -:  434:  /// Split the basic block into two basic blocks at the specified instruction
        -:  435:  /// and insert the new basic blocks as the predecessor of the current block.
        -:  436:  ///
        -:  437:  /// This function ensures all instructions AFTER and including the specified
        -:  438:  /// iterator \p I are part of the original basic block. All Instructions
        -:  439:  /// BEFORE the iterator \p I are moved to the new BB and an unconditional
        -:  440:  /// branch is added to the new BB. The new basic block is returned.
        -:  441:  ///
        -:  442:  /// Note that this only works on well formed basic blocks (must have a
        -:  443:  /// terminator), and \p 'I' must not be the end of instruction list (which
        -:  444:  /// would cause a degenerate basic block to be formed, having a terminator
        -:  445:  /// inside of the basic block).  \p 'I' cannot be a iterator for a PHINode
        -:  446:  /// with multiple incoming blocks.
        -:  447:  ///
        -:  448:  /// Also note that this doesn't preserve any passes. To split blocks while
        -:  449:  /// keeping loop information consistent, use the SplitBlockBefore utility
        -:  450:  /// function.
        -:  451:  BasicBlock *splitBasicBlockBefore(iterator I, const Twine &BBName = "");
        -:  452:  BasicBlock *splitBasicBlockBefore(Instruction *I, const Twine &BBName = "") {
        -:  453:    return splitBasicBlockBefore(I->getIterator(), BBName);
        -:  454:  }
        -:  455:
        -:  456:  /// Returns true if there are any uses of this basic block other than
        -:  457:  /// direct branches, switches, etc. to it.
        -:  458:  bool hasAddressTaken() const {
        -:  459:    return getBasicBlockBits().BlockAddressRefCount != 0;
        -:  460:  }
        -:  461:
        -:  462:  /// Update all phi nodes in this basic block to refer to basic block \p New
        -:  463:  /// instead of basic block \p Old.
        -:  464:  void replacePhiUsesWith(BasicBlock *Old, BasicBlock *New);
        -:  465:
        -:  466:  /// Update all phi nodes in this basic block's successors to refer to basic
        -:  467:  /// block \p New instead of basic block \p Old.
        -:  468:  void replaceSuccessorsPhiUsesWith(BasicBlock *Old, BasicBlock *New);
        -:  469:
        -:  470:  /// Update all phi nodes in this basic block's successors to refer to basic
        -:  471:  /// block \p New instead of to it.
        -:  472:  void replaceSuccessorsPhiUsesWith(BasicBlock *New);
        -:  473:
        -:  474:  /// Return true if this basic block is an exception handling block.
        -:  475:  bool isEHPad() const { return getFirstNonPHI()->isEHPad(); }
        -:  476:
        -:  477:  /// Return true if this basic block is a landing pad.
        -:  478:  ///
        -:  479:  /// Being a ``landing pad'' means that the basic block is the destination of
        -:  480:  /// the 'unwind' edge of an invoke instruction.
        -:  481:  bool isLandingPad() const;
        -:  482:
        -:  483:  /// Return the landingpad instruction associated with the landing pad.
        -:  484:  const LandingPadInst *getLandingPadInst() const;
        -:  485:  LandingPadInst *getLandingPadInst() {
        -:  486:    return const_cast<LandingPadInst *>(
        -:  487:                    static_cast<const BasicBlock *>(this)->getLandingPadInst());
        -:  488:  }
        -:  489:
        -:  490:  /// Return true if it is legal to hoist instructions into this block.
        -:  491:  bool isLegalToHoistInto() const;
        -:  492:
        -:  493:  /// Return true if this is the entry block of the containing function.
        -:  494:  /// This method can only be used on blocks that have a parent function.
        -:  495:  bool isEntryBlock() const;
        -:  496:
        -:  497:  Optional<uint64_t> getIrrLoopHeaderWeight() const;
        -:  498:
        -:  499:  /// Returns true if the Order field of child Instructions is valid.
        -:  500:  bool isInstrOrderValid() const {
        -:  501:    return getBasicBlockBits().InstrOrderValid;
        -:  502:  }
        -:  503:
        -:  504:  /// Mark instruction ordering invalid. Done on every instruction insert.
        -:  505:  void invalidateOrders() {
        -:  506:    validateInstrOrdering();
        -:  507:    BasicBlockBits Bits = getBasicBlockBits();
        -:  508:    Bits.InstrOrderValid = false;
        -:  509:    setBasicBlockBits(Bits);
        -:  510:  }
        -:  511:
        -:  512:  /// Renumber instructions and mark the ordering as valid.
        -:  513:  void renumberInstructions();
        -:  514:
        -:  515:  /// Asserts that instruction order numbers are marked invalid, or that they
        -:  516:  /// are in ascending order. This is constant time if the ordering is invalid,
        -:  517:  /// and linear in the number of instructions if the ordering is valid. Callers
        -:  518:  /// should be careful not to call this in ways that make common operations
        -:  519:  /// O(n^2). For example, it takes O(n) time to assign order numbers to
        -:  520:  /// instructions, so the order should be validated no more than once after
        -:  521:  /// each ordering to ensure that transforms have the same algorithmic
        -:  522:  /// complexity when asserts are enabled as when they are disabled.
        -:  523:  void validateInstrOrdering() const;
        -:  524:
        -:  525:private:
        -:  526:#if defined(_AIX) && (!defined(__GNUC__) || defined(__clang__))
        -:  527:// Except for GCC; by default, AIX compilers store bit-fields in 4-byte words
        -:  528:// and give the `pack` pragma push semantics.
        -:  529:#define BEGIN_TWO_BYTE_PACK() _Pragma("pack(2)")
        -:  530:#define END_TWO_BYTE_PACK() _Pragma("pack(pop)")
        -:  531:#else
        -:  532:#define BEGIN_TWO_BYTE_PACK()
        -:  533:#define END_TWO_BYTE_PACK()
        -:  534:#endif
        -:  535:
        -:  536:  BEGIN_TWO_BYTE_PACK()
        -:  537:  /// Bitfield to help interpret the bits in Value::SubclassData.
        -:  538:  struct BasicBlockBits {
        -:  539:    unsigned short BlockAddressRefCount : 15;
        -:  540:    unsigned short InstrOrderValid : 1;
        -:  541:  };
        -:  542:  END_TWO_BYTE_PACK()
        -:  543:
        -:  544:#undef BEGIN_TWO_BYTE_PACK
        -:  545:#undef END_TWO_BYTE_PACK
        -:  546:
        -:  547:  /// Safely reinterpret the subclass data bits to a more useful form.
        -:  548:  BasicBlockBits getBasicBlockBits() const {
        -:  549:    static_assert(sizeof(BasicBlockBits) == sizeof(unsigned short),
        -:  550:                  "too many bits for Value::SubclassData");
        -:  551:    unsigned short ValueData = getSubclassDataFromValue();
        -:  552:    BasicBlockBits AsBits;
        -:  553:    memcpy(&AsBits, &ValueData, sizeof(AsBits));
        -:  554:    return AsBits;
        -:  555:  }
        -:  556:
        -:  557:  /// Reinterpret our subclass bits and store them back into Value.
        -:  558:  void setBasicBlockBits(BasicBlockBits AsBits) {
        -:  559:    unsigned short D;
        -:  560:    memcpy(&D, &AsBits, sizeof(D));
        -:  561:    Value::setValueSubclassData(D);
        -:  562:  }
        -:  563:
        -:  564:  /// Increment the internal refcount of the number of BlockAddresses
        -:  565:  /// referencing this BasicBlock by \p Amt.
        -:  566:  ///
        -:  567:  /// This is almost always 0, sometimes one possibly, but almost never 2, and
        -:  568:  /// inconceivably 3 or more.
        -:  569:  void AdjustBlockAddressRefCount(int Amt) {
        -:  570:    BasicBlockBits Bits = getBasicBlockBits();
        -:  571:    Bits.BlockAddressRefCount += Amt;
        -:  572:    setBasicBlockBits(Bits);
        -:  573:    assert(Bits.BlockAddressRefCount < 255 && "Refcount wrap-around");
        -:  574:  }
        -:  575:
        -:  576:  /// Shadow Value::setValueSubclassData with a private forwarding method so
        -:  577:  /// that any future subclasses cannot accidentally use it.
        -:  578:  void setValueSubclassData(unsigned short D) {
        -:  579:    Value::setValueSubclassData(D);
        -:  580:  }
        -:  581:};
        -:  582:
        -:  583:// Create wrappers for C Binding types (see CBindingWrapping.h).
        -:  584:DEFINE_SIMPLE_CONVERSION_FUNCTIONS(BasicBlock, LLVMBasicBlockRef)
        -:  585:
        -:  586:/// Advance \p It while it points to a debug instruction and return the result.
        -:  587:/// This assumes that \p It is not at the end of a block.
        -:  588:BasicBlock::iterator skipDebugIntrinsics(BasicBlock::iterator It);
        -:  589:
        -:  590:#ifdef NDEBUG
        -:  591:/// In release builds, this is a no-op. For !NDEBUG builds, the checks are
        -:  592:/// implemented in the .cpp file to avoid circular header deps.
        -:  593:inline void BasicBlock::validateInstrOrdering() const {}
        -:  594:#endif
        -:  595:
        -:  596:} // end namespace llvm
        -:  597:
        -:  598:#endif // LLVM_IR_BASICBLOCK_H
