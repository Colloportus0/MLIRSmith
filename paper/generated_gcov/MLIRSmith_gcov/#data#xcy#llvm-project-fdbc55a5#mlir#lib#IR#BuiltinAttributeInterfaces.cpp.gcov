        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/BuiltinAttributeInterfaces.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinAttributeInterfaces.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/BuiltinAttributeInterfaces.cpp.gcda
        -:    0:Runs:116163
        -:    1://===- BuiltinAttributeInterfaces.cpp -------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/IR/BuiltinAttributeInterfaces.h"
        -:   10:#include "mlir/IR/BuiltinTypes.h"
        -:   11:#include "mlir/IR/Diagnostics.h"
        -:   12:#include "llvm/ADT/Sequence.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::detail;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:/// Tablegen Interface Definitions
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
        -:   21:#include "mlir/IR/BuiltinAttributeInterfaces.cpp.inc"
        -:   22:
        -:   23://===----------------------------------------------------------------------===//
        -:   24:// ElementsAttr
        -:   25://===----------------------------------------------------------------------===//
        -:   26:
function _ZN4mlir12ElementsAttr14getElementTypeES0_ called 3997641987 returned 100% blocks executed 100%
3997641987:   27:Type ElementsAttr::getElementType(ElementsAttr elementsAttr) {
3997641987:   28:  return elementsAttr.getType().getElementType();
call    0 returned 100%
call    1 returned 100%
        -:   29:}
        -:   30:
function _ZN4mlir12ElementsAttr14getNumElementsES0_ called 5493454 returned 100% blocks executed 100%
  5493454:   31:int64_t ElementsAttr::getNumElements(ElementsAttr elementsAttr) {
  5493454:   32:  return elementsAttr.getType().getNumElements();
call    0 returned 100%
call    1 returned 100%
        -:   33:}
        -:   34:
function _ZN4mlir12ElementsAttr12isValidIndexENS_10ShapedTypeEN4llvm8ArrayRefImEE called 174 returned 100% blocks executed 80%
      174:   35:bool ElementsAttr::isValidIndex(ShapedType type, ArrayRef<uint64_t> index) {
        -:   36:  // Verify that the rank of the indices matches the held type.
      174:   37:  int64_t rank = type.getRank();
call    0 returned 100%
     174*:   38:  if (rank == 0 && index.size() == 1 && index[0] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   39:    return true;
      174:   40:  if (rank != static_cast<int64_t>(index.size()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   41:    return false;
        -:   42:
        -:   43:  // Verify that all of the indices are within the shape dimensions.
      174:   44:  ArrayRef<int64_t> shape = type.getShape();
call    0 returned 100%
function _ZZN4mlir12ElementsAttr12isValidIndexENS_10ShapedTypeEN4llvm8ArrayRefImEEENKUliE_clEi.isra.0 called 354 returned 100% blocks executed 67%
      528:   45:  return llvm::all_of(llvm::seq<int>(0, rank), [&](int i) {
call    0 returned 100%
call    1 returned 100%
      354:   46:    int64_t dim = static_cast<int64_t>(index[i]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      354:   47:    return 0 <= dim && dim < shape[i];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   48:  });
        -:   49:}
function _ZN4mlir12ElementsAttr12isValidIndexES0_N4llvm8ArrayRefImEE called 87 returned 100% blocks executed 100%
       87:   50:bool ElementsAttr::isValidIndex(ElementsAttr elementsAttr,
        -:   51:                                ArrayRef<uint64_t> index) {
       87:   52:  return isValidIndex(elementsAttr.getType(), index);
call    0 returned 100%
call    1 returned 100%
        -:   53:}
        -:   54:
function _ZN4mlir12ElementsAttr17getFlattenedIndexENS_4TypeEN4llvm8ArrayRefImEE called 87 returned 100% blocks executed 79%
       87:   55:uint64_t ElementsAttr::getFlattenedIndex(Type type, ArrayRef<uint64_t> index) {
       87:   56:  ShapedType shapeType = type.cast<ShapedType>();
call    0 returned 100%
      87*:   57:  assert(isValidIndex(shapeType, index) &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   58:         "expected valid multi-dimensional index");
        -:   59:
        -:   60:  // Reduce the provided multidimensional index into a flattended 1D row-major
        -:   61:  // index.
       87:   62:  auto rank = shapeType.getRank();
call    0 returned 100%
       87:   63:  ArrayRef<int64_t> shape = shapeType.getShape();
call    0 returned 100%
       87:   64:  uint64_t valueIndex = 0;
       87:   65:  uint64_t dimMultiplier = 1;
      264:   66:  for (int i = rank - 1; i >= 0; --i) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      177:   67:    valueIndex += index[i] * dimMultiplier;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      177:   68:    dimMultiplier *= shape[i];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   69:  }
       87:   70:  return valueIndex;
        -:   71:}
        -:   72:
        -:   73://===----------------------------------------------------------------------===//
        -:   74:// MemRefLayoutAttrInterface
        -:   75://===----------------------------------------------------------------------===//
        -:   76:
function _ZN4mlir6detail23verifyAffineMapAsLayoutENS_9AffineMapEN4llvm8ArrayRefIlEENS2_12function_refIFNS_18InFlightDiagnosticEvEEE called 36683163 returned 100% blocks executed 31%
 36683163:   77:LogicalResult mlir::detail::verifyAffineMapAsLayout(
        -:   78:    AffineMap m, ArrayRef<int64_t> shape,
        -:   79:    function_ref<InFlightDiagnostic()> emitError) {
 36683163:   80:  if (m.getNumDims() != shape.size())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   81:    return emitError() << "memref layout mismatch between rank and affine map: "
call    0 never executed
call    1 never executed
    #####:   82:                       << shape.size() << " != " << m.getNumDims();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   83:
 36683163:   84:  return success();
        -:   85:}
