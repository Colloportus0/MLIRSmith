        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/Dialect/Math/IR/MathOps.cpp
        -:    0:Graph:../tools/mlir/lib/Dialect/Math/IR/CMakeFiles/obj.MLIRMathDialect.dir/MathOps.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Dialect/Math/IR/CMakeFiles/obj.MLIRMathDialect.dir/MathOps.cpp.gcda
        -:    0:Runs:116160
        -:    1://===- MathOps.cpp - MLIR operations for math implementation --------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#include "mlir/Dialect/Arith/IR/Arith.h"
        -:   10:#include "mlir/Dialect/CommonFolders.h"
        -:   11:#include "mlir/Dialect/Math/IR/Math.h"
        -:   12:#include "mlir/IR/Builders.h"
        -:   13:
        -:   14:using namespace mlir;
        -:   15:using namespace mlir::math;
        -:   16:
        -:   17://===----------------------------------------------------------------------===//
        -:   18:// TableGen'd op method definitions
        -:   19://===----------------------------------------------------------------------===//
        -:   20:
        -:   21:#define GET_OP_CLASSES
        -:   22:#include "mlir/Dialect/Math/IR/MathOps.cpp.inc"
        -:   23:
        -:   24://===----------------------------------------------------------------------===//
        -:   25:// AbsFOp folder
        -:   26://===----------------------------------------------------------------------===//
        -:   27:
function _ZN4mlir4math6AbsFOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 196740 returned 100% blocks executed 100%
   196740:   28:OpFoldResult math::AbsFOp::fold(ArrayRef<Attribute> operands) {
   196740:   29:  return constFoldUnaryOp<FloatAttr>(operands,
function _ZZN4mlir4math6AbsFOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 70393 returned 100% blocks executed 100%
   337526:   30:                                     [](const APFloat &a) { return abs(a); });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   31:}
        -:   32:
        -:   33://===----------------------------------------------------------------------===//
        -:   34:// AbsIOp folder
        -:   35://===----------------------------------------------------------------------===//
        -:   36:
function _ZN4mlir4math6AbsIOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 157791 returned 100% blocks executed 100%
   157791:   37:OpFoldResult math::AbsIOp::fold(ArrayRef<Attribute> operands) {
   157791:   38:  return constFoldUnaryOp<IntegerAttr>(operands,
   206046:   39:                                       [](const APInt &a) { return a.abs(); });
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   40:}
        -:   41:
        -:   42://===----------------------------------------------------------------------===//
        -:   43:// AtanOp folder
        -:   44://===----------------------------------------------------------------------===//
        -:   45:
function _ZN4mlir4math6AtanOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 186861 returned 100% blocks executed 100%
   186861:   46:OpFoldResult math::AtanOp::fold(ArrayRef<Attribute> operands) {
   186861:   47:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math6AtanOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 90158 returned 100% blocks executed 64%
    90158:   48:      operands, [](const APFloat &a) -> Optional<APFloat> {
    90158:   49:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 74%
branch  3 taken 26%
    #####:   50:        case 64:
    #####:   51:          return APFloat(atan(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    66457:   52:        case 32:
    66457:   53:          return APFloat(atanf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    23701:   54:        default:
    23701:   55:          return {};
        -:   56:        }
   186861:   57:      });
call    0 returned 100%
call    1 returned 100%
        -:   58:}
        -:   59:
        -:   60://===----------------------------------------------------------------------===//
        -:   61:// Atan2Op folder
        -:   62://===----------------------------------------------------------------------===//
        -:   63:
function _ZN4mlir4math7Atan2Op4foldEN4llvm8ArrayRefINS_9AttributeEEE called 161740 returned 100% blocks executed 100%
   161740:   64:OpFoldResult math::Atan2Op::fold(ArrayRef<Attribute> operands) {
   161740:   65:  return constFoldBinaryOpConditional<FloatAttr>(
function _ZZN4mlir4math7Atan2Op4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatES8_E_clES8_S8_.isra.0 called 37264 returned 100% blocks executed 50%
    37264:   66:      operands, [](const APFloat &a, const APFloat &b) -> Optional<APFloat> {
   74528*:   67:        if (a.isZero() && b.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:   68:          return llvm::APFloat::getNaN(a.getSemantics());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   69:
   37264*:   70:        if (a.getSizeInBits(a.getSemantics()) == 64 &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:   71:            b.getSizeInBits(b.getSemantics()) == 64)
call    0 never executed
    #####:   72:          return APFloat(atan2(a.convertToDouble(), b.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:   73:
    56764:   74:        if (a.getSizeInBits(a.getSemantics()) == 32 &&
call    0 returned 100%
branch  1 taken 52%
branch  2 taken 48%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    19500:   75:            b.getSizeInBits(b.getSemantics()) == 32)
call    0 returned 100%
    19500:   76:          return APFloat(atan2f(a.convertToFloat(), b.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   77:
    17764:   78:        return {};
   161740:   79:      });
call    0 returned 100%
call    1 returned 100%
        -:   80:}
        -:   81:
        -:   82://===----------------------------------------------------------------------===//
        -:   83:// CeilOp folder
        -:   84://===----------------------------------------------------------------------===//
        -:   85:
function _ZN4mlir4math6CeilOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 141518 returned 100% blocks executed 100%
   141518:   86:OpFoldResult math::CeilOp::fold(ArrayRef<Attribute> operands) {
   179390:   87:  return constFoldUnaryOp<FloatAttr>(operands, [](const APFloat &a) {
    37872:   88:    APFloat result(a);
call    0 returned 100%
    37872:   89:    result.roundToIntegral(llvm::RoundingMode::TowardPositive);
call    0 returned 100%
    37872:   90:    return result;
call    0 returned 100%
   141518:   91:  });
call    0 returned 100%
call    1 returned 100%
        -:   92:}
        -:   93:
        -:   94://===----------------------------------------------------------------------===//
        -:   95:// CopySignOp folder
        -:   96://===----------------------------------------------------------------------===//
        -:   97:
function _ZN4mlir4math10CopySignOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 234068 returned 100% blocks executed 100%
   234068:   98:OpFoldResult math::CopySignOp::fold(ArrayRef<Attribute> operands) {
   234068:   99:  return constFoldBinaryOp<FloatAttr>(operands,
    58105:  100:                                      [](const APFloat &a, const APFloat &b) {
    58105:  101:                                        APFloat result(a);
call    0 returned 100%
    58105:  102:                                        result.copySign(b);
call    0 returned 100%
    58105:  103:                                        return result;
call    0 returned 100%
   234068:  104:                                      });
call    0 returned 100%
call    1 returned 100%
        -:  105:}
        -:  106:
        -:  107://===----------------------------------------------------------------------===//
        -:  108:// CosOp folder
        -:  109://===----------------------------------------------------------------------===//
        -:  110:
function _ZN4mlir4math5CosOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 177779 returned 100% blocks executed 100%
   177779:  111:OpFoldResult math::CosOp::fold(ArrayRef<Attribute> operands) {
   177779:  112:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math5CosOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 45653 returned 100% blocks executed 64%
    45653:  113:      operands, [](const APFloat &a) -> Optional<APFloat> {
    45653:  114:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 49%
branch  3 taken 51%
    #####:  115:        case 64:
    #####:  116:          return APFloat(cos(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    22278:  117:        case 32:
    22278:  118:          return APFloat(cosf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    23375:  119:        default:
    23375:  120:          return {};
        -:  121:        }
   177779:  122:      });
call    0 returned 100%
call    1 returned 100%
        -:  123:}
        -:  124:
        -:  125://===----------------------------------------------------------------------===//
        -:  126:// SinOp folder
        -:  127://===----------------------------------------------------------------------===//
        -:  128:
function _ZN4mlir4math5SinOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  129:OpFoldResult math::SinOp::fold(ArrayRef<Attribute> operands) {
    #####:  130:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math5SinOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  131:      operands, [](const APFloat &a) -> Optional<APFloat> {
    #####:  132:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  133:        case 64:
    #####:  134:          return APFloat(sin(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  135:        case 32:
    #####:  136:          return APFloat(sinf(a.convertToFloat()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  137:        default:
    #####:  138:          return {};
        -:  139:        }
    #####:  140:      });
call    0 never executed
call    1 never executed
        -:  141:}
        -:  142:
        -:  143://===----------------------------------------------------------------------===//
        -:  144:// CountLeadingZerosOp folder
        -:  145://===----------------------------------------------------------------------===//
        -:  146:
function _ZN4mlir4math19CountLeadingZerosOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 208996 returned 100% blocks executed 100%
   208996:  147:OpFoldResult math::CountLeadingZerosOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir4math19CountLeadingZerosOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntEE_clES8_.isra.0 called 76499 returned 100% blocks executed 75%
   285495:  148:  return constFoldUnaryOp<IntegerAttr>(operands, [](const APInt &a) {
    76499:  149:    return APInt(a.getBitWidth(), a.countLeadingZeros());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   208996:  150:  });
call    0 returned 100%
call    1 returned 100%
        -:  151:}
        -:  152:
        -:  153://===----------------------------------------------------------------------===//
        -:  154:// CountTrailingZerosOp folder
        -:  155://===----------------------------------------------------------------------===//
        -:  156:
function _ZN4mlir4math20CountTrailingZerosOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 268546 returned 100% blocks executed 100%
   268546:  157:OpFoldResult math::CountTrailingZerosOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir4math20CountTrailingZerosOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntEE_clES8_.isra.0 called 107268 returned 100% blocks executed 78%
   375814:  158:  return constFoldUnaryOp<IntegerAttr>(operands, [](const APInt &a) {
   214536:  159:    return APInt(a.getBitWidth(), a.countTrailingZeros());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   268546:  160:  });
call    0 returned 100%
call    1 returned 100%
        -:  161:}
        -:  162:
        -:  163://===----------------------------------------------------------------------===//
        -:  164:// CtPopOp folder
        -:  165://===----------------------------------------------------------------------===//
        -:  166:
function _ZN4mlir4math7CtPopOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 150137 returned 100% blocks executed 100%
   150137:  167:OpFoldResult math::CtPopOp::fold(ArrayRef<Attribute> operands) {
function _ZZN4mlir4math7CtPopOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntEE_clES8_.isra.0 called 53366 returned 100% blocks executed 71%
   203503:  168:  return constFoldUnaryOp<IntegerAttr>(operands, [](const APInt &a) {
   106732:  169:    return APInt(a.getBitWidth(), a.countPopulation());
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
   150137:  170:  });
call    0 returned 100%
call    1 returned 100%
        -:  171:}
        -:  172:
        -:  173://===----------------------------------------------------------------------===//
        -:  174:// ErfOp folder
        -:  175://===----------------------------------------------------------------------===//
        -:  176:
function _ZN4mlir4math5ErfOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  177:OpFoldResult math::ErfOp::fold(ArrayRef<Attribute> operands) {
    #####:  178:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math5ErfOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  179:      operands, [](const APFloat &a) -> Optional<APFloat> {
    #####:  180:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  181:        case 64:
    #####:  182:          return APFloat(erf(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  183:        case 32:
    #####:  184:          return APFloat(erff(a.convertToFloat()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  185:        default:
    #####:  186:          return {};
        -:  187:        }
    #####:  188:      });
call    0 never executed
call    1 never executed
        -:  189:}
        -:  190:
        -:  191://===----------------------------------------------------------------------===//
        -:  192:// IPowIOp folder
        -:  193://===----------------------------------------------------------------------===//
        -:  194:
function _ZN4mlir4math7IPowIOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 227066 returned 100% blocks executed 100%
   227066:  195:OpFoldResult math::IPowIOp::fold(ArrayRef<Attribute> operands) {
   227066:  196:  return constFoldBinaryOpConditional<IntegerAttr>(
function _ZZN4mlir4math7IPowIOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_5APIntES8_E_clES8_S8_.isra.0 called 78740 returned 100% blocks executed 65%
    78740:  197:      operands, [](const APInt &base, const APInt &power) -> Optional<APInt> {
    78740:  198:        unsigned width = base.getBitWidth();
call    0 returned 100%
    78740:  199:        auto zeroValue = APInt::getZero(width);
call    0 returned 100%
   157480:  200:        APInt oneValue{width, 1ULL, /*isSigned=*/true};
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
   157480:  201:        APInt minusOneValue{width, -1ULL, /*isSigned=*/true};
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  202:
   157480:  203:        if (power.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 30% (fallthrough)
branch  3 taken 70%
    23897:  204:          return oneValue;
        -:  205:
    54843:  206:        if (power.isNegative()) {
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
        -:  207:          // Leave 0 raised to negative power not folded.
    34432:  208:          if (base.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
     5459:  209:            return {};
    11757:  210:          if (base.eq(oneValue))
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
     3338:  211:            return oneValue;
        -:  212:          // If abs(base) > 1, then the result is zero.
     8419:  213:          if (base.ne(minusOneValue))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     8419:  214:            return zeroValue;
        -:  215:          // base == -1:
        -:  216:          //   -1: power is odd
        -:  217:          //    1: power is even
    #####:  218:          if (power[0] == 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:            return minusOneValue;
        -:  220:
    #####:  221:          return oneValue;
        -:  222:        }
        -:  223:
        -:  224:        // power is positive.
   116367:  225:        APInt result = oneValue;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    75254:  226:        APInt curBase = base;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    75254:  227:        APInt curPower = power;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
  2030387:  228:        while (true) {
  1034007:  229:          if (curPower[0] == 1)
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
   536418:  230:            result *= curBase;
call    0 returned 100%
  1034007:  231:          curPower.lshrInPlace(1);
call    0 returned 100%
  2068014:  232:          if (curPower.isZero())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
    37627:  233:            return result;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   996380:  234:          curBase *= curBase;
call    0 returned 100%
        -:  235:        }
   227066:  236:      });
call    0 returned 100%
call    1 returned 100%
        -:  237:
        -:  238:  return Attribute();
        -:  239:}
        -:  240:
        -:  241://===----------------------------------------------------------------------===//
        -:  242:// LogOp folder
        -:  243://===----------------------------------------------------------------------===//
        -:  244:
function _ZN4mlir4math5LogOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 182535 returned 100% blocks executed 100%
   182535:  245:OpFoldResult math::LogOp::fold(ArrayRef<Attribute> operands) {
   182535:  246:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math5LogOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 54361 returned 100% blocks executed 67%
    54361:  247:      operands, [](const APFloat &a) -> Optional<APFloat> {
   108722:  248:        if (a.isNegative())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  249:          return {};
        -:  250:
    54361:  251:        if (a.getSizeInBits(a.getSemantics()) == 64)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  252:          return APFloat(log(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  253:
    54361:  254:        if (a.getSizeInBits(a.getSemantics()) == 32)
call    0 returned 100%
branch  1 taken 56% (fallthrough)
branch  2 taken 44%
    30671:  255:          return APFloat(logf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  256:
    23690:  257:        return {};
   182535:  258:      });
call    0 returned 100%
call    1 returned 100%
        -:  259:}
        -:  260:
        -:  261://===----------------------------------------------------------------------===//
        -:  262:// Log2Op folder
        -:  263://===----------------------------------------------------------------------===//
        -:  264:
function _ZN4mlir4math6Log2Op4foldEN4llvm8ArrayRefINS_9AttributeEEE called 179845 returned 100% blocks executed 100%
   179845:  265:OpFoldResult math::Log2Op::fold(ArrayRef<Attribute> operands) {
   179845:  266:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math6Log2Op4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 43762 returned 100% blocks executed 67%
    43762:  267:      operands, [](const APFloat &a) -> Optional<APFloat> {
    87524:  268:        if (a.isNegative())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  269:          return {};
        -:  270:
    43762:  271:        if (a.getSizeInBits(a.getSemantics()) == 64)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  272:          return APFloat(log2(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  273:
    43762:  274:        if (a.getSizeInBits(a.getSemantics()) == 32)
call    0 returned 100%
branch  1 taken 47% (fallthrough)
branch  2 taken 53%
    20442:  275:          return APFloat(log2f(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  276:
    23320:  277:        return {};
   179845:  278:      });
call    0 returned 100%
call    1 returned 100%
        -:  279:}
        -:  280:
        -:  281://===----------------------------------------------------------------------===//
        -:  282:// Log10Op folder
        -:  283://===----------------------------------------------------------------------===//
        -:  284:
function _ZN4mlir4math7Log10Op4foldEN4llvm8ArrayRefINS_9AttributeEEE called 222500 returned 100% blocks executed 100%
   222500:  285:OpFoldResult math::Log10Op::fold(ArrayRef<Attribute> operands) {
   222500:  286:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math7Log10Op4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 51466 returned 100% blocks executed 63%
    51466:  287:      operands, [](const APFloat &a) -> Optional<APFloat> {
   102932:  288:        if (a.isNegative())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  289:          return {};
        -:  290:
    51466:  291:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 54%
branch  3 taken 46%
    #####:  292:        case 64:
    #####:  293:          return APFloat(log10(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    27831:  294:        case 32:
    27831:  295:          return APFloat(log10f(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    23635:  296:        default:
    23635:  297:          return {};
        -:  298:        }
   222500:  299:      });
call    0 returned 100%
call    1 returned 100%
        -:  300:}
        -:  301:
        -:  302://===----------------------------------------------------------------------===//
        -:  303:// Log1pOp folder
        -:  304://===----------------------------------------------------------------------===//
        -:  305:
function _ZN4mlir4math7Log1pOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 238838 returned 100% blocks executed 100%
   238838:  306:OpFoldResult math::Log1pOp::fold(ArrayRef<Attribute> operands) {
   238838:  307:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math7Log1pOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 59504 returned 100% blocks executed 50%
    59504:  308:      operands, [](const APFloat &a) -> Optional<APFloat> {
    59504:  309:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 48%
branch  3 taken 52%
    #####:  310:        case 64:
    #####:  311:          if ((a + APFloat(1.0)).isNegative())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  312:            return {};
    #####:  313:          return APFloat(log1p(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    28790:  314:        case 32:
    57580:  315:          if ((a + APFloat(1.0f)).isNegative())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  316:            return {};
    28790:  317:          return APFloat(log1pf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    30714:  318:        default:
    30714:  319:          return {};
        -:  320:        }
   238838:  321:      });
call    0 returned 100%
call    1 returned 100%
        -:  322:}
        -:  323:
        -:  324://===----------------------------------------------------------------------===//
        -:  325:// PowFOp folder
        -:  326://===----------------------------------------------------------------------===//
        -:  327:
function _ZN4mlir4math6PowFOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 217879 returned 100% blocks executed 100%
   217879:  328:OpFoldResult math::PowFOp::fold(ArrayRef<Attribute> operands) {
   217879:  329:  return constFoldBinaryOpConditional<FloatAttr>(
function _ZZN4mlir4math6PowFOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatES8_E_clES8_S8_.isra.0 called 48452 returned 100% blocks executed 65%
    48452:  330:      operands, [](const APFloat &a, const APFloat &b) -> Optional<APFloat> {
   48452*:  331:        if (a.getSizeInBits(a.getSemantics()) == 64 &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
    #####:  332:            b.getSizeInBits(b.getSemantics()) == 64)
call    0 never executed
    #####:  333:          return APFloat(pow(a.convertToDouble(), b.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  334:
    70610:  335:        if (a.getSizeInBits(a.getSemantics()) == 32 &&
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    22158:  336:            b.getSizeInBits(b.getSemantics()) == 32)
call    0 returned 100%
    22158:  337:          return APFloat(powf(a.convertToFloat(), b.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  338:
    26294:  339:        return {};
   217879:  340:      });
call    0 returned 100%
call    1 returned 100%
        -:  341:}
        -:  342:
        -:  343://===----------------------------------------------------------------------===//
        -:  344:// SqrtOp folder
        -:  345://===----------------------------------------------------------------------===//
        -:  346:
function _ZN4mlir4math6SqrtOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 227606 returned 100% blocks executed 100%
   227606:  347:OpFoldResult math::SqrtOp::fold(ArrayRef<Attribute> operands) {
   227606:  348:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math6SqrtOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 70930 returned 100% blocks executed 63%
    70930:  349:      operands, [](const APFloat &a) -> Optional<APFloat> {
   141860:  350:        if (a.isNegative())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  351:          return {};
        -:  352:
    70930:  353:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 46%
branch  3 taken 54%
    #####:  354:        case 64:
    #####:  355:          return APFloat(sqrt(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    32976:  356:        case 32:
    32976:  357:          return APFloat(sqrtf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    37954:  358:        default:
    37954:  359:          return {};
        -:  360:        }
   227606:  361:      });
call    0 returned 100%
call    1 returned 100%
        -:  362:}
        -:  363:
        -:  364://===----------------------------------------------------------------------===//
        -:  365:// ExpOp folder
        -:  366://===----------------------------------------------------------------------===//
        -:  367:
function _ZN4mlir4math5ExpOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 221867 returned 100% blocks executed 100%
   221867:  368:OpFoldResult math::ExpOp::fold(ArrayRef<Attribute> operands) {
   221867:  369:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math5ExpOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 60498 returned 100% blocks executed 67%
    60498:  370:      operands, [](const APFloat &a) -> Optional<APFloat> {
    60498:  371:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 48%
branch  3 taken 52%
    #####:  372:        case 64:
    #####:  373:          return APFloat(exp(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    28943:  374:        case 32:
    28943:  375:          return APFloat(expf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    31555:  376:        default:
    31555:  377:          return {};
        -:  378:        }
   221867:  379:      });
call    0 returned 100%
call    1 returned 100%
        -:  380:}
        -:  381:
        -:  382://===----------------------------------------------------------------------===//
        -:  383:// Exp2Op folder
        -:  384://===----------------------------------------------------------------------===//
        -:  385:
function _ZN4mlir4math6Exp2Op4foldEN4llvm8ArrayRefINS_9AttributeEEE called 195145 returned 100% blocks executed 100%
   195145:  386:OpFoldResult math::Exp2Op::fold(ArrayRef<Attribute> operands) {
   195145:  387:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math6Exp2Op4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 46450 returned 100% blocks executed 67%
    46450:  388:      operands, [](const APFloat &a) -> Optional<APFloat> {
    46450:  389:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 56%
branch  3 taken 44%
    #####:  390:        case 64:
    #####:  391:          return APFloat(exp2(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    25892:  392:        case 32:
    25892:  393:          return APFloat(exp2f(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    20558:  394:        default:
    20558:  395:          return {};
        -:  396:        }
   195145:  397:      });
call    0 returned 100%
call    1 returned 100%
        -:  398:}
        -:  399:
        -:  400://===----------------------------------------------------------------------===//
        -:  401:// ExpM1Op folder
        -:  402://===----------------------------------------------------------------------===//
        -:  403:
function _ZN4mlir4math7ExpM1Op4foldEN4llvm8ArrayRefINS_9AttributeEEE called 197876 returned 100% blocks executed 100%
   197876:  404:OpFoldResult math::ExpM1Op::fold(ArrayRef<Attribute> operands) {
   197876:  405:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math7ExpM1Op4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 55156 returned 100% blocks executed 67%
    55156:  406:      operands, [](const APFloat &a) -> Optional<APFloat> {
    55156:  407:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 64%
branch  3 taken 36%
    #####:  408:        case 64:
    #####:  409:          return APFloat(expm1(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    35418:  410:        case 32:
    35418:  411:          return APFloat(expm1f(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    19738:  412:        default:
    19738:  413:          return {};
        -:  414:        }
   197876:  415:      });
call    0 returned 100%
call    1 returned 100%
        -:  416:}
        -:  417:
        -:  418://===----------------------------------------------------------------------===//
        -:  419:// TanOp folder
        -:  420://===----------------------------------------------------------------------===//
        -:  421:
function _ZN4mlir4math5TanOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 202612 returned 100% blocks executed 100%
   202612:  422:OpFoldResult math::TanOp::fold(ArrayRef<Attribute> operands) {
   202612:  423:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math5TanOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 51539 returned 100% blocks executed 64%
    51539:  424:      operands, [](const APFloat &a) -> Optional<APFloat> {
    51539:  425:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 59%
branch  3 taken 41%
    #####:  426:        case 64:
    #####:  427:          return APFloat(tan(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    30593:  428:        case 32:
    30593:  429:          return APFloat(tanf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    20946:  430:        default:
    20946:  431:          return {};
        -:  432:        }
   202612:  433:      });
call    0 returned 100%
call    1 returned 100%
        -:  434:}
        -:  435:
        -:  436://===----------------------------------------------------------------------===//
        -:  437:// TanhOp folder
        -:  438://===----------------------------------------------------------------------===//
        -:  439:
function _ZN4mlir4math6TanhOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 190388 returned 100% blocks executed 100%
   190388:  440:OpFoldResult math::TanhOp::fold(ArrayRef<Attribute> operands) {
   190388:  441:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math6TanhOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 52040 returned 100% blocks executed 64%
    52040:  442:      operands, [](const APFloat &a) -> Optional<APFloat> {
    52040:  443:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 38%
branch  3 taken 62%
    #####:  444:        case 64:
    #####:  445:          return APFloat(tanh(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    20014:  446:        case 32:
    20014:  447:          return APFloat(tanhf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    32026:  448:        default:
    32026:  449:          return {};
        -:  450:        }
   190388:  451:      });
call    0 returned 100%
call    1 returned 100%
        -:  452:}
        -:  453:
        -:  454://===----------------------------------------------------------------------===//
        -:  455:// RoundEvenOp folder
        -:  456://===----------------------------------------------------------------------===//
        -:  457:
function _ZN4mlir4math11RoundEvenOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 217451 returned 100% blocks executed 100%
   217451:  458:OpFoldResult math::RoundEvenOp::fold(ArrayRef<Attribute> operands) {
   274633:  459:  return constFoldUnaryOp<FloatAttr>(operands, [](const APFloat &a) {
    57182:  460:    APFloat result(a);
call    0 returned 100%
    57182:  461:    result.roundToIntegral(llvm::RoundingMode::NearestTiesToEven);
call    0 returned 100%
    57182:  462:    return result;
call    0 returned 100%
   217451:  463:  });
call    0 returned 100%
call    1 returned 100%
        -:  464:}
        -:  465:
        -:  466://===----------------------------------------------------------------------===//
        -:  467:// FloorOp folder
        -:  468://===----------------------------------------------------------------------===//
        -:  469:
function _ZN4mlir4math7FloorOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 228488 returned 100% blocks executed 100%
   228488:  470:OpFoldResult math::FloorOp::fold(ArrayRef<Attribute> operands) {
   297147:  471:  return constFoldUnaryOp<FloatAttr>(operands, [](const APFloat &a) {
    68659:  472:    APFloat result(a);
call    0 returned 100%
    68659:  473:    result.roundToIntegral(llvm::RoundingMode::TowardNegative);
call    0 returned 100%
    68659:  474:    return result;
call    0 returned 100%
   228488:  475:  });
call    0 returned 100%
call    1 returned 100%
        -:  476:}
        -:  477:
        -:  478://===----------------------------------------------------------------------===//
        -:  479:// RoundOp folder
        -:  480://===----------------------------------------------------------------------===//
        -:  481:
function _ZN4mlir4math7RoundOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 414259 returned 100% blocks executed 100%
   414259:  482:OpFoldResult math::RoundOp::fold(ArrayRef<Attribute> operands) {
   414259:  483:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math7RoundOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 136720 returned 100% blocks executed 64%
   136720:  484:      operands, [](const APFloat &a) -> Optional<APFloat> {
   136720:  485:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 67%
branch  3 taken 33%
    #####:  486:        case 64:
    #####:  487:          return APFloat(round(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    91833:  488:        case 32:
    91833:  489:          return APFloat(roundf(a.convertToFloat()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    44887:  490:        default:
    44887:  491:          return {};
        -:  492:        }
   414259:  493:      });
call    0 returned 100%
call    1 returned 100%
        -:  494:}
        -:  495:
        -:  496://===----------------------------------------------------------------------===//
        -:  497:// TruncOp folder
        -:  498://===----------------------------------------------------------------------===//
        -:  499:
function _ZN4mlir4math7TruncOp4foldEN4llvm8ArrayRefINS_9AttributeEEE called 0 returned 0% blocks executed 0%
    #####:  500:OpFoldResult math::TruncOp::fold(ArrayRef<Attribute> operands) {
    #####:  501:  return constFoldUnaryOpConditional<FloatAttr>(
function _ZZN4mlir4math7TruncOp4foldEN4llvm8ArrayRefINS_9AttributeEEEENKUlRKNS2_7APFloatEE_clES8_.isra.0 called 0 returned 0% blocks executed 0%
    #####:  502:      operands, [](const APFloat &a) -> Optional<APFloat> {
    #####:  503:        switch (a.getSizeInBits(a.getSemantics())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  504:        case 64:
    #####:  505:          return APFloat(trunc(a.convertToDouble()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  506:        case 32:
    #####:  507:          return APFloat(truncf(a.convertToFloat()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  508:        default:
    #####:  509:          return {};
        -:  510:        }
    #####:  511:      });
call    0 never executed
call    1 never executed
        -:  512:}
        -:  513:
        -:  514:/// Materialize an integer or floating point constant.
function _ZN4mlir4math11MathDialect19materializeConstantERNS_9OpBuilderENS_9AttributeENS_4TypeENS_8LocationE called 918874 returned 100% blocks executed 100%
   918874:  515:Operation *math::MathDialect::materializeConstant(OpBuilder &builder,
        -:  516:                                                  Attribute value, Type type,
        -:  517:                                                  Location loc) {
   918874:  518:  return builder.create<arith::ConstantOp>(loc, value, type);
call    0 returned 100%
        -:  519:}
