        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/include/mlir/Analysis/Presburger/PWMAFunction.h
        -:    0:Graph:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcno
        -:    0:Data:../tools/mlir/lib/Analysis/Presburger/CMakeFiles/obj.MLIRPresburger.dir/PWMAFunction.cpp.gcda
        -:    0:Runs:116175
        -:    1://===- PWMAFunction.h - MLIR PWMAFunction Class------------------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// Support for piece-wise multi-affine functions. These are functions that are
        -:   10:// defined on a domain that is a union of IntegerPolyhedrons, and on each domain
        -:   11:// the value of the function is a tuple of integers, with each value in the
        -:   12:// tuple being an affine expression in the vars of the IntegerPolyhedron.
        -:   13://
        -:   14://===----------------------------------------------------------------------===//
        -:   15:
        -:   16:#ifndef MLIR_ANALYSIS_PRESBURGER_PWMAFUNCTION_H
        -:   17:#define MLIR_ANALYSIS_PRESBURGER_PWMAFUNCTION_H
        -:   18:
        -:   19:#include "mlir/Analysis/Presburger/IntegerRelation.h"
        -:   20:#include "mlir/Analysis/Presburger/PresburgerRelation.h"
        -:   21:
        -:   22:namespace mlir {
        -:   23:namespace presburger {
        -:   24:
        -:   25:/// This class represents a multi-affine function with the domain as Z^d, where
        -:   26:/// `d` is the number of domain variables of the function. For example:
        -:   27:///
        -:   28:/// (x, y) -> (x + 2, 2*x - 3y + 5, 2*x + y).
        -:   29:///
        -:   30:/// The output expressions are represented as a matrix with one row for every
        -:   31:/// output, one column for each var including division variables, and an extra
        -:   32:/// column at the end for the constant term.
        -:   33:///
        -:   34:/// Checking equality of two such functions is supported, as well as finding the
        -:   35:/// value of the function at a specified point.
        -:   36:class MultiAffineFunction {
        -:   37:public:
        -:   38:  MultiAffineFunction(const PresburgerSpace &space, const Matrix &output)
        -:   39:      : space(space), output(output),
        -:   40:        divs(space.getNumVars() - space.getNumRangeVars()) {
        -:   41:    assertIsConsistent();
        -:   42:  }
        -:   43:
        -:   44:  MultiAffineFunction(const PresburgerSpace &space, const Matrix &output,
        -:   45:                      const DivisionRepr &divs)
        -:   46:      : space(space), output(output), divs(divs) {
        -:   47:    assertIsConsistent();
        -:   48:  }
        -:   49:
    #####:   50:  unsigned getNumDomainVars() const { return space.getNumDomainVars(); }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   51:  unsigned getNumSymbolVars() const { return space.getNumSymbolVars(); }
branch  0 never executed
branch  1 never executed
    #####:   52:  unsigned getNumOutputs() const { return space.getNumRangeVars(); }
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   53:  unsigned getNumDivs() const { return space.getNumLocalVars(); }
call    0 never executed
        -:   54:
        -:   55:  /// Get the space of this function.
    #####:   56:  const PresburgerSpace &getSpace() const { return space; }
call    0 never executed
call    1 never executed
        -:   57:  /// Get the domain/output space of the function. The returned space is a set
        -:   58:  /// space.
    #####:   59:  PresburgerSpace getDomainSpace() const { return space.getDomainSpace(); }
call    0 never executed
        -:   60:  PresburgerSpace getOutputSpace() const { return space.getRangeSpace(); }
        -:   61:
        -:   62:  /// Get a matrix with each row representing row^th output expression.
        -:   63:  const Matrix &getOutputMatrix() const { return output; }
        -:   64:  /// Get the `i^th` output expression.
    #####:   65:  ArrayRef<MPInt> getOutputExpr(unsigned i) const { return output.getRow(i); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   66:
        -:   67:  // Remove the specified range of outputs.
        -:   68:  void removeOutputs(unsigned start, unsigned end);
        -:   69:
        -:   70:  /// Given a MAF `other`, merges division variables such that both functions
        -:   71:  /// have the union of the division vars that exist in the functions.
        -:   72:  void mergeDivs(MultiAffineFunction &other);
        -:   73:
        -:   74:  //// Return the output of the function at the given point.
        -:   75:  SmallVector<MPInt, 8> valueAt(ArrayRef<MPInt> point) const;
        -:   76:  SmallVector<MPInt, 8> valueAt(ArrayRef<int64_t> point) const {
        -:   77:    return valueAt(getMPIntVec(point));
        -:   78:  }
        -:   79:
        -:   80:  /// Return whether the `this` and `other` are equal when the domain is
        -:   81:  /// restricted to `domain`. This is the case if they lie in the same space,
        -:   82:  /// and their outputs are equal for every point in `domain`.
        -:   83:  bool isEqual(const MultiAffineFunction &other) const;
        -:   84:  bool isEqual(const MultiAffineFunction &other,
        -:   85:               const IntegerPolyhedron &domain) const;
        -:   86:  bool isEqual(const MultiAffineFunction &other,
        -:   87:               const PresburgerSet &domain) const;
        -:   88:
        -:   89:  void subtract(const MultiAffineFunction &other);
        -:   90:
        -:   91:  /// Get this function as a relation.
        -:   92:  IntegerRelation getAsRelation() const;
        -:   93:
        -:   94:  void print(raw_ostream &os) const;
        -:   95:  void dump() const;
        -:   96:
        -:   97:private:
        -:   98:  /// Assert that the MAF is consistent.
        -:   99:  void assertIsConsistent() const;
        -:  100:
        -:  101:  /// The space of this function. The domain variables are considered as the
        -:  102:  /// input variables of the function. The range variables are considered as
        -:  103:  /// the outputs. The symbols parametrize the function and locals are used to
        -:  104:  /// represent divisions. Each local variable has a corressponding division
        -:  105:  /// representation stored in `divs`.
        -:  106:  PresburgerSpace space;
        -:  107:
        -:  108:  /// The function's output is a tuple of integers, with the ith element of the
        -:  109:  /// tuple defined by the affine expression given by the ith row of this output
        -:  110:  /// matrix.
        -:  111:  Matrix output;
        -:  112:
        -:  113:  /// Storage for division representation for each local variable in space.
        -:  114:  DivisionRepr divs;
        -:  115:};
        -:  116:
        -:  117:/// This class represents a piece-wise MultiAffineFunction. This can be thought
        -:  118:/// of as a list of MultiAffineFunction with disjoint domains, with each having
        -:  119:/// their own affine expressions for their output tuples. For example, we could
        -:  120:/// have a function with two input variables (x, y), defined as
        -:  121:///
        -:  122:/// f(x, y) = (2*x + y, y - 4)  if x >= 0, y >= 0
        -:  123:///         = (-2*x + y, y + 4) if x < 0,  y < 0
        -:  124:///         = (4, 1)            if x < 0,  y >= 0
        -:  125:///
        -:  126:/// Note that the domains all have to be *disjoint*. Otherwise, the behaviour of
        -:  127:/// this class is undefined. The domains need not cover all possible points;
        -:  128:/// this represents a partial function and so could be undefined at some points.
        -:  129:///
        -:  130:/// As in PresburgerSets, the input vars are partitioned into dimension vars and
        -:  131:/// symbolic vars.
        -:  132:///
        -:  133:/// Support is provided to compare equality of two such functions as well as
        -:  134:/// finding the value of the function at a point.
        -:  135:class PWMAFunction {
        -:  136:public:
    #####:  137:  struct Piece {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
        -:  138:    PresburgerSet domain;
        -:  139:    MultiAffineFunction output;
        -:  140:
function _ZNK4mlir10presburger12PWMAFunction5Piece12isConsistentEv called 0 returned 0% blocks executed 0%
    #####:  141:    bool isConsistent() const {
    #####:  142:      return domain.getSpace().isCompatible(output.getDomainSpace());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  143:    }
        -:  144:  };
        -:  145:
function _ZN4mlir10presburger12PWMAFunctionC2ERKNS0_15PresburgerSpaceE called 0 returned 0% blocks executed 0%
    #####:  146:  PWMAFunction(const PresburgerSpace &space) : space(space) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  147:    assert(space.getNumLocalVars() == 0 &&
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  148:           "PWMAFunction cannot have local vars.");
    #####:  149:  }
        -:  150:
        -:  151:  // Get the space of this function.
    #####:  152:  const PresburgerSpace &getSpace() const { return space; }
call    0 never executed
call    1 never executed
        -:  153:
        -:  154:  // Add a piece ([domain, output] pair) to this function.
        -:  155:  void addPiece(const Piece &piece);
        -:  156:
    #####:  157:  unsigned getNumPieces() const { return pieces.size(); }
call    0 never executed
        -:  158:  unsigned getNumVarKind(VarKind kind) const {
        -:  159:    return space.getNumVarKind(kind);
        -:  160:  }
    #####:  161:  unsigned getNumDomainVars() const { return space.getNumDomainVars(); }
branch  0 never executed
branch  1 never executed
    #####:  162:  unsigned getNumOutputs() const { return space.getNumRangeVars(); }
branch  0 never executed
branch  1 never executed
    #####:  163:  unsigned getNumSymbolVars() const { return space.getNumSymbolVars(); }
branch  0 never executed
branch  1 never executed
        -:  164:
        -:  165:  /// Remove the specified range of outputs.
        -:  166:  void removeOutputs(unsigned start, unsigned end);
        -:  167:
        -:  168:  /// Get the domain/output space of the function. The returned space is a set
        -:  169:  /// space.
    #####:  170:  PresburgerSpace getDomainSpace() const { return space.getDomainSpace(); }
call    0 never executed
        -:  171:  PresburgerSpace getOutputSpace() const { return space.getDomainSpace(); }
        -:  172:
        -:  173:  /// Return the domain of this piece-wise MultiAffineFunction. This is the
        -:  174:  /// union of the domains of all the pieces.
        -:  175:  PresburgerSet getDomain() const;
        -:  176:
        -:  177:  /// Return the output of the function at the given point.
        -:  178:  Optional<SmallVector<MPInt, 8>> valueAt(ArrayRef<MPInt> point) const;
        -:  179:  Optional<SmallVector<MPInt, 8>> valueAt(ArrayRef<int64_t> point) const {
        -:  180:    return valueAt(getMPIntVec(point));
        -:  181:  }
        -:  182:
        -:  183:  /// Return whether `this` and `other` are equal as PWMAFunctions, i.e. whether
        -:  184:  /// they have the same dimensions, the same domain and they take the same
        -:  185:  /// value at every point in the domain.
        -:  186:  bool isEqual(const PWMAFunction &other) const;
        -:  187:
        -:  188:  /// Return a function defined on the union of the domains of this and func,
        -:  189:  /// such that when only one of the functions is defined, it outputs the same
        -:  190:  /// as that function, and if both are defined, it outputs the lexmax/lexmin of
        -:  191:  /// the two outputs. On points where neither function is defined, the returned
        -:  192:  /// function is not defined either.
        -:  193:  ///
        -:  194:  /// Currently this does not support PWMAFunctions which have pieces containing
        -:  195:  /// divisions.
        -:  196:  /// TODO: Support division in pieces.
        -:  197:  PWMAFunction unionLexMin(const PWMAFunction &func);
        -:  198:  PWMAFunction unionLexMax(const PWMAFunction &func);
        -:  199:
        -:  200:  void print(raw_ostream &os) const;
        -:  201:  void dump() const;
        -:  202:
        -:  203:private:
        -:  204:  /// Return a function defined on the union of the domains of `this` and
        -:  205:  /// `func`, such that when only one of the functions is defined, it outputs
        -:  206:  /// the same as that function, and if neither is defined, the returned
        -:  207:  /// function is not defined either.
        -:  208:  ///
        -:  209:  /// The provided `tiebreak` function determines which of the two functions'
        -:  210:  /// output should be used on inputs where both the functions are defined. More
        -:  211:  /// precisely, given two `MultiAffineFunction`s `mafA` and `mafB`, `tiebreak`
        -:  212:  /// returns the subset of the intersection of the two functions' domains where
        -:  213:  /// the output of `mafA` should be used.
        -:  214:  ///
        -:  215:  /// The PresburgerSet returned by `tiebreak` should be disjoint.
        -:  216:  /// TODO: Remove this constraint of returning disjoint set.
        -:  217:  PWMAFunction unionFunction(
        -:  218:      const PWMAFunction &func,
        -:  219:      llvm::function_ref<PresburgerSet(Piece mafA, Piece mafB)> tiebreak) const;
        -:  220:
        -:  221:  /// The space of this function. The domain variables are considered as the
        -:  222:  /// input variables of the function. The range variables are considered as
        -:  223:  /// the outputs. The symbols paramterize the function.
        -:  224:  PresburgerSpace space;
        -:  225:
        -:  226:  // The pieces of the PWMAFunction.
        -:  227:  SmallVector<Piece, 4> pieces;
        -:  228:};
        -:  229:
        -:  230:} // namespace presburger
        -:  231:} // namespace mlir
        -:  232:
        -:  233:#endif // MLIR_ANALYSIS_PRESBURGER_PWMAFUNCTION_H
