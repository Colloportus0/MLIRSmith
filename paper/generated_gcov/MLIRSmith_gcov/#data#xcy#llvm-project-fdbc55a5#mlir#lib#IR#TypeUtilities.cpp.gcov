        -:    0:Source:/data/xcy/llvm-project-fdbc55a5/mlir/lib/IR/TypeUtilities.cpp
        -:    0:Graph:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/TypeUtilities.cpp.gcno
        -:    0:Data:../tools/mlir/lib/IR/CMakeFiles/obj.MLIRIR.dir/TypeUtilities.cpp.gcda
        -:    0:Runs:116164
        -:    1://===- TypeUtilities.cpp - Helper function for type queries ---------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8://
        -:    9:// This file defines generic type utilities.
        -:   10://
        -:   11://===----------------------------------------------------------------------===//
        -:   12:
        -:   13:#include "mlir/IR/TypeUtilities.h"
        -:   14:
        -:   15:#include <numeric>
        -:   16:
        -:   17:#include "mlir/IR/Attributes.h"
        -:   18:#include "mlir/IR/BuiltinTypes.h"
        -:   19:#include "mlir/IR/Types.h"
        -:   20:#include "mlir/IR/Value.h"
        -:   21:
        -:   22:using namespace mlir;
        -:   23:
function _ZN4mlir20getElementTypeOrSelfENS_4TypeE called 11990218145 returned 100% blocks executed 100%
11990218145:   24:Type mlir::getElementTypeOrSelf(Type type) {
11990218145:   25:  if (auto st = type.dyn_cast<ShapedType>())
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
5129999646:   26:    return st.getElementType();
call    0 returned 100%
6860223502:   27:  return type;
        -:   28:}
        -:   29:
function _ZN4mlir20getElementTypeOrSelfENS_5ValueE called 3179129805 returned 100% blocks executed 100%
3179129805:   30:Type mlir::getElementTypeOrSelf(Value val) {
3179129805:   31:  return getElementTypeOrSelf(val.getType());
call    0 returned 100%
        -:   32:}
        -:   33:
function _ZN4mlir20getElementTypeOrSelfENS_9AttributeE called 0 returned 0% blocks executed 0%
    #####:   34:Type mlir::getElementTypeOrSelf(Attribute attr) {
    #####:   35:  if (auto typedAttr = attr.dyn_cast<TypedAttr>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:    return getElementTypeOrSelf(typedAttr.getType());
call    0 never executed
call    1 never executed
    #####:   37:  return {};
        -:   38:}
        -:   39:
function _ZN4mlir17getFlattenedTypesENS_9TupleTypeE called 0 returned 0% blocks executed 0%
    #####:   40:SmallVector<Type, 10> mlir::getFlattenedTypes(TupleType t) {
    #####:   41:  SmallVector<Type, 10> fTypes;
call    0 never executed
    #####:   42:  t.getFlattenedTypes(fTypes);
call    0 never executed
    #####:   43:  return fTypes;
        -:   44:}
        -:   45:
        -:   46:/// Return true if the specified type is an opaque type with the specified
        -:   47:/// dialect and typeData.
function _ZN4mlir20isOpaqueTypeWithNameENS_4TypeEN4llvm9StringRefES2_ called 0 returned 0% blocks executed 0%
    #####:   48:bool mlir::isOpaqueTypeWithName(Type type, StringRef dialect,
        -:   49:                                StringRef typeData) {
    #####:   50:  if (auto opaque = type.dyn_cast<mlir::OpaqueType>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:    return opaque.getDialectNamespace() == dialect &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   52:           opaque.getTypeData() == typeData;
call    0 never executed
    #####:   53:  return false;
        -:   54:}
        -:   55:
        -:   56:/// Returns success if the given two shapes are compatible. That is, they have
        -:   57:/// the same size and each pair of the elements are equal or one of them is
        -:   58:/// dynamic.
function _ZN4mlir21verifyCompatibleShapeEN4llvm8ArrayRefIlEES2_ called 1127382407 returned 100% blocks executed 82%
1127382407:   59:LogicalResult mlir::verifyCompatibleShape(ArrayRef<int64_t> shape1,
        -:   60:                                          ArrayRef<int64_t> shape2) {
1127382407:   61:  if (shape1.size() != shape2.size())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   62:    return failure();
3160863728:   63:  for (auto dims : llvm::zip(shape1, shape2)) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
2033481321:   64:    int64_t dim1 = std::get<0>(dims);
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
2033481321:   65:    int64_t dim2 = std::get<1>(dims);
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
2033481321:   66:    if (!ShapedType::isDynamic(dim1) && !ShapedType::isDynamic(dim2) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   67:        dim1 != dim2)
    #####:   68:      return failure();
        -:   69:  }
1127382407:   70:  return success();
        -:   71:}
        -:   72:
        -:   73:/// Returns success if the given two types have compatible shape. That is,
        -:   74:/// they are both scalars (not shaped), or they are both shaped types and at
        -:   75:/// least one is unranked or they have compatible dimensions. Dimensions are
        -:   76:/// compatible if at least one is dynamic or both are equal. The element type
        -:   77:/// does not matter.
function _ZN4mlir21verifyCompatibleShapeENS_4TypeES0_ called 4487806818 returned 100% blocks executed 87%
4487806818:   78:LogicalResult mlir::verifyCompatibleShape(Type type1, Type type2) {
4487806818:   79:  auto sType1 = type1.dyn_cast<ShapedType>();
call    0 returned 100%
4487805721:   80:  auto sType2 = type2.dyn_cast<ShapedType>();
call    0 returned 100%
        -:   81:
        -:   82:  // Either both or neither type should be shaped.
4487812051:   83:  if (!sType1)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
3360428995:   84:    return success(!sType2);
1127383056:   85:  if (!sType2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   86:    return failure();
        -:   87:
1127383056:   88:  if (!sType1.hasRank() || !sType2.hasRank())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:   89:    return success();
        -:   90:
1127382747:   91:  return verifyCompatibleShape(sType1.getShape(), sType2.getShape());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   92:}
        -:   93:
        -:   94:/// Returns success if the given two arrays have the same number of elements and
        -:   95:/// each pair wise entries have compatible shape.
function _ZN4mlir22verifyCompatibleShapesENS_9TypeRangeES0_ called 160498267 returned 100% blocks executed 83%
160498267:   96:LogicalResult mlir::verifyCompatibleShapes(TypeRange types1, TypeRange types2) {
160498267:   97:  if (types1.size() != types2.size())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:    return failure();
481494801:   99:  for (auto it : llvm::zip_first(types1, types2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
160498267:  100:    if (failed(verifyCompatibleShape(std::get<0>(it), std::get<1>(it))))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  101:      return failure();
160498267:  102:  return success();
        -:  103:}
        -:  104:
function _ZN4mlir20verifyCompatibleDimsEN4llvm8ArrayRefIlEE called 2217477426 returned 100% blocks executed 89%
2217477426:  105:LogicalResult mlir::verifyCompatibleDims(ArrayRef<int64_t> dims) {
2217477426:  106:  if (dims.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  107:    return success();
2217477426:  108:  auto staticDim = std::accumulate(
7347068881:  109:      dims.begin(), dims.end(), dims.front(), [](auto fold, auto dim) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5129591455:  110:        return ShapedType::isDynamic(dim) ? fold : dim;
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
2217477426:  111:      });
2217477426:  112:  return success(llvm::all_of(dims, [&](auto dim) {
        -:  113:    return ShapedType::isDynamic(dim) || dim == staticDim;
2217477426:  114:  }));
        -:  115:}
        -:  116:
        -:  117:/// Returns success if all given types have compatible shapes. That is, they are
        -:  118:/// all scalars (not shaped), or they are all shaped types and any ranked shapes
        -:  119:/// have compatible dimensions. Dimensions are compatible if all non-dynamic
        -:  120:/// dims are equal. The element type does not matter.
function _ZN4mlir22verifyCompatibleShapesENS_9TypeRangeE called 1367476708 returned 100% blocks executed 76%
1367476708:  121:LogicalResult mlir::verifyCompatibleShapes(TypeRange types) {
2734952290:  122:  auto shapedTypes = llvm::to_vector<8>(llvm::map_range(
4494372247:  123:      types, [](auto type) { return type.template dyn_cast<ShapedType>(); }));
call    0 returned 100%
call    1 returned 100%
        -:  124:  // Return failure if some, but not all are not shaped. Return early if none
        -:  125:  // are shaped also.
1367475582:  126:  if (llvm::none_of(shapedTypes, [](auto t) { return t; }))
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
174463343:  127:    return success();
1193012239:  128:  if (!llvm::all_of(shapedTypes, [](auto t) { return t; }))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  129:    return failure();
        -:  130:
        -:  131:  // Return failure if some, but not all, are scalable vectors.
        -:  132:  bool hasScalableVecTypes = false;
        -:  133:  bool hasNonScalableVecTypes = false;
3957016059:  134:  for (Type t : types) {
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
call    2 returned 100%
2764003596:  135:    auto vType = t.dyn_cast<VectorType>();
call    0 returned 100%
3001918508:  136:    if (vType && vType.isScalable())
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  137:      hasScalableVecTypes = true;
        -:  138:    else
        -:  139:      hasNonScalableVecTypes = true;
2764003820:  140:    if (hasScalableVecTypes && hasNonScalableVecTypes)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  141:      return failure();
        -:  142:  }
        -:  143:
        -:  144:  // Remove all unranked shapes
2386024924:  145:  auto shapes = llvm::to_vector<8>(llvm::make_filter_range(
6895482651:  146:      shapedTypes, [](auto shapedType) { return shapedType.hasRank(); }));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
1193012386:  147:  if (shapes.empty())
branch  0 taken 0%
branch  1 taken 100%
    #####:  148:    return success();
        -:  149:
        -:  150:  // All ranks should be equal
1193012386:  151:  auto firstRank = shapes.front().getRank();
call    0 returned 100%
1193012239:  152:  if (llvm::any_of(shapes,
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  153:                   [&](auto shape) { return firstRank != shape.getRank(); }))
    #####:  154:    return failure();
        -:  155:
3410489908:  156:  for (unsigned i = 0; i < firstRank; ++i) {
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -:  157:    // Retrieve all ranked dimensions
4434954645:  158:    auto dims = llvm::to_vector<8>(llvm::map_range(
2217477408:  159:        llvm::make_filter_range(
10259173019:  160:            shapes, [&](auto shape) { return shape.getRank() >= i; }),
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
9564546265:  161:        [&](auto shape) { return shape.getDimSize(i); }));
call    0 returned 100%
call    1 returned 100%
2217477408:  162:    if (verifyCompatibleDims(dims).failed())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  163:      return failure();
branch  0 never executed
branch  1 never executed
        -:  164:  }
        -:  165:
1193012671:  166:  return success();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  167:}
        -:  168:
function _ZNK4mlir26OperandElementTypeIterator10mapElementENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  169:Type OperandElementTypeIterator::mapElement(Value value) const {
    #####:  170:  return value.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
        -:  171:}
        -:  172:
function _ZNK4mlir25ResultElementTypeIterator10mapElementENS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  173:Type ResultElementTypeIterator::mapElement(Value value) const {
    #####:  174:  return value.getType().cast<ShapedType>().getElementType();
call    0 never executed
call    1 never executed
        -:  175:}
